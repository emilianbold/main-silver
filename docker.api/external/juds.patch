diff --git a/com/etsy/net/JUDS.java b/com/etsy/net/JUDS.java
index 28fb595..359776f 100644
--- a/com/etsy/net/JUDS.java
+++ b/com/etsy/net/JUDS.java
@@ -35,10 +35,30 @@ public class JUDS {
                 throw new RuntimeException("Unable to create URL from path " + System.getenv("JUDSDIR"));
             }
         } else {
-            jarURL = JUDS.class
+            URL url = JUDS.class
                 .getProtectionDomain()
                 .getCodeSource()
                 .getLocation();
+
+            URL prepared = null;
+            if ("jar".equals(url.getProtocol()) || "wsjar".equals(url.getProtocol())) {    
+                String filePath = url.getPath();
+                int end = filePath.indexOf("!/");
+                if (end >= 0) {
+                    filePath = filePath.substring(0, end);
+                    if (filePath.contains("file://") && !filePath.contains("file:////")) {
+                        filePath = filePath.replaceFirst("file://", "file:////");
+                    }
+                    try {
+                        prepared = new URL(filePath);
+                    } catch (MalformedURLException ex) {
+                    }
+                }
+            }
+            if (prepared == null) {
+                prepared = url;
+            }
+            jarURL = prepared;
         }
     }
 
diff --git a/com/etsy/net/UnixDomainSocket.c b/com/etsy/net/UnixDomainSocket.c
index 7da4a36..6e84ffe 100644
--- a/com/etsy/net/UnixDomainSocket.c
+++ b/com/etsy/net/UnixDomainSocket.c
@@ -147,13 +147,13 @@ Java_com_etsy_net_UnixDomainSocket_nativeOpen(JNIEnv * jEnv,
 
     timeout.tv_sec = 10;
     timeout.tv_usec = 0;
-    if (setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, (char *)&timeout, sizeof(timeout)) < 0) {
-        perror("nativeOpen: setsockopt SO_RCVTIMEO failed");
-    }
+//    if (setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, (char *)&timeout, sizeof(timeout)) < 0) {
+//        perror("nativeOpen: setsockopt SO_RCVTIMEO failed");
+//    }
 
-    if (setsockopt(s, SOL_SOCKET, SO_SNDTIMEO, (char *)&timeout, sizeof(timeout)) < 0) {
-        perror("nativeOpen: setsockopt SO_SNDTIMEO failed");
-    }
+//    if (setsockopt(s, SOL_SOCKET, SO_SNDTIMEO, (char *)&timeout, sizeof(timeout)) < 0) {
+//        perror("nativeOpen: setsockopt SO_SNDTIMEO failed");
+//    }
 
     (*jEnv)->ReleaseStringUTFChars(jEnv, jSocketFile, socketFile);
 
diff --git a/com/etsy/net/UnixDomainSocket.java b/com/etsy/net/UnixDomainSocket.java
index b7382a7..e4260dc 100644
--- a/com/etsy/net/UnixDomainSocket.java
+++ b/com/etsy/net/UnixDomainSocket.java
@@ -25,6 +25,9 @@ import java.net.URISyntaxException;
  */
 public abstract class UnixDomainSocket {
 
+    // system property holding the preferred folder for copying the so file to.
+    private static final String SO_TARGET = "juds.folder.preferred";
+    
     private static File jarFile;
     static {
         // Load the Unix domain socket C library
@@ -83,21 +86,29 @@ public abstract class UnixDomainSocket {
         String p = platform();
         String ext = "darwin".equals(p) ? "dylib" : "so";
 
-        File tmpdir = File.createTempFile("juds-temp", Long.toString(System.nanoTime()));
+        File tmpdir;
+        String preferred = System.getProperty(SO_TARGET);
+        if (preferred != null) {
+            tmpdir = new File(preferred);
+        } else {
+            tmpdir = File.createTempFile("juds-temp", Long.toString(System.nanoTime()));
 
-        if(!(tmpdir.delete())) {
-            throw new IOException("Could not delete temp file: " + tmpdir.getAbsolutePath());
-        }
+            if(!(tmpdir.delete())) {
+                throw new IOException("Could not delete temp file: " + tmpdir.getAbsolutePath());
+            }
 
-        if(!(tmpdir.mkdir())) {
-            throw new IOException("Could not create temp directory: " + tmpdir.getAbsolutePath());
-        }
+            if(!(tmpdir.mkdir())) {
+                throw new IOException("Could not create temp directory: " + tmpdir.getAbsolutePath());
+            }
 
-        tmpdir.deleteOnExit();
+            tmpdir.deleteOnExit();
+        }
 
-        String path = String.format(tmpdir.getAbsolutePath() + "/libunixdomainsocket-%s-%s.%s", p, arch(), ext);
-        File lib = new File(path);
-        lib.deleteOnExit();
+        String path = String.format("libunixdomainsocket-%s-%s.%s", p, arch(), ext);
+        File lib = new File(tmpdir, path);
+        if (preferred == null) {
+            lib.deleteOnExit();
+        }
         return lib;
     }
 
