/* The following code was generated by JFlex 1.4.3 on 4/4/16 5:24 PM */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2011 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development and
 * Distribution License("CDDL") (collectively, the "License"). You may not use
 * this file except in compliance with the License. You can obtain a copy of
 * the License at http://www.netbeans.org/cddl-gplv2.html or
 * nbbuild/licenses/CDDL-GPL-2-CP. See the License for the specific language
 * governing permissions and limitations under the License. When distributing
 * the software, include this License Header Notice in each file and include
 * the License file at nbbuild/licenses/CDDL-GPL-2-CP. Oracle designates this
 * particular file as subject to the "Classpath" exception as provided by
 * Oracle in the GPL Version 2 section of the License file that accompanied
 * this code. If applicable, add the following below the License Header, with
 * the fields enclosed by brackets [] replaced by your own identifying
 * information: "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license." If you do not indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to its
 * licensees as provided above. However, if you add GPL Version 2 code and
 * therefore, elected the GPL Version 2 license, then the option applies only
 * if the new code is made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2011 Sun Microsystems, Inc.
 */

package org.netbeans.modules.javascript2.lexer;

import java.util.LinkedList;
import org.netbeans.modules.javascript2.lexer.api.JsTokenId;
import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/4/16 5:24 PM from the specification file
 * <tt>/home/petr/workspace/web-main/javascript2.lexer/tools/JsColoringScanner.flex</tt>
 */
public final class JsColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int REGEXPEND = 22;
  public static final int LCOMMENTEND = 24;
  public static final int INITIAL = 2;
  public static final int SSTRINGEND = 10;
  public static final int STRINGEND = 6;
  public static final int ERROR = 26;
  public static final int SSTRING = 8;
  public static final int STRING = 4;
  public static final int TEMPLATEEXPEND = 18;
  public static final int REGEXP = 20;
  public static final int YYINITIAL = 0;
  public static final int TEMPLATEEXP = 16;
  public static final int TEMPLATEEND = 14;
  public static final int TEMPLATE = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\3\1\2\2\3\1\1\16\10\4\0\1\3\1\7\1\30"+
    "\1\6\1\27\1\104\1\100\1\32\1\65\1\66\1\5\1\102\1\72"+
    "\1\25\1\23\1\4\1\12\1\20\2\17\4\21\2\13\1\77\1\71"+
    "\1\74\1\64\1\73\1\76\1\0\3\16\1\22\1\24\1\22\5\11"+
    "\1\14\13\11\1\15\2\11\1\33\1\31\1\34\1\103\1\11\1\26"+
    "\1\40\1\35\1\42\1\52\1\37\1\54\1\53\1\45\1\50\1\11"+
    "\1\41\1\55\1\63\1\47\1\46\1\60\1\11\1\36\1\43\1\44"+
    "\1\51\1\61\1\57\1\62\1\56\1\11\1\67\1\101\1\70\1\75"+
    "\41\10\1\3\1\0\4\11\4\0\1\11\2\0\1\10\7\0\1\11"+
    "\4\0\1\11\5\0\27\11\1\0\37\11\1\0\u01ca\11\4\0\14\11"+
    "\16\0\5\11\7\0\1\11\1\0\1\11\21\0\160\10\5\11\1\0"+
    "\2\11\2\0\4\11\10\0\1\11\1\0\3\11\1\0\1\11\1\0"+
    "\24\11\1\0\123\11\1\0\213\11\1\0\5\10\2\0\236\11\11\0"+
    "\46\11\2\0\1\11\7\0\47\11\7\0\1\11\1\0\55\10\1\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\1\10\10\0\33\11\5\0"+
    "\3\11\15\0\5\10\6\0\1\11\4\0\13\10\5\0\53\11\37\10"+
    "\4\0\2\11\1\10\143\11\1\0\1\11\10\10\1\0\6\10\2\11"+
    "\2\10\1\0\4\10\2\11\12\10\3\11\2\0\1\11\17\0\1\10"+
    "\1\11\1\10\36\11\33\10\2\0\131\11\13\10\1\11\16\0\12\10"+
    "\41\11\11\10\2\11\4\0\1\11\5\0\26\11\4\10\1\11\11\10"+
    "\1\11\3\10\1\11\5\10\22\0\31\11\3\10\104\0\1\11\1\0"+
    "\13\11\67\0\33\10\1\0\4\10\66\11\3\10\1\11\22\10\1\11"+
    "\7\10\12\11\2\10\2\0\12\10\1\0\7\11\1\0\7\11\1\0"+
    "\3\10\1\0\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0"+
    "\1\11\3\0\4\11\2\0\1\10\1\11\7\10\2\0\2\10\2\0"+
    "\3\10\1\11\10\0\1\10\4\0\2\11\1\0\3\11\2\10\2\0"+
    "\12\10\4\11\7\0\1\11\5\0\3\10\1\0\6\11\4\0\2\11"+
    "\2\0\26\11\1\0\7\11\1\0\2\11\1\0\2\11\1\0\2\11"+
    "\2\0\1\10\1\0\5\10\4\0\2\10\2\0\3\10\3\0\1\10"+
    "\7\0\4\11\1\0\1\11\7\0\14\10\3\11\1\10\13\0\3\10"+
    "\1\0\11\11\1\0\3\11\1\0\26\11\1\0\7\11\1\0\2\11"+
    "\1\0\5\11\2\0\1\10\1\11\10\10\1\0\3\10\1\0\3\10"+
    "\2\0\1\11\17\0\2\11\2\10\2\0\12\10\1\0\1\11\17\0"+
    "\3\10\1\0\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0"+
    "\2\11\1\0\5\11\2\0\1\10\1\11\7\10\2\0\2\10\2\0"+
    "\3\10\10\0\2\10\4\0\2\11\1\0\3\11\2\10\2\0\12\10"+
    "\1\0\1\11\20\0\1\10\1\11\1\0\6\11\3\0\3\11\1\0"+
    "\4\11\3\0\2\11\1\0\1\11\1\0\2\11\3\0\2\11\3\0"+
    "\3\11\3\0\14\11\4\0\5\10\3\0\3\10\1\0\4\10\2\0"+
    "\1\11\6\0\1\10\16\0\12\10\11\0\1\11\7\0\3\10\1\0"+
    "\10\11\1\0\3\11\1\0\27\11\1\0\12\11\1\0\5\11\3\0"+
    "\1\11\7\10\1\0\3\10\1\0\4\10\7\0\2\10\1\0\2\11"+
    "\6\0\2\11\2\10\2\0\12\10\22\0\2\10\1\0\10\11\1\0"+
    "\3\11\1\0\27\11\1\0\12\11\1\0\5\11\2\0\1\10\1\11"+
    "\7\10\1\0\3\10\1\0\4\10\7\0\2\10\7\0\1\11\1\0"+
    "\2\11\2\10\2\0\12\10\1\0\2\11\17\0\2\10\1\0\10\11"+
    "\1\0\3\11\1\0\51\11\2\0\1\11\7\10\1\0\3\10\1\0"+
    "\4\10\1\11\10\0\1\10\10\0\2\11\2\10\2\0\12\10\12\0"+
    "\6\11\2\0\2\10\1\0\22\11\3\0\30\11\1\0\11\11\1\0"+
    "\1\11\2\0\7\11\3\0\1\10\4\0\6\10\1\0\1\10\1\0"+
    "\10\10\22\0\2\10\15\0\60\11\1\10\2\11\7\10\4\0\10\11"+
    "\10\10\1\0\12\10\47\0\2\11\1\0\1\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\6\0\4\11\1\0\7\11\1\0\3\11\1\0"+
    "\1\11\1\0\1\11\2\0\2\11\1\0\4\11\1\10\2\11\6\10"+
    "\1\0\2\10\1\11\2\0\5\11\1\0\1\11\1\0\6\10\2\0"+
    "\12\10\2\0\4\11\40\0\1\11\27\0\2\10\6\0\12\10\13\0"+
    "\1\10\1\0\1\10\1\0\1\10\4\0\2\10\10\11\1\0\44\11"+
    "\4\0\24\10\1\0\2\10\5\11\13\10\1\0\44\10\11\0\1\10"+
    "\71\0\53\11\24\10\1\11\12\10\6\0\6\11\4\10\4\11\3\10"+
    "\1\11\3\10\2\11\7\10\3\11\4\10\15\11\14\10\1\11\17\10"+
    "\2\0\46\11\1\0\1\11\5\0\1\11\2\0\53\11\1\0\u014d\11"+
    "\1\0\4\11\2\0\7\11\1\0\1\11\1\0\4\11\2\0\51\11"+
    "\1\0\4\11\2\0\41\11\1\0\4\11\2\0\7\11\1\0\1\11"+
    "\1\0\4\11\2\0\17\11\1\0\71\11\1\0\4\11\2\0\103\11"+
    "\2\0\3\10\40\0\20\11\20\0\125\11\14\0\u026c\11\2\0\21\11"+
    "\1\0\32\11\5\0\113\11\3\0\3\11\17\0\15\11\1\0\4\11"+
    "\3\10\13\0\22\11\3\10\13\0\22\11\2\10\14\0\15\11\1\0"+
    "\3\11\1\0\2\10\14\0\64\11\40\10\3\0\1\11\3\0\2\11"+
    "\1\10\2\0\12\10\41\0\3\10\2\0\12\10\6\0\130\11\10\0"+
    "\51\11\1\10\1\11\5\0\106\11\12\0\35\11\3\0\14\10\4\0"+
    "\14\10\12\0\12\10\36\11\2\0\5\11\13\0\54\11\4\0\21\10"+
    "\7\11\2\10\6\0\12\10\46\0\27\11\5\10\4\0\65\11\12\10"+
    "\1\0\35\10\2\0\13\10\6\0\12\10\15\0\1\11\130\0\5\10"+
    "\57\11\21\10\7\11\4\0\12\10\21\0\11\10\14\0\3\10\36\11"+
    "\15\10\2\11\12\10\54\11\16\10\14\0\44\11\24\10\10\0\12\10"+
    "\3\0\3\11\12\10\44\11\122\0\3\10\1\0\25\10\4\11\1\10"+
    "\4\11\3\10\2\11\11\0\300\11\47\10\25\0\4\10\u0116\11\2\0"+
    "\6\11\2\0\46\11\2\0\6\11\2\0\10\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\37\11\2\0\65\11\1\0\7\11\1\0"+
    "\1\11\3\0\3\11\1\0\7\11\3\0\4\11\2\0\6\11\4\0"+
    "\15\11\5\0\3\11\1\0\7\11\16\0\5\10\32\0\5\10\20\0"+
    "\2\11\23\0\1\11\13\0\5\10\5\0\6\10\1\0\1\11\15\0"+
    "\1\11\20\0\15\11\3\0\33\11\25\0\15\10\4\0\1\10\3\0"+
    "\14\10\21\0\1\11\4\0\1\11\2\0\12\11\1\0\1\11\3\0"+
    "\5\11\6\0\1\11\1\0\1\11\1\0\1\11\1\0\4\11\1\0"+
    "\13\11\2\0\4\11\5\0\5\11\4\0\1\11\21\0\51\11\u0a77\0"+
    "\57\11\1\0\57\11\1\0\205\11\6\0\4\11\3\10\2\11\14\0"+
    "\46\11\1\0\1\11\5\0\1\11\2\0\70\11\7\0\1\11\17\0"+
    "\1\10\27\11\11\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11"+
    "\1\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0\40\10"+
    "\57\0\1\11\u01d5\0\3\11\31\0\11\11\6\10\1\0\5\11\2\0"+
    "\5\11\4\0\126\11\2\0\2\10\2\0\3\11\1\0\132\11\1\0"+
    "\4\11\5\0\51\11\3\0\136\11\21\0\33\11\65\0\20\11\u0200\0"+
    "\u19b6\11\112\0\u51cd\11\63\0\u048d\11\103\0\56\11\2\0\u010d\11\3\0"+
    "\20\11\12\10\2\11\24\0\57\11\1\10\4\0\12\10\1\0\31\11"+
    "\7\0\1\10\120\11\2\10\45\0\11\11\2\0\147\11\2\0\4\11"+
    "\1\0\4\11\14\0\13\11\115\0\12\11\1\10\3\11\1\10\4\11"+
    "\1\10\27\11\5\10\20\0\1\11\7\0\64\11\14\0\2\10\62\11"+
    "\21\10\13\0\12\10\6\0\22\10\6\11\3\0\1\11\4\0\12\10"+
    "\34\11\10\10\2\0\27\11\15\10\14\0\35\11\3\0\4\10\57\11"+
    "\16\10\16\0\1\11\12\10\46\0\51\11\16\10\11\0\3\11\1\10"+
    "\10\11\2\10\2\0\12\10\6\0\27\11\3\0\1\11\1\10\4\0"+
    "\60\11\1\10\1\11\3\10\2\11\2\10\5\11\2\10\1\11\1\10"+
    "\1\11\30\0\3\11\2\0\13\11\5\10\2\0\3\11\2\10\12\0"+
    "\6\11\2\0\6\11\2\0\6\11\11\0\7\11\1\0\7\11\221\0"+
    "\43\11\10\10\1\0\2\10\2\0\12\10\6\0\u2ba4\11\14\0\27\11"+
    "\4\0\61\11\u2104\0\u016e\11\2\0\152\11\46\0\7\11\14\0\5\11"+
    "\5\0\1\11\1\10\12\11\1\0\15\11\1\0\5\11\1\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\154\11\41\0\u016b\11\22\0\100\11"+
    "\2\0\66\11\50\0\15\11\3\0\20\10\20\0\7\10\14\0\2\11"+
    "\30\0\3\11\31\0\1\11\6\0\5\11\1\0\207\11\2\0\1\10"+
    "\4\0\1\11\13\0\12\10\7\0\32\11\4\0\1\11\1\0\32\11"+
    "\13\0\131\11\3\0\6\11\2\0\6\11\2\0\6\11\2\0\3\11"+
    "\3\0\2\11\3\0\2\11\22\0\3\10\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\1\0\2\2\1\3\2\4\1\5\1\6"+
    "\1\7\1\10\1\11\2\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\20\11\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\2\44\1\45"+
    "\1\3\1\46\1\43\2\47\1\3\1\50\1\43\1\51"+
    "\2\3\1\52\1\3\1\53\4\54\1\55\2\1\1\3"+
    "\1\44\1\56\1\3\1\57\1\60\1\61\3\12\1\0"+
    "\3\12\2\0\1\62\1\63\21\11\1\64\1\65\2\11"+
    "\1\66\15\11\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\0\4\43\1\0\1\43\1\105\1\106\1\0\1\107"+
    "\6\0\1\110\4\12\1\0\1\111\17\11\1\112\3\11"+
    "\1\113\10\11\1\114\2\11\1\115\7\11\1\116\1\11"+
    "\1\117\1\120\1\121\1\122\2\0\1\123\2\12\2\11"+
    "\1\124\1\125\3\11\1\126\7\11\1\127\1\11\1\130"+
    "\1\11\1\131\14\11\1\132\4\11\1\133\1\134\1\0"+
    "\2\12\1\135\3\11\1\136\1\137\1\140\1\11\1\141"+
    "\1\11\1\142\1\11\1\143\10\11\1\144\2\11\1\145"+
    "\1\146\4\11\1\147\2\12\1\150\1\11\1\151\1\11"+
    "\1\152\1\153\1\154\2\11\1\155\3\11\1\156\5\11"+
    "\1\157\2\12\1\160\5\11\1\161\1\162\2\11\1\163"+
    "\1\164\2\12\1\165\3\11\1\166\1\167\1\11\2\12"+
    "\1\11\1\170\1\11\1\171\2\12\1\172\1\173\1\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\5\12";

  private static int [] zzUnpackAction() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u03c6\0\u0450\0\u03c6\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9"+
    "\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u03c6\0\u03c6\0\u03c6\0\u03c6"+
    "\0\u03c6\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b\0\u08a0"+
    "\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u09f9\0\u0a3e\0\u0a83\0\u0ac8"+
    "\0\u0b0d\0\u0b52\0\u03c6\0\u03c6\0\u03c6\0\u03c6\0\u03c6\0\u03c6"+
    "\0\u0b97\0\u0bdc\0\u03c6\0\u03c6\0\u03c6\0\u0c21\0\u0c66\0\u0cab"+
    "\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf\0\u03c6\0\u03c6\0\u0e04\0\u03c6"+
    "\0\u0e49\0\u0e8e\0\u03c6\0\u0ed3\0\u03c6\0\u0f18\0\u03c6\0\u0f5d"+
    "\0\u0fa2\0\u03c6\0\u0fe7\0\u03c6\0\u102c\0\u03c6\0\u1071\0\u10b6"+
    "\0\u10fb\0\u1140\0\u03c6\0\u1185\0\u1185\0\u11ca\0\u120f\0\u03c6"+
    "\0\u03c6\0\u1254\0\u1299\0\u12de\0\u03c6\0\u1323\0\u1368\0\u13ad"+
    "\0\u13f2\0\u1437\0\u147c\0\u03c6\0\u03c6\0\u14c1\0\u1506\0\u154b"+
    "\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773"+
    "\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956\0\u05a9"+
    "\0\u199b\0\u19e0\0\u05a9\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39"+
    "\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61"+
    "\0\u1da6\0\u03c6\0\u03c6\0\u1deb\0\u03c6\0\u1e30\0\u03c6\0\u03c6"+
    "\0\u03c6\0\u03c6\0\u03c6\0\u03c6\0\u03c6\0\u03c6\0\u1e75\0\u03c6"+
    "\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u03c6\0\u03c6\0\u102c"+
    "\0\u03c6\0\u1071\0\u10b6\0\u2013\0\u1185\0\u2058\0\u209d\0\u03c6"+
    "\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u03c6\0\u223b\0\u2280"+
    "\0\u22c5\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463\0\u24a8"+
    "\0\u24ed\0\u2532\0\u2577\0\u25bc\0\u2601\0\u05a9\0\u2646\0\u268b"+
    "\0\u26d0\0\u05a9\0\u2715\0\u275a\0\u279f\0\u27e4\0\u2829\0\u286e"+
    "\0\u28b3\0\u28f8\0\u05a9\0\u293d\0\u2982\0\u05a9\0\u29c7\0\u2a0c"+
    "\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u05a9\0\u2baa\0\u03c6"+
    "\0\u03c6\0\u2bef\0\u03c6\0\u2c34\0\u2c79\0\u03c6\0\u2cbe\0\u2d03"+
    "\0\u2d48\0\u2d8d\0\u05a9\0\u05a9\0\u2dd2\0\u2e17\0\u2e5c\0\u05a9"+
    "\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5\0\u2ffa\0\u303f\0\u05a9"+
    "\0\u3084\0\u05a9\0\u30c9\0\u05a9\0\u310e\0\u3153\0\u3198\0\u31dd"+
    "\0\u3222\0\u3267\0\u32ac\0\u32f1\0\u3336\0\u337b\0\u33c0\0\u3405"+
    "\0\u05a9\0\u344a\0\u348f\0\u34d4\0\u3519\0\u05a9\0\u03c6\0\u355e"+
    "\0\u35a3\0\u35e8\0\u05a9\0\u362d\0\u3672\0\u36b7\0\u05a9\0\u05a9"+
    "\0\u05a9\0\u36fc\0\u05a9\0\u3741\0\u05a9\0\u3786\0\u05a9\0\u37cb"+
    "\0\u3810\0\u3855\0\u389a\0\u38df\0\u3924\0\u3969\0\u39ae\0\u05a9"+
    "\0\u39f3\0\u3a38\0\u05a9\0\u05a9\0\u3a7d\0\u3ac2\0\u3b07\0\u3b4c"+
    "\0\u03c6\0\u3b91\0\u3bd6\0\u05a9\0\u3c1b\0\u05a9\0\u3c60\0\u05a9"+
    "\0\u05a9\0\u05a9\0\u3ca5\0\u3cea\0\u05a9\0\u3d2f\0\u3d74\0\u3db9"+
    "\0\u05a9\0\u3dfe\0\u3e43\0\u3e88\0\u3ecd\0\u3f12\0\u05a9\0\u3f57"+
    "\0\u3f9c\0\u05a9\0\u3fe1\0\u4026\0\u406b\0\u40b0\0\u40f5\0\u05a9"+
    "\0\u05a9\0\u413a\0\u417f\0\u05a9\0\u05a9\0\u41c4\0\u4209\0\u05a9"+
    "\0\u424e\0\u4293\0\u42d8\0\u05a9\0\u05a9\0\u431d\0\u4362\0\u43a7"+
    "\0\u43ec\0\u05a9\0\u4431\0\u05a9\0\u4476\0\u44bb\0\u05a9\0\u05a9"+
    "\0\u4500\0\u4545\0\u458a\0\u45cf\0\u4614\0\u4659\0\u469e\0\u46e3"+
    "\0\u4728\0\u476d\0\u47b2\0\u47f7\0\u483c\0\u4881\0\u48c6\0\u490b"+
    "\0\u4950\0\u4995\0\u49da\0\u4a1f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\6\17\1\20\76\17\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\21\1\27\1\21\1\30\1\31\1\32\3\30"+
    "\3\32\1\30\1\33\1\30\1\34\1\35\1\30\1\36"+
    "\1\21\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\30\1\46\1\47\1\50\2\30\1\51\1\52\1\30"+
    "\1\53\1\30\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\2\30\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\25\103\1\106\1\107"+
    "\53\103\30\21\1\110\54\21\1\111\1\112\1\113\26\111"+
    "\1\114\1\115\52\111\32\21\1\110\52\21\26\116\1\117"+
    "\1\120\1\116\1\121\53\116\26\21\1\122\105\21\1\123"+
    "\145\21\1\124\14\21\1\125\1\126\1\21\1\125\2\126"+
    "\23\125\1\127\1\125\1\130\51\125\2\126\1\21\1\126"+
    "\1\131\100\126\1\21\1\132\1\133\102\21\1\134\1\135"+
    "\1\105\102\134\114\0\1\136\77\0\1\23\105\0\1\24"+
    "\105\0\1\136\1\137\56\0\1\140\104\0\1\141\104\0"+
    "\1\142\30\0\13\30\1\0\1\30\2\0\1\30\5\0"+
    "\27\30\33\0\1\143\1\144\1\145\1\146\1\0\1\147"+
    "\1\150\1\147\1\145\1\151\1\152\12\0\1\152\12\0"+
    "\1\145\1\0\2\145\4\0\1\146\34\0\2\32\1\145"+
    "\2\0\3\32\1\145\1\151\1\152\12\0\1\152\12\0"+
    "\1\145\1\0\2\145\41\0\2\151\3\0\3\151\1\0"+
    "\1\153\106\0\1\154\36\0\1\155\30\0\13\30\1\0"+
    "\1\30\2\0\1\30\5\0\1\30\1\156\25\30\31\0"+
    "\13\30\1\0\1\30\2\0\1\30\5\0\2\30\1\157"+
    "\24\30\31\0\13\30\1\0\1\30\2\0\1\30\5\0"+
    "\12\30\1\160\5\30\1\161\4\30\1\162\1\30\31\0"+
    "\13\30\1\0\1\30\2\0\1\30\5\0\22\30\1\163"+
    "\4\30\31\0\13\30\1\0\1\30\2\0\1\30\5\0"+
    "\3\30\1\164\5\30\1\165\6\30\1\166\6\30\31\0"+
    "\13\30\1\0\1\30\2\0\1\30\5\0\7\30\1\167"+
    "\4\30\1\170\5\30\1\171\4\30\31\0\13\30\1\0"+
    "\1\30\2\0\1\30\5\0\1\30\1\172\6\30\1\173"+
    "\10\30\1\174\5\30\31\0\13\30\1\0\1\30\2\0"+
    "\1\30\5\0\2\30\1\175\11\30\1\176\12\30\31\0"+
    "\13\30\1\0\1\30\2\0\1\30\5\0\12\30\1\177"+
    "\4\30\1\200\6\30\1\201\31\0\13\30\1\0\1\30"+
    "\2\0\1\30\5\0\2\30\1\202\6\30\1\203\15\30"+
    "\31\0\13\30\1\0\1\30\2\0\1\30\5\0\3\30"+
    "\1\204\5\30\1\205\1\30\1\206\1\207\12\30\31\0"+
    "\13\30\1\0\1\30\2\0\1\30\5\0\2\30\1\210"+
    "\24\30\31\0\13\30\1\0\1\30\2\0\1\30\5\0"+
    "\13\30\1\211\13\30\31\0\13\30\1\0\1\30\2\0"+
    "\1\30\5\0\10\30\1\212\2\30\1\213\13\30\31\0"+
    "\13\30\1\0\1\30\2\0\1\30\5\0\1\30\1\214"+
    "\1\30\1\215\10\30\1\216\12\30\31\0\13\30\1\0"+
    "\1\30\2\0\1\30\5\0\3\30\1\217\5\30\1\220"+
    "\15\30\105\0\1\221\6\0\1\222\75\0\1\223\6\0"+
    "\1\224\75\0\1\225\7\0\1\226\74\0\1\227\13\0"+
    "\1\230\70\0\1\231\14\0\1\232\67\0\1\233\15\0"+
    "\1\234\66\0\1\235\104\0\1\236\20\0\1\103\2\0"+
    "\25\103\1\0\1\237\53\103\2\0\1\105\102\0\1\240"+
    "\1\241\1\103\7\240\1\242\4\240\2\242\1\243\63\240"+
    "\1\111\2\0\26\111\1\244\1\0\52\111\2\0\1\113"+
    "\102\0\1\240\1\245\1\111\7\240\1\242\4\240\2\242"+
    "\1\243\63\240\26\116\2\0\1\116\1\0\53\116\67\0"+
    "\1\246\15\0\2\240\1\0\102\240\67\0\1\247\15\0"+
    "\1\250\2\0\1\250\1\251\24\250\1\252\1\250\1\253"+
    "\52\250\2\0\102\250\1\253\2\0\26\253\1\254\2\253"+
    "\1\250\50\253\10\0\13\131\1\0\1\131\2\0\1\131"+
    "\5\0\27\131\23\0\1\133\102\0\1\255\1\135\1\105"+
    "\102\255\1\136\2\0\102\136\5\256\1\257\77\256\64\0"+
    "\1\260\32\0\1\143\1\144\1\145\2\0\1\147\1\150"+
    "\1\147\1\145\1\151\1\152\12\0\1\152\12\0\1\145"+
    "\1\0\2\145\41\0\2\144\3\0\3\144\1\145\1\151"+
    "\1\152\12\0\1\152\12\0\1\145\1\0\1\145\42\0"+
    "\1\261\1\262\2\0\5\262\1\0\1\262\10\0\1\262"+
    "\1\0\2\262\1\0\1\262\7\0\1\262\1\0\1\262"+
    "\42\0\1\263\1\144\1\145\2\0\3\263\1\145\1\151"+
    "\1\152\12\0\1\152\12\0\1\145\1\0\2\145\41\0"+
    "\1\147\1\144\1\145\2\0\3\147\1\145\1\151\1\152"+
    "\12\0\1\152\12\0\1\145\1\0\2\145\41\0\2\151"+
    "\3\0\3\151\1\145\1\0\1\152\12\0\1\152\12\0"+
    "\1\145\1\0\1\145\42\0\2\264\3\0\3\264\3\0"+
    "\1\265\54\0\1\265\25\0\1\266\71\0\13\30\1\0"+
    "\1\30\2\0\1\30\5\0\2\30\1\267\24\30\31\0"+
    "\13\30\1\0\1\30\2\0\1\30\5\0\7\30\1\270"+
    "\17\30\31\0\13\30\1\0\1\30\2\0\1\30\5\0"+
    "\14\30\1\271\12\30\31\0\13\30\1\0\1\30\2\0"+
    "\1\30\5\0\6\30\1\272\20\30\31\0\13\30\1\0"+
    "\1\30\2\0\1\30\5\0\7\30\1\273\13\30\1\274"+
    "\3\30\31\0\13\30\1\0\1\30\2\0\1\30\5\0"+
    "\3\30\1\275\23\30\31\0\13\30\1\0\1\30\2\0"+
    "\1\30\5\0\6\30\1\276\1\277\17\30\31\0\13\30"+
    "\1\0\1\30\2\0\1\30\5\0\12\30\1\300\14\30"+
    "\31\0\13\30\1\0\1\30\2\0\1\30\5\0\3\30"+
    "\1\301\23\30\31\0\13\30\1\0\1\30\2\0\1\30"+
    "\5\0\3\30\1\302\23\30\31\0\13\30\1\0\1\30"+
    "\2\0\1\30\5\0\23\30\1\303\3\30\31\0\13\30"+
    "\1\0\1\30\2\0\1\30\5\0\13\30\1\304\13\30"+
    "\31\0\13\30\1\0\1\30\2\0\1\30\5\0\14\30"+
    "\1\305\4\30\1\306\5\30\31\0\13\30\1\0\1\30"+
    "\2\0\1\30\5\0\1\30\1\307\11\30\1\310\13\30"+
    "\31\0\13\30\1\0\1\30\2\0\1\30\5\0\23\30"+
    "\1\311\3\30\31\0\13\30\1\0\1\30\2\0\1\30"+
    "\5\0\22\30\1\312\4\30\31\0\13\30\1\0\1\30"+
    "\2\0\1\30\5\0\20\30\1\313\6\30\31\0\13\30"+
    "\1\0\1\30\2\0\1\30\5\0\6\30\1\314\1\315"+
    "\17\30\31\0\13\30\1\0\1\30\2\0\1\30\5\0"+
    "\23\30\1\316\3\30\31\0\13\30\1\0\1\30\2\0"+
    "\1\30\5\0\1\317\16\30\1\320\1\321\6\30\31\0"+
    "\13\30\1\0\1\30\2\0\1\30\5\0\20\30\1\322"+
    "\6\30\31\0\13\30\1\0\1\30\2\0\1\30\5\0"+
    "\1\30\1\323\25\30\31\0\13\30\1\0\1\30\2\0"+
    "\1\30\5\0\12\30\1\324\14\30\31\0\13\30\1\0"+
    "\1\30\2\0\1\30\5\0\12\30\1\325\14\30\31\0"+
    "\13\30\1\0\1\30\2\0\1\30\5\0\7\30\1\326"+
    "\17\30\31\0\13\30\1\0\1\30\2\0\1\30\5\0"+
    "\2\30\1\327\24\30\31\0\13\30\1\0\1\30\2\0"+
    "\1\30\5\0\13\30\1\330\13\30\31\0\13\30\1\0"+
    "\1\30\2\0\1\30\5\0\7\30\1\331\17\30\31\0"+
    "\13\30\1\0\1\30\2\0\1\30\5\0\11\30\1\332"+
    "\1\30\1\333\13\30\31\0\13\30\1\0\1\30\2\0"+
    "\1\30\5\0\5\30\1\334\21\30\31\0\13\30\1\0"+
    "\1\30\2\0\1\30\5\0\1\335\26\30\31\0\13\30"+
    "\1\0\1\30\2\0\1\30\5\0\1\30\1\336\25\30"+
    "\31\0\13\30\1\0\1\30\2\0\1\30\5\0\13\30"+
    "\1\337\13\30\105\0\1\340\104\0\1\341\6\0\1\342"+
    "\75\0\1\343\21\0\1\241\1\103\102\0\1\103\1\0"+
    "\26\103\1\0\1\237\53\103\12\0\1\243\4\0\3\243"+
    "\75\0\1\240\4\0\3\240\64\0\1\245\1\111\102\0"+
    "\1\111\1\0\27\111\1\244\1\0\52\111\1\253\2\0"+
    "\102\253\5\256\1\344\77\256\4\345\1\346\1\257\77\345"+
    "\12\0\1\261\1\262\1\145\1\0\5\262\1\0\1\262"+
    "\10\0\1\262\1\0\2\262\1\0\1\262\7\0\1\262"+
    "\1\0\1\262\1\145\41\0\2\347\1\145\1\0\5\347"+
    "\1\0\1\347\10\0\1\347\1\0\2\347\1\0\1\347"+
    "\7\0\1\347\1\0\1\347\1\145\41\0\1\350\1\144"+
    "\1\145\2\0\3\350\1\145\1\151\1\152\12\0\1\152"+
    "\12\0\1\145\1\0\2\145\41\0\2\264\3\0\3\264"+
    "\1\145\27\0\1\145\1\0\1\145\42\0\2\264\3\0"+
    "\3\264\73\0\13\30\1\0\1\30\2\0\1\30\5\0"+
    "\3\30\1\351\23\30\31\0\13\30\1\0\1\30\2\0"+
    "\1\30\5\0\14\30\1\352\12\30\31\0\13\30\1\0"+
    "\1\30\2\0\1\30\5\0\26\30\1\353\31\0\13\30"+
    "\1\0\1\30\2\0\1\30\5\0\2\30\1\354\24\30"+
    "\31\0\13\30\1\0\1\30\2\0\1\30\5\0\2\30"+
    "\1\355\24\30\31\0\13\30\1\0\1\30\2\0\1\30"+
    "\5\0\11\30\1\356\15\30\31\0\13\30\1\0\1\30"+
    "\2\0\1\30\5\0\13\30\1\357\13\30\31\0\13\30"+
    "\1\0\1\30\2\0\1\30\5\0\2\30\1\360\24\30"+
    "\31\0\13\30\1\0\1\30\2\0\1\30\5\0\5\30"+
    "\1\361\21\30\31\0\13\30\1\0\1\30\2\0\1\30"+
    "\5\0\6\30\1\362\1\363\17\30\31\0\13\30\1\0"+
    "\1\30\2\0\1\30\5\0\6\30\1\364\20\30\31\0"+
    "\13\30\1\0\1\30\2\0\1\30\5\0\7\30\1\365"+
    "\17\30\31\0\13\30\1\0\1\30\2\0\1\30\5\0"+
    "\2\30\1\366\24\30\31\0\13\30\1\0\1\30\2\0"+
    "\1\30\5\0\7\30\1\367\17\30\31\0\13\30\1\0"+
    "\1\30\2\0\1\30\5\0\2\30\1\370\24\30\31\0"+
    "\13\30\1\0\1\30\2\0\1\30\5\0\11\30\1\371"+
    "\15\30\31\0\13\30\1\0\1\30\2\0\1\30\5\0"+
    "\6\30\1\372\20\30\31\0\13\30\1\0\1\30\2\0"+
    "\1\30\5\0\2\30\1\373\24\30\31\0\13\30\1\0"+
    "\1\30\2\0\1\30\5\0\20\30\1\374\6\30\31\0"+
    "\13\30\1\0\1\30\2\0\1\30\5\0\7\30\1\375"+
    "\17\30\31\0\13\30\1\0\1\30\2\0\1\30\5\0"+
    "\2\30\1\376\24\30\31\0\13\30\1\0\1\30\2\0"+
    "\1\30\5\0\11\30\1\377\6\30\1\u0100\6\30\31\0"+
    "\13\30\1\0\1\30\2\0\1\30\5\0\14\30\1\u0101"+
    "\12\30\31\0\13\30\1\0\1\30\2\0\1\30\5\0"+
    "\3\30\1\u0102\23\30\31\0\13\30\1\0\1\30\2\0"+
    "\1\30\5\0\2\30\1\u0103\24\30\31\0\13\30\1\0"+
    "\1\30\2\0\1\30\5\0\6\30\1\u0104\20\30\31\0"+
    "\13\30\1\0\1\30\2\0\1\30\5\0\3\30\1\u0105"+
    "\23\30\31\0\13\30\1\0\1\30\2\0\1\30\5\0"+
    "\5\30\1\u0106\21\30\31\0\13\30\1\0\1\30\2\0"+
    "\1\30\5\0\20\30\1\u0107\6\30\31\0\13\30\1\0"+
    "\1\30\2\0\1\30\5\0\20\30\1\u0108\6\30\31\0"+
    "\13\30\1\0\1\30\2\0\1\30\5\0\10\30\1\u0109"+
    "\16\30\31\0\13\30\1\0\1\30\2\0\1\30\5\0"+
    "\7\30\1\u010a\17\30\31\0\13\30\1\0\1\30\2\0"+
    "\1\30\5\0\24\30\1\u010b\2\30\31\0\13\30\1\0"+
    "\1\30\2\0\1\30\5\0\4\30\1\u010c\22\30\31\0"+
    "\13\30\1\0\1\30\2\0\1\30\5\0\20\30\1\u010d"+
    "\6\30\31\0\13\30\1\0\1\30\2\0\1\30\5\0"+
    "\15\30\1\u010e\11\30\105\0\1\u010f\20\0\4\256\1\346"+
    "\1\344\77\256\5\345\1\u0110\77\345\12\0\2\u0111\1\145"+
    "\1\0\5\u0111\1\0\1\u0111\10\0\1\u0111\1\0\2\u0111"+
    "\1\0\1\u0111\7\0\1\u0111\1\0\1\u0111\1\145\41\0"+
    "\1\u0112\1\144\1\145\2\0\3\u0112\1\145\1\151\1\152"+
    "\12\0\1\152\12\0\1\145\1\0\2\145\37\0\13\30"+
    "\1\0\1\30\2\0\1\30\5\0\4\30\1\u0113\22\30"+
    "\31\0\13\30\1\0\1\30\2\0\1\30\5\0\1\30"+
    "\1\u0114\25\30\31\0\13\30\1\0\1\30\2\0\1\30"+
    "\5\0\12\30\1\u0115\14\30\31\0\13\30\1\0\1\30"+
    "\2\0\1\30\5\0\1\30\1\u0116\25\30\31\0\13\30"+
    "\1\0\1\30\2\0\1\30\5\0\7\30\1\u0117\17\30"+
    "\31\0\13\30\1\0\1\30\2\0\1\30\5\0\10\30"+
    "\1\u0118\16\30\31\0\13\30\1\0\1\30\2\0\1\30"+
    "\5\0\7\30\1\u0119\17\30\31\0\13\30\1\0\1\30"+
    "\2\0\1\30\5\0\13\30\1\u011a\13\30\31\0\13\30"+
    "\1\0\1\30\2\0\1\30\5\0\6\30\1\u011b\20\30"+
    "\31\0\13\30\1\0\1\30\2\0\1\30\5\0\13\30"+
    "\1\u011c\13\30\31\0\13\30\1\0\1\30\2\0\1\30"+
    "\5\0\1\30\1\u011d\25\30\31\0\13\30\1\0\1\30"+
    "\2\0\1\30\5\0\5\30\1\u011e\21\30\31\0\13\30"+
    "\1\0\1\30\2\0\1\30\5\0\22\30\1\u011f\4\30"+
    "\31\0\13\30\1\0\1\30\2\0\1\30\5\0\11\30"+
    "\1\u0120\15\30\31\0\13\30\1\0\1\30\2\0\1\30"+
    "\5\0\3\30\1\u0121\23\30\31\0\13\30\1\0\1\30"+
    "\2\0\1\30\5\0\1\30\1\u0122\25\30\31\0\13\30"+
    "\1\0\1\30\2\0\1\30\5\0\1\30\1\u0123\25\30"+
    "\31\0\13\30\1\0\1\30\2\0\1\30\5\0\2\30"+
    "\1\u0124\24\30\31\0\13\30\1\0\1\30\2\0\1\30"+
    "\5\0\16\30\1\u0125\10\30\31\0\13\30\1\0\1\30"+
    "\2\0\1\30\5\0\14\30\1\u0126\12\30\31\0\13\30"+
    "\1\0\1\30\2\0\1\30\5\0\7\30\1\u0127\17\30"+
    "\31\0\13\30\1\0\1\30\2\0\1\30\5\0\2\30"+
    "\1\u0128\24\30\31\0\13\30\1\0\1\30\2\0\1\30"+
    "\5\0\20\30\1\u0129\6\30\31\0\13\30\1\0\1\30"+
    "\2\0\1\30\5\0\7\30\1\u012a\17\30\31\0\13\30"+
    "\1\0\1\30\2\0\1\30\5\0\15\30\1\u012b\11\30"+
    "\31\0\13\30\1\0\1\30\2\0\1\30\5\0\2\30"+
    "\1\u012c\24\30\31\0\13\30\1\0\1\30\2\0\1\30"+
    "\5\0\2\30\1\u012d\24\30\31\0\13\30\1\0\1\30"+
    "\2\0\1\30\5\0\3\30\1\u012e\23\30\31\0\13\30"+
    "\1\0\1\30\2\0\1\30\5\0\3\30\1\u012f\23\30"+
    "\31\0\13\30\1\0\1\30\2\0\1\30\5\0\13\30"+
    "\1\u0130\13\30\21\0\4\345\1\u0131\1\u0110\77\345\12\0"+
    "\2\u0132\1\145\1\0\5\u0132\1\0\1\u0132\10\0\1\u0132"+
    "\1\0\2\u0132\1\0\1\u0132\7\0\1\u0132\1\0\1\u0132"+
    "\1\145\41\0\1\u0133\1\144\1\145\2\0\3\u0133\1\145"+
    "\1\151\1\152\12\0\1\152\12\0\1\145\1\0\2\145"+
    "\37\0\13\30\1\0\1\30\2\0\1\30\5\0\12\30"+
    "\1\u0134\14\30\31\0\13\30\1\0\1\30\2\0\1\30"+
    "\5\0\15\30\1\u0135\11\30\31\0\13\30\1\0\1\30"+
    "\2\0\1\30\5\0\7\30\1\u0136\17\30\31\0\13\30"+
    "\1\0\1\30\2\0\1\30\5\0\12\30\1\u0137\14\30"+
    "\31\0\13\30\1\0\1\30\2\0\1\30\5\0\5\30"+
    "\1\u0138\21\30\31\0\13\30\1\0\1\30\2\0\1\30"+
    "\5\0\10\30\1\u0139\16\30\31\0\13\30\1\0\1\30"+
    "\2\0\1\30\5\0\17\30\1\u013a\7\30\31\0\13\30"+
    "\1\0\1\30\2\0\1\30\5\0\12\30\1\u013b\14\30"+
    "\31\0\13\30\1\0\1\30\2\0\1\30\5\0\17\30"+
    "\1\u013c\7\30\31\0\13\30\1\0\1\30\2\0\1\30"+
    "\5\0\7\30\1\u013d\17\30\31\0\13\30\1\0\1\30"+
    "\2\0\1\30\5\0\26\30\1\u013e\31\0\13\30\1\0"+
    "\1\30\2\0\1\30\5\0\16\30\1\u013f\10\30\31\0"+
    "\13\30\1\0\1\30\2\0\1\30\5\0\20\30\1\u0140"+
    "\6\30\31\0\13\30\1\0\1\30\2\0\1\30\5\0"+
    "\2\30\1\u0141\24\30\31\0\13\30\1\0\1\30\2\0"+
    "\1\30\5\0\20\30\1\u0142\6\30\31\0\13\30\1\0"+
    "\1\30\2\0\1\30\5\0\13\30\1\u0143\13\30\31\0"+
    "\13\30\1\0\1\30\2\0\1\30\5\0\5\30\1\u0144"+
    "\21\30\31\0\13\30\1\0\1\30\2\0\1\30\5\0"+
    "\7\30\1\u0145\17\30\31\0\13\30\1\0\1\30\2\0"+
    "\1\30\5\0\16\30\1\u0146\10\30\31\0\13\30\1\0"+
    "\1\30\2\0\1\30\5\0\5\30\1\u0147\21\30\33\0"+
    "\2\u0148\1\145\1\0\5\u0148\1\0\1\u0148\10\0\1\u0148"+
    "\1\0\2\u0148\1\0\1\u0148\7\0\1\u0148\1\0\1\u0148"+
    "\1\145\41\0\1\u0149\1\144\1\145\2\0\3\u0149\1\145"+
    "\1\151\1\152\12\0\1\152\12\0\1\145\1\0\2\145"+
    "\37\0\13\30\1\0\1\30\2\0\1\30\5\0\6\30"+
    "\1\u014a\20\30\31\0\13\30\1\0\1\30\2\0\1\30"+
    "\5\0\14\30\1\u014b\12\30\31\0\13\30\1\0\1\30"+
    "\2\0\1\30\5\0\5\30\1\u014c\21\30\31\0\13\30"+
    "\1\0\1\30\2\0\1\30\5\0\3\30\1\u014d\23\30"+
    "\31\0\13\30\1\0\1\30\2\0\1\30\5\0\2\30"+
    "\1\u014e\24\30\31\0\13\30\1\0\1\30\2\0\1\30"+
    "\5\0\2\30\1\u014f\24\30\31\0\13\30\1\0\1\30"+
    "\2\0\1\30\5\0\7\30\1\u0150\17\30\31\0\13\30"+
    "\1\0\1\30\2\0\1\30\5\0\21\30\1\u0151\5\30"+
    "\31\0\13\30\1\0\1\30\2\0\1\30\5\0\11\30"+
    "\1\u0152\15\30\31\0\13\30\1\0\1\30\2\0\1\30"+
    "\5\0\7\30\1\u0153\17\30\31\0\13\30\1\0\1\30"+
    "\2\0\1\30\5\0\2\30\1\u0154\24\30\31\0\13\30"+
    "\1\0\1\30\2\0\1\30\5\0\2\30\1\u0155\24\30"+
    "\33\0\2\u0156\1\145\1\0\5\u0156\1\0\1\u0156\10\0"+
    "\1\u0156\1\0\2\u0156\1\0\1\u0156\7\0\1\u0156\1\0"+
    "\1\u0156\1\145\41\0\1\u0157\1\144\1\145\2\0\3\u0157"+
    "\1\145\1\151\1\152\12\0\1\152\12\0\1\145\1\0"+
    "\2\145\37\0\13\30\1\0\1\30\2\0\1\30\5\0"+
    "\2\30\1\u0158\24\30\31\0\13\30\1\0\1\30\2\0"+
    "\1\30\5\0\2\30\1\u0159\24\30\31\0\13\30\1\0"+
    "\1\30\2\0\1\30\5\0\5\30\1\u015a\21\30\31\0"+
    "\13\30\1\0\1\30\2\0\1\30\5\0\12\30\1\u015b"+
    "\14\30\31\0\13\30\1\0\1\30\2\0\1\30\5\0"+
    "\1\30\1\u015c\25\30\31\0\13\30\1\0\1\30\2\0"+
    "\1\30\5\0\12\30\1\u015d\14\30\31\0\13\30\1\0"+
    "\1\30\2\0\1\30\5\0\2\30\1\u015e\24\30\33\0"+
    "\2\u015f\1\145\1\0\5\u015f\1\0\1\u015f\10\0\1\u015f"+
    "\1\0\2\u015f\1\0\1\u015f\7\0\1\u015f\1\0\1\u015f"+
    "\1\145\41\0\1\u0160\1\144\1\145\2\0\3\u0160\1\145"+
    "\1\151\1\152\12\0\1\152\12\0\1\145\1\0\2\145"+
    "\37\0\13\30\1\0\1\30\2\0\1\30\5\0\11\30"+
    "\1\u0161\15\30\31\0\13\30\1\0\1\30\2\0\1\30"+
    "\5\0\2\30\1\u0162\24\30\31\0\13\30\1\0\1\30"+
    "\2\0\1\30\5\0\7\30\1\u0163\17\30\31\0\13\30"+
    "\1\0\1\30\2\0\1\30\5\0\15\30\1\u0164\11\30"+
    "\33\0\2\u0165\1\145\1\0\5\u0165\1\0\1\u0165\10\0"+
    "\1\u0165\1\0\2\u0165\1\0\1\u0165\7\0\1\u0165\1\0"+
    "\1\u0165\1\145\41\0\1\u0166\1\144\1\145\2\0\3\u0166"+
    "\1\145\1\151\1\152\12\0\1\152\12\0\1\145\1\0"+
    "\2\145\37\0\13\30\1\0\1\30\2\0\1\30\5\0"+
    "\17\30\1\u0167\7\30\31\0\13\30\1\0\1\30\2\0"+
    "\1\30\5\0\6\30\1\u0168\20\30\33\0\2\u0169\1\145"+
    "\1\0\5\u0169\1\0\1\u0169\10\0\1\u0169\1\0\2\u0169"+
    "\1\0\1\u0169\7\0\1\u0169\1\0\1\u0169\1\145\41\0"+
    "\1\u016a\1\144\1\145\2\0\3\u016a\1\145\1\151\1\152"+
    "\12\0\1\152\12\0\1\145\1\0\2\145\41\0\2\u016b"+
    "\1\145\1\0\5\u016b\1\0\1\u016b\10\0\1\u016b\1\0"+
    "\2\u016b\1\0\1\u016b\7\0\1\u016b\1\0\1\u016b\1\145"+
    "\41\0\1\u016c\1\144\1\145\2\0\3\u016c\1\145\1\151"+
    "\1\152\12\0\1\152\12\0\1\145\1\0\2\145\41\0"+
    "\2\u016d\1\145\1\0\5\u016d\1\0\1\u016d\10\0\1\u016d"+
    "\1\0\2\u016d\1\0\1\u016d\7\0\1\u016d\1\0\1\u016d"+
    "\1\145\41\0\1\u016e\1\144\1\145\2\0\3\u016e\1\145"+
    "\1\151\1\152\12\0\1\152\12\0\1\145\1\0\2\145"+
    "\41\0\2\u016f\1\145\1\0\5\u016f\1\0\1\u016f\10\0"+
    "\1\u016f\1\0\2\u016f\1\0\1\u016f\7\0\1\u016f\1\0"+
    "\1\u016f\1\145\41\0\1\u0170\1\144\1\145\2\0\3\u0170"+
    "\1\145\1\151\1\152\12\0\1\152\12\0\1\145\1\0"+
    "\2\145\41\0\2\u0171\1\145\1\0\5\u0171\1\0\1\u0171"+
    "\10\0\1\u0171\1\0\2\u0171\1\0\1\u0171\7\0\1\u0171"+
    "\1\0\1\u0171\1\145\41\0\1\u0172\1\144\1\145\2\0"+
    "\3\u0172\1\145\1\151\1\152\12\0\1\152\12\0\1\145"+
    "\1\0\2\145\41\0\2\u0173\1\145\1\0\5\u0173\1\0"+
    "\1\u0173\10\0\1\u0173\1\0\2\u0173\1\0\1\u0173\7\0"+
    "\1\u0173\1\0\1\u0173\1\145\41\0\1\u0174\1\144\1\145"+
    "\2\0\3\u0174\1\145\1\151\1\152\12\0\1\152\12\0"+
    "\1\145\1\0\2\145\41\0\2\u0175\1\145\1\0\5\u0175"+
    "\1\0\1\u0175\10\0\1\u0175\1\0\2\u0175\1\0\1\u0175"+
    "\7\0\1\u0175\1\0\1\u0175\1\145\41\0\1\u0176\1\144"+
    "\1\145\2\0\3\u0176\1\145\1\151\1\152\12\0\1\152"+
    "\12\0\1\145\1\0\2\145\41\0\2\u0177\1\145\1\0"+
    "\5\u0177\1\0\1\u0177\10\0\1\u0177\1\0\2\u0177\1\0"+
    "\1\u0177\7\0\1\u0177\1\0\1\u0177\1\145\41\0\1\u0178"+
    "\1\144\1\145\2\0\3\u0178\1\145\1\151\1\152\12\0"+
    "\1\152\12\0\1\145\1\0\2\145\43\0\1\145\40\0"+
    "\1\145\41\0\1\u0179\1\144\1\145\2\0\3\u0179\1\145"+
    "\1\151\1\152\12\0\1\152\12\0\1\145\1\0\2\145"+
    "\41\0\1\u017a\1\144\1\145\2\0\3\u017a\1\145\1\151"+
    "\1\152\12\0\1\152\12\0\1\145\1\0\2\145\41\0"+
    "\1\u017b\1\144\1\145\2\0\3\u017b\1\145\1\151\1\152"+
    "\12\0\1\152\12\0\1\145\1\0\2\145\41\0\1\u017c"+
    "\1\144\1\145\2\0\3\u017c\1\145\1\151\1\152\12\0"+
    "\1\152\12\0\1\145\1\0\2\145\41\0\2\144\1\145"+
    "\2\0\3\144\1\145\1\151\1\152\12\0\1\152\12\0"+
    "\1\145\1\0\2\145\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19044];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\1\1\1\0\1\11\1\1\1\11\1\1\1\11"+
    "\11\1\5\11\21\1\6\11\2\1\3\11\7\1\2\11"+
    "\1\1\1\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\11\4\1\1\11"+
    "\4\1\2\11\3\1\1\11\1\0\3\1\2\0\2\11"+
    "\44\1\2\11\1\1\1\11\1\1\10\11\1\0\1\11"+
    "\3\1\1\0\1\1\2\11\1\0\1\11\6\0\1\11"+
    "\4\1\1\0\1\11\51\1\2\11\1\1\1\11\2\0"+
    "\1\11\50\1\1\11\1\0\40\1\1\11\67\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private LexerInput input;

    private boolean embedded;

    private boolean canFollowLiteral = true;

    private boolean canFollowKeyword = true;

    private LinkedList<Integer> templateBalances = new LinkedList<Integer>();

    public JsColoringLexer(LexerRestartInfo info) {
        this.input = info.input();

        this.embedded = !JsTokenId.JAVASCRIPT_MIME_TYPE.equals(info.languagePath().mimePath());
        if(info.state() != null) {
            //reset state
            setState((LexerState)info.state());
        } else {
            //initial state
            zzState = zzLexicalState = YYINITIAL;
        }
    }

    public LexerState getState() {
        if (zzState == YYINITIAL && zzLexicalState == YYINITIAL
                && canFollowLiteral && canFollowKeyword) {
            return null;
        }
        return new LexerState(zzState, zzLexicalState, canFollowLiteral, canFollowKeyword, templateBalances);
    }

    public void setState(LexerState state) {
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
        this.canFollowLiteral = state.canFollowLiteral;
        this.canFollowKeyword = state.canFollowKeyword;
        this.templateBalances = new LinkedList<Integer>(state.templateBalances);
    }

    public JsTokenId nextToken() throws java.io.IOException {
        JsTokenId token = yylex();
        if (token != null && !JsTokenId.ERROR.equals(token)
                && !JsTokenId.UNKNOWN.equals(token)
                && !JsTokenId.WHITESPACE.equals(token)
                && !JsTokenId.LINE_COMMENT.equals(token)
                && !JsTokenId.BLOCK_COMMENT.equals(token)
                && !JsTokenId.DOC_COMMENT.equals(token)) {
            canFollowLiteral = canFollowLiteral(token);
            if (!JsTokenId.EOL.equals(token)) {
                canFollowKeyword = canFollowKeyword(token);
            }
        }
        return token;
    }

    private JsTokenId getErrorToken() {
        if (embedded) {
            return JsTokenId.UNKNOWN;
        }
        return JsTokenId.ERROR;
    }

    private static boolean canFollowLiteral(JsTokenId token) {
        if ("operator".equals(token.primaryCategory())) {
            return true;
        }

        switch (token) {
            case BRACKET_LEFT_CURLY:
            case BRACKET_LEFT_PAREN:
            case BRACKET_LEFT_BRACKET:
            case KEYWORD_RETURN:
            case KEYWORD_THROW:
            case KEYWORD_YIELD:
            // unary operators (keyword)
            case KEYWORD_TYPEOF:
            // end of line
            case EOL:
            case OPERATOR_SEMICOLON:
            case OPERATOR_COMMA:
            case OPERATOR_DOT:
            case OPERATOR_COLON:
                return true;
        }
        return false;
    }

    private static boolean canFollowKeyword(JsTokenId token) {
        if (JsTokenId.OPERATOR_DOT.equals(token)) {
            return false;
        }
        return true;
    }

    public static final class LexerState  {
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;
        /** can be the literal used here */
        final boolean canFollowLiteral;
        /** can be the literal used here */
        final boolean canFollowKeyword;
        /** are we in template expression */
        final LinkedList<Integer> templateBalances;

        LexerState (int zzState, int zzLexicalState, boolean canFollowLiteral, boolean canFollowKeyword, LinkedList<Integer> templateBalances) {
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.canFollowLiteral = canFollowLiteral;
            this.canFollowKeyword = canFollowKeyword;
            this.templateBalances = new LinkedList<Integer>(templateBalances);
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final LexerState other = (LexerState) obj;
            if (this.zzState != other.zzState) {
                return false;
            }
            if (this.zzLexicalState != other.zzLexicalState) {
                return false;
            }
            if (this.canFollowLiteral != other.canFollowLiteral) {
                return false;
            }
            if (this.canFollowKeyword != other.canFollowKeyword) {
                return false;
            }
            if (this.templateBalances.size() != other.templateBalances.size()) {
                return false;
            }
            for (int i = 0; i < this.templateBalances.size(); i++) {
                if (this.templateBalances.get(i).equals(other.templateBalances.get(i))) {
                    return false;
                }
            }
            return true;
        }

        @Override
        public int hashCode() {
            int hash = 5;
            hash = 29 * hash + this.zzState;
            hash = 29 * hash + this.zzLexicalState;
            hash = 29 * hash + (this.canFollowLiteral ? 1 : 0);
            hash = 29 * hash + (this.canFollowKeyword ? 1 : 0);
            for (int i = 0; i < this.templateBalances.size(); i++) {
                hash = 29 * hash + this.templateBalances.get(i);
            }
            return hash;
        }

        @Override
        public String toString() {
            return "LexerState{" + "zzState=" + zzState + ", zzLexicalState=" + zzLexicalState
                + ", canFollowLiteral=" + canFollowLiteral + ", canFollowKeyword=" + canFollowKeyword
                + ", templateBalances=" + templateBalances + '}';
        }
    }

 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JsColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JsColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2274) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JsTokenId yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      int tokenLength = 0;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          zzInput = input.read();

          if(zzInput == LexerInput.EOF) {
              //end of input reached
            zzInput = YYEOF;
            break zzForAction;
              //notice: currently LexerInput.EOF == YYEOF
          }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 19: 
          { return JsTokenId.BRACKET_LEFT_PAREN;
          }
        case 124: break;
        case 53: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_IF;
          }
        case 125: break;
        case 27: 
          { return JsTokenId.OPERATOR_BITWISE_NOT;
          }
        case 126: break;
        case 61: 
          { return JsTokenId.OPERATOR_BITWISE_AND_ASSIGNMENT;
          }
        case 127: break;
        case 120: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_INTERFACE;
          }
        case 128: break;
        case 97: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_CLASS;
          }
        case 129: break;
        case 73: 
          { return JsTokenId.OPERATOR_REST;
          }
        case 130: break;
        case 37: 
          { yypushback(1);
                                     yybegin(STRINGEND);
                                     if (tokenLength - 1 > 0) {
                                         return JsTokenId.STRING;
                                     }
          }
        case 131: break;
        case 103: 
          { return JsTokenId.DOC_COMMENT;
          }
        case 132: break;
        case 13: 
          { yybegin(TEMPLATE);
                                    return JsTokenId.TEMPLATE_BEGIN;
          }
        case 133: break;
        case 48: 
          { return JsTokenId.OPERATOR_MULTIPLICATION_ASSIGNMENT;
          }
        case 134: break;
        case 8: 
          { return JsTokenId.OPERATOR_NOT;
          }
        case 135: break;
        case 15: 
          { yybegin(SSTRING);
                                    return JsTokenId.STRING_BEGIN;
          }
        case 136: break;
        case 109: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_IMPORT;
          }
        case 137: break;
        case 82: 
          { return JsTokenId.OPERATOR_LEFT_SHIFT_ARITHMETIC_ASSIGNMENT;
          }
        case 138: break;
        case 55: 
          { return JsTokenId.OPERATOR_EQUALS;
          }
        case 139: break;
        case 29: 
          { return JsTokenId.OPERATOR_COLON;
          }
        case 140: break;
        case 123: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_IMPLEMENTS;
          }
        case 141: break;
        case 51: 
          { return JsTokenId.OPERATOR_MINUS_ASSIGNMENT;
          }
        case 142: break;
        case 31: 
          { return JsTokenId.OPERATOR_BITWISE_OR;
          }
        case 143: break;
        case 117: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_CONTINUE;
          }
        case 144: break;
        case 23: 
          { return JsTokenId.OPERATOR_SEMICOLON;
          }
        case 145: break;
        case 92: 
          { return JsTokenId.OPERATOR_RIGHT_SHIFT_ASSIGNMENT;
          }
        case 146: break;
        case 60: 
          { return JsTokenId.OPERATOR_LEFT_SHIFT_ARITHMETIC;
          }
        case 147: break;
        case 114: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_FINALLY;
          }
        case 148: break;
        case 36: 
          { yypushback(1);
                                     yybegin(INITIAL);
                                     if (tokenLength - 1 > 0) {
                                         return getErrorToken();
                                     }
          }
        case 149: break;
        case 28: 
          { return JsTokenId.OPERATOR_TERNARY;
          }
        case 150: break;
        case 18: 
          { return JsTokenId.OPERATOR_ASSIGNMENT;
          }
        case 151: break;
        case 108: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_TYPEOF;
          }
        case 152: break;
        case 38: 
          { yybegin(INITIAL);
                                     return JsTokenId.STRING_END;
          }
        case 153: break;
        case 30: 
          { return JsTokenId.OPERATOR_BITWISE_AND;
          }
        case 154: break;
        case 25: 
          { return JsTokenId.OPERATOR_GREATER;
          }
        case 155: break;
        case 119: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_FUNCTION;
          }
        case 156: break;
        case 20: 
          { return JsTokenId.BRACKET_RIGHT_PAREN;
          }
        case 157: break;
        case 71: 
          { yypushback(1);
                                     yybegin(REGEXPEND);
                                     if (tokenLength - 1 > 0) {
                                         return JsTokenId.REGEXP;
                                     }
          }
        case 158: break;
        case 99: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_THROW;
          }
        case 159: break;
        case 75: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_NEW;
          }
        case 160: break;
        case 67: 
          { return JsTokenId.OPERATOR_BITWISE_XOR_ASSIGNMENT;
          }
        case 161: break;
        case 24: 
          { return JsTokenId.OPERATOR_COMMA;
          }
        case 162: break;
        case 79: 
          { return JsTokenId.OPERATOR_EQUALS_EXACTLY;
          }
        case 163: break;
        case 57: 
          { return JsTokenId.OPERATOR_GREATER_EQUALS;
          }
        case 164: break;
        case 49: 
          { return JsTokenId.OPERATOR_NOT_EQUALS;
          }
        case 165: break;
        case 87: 
          { return JsTokenId.KEYWORD_TRUE;
          }
        case 166: break;
        case 62: 
          { return JsTokenId.OPERATOR_AND;
          }
        case 167: break;
        case 5: 
          { return JsTokenId.WHITESPACE;
          }
        case 168: break;
        case 66: 
          { return JsTokenId.OPERATOR_INCREMENT;
          }
        case 169: break;
        case 72: 
          { return JsTokenId.OPERATOR_NOT_EQUALS_EXACTLY;
          }
        case 170: break;
        case 77: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_LET;
          }
        case 171: break;
        case 64: 
          { return JsTokenId.OPERATOR_OR;
          }
        case 172: break;
        case 116: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_PACKAGE;
          }
        case 173: break;
        case 112: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_EXTENDS;
          }
        case 174: break;
        case 85: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_ELSE;
          }
        case 175: break;
        case 78: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_VAR;
          }
        case 176: break;
        case 2: 
          { yypushback(1);
                                   yybegin(INITIAL);
          }
        case 177: break;
        case 90: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_WITH;
          }
        case 178: break;
        case 44: 
          { yypushback(1);
                                     yybegin(ERROR);
          }
        case 179: break;
        case 26: 
          { return JsTokenId.OPERATOR_LOWER;
          }
        case 180: break;
        case 68: 
          { return JsTokenId.OPERATOR_MODULUS_ASSIGNMENT;
          }
        case 181: break;
        case 81: 
          { return JsTokenId.OPERATOR_RIGHT_SHIFT;
          }
        case 182: break;
        case 50: 
          { return JsTokenId.OPERATOR_DECREMENT;
          }
        case 183: break;
        case 106: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_STATIC;
          }
        case 184: break;
        case 45: 
          { yybegin(INITIAL);
                                     return JsTokenId.REGEXP_END;
          }
        case 185: break;
        case 33: 
          { return JsTokenId.OPERATOR_BITWISE_XOR;
          }
        case 186: break;
        case 42: 
          { yybegin(INITIAL);
                                     return JsTokenId.TEMPLATE_END;
          }
        case 187: break;
        case 86: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_CASE;
          }
        case 188: break;
        case 1: 
          { yybegin(INITIAL);
                                     if (tokenLength > 0) {
                                         return JsTokenId.EOL;
                                     }
          }
        case 189: break;
        case 22: 
          { if (!templateBalances.isEmpty()) {
                                        Integer balance = templateBalances.pop();
                                        if (balance == 0) {
                                            yypushback(1);
                                            yybegin(TEMPLATEEXPEND);
                                        } else {
                                            templateBalances.push(balance - 1);
                                            return JsTokenId.BRACKET_RIGHT_CURLY;
                                        }
                                     } else {                                     
                                        return JsTokenId.BRACKET_RIGHT_CURLY;
                                     }
          }
        case 190: break;
        case 39: 
          { yypushback(1);
                                     yybegin(INITIAL);
                                     if (tokenLength -1 > 0) {
                                         return getErrorToken();
                                     }
          }
        case 191: break;
        case 102: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_WHILE;
          }
        case 192: break;
        case 58: 
          { return JsTokenId.OPERATOR_RIGHT_SHIFT_ARITHMETIC;
          }
        case 193: break;
        case 88: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_THIS;
          }
        case 194: break;
        case 122: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_INSTANCEOF;
          }
        case 195: break;
        case 96: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_CONST;
          }
        case 196: break;
        case 14: 
          { yybegin(STRING);
                                    return JsTokenId.STRING_BEGIN;
          }
        case 197: break;
        case 76: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_FOR;
          }
        case 198: break;
        case 105: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_EXPORT;
          }
        case 199: break;
        case 80: 
          { return JsTokenId.OPERATOR_RIGHT_SHIFT_ARITHMETIC_ASSIGNMENT;
          }
        case 200: break;
        case 110: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_DELETE;
          }
        case 201: break;
        case 3: 
          { return getErrorToken();
          }
        case 202: break;
        case 6: 
          { if (canFollowLiteral) {
                                       yybegin(REGEXP);
                                       return JsTokenId.REGEXP_BEGIN;
                                     } else {
                                       return JsTokenId.OPERATOR_DIVISION;
                                     }
          }
        case 203: break;
        case 93: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_BREAK;
          }
        case 204: break;
        case 32: 
          { return JsTokenId.OPERATOR_PLUS;
          }
        case 205: break;
        case 54: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_DO;
          }
        case 206: break;
        case 52: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_IN;
          }
        case 207: break;
        case 47: 
          { if (canFollowLiteral) {
                                       yypushback(1);
                                       yybegin(REGEXP);
                                       return JsTokenId.REGEXP_BEGIN;
                                     } else {
                                       return JsTokenId.OPERATOR_DIVISION_ASSIGNMENT;
                                     }
          }
        case 208: break;
        case 121: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_PROTECTED;
          }
        case 209: break;
        case 83: 
          { return JsTokenId.BLOCK_COMMENT;
          }
        case 210: break;
        case 7: 
          { return JsTokenId.OPERATOR_MULTIPLICATION;
          }
        case 211: break;
        case 104: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_RETURN;
          }
        case 212: break;
        case 9: 
          { return JsTokenId.IDENTIFIER;
          }
        case 213: break;
        case 89: 
          { return JsTokenId.KEYWORD_NULL;
          }
        case 214: break;
        case 10: 
          { return JsTokenId.NUMBER;
          }
        case 215: break;
        case 74: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_TRY;
          }
        case 216: break;
        case 113: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_DEFAULT;
          }
        case 217: break;
        case 101: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_YIELD;
          }
        case 218: break;
        case 59: 
          { return JsTokenId.OPERATOR_LOWER_EQUALS;
          }
        case 219: break;
        case 63: 
          { return JsTokenId.OPERATOR_BITWISE_OR_ASSIGNMENT;
          }
        case 220: break;
        case 98: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_SUPER;
          }
        case 221: break;
        case 107: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_SWITCH;
          }
        case 222: break;
        case 111: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_PUBLIC;
          }
        case 223: break;
        case 91: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_VOID;
          }
        case 224: break;
        case 4: 
          { return JsTokenId.EOL;
          }
        case 225: break;
        case 95: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_CATCH;
          }
        case 226: break;
        case 46: 
          { yybegin(LCOMMENTEND);
                                   return JsTokenId.LINE_COMMENT;
          }
        case 227: break;
        case 21: 
          { if (!templateBalances.isEmpty()) {
                                        Integer balance = templateBalances.pop();
                                        templateBalances.push(balance + 1);
                                     }

                                     return JsTokenId.BRACKET_LEFT_CURLY;
          }
        case 228: break;
        case 11: 
          { return JsTokenId.OPERATOR_DOT;
          }
        case 229: break;
        case 70: 
          { templateBalances.push(0);
                                     yybegin(INITIAL);
                                     return JsTokenId.TEMPLATE_EXP_BEGIN;
          }
        case 230: break;
        case 100: 
          { return JsTokenId.KEYWORD_FALSE;
          }
        case 231: break;
        case 40: 
          { yypushback(1);
                                     yybegin(SSTRINGEND);
                                     if (tokenLength - 1 > 0) {
                                         return JsTokenId.STRING;
                                     }
          }
        case 232: break;
        case 34: 
          { return JsTokenId.OPERATOR_MODULUS;
          }
        case 233: break;
        case 16: 
          { return JsTokenId.BRACKET_LEFT_BRACKET;
          }
        case 234: break;
        case 118: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_DEBUGGER;
          }
        case 235: break;
        case 94: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_AWAIT;
          }
        case 236: break;
        case 17: 
          { return JsTokenId.BRACKET_RIGHT_BRACKET;
          }
        case 237: break;
        case 115: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_PRIVATE;
          }
        case 238: break;
        case 12: 
          { return JsTokenId.OPERATOR_MINUS;
          }
        case 239: break;
        case 65: 
          { return JsTokenId.OPERATOR_PLUS_ASSIGNMENT;
          }
        case 240: break;
        case 84: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_ENUM;
          }
        case 241: break;
        case 41: 
          { yypushback(1);
                                     yybegin(TEMPLATEEND);
                                     if (tokenLength - 1 > 0) {
                                         return JsTokenId.TEMPLATE;
                                     }
          }
        case 242: break;
        case 43: 
          { yybegin(TEMPLATE);
                                     return JsTokenId.TEMPLATE_EXP_END;
          }
        case 243: break;
        case 69: 
          { yypushback(2);
                                     yybegin(TEMPLATEEXP);
                                     if (tokenLength - 1 > 0) {
                                         return JsTokenId.TEMPLATE;
                                     }
          }
        case 244: break;
        case 35: 
          { 
          }
        case 245: break;
        case 56: 
          { return JsTokenId.OPERATOR_ARROW;
          }
        case 246: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return getErrorToken();
    } else {
        return null;
    }
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
