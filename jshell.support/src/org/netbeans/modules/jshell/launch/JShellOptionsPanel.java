/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2016 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2016 Sun Microsystems, Inc.
 */
package org.netbeans.modules.jshell.launch;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Collections;
import javax.swing.ComboBoxModel;
import org.netbeans.api.java.platform.*;
import org.netbeans.modules.java.api.common.ui.PlatformFilter;
import org.netbeans.modules.java.api.common.ui.PlatformUiSupport;
import org.openide.modules.SpecificationVersion;

/**
 *
 * @author sdedic
 */
public class JShellOptionsPanel extends javax.swing.JPanel implements ActionListener, ItemListener {
    private ShellOptions options;
    private JShellOptionsController ctrl;
    
    /**
     * Creates new form JShellOptionsPanel
     */
    public JShellOptionsPanel(JShellOptionsController ctrl) {
        this.ctrl = ctrl;
        options = ShellOptions.get();

        initComponents();
        
        ComboBoxModel platforms = PlatformUiSupport.createPlatformComboBoxModel(null,
                Collections.singletonList(new PlatformFilter() {
                    @Override
                    public boolean accept(JavaPlatform platform) {
                        return options.accepts(platform);
                    }
            }));
        cbPlatform.setModel(platforms);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cbPlatform = new javax.swing.JComboBox<>();
        btnManage = new javax.swing.JButton();
        chAutoOpen = new javax.swing.JCheckBox();
        chReuseConsoles = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(JShellOptionsPanel.class, "JShellOptionsPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btnManage, org.openide.util.NbBundle.getMessage(JShellOptionsPanel.class, "JShellOptionsPanel.btnManage.text")); // NOI18N
        btnManage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(chAutoOpen, org.openide.util.NbBundle.getMessage(JShellOptionsPanel.class, "JShellOptionsPanel.chAutoOpen.text")); // NOI18N

        chReuseConsoles.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(chReuseConsoles, org.openide.util.NbBundle.getMessage(JShellOptionsPanel.class, "JShellOptionsPanel.chReuseConsoles.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbPlatform, 0, 225, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnManage))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chReuseConsoles)
                            .addComponent(chAutoOpen))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbPlatform, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnManage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chAutoOpen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chReuseConsoles)
                .addContainerGap(205, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnManageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageActionPerformed
        JavaPlatform old = (JavaPlatform)cbPlatform.getSelectedItem();
        PlatformsCustomizer.showCustomizer(null);
        if (old == null && cbPlatform.getSelectedItem() == null &&
                cbPlatform.getItemCount() > 0) {
            disableUpdates = true;
            setSelectedItem(options.getSelectedPlatform());
            if (cbPlatform.getSelectedItem() == null) {
                cbPlatform.setSelectedIndex(0);
            }
            disableUpdates = false;
        }
    }//GEN-LAST:event_btnManageActionPerformed
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnManage;
    private javax.swing.JComboBox<String> cbPlatform;
    private javax.swing.JCheckBox chAutoOpen;
    private javax.swing.JCheckBox chReuseConsoles;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables


    public boolean isChanged() {
        if (chReuseConsoles.isSelected() != options.isReuseDeadConsoles()) {
            return true;
        }
        if (chAutoOpen.isSelected() != options.isOpenConsole()) {
            return true;
        }
        if (getSelectedPlatformObject() != options.getSelectedPlatform()) {
            return true;
        }
        
        return false;
    }
    
    private boolean disableUpdates;
    
    private void setSelectedItem(JavaPlatform p) {
        if (p == null) {
            cbPlatform.setSelectedItem(null);
            return;
        }
        for (int i = 0; i < cbPlatform.getItemCount(); i++) {
            Object o = cbPlatform.getItemAt(i);
            JavaPlatform item = PlatformUiSupport.getPlatform(o);
            if (p.equals(item)) {
                cbPlatform.setSelectedIndex(i);
                return;
            }
        }
        cbPlatform.setSelectedItem(null);
    }
    
    public void load() {
        disableUpdates = true;
        chReuseConsoles.setSelected(options.isReuseDeadConsoles());
        chAutoOpen.setSelected(options.isOpenConsole());
        setSelectedItem(options.getSelectedPlatform());
        disableUpdates = false;
    }
    
    public void store() {
        if (chReuseConsoles.isSelected() != options.isReuseDeadConsoles()) {
            options.setReuseDeadConsoles(chReuseConsoles.isSelected());
        }
        if (chAutoOpen.isSelected() != options.isOpenConsole()) {
            options.setOpenConsole(chAutoOpen.isSelected());
        }
        if (getSelectedPlatformObject() != options.getSelectedPlatform()) {
            options.setSelectedPlatform(getSelectedPlatform());
        }
    }
    
    private JavaPlatform getSelectedPlatformObject() {
        Object key = cbPlatform.getSelectedItem();
        return key == null ? null : PlatformUiSupport.getPlatform(key);
    }
    
    private String getSelectedPlatform() {
        Object o = cbPlatform.getSelectedItem();
        return o == null ? null : o.toString();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        changed();
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        changed();
    }
    
    private void changed() {
        if (!disableUpdates) {
            ctrl.changed();
        }
    }
    
    public boolean valid() {
        if (cbPlatform.getSelectedItem() == null) {
            return options.getDefaultPlatform() == null;
        }
        return true;
    }
}
