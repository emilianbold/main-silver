/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2016 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2016 Sun Microsystems, Inc.
 */
package org.netbeans.modules.jshell.project;

import java.awt.Component;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import org.netbeans.api.project.Project;
import org.netbeans.modules.java.j2seproject.api.J2SECategoryExtensionProvider;
import org.netbeans.modules.java.j2seproject.api.J2SECategoryExtensionProvider.ConfigChangeListener;
import static org.netbeans.modules.jshell.project.PropertyNames.*;
import org.netbeans.modules.jshell.project.RunOptionsModel.LoaderPolicy;
import org.openide.util.NbBundle;

/**
 *
 * @author sdedic
 */
public class JShellOptions2 extends javax.swing.JPanel implements ItemListener {
    private J2SECategoryExtensionProvider.ConfigChangeListener listener;
    private Map<String, String> changedOptions = new HashMap<>();
    
    /**
     * Creates new form JShellOptions
     */
    public JShellOptions2() {
        initComponents();
        enableDisable();
        DefaultComboBoxModel mdl = new DefaultComboBoxModel();
        mdl.addElement(LoaderPolicy.SYSTEM);
        mdl.addElement(LoaderPolicy.CLASS);
        mdl.addElement(LoaderPolicy.EVAL);
        
        loaderSelect.setModel(mdl);
        loaderSelect.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                RunOptionsModel.LoaderPolicy pol = (RunOptionsModel.LoaderPolicy)value;
                if (pol == null) {
                    pol = RunOptionsModel.LoaderPolicy.SYSTEM;
                }
                setText(NbBundle.getMessage(JShellOptions2.class, "JShellOptions.loader." + pol.name().toLowerCase()));
                return this;
            }
        });
        
        loaderSelect.addItemListener(this);
        
    }
    
    public void setConfigChangeListener(ConfigChangeListener l) {
        this.listener = l;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        checkEnable = new javax.swing.JCheckBox();
        optsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        loaderSelect = new javax.swing.JComboBox();
        labelSource = new javax.swing.JLabel();
        source = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(checkEnable, org.openide.util.NbBundle.getMessage(JShellOptions2.class, "JShellOptions2.checkEnable.text")); // NOI18N
        checkEnable.setBorder(null);
        checkEnable.setLabel(org.openide.util.NbBundle.getMessage(JShellOptions2.class, "CHECK_EnableJShell")); // NOI18N
        checkEnable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkEnableActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(JShellOptions2.class, "JShellOptions2.jLabel1.text")); // NOI18N

        loaderSelect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        org.openide.awt.Mnemonics.setLocalizedText(labelSource, org.openide.util.NbBundle.getMessage(JShellOptions2.class, "JShellOptions2.labelSource.text")); // NOI18N

        source.setText(org.openide.util.NbBundle.getMessage(JShellOptions2.class, "JShellOptions2.source.text")); // NOI18N
        source.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sourceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout optsPanelLayout = new javax.swing.GroupLayout(optsPanel);
        optsPanel.setLayout(optsPanelLayout);
        optsPanelLayout.setHorizontalGroup(
            optsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optsPanelLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loaderSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelSource)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(source, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE))
        );
        optsPanelLayout.setVerticalGroup(
            optsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optsPanelLayout.createSequentialGroup()
                .addGroup(optsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(loaderSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(source, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelSource))
                .addGap(0, 76, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(checkEnable)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(optsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkEnable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(optsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void checkEnableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkEnableActionPerformed
        boolean enable = checkEnable.isSelected();
        enableDisable();
        if (!disableUpdates) {
            if (enable) {
                changedOptions.put(JSHELL_ENABLED, Boolean.TRUE.toString());
            } else {
                changedOptions.put(JSHELL_ENABLED, null);
            }
            storeChanges();
        }
    }//GEN-LAST:event_checkEnableActionPerformed

    private void sourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sourceActionPerformed
        
    }//GEN-LAST:event_sourceActionPerformed

    private void storeChanges() {
        listener.propertiesChanged(changedOptions);
    }
    
    public void readOptions(Map<String, String> opts) {
        disableUpdates = true;
        
        RunOptionsModel.LoaderPolicy pol;
        boolean enabled = Boolean.parseBoolean(opts.getOrDefault(JSHELL_ENABLED, Boolean.FALSE.toString()));
        checkEnable.setSelected(enabled);
        String polString = opts.getOrDefault(JSHELL_CLASS_LOADING, RunOptionsModel.LoaderPolicy.SYSTEM.name().toLowerCase());
        try {
            pol = RunOptionsModel.LoaderPolicy.valueOf(polString);
        } catch (IllegalArgumentException ex) {
            // expected
            pol = RunOptionsModel.LoaderPolicy.SYSTEM;
        }
        
        String cn = opts.get(JSHELL_CLASSNAME);
        String f = opts.get(JSHELL_FROM_FIELD);
        String m = opts.get(JSHELL_FROM_METHOD);
        
        if (cn == null) {
            pol = RunOptionsModel.LoaderPolicy.SYSTEM;
        } else if (f == null && m == null) {
            pol = RunOptionsModel.LoaderPolicy.SYSTEM;
        }
        setPolicy(pol);
        setMethodOrFieldName(cn, f, m);
        
        disableUpdates = false;
        enableDisable();
    }
    
    private void enableDisable() {
        optsPanel.setVisible(checkEnable.isSelected());
        if (checkEnable.isSelected()) {
            Object o = loaderSelect.getSelectedItem();
            source.setVisible(o != null & o != LoaderPolicy.SYSTEM);
            labelSource.setVisible(o != null & o != LoaderPolicy.SYSTEM);
            
//            if (loaderClass.isSelected()) {
//                className.setEnabled(true);
//                methodName.setEnabled(false);
//            } else if (loaderSystem.isSelected()) {
//                className.setEnabled(false);
//                methodName.setEnabled(false);
//            } else if (loaderGet.isSelected()) {
//                className.setEnabled(false);
//                methodName.setEnabled(true);
//            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        enableDisable();
        
        if (!disableUpdates) {
            Object o = loaderSelect.getSelectedItem();
            if (o == null) {
                o = LoaderPolicy.SYSTEM;
            }
    //        if (loaderSystem.isSelected()) {
    //            pol = RunOptionsModel.LoaderPolicy.SYSTEM;
    //        } else if (loaderClass.isSelected()) {
    //            pol = RunOptionsModel.LoaderPolicy.CLASS;
    //        } else if (loaderGet.isSelected()) {
    //            pol = RunOptionsModel.LoaderPolicy.EVAL;
    //        } else {
    //            return;
    //        }
            changedOptions.put(JSHELL_CLASS_LOADING, o.toString().toLowerCase());
        }
        storeChanges();
    }
    
    public void setPolicy(RunOptionsModel.LoaderPolicy policy) {
        disableUpdates = true;
        loaderSelect.setSelectedItem(policy);
//        switch (policy) {
//            case SYSTEM:
//                loaderSystem.setSelected(true);
//                break;
//            case CLASS:
//                loaderClass.setSelected(true);
//                break;
//            case EVAL:
//                loaderGet.setSelected(true);
//                break;
//            default:
//                throw new AssertionError(policy.name());
//        }
        disableUpdates = false;
    }
    
    public void setClassName(String name) {
        disableUpdates = true;
        source.setText(name);
//        className.setText(name);
        disableUpdates = false;
    }
    
    public void setMethodOrFieldName(String clazz, String method, String field) {
        disableUpdates = true;
        if (method != null) {
            source.setText(clazz + "." + method + "()"); // NOI18N
        } else if (field != null) {
            source.setText(clazz + "." + field);
        } else {
            source.setText(""); // NOI18N
        }
        disableUpdates = false;
    }
    
    public void setEnabled(boolean enabled) {
        disableUpdates = true;
        checkEnable.setSelected(enabled);
        disableUpdates = true;
    }
    
    /**
     * If true, will not update config based on UI events.
     */
    private boolean disableUpdates = false;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox checkEnable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel labelSource;
    private javax.swing.JComboBox loaderSelect;
    private javax.swing.JPanel optsPanel;
    private javax.swing.JTextField source;
    // End of variables declaration//GEN-END:variables
}
