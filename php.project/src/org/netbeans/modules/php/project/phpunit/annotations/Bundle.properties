# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 2012 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.
#
# Contributor(s):
#
# Portions Copyrighted 2012 Sun Microsystems, Inc.

AssertTag.documentation=You can use the @assert annotation in the documentation block of a method to automatically generate simple, \
yet meaningful tests instead of incomplete test cases when using the Skeleton Generator:\n\
<pre>\n\
/**\n\
\ * @assert (0, 0) == 0\n\
\ */\n\
public function add($a, $b) {\n\
\    return $a + $b;\n}\n\
</pre>\n\
These annotations are transformed into test code such as\n\
<pre>\n\
/**\n\
\ * Generated from @assert (0, 0) == 0.\n\
\ */\n\
public function testAdd() {\n\
\    $o = new Calculator;\n\
\    $this->assertEquals(0, $o->add(0, 0));\n\
}\n\
</pre>
BackupGlobalsTag.documentation=The backup and restore operations for global variables can be completely disabled for all tests of a test case class like this\n\
<pre>\n\
/**\n\
\ * @backupGlobals disabled\n\
\ */\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\    // ...\n\
}\n\
</pre>\n\
The @backupGlobals annotation can also be used on the test method level. This allows for a fine-grained configuration of the backup and restore operations:\n\
<pre>\n\
/**\n\
\ * @backupGlobals disabled\n\
\ */\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\    /**\n\
\     * @backupGlobals enabled\n\
\     */\n\
\    public function testThatInteractsWithGlobalVariables() {\n\
\        // ...\n\
\    }\n\
}\n\
</pre>
BackupStaticAttributesTag.documentation=The backup and restore operations for static attributes of classes can be completely disabled for all tests of a test case class like this\n\
<pre>\n\
/**\n\
\ * @backupStaticAttributes disabled\n\
\ */\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\    // ...\n\
}\n\
</pre>\n\
The @backupStaticAttributes annotation can also be used on the test method level. This allows for a fine-grained configuration of the backup and restore operations:\n\
<pre>\n\
/**\n\
\ * @backupStaticAttributes disabled\n\
\ */\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\    /**\n\
\     * @backupStaticAttributes enabled\n\
\     */\n\
\    public function testThatInteractsWithStaticAttributes() {\n\
\        // ...\n\
\    }\n\
}\n\
</pre>
CodeCoverageIgnoreTag.documentation=The @codeCoverageIgnore annotations can be used to exclude lines of code from the coverage analysis.\n\
<pre>\n\
/**\n\
\ * @codeCoverageIgnore\n\
\ */\n\
class Foo {\n\
\    public function bar() {\n\
\    }\n\
}\n\
\n\
class Bar {\n\
\    /**\n\
\     * @codeCoverageIgnore\n\
\     */\n\
\    public function foo() {\n\
\    }\n\
}\n\
</pre>
CoversTag.documentation=The @covers annotation can be used in the test code to specify which method(s) a test method wants to test:\n\
<pre>\n\
/**\n\
\ * @covers BankAccount::getBalance\n\
\ */\n\
public function testBalanceIsInitiallyZero() {\n\
\    $this->assertEquals(0, $this->ba->getBalance());\n\
}\n\
</pre>\n\
If provided, only the code coverage information for the specified method(s) will be considered.\n\
<table border="0">\
<tr>\
<th align="left">\
    Annotation\
</th>\
<th align="left">\
    Description\
</th>\
</tr>\
<tr>\
<td align="left" valign="top">\
    @covers&nbsp;ClassName::methodName\
</td>\
<td align="left">\
    Specifies that the annotated test method covers the specified method.\
</td>\
</tr>\
<tr>\
<td align="left" valign="top">\
    @covers&nbsp;ClassName\
</td>\
<td align="left">\
    Specifies that the annotated test method covers all methods of a given class.\
</td>\
</tr>\
<tr>\
<td align="left" valign="top">\
    @covers&nbsp;ClassName&lt;extended&gt;\
</td>\
<td align="left" valign="top">\
    Specifies that the annotated test method covers all methods of a given class and its parent class(es) and interface(s).\
</td>\
</tr>\
<tr>\
<td align="left" valign="top">\
    @covers&nbsp;ClassName::&lt;public&gt;\
</td>\
<td align="left">\
    Specifies that the annotated test method covers all public methods of a given class.\
</td>\
</tr>\
<tr>\
<td align="left" valign="top">\
    @covers&nbsp;ClassName::&lt;protected&gt;\
</td>\
<td align="left">\
    Specifies that the annotated test method covers all protected methods of a given class.\
</td>\
</tr>\
<tr>\
<td align="left" valign="top">\
    @covers&nbsp;ClassName::&lt;private&gt;\
</td>\
<td align="left">\
    Specifies that the annotated test method covers all private methods of a given class.\
</td>\
</tr>\
<tr>\
<td align="left" valign="top">\
    @covers&nbsp;ClassName::&lt;!public&gt;\
</td>\
<td align="left">\
    Specifies that the annotated test method covers all methods of a given class that are not public.\
</td>\
</tr>\
<tr>\
<td align="left" valign="top">\
    @covers&nbsp;ClassName::&lt;!protected&gt;\
</td>\
<td align="left">\
    Specifies that the annotated test method covers all methods of a given class that are not protected.\
</td>\
</tr>\
<tr>\
<td align="left" valign="top">\
    @covers&nbsp;ClassName::&lt;!private&gt;\
</td>\
<td align="left">\
    Specifies that the annotated test method covers all methods of a given class that are not private.\
</td>\
</tr>\
</table>
DataProviderTag.documentation=A test method can accept arbitrary arguments. These arguments are to be provided by a data provider method. \
The data provider method to be used is specified using the @dataProvider annotation.\n\
<pre>\n\
class DataTest extends PHPUnit_Framework_TestCase {\n\
\    /**\n\
\     * @dataProvider provider\n\
\     */\n\
\    public function testAdd($a, $b, $c) {\n\
\        $this->assertEquals($c, $a + $b);\n\
\    }\n\
\n\
\    public function provider() {\n\
\        return array(\n\
\          array(0, 0, 0),\n\
\          array(0, 1, 1),\n\
\          array(1, 0, 1),\n\
\          array(1, 1, 3)\n\
\        );\n\
\    }\n\
}\n\
</pre>
DependsTag.documentation=PHPUnit supports the declaration of explicit dependencies between test methods. Such dependencies do not define the order in which the test methods \
are to be executed but they allow the returning of an instance of the test fixture by a producer and passing it to the dependent consumers.\n\
<pre>\n\
class DependencyFailureTest extends PHPUnit_Framework_TestCase {\n\
\    public function testOne() {\n\
\        $this->assertTrue(FALSE);\n\
\    }\n\
\n\
\    /**\n\
\     * @depends testOne\n\
\     */\n\
\    public function testTwo() {\n\
\    }\n\
}\n\
</pre>
ExpectedExceptionTag.documentation=Use the @expectedException annotation to test whether an exception is thrown inside the tested code.\n\
<pre>\n\
class ExceptionTest extends PHPUnit_Framework_TestCase {\n\
\    /**\n\
\     * @expectedException InvalidArgumentException\n\
\     */\n\
\    public function testException() {\n\
\    }\n\
}\n\
</pre>
ExpectedExceptionCodeTag.documentation=The @expectedExceptionCode annotation, in conjunction with the @expectedException allows making assertions on the error code \
of a thrown exception thus being able to narrow down a specific exception.\n\
<pre>\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\    /**\n\
\     * @expectedException     MyException\n\
\     * @expectedExceptionCode 20\n\
\     */\n\
\    public function testExceptionHasErrorcode20() {\n\
\        throw new MyException('Some Message', 20);\n\
\    }\n\
}\n\
</pre>
ExpectedExceptionMessageTag.documentation=The @expectedExceptionMessage annotation works similar to @expectedExceptionCode as it lets you make an assertion \
on the error message of an exception.\n\
<pre>\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\    /**\n\
\     * @expectedException        MyException\n\
\     * @expectedExceptionMessage Some Message\n\
\     */\n\
\    public function testExceptionHasRightMessage() {\n\
\        throw new MyException('Some Message', 20);\n\
\    }\n\
}\n\
</pre>\n\
The expected message can be a substring of the exception Message. This can be useful to only assert that a certain name or parameter that was passed in shows up \
in the exception and not fixate the whole exception message in the test.\n\
<pre>\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\     /**\n\
\      * @expectedException        MyException\n\
\      * @expectedExceptionMessage broken\n\
\      */\n\
\     public function testExceptionHasRightMessage() {\n\
\         $param = "broken";\n\
\         throw new MyException('Invalid parameter "'.$param.'".', 20);\n\
\     }\n\
}\n\
</pre>
GroupTag.documentation=A test can be tagged as belonging to one or more groups using the @group annotation like this\n\
<pre>\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\    /**\n\
\     * @group specification\n\
\     */\n\
\    public function testSomething() {\n\
\    }\n\
\n\
\    /**\n\
\     * @group regression\n\
\     * @group bug2204\n\
\     */\n\
\    public function testSomethingElse() {\n\
\    }\n\
}\n\
</pre>\n\
Tests can be selected for execution based on groups using the --group and --exclude-group switches of the command-line test runner or using the respective directives \
of the XML configuration file.
OutputBufferingTag.documentation=The @outputBuffering annotation can be used to control PHP's output buffering like this\n\
<pre>\n\
/**\n\
\ * @outputBuffering enabled\n\
\ */\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\    // ...\n\
}\n\
</pre>\n\
The @outputBuffering annotation can also be used on the test method level. This allows for fine-grained control over the output buffering:\n\
<pre>\n\
/**\n\
\ * @outputBuffering disabled\n\
\ */\n\
class MyTest extends PHPUnit_Framework_TestCase {\n\
\    /**\n\
\     * @outputBuffering enabled\n\
\     */\n\
\    public function testThatPrintsSomething() {\n\
\        // ...\n\
\    }\n\
}\n\
</pre>
TestTag.documentation=As an alternative to prefixing your test method names with test, you can use the @test annotation in a method's docblock to mark it as a test method.\n\
<pre>\n\
/**\n\
\ * @test\n\
\ */\n\
public function initialBalanceShouldBe0() {\n\
\    $this->assertEquals(0, $this->ba->getBalance());\n\
}\n\
</pre>
