diff -r b12599c0f33d html.validation/src/org/netbeans/modules/html/validation/CharacterHandlerReader.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/html.validation/src/org/netbeans/modules/html/validation/CharacterHandlerReader.java	Thu Dec 02 15:51:11 2010 +0100
@@ -0,0 +1,178 @@
+/*
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
+ *
+ * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
+ *
+ * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
+ * Other names may be trademarks of their respective owners.
+ *
+ * The contents of this file are subject to the terms of either the GNU
+ * General Public License Version 2 only ("GPL") or the Common
+ * Development and Distribution License("CDDL") (collectively, the
+ * "License"). You may not use this file except in compliance with the
+ * License. You can obtain a copy of the License at
+ * http://www.netbeans.org/cddl-gplv2.html
+ * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
+ * specific language governing permissions and limitations under the
+ * License.  When distributing the software, include this License Header
+ * Notice in each file and include the License file at
+ * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the GPL Version 2 section of the License file that
+ * accompanied this code. If applicable, add the following below the
+ * License Header, with the fields enclosed by brackets [] replaced by
+ * your own identifying information:
+ * "Portions Copyrighted [year] [name of copyright owner]"
+ *
+ * If you wish your version of this file to be governed by only the CDDL
+ * or only the GPL Version 2, indicate your decision by adding
+ * "[Contributor] elects to include this software in this distribution
+ * under the [CDDL or GPL Version 2] license." If you do not indicate a
+ * single choice of license, a recipient has the option to distribute
+ * your version of this file under either the CDDL, the GPL Version 2 or
+ * to extend the choice of license to its licensees as provided above.
+ * However, if you add GPL Version 2 code and therefore, elected the GPL
+ * Version 2 license, then the option applies only if the new code is
+ * made subject to such option by the copyright holder.
+ *
+ * Contributor(s):
+ *
+ * Portions Copyrighted 2010 Sun Microsystems, Inc.
+ */
+package org.netbeans.modules.html.validation;
+
+import java.io.IOException;
+import java.io.StringReader;
+import java.nio.CharBuffer;
+import java.util.LinkedList;
+import java.util.List;
+import nu.validator.htmlparser.common.CharacterHandler;
+import org.xml.sax.SAXException;
+
+/**
+ *
+ * @author marekfukala
+ */
+public class CharacterHandlerReader extends StringReader {
+
+    private List<CharacterHandler> handlers = new LinkedList<CharacterHandler>();
+    private boolean reading = false;
+
+    public CharacterHandlerReader(String s) {
+        super(s);
+    }
+
+    public void addCharacterHandler(CharacterHandler handler) {
+        handlers.add(handler);
+    }
+
+    public boolean removeCharacterHandler(CharacterHandler handler) {
+        return handlers.remove(handler);
+    }
+
+    @Override
+    public void mark(int readAheadLimit) throws IOException {
+        super.mark(readAheadLimit);
+    }
+
+    @Override
+    public int read() throws IOException {
+        reading();
+
+        int read = super.read();
+        characters(new char[]{(char) read}, 0, 1);
+        return read;
+    }
+
+    @Override
+    public int read(char[] cbuf, int off, int len) throws IOException {
+        reading();
+
+        int read = super.read(cbuf, off, len);
+        characters(cbuf, off, len);
+        return read;
+    }
+
+    @Override
+    public void reset() throws IOException {
+        super.reset();
+    }
+
+    @Override
+    public long skip(long ns) throws IOException {
+        return super.skip(ns);
+    }
+
+    //implementation copied from the StringReader
+    @Override
+    public int read(CharBuffer target) throws IOException {
+        reading();
+
+        int len = target.remaining();
+        char[] cbuf = new char[len];
+        int n = read(cbuf, 0, len);
+        if (n > 0) {
+            characters(cbuf, 0, n);
+        }
+        target.put(cbuf, 0, n);
+        return n;
+    }
+
+    @Override
+    public int read(char[] cbuf) throws IOException {
+        reading();
+        
+        int read = super.read(cbuf);
+        characters(cbuf, 0, cbuf.length);
+        return read;
+    }
+
+    @Override
+    public void close() {
+        super.close();
+        end();
+    }
+
+    private void characters(char[] chars, int offset, int len) throws IOException {
+        assert chars != null;
+        assert chars.length > 0;
+        assert offset >= 0;
+        assert len > 0;
+
+        try {
+            for (CharacterHandler handler : handlers) {
+                handler.characters(chars, offset, len);
+            }
+        } catch (SAXException ex) {
+            throw new IOException(ex);
+        }
+
+    }
+
+    private void start() throws IOException {
+        try {
+            for (CharacterHandler handler : handlers) {
+                handler.start();
+            }
+        } catch (SAXException ex) {
+            throw new IOException(ex);
+        }
+    }
+
+     private void end() {
+        try {
+            for (CharacterHandler handler : handlers) {
+                handler.end();
+            }
+        } catch (SAXException ex) {
+            throw new RuntimeException(ex);
+        }
+    }
+
+    private void reading() throws IOException {
+        if(!reading) {
+            start();
+            reading = true;
+        }
+    }
+}
diff -r b12599c0f33d html.validation/src/org/netbeans/modules/html/validation/ValidationTransaction.java
--- a/html.validation/src/org/netbeans/modules/html/validation/ValidationTransaction.java	Wed Dec 01 11:44:02 2010 +0100
+++ b/html.validation/src/org/netbeans/modules/html/validation/ValidationTransaction.java	Thu Dec 02 15:51:11 2010 +0100
@@ -2,28 +2,32 @@
  * Copyright (c) 2005, 2006 Henri Sivonen
  * Copyright (c) 2007-2010 Mozilla Foundation
  *
- * Permission is hereby granted, free of charge, to any person obtaining a 
- * copy of this software and associated documentation files (the "Software"), 
- * to deal in the Software without restriction, including without limitation 
- * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
- * and/or sell copies of the Software, and to permit persons to whom the 
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
  * Software is furnished to do so, subject to the following conditions:
  *
- * The above copyright notice and this permission notice shall be included in 
+ * The above copyright notice and this permission notice shall be included in
  * all copies or substantial portions of the Software.
  *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
- * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
- * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  * DEALINGS IN THE SOFTWARE.
  */
 package org.netbeans.modules.html.validation;
 
+import java.io.Reader;
 import java.net.URL;
 import java.util.ArrayList;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.parsers.SAXParser;
+import nu.validator.gnu.xml.aelfred2.SAXDriver;
 import org.netbeans.api.progress.ProgressHandle;
 import org.netbeans.api.progress.ProgressHandleFactory;
 import org.netbeans.editor.ext.html.parser.api.HtmlVersion;
@@ -33,7 +37,6 @@
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
-import java.io.StringReader;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
@@ -50,7 +53,6 @@
 import java.util.regex.Pattern;
 
 
-import nu.validator.gnu.xml.aelfred2.SAXDriver;
 import nu.validator.htmlparser.common.DoctypeExpectation;
 import nu.validator.htmlparser.common.DocumentMode;
 import nu.validator.htmlparser.common.DocumentModeHandler;
@@ -109,7 +111,9 @@
 import com.thaiopensource.validate.prop.rng.RngProperty;
 import com.thaiopensource.validate.prop.wrap.WrapProperty;
 import com.thaiopensource.validate.rng.CompactSchemaReader;
+import java.io.StringReader;
 import java.util.logging.Handler;
+import javax.xml.parsers.SAXParserFactory;
 import org.netbeans.editor.ext.html.parser.api.ProblemDescription;
 
 /**
@@ -182,8 +186,10 @@
     private BufferingRootNamespaceSniffer bufferingRootNamespaceSniffer = null;
     private String contentType = null;
     protected HtmlParser htmlParser = null;
-    protected SAXDriver xmlParser = null;
+//    protected SAXDriver xmlParser = null;
+    protected SAXParser xmlParser = null;
     protected XMLReader reader;
+    private CharacterHandlerReader sourceReader;
     protected TypedInputSource documentInput;
     protected PrudentHttpEntityResolver httpRes;
     protected DataUriEntityResolver dataRes;
@@ -394,7 +400,7 @@
 
             html5spec = Html5SpecBuilder.parseSpec(LocalCacheEntityResolver.getHtml5SpecAsStream());
 //            progress.progress(50);
-            
+
             LOGGER.fine("Spec read.");
 
             LOGGER.fine("Initialization complete.");
@@ -405,7 +411,7 @@
             throw new RuntimeException(e);
         } finally {
             progress.finish();
-        
+
         }
     }
 
@@ -465,7 +471,7 @@
 
     public void validateCode(String code, String sourceURI) throws SAXException {
         long from = System.currentTimeMillis();
-        
+
         codeToValidate = code;
         document = sourceURI; //represents an URI where the document can be loaded
         parser = htmlVersion2ParserMode(version);
@@ -481,7 +487,7 @@
         errorHandler.setErrorsOnly(false);
 
         validate();
-        
+
         validationTime = System.currentTimeMillis() - from;
     }
 
@@ -507,7 +513,7 @@
                     return ParserMode.AUTO;
             }
         }
-        
+
     }
 
     private boolean isHtmlUnsafePreset() {
@@ -569,14 +575,14 @@
             reader.setErrorHandler(errorHandler);
             contentType = documentInput.getType();
             sourceCode.initialize(documentInput);
-            if (validator == null) {
-                checkNormalization = true;
-            }
-            if (checkNormalization) {
-                reader.setFeature(
-                        "http://xml.org/sax/features/unicode-normalization-checking",
-                        true);
-            }
+//            if (validator == null) {
+//                checkNormalization = true;
+//            }
+//            if (checkNormalization) {
+//                reader.setFeature(
+//                        "http://xml.org/sax/features/unicode-normalization-checking",
+//                        true);
+//            }
             WiretapXMLReaderWrapper wiretap = new WiretapXMLReaderWrapper(
                     reader);
             ContentHandler recorder = sourceCode.getLocationRecorder();
@@ -602,9 +608,11 @@
                     reader = new NamespaceDroppingXMLReaderWrapper(reader,
                             filteredNamespaces);
                 }
-                xmlParser.setErrorHandler(errorHandler.getExactErrorHandler());
-                xmlParser.lockErrorHandler();
-                xmlParser.setCharacterHandler(linesMapper);
+                xmlParser.getXMLReader().setErrorHandler(errorHandler.getExactErrorHandler());
+//                xmlParser.setErrorHandler(errorHandler.getExactErrorHandler());
+//                xmlParser.lockErrorHandler();
+//                xmlParser.setCharacterHandler(linesMapper);
+                sourceReader.addCharacterHandler(linesMapper);
             } else {
                 throw new RuntimeException("Bug. Unreachable.");
             }
@@ -627,6 +635,11 @@
                 documentInput.setEncoding(charsetOverride);
             }
             reader.parse(documentInput);
+        } catch (ParserConfigurationException e) {
+            LOGGER.log(Level.INFO, getDocumentErrorMsg(), e);
+            errorHandler.internalError(
+                    e,
+                    "Oops. That was not supposed to happen. A bug manifested itself in the application internals. See the IDE log for more information");
         } catch (TooManyErrorsException e) {
             LOGGER.log(Level.INFO, getDocumentErrorMsg(), e);
             errorHandler.fatalError(e);
@@ -652,11 +665,11 @@
             errorHandler.end(successMessage(), failureMessage());
         }
     }
-    
+
     private String getDocumentErrorMsg() {
         return new StringBuilder().append("An error occured during validation of ").append(document).toString();
     }
-    
+
     private String getDocumentInternalErrorMsg() {
         return new StringBuilder().append("An internal error occured during validation of ").append(document).toString();
     }
@@ -709,7 +722,7 @@
      */
     protected void loadDocAndSetupParser() throws SAXException, IOException,
             IncorrectSchemaException, SAXNotRecognizedException,
-            SAXNotSupportedException {
+            SAXNotSupportedException, ParserConfigurationException {
         switch (parser) {
             case HTML_AUTO:
             case HTML:
@@ -725,7 +738,7 @@
                 setAllowHtml(true);
                 setAcceptAllKnownXmlTypes(false);
                 setAllowXhtml(false);
-                loadDocumentInput();
+                loadDocumentInput(false);
                 newHtmlParser();
                 DoctypeExpectation doctypeExpectation;
                 int schemaId;
@@ -764,7 +777,7 @@
                 setAllowHtml(false);
                 setAcceptAllKnownXmlTypes(true);
                 setAllowXhtml(true);
-                loadDocumentInput();
+                loadDocumentInput(true);
                 setupXmlParser();
                 break;
             default:
@@ -772,7 +785,7 @@
                 setAllowHtml(true);
                 setAcceptAllKnownXmlTypes(true);
                 setAllowXhtml(true);
-                loadDocumentInput();
+                loadDocumentInput(false);
                 if ("text/html".equals(documentInput.getType())) {
                     if (isHtmlUnsafePreset()) {
                         String message = "The Content-Type was \u201Ctext/html\u201D, but the chosen preset schema is not appropriate for HTML.";
@@ -799,7 +812,7 @@
     }
 
     /**
-     * 
+     *
      */
     protected void newHtmlParser() {
         htmlParser = new HtmlParser();
@@ -835,14 +848,23 @@
      * @throws SAXNotSupportedException
      */
     protected void setupXmlParser() throws SAXNotRecognizedException,
-            SAXNotSupportedException {
-        xmlParser = new SAXDriver();
-        xmlParser.setCharacterHandler(sourceCode);
+            SAXNotSupportedException,
+            ParserConfigurationException,
+            SAXException {
+//        xmlParser = new SAXDriver();
+//        xmlParser.setCharacterHandler(sourceCode);
+
+        SAXParserFactory factory = SAXParserFactory.newInstance();
+        factory.setNamespaceAware(true);
+        factory.setValidating(false);
+        xmlParser = factory.newSAXParser();
+        sourceReader.addCharacterHandler(sourceCode);
         if (lexicalHandler != null) {
             xmlParser.setProperty("http://xml.org/sax/properties/lexical-handler",
                     (LexicalHandler) lexicalHandler);
         }
-        reader = new IdFilter(xmlParser);
+//        reader = new IdFilter(xmlParser);
+        reader = new IdFilter(xmlParser.getXMLReader());
         reader.setFeature("http://xml.org/sax/features/string-interning", true);
         reader.setFeature(
                 "http://xml.org/sax/features/external-general-entities",
@@ -1043,7 +1065,7 @@
             String label = presetLabels[index];
             String urls = presetUrls[index];
             errorHandler.info("Using the preset for " + label
-                    + " based on the root namespace.");
+                    + " based on the root namespace " + namespace);
             try {
                 validator = validatorByUrls(urls);
             } catch (IOException ioe) {
@@ -1215,10 +1237,20 @@
 //        dataRes.setAllowXhtml(allowXhtml);
     }
 
-    public void loadDocumentInput() {
+    public void loadDocumentInput(boolean xhtmlContent) {
         assert codeToValidate != null;
 
-        documentInput = new TypedInputSource(new StringReader(codeToValidate));
+        //Aelfred removal workaround - we need to somehow preserve the
+        //functionality added by hsivonen - CharacterHandler-s.
+        //So for xml we use a patched reader which does more or less the same.
+        //for html content the flow remains.
+        Reader reader;
+        reader = xhtmlContent
+                ? sourceReader =  new CharacterHandlerReader(codeToValidate)
+                : new StringReader(codeToValidate);
+
+        documentInput = new TypedInputSource(reader);
+//        documentInput = new TypedInputSource(new StringReader(codeToValidate));
         documentInput.setType("text/html");
         documentInput.setLength(codeToValidate.length());
         documentInput.setEncoding("UTF-8");
diff -r b12599c0f33d html.validation/test/unit/src/org/netbeans/modules/html/validation/ValidationTransactionTest.java
--- a/html.validation/test/unit/src/org/netbeans/modules/html/validation/ValidationTransactionTest.java	Wed Dec 01 11:44:02 2010 +0100
+++ b/html.validation/test/unit/src/org/netbeans/modules/html/validation/ValidationTransactionTest.java	Thu Dec 02 15:51:11 2010 +0100
@@ -128,6 +128,24 @@
                 + "</html>    ", true, HtmlVersion.XHTML5);
     }
 
+     public void testXhtmlFailOnXmlParsing() throws SAXException {
+        validate("<?xml version='1.0' encoding='UTF-8' ?>"
+                + "<html xmlns=\"http://www.w3.org/1999/xhtml\">"
+                + "<head><title>title</title></head>"
+                + "<bodyyyyyy>"
+                + "</body>"
+                + "</html>    ", false, HtmlVersion.XHTML5);
+    }
+
+    public void testXhtmlFailOnSchamatron() throws SAXException {
+        validate("<?xml version='1.0' encoding='UTF-8' ?>"
+                + "<html xmlns=\"http://www.w3.org/1999/xhtml\">"
+                + "<head><title>title</title></head>"
+                + "<body unknown=\"attribute\">"
+                + "</body>"
+                + "</html>    ", false, HtmlVersion.XHTML5);
+    }
+
     public void testHtml4() throws SAXException {
         validate("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n"
                 + "<html>"
