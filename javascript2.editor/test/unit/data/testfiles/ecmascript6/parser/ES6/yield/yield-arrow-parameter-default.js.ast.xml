<FunctionNode name=':program' kind='SCRIPT' start='0' end='18'>
  <isProgram/>
  <!-- FunctionNode Parameters -->
  <!-- FunctionNode Body -->
  <Block start='0' end='17'>
    <isFunctionBody/>
    <isSynthetic/>
    <!-- Block Statements -->
    <ExpressionStatement start='0' end='17'>
      <FunctionNode name='=>:1' kind='ARROW' start='0' end='17'>
        <isAnonymous/>
        <!-- FunctionNode Parameters -->
        <IdentNode start='1' end='2'>
          <name>x</name>
        </IdentNode>
        <!-- FunctionNode Body -->
        <Block start='15' end='16'>
          <isParameterBlock/>
          <!-- Block Statements -->
          <ExpressionStatement start='1' end='2'>
            <BinaryNode type='ASSIGN' start='1' end='2'>
              <isAssignment/>
              <!-- BinaryNode lhs -->
              <IdentNode start='1' end='2'>
                <name>x</name>
              </IdentNode>
              <!-- BinaryNode rhs -->
              <TernaryNode start='1' end='2'>
                <BinaryNode type='EQ_STRICT' start='1' end='14'>
                  <isComparison/>
                  <!-- BinaryNode lhs -->
                  <IdentNode start='1' end='2'>
                    <name>x</name>
                  </IdentNode>
                  <!-- BinaryNode rhs -->
                  <UnaryNode type='VOID' start='1' end='14'>
                    <!-- UnaryNode Expression -->
                    <NumberLiteralNode value='0' start='1' end='14'/>
                  </UnaryNode>
                </BinaryNode>
                <JoinPredecessorExpression start='5' end='10'>
                  <IdentNode start='5' end='10'>
                    <name>yield</name>
                    <isFutureStrictName/>
                  </IdentNode>
                </JoinPredecessorExpression>
                <JoinPredecessorExpression start='1' end='2'>
                  <IdentNode start='1' end='2'>
                    <name>x</name>
                  </IdentNode>
                </JoinPredecessorExpression>
              </TernaryNode>
            </BinaryNode>
          </ExpressionStatement>
          <BlockStatement start='15' end='16'>
            <Block start='15' end='16'>
              <isFunctionBody/>
              <!-- Block Statements -->
            </Block>
          </BlockStatement>
        </Block>
      </FunctionNode>
    </ExpressionStatement>
  </Block>
</FunctionNode>
