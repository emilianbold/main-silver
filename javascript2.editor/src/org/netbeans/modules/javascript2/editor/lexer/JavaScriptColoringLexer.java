/* The following code was generated by JFlex 1.4.3 on 11/25/11 10:33 AM */

package org.netbeans.modules.javascript2.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/25/11 10:33 AM from the specification file
 * <tt>/home/sickboy/workspace/netbeans-web/javascript2.editor/tools/JavaScriptColoringScanner.flex</tt>
 */
public final class JavaScriptColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int SSTRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\65"+
    "\1\24\1\0\1\6\1\75\1\71\1\25\1\52\1\53\1\5\1\73"+
    "\1\61\1\23\1\21\1\4\1\10\1\16\2\15\4\17\2\11\1\70"+
    "\1\60\1\64\1\62\1\63\1\67\1\0\1\31\1\27\1\33\1\14"+
    "\1\22\1\20\1\47\1\36\1\41\1\6\1\32\1\12\1\50\1\40"+
    "\1\37\1\45\1\6\1\30\1\34\1\35\1\42\1\46\1\44\1\13"+
    "\1\43\1\51\1\56\1\26\1\57\1\74\1\6\1\0\1\31\1\27"+
    "\1\33\1\14\1\22\1\20\1\47\1\36\1\41\1\6\1\32\1\12"+
    "\1\50\1\40\1\37\1\45\1\6\1\30\1\34\1\35\1\42\1\46"+
    "\1\44\1\13\1\43\1\51\1\54\1\72\1\55\1\66\41\7\2\0"+
    "\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0"+
    "\27\6\1\0\37\6\1\0\u013f\6\31\0\162\6\4\0\14\6\16\0"+
    "\5\6\11\0\1\6\21\0\130\7\5\0\23\7\12\0\1\6\13\0"+
    "\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\54\6\1\0"+
    "\46\6\1\0\5\6\4\0\202\6\1\0\4\7\3\0\105\6\1\0"+
    "\46\6\2\0\2\6\6\0\20\6\41\0\46\6\2\0\1\6\7\0"+
    "\47\6\11\0\21\7\1\0\27\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\1\0\1\7\13\0\33\6\5\0\3\6\15\0\4\7\14\0"+
    "\6\7\13\0\32\6\5\0\13\6\16\7\7\0\12\7\4\0\2\6"+
    "\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0"+
    "\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7"+
    "\36\6\33\7\2\0\3\6\60\0\46\6\13\7\1\6\u014f\0\3\7"+
    "\66\6\2\0\1\7\1\6\20\7\2\0\1\6\4\7\3\0\12\6"+
    "\2\7\2\0\12\7\21\0\3\7\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6"+
    "\7\7\2\0\2\7\2\0\3\7\11\0\1\7\4\0\2\6\1\0"+
    "\3\6\2\7\2\0\12\7\4\6\15\0\3\7\1\0\6\6\4\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\13\0"+
    "\4\6\1\0\1\6\7\0\14\7\3\6\14\0\3\7\1\0\11\6"+
    "\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6"+
    "\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\2\0\1\7\1\6\6\7\3\0\2\7\2\0\3\7\10\0"+
    "\2\7\4\0\2\6\1\0\3\6\4\0\12\7\1\0\1\6\20\0"+
    "\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6"+
    "\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\10\6"+
    "\1\0\3\6\4\0\5\7\3\0\3\7\1\0\4\7\11\0\1\7"+
    "\17\0\11\7\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\4\0\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\11\0\2\6\4\0\12\7\22\0\2\7"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6"+
    "\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7"+
    "\7\0\1\6\1\0\2\6\4\0\12\7\22\0\2\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\20\6\4\0\6\7\2\0\3\7"+
    "\1\0\4\7\11\0\1\7\10\0\2\6\4\0\12\7\22\0\2\7"+
    "\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6"+
    "\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7"+
    "\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7"+
    "\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6"+
    "\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6"+
    "\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6"+
    "\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0\2\6"+
    "\42\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7"+
    "\1\0\1\7\4\0\2\7\10\6\1\0\42\6\6\0\24\7\1\0"+
    "\2\7\4\6\4\0\10\7\1\0\44\7\11\0\1\7\71\0\42\6"+
    "\1\0\5\6\1\0\2\6\1\0\7\7\3\0\4\7\6\0\12\7"+
    "\6\0\6\6\4\7\106\0\46\6\12\0\51\6\7\0\132\6\5\0"+
    "\104\6\5\0\122\6\6\0\7\6\1\0\77\6\1\0\1\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\47\6\1\0"+
    "\1\6\1\0\4\6\2\0\37\6\1\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\7\6\1\0"+
    "\27\6\1\0\37\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0"+
    "\47\6\1\0\23\6\16\0\11\7\56\0\125\6\14\0\u026c\6\2\0"+
    "\10\6\12\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0"+
    "\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6"+
    "\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0"+
    "\2\6\1\7\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6"+
    "\10\0\51\6\1\7\126\0\35\6\3\0\14\7\4\0\14\7\12\0"+
    "\12\7\36\6\2\0\5\6\u038b\0\154\6\224\0\234\6\4\0\132\6"+
    "\6\0\26\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6"+
    "\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6"+
    "\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6\17\0\4\7"+
    "\32\0\5\7\20\0\2\6\23\0\1\6\13\0\4\7\6\0\6\7"+
    "\1\0\1\6\15\0\1\6\40\0\22\6\36\0\15\7\4\0\1\7"+
    "\3\0\6\7\27\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6"+
    "\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\3\6\1\0\7\6\3\0\3\6\5\0\5\6\26\0\44\6"+
    "\u0e81\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6\4\0"+
    "\126\6\2\0\2\7\2\0\3\6\1\0\137\6\5\0\50\6\4\0"+
    "\136\6\21\0\30\6\70\0\20\6\u0200\0\u19b6\6\112\0\u51a6\6\132\0"+
    "\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0\7\6\14\0"+
    "\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0"+
    "\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0"+
    "\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0\4\7\17\0"+
    "\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0"+
    "\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0"+
    "\32\6\12\0\132\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0"+
    "\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\3\2\1\3\1\4\1\5\2\6\3\5"+
    "\1\7\1\5\1\10\1\11\1\12\14\5\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\1\2\37\1\40\2\1\1\41\1\0"+
    "\1\42\1\43\3\6\1\0\3\6\1\0\2\5\1\44"+
    "\10\5\1\45\1\46\24\5\1\47\1\50\11\5\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\2\1\2\41\2\0"+
    "\4\6\1\0\7\5\1\67\27\5\1\70\3\5\1\71"+
    "\3\5\1\72\7\5\1\73\3\5\1\74\1\75\1\76"+
    "\1\0\2\6\1\77\10\5\1\100\2\5\1\101\2\5"+
    "\1\102\3\5\1\103\1\5\1\104\10\5\1\105\1\5"+
    "\1\106\2\5\1\107\5\5\1\110\5\5\1\111\1\112"+
    "\1\113\2\6\4\5\1\114\1\115\1\116\3\5\1\117"+
    "\3\5\1\120\1\121\1\122\2\5\1\123\1\124\3\5"+
    "\1\125\6\5\1\126\5\5\2\6\1\127\2\5\1\130"+
    "\3\5\1\131\1\5\1\132\2\5\1\133\1\5\1\134"+
    "\1\5\1\135\1\136\1\137\3\5\1\140\3\5\1\141"+
    "\1\5\2\6\1\142\1\5\1\143\1\5\1\144\1\145"+
    "\10\5\1\146\1\147\1\5\2\6\1\150\1\151\1\152"+
    "\1\153\6\5\1\154\2\6\1\5\1\155\1\5\1\156"+
    "\1\5\1\157\2\6\1\5\1\160\1\161\1\0\1\6"+
    "\1\5\1\0\1\6\1\162\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\5\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[382];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\272\0\u0136\0\u0174"+
    "\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364"+
    "\0\u03a2\0\u03e0\0\272\0\272\0\u041e\0\u045c\0\u049a\0\u04d8"+
    "\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8"+
    "\0\272\0\272\0\272\0\272\0\272\0\272\0\272\0\272"+
    "\0\u0706\0\u0744\0\u0782\0\u07c0\0\272\0\272\0\272\0\u07fe"+
    "\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972\0\272\0\272"+
    "\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a\0\272\0\272\0\u0aa8\0\u0ae6"+
    "\0\272\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98"+
    "\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88"+
    "\0\u0ec6\0\272\0\272\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc"+
    "\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec"+
    "\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u01f0"+
    "\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e"+
    "\0\u15cc\0\u160a\0\272\0\272\0\u1648\0\272\0\u1686\0\272"+
    "\0\272\0\272\0\272\0\272\0\272\0\272\0\272\0\272"+
    "\0\u16c4\0\u1702\0\u1740\0\272\0\u177e\0\u17bc\0\u17fa\0\u1838"+
    "\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28"+
    "\0\u1a66\0\u1aa4\0\u01f0\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda"+
    "\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca"+
    "\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba"+
    "\0\u1ff8\0\u2036\0\u01f0\0\u2074\0\u20b2\0\u20f0\0\u01f0\0\u212e"+
    "\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e"+
    "\0\u235c\0\u239a\0\u01f0\0\u23d8\0\u2416\0\u2454\0\272\0\u2492"+
    "\0\272\0\u24d0\0\u250e\0\u254c\0\u01f0\0\u258a\0\u25c8\0\u2606"+
    "\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u01f0\0\u277a\0\u27b8"+
    "\0\u01f0\0\u27f6\0\u2834\0\u01f0\0\u2872\0\u28b0\0\u28ee\0\u01f0"+
    "\0\u292c\0\u01f0\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0"+
    "\0\u2ade\0\u2b1c\0\u01f0\0\u2b5a\0\u01f0\0\u2b98\0\u2bd6\0\u01f0"+
    "\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u01f0\0\u2d4a\0\u2d88"+
    "\0\u2dc6\0\u2e04\0\u2e42\0\u01f0\0\u01f0\0\272\0\u2e80\0\u2ebe"+
    "\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6\0\u01f0\0\u01f0\0\u2ff4\0\u3032"+
    "\0\u3070\0\u30ae\0\u01f0\0\u30ec\0\u312a\0\u3168\0\u01f0\0\u01f0"+
    "\0\u01f0\0\u31a6\0\u31e4\0\u01f0\0\u01f0\0\u3222\0\u3260\0\u329e"+
    "\0\u32dc\0\u331a\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450\0\u01f0"+
    "\0\u348e\0\u34cc\0\u350a\0\u3548\0\u3586\0\u35c4\0\u3602\0\u01f0"+
    "\0\u3640\0\u367e\0\u01f0\0\u36bc\0\u36fa\0\u3738\0\u01f0\0\u3776"+
    "\0\u01f0\0\u37b4\0\u37f2\0\u01f0\0\u3830\0\u01f0\0\u386e\0\u01f0"+
    "\0\u01f0\0\u01f0\0\u38ac\0\u38ea\0\u3928\0\u01f0\0\u3966\0\u39a4"+
    "\0\u39e2\0\u01f0\0\u3a20\0\u3a5e\0\u3a9c\0\u01f0\0\u3ada\0\u01f0"+
    "\0\u3b18\0\u01f0\0\u01f0\0\u3b56\0\u3b94\0\u3bd2\0\u3c10\0\u3c4e"+
    "\0\u3c8c\0\u3cca\0\u3d08\0\u01f0\0\u01f0\0\u3d46\0\u3d84\0\u3dc2"+
    "\0\u01f0\0\u01f0\0\u01f0\0\u01f0\0\u3e00\0\u3e3e\0\u3e7c\0\u3eba"+
    "\0\u3ef8\0\u3f36\0\u01f0\0\u3f74\0\u3fb2\0\u3ff0\0\u01f0\0\u402e"+
    "\0\u01f0\0\u406c\0\u01f0\0\u40aa\0\u40e8\0\u4126\0\u01f0\0\u01f0"+
    "\0\u4164\0\u41a2\0\u41e0\0\u421e\0\u425c\0\u01f0\0\u429a\0\u42d8"+
    "\0\u4316\0\u4354\0\u4392\0\u43d0\0\u440e\0\u444c\0\u448a\0\u44c8"+
    "\0\u4506\0\u4544\0\u4582\0\u45c0\0\u45fe\0\u463c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[382];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\13\1\14\1\15\1\12\1\16\3\14\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\4\1\25\1\26\1\27"+
    "\1\12\1\30\1\31\1\32\2\12\1\33\1\34\2\12"+
    "\1\35\1\36\1\37\1\40\2\12\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\21\65\1\70\1\65\1\71"+
    "\47\65\1\72\1\66\1\67\22\72\1\70\1\71\47\72"+
    "\100\0\1\6\76\0\1\7\76\0\1\73\1\74\54\0"+
    "\1\75\75\0\1\76\21\0\13\12\1\0\1\12\4\0"+
    "\23\12\34\0\1\77\1\100\1\101\1\102\1\101\1\103"+
    "\1\104\1\103\1\101\1\105\1\106\63\0\2\14\1\101"+
    "\1\0\1\101\3\14\1\101\1\105\1\106\61\0\13\12"+
    "\1\0\1\12\4\0\10\12\1\107\12\12\32\0\13\12"+
    "\1\0\1\110\4\0\10\12\1\111\12\12\32\0\4\12"+
    "\1\112\6\12\1\0\1\12\4\0\2\12\1\113\5\12"+
    "\1\114\1\12\1\115\1\116\7\12\34\0\2\105\3\0"+
    "\3\105\64\0\4\12\1\117\1\120\5\12\1\0\1\12"+
    "\4\0\11\12\1\121\11\12\47\0\1\122\36\0\1\123"+
    "\21\0\13\12\1\0\1\12\4\0\1\12\1\124\6\12"+
    "\1\125\3\12\1\126\6\12\32\0\13\12\1\0\1\127"+
    "\4\0\23\12\32\0\13\12\1\0\1\12\4\0\1\130"+
    "\22\12\32\0\4\12\1\131\6\12\1\0\1\12\4\0"+
    "\2\12\1\132\4\12\1\133\1\134\12\12\32\0\13\12"+
    "\1\0\1\12\4\0\6\12\1\135\1\136\3\12\1\137"+
    "\1\140\1\141\5\12\32\0\13\12\1\0\1\12\4\0"+
    "\1\12\1\142\5\12\1\143\4\12\1\144\6\12\32\0"+
    "\13\12\1\0\1\145\4\0\2\12\1\146\10\12\1\147"+
    "\7\12\32\0\12\12\1\150\1\0\1\12\4\0\11\12"+
    "\1\151\7\12\1\152\1\12\32\0\13\12\1\0\1\12"+
    "\4\0\7\12\1\153\2\12\1\154\10\12\32\0\13\12"+
    "\1\0\1\12\4\0\1\12\1\155\1\156\10\12\1\157"+
    "\7\12\32\0\13\12\1\0\1\12\4\0\2\12\1\160"+
    "\5\12\1\161\12\12\32\0\13\12\1\0\1\12\4\0"+
    "\10\12\1\162\12\12\106\0\1\163\75\0\1\164\1\165"+
    "\74\0\1\166\1\0\1\167\73\0\1\170\75\0\1\171"+
    "\6\0\1\172\66\0\1\173\7\0\1\174\65\0\1\175"+
    "\10\0\1\176\64\0\1\177\75\0\1\200\13\0\1\65"+
    "\2\0\21\65\1\0\1\65\1\0\47\65\2\0\1\67"+
    "\73\0\2\4\1\0\5\4\1\201\4\4\2\201\1\202"+
    "\56\4\1\72\2\0\22\72\2\0\47\72\1\73\1\203"+
    "\1\204\73\73\5\205\1\206\70\205\10\0\1\77\1\100"+
    "\1\101\1\0\1\101\1\103\1\104\1\103\1\101\1\105"+
    "\1\106\63\0\2\100\2\0\1\101\3\100\1\101\1\105"+
    "\1\106\63\0\1\207\1\210\2\0\5\210\1\0\1\210"+
    "\4\0\1\210\1\0\1\210\1\0\1\210\52\0\1\211"+
    "\1\100\1\101\1\0\1\101\3\211\1\101\1\105\1\106"+
    "\63\0\1\103\1\100\1\101\1\0\1\101\3\103\1\101"+
    "\1\105\1\106\63\0\2\105\2\0\1\101\3\105\1\101"+
    "\1\0\1\106\63\0\2\212\3\0\3\212\3\0\1\213"+
    "\47\0\1\213\10\0\13\12\1\0\1\12\4\0\11\12"+
    "\1\214\11\12\32\0\4\12\1\215\5\12\1\216\1\0"+
    "\1\12\4\0\1\217\22\12\32\0\13\12\1\0\1\12"+
    "\4\0\13\12\1\220\7\12\32\0\13\12\1\0\1\12"+
    "\4\0\10\12\1\221\12\12\32\0\4\12\1\222\6\12"+
    "\1\0\1\12\4\0\23\12\32\0\13\12\1\0\1\12"+
    "\4\0\1\12\1\223\21\12\32\0\13\12\1\0\1\12"+
    "\4\0\11\12\1\224\11\12\32\0\13\12\1\0\1\12"+
    "\4\0\11\12\1\225\11\12\32\0\13\12\1\0\1\12"+
    "\4\0\5\12\1\226\15\12\32\0\13\12\1\0\1\12"+
    "\4\0\6\12\1\227\7\12\1\230\4\12\32\0\13\12"+
    "\1\0\1\12\4\0\13\12\1\231\7\12\32\0\13\12"+
    "\1\0\1\232\4\0\23\12\32\0\13\12\1\0\1\12"+
    "\4\0\10\12\1\233\12\12\32\0\13\12\1\0\1\12"+
    "\4\0\6\12\1\234\14\12\32\0\13\12\1\0\1\12"+
    "\4\0\6\12\1\235\14\12\32\0\13\12\1\0\1\12"+
    "\4\0\5\12\1\236\15\12\32\0\13\12\1\0\1\12"+
    "\4\0\2\12\1\237\20\12\32\0\13\12\1\0\1\12"+
    "\4\0\5\12\1\240\1\241\14\12\32\0\13\12\1\0"+
    "\1\12\4\0\2\12\1\242\20\12\32\0\13\12\1\0"+
    "\1\12\4\0\11\12\1\243\11\12\32\0\13\12\1\0"+
    "\1\12\4\0\2\12\1\244\20\12\32\0\13\12\1\0"+
    "\1\12\4\0\10\12\1\245\12\12\32\0\13\12\1\0"+
    "\1\12\4\0\16\12\1\246\4\12\32\0\13\12\1\0"+
    "\1\12\4\0\11\12\1\247\11\12\32\0\13\12\1\0"+
    "\1\12\4\0\12\12\1\250\10\12\32\0\13\12\1\0"+
    "\1\12\4\0\2\12\1\251\10\12\1\252\1\253\6\12"+
    "\32\0\13\12\1\0\1\12\4\0\1\12\1\254\10\12"+
    "\1\255\10\12\32\0\13\12\1\0\1\12\4\0\16\12"+
    "\1\256\4\12\32\0\13\12\1\0\1\12\4\0\15\12"+
    "\1\257\5\12\32\0\13\12\1\0\1\12\4\0\6\12"+
    "\1\260\14\12\32\0\4\12\1\261\6\12\1\0\1\12"+
    "\4\0\23\12\32\0\13\12\1\0\1\12\4\0\5\12"+
    "\1\262\1\263\14\12\32\0\13\12\1\0\1\12\4\0"+
    "\16\12\1\264\4\12\32\0\13\12\1\0\1\12\4\0"+
    "\12\12\1\265\10\12\32\0\13\12\1\0\1\12\4\0"+
    "\6\12\1\266\14\12\32\0\13\12\1\0\1\12\4\0"+
    "\10\12\1\267\1\12\1\270\10\12\32\0\13\12\1\0"+
    "\1\12\4\0\4\12\1\271\16\12\32\0\13\12\1\0"+
    "\1\12\4\0\1\272\22\12\32\0\13\12\1\0\1\12"+
    "\4\0\1\12\1\273\21\12\32\0\4\12\1\274\6\12"+
    "\1\0\1\12\4\0\12\12\1\275\10\12\32\0\13\12"+
    "\1\0\1\12\4\0\6\12\1\276\14\12\106\0\1\277"+
    "\1\300\74\0\1\301\23\0\1\202\4\0\3\202\66\0"+
    "\1\4\4\0\3\4\60\0\1\204\73\0\5\205\1\302"+
    "\70\205\4\0\1\204\1\206\100\0\1\207\1\210\1\101"+
    "\1\0\5\210\1\0\1\210\4\0\1\210\1\0\1\210"+
    "\1\0\1\210\52\0\2\303\1\101\1\0\5\303\1\0"+
    "\1\303\4\0\1\303\1\0\1\303\1\0\1\303\52\0"+
    "\1\304\1\100\1\101\1\0\1\101\3\304\1\101\1\105"+
    "\1\106\63\0\2\212\2\0\1\101\3\212\1\101\65\0"+
    "\2\212\3\0\3\212\64\0\13\12\1\0\1\12\4\0"+
    "\20\12\1\305\2\12\32\0\13\12\1\0\1\306\4\0"+
    "\23\12\32\0\13\12\1\0\1\12\4\0\2\12\1\307"+
    "\20\12\32\0\13\12\1\0\1\12\4\0\13\12\1\310"+
    "\7\12\32\0\13\12\1\0\1\12\4\0\1\311\22\12"+
    "\32\0\13\12\1\0\1\12\4\0\2\12\1\312\20\12"+
    "\32\0\13\12\1\0\1\12\4\0\5\12\1\313\15\12"+
    "\32\0\13\12\1\0\1\12\4\0\2\12\1\314\20\12"+
    "\32\0\13\12\1\0\1\12\4\0\4\12\1\315\16\12"+
    "\32\0\13\12\1\0\1\316\4\0\23\12\32\0\13\12"+
    "\1\0\1\317\4\0\23\12\32\0\13\12\1\0\1\12"+
    "\4\0\10\12\1\320\12\12\32\0\13\12\1\0\1\12"+
    "\4\0\21\12\1\321\1\12\32\0\13\12\1\0\1\12"+
    "\4\0\2\12\1\322\20\12\32\0\4\12\1\323\6\12"+
    "\1\0\1\12\4\0\23\12\32\0\13\12\1\0\1\324"+
    "\4\0\23\12\32\0\13\12\1\0\1\12\4\0\13\12"+
    "\1\325\7\12\32\0\13\12\1\0\1\12\4\0\6\12"+
    "\1\326\14\12\32\0\13\12\1\0\1\12\4\0\5\12"+
    "\1\327\15\12\32\0\13\12\1\0\1\330\4\0\23\12"+
    "\32\0\13\12\1\0\1\12\4\0\4\12\1\331\16\12"+
    "\32\0\13\12\1\0\1\12\4\0\1\12\1\332\21\12"+
    "\32\0\13\12\1\0\1\12\4\0\5\12\1\333\1\334"+
    "\14\12\32\0\13\12\1\0\1\12\4\0\6\12\1\335"+
    "\14\12\32\0\13\12\1\0\1\12\4\0\1\12\1\336"+
    "\21\12\32\0\13\12\1\0\1\337\4\0\23\12\32\0"+
    "\13\12\1\0\1\12\4\0\4\12\1\340\16\12\32\0"+
    "\13\12\1\0\1\12\4\0\6\12\1\341\14\12\32\0"+
    "\13\12\1\0\1\12\4\0\11\12\1\342\11\12\32\0"+
    "\13\12\1\0\1\343\4\0\23\12\32\0\13\12\1\0"+
    "\1\12\4\0\10\12\1\344\12\12\32\0\13\12\1\0"+
    "\1\12\4\0\5\12\1\345\15\12\32\0\13\12\1\0"+
    "\1\346\4\0\23\12\32\0\13\12\1\0\1\12\4\0"+
    "\12\12\1\347\10\12\32\0\4\12\1\350\6\12\1\0"+
    "\1\12\4\0\23\12\32\0\13\12\1\0\1\12\4\0"+
    "\6\12\1\351\14\12\32\0\13\12\1\0\1\352\4\0"+
    "\23\12\32\0\4\12\1\353\6\12\1\0\1\12\4\0"+
    "\10\12\1\354\12\12\32\0\4\12\1\355\6\12\1\0"+
    "\1\12\4\0\23\12\32\0\13\12\1\0\1\12\4\0"+
    "\7\12\1\356\13\12\32\0\13\12\1\0\1\12\4\0"+
    "\6\12\1\357\14\12\32\0\13\12\1\0\1\12\4\0"+
    "\17\12\1\360\3\12\32\0\13\12\1\0\1\12\4\0"+
    "\3\12\1\361\17\12\32\0\4\12\1\362\6\12\1\0"+
    "\1\12\4\0\23\12\32\0\13\12\1\0\1\12\4\0"+
    "\2\12\1\363\20\12\32\0\6\12\1\364\4\12\1\0"+
    "\1\12\4\0\23\12\32\0\13\12\1\0\1\12\4\0"+
    "\10\12\1\365\12\12\106\0\1\366\13\0\4\205\1\204"+
    "\1\302\70\205\10\0\2\367\1\101\1\0\5\367\1\0"+
    "\1\367\4\0\1\367\1\0\1\367\1\0\1\367\52\0"+
    "\1\370\1\100\1\101\1\0\1\101\3\370\1\101\1\105"+
    "\1\106\61\0\13\12\1\0\1\12\4\0\6\12\1\371"+
    "\14\12\32\0\13\12\1\0\1\12\4\0\13\12\1\372"+
    "\7\12\32\0\13\12\1\0\1\12\4\0\20\12\1\373"+
    "\2\12\32\0\4\12\1\374\6\12\1\0\1\12\4\0"+
    "\23\12\32\0\13\12\1\0\1\12\4\0\6\12\1\375"+
    "\14\12\32\0\13\12\1\0\1\376\4\0\23\12\32\0"+
    "\4\12\1\377\6\12\1\0\1\12\4\0\23\12\32\0"+
    "\13\12\1\0\1\12\4\0\6\12\1\u0100\14\12\32\0"+
    "\13\12\1\0\1\12\4\0\11\12\1\u0101\11\12\32\0"+
    "\13\12\1\0\1\12\4\0\1\12\1\u0102\21\12\32\0"+
    "\13\12\1\0\1\12\4\0\3\12\1\u0103\17\12\32\0"+
    "\13\12\1\0\1\u0104\4\0\23\12\32\0\13\12\1\0"+
    "\1\12\4\0\1\12\1\u0105\21\12\32\0\13\12\1\0"+
    "\1\12\4\0\1\12\1\u0106\21\12\32\0\13\12\1\0"+
    "\1\12\4\0\5\12\1\u0107\15\12\32\0\13\12\1\0"+
    "\1\12\4\0\7\12\1\u0108\13\12\32\0\13\12\1\0"+
    "\1\12\4\0\6\12\1\u0109\14\12\32\0\13\12\1\0"+
    "\1\12\4\0\12\12\1\u010a\10\12\32\0\13\12\1\0"+
    "\1\12\4\0\12\12\1\u010b\10\12\32\0\13\12\1\0"+
    "\1\12\4\0\6\12\1\u010c\14\12\32\0\13\12\1\0"+
    "\1\12\4\0\1\12\1\u010d\21\12\32\0\13\12\1\0"+
    "\1\12\4\0\7\12\1\u010e\13\12\32\0\13\12\1\0"+
    "\1\12\4\0\4\12\1\u010f\16\12\32\0\13\12\1\0"+
    "\1\12\4\0\5\12\1\u0110\15\12\32\0\13\12\1\0"+
    "\1\12\4\0\15\12\1\u0111\5\12\32\0\13\12\1\0"+
    "\1\12\4\0\10\12\1\u0112\12\12\32\0\13\12\1\0"+
    "\1\12\4\0\17\12\1\u0113\3\12\32\0\13\12\1\0"+
    "\1\12\4\0\2\12\1\u0114\20\12\32\0\13\12\1\0"+
    "\1\12\4\0\1\12\1\u0115\21\12\32\0\13\12\1\0"+
    "\1\u0116\4\0\23\12\32\0\13\12\1\0\1\12\4\0"+
    "\1\12\1\u0117\21\12\32\0\13\12\1\0\1\u0118\4\0"+
    "\23\12\32\0\13\12\1\0\1\u0119\4\0\23\12\32\0"+
    "\13\12\1\0\1\12\4\0\2\12\1\u011a\20\12\32\0"+
    "\13\12\1\0\1\12\4\0\2\12\1\u011b\20\12\32\0"+
    "\13\12\1\0\1\12\4\0\12\12\1\u011c\10\12\32\0"+
    "\13\12\1\0\1\12\4\0\6\12\1\u011d\14\12\34\0"+
    "\2\u011e\1\101\1\0\5\u011e\1\0\1\u011e\4\0\1\u011e"+
    "\1\0\1\u011e\1\0\1\u011e\52\0\1\u011f\1\100\1\101"+
    "\1\0\1\101\3\u011f\1\101\1\105\1\106\61\0\13\12"+
    "\1\0\1\u0120\4\0\23\12\32\0\4\12\1\u0121\6\12"+
    "\1\0\1\12\4\0\23\12\32\0\13\12\1\0\1\12"+
    "\4\0\20\12\1\u0122\2\12\32\0\13\12\1\0\1\u0123"+
    "\4\0\23\12\32\0\4\12\1\u0124\6\12\1\0\1\12"+
    "\4\0\23\12\32\0\13\12\1\0\1\12\4\0\12\12"+
    "\1\u0125\10\12\32\0\6\12\1\u0126\4\12\1\0\1\12"+
    "\4\0\23\12\32\0\13\12\1\0\1\12\4\0\6\12"+
    "\1\u0127\14\12\32\0\13\12\1\0\1\12\4\0\2\12"+
    "\1\u0128\20\12\32\0\13\12\1\0\1\12\4\0\11\12"+
    "\1\u0129\11\12\32\0\13\12\1\0\1\12\4\0\2\12"+
    "\1\u012a\20\12\32\0\13\12\1\0\1\12\4\0\11\12"+
    "\1\u012b\11\12\32\0\13\12\1\0\1\12\4\0\4\12"+
    "\1\u012c\16\12\32\0\13\12\1\0\1\12\4\0\1\12"+
    "\1\u012d\21\12\32\0\13\12\1\0\1\12\4\0\7\12"+
    "\1\u012e\13\12\32\0\13\12\1\0\1\12\4\0\12\12"+
    "\1\u012f\10\12\32\0\13\12\1\0\1\12\4\0\5\12"+
    "\1\u0130\15\12\32\0\12\12\1\u0131\1\0\1\12\4\0"+
    "\23\12\32\0\13\12\1\0\1\u0132\4\0\23\12\32\0"+
    "\13\12\1\0\1\12\4\0\11\12\1\u0133\11\12\32\0"+
    "\12\12\1\u0134\1\0\1\12\4\0\23\12\32\0\13\12"+
    "\1\0\1\12\4\0\21\12\1\u0135\1\12\32\0\13\12"+
    "\1\0\1\12\4\0\6\12\1\u0136\14\12\32\0\13\12"+
    "\1\0\1\12\4\0\4\12\1\u0137\16\12\32\0\13\12"+
    "\1\0\1\12\4\0\6\12\1\u0138\14\12\32\0\13\12"+
    "\1\0\1\12\4\0\20\12\1\u0139\2\12\32\0\13\12"+
    "\1\0\1\12\4\0\4\12\1\u013a\16\12\32\0\13\12"+
    "\1\0\1\12\4\0\12\12\1\u013b\10\12\34\0\2\u013c"+
    "\1\101\1\0\5\u013c\1\0\1\u013c\4\0\1\u013c\1\0"+
    "\1\u013c\1\0\1\u013c\52\0\1\u013d\1\100\1\101\1\0"+
    "\1\101\3\u013d\1\101\1\105\1\106\61\0\13\12\1\0"+
    "\1\12\4\0\6\12\1\u013e\14\12\32\0\13\12\1\0"+
    "\1\u013f\4\0\23\12\32\0\13\12\1\0\1\12\4\0"+
    "\14\12\1\u0140\6\12\32\0\13\12\1\0\1\12\4\0"+
    "\10\12\1\u0141\12\12\32\0\13\12\1\0\1\12\4\0"+
    "\5\12\1\u0142\15\12\32\0\13\12\1\0\1\12\4\0"+
    "\11\12\1\u0143\11\12\32\0\13\12\1\0\1\12\4\0"+
    "\4\12\1\u0144\16\12\32\0\13\12\1\0\1\12\4\0"+
    "\13\12\1\u0145\7\12\32\0\13\12\1\0\1\12\4\0"+
    "\10\12\1\u0146\12\12\32\0\13\12\1\0\1\u0147\4\0"+
    "\23\12\32\0\13\12\1\0\1\12\4\0\4\12\1\u0148"+
    "\16\12\32\0\13\12\1\0\1\12\4\0\2\12\1\u0149"+
    "\20\12\32\0\13\12\1\0\1\u014a\4\0\23\12\32\0"+
    "\13\12\1\0\1\12\4\0\6\12\1\u014b\14\12\32\0"+
    "\13\12\1\0\1\u014c\4\0\23\12\32\0\13\12\1\0"+
    "\1\u014d\4\0\23\12\32\0\4\12\1\u014e\6\12\1\0"+
    "\1\12\4\0\23\12\34\0\2\u014f\1\101\1\0\5\u014f"+
    "\1\0\1\u014f\4\0\1\u014f\1\0\1\u014f\1\0\1\u014f"+
    "\52\0\1\u0150\1\100\1\101\1\0\1\101\3\u0150\1\101"+
    "\1\105\1\106\61\0\13\12\1\0\1\12\4\0\1\12"+
    "\1\u0151\21\12\32\0\13\12\1\0\1\12\4\0\11\12"+
    "\1\u0152\11\12\32\0\13\12\1\0\1\12\4\0\6\12"+
    "\1\u0153\14\12\32\0\13\12\1\0\1\u0154\4\0\23\12"+
    "\32\0\13\12\1\0\1\12\4\0\11\12\1\u0155\11\12"+
    "\32\0\13\12\1\0\1\12\4\0\11\12\1\u0156\11\12"+
    "\32\0\13\12\1\0\1\u0157\4\0\23\12\32\0\13\12"+
    "\1\0\1\12\4\0\4\12\1\u0158\16\12\32\0\13\12"+
    "\1\0\1\12\4\0\11\12\1\u0159\11\12\32\0\13\12"+
    "\1\0\1\u015a\4\0\23\12\32\0\13\12\1\0\1\u015b"+
    "\4\0\23\12\34\0\2\u015c\1\101\1\0\5\u015c\1\0"+
    "\1\u015c\4\0\1\u015c\1\0\1\u015c\1\0\1\u015c\52\0"+
    "\1\u015d\1\100\1\101\1\0\1\101\3\u015d\1\101\1\105"+
    "\1\106\61\0\13\12\1\0\1\12\4\0\12\12\1\u015e"+
    "\10\12\32\0\13\12\1\0\1\12\4\0\6\12\1\u015f"+
    "\14\12\32\0\13\12\1\0\1\12\4\0\10\12\1\u0160"+
    "\12\12\32\0\13\12\1\0\1\u0161\4\0\23\12\32\0"+
    "\13\12\1\0\1\12\4\0\6\12\1\u0162\14\12\32\0"+
    "\6\12\1\u0163\4\12\1\0\1\12\4\0\23\12\34\0"+
    "\2\u0164\1\101\1\0\5\u0164\1\0\1\u0164\4\0\1\u0164"+
    "\1\0\1\u0164\1\0\1\u0164\52\0\1\u0165\1\100\1\101"+
    "\1\0\1\101\3\u0165\1\101\1\105\1\106\61\0\13\12"+
    "\1\0\1\12\4\0\22\12\1\u0166\32\0\12\12\1\u0167"+
    "\1\0\1\12\4\0\23\12\32\0\13\12\1\0\1\12"+
    "\4\0\5\12\1\u0168\15\12\34\0\2\u0169\1\101\1\0"+
    "\5\u0169\1\0\1\u0169\4\0\1\u0169\1\0\1\u0169\1\0"+
    "\1\u0169\52\0\1\u016a\1\100\1\101\1\0\1\101\3\u016a"+
    "\1\101\1\105\1\106\61\0\13\12\1\0\1\u016b\4\0"+
    "\23\12\34\0\2\u016c\1\101\1\0\5\u016c\1\0\1\u016c"+
    "\4\0\1\u016c\1\0\1\u016c\1\0\1\u016c\52\0\1\u016d"+
    "\1\100\1\101\1\0\1\101\3\u016d\1\101\1\105\1\106"+
    "\61\0\6\12\1\u016e\4\12\1\0\1\12\4\0\23\12"+
    "\34\0\2\u016f\1\101\1\0\5\u016f\1\0\1\u016f\4\0"+
    "\1\u016f\1\0\1\u016f\1\0\1\u016f\52\0\1\u0170\1\100"+
    "\1\101\1\0\1\101\3\u0170\1\101\1\105\1\106\63\0"+
    "\2\u0171\1\101\1\0\5\u0171\1\0\1\u0171\4\0\1\u0171"+
    "\1\0\1\u0171\1\0\1\u0171\52\0\1\u0172\1\100\1\101"+
    "\1\0\1\101\3\u0172\1\101\1\105\1\106\63\0\2\u0173"+
    "\1\101\1\0\5\u0173\1\0\1\u0173\4\0\1\u0173\1\0"+
    "\1\u0173\1\0\1\u0173\52\0\1\u0174\1\100\1\101\1\0"+
    "\1\101\3\u0174\1\101\1\105\1\106\63\0\2\u0175\1\101"+
    "\1\0\5\u0175\1\0\1\u0175\4\0\1\u0175\1\0\1\u0175"+
    "\1\0\1\u0175\52\0\1\u0176\1\100\1\101\1\0\1\101"+
    "\3\u0176\1\101\1\105\1\106\63\0\2\u0177\1\101\1\0"+
    "\5\u0177\1\0\1\u0177\4\0\1\u0177\1\0\1\u0177\1\0"+
    "\1\u0177\52\0\1\u0178\1\100\1\101\1\0\1\101\3\u0178"+
    "\1\101\1\105\1\106\63\0\2\u0179\1\101\1\0\5\u0179"+
    "\1\0\1\u0179\4\0\1\u0179\1\0\1\u0179\1\0\1\u0179"+
    "\52\0\1\u017a\1\100\1\101\1\0\1\101\3\u017a\1\101"+
    "\1\105\1\106\65\0\1\101\73\0\1\u017b\1\100\1\101"+
    "\1\0\1\101\3\u017b\1\101\1\105\1\106\63\0\1\u017c"+
    "\1\100\1\101\1\0\1\101\3\u017c\1\101\1\105\1\106"+
    "\63\0\1\u017d\1\100\1\101\1\0\1\101\3\u017d\1\101"+
    "\1\105\1\106\63\0\1\u017e\1\100\1\101\1\0\1\101"+
    "\3\u017e\1\101\1\105\1\106\63\0\2\100\1\101\1\0"+
    "\1\101\3\100\1\101\1\105\1\106\53\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18042];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\14\1\2\11\14\1\10\11"+
    "\4\1\3\11\7\1\2\11\3\1\1\0\2\11\2\1"+
    "\1\11\1\0\3\1\1\0\13\1\2\11\37\1\2\11"+
    "\1\1\1\11\1\1\11\11\3\1\1\11\2\0\4\1"+
    "\1\0\63\1\1\11\1\1\1\11\1\0\63\1\1\11"+
    "\162\1\1\0\2\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[382];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private StateStack stack = new StateStack();

    private LexerInput input;

    public JavaScriptColoringLexer(LexerRestartInfo info) {
        this.input = info.input();

        if(info.state() != null) {
            //reset state
            setState((LexerState)info.state());
        } else {
            //initial state
            zzState = zzLexicalState = YYINITIAL;
            stack.clear();
        }
    }

    public static final class LexerState  {
        final StateStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;


        LexerState (StateStack stack, int zzState, int zzLexicalState) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                    return true;
            }

            if (obj == null || obj.getClass() != this.getClass()) {
                    return false;
            }

            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                && (this.zzState == state.zzState)
                && (this.zzLexicalState == state.zzLexicalState));
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            if (stack != null) {
                hash = 31 * hash + this.stack.hashCode();
            }
            return hash;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.createClone(), zzState, zzLexicalState);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
    }

 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaScriptColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaScriptColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1816) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JsTokenId nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      int tokenLength = 0;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
          zzInput = input.read();

          if(zzInput == LexerInput.EOF) {
              //end of input reached
              zzInput = YYEOF;
              break zzForAction;
              //notice: currently LexerInput.EOF == YYEOF
          }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { return JsTokenId.OPERATOR_BITWISE_NOT;
          }
        case 115: break;
        case 47: 
          { return JsTokenId.OPERATOR_BITWISE_AND_ASSIGNMENT;
          }
        case 116: break;
        case 85: 
          { return JsTokenId.KEYWORD_THROW;
          }
        case 117: break;
        case 59: 
          { return JsTokenId.KEYWORD_VAR;
          }
        case 118: break;
        case 15: 
          { return JsTokenId.OPERATOR_LEFT_BRACKET;
          }
        case 119: break;
        case 84: 
          { return JsTokenId.RESERVED_SUPER;
          }
        case 120: break;
        case 110: 
          { return JsTokenId.RESERVED_INTERFACE;
          }
        case 121: break;
        case 35: 
          { return JsTokenId.OPERATOR_MULTIPLICATION_ASSIGNMENT;
          }
        case 122: break;
        case 22: 
          { return JsTokenId.OPERATOR_NOT;
          }
        case 123: break;
        case 64: 
          { return JsTokenId.KEYWORD_ELSE;
          }
        case 124: break;
        case 72: 
          { return JsTokenId.KEYWORD_WITH;
          }
        case 125: break;
        case 41: 
          { return JsTokenId.OPERATOR_EQUALS;
          }
        case 126: break;
        case 62: 
          { return JsTokenId.OPERATOR_LEFT_SHIFT_ARITHMETIC_ASSIGNMENT;
          }
        case 127: break;
        case 25: 
          { return JsTokenId.OPERATOR_COLON;
          }
        case 128: break;
        case 38: 
          { return JsTokenId.OPERATOR_MINUS_ASSIGNMENT;
          }
        case 129: break;
        case 55: 
          { return JsTokenId.KEYWORD_FOR;
          }
        case 130: break;
        case 27: 
          { return JsTokenId.OPERATOR_BITWISE_OR;
          }
        case 131: break;
        case 17: 
          { return JsTokenId.OPERATOR_SEMICOLON;
          }
        case 132: break;
        case 75: 
          { return JsTokenId.OPERATOR_RIGHT_SHIFT_ASSIGNMENT;
          }
        case 133: break;
        case 45: 
          { return JsTokenId.OPERATOR_LEFT_SHIFT_ARITHMETIC;
          }
        case 134: break;
        case 11: 
          { return JsTokenId.OPERATOR_LEFT_PARAN;
          }
        case 135: break;
        case 91: 
          { return JsTokenId.RESERVED_STATIC;
          }
        case 136: break;
        case 109: 
          { return JsTokenId.RESERVED_TRANSIENT;
          }
        case 137: break;
        case 108: 
          { return JsTokenId.RESERVED_VOLATILE;
          }
        case 138: break;
        case 67: 
          { return JsTokenId.KEYWORD_CASE;
          }
        case 139: break;
        case 24: 
          { return JsTokenId.OPERATOR_TERNARY;
          }
        case 140: break;
        case 19: 
          { return JsTokenId.OPERATOR_ASSIGNMENT;
          }
        case 141: break;
        case 70: 
          { return JsTokenId.KEYWORD_THIS;
          }
        case 142: break;
        case 86: 
          { return JsTokenId.KEYWORD_WHILE;
          }
        case 143: break;
        case 113: 
          { return JsTokenId.RESERVED_IMPLEMENTS;
          }
        case 144: break;
        case 89: 
          { return JsTokenId.RESERVED_EXPORT;
          }
        case 145: break;
        case 94: 
          { return JsTokenId.KEYWORD_TYPEOF;
          }
        case 146: break;
        case 13: 
          { return JsTokenId.OPERATOR_LEFT_CURLY;
          }
        case 147: break;
        case 26: 
          { return JsTokenId.OPERATOR_BITWISE_AND;
          }
        case 148: break;
        case 102: 
          { return JsTokenId.RESERVED_PRIVATE;
          }
        case 149: break;
        case 20: 
          { return JsTokenId.OPERATOR_GREATER;
          }
        case 150: break;
        case 80: 
          { return JsTokenId.RESERVED_CLASS;
          }
        case 151: break;
        case 56: 
          { return JsTokenId.KEYWORD_TRY;
          }
        case 152: break;
        case 53: 
          { return JsTokenId.OPERATOR_BITWISE_XOR_ASSIGNMENT;
          }
        case 153: break;
        case 18: 
          { return JsTokenId.OPERATOR_COMMA;
          }
        case 154: break;
        case 78: 
          { return JsTokenId.RESERVED_FINAL;
          }
        case 155: break;
        case 42: 
          { return JsTokenId.OPERATOR_GREATER_EQUALS;
          }
        case 156: break;
        case 101: 
          { return JsTokenId.RESERVED_BOOLEAN;
          }
        case 157: break;
        case 46: 
          { return JsTokenId.OPERATOR_NOT_EQUALS;
          }
        case 158: break;
        case 69: 
          { return JsTokenId.KEYWORD_TRUE;
          }
        case 159: break;
        case 48: 
          { return JsTokenId.OPERATOR_AND;
          }
        case 160: break;
        case 2: 
          { return JsTokenId.WHITESPACE;
          }
        case 161: break;
        case 52: 
          { return JsTokenId.OPERATOR_INCREMENT;
          }
        case 162: break;
        case 98: 
          { return JsTokenId.KEYWORD_DEFAULT;
          }
        case 163: break;
        case 34: 
          { return JsTokenId.OPERATOR_DIVISION_ASSIGNMENT;
          }
        case 164: break;
        case 104: 
          { return JsTokenId.RESERVED_DEBUGGER;
          }
        case 165: break;
        case 88: 
          { return JsTokenId.RESERVED_DOUBLE;
          }
        case 166: break;
        case 50: 
          { return JsTokenId.OPERATOR_OR;
          }
        case 167: break;
        case 79: 
          { return JsTokenId.KEYWORD_BREAK;
          }
        case 168: break;
        case 97: 
          { return JsTokenId.RESERVED_PUBLIC;
          }
        case 169: break;
        case 73: 
          { return JsTokenId.KEYWORD_VOID;
          }
        case 170: break;
        case 36: 
          { return JsTokenId.KEYWORD_DO;
          }
        case 171: break;
        case 63: 
          { return JsTokenId.RESERVED_LONG;
          }
        case 172: break;
        case 40: 
          { return JsTokenId.KEYWORD_IN;
          }
        case 173: break;
        case 95: 
          { return JsTokenId.RESERVED_NATIVE;
          }
        case 174: break;
        case 76: 
          { return JsTokenId.RESERVED_FLOAT;
          }
        case 175: break;
        case 21: 
          { return JsTokenId.OPERATOR_LOWER;
          }
        case 176: break;
        case 54: 
          { return JsTokenId.OPERATOR_MODULUS_ASSIGNMENT;
          }
        case 177: break;
        case 61: 
          { return JsTokenId.OPERATOR_RIGHT_SHIFT;
          }
        case 178: break;
        case 37: 
          { return JsTokenId.OPERATOR_DECREMENT;
          }
        case 179: break;
        case 107: 
          { return JsTokenId.KEYWORD_CONTINUE;
          }
        case 180: break;
        case 29: 
          { return JsTokenId.OPERATOR_BITWISE_XOR;
          }
        case 181: break;
        case 16: 
          { return JsTokenId.OPERATOR_RIGHT_BRACKET;
          }
        case 182: break;
        case 43: 
          { return JsTokenId.OPERATOR_RIGHT_SHIFT_ARITHMETIC;
          }
        case 183: break;
        case 65: 
          { return JsTokenId.RESERVED_ENUM;
          }
        case 184: break;
        case 81: 
          { return JsTokenId.KEYWORD_CATCH;
          }
        case 185: break;
        case 68: 
          { return JsTokenId.RESERVED_CHAR;
          }
        case 186: break;
        case 100: 
          { return JsTokenId.RESERVED_EXTENDS;
          }
        case 187: break;
        case 60: 
          { return JsTokenId.OPERATOR_RIGHT_SHIFT_ARITHMETIC_ASSIGNMENT;
          }
        case 188: break;
        case 105: 
          { return JsTokenId.KEYWORD_FUNCTION;
          }
        case 189: break;
        case 28: 
          { return JsTokenId.OPERATOR_PLUS;
          }
        case 190: break;
        case 9: 
          { yybegin(STRING);
          }
        case 191: break;
        case 31: 
          { yybegin(YYINITIAL);
          }
        case 192: break;
        case 112: 
          { return JsTokenId.KEYWORD_INSTANCEOF;
          }
        case 193: break;
        case 93: 
          { return JsTokenId.RESERVED_THROWS;
          }
        case 194: break;
        case 32: 
          { yybegin(YYINITIAL);
                                     return JsTokenId.STRING;
          }
        case 195: break;
        case 4: 
          { return JsTokenId.OPERATOR_MULTIPLICATION;
          }
        case 196: break;
        case 5: 
          { return JsTokenId.IDENTIFIER;
          }
        case 197: break;
        case 71: 
          { return JsTokenId.KEYWORD_NULL;
          }
        case 198: break;
        case 6: 
          { return JsTokenId.NUMBER;
          }
        case 199: break;
        case 12: 
          { return JsTokenId.OPERATOR_RIGHT_PARAN;
          }
        case 200: break;
        case 90: 
          { return JsTokenId.KEYWORD_RETURN;
          }
        case 201: break;
        case 66: 
          { return JsTokenId.RESERVED_BYTE;
          }
        case 202: break;
        case 87: 
          { return JsTokenId.KEYWORD_DELETE;
          }
        case 203: break;
        case 83: 
          { return JsTokenId.RESERVED_SHORT;
          }
        case 204: break;
        case 44: 
          { return JsTokenId.OPERATOR_LOWER_EQUALS;
          }
        case 205: break;
        case 39: 
          { return JsTokenId.KEYWORD_IF;
          }
        case 206: break;
        case 111: 
          { return JsTokenId.RESERVED_PROTECTED;
          }
        case 207: break;
        case 49: 
          { return JsTokenId.OPERATOR_BITWISE_OR_ASSIGNMENT;
          }
        case 208: break;
        case 14: 
          { return JsTokenId.OPERATOR_RIGHT_CURLY;
          }
        case 209: break;
        case 58: 
          { return JsTokenId.RESERVED_INT;
          }
        case 210: break;
        case 103: 
          { return JsTokenId.RESERVED_PACKAGE;
          }
        case 211: break;
        case 92: 
          { return JsTokenId.KEYWORD_SWITCH;
          }
        case 212: break;
        case 7: 
          { return JsTokenId.OPERATOR_DOT;
          }
        case 213: break;
        case 77: 
          { return JsTokenId.KEYWORD_FALSE;
          }
        case 214: break;
        case 99: 
          { return JsTokenId.KEYWORD_FINALLY;
          }
        case 215: break;
        case 57: 
          { return JsTokenId.KEYWORD_NEW;
          }
        case 216: break;
        case 30: 
          { return JsTokenId.OPERATOR_MODULUS;
          }
        case 217: break;
        case 96: 
          { return JsTokenId.RESERVED_IMPORT;
          }
        case 218: break;
        case 82: 
          { return JsTokenId.RESERVED_CONST;
          }
        case 219: break;
        case 33: 
          { return JsTokenId.COMMENT;
          }
        case 220: break;
        case 114: 
          { return JsTokenId.RESERVED_SYNCHRONIZED;
          }
        case 221: break;
        case 3: 
          { return JsTokenId.OPERATOR_DIVISION;
          }
        case 222: break;
        case 8: 
          { return JsTokenId.OPERATOR_MINUS;
          }
        case 223: break;
        case 51: 
          { return JsTokenId.OPERATOR_PLUS_ASSIGNMENT;
          }
        case 224: break;
        case 10: 
          { yybegin(SSTRING);
          }
        case 225: break;
        case 106: 
          { return JsTokenId.RESERVED_ABSTRACT;
          }
        case 226: break;
        case 74: 
          { return JsTokenId.RESERVED_GOTO;
          }
        case 227: break;
        case 1: 
          { 
          }
        case 228: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JsTokenId.UNKNOWN_TOKEN;
    } else {
        return null;
    }
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
