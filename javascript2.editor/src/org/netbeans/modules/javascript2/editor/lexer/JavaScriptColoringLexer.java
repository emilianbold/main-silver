/* The following code was generated by JFlex 1.4.3 on 11/22/11 3:09 PM */

package org.netbeans.modules.javascript2.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/22/11 3:09 PM from the specification file
 * <tt>/home/sickboy/workspace/netbeans-web/javascript2.editor/tools/JavaScriptColoringScanner.flex</tt>
 */
public class JavaScriptColoringLexer {
/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 * 
 * Contributor(s):
 * 
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int SSTRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\65"+
    "\1\24\1\0\1\6\1\65\1\66\1\25\1\53\1\54\1\5\1\70"+
    "\1\61\1\23\1\21\1\4\1\10\1\16\2\15\4\17\2\11\1\52"+
    "\1\61\1\64\1\62\1\63\1\61\1\0\1\31\1\27\1\33\1\14"+
    "\1\22\1\20\1\45\1\36\1\41\1\51\1\32\1\12\1\47\1\40"+
    "\1\37\1\50\1\6\1\30\1\34\1\35\1\42\1\46\1\44\1\13"+
    "\1\43\1\6\1\57\1\26\1\60\1\65\1\6\1\0\1\31\1\27"+
    "\1\33\1\14\1\22\1\20\1\45\1\36\1\41\1\51\1\32\1\12"+
    "\1\47\1\40\1\37\1\50\1\6\1\30\1\34\1\35\1\42\1\46"+
    "\1\44\1\13\1\43\1\6\1\55\1\67\1\56\1\61\41\7\2\0"+
    "\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0"+
    "\27\6\1\0\37\6\1\0\u013f\6\31\0\162\6\4\0\14\6\16\0"+
    "\5\6\11\0\1\6\21\0\130\7\5\0\23\7\12\0\1\6\13\0"+
    "\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\54\6\1\0"+
    "\46\6\1\0\5\6\4\0\202\6\1\0\4\7\3\0\105\6\1\0"+
    "\46\6\2\0\2\6\6\0\20\6\41\0\46\6\2\0\1\6\7\0"+
    "\47\6\11\0\21\7\1\0\27\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\1\0\1\7\13\0\33\6\5\0\3\6\15\0\4\7\14\0"+
    "\6\7\13\0\32\6\5\0\13\6\16\7\7\0\12\7\4\0\2\6"+
    "\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0"+
    "\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7"+
    "\36\6\33\7\2\0\3\6\60\0\46\6\13\7\1\6\u014f\0\3\7"+
    "\66\6\2\0\1\7\1\6\20\7\2\0\1\6\4\7\3\0\12\6"+
    "\2\7\2\0\12\7\21\0\3\7\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6"+
    "\7\7\2\0\2\7\2\0\3\7\11\0\1\7\4\0\2\6\1\0"+
    "\3\6\2\7\2\0\12\7\4\6\15\0\3\7\1\0\6\6\4\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\13\0"+
    "\4\6\1\0\1\6\7\0\14\7\3\6\14\0\3\7\1\0\11\6"+
    "\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6"+
    "\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\2\0\1\7\1\6\6\7\3\0\2\7\2\0\3\7\10\0"+
    "\2\7\4\0\2\6\1\0\3\6\4\0\12\7\1\0\1\6\20\0"+
    "\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6"+
    "\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\10\6"+
    "\1\0\3\6\4\0\5\7\3\0\3\7\1\0\4\7\11\0\1\7"+
    "\17\0\11\7\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\4\0\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\11\0\2\6\4\0\12\7\22\0\2\7"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6"+
    "\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7"+
    "\7\0\1\6\1\0\2\6\4\0\12\7\22\0\2\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\20\6\4\0\6\7\2\0\3\7"+
    "\1\0\4\7\11\0\1\7\10\0\2\6\4\0\12\7\22\0\2\7"+
    "\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6"+
    "\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7"+
    "\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7"+
    "\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6"+
    "\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6"+
    "\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6"+
    "\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0\2\6"+
    "\42\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7"+
    "\1\0\1\7\4\0\2\7\10\6\1\0\42\6\6\0\24\7\1\0"+
    "\2\7\4\6\4\0\10\7\1\0\44\7\11\0\1\7\71\0\42\6"+
    "\1\0\5\6\1\0\2\6\1\0\7\7\3\0\4\7\6\0\12\7"+
    "\6\0\6\6\4\7\106\0\46\6\12\0\51\6\7\0\132\6\5\0"+
    "\104\6\5\0\122\6\6\0\7\6\1\0\77\6\1\0\1\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\47\6\1\0"+
    "\1\6\1\0\4\6\2\0\37\6\1\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\7\6\1\0"+
    "\27\6\1\0\37\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0"+
    "\47\6\1\0\23\6\16\0\11\7\56\0\125\6\14\0\u026c\6\2\0"+
    "\10\6\12\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0"+
    "\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6"+
    "\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0"+
    "\2\6\1\7\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6"+
    "\10\0\51\6\1\7\126\0\35\6\3\0\14\7\4\0\14\7\12\0"+
    "\12\7\36\6\2\0\5\6\u038b\0\154\6\224\0\234\6\4\0\132\6"+
    "\6\0\26\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6"+
    "\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6"+
    "\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6\17\0\4\7"+
    "\32\0\5\7\20\0\2\6\23\0\1\6\13\0\4\7\6\0\6\7"+
    "\1\0\1\6\15\0\1\6\40\0\22\6\36\0\15\7\4\0\1\7"+
    "\3\0\6\7\27\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6"+
    "\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\3\6\1\0\7\6\3\0\3\6\5\0\5\6\26\0\44\6"+
    "\u0e81\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6\4\0"+
    "\126\6\2\0\2\7\2\0\3\6\1\0\137\6\5\0\50\6\4\0"+
    "\136\6\21\0\30\6\70\0\20\6\u0200\0\u19b6\6\112\0\u51a6\6\132\0"+
    "\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0\7\6\14\0"+
    "\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0"+
    "\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0"+
    "\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0\4\7\17\0"+
    "\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0"+
    "\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0"+
    "\32\6\12\0\132\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0"+
    "\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\3\1\2\2\1\3\2\4\2\3\1\2\1\3"+
    "\1\2\1\5\1\6\17\3\1\2\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\5\2\1\15\2\16\1\17\1\1"+
    "\1\15\1\20\1\0\1\21\3\4\1\0\3\4\1\0"+
    "\2\3\1\22\27\3\1\22\6\3\1\2\1\23\2\15"+
    "\2\20\2\0\4\4\1\0\25\3\1\24\14\3\1\15"+
    "\1\0\2\4\3\3\1\21\21\3\2\4\21\3\2\4"+
    "\14\3\2\4\6\3\2\4\4\3\2\4\1\3\2\4"+
    "\1\3\1\0\1\4\1\3\1\0\1\4\1\3\1\0"+
    "\1\4\1\3\1\0\1\4\1\3\1\0\1\4\1\3"+
    "\1\0\1\4\1\0\1\4\1\0\5\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\253\0\253\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675"+
    "\0\u06ae\0\253\0\253\0\253\0\253\0\253\0\253\0\253"+
    "\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d\0\253"+
    "\0\253\0\u0876\0\u08af\0\u08e8\0\u0921\0\253\0\u095a\0\u0993"+
    "\0\253\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22"+
    "\0\u01c8\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1"+
    "\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79"+
    "\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041"+
    "\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209"+
    "\0\253\0\u1242\0\u127b\0\u12b4\0\253\0\u12ed\0\u1326\0\u135f"+
    "\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527"+
    "\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef"+
    "\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7"+
    "\0\u18f0\0\u01c8\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46"+
    "\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\253\0\u1bd5"+
    "\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u01c8\0\u1d2b\0\u1d64"+
    "\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c"+
    "\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4"+
    "\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283\0\u22bc"+
    "\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u2412\0\u244b\0\u2484"+
    "\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c"+
    "\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814"+
    "\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc"+
    "\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4"+
    "\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c"+
    "\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\u2efb\0\u2f34"+
    "\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u308a\0\u30c3\0\u30fc"+
    "\0\u3135\0\u316e\0\u31a7\0\u31e0\0\u3219";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\1\7\1\10\1\11\1\4"+
    "\1\12\1\13\2\11\1\14\3\13\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\4\1\23\1\24\1\25\1\11"+
    "\1\26\1\27\1\30\1\11\1\31\1\32\1\33\1\34"+
    "\1\11\1\35\1\36\1\37\1\40\1\41\1\11\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\42\1\10"+
    "\1\51\1\52\1\10\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\21\56\1\61\1\56\1\62\42\56\1\63\1\57"+
    "\1\60\22\63\1\61\1\62\42\63\73\0\1\4\71\0"+
    "\1\6\71\0\1\64\1\65\54\0\1\42\70\0\1\42"+
    "\14\0\13\11\1\0\1\11\4\0\23\11\1\66\26\0"+
    "\1\67\1\70\1\71\1\72\1\71\1\73\1\74\1\73"+
    "\1\71\1\75\1\76\56\0\2\13\1\71\1\0\1\71"+
    "\3\13\1\71\1\75\1\76\54\0\13\11\1\0\1\77"+
    "\4\0\2\11\1\100\5\11\1\101\12\11\1\66\24\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\102\5\11\1\103"+
    "\1\11\1\104\1\105\7\11\1\66\26\0\2\75\3\0"+
    "\3\75\57\0\4\11\1\106\6\11\1\0\1\11\4\0"+
    "\5\11\1\107\3\11\1\110\5\11\1\111\3\11\1\66"+
    "\41\0\1\42\36\0\1\42\14\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\112\6\11\1\113\12\11\1\66\24\0"+
    "\13\11\1\0\1\114\4\0\23\11\1\66\24\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\115\21\11\1\66\24\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\116\5\11\1\117"+
    "\12\11\1\66\24\0\13\11\1\0\1\11\4\0\6\11"+
    "\1\120\6\11\1\121\5\11\1\66\24\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\122\5\11\1\123\13\11\1\66"+
    "\24\0\13\11\1\0\1\11\4\0\1\124\22\11\1\66"+
    "\24\0\13\11\1\0\1\125\4\0\2\11\1\126\10\11"+
    "\1\127\7\11\1\66\24\0\12\11\1\101\1\0\1\11"+
    "\4\0\5\11\1\130\3\11\1\131\11\11\1\66\24\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\132\11\11\1\66"+
    "\24\0\13\11\1\0\1\11\4\0\7\11\1\133\2\11"+
    "\1\134\10\11\1\66\24\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\135\12\11\1\66\24\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\103\20\11\1\66\24\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\136\20\11\1\66\24\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\137\20\11\1\66\100\0"+
    "\1\42\1\140\67\0\1\42\1\0\1\10\66\0\1\42"+
    "\3\0\1\42\64\0\1\42\4\0\1\42\63\0\1\42"+
    "\5\0\1\42\1\56\2\0\21\56\1\0\1\56\1\0"+
    "\42\56\2\0\1\60\66\0\2\141\1\0\5\141\1\142"+
    "\4\141\2\142\1\143\51\141\1\63\2\0\22\63\2\0"+
    "\42\63\1\64\1\144\1\145\66\64\5\146\1\147\63\146"+
    "\10\0\1\67\1\70\1\71\1\0\1\71\1\73\1\74"+
    "\1\73\1\71\1\75\1\76\56\0\2\70\2\0\1\71"+
    "\3\70\1\71\1\75\1\76\56\0\1\150\1\151\2\0"+
    "\5\151\1\0\1\151\4\0\1\151\1\0\1\151\1\0"+
    "\1\151\45\0\1\152\1\70\1\71\1\0\1\71\3\152"+
    "\1\71\1\75\1\76\56\0\1\73\1\70\1\71\1\0"+
    "\1\71\3\73\1\71\1\75\1\76\56\0\2\75\2\0"+
    "\1\71\3\75\1\71\1\0\1\76\56\0\2\153\3\0"+
    "\3\153\3\0\1\154\44\0\1\154\6\0\4\11\1\155"+
    "\5\11\1\156\1\0\1\11\4\0\4\11\1\157\16\11"+
    "\1\66\24\0\13\11\1\0\1\11\4\0\6\11\1\160"+
    "\14\11\1\66\24\0\4\11\1\106\6\11\1\0\1\11"+
    "\4\0\23\11\1\66\24\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\101\21\11\1\66\24\0\13\11\1\0\1\11"+
    "\4\0\11\11\1\161\11\11\1\66\24\0\13\11\1\0"+
    "\1\11\4\0\11\11\1\162\11\11\1\66\24\0\13\11"+
    "\1\0\1\11\4\0\5\11\1\163\15\11\1\66\24\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\164\16\11\1\66"+
    "\24\0\13\11\1\0\1\11\4\0\4\11\1\165\16\11"+
    "\1\66\24\0\13\11\1\0\1\11\4\0\2\11\1\166"+
    "\20\11\1\66\24\0\13\11\1\0\1\167\4\0\23\11"+
    "\1\66\24\0\13\11\1\0\1\11\4\0\10\11\1\170"+
    "\12\11\1\66\24\0\13\11\1\0\1\11\4\0\6\11"+
    "\1\171\7\11\1\172\4\11\1\66\24\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\173\21\11\1\66\24\0\13\11"+
    "\1\0\1\11\4\0\5\11\1\163\1\174\14\11\1\66"+
    "\24\0\13\11\1\0\1\11\4\0\11\11\1\175\11\11"+
    "\1\66\24\0\13\11\1\0\1\11\4\0\1\11\1\176"+
    "\21\11\1\66\24\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\177\10\11\1\66\24\0\13\11\1\0\1\11\4\0"+
    "\13\11\1\163\1\101\6\11\1\66\24\0\13\11\1\0"+
    "\1\11\4\0\12\11\1\200\10\11\1\66\24\0\13\11"+
    "\1\0\1\11\4\0\22\11\1\201\1\66\24\0\13\11"+
    "\1\0\1\11\4\0\15\11\1\101\5\11\1\66\24\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\202\11\11\1\66"+
    "\24\0\4\11\1\203\6\11\1\0\1\11\4\0\20\11"+
    "\1\204\2\11\1\66\24\0\12\11\1\205\1\0\1\11"+
    "\4\0\11\11\1\206\11\11\1\66\24\0\12\11\1\207"+
    "\1\0\1\11\4\0\23\11\1\66\24\0\6\11\1\210"+
    "\4\11\1\0\1\211\4\0\23\11\1\66\24\0\13\11"+
    "\1\0\1\11\4\0\12\11\1\212\10\11\1\66\24\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\213\14\11\1\66"+
    "\24\0\13\11\1\0\1\11\4\0\6\11\1\214\14\11"+
    "\1\66\24\0\13\11\1\0\1\11\4\0\6\11\1\215"+
    "\14\11\1\66\24\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\216\21\11\1\66\100\0\1\42\1\10\15\0\1\143"+
    "\4\0\3\143\61\0\1\217\4\0\3\217\53\0\1\145"+
    "\66\0\5\146\1\220\63\146\4\0\1\145\1\147\73\0"+
    "\1\150\1\151\1\71\1\0\5\151\1\0\1\151\4\0"+
    "\1\151\1\0\1\151\1\0\1\151\45\0\2\221\1\71"+
    "\1\0\5\221\1\0\1\221\4\0\1\221\1\0\1\221"+
    "\1\0\1\221\45\0\1\222\1\70\1\71\1\0\1\71"+
    "\3\222\1\71\1\75\1\76\56\0\2\153\2\0\1\71"+
    "\3\153\1\71\60\0\2\153\3\0\3\153\57\0\13\11"+
    "\1\0\1\223\4\0\23\11\1\66\24\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\224\20\11\1\66\24\0\13\11"+
    "\1\0\1\11\4\0\10\11\1\225\12\11\1\66\24\0"+
    "\13\11\1\0\1\226\4\0\23\11\1\66\24\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\227\20\11\1\66\24\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\230\16\11\1\66"+
    "\24\0\13\11\1\0\1\101\4\0\23\11\1\66\24\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\231\20\11\1\66"+
    "\24\0\13\11\1\0\1\11\4\0\10\11\1\232\12\11"+
    "\1\66\24\0\4\11\1\202\6\11\1\0\1\11\4\0"+
    "\23\11\1\66\24\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\233\20\11\1\66\24\0\4\11\1\234\6\11\1\0"+
    "\1\11\4\0\23\11\1\66\24\0\13\11\1\0\1\11"+
    "\4\0\13\11\1\235\7\11\1\66\24\0\13\11\1\0"+
    "\1\236\4\0\23\11\1\66\24\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\237\20\11\1\66\24\0\13\11\1\0"+
    "\1\11\4\0\4\11\1\213\16\11\1\66\24\0\13\11"+
    "\1\0\1\11\4\0\6\11\1\240\14\11\1\66\24\0"+
    "\13\11\1\0\1\11\4\0\12\11\1\241\10\11\1\66"+
    "\24\0\13\11\1\0\1\11\4\0\6\11\1\174\14\11"+
    "\1\66\24\0\13\11\1\0\1\11\4\0\5\11\1\101"+
    "\15\11\1\66\24\0\13\11\1\0\1\242\4\0\23\11"+
    "\1\66\24\0\4\11\1\101\6\11\1\0\1\11\4\0"+
    "\23\11\1\66\24\0\13\11\1\0\1\11\4\0\1\243"+
    "\22\11\1\66\24\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\244\10\11\1\66\24\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\126\20\11\1\66\24\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\245\10\11\1\66\24\0\13\11\1\0"+
    "\1\246\4\0\23\11\1\66\24\0\13\11\1\0\1\11"+
    "\4\0\5\11\1\107\15\11\1\66\24\0\4\11\1\163"+
    "\6\11\1\0\1\11\4\0\23\11\1\66\24\0\13\11"+
    "\1\0\1\11\4\0\7\11\1\101\13\11\1\66\24\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\101\12\11\1\66"+
    "\24\0\13\11\1\0\1\11\4\0\7\11\1\226\13\11"+
    "\1\66\24\0\13\11\1\0\1\11\4\0\5\11\1\247"+
    "\15\11\1\66\16\0\4\146\1\145\1\220\63\146\10\0"+
    "\2\250\1\71\1\0\5\250\1\0\1\250\4\0\1\250"+
    "\1\0\1\250\1\0\1\250\45\0\1\251\1\70\1\71"+
    "\1\0\1\71\3\251\1\71\1\75\1\76\54\0\13\11"+
    "\1\0\1\11\4\0\6\11\1\163\14\11\1\66\24\0"+
    "\13\11\1\0\1\11\4\0\13\11\1\252\7\11\1\66"+
    "\24\0\6\11\1\253\4\11\1\0\1\11\4\0\23\11"+
    "\1\66\24\0\4\11\1\254\6\11\1\0\1\11\4\0"+
    "\23\11\1\66\24\0\13\11\1\0\1\11\4\0\6\11"+
    "\1\255\14\11\1\66\24\0\13\11\1\0\1\11\4\0"+
    "\21\11\1\256\1\11\1\66\24\0\6\11\1\257\4\11"+
    "\1\0\1\11\4\0\23\11\1\66\24\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\101\17\11\1\66\24\0\13\11"+
    "\1\0\1\260\4\0\23\11\1\66\24\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\261\21\11\1\66\24\0\5\11"+
    "\1\262\5\11\1\0\1\11\4\0\23\11\1\66\24\0"+
    "\13\11\1\0\1\11\4\0\14\11\1\226\6\11\1\66"+
    "\24\0\13\11\1\0\1\11\4\0\12\11\1\263\10\11"+
    "\1\66\24\0\13\11\1\0\1\11\4\0\11\11\1\264"+
    "\11\11\1\66\24\0\13\11\1\0\1\11\4\0\4\11"+
    "\1\265\16\11\1\66\24\0\13\11\1\0\1\266\4\0"+
    "\23\11\1\66\24\0\13\11\1\0\1\11\4\0\11\11"+
    "\1\267\11\11\1\66\24\0\13\11\1\0\1\11\4\0"+
    "\11\11\1\270\11\11\1\66\24\0\12\11\1\271\1\0"+
    "\1\11\4\0\23\11\1\66\24\0\13\11\1\0\1\272"+
    "\4\0\23\11\1\66\26\0\2\273\1\71\1\0\5\273"+
    "\1\0\1\273\4\0\1\273\1\0\1\273\1\0\1\273"+
    "\45\0\1\274\1\70\1\71\1\0\1\71\3\274\1\71"+
    "\1\75\1\76\54\0\4\11\1\275\6\11\1\0\1\11"+
    "\4\0\23\11\1\66\24\0\13\11\1\0\1\276\4\0"+
    "\23\11\1\66\24\0\4\11\1\277\6\11\1\0\1\11"+
    "\4\0\23\11\1\66\24\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\300\10\11\1\66\24\0\13\11\1\0\1\202"+
    "\4\0\23\11\1\66\24\0\13\11\1\0\1\301\4\0"+
    "\23\11\1\66\24\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\302\20\11\1\66\24\0\13\11\1\0\1\11\4\0"+
    "\11\11\1\101\11\11\1\66\24\0\13\11\1\0\1\11"+
    "\4\0\21\11\1\226\1\11\1\66\24\0\13\11\1\0"+
    "\1\11\4\0\11\11\1\303\11\11\1\66\24\0\13\11"+
    "\1\0\1\11\4\0\16\11\1\226\4\11\1\66\24\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\226\14\11\1\66"+
    "\24\0\13\11\1\0\1\11\4\0\1\11\1\226\21\11"+
    "\1\66\24\0\13\11\1\0\1\11\4\0\12\11\1\304"+
    "\10\11\1\66\24\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\305\10\11\1\66\24\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\306\10\11\1\66\24\0\12\11\1\307\1\0"+
    "\1\11\4\0\12\11\1\310\10\11\1\66\26\0\2\311"+
    "\1\71\1\0\5\311\1\0\1\311\4\0\1\311\1\0"+
    "\1\311\1\0\1\311\45\0\1\312\1\70\1\71\1\0"+
    "\1\71\3\312\1\71\1\75\1\76\54\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\101\14\11\1\66\24\0\13\11"+
    "\1\0\1\11\4\0\13\11\1\313\7\11\1\66\24\0"+
    "\13\11\1\0\1\11\4\0\14\11\1\101\6\11\1\66"+
    "\24\0\13\11\1\0\1\11\4\0\10\11\1\261\12\11"+
    "\1\66\24\0\13\11\1\0\1\11\4\0\13\11\1\314"+
    "\7\11\1\66\24\0\13\11\1\0\1\11\4\0\11\11"+
    "\1\226\11\11\1\66\24\0\13\11\1\0\1\11\4\0"+
    "\13\11\1\163\7\11\1\66\24\0\13\11\1\0\1\11"+
    "\4\0\6\11\1\256\14\11\1\66\24\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\315\14\11\1\66\24\0\13\11"+
    "\1\0\1\11\4\0\11\11\1\316\11\11\1\66\24\0"+
    "\4\11\1\317\6\11\1\0\1\11\4\0\23\11\1\66"+
    "\24\0\13\11\1\0\1\11\4\0\11\11\1\320\11\11"+
    "\1\66\26\0\2\321\1\71\1\0\5\321\1\0\1\321"+
    "\4\0\1\321\1\0\1\321\1\0\1\321\45\0\1\322"+
    "\1\70\1\71\1\0\1\71\3\322\1\71\1\75\1\76"+
    "\54\0\13\11\1\0\1\11\4\0\1\11\1\323\21\11"+
    "\1\66\24\0\13\11\1\0\1\11\4\0\1\11\1\324"+
    "\21\11\1\66\24\0\13\11\1\0\1\11\4\0\14\11"+
    "\1\202\6\11\1\66\24\0\13\11\1\0\1\325\4\0"+
    "\23\11\1\66\24\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\326\12\11\1\66\24\0\13\11\1\0\1\11\4\0"+
    "\6\11\1\202\14\11\1\66\26\0\2\327\1\71\1\0"+
    "\5\327\1\0\1\327\4\0\1\327\1\0\1\327\1\0"+
    "\1\327\45\0\1\330\1\70\1\71\1\0\1\71\3\330"+
    "\1\71\1\75\1\76\54\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\202\10\11\1\66\24\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\331\10\11\1\66\24\0\6\11\1\202"+
    "\4\11\1\0\1\11\4\0\23\11\1\66\24\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\320\20\11\1\66\26\0"+
    "\2\332\1\71\1\0\5\332\1\0\1\332\4\0\1\332"+
    "\1\0\1\332\1\0\1\332\45\0\1\333\1\70\1\71"+
    "\1\0\1\71\3\333\1\71\1\75\1\76\54\0\13\11"+
    "\1\0\1\11\4\0\4\11\1\334\16\11\1\66\26\0"+
    "\2\335\1\71\1\0\5\335\1\0\1\335\4\0\1\335"+
    "\1\0\1\335\1\0\1\335\45\0\1\336\1\70\1\71"+
    "\1\0\1\71\3\336\1\71\1\75\1\76\54\0\13\11"+
    "\1\0\1\11\4\0\10\11\1\337\12\11\1\66\26\0"+
    "\2\340\1\71\1\0\5\340\1\0\1\340\4\0\1\340"+
    "\1\0\1\340\1\0\1\340\45\0\1\341\1\70\1\71"+
    "\1\0\1\71\3\341\1\71\1\75\1\76\54\0\13\11"+
    "\1\0\1\11\4\0\20\11\1\342\2\11\1\66\26\0"+
    "\2\343\1\71\1\0\5\343\1\0\1\343\4\0\1\343"+
    "\1\0\1\343\1\0\1\343\45\0\1\344\1\70\1\71"+
    "\1\0\1\71\3\344\1\71\1\75\1\76\54\0\13\11"+
    "\1\0\1\11\4\0\21\11\1\345\1\11\1\66\26\0"+
    "\2\346\1\71\1\0\5\346\1\0\1\346\4\0\1\346"+
    "\1\0\1\346\1\0\1\346\45\0\1\347\1\70\1\71"+
    "\1\0\1\71\3\347\1\71\1\75\1\76\54\0\13\11"+
    "\1\0\1\11\4\0\10\11\1\350\12\11\1\66\26\0"+
    "\2\351\1\71\1\0\5\351\1\0\1\351\4\0\1\351"+
    "\1\0\1\351\1\0\1\351\45\0\1\352\1\70\1\71"+
    "\1\0\1\71\3\352\1\71\1\75\1\76\54\0\13\11"+
    "\1\0\1\11\4\0\11\11\1\353\11\11\1\66\26\0"+
    "\2\354\1\71\1\0\5\354\1\0\1\354\4\0\1\354"+
    "\1\0\1\354\1\0\1\354\45\0\1\355\1\70\1\71"+
    "\1\0\1\71\3\355\1\71\1\75\1\76\54\0\13\11"+
    "\1\0\1\310\4\0\23\11\1\66\26\0\2\356\1\71"+
    "\1\0\5\356\1\0\1\356\4\0\1\356\1\0\1\356"+
    "\1\0\1\356\45\0\1\357\1\70\1\71\1\0\1\71"+
    "\3\357\1\71\1\75\1\76\56\0\2\360\1\71\1\0"+
    "\5\360\1\0\1\360\4\0\1\360\1\0\1\360\1\0"+
    "\1\360\45\0\1\361\1\70\1\71\1\0\1\71\3\361"+
    "\1\71\1\75\1\76\60\0\1\71\66\0\1\362\1\70"+
    "\1\71\1\0\1\71\3\362\1\71\1\75\1\76\56\0"+
    "\1\363\1\70\1\71\1\0\1\71\3\363\1\71\1\75"+
    "\1\76\56\0\1\364\1\70\1\71\1\0\1\71\3\364"+
    "\1\71\1\75\1\76\56\0\1\365\1\70\1\71\1\0"+
    "\1\71\3\365\1\71\1\75\1\76\56\0\2\70\1\71"+
    "\1\0\1\71\3\70\1\71\1\75\1\76\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12882];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\14\1\2\11\17\1\7\11\7\1\2\11"+
    "\3\1\1\0\1\11\2\1\1\11\1\0\3\1\1\0"+
    "\42\1\1\11\3\1\1\11\2\0\4\1\1\0\42\1"+
    "\1\11\1\0\114\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    protected int tokenStart;
    protected int tokenLength;
    protected int offset;

    private StateStack stack = new StateStack();

    private LexerInput input;

    public JavaScriptColoringLexer(LexerRestartInfo info) {
        this.input = info.input();

        if(info.state() != null) {
            //reset state
            setState((LexerState)info.state());
        } else {
            //initial state
            zzState = zzLexicalState = YYINITIAL;
            stack.clear();
        }

    }

    public static final class LexerState  {
        final StateStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;


        LexerState (StateStack stack, int zzState, int zzLexicalState) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                    return true;
            }

            if (obj == null || obj.getClass() != this.getClass()) {
                    return false;
            }

            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                && (this.zzState == state.zzState)
                && (this.zzLexicalState == state.zzLexicalState));
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            if (stack != null) {
                hash = 31 * hash + this.stack.hashCode();
            }
            return hash;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.createClone(), zzState, zzLexicalState);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
    }

    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }

    protected int getZZStartRead() {
    	return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
    	return this.zzPushbackPos;
    }

    protected void pushBack(int i) {
            yypushback(i);
    }

    protected void popState() {
            yybegin(stack.popStack());
    }

    protected void pushState(final int state) {
            stack.pushStack(getZZLexicalState());
            yybegin(state);
    }


 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaScriptColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaScriptColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1816) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JsTokenId nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();
            
            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { return JsTokenId.NUMBER;
          }
        case 21: break;
        case 7: 
          { return JsTokenId.OPERATOR_LPARAN;
          }
        case 22: break;
        case 6: 
          { yybegin(SSTRING);
                                    tokenStart = yychar;
                                    tokenLength = 1;
          }
        case 23: break;
        case 3: 
          { return JsTokenId.IDENTIFIER;
          }
        case 24: break;
        case 13: 
          { tokenLength += yylength();
          }
        case 25: break;
        case 14: 
          { yybegin(YYINITIAL);
          }
        case 26: break;
        case 8: 
          { return JsTokenId.OPERATOR_RPARAN;
          }
        case 27: break;
        case 11: 
          { return JsTokenId.OPERATOR_LBRACKET;
          }
        case 28: break;
        case 18: 
          { return JsTokenId.KEYWORD;
          }
        case 29: break;
        case 15: 
          { yybegin(YYINITIAL);
                                     // length also includes the trailing quote
                                     return JsTokenId.STRING; //token(TokenType.STRING, tokenStart, tokenLength + 1);
          }
        case 30: break;
        case 17: 
          { return JsTokenId.TYPE;
          }
        case 31: break;
        case 19: 
          { tokenLength += 2;
          }
        case 32: break;
        case 2: 
          { return JsTokenId.OPERATOR;
          }
        case 33: break;
        case 9: 
          { return JsTokenId.OPERATOR_LCURLY;
          }
        case 34: break;
        case 5: 
          { yybegin(STRING);
                                    tokenStart = yychar;
                                    tokenLength = 1;
          }
        case 35: break;
        case 10: 
          { return JsTokenId.OPERATOR_RCURLY;
          }
        case 36: break;
        case 12: 
          { return JsTokenId.OPERATOR_RBRACKET;
          }
        case 37: break;
        case 20: 
          { return JsTokenId.KEYWORD2;
          }
        case 38: break;
        case 1: 
          { 
          }
        case 39: break;
        case 16: 
          { return JsTokenId.COMMENT;
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF) 
            //zzAtEOF = true;
              {
                return null;
              }
          
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
