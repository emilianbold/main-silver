/* The following code was generated by JFlex 1.4.3 on 9/20/12 6:29 PM */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2011 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development and
 * Distribution License("CDDL") (collectively, the "License"). You may not use
 * this file except in compliance with the License. You can obtain a copy of
 * the License at http://www.netbeans.org/cddl-gplv2.html or
 * nbbuild/licenses/CDDL-GPL-2-CP. See the License for the specific language
 * governing permissions and limitations under the License. When distributing
 * the software, include this License Header Notice in each file and include
 * the License file at nbbuild/licenses/CDDL-GPL-2-CP. Oracle designates this
 * particular file as subject to the "Classpath" exception as provided by
 * Oracle in the GPL Version 2 section of the License file that accompanied
 * this code. If applicable, add the following below the License Header, with
 * the fields enclosed by brackets [] replaced by your own identifying
 * information: "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license." If you do not indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to its
 * licensees as provided above. However, if you add GPL Version 2 code and
 * therefore, elected the GPL Version 2 license, then the option applies only
 * if the new code is made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2011 Sun Microsystems, Inc.
 */

package org.netbeans.modules.javascript2.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/20/12 6:29 PM from the specification file
 * <tt>/home/sickboy/workspace/netbeans-web/javascript2.editor/tools/JavaScriptColoringScanner.flex</tt>
 */
public final class JavaScriptColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int REGEXPEND = 12;
  public static final int LCOMMENTEND = 14;
  public static final int SSTRINGEND = 8;
  public static final int STRINGEND = 4;
  public static final int ERROR = 16;
  public static final int SSTRING = 6;
  public static final int STRING = 2;
  public static final int REGEXP = 10;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\3\1\2\2\3\1\1\16\6\4\0\1\3\1\71\1\24"+
    "\1\0\1\7\1\101\1\75\1\26\1\61\1\62\1\5\1\77\1\66"+
    "\1\23\1\21\1\4\1\10\1\16\2\15\4\17\2\11\1\74\1\65"+
    "\1\70\1\60\1\67\1\73\1\0\3\14\1\20\1\22\1\20\5\7"+
    "\1\12\13\7\1\13\2\7\1\27\1\25\1\30\1\100\1\7\1\0"+
    "\1\34\1\31\1\36\1\46\1\33\1\50\1\47\1\41\1\44\1\7"+
    "\1\35\1\51\1\56\1\43\1\42\1\54\1\7\1\32\1\37\1\40"+
    "\1\45\1\55\1\53\1\57\1\52\1\7\1\63\1\76\1\64\1\72"+
    "\41\6\1\3\1\0\4\7\4\0\1\7\2\0\1\6\7\0\1\7"+
    "\4\0\1\7\5\0\27\7\1\0\37\7\1\0\u013f\7\31\0\162\7"+
    "\4\0\14\7\16\0\5\7\11\0\1\7\21\0\130\6\5\0\23\6"+
    "\12\0\1\7\13\0\1\7\1\0\3\7\1\0\1\7\1\0\24\7"+
    "\1\0\54\7\1\0\46\7\1\0\5\7\4\0\202\7\1\0\4\6"+
    "\3\0\105\7\1\0\46\7\2\0\2\7\6\0\20\7\41\0\46\7"+
    "\2\0\1\7\7\0\47\7\11\0\21\6\1\0\27\6\1\0\3\6"+
    "\1\0\1\6\1\0\2\6\1\0\1\6\13\0\33\7\5\0\3\7"+
    "\15\0\4\6\14\0\6\6\13\0\32\7\5\0\13\7\16\6\7\0"+
    "\12\6\4\0\2\7\1\6\143\7\1\0\1\7\10\6\1\0\6\6"+
    "\2\7\2\6\1\0\4\6\2\7\12\6\3\7\2\0\1\7\17\0"+
    "\1\6\1\7\1\6\36\7\33\6\2\0\3\7\60\0\46\7\13\6"+
    "\1\7\u014f\0\3\6\66\7\2\0\1\6\1\7\20\6\2\0\1\7"+
    "\4\6\3\0\12\7\2\6\2\0\12\6\21\0\3\6\1\0\10\7"+
    "\2\0\2\7\2\0\26\7\1\0\7\7\1\0\1\7\3\0\4\7"+
    "\2\0\1\6\1\7\7\6\2\0\2\6\2\0\3\6\11\0\1\6"+
    "\4\0\2\7\1\0\3\7\2\6\2\0\12\6\4\7\15\0\3\6"+
    "\1\0\6\7\4\0\2\7\2\0\26\7\1\0\7\7\1\0\2\7"+
    "\1\0\2\7\1\0\2\7\2\0\1\6\1\0\5\6\4\0\2\6"+
    "\2\0\3\6\13\0\4\7\1\0\1\7\7\0\14\6\3\7\14\0"+
    "\3\6\1\0\11\7\1\0\3\7\1\0\26\7\1\0\7\7\1\0"+
    "\2\7\1\0\5\7\2\0\1\6\1\7\10\6\1\0\3\6\1\0"+
    "\3\6\2\0\1\7\17\0\2\7\2\6\2\0\12\6\1\0\1\7"+
    "\17\0\3\6\1\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7"+
    "\1\0\2\7\1\0\5\7\2\0\1\6\1\7\6\6\3\0\2\6"+
    "\2\0\3\6\10\0\2\6\4\0\2\7\1\0\3\7\4\0\12\6"+
    "\1\0\1\7\20\0\1\6\1\7\1\0\6\7\3\0\3\7\1\0"+
    "\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0"+
    "\3\7\3\0\10\7\1\0\3\7\4\0\5\6\3\0\3\6\1\0"+
    "\4\6\11\0\1\6\17\0\11\6\11\0\1\7\7\0\3\6\1\0"+
    "\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7\4\0"+
    "\7\6\1\0\3\6\1\0\4\6\7\0\2\6\11\0\2\7\4\0"+
    "\12\6\22\0\2\6\1\0\10\7\1\0\3\7\1\0\27\7\1\0"+
    "\12\7\1\0\5\7\2\0\1\6\1\7\7\6\1\0\3\6\1\0"+
    "\4\6\7\0\2\6\7\0\1\7\1\0\2\7\4\0\12\6\22\0"+
    "\2\6\1\0\10\7\1\0\3\7\1\0\27\7\1\0\20\7\4\0"+
    "\6\6\2\0\3\6\1\0\4\6\11\0\1\6\10\0\2\7\4\0"+
    "\12\6\22\0\2\6\1\0\22\7\3\0\30\7\1\0\11\7\1\0"+
    "\1\7\2\0\7\7\3\0\1\6\4\0\6\6\1\0\1\6\1\0"+
    "\10\6\22\0\2\6\15\0\60\7\1\6\2\7\7\6\4\0\10\7"+
    "\10\6\1\0\12\6\47\0\2\7\1\0\1\7\2\0\2\7\1\0"+
    "\1\7\2\0\1\7\6\0\4\7\1\0\7\7\1\0\3\7\1\0"+
    "\1\7\1\0\1\7\2\0\2\7\1\0\4\7\1\6\2\7\6\6"+
    "\1\0\2\6\1\7\2\0\5\7\1\0\1\7\1\0\6\6\2\0"+
    "\12\6\2\0\2\7\42\0\1\7\27\0\2\6\6\0\12\6\13\0"+
    "\1\6\1\0\1\6\1\0\1\6\4\0\2\6\10\7\1\0\42\7"+
    "\6\0\24\6\1\0\2\6\4\7\4\0\10\6\1\0\44\6\11\0"+
    "\1\6\71\0\42\7\1\0\5\7\1\0\2\7\1\0\7\6\3\0"+
    "\4\6\6\0\12\6\6\0\6\7\4\6\106\0\46\7\12\0\51\7"+
    "\7\0\132\7\5\0\104\7\5\0\122\7\6\0\7\7\1\0\77\7"+
    "\1\0\1\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7"+
    "\2\0\47\7\1\0\1\7\1\0\4\7\2\0\37\7\1\0\1\7"+
    "\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\7\7"+
    "\1\0\7\7\1\0\27\7\1\0\37\7\1\0\1\7\1\0\4\7"+
    "\2\0\7\7\1\0\47\7\1\0\23\7\16\0\11\6\56\0\125\7"+
    "\14\0\u026c\7\2\0\10\7\12\0\32\7\5\0\113\7\3\0\3\7"+
    "\17\0\15\7\1\0\4\7\3\6\13\0\22\7\3\6\13\0\22\7"+
    "\2\6\14\0\15\7\1\0\3\7\1\0\2\6\14\0\64\7\40\6"+
    "\3\0\1\7\3\0\2\7\1\6\2\0\12\6\41\0\3\6\2\0"+
    "\12\6\6\0\130\7\10\0\51\7\1\6\126\0\35\7\3\0\14\6"+
    "\4\0\14\6\12\0\12\6\36\7\2\0\5\7\u038b\0\154\7\224\0"+
    "\234\7\4\0\132\7\6\0\26\7\2\0\6\7\2\0\46\7\2\0"+
    "\6\7\2\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\37\7\2\0\65\7\1\0\7\7\1\0\1\7\3\0\3\7\1\0"+
    "\7\7\3\0\4\7\2\0\6\7\4\0\15\7\5\0\3\7\1\0"+
    "\7\7\17\0\4\6\32\0\5\6\20\0\2\7\23\0\1\7\13\0"+
    "\4\6\6\0\6\6\1\0\1\7\15\0\1\7\40\0\22\7\36\0"+
    "\15\6\4\0\1\6\3\0\6\6\27\0\1\7\4\0\1\7\2\0"+
    "\12\7\1\0\1\7\3\0\5\7\6\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\1\0\3\7\1\0\7\7\3\0\3\7\5\0"+
    "\5\7\26\0\44\7\u0e81\0\3\7\31\0\11\7\6\6\1\0\5\7"+
    "\2\0\5\7\4\0\126\7\2\0\2\6\2\0\3\7\1\0\137\7"+
    "\5\0\50\7\4\0\136\7\21\0\30\7\70\0\20\7\u0200\0\u19b6\7"+
    "\112\0\u51a6\7\132\0\u048d\7\u0773\0\u2ba4\7\u215c\0\u012e\7\2\0\73\7"+
    "\225\0\7\7\14\0\5\7\5\0\1\7\1\6\12\7\1\0\15\7"+
    "\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\154\7"+
    "\41\0\u016b\7\22\0\100\7\2\0\66\7\50\0\15\7\3\0\20\6"+
    "\20\0\4\6\17\0\2\7\30\0\3\7\31\0\1\7\6\0\5\7"+
    "\1\0\207\7\2\0\1\6\4\0\1\7\13\0\12\6\7\0\32\7"+
    "\4\0\1\7\1\0\32\7\12\0\132\7\3\0\6\7\2\0\6\7"+
    "\2\0\6\7\2\0\3\7\3\0\2\7\3\0\2\7\22\0\3\6"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\0\1\2\2\3\1\4\1\5\1\6"+
    "\1\7\2\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\17\7\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\2\42\1\43\1\2\1\44"+
    "\1\41\2\45\1\2\1\46\4\47\1\50\2\1\1\2"+
    "\1\42\1\51\1\2\1\52\1\53\3\10\1\0\3\10"+
    "\1\0\1\54\1\55\20\7\1\56\1\57\2\7\1\60"+
    "\15\7\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\0"+
    "\4\41\1\0\1\41\1\0\1\77\6\0\4\10\1\0"+
    "\16\7\1\100\3\7\1\101\10\7\1\102\2\7\1\103"+
    "\7\7\1\104\1\7\1\105\1\106\1\107\1\110\1\111"+
    "\2\0\1\112\2\10\2\7\1\113\1\114\2\7\1\115"+
    "\7\7\1\116\1\7\1\117\1\7\1\120\14\7\1\121"+
    "\4\7\1\122\1\123\1\0\2\10\1\124\3\7\1\125"+
    "\1\126\1\7\1\127\1\7\1\130\1\7\1\131\10\7"+
    "\1\132\2\7\1\133\1\134\4\7\1\135\2\10\1\136"+
    "\1\7\1\137\1\7\1\140\1\141\1\142\2\7\1\143"+
    "\3\7\1\144\5\7\1\145\2\10\1\146\5\7\1\147"+
    "\1\150\2\7\1\151\1\152\2\10\1\153\3\7\1\154"+
    "\1\155\1\7\2\10\1\7\1\156\1\7\1\157\2\10"+
    "\1\160\1\161\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\5\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[355];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u0252\0\u02d6\0\u0318\0\u035a\0\u039c"+
    "\0\u03de\0\u0420\0\u0462\0\u04a4\0\u0252\0\u0252\0\u0252\0\u0252"+
    "\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4"+
    "\0\u06f6\0\u0738\0\u077a\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4"+
    "\0\u0252\0\u0252\0\u0252\0\u0252\0\u0252\0\u0252\0\u0906\0\u0948"+
    "\0\u098a\0\u0252\0\u0252\0\u0252\0\u09cc\0\u0a0e\0\u0a50\0\u0a92"+
    "\0\u0ad4\0\u0b16\0\u0b58\0\u0252\0\u0252\0\u0b9a\0\u0252\0\u0bdc"+
    "\0\u0c1e\0\u0252\0\u0c60\0\u0252\0\u0ca2\0\u0252\0\u0ce4\0\u0d26"+
    "\0\u0d68\0\u0daa\0\u0252\0\u0dec\0\u0dec\0\u0e2e\0\u0e70\0\u0252"+
    "\0\u0252\0\u0eb2\0\u0ef4\0\u0252\0\u0f36\0\u0f78\0\u0fba\0\u0ffc"+
    "\0\u103e\0\u0252\0\u0252\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188"+
    "\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398"+
    "\0\u13da\0\u141c\0\u145e\0\u14a0\0\u039c\0\u14e2\0\u1524\0\u039c"+
    "\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734"+
    "\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u0252\0\u1902"+
    "\0\u0252\0\u1944\0\u1986\0\u0252\0\u0252\0\u0252\0\u0252\0\u0252"+
    "\0\u0252\0\u0252\0\u0252\0\u19c8\0\u0252\0\u1a0a\0\u1a4c\0\u1a8e"+
    "\0\u1ad0\0\u1b12\0\u0ca2\0\u0252\0\u0ce4\0\u0d26\0\u1b54\0\u0dec"+
    "\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64"+
    "\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74"+
    "\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u039c\0\u2100\0\u2142"+
    "\0\u2184\0\u039c\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310"+
    "\0\u2352\0\u2394\0\u039c\0\u23d6\0\u2418\0\u039c\0\u245a\0\u249c"+
    "\0\u24de\0\u2520\0\u2562\0\u25a4\0\u25e6\0\u039c\0\u2628\0\u0252"+
    "\0\u0252\0\u266a\0\u0252\0\u0252\0\u26ac\0\u26ee\0\u0252\0\u2730"+
    "\0\u2772\0\u27b4\0\u27f6\0\u039c\0\u039c\0\u2838\0\u287a\0\u039c"+
    "\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u039c"+
    "\0\u2a8a\0\u039c\0\u2acc\0\u039c\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4"+
    "\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\u2de4"+
    "\0\u039c\0\u2e26\0\u2e68\0\u2eaa\0\u2eec\0\u039c\0\u0252\0\u2f2e"+
    "\0\u2f70\0\u2fb2\0\u039c\0\u2ff4\0\u3036\0\u3078\0\u039c\0\u039c"+
    "\0\u30ba\0\u039c\0\u30fc\0\u039c\0\u313e\0\u039c\0\u3180\0\u31c2"+
    "\0\u3204\0\u3246\0\u3288\0\u32ca\0\u330c\0\u334e\0\u039c\0\u3390"+
    "\0\u33d2\0\u039c\0\u039c\0\u3414\0\u3456\0\u3498\0\u34da\0\u0252"+
    "\0\u351c\0\u355e\0\u039c\0\u35a0\0\u039c\0\u35e2\0\u039c\0\u039c"+
    "\0\u039c\0\u3624\0\u3666\0\u039c\0\u36a8\0\u36ea\0\u372c\0\u039c"+
    "\0\u376e\0\u37b0\0\u37f2\0\u3834\0\u3876\0\u039c\0\u38b8\0\u38fa"+
    "\0\u039c\0\u393c\0\u397e\0\u39c0\0\u3a02\0\u3a44\0\u039c\0\u039c"+
    "\0\u3a86\0\u3ac8\0\u039c\0\u039c\0\u3b0a\0\u3b4c\0\u039c\0\u3b8e"+
    "\0\u3bd0\0\u3c12\0\u039c\0\u039c\0\u3c54\0\u3c96\0\u3cd8\0\u3d1a"+
    "\0\u039c\0\u3d5c\0\u039c\0\u3d9e\0\u3de0\0\u039c\0\u039c\0\u3e22"+
    "\0\u3e64\0\u3ea6\0\u3ee8\0\u3f2a\0\u3f6c\0\u3fae\0\u3ff0\0\u4032"+
    "\0\u4074\0\u40b6\0\u40f8\0\u413a\0\u417c\0\u41be\0\u4200\0\u4242"+
    "\0\u4284\0\u42c6\0\u4308";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[355];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\12\1\20"+
    "\1\21\1\22\3\20\3\22\1\20\1\23\1\20\1\24"+
    "\1\25\1\12\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\2\20\1\34\1\35\1\36\2\20\1\37\1\40\1\20"+
    "\1\41\1\20\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\2\20\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\21\72\1\75"+
    "\1\76\54\72\24\12\1\77\55\12\1\100\1\101\1\102"+
    "\22\100\1\103\1\104\53\100\26\12\1\77\53\12\1\105"+
    "\1\106\1\12\1\105\2\106\17\105\1\107\1\105\1\110"+
    "\52\105\2\106\1\12\1\106\1\111\75\106\1\12\1\112"+
    "\1\113\77\12\1\114\1\115\1\74\77\114\104\0\1\14"+
    "\102\0\1\15\102\0\1\116\1\117\52\0\1\120\101\0"+
    "\1\121\27\0\13\20\1\0\1\20\6\0\27\20\32\0"+
    "\1\122\1\123\1\124\1\125\1\0\1\126\1\127\1\126"+
    "\1\124\1\130\1\131\10\0\1\131\12\0\1\124\1\0"+
    "\2\124\5\0\1\125\32\0\2\22\1\124\2\0\3\22"+
    "\1\124\1\130\1\131\10\0\1\131\12\0\1\124\1\0"+
    "\2\124\40\0\2\130\3\0\3\130\105\0\1\132\34\0"+
    "\1\133\27\0\13\20\1\0\1\20\6\0\1\20\1\134"+
    "\25\20\30\0\13\20\1\0\1\20\6\0\2\20\1\135"+
    "\24\20\30\0\13\20\1\0\1\20\6\0\12\20\1\136"+
    "\5\20\1\137\5\20\1\140\30\0\13\20\1\0\1\20"+
    "\6\0\3\20\1\141\5\20\1\142\6\20\1\143\6\20"+
    "\30\0\13\20\1\0\1\20\6\0\7\20\1\144\4\20"+
    "\1\145\5\20\1\146\4\20\30\0\13\20\1\0\1\20"+
    "\6\0\1\20\1\147\6\20\1\150\10\20\1\151\5\20"+
    "\30\0\13\20\1\0\1\20\6\0\2\20\1\152\11\20"+
    "\1\153\12\20\30\0\13\20\1\0\1\20\6\0\12\20"+
    "\1\154\4\20\1\155\5\20\1\156\1\20\30\0\13\20"+
    "\1\0\1\20\6\0\2\20\1\157\6\20\1\160\15\20"+
    "\30\0\13\20\1\0\1\20\6\0\3\20\1\161\5\20"+
    "\1\162\1\20\1\163\1\164\12\20\30\0\13\20\1\0"+
    "\1\20\6\0\2\20\1\165\24\20\30\0\13\20\1\0"+
    "\1\20\6\0\13\20\1\166\13\20\30\0\13\20\1\0"+
    "\1\20\6\0\10\20\1\167\2\20\1\170\13\20\30\0"+
    "\13\20\1\0\1\20\6\0\1\20\1\171\1\20\1\172"+
    "\10\20\1\173\12\20\30\0\13\20\1\0\1\20\6\0"+
    "\3\20\1\174\5\20\1\175\15\20\102\0\1\176\101\0"+
    "\1\177\6\0\1\200\72\0\1\201\7\0\1\202\71\0"+
    "\1\203\101\0\1\204\14\0\1\205\64\0\1\206\15\0"+
    "\1\207\63\0\1\210\16\0\1\211\62\0\1\212\101\0"+
    "\1\213\21\0\1\72\2\0\21\72\1\0\1\214\54\72"+
    "\2\0\1\74\77\0\1\215\1\216\1\72\5\215\1\217"+
    "\4\215\2\217\1\220\62\215\1\100\2\0\22\100\1\221"+
    "\1\0\53\100\2\0\1\102\77\0\1\215\1\222\1\100"+
    "\5\215\1\217\4\215\2\217\1\220\62\215\1\223\2\0"+
    "\1\223\1\224\20\223\1\225\1\223\1\226\53\223\2\0"+
    "\77\223\1\226\2\0\22\226\1\227\2\226\1\223\51\226"+
    "\6\0\13\111\1\0\1\111\6\0\27\111\24\0\1\113"+
    "\77\0\1\230\1\115\1\74\77\230\1\116\2\0\77\116"+
    "\5\231\1\232\74\231\10\0\1\122\1\123\1\124\2\0"+
    "\1\126\1\127\1\126\1\124\1\130\1\131\10\0\1\131"+
    "\12\0\1\124\1\0\2\124\40\0\2\123\3\0\3\123"+
    "\1\124\1\130\1\131\10\0\1\131\12\0\1\124\1\0"+
    "\1\124\41\0\1\233\1\234\2\0\5\234\1\0\1\234"+
    "\6\0\1\234\1\0\2\234\1\0\1\234\7\0\1\234"+
    "\1\0\1\234\41\0\1\235\1\123\1\124\2\0\3\235"+
    "\1\124\1\130\1\131\10\0\1\131\12\0\1\124\1\0"+
    "\2\124\40\0\1\126\1\123\1\124\2\0\3\126\1\124"+
    "\1\130\1\131\10\0\1\131\12\0\1\124\1\0\2\124"+
    "\40\0\2\130\3\0\3\130\1\124\1\0\1\131\10\0"+
    "\1\131\12\0\1\124\1\0\1\124\41\0\2\236\3\0"+
    "\3\236\3\0\1\237\53\0\1\237\10\0\13\20\1\0"+
    "\1\20\6\0\2\20\1\240\24\20\30\0\13\20\1\0"+
    "\1\20\6\0\7\20\1\241\17\20\30\0\13\20\1\0"+
    "\1\20\6\0\14\20\1\242\12\20\30\0\13\20\1\0"+
    "\1\20\6\0\6\20\1\243\20\20\30\0\13\20\1\0"+
    "\1\20\6\0\7\20\1\244\13\20\1\245\3\20\30\0"+
    "\13\20\1\0\1\20\6\0\6\20\1\246\1\247\17\20"+
    "\30\0\13\20\1\0\1\20\6\0\12\20\1\250\14\20"+
    "\30\0\13\20\1\0\1\20\6\0\3\20\1\251\23\20"+
    "\30\0\13\20\1\0\1\20\6\0\3\20\1\252\23\20"+
    "\30\0\13\20\1\0\1\20\6\0\23\20\1\253\3\20"+
    "\30\0\13\20\1\0\1\20\6\0\13\20\1\254\13\20"+
    "\30\0\13\20\1\0\1\20\6\0\14\20\1\255\4\20"+
    "\1\256\5\20\30\0\13\20\1\0\1\20\6\0\1\20"+
    "\1\257\11\20\1\260\13\20\30\0\13\20\1\0\1\20"+
    "\6\0\23\20\1\261\3\20\30\0\13\20\1\0\1\20"+
    "\6\0\22\20\1\262\4\20\30\0\13\20\1\0\1\20"+
    "\6\0\20\20\1\263\6\20\30\0\13\20\1\0\1\20"+
    "\6\0\6\20\1\264\1\265\17\20\30\0\13\20\1\0"+
    "\1\20\6\0\23\20\1\266\3\20\30\0\13\20\1\0"+
    "\1\20\6\0\1\267\16\20\1\270\1\271\6\20\30\0"+
    "\13\20\1\0\1\20\6\0\20\20\1\272\6\20\30\0"+
    "\13\20\1\0\1\20\6\0\1\20\1\273\25\20\30\0"+
    "\13\20\1\0\1\20\6\0\12\20\1\274\14\20\30\0"+
    "\13\20\1\0\1\20\6\0\12\20\1\275\14\20\30\0"+
    "\13\20\1\0\1\20\6\0\7\20\1\276\17\20\30\0"+
    "\13\20\1\0\1\20\6\0\2\20\1\277\24\20\30\0"+
    "\13\20\1\0\1\20\6\0\13\20\1\300\13\20\30\0"+
    "\13\20\1\0\1\20\6\0\7\20\1\301\17\20\30\0"+
    "\13\20\1\0\1\20\6\0\11\20\1\302\1\20\1\303"+
    "\13\20\30\0\13\20\1\0\1\20\6\0\5\20\1\304"+
    "\21\20\30\0\13\20\1\0\1\20\6\0\1\305\26\20"+
    "\30\0\13\20\1\0\1\20\6\0\1\20\1\306\25\20"+
    "\30\0\13\20\1\0\1\20\6\0\13\20\1\307\13\20"+
    "\102\0\1\310\101\0\1\311\6\0\1\312\72\0\1\313"+
    "\101\0\1\314\22\0\1\216\1\72\77\0\1\72\1\0"+
    "\22\72\1\0\1\214\54\72\10\0\1\220\4\0\3\220"+
    "\72\0\1\215\4\0\3\215\63\0\1\222\1\100\77\0"+
    "\1\100\1\0\23\100\1\221\1\0\53\100\1\226\2\0"+
    "\77\226\5\231\1\315\74\231\4\316\1\317\1\232\74\316"+
    "\10\0\1\233\1\234\1\124\1\0\5\234\1\0\1\234"+
    "\6\0\1\234\1\0\2\234\1\0\1\234\7\0\1\234"+
    "\1\0\1\234\1\124\40\0\2\320\1\124\1\0\5\320"+
    "\1\0\1\320\6\0\1\320\1\0\2\320\1\0\1\320"+
    "\7\0\1\320\1\0\1\320\1\124\40\0\1\321\1\123"+
    "\1\124\2\0\3\321\1\124\1\130\1\131\10\0\1\131"+
    "\12\0\1\124\1\0\2\124\40\0\2\236\3\0\3\236"+
    "\1\124\25\0\1\124\1\0\1\124\41\0\2\236\3\0"+
    "\3\236\70\0\13\20\1\0\1\20\6\0\3\20\1\322"+
    "\23\20\30\0\13\20\1\0\1\20\6\0\14\20\1\323"+
    "\12\20\30\0\13\20\1\0\1\20\6\0\25\20\1\324"+
    "\1\20\30\0\13\20\1\0\1\20\6\0\2\20\1\325"+
    "\24\20\30\0\13\20\1\0\1\20\6\0\2\20\1\326"+
    "\24\20\30\0\13\20\1\0\1\20\6\0\11\20\1\327"+
    "\15\20\30\0\13\20\1\0\1\20\6\0\2\20\1\330"+
    "\24\20\30\0\13\20\1\0\1\20\6\0\5\20\1\331"+
    "\21\20\30\0\13\20\1\0\1\20\6\0\6\20\1\332"+
    "\1\333\17\20\30\0\13\20\1\0\1\20\6\0\6\20"+
    "\1\334\20\20\30\0\13\20\1\0\1\20\6\0\7\20"+
    "\1\335\17\20\30\0\13\20\1\0\1\20\6\0\2\20"+
    "\1\336\24\20\30\0\13\20\1\0\1\20\6\0\7\20"+
    "\1\337\17\20\30\0\13\20\1\0\1\20\6\0\2\20"+
    "\1\340\24\20\30\0\13\20\1\0\1\20\6\0\11\20"+
    "\1\341\15\20\30\0\13\20\1\0\1\20\6\0\6\20"+
    "\1\342\20\20\30\0\13\20\1\0\1\20\6\0\2\20"+
    "\1\343\24\20\30\0\13\20\1\0\1\20\6\0\20\20"+
    "\1\344\6\20\30\0\13\20\1\0\1\20\6\0\7\20"+
    "\1\345\17\20\30\0\13\20\1\0\1\20\6\0\2\20"+
    "\1\346\24\20\30\0\13\20\1\0\1\20\6\0\11\20"+
    "\1\347\6\20\1\350\6\20\30\0\13\20\1\0\1\20"+
    "\6\0\14\20\1\351\12\20\30\0\13\20\1\0\1\20"+
    "\6\0\3\20\1\352\23\20\30\0\13\20\1\0\1\20"+
    "\6\0\2\20\1\353\24\20\30\0\13\20\1\0\1\20"+
    "\6\0\6\20\1\354\20\20\30\0\13\20\1\0\1\20"+
    "\6\0\3\20\1\355\23\20\30\0\13\20\1\0\1\20"+
    "\6\0\5\20\1\356\21\20\30\0\13\20\1\0\1\20"+
    "\6\0\20\20\1\357\6\20\30\0\13\20\1\0\1\20"+
    "\6\0\20\20\1\360\6\20\30\0\13\20\1\0\1\20"+
    "\6\0\10\20\1\361\16\20\30\0\13\20\1\0\1\20"+
    "\6\0\7\20\1\362\17\20\30\0\13\20\1\0\1\20"+
    "\6\0\24\20\1\363\2\20\30\0\13\20\1\0\1\20"+
    "\6\0\4\20\1\364\22\20\30\0\13\20\1\0\1\20"+
    "\6\0\20\20\1\365\6\20\30\0\13\20\1\0\1\20"+
    "\6\0\15\20\1\366\11\20\102\0\1\367\21\0\4\231"+
    "\1\317\1\315\74\231\5\316\1\370\74\316\10\0\2\371"+
    "\1\124\1\0\5\371\1\0\1\371\6\0\1\371\1\0"+
    "\2\371\1\0\1\371\7\0\1\371\1\0\1\371\1\124"+
    "\40\0\1\372\1\123\1\124\2\0\3\372\1\124\1\130"+
    "\1\131\10\0\1\131\12\0\1\124\1\0\2\124\36\0"+
    "\13\20\1\0\1\20\6\0\4\20\1\373\22\20\30\0"+
    "\13\20\1\0\1\20\6\0\1\20\1\374\25\20\30\0"+
    "\13\20\1\0\1\20\6\0\12\20\1\375\14\20\30\0"+
    "\13\20\1\0\1\20\6\0\1\20\1\376\25\20\30\0"+
    "\13\20\1\0\1\20\6\0\10\20\1\377\16\20\30\0"+
    "\13\20\1\0\1\20\6\0\7\20\1\u0100\17\20\30\0"+
    "\13\20\1\0\1\20\6\0\13\20\1\u0101\13\20\30\0"+
    "\13\20\1\0\1\20\6\0\6\20\1\u0102\20\20\30\0"+
    "\13\20\1\0\1\20\6\0\13\20\1\u0103\13\20\30\0"+
    "\13\20\1\0\1\20\6\0\1\20\1\u0104\25\20\30\0"+
    "\13\20\1\0\1\20\6\0\5\20\1\u0105\21\20\30\0"+
    "\13\20\1\0\1\20\6\0\22\20\1\u0106\4\20\30\0"+
    "\13\20\1\0\1\20\6\0\11\20\1\u0107\15\20\30\0"+
    "\13\20\1\0\1\20\6\0\3\20\1\u0108\23\20\30\0"+
    "\13\20\1\0\1\20\6\0\1\20\1\u0109\25\20\30\0"+
    "\13\20\1\0\1\20\6\0\1\20\1\u010a\25\20\30\0"+
    "\13\20\1\0\1\20\6\0\2\20\1\u010b\24\20\30\0"+
    "\13\20\1\0\1\20\6\0\16\20\1\u010c\10\20\30\0"+
    "\13\20\1\0\1\20\6\0\14\20\1\u010d\12\20\30\0"+
    "\13\20\1\0\1\20\6\0\7\20\1\u010e\17\20\30\0"+
    "\13\20\1\0\1\20\6\0\2\20\1\u010f\24\20\30\0"+
    "\13\20\1\0\1\20\6\0\20\20\1\u0110\6\20\30\0"+
    "\13\20\1\0\1\20\6\0\7\20\1\u0111\17\20\30\0"+
    "\13\20\1\0\1\20\6\0\15\20\1\u0112\11\20\30\0"+
    "\13\20\1\0\1\20\6\0\2\20\1\u0113\24\20\30\0"+
    "\13\20\1\0\1\20\6\0\2\20\1\u0114\24\20\30\0"+
    "\13\20\1\0\1\20\6\0\3\20\1\u0115\23\20\30\0"+
    "\13\20\1\0\1\20\6\0\3\20\1\u0116\23\20\30\0"+
    "\13\20\1\0\1\20\6\0\13\20\1\u0117\13\20\22\0"+
    "\4\316\1\u0118\1\370\74\316\10\0\2\u0119\1\124\1\0"+
    "\5\u0119\1\0\1\u0119\6\0\1\u0119\1\0\2\u0119\1\0"+
    "\1\u0119\7\0\1\u0119\1\0\1\u0119\1\124\40\0\1\u011a"+
    "\1\123\1\124\2\0\3\u011a\1\124\1\130\1\131\10\0"+
    "\1\131\12\0\1\124\1\0\2\124\36\0\13\20\1\0"+
    "\1\20\6\0\12\20\1\u011b\14\20\30\0\13\20\1\0"+
    "\1\20\6\0\15\20\1\u011c\11\20\30\0\13\20\1\0"+
    "\1\20\6\0\7\20\1\u011d\17\20\30\0\13\20\1\0"+
    "\1\20\6\0\12\20\1\u011e\14\20\30\0\13\20\1\0"+
    "\1\20\6\0\5\20\1\u011f\21\20\30\0\13\20\1\0"+
    "\1\20\6\0\10\20\1\u0120\16\20\30\0\13\20\1\0"+
    "\1\20\6\0\17\20\1\u0121\7\20\30\0\13\20\1\0"+
    "\1\20\6\0\12\20\1\u0122\14\20\30\0\13\20\1\0"+
    "\1\20\6\0\17\20\1\u0123\7\20\30\0\13\20\1\0"+
    "\1\20\6\0\7\20\1\u0124\17\20\30\0\13\20\1\0"+
    "\1\20\6\0\25\20\1\u0125\1\20\30\0\13\20\1\0"+
    "\1\20\6\0\16\20\1\u0126\10\20\30\0\13\20\1\0"+
    "\1\20\6\0\20\20\1\u0127\6\20\30\0\13\20\1\0"+
    "\1\20\6\0\2\20\1\u0128\24\20\30\0\13\20\1\0"+
    "\1\20\6\0\20\20\1\u0129\6\20\30\0\13\20\1\0"+
    "\1\20\6\0\13\20\1\u012a\13\20\30\0\13\20\1\0"+
    "\1\20\6\0\5\20\1\u012b\21\20\30\0\13\20\1\0"+
    "\1\20\6\0\7\20\1\u012c\17\20\30\0\13\20\1\0"+
    "\1\20\6\0\16\20\1\u012d\10\20\30\0\13\20\1\0"+
    "\1\20\6\0\5\20\1\u012e\21\20\32\0\2\u012f\1\124"+
    "\1\0\5\u012f\1\0\1\u012f\6\0\1\u012f\1\0\2\u012f"+
    "\1\0\1\u012f\7\0\1\u012f\1\0\1\u012f\1\124\40\0"+
    "\1\u0130\1\123\1\124\2\0\3\u0130\1\124\1\130\1\131"+
    "\10\0\1\131\12\0\1\124\1\0\2\124\36\0\13\20"+
    "\1\0\1\20\6\0\6\20\1\u0131\20\20\30\0\13\20"+
    "\1\0\1\20\6\0\14\20\1\u0132\12\20\30\0\13\20"+
    "\1\0\1\20\6\0\5\20\1\u0133\21\20\30\0\13\20"+
    "\1\0\1\20\6\0\3\20\1\u0134\23\20\30\0\13\20"+
    "\1\0\1\20\6\0\2\20\1\u0135\24\20\30\0\13\20"+
    "\1\0\1\20\6\0\2\20\1\u0136\24\20\30\0\13\20"+
    "\1\0\1\20\6\0\7\20\1\u0137\17\20\30\0\13\20"+
    "\1\0\1\20\6\0\21\20\1\u0138\5\20\30\0\13\20"+
    "\1\0\1\20\6\0\11\20\1\u0139\15\20\30\0\13\20"+
    "\1\0\1\20\6\0\7\20\1\u013a\17\20\30\0\13\20"+
    "\1\0\1\20\6\0\2\20\1\u013b\24\20\30\0\13\20"+
    "\1\0\1\20\6\0\2\20\1\u013c\24\20\32\0\2\u013d"+
    "\1\124\1\0\5\u013d\1\0\1\u013d\6\0\1\u013d\1\0"+
    "\2\u013d\1\0\1\u013d\7\0\1\u013d\1\0\1\u013d\1\124"+
    "\40\0\1\u013e\1\123\1\124\2\0\3\u013e\1\124\1\130"+
    "\1\131\10\0\1\131\12\0\1\124\1\0\2\124\36\0"+
    "\13\20\1\0\1\20\6\0\2\20\1\u013f\24\20\30\0"+
    "\13\20\1\0\1\20\6\0\2\20\1\u0140\24\20\30\0"+
    "\13\20\1\0\1\20\6\0\5\20\1\u0141\21\20\30\0"+
    "\13\20\1\0\1\20\6\0\12\20\1\u0142\14\20\30\0"+
    "\13\20\1\0\1\20\6\0\1\20\1\u0143\25\20\30\0"+
    "\13\20\1\0\1\20\6\0\12\20\1\u0144\14\20\30\0"+
    "\13\20\1\0\1\20\6\0\2\20\1\u0145\24\20\32\0"+
    "\2\u0146\1\124\1\0\5\u0146\1\0\1\u0146\6\0\1\u0146"+
    "\1\0\2\u0146\1\0\1\u0146\7\0\1\u0146\1\0\1\u0146"+
    "\1\124\40\0\1\u0147\1\123\1\124\2\0\3\u0147\1\124"+
    "\1\130\1\131\10\0\1\131\12\0\1\124\1\0\2\124"+
    "\36\0\13\20\1\0\1\20\6\0\11\20\1\u0148\15\20"+
    "\30\0\13\20\1\0\1\20\6\0\2\20\1\u0149\24\20"+
    "\30\0\13\20\1\0\1\20\6\0\7\20\1\u014a\17\20"+
    "\30\0\13\20\1\0\1\20\6\0\15\20\1\u014b\11\20"+
    "\32\0\2\u014c\1\124\1\0\5\u014c\1\0\1\u014c\6\0"+
    "\1\u014c\1\0\2\u014c\1\0\1\u014c\7\0\1\u014c\1\0"+
    "\1\u014c\1\124\40\0\1\u014d\1\123\1\124\2\0\3\u014d"+
    "\1\124\1\130\1\131\10\0\1\131\12\0\1\124\1\0"+
    "\2\124\36\0\13\20\1\0\1\20\6\0\17\20\1\u014e"+
    "\7\20\30\0\13\20\1\0\1\20\6\0\6\20\1\u014f"+
    "\20\20\32\0\2\u0150\1\124\1\0\5\u0150\1\0\1\u0150"+
    "\6\0\1\u0150\1\0\2\u0150\1\0\1\u0150\7\0\1\u0150"+
    "\1\0\1\u0150\1\124\40\0\1\u0151\1\123\1\124\2\0"+
    "\3\u0151\1\124\1\130\1\131\10\0\1\131\12\0\1\124"+
    "\1\0\2\124\40\0\2\u0152\1\124\1\0\5\u0152\1\0"+
    "\1\u0152\6\0\1\u0152\1\0\2\u0152\1\0\1\u0152\7\0"+
    "\1\u0152\1\0\1\u0152\1\124\40\0\1\u0153\1\123\1\124"+
    "\2\0\3\u0153\1\124\1\130\1\131\10\0\1\131\12\0"+
    "\1\124\1\0\2\124\40\0\2\u0154\1\124\1\0\5\u0154"+
    "\1\0\1\u0154\6\0\1\u0154\1\0\2\u0154\1\0\1\u0154"+
    "\7\0\1\u0154\1\0\1\u0154\1\124\40\0\1\u0155\1\123"+
    "\1\124\2\0\3\u0155\1\124\1\130\1\131\10\0\1\131"+
    "\12\0\1\124\1\0\2\124\40\0\2\u0156\1\124\1\0"+
    "\5\u0156\1\0\1\u0156\6\0\1\u0156\1\0\2\u0156\1\0"+
    "\1\u0156\7\0\1\u0156\1\0\1\u0156\1\124\40\0\1\u0157"+
    "\1\123\1\124\2\0\3\u0157\1\124\1\130\1\131\10\0"+
    "\1\131\12\0\1\124\1\0\2\124\40\0\2\u0158\1\124"+
    "\1\0\5\u0158\1\0\1\u0158\6\0\1\u0158\1\0\2\u0158"+
    "\1\0\1\u0158\7\0\1\u0158\1\0\1\u0158\1\124\40\0"+
    "\1\u0159\1\123\1\124\2\0\3\u0159\1\124\1\130\1\131"+
    "\10\0\1\131\12\0\1\124\1\0\2\124\40\0\2\u015a"+
    "\1\124\1\0\5\u015a\1\0\1\u015a\6\0\1\u015a\1\0"+
    "\2\u015a\1\0\1\u015a\7\0\1\u015a\1\0\1\u015a\1\124"+
    "\40\0\1\u015b\1\123\1\124\2\0\3\u015b\1\124\1\130"+
    "\1\131\10\0\1\131\12\0\1\124\1\0\2\124\40\0"+
    "\2\u015c\1\124\1\0\5\u015c\1\0\1\u015c\6\0\1\u015c"+
    "\1\0\2\u015c\1\0\1\u015c\7\0\1\u015c\1\0\1\u015c"+
    "\1\124\40\0\1\u015d\1\123\1\124\2\0\3\u015d\1\124"+
    "\1\130\1\131\10\0\1\131\12\0\1\124\1\0\2\124"+
    "\40\0\2\u015e\1\124\1\0\5\u015e\1\0\1\u015e\6\0"+
    "\1\u015e\1\0\2\u015e\1\0\1\u015e\7\0\1\u015e\1\0"+
    "\1\u015e\1\124\40\0\1\u015f\1\123\1\124\2\0\3\u015f"+
    "\1\124\1\130\1\131\10\0\1\131\12\0\1\124\1\0"+
    "\2\124\42\0\1\124\36\0\1\124\40\0\1\u0160\1\123"+
    "\1\124\2\0\3\u0160\1\124\1\130\1\131\10\0\1\131"+
    "\12\0\1\124\1\0\2\124\40\0\1\u0161\1\123\1\124"+
    "\2\0\3\u0161\1\124\1\130\1\131\10\0\1\131\12\0"+
    "\1\124\1\0\2\124\40\0\1\u0162\1\123\1\124\2\0"+
    "\3\u0162\1\124\1\130\1\131\10\0\1\131\12\0\1\124"+
    "\1\0\2\124\40\0\1\u0163\1\123\1\124\2\0\3\u0163"+
    "\1\124\1\130\1\131\10\0\1\131\12\0\1\124\1\0"+
    "\2\124\40\0\2\123\1\124\2\0\3\123\1\124\1\130"+
    "\1\131\10\0\1\131\12\0\1\124\1\0\2\124\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17226];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\1\1\0\1\11\1\1\1\11\10\1\4\11"+
    "\20\1\6\11\3\1\3\11\7\1\2\11\1\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\11\4\1\1\11"+
    "\4\1\2\11\2\1\1\11\1\0\3\1\1\0\2\11"+
    "\43\1\1\11\1\1\1\11\2\1\10\11\1\0\1\11"+
    "\3\1\1\0\1\1\1\0\1\11\6\0\4\1\1\0"+
    "\50\1\2\11\1\1\2\11\2\0\1\11\47\1\1\11"+
    "\1\0\37\1\1\11\67\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[355];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private LexerInput input;

    private boolean embedded;

    private boolean canFollowLiteral = true;

    public JavaScriptColoringLexer(LexerRestartInfo info) {
        this.input = info.input();

        this.embedded = !JsTokenId.JAVASCRIPT_MIME_TYPE.equals(info.languagePath().mimePath());
        if(info.state() != null) {
            //reset state
            setState((LexerState)info.state());
        } else {
            //initial state
            zzState = zzLexicalState = YYINITIAL;
        }
    }

    public LexerState getState() {
        if (zzState == YYINITIAL && zzLexicalState == YYINITIAL
                && canFollowLiteral) {
            return null;
        }
        return new LexerState(zzState, zzLexicalState, canFollowLiteral);
    }

    public void setState(LexerState state) {
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
        this.canFollowLiteral = state.canFollowLiteral;
    }

    public JsTokenId nextToken() throws java.io.IOException {
        JsTokenId token = yylex();
        if (token != null && !JsTokenId.ERROR.equals(token)
                && !JsTokenId.UNKNOWN.equals(token)
                && !JsTokenId.WHITESPACE.equals(token)
                && !JsTokenId.LINE_COMMENT.equals(token)
                && !JsTokenId.BLOCK_COMMENT.equals(token)
                && !JsTokenId.DOC_COMMENT.equals(token)) {
            canFollowLiteral = canFollowLiteral(token);
        }
        return token;
    }

    private JsTokenId getErrorToken() {
        if (embedded) {
            return JsTokenId.UNKNOWN;
        }
        return JsTokenId.ERROR;
    }

    private static boolean canFollowLiteral(JsTokenId token) {
        if ("operator".equals(token.primaryCategory())) {
            return true;
        }

        switch (token) {
            case BRACKET_LEFT_PAREN:
            case BRACKET_LEFT_BRACKET:
            case KEYWORD_RETURN:
            case KEYWORD_THROW:
            case RESERVED_YIELD:
            case EOL:
                return true;
        }
        return false;
    }

    public static final class LexerState  {
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;
        /** can be the literal used here */
        final boolean canFollowLiteral;

        LexerState (int zzState, int zzLexicalState, boolean canFollowLiteral) {
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.canFollowLiteral = canFollowLiteral;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final LexerState other = (LexerState) obj;
            if (this.zzState != other.zzState) {
                return false;
            }
            if (this.zzLexicalState != other.zzLexicalState) {
                return false;
            }
            if (this.canFollowLiteral != other.canFollowLiteral) {
                return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            int hash = 5;
            hash = 29 * hash + this.zzState;
            hash = 29 * hash + this.zzLexicalState;
            hash = 29 * hash + (this.canFollowLiteral ? 1 : 0);
            return hash;
        }

        @Override
        public String toString() {
            return "LexerState{" + "zzState=" + zzState + ", zzLexicalState=" + zzLexicalState + ", canFollowLiteral=" + canFollowLiteral + '}';
        }
    }

 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaScriptColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaScriptColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1782) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JsTokenId yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      int tokenLength = 0;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          zzInput = input.read();

          if(zzInput == LexerInput.EOF) {
              //end of input reached
            zzInput = YYEOF;
            break zzForAction;
              //notice: currently LexerInput.EOF == YYEOF
          }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 40: 
          { yybegin(YYINITIAL);
                                     return JsTokenId.REGEXP_END;
          }
        case 114: break;
        case 16: 
          { return JsTokenId.BRACKET_LEFT_PAREN;
          }
        case 115: break;
        case 25: 
          { return JsTokenId.OPERATOR_BITWISE_NOT;
          }
        case 116: break;
        case 55: 
          { return JsTokenId.OPERATOR_BITWISE_AND_ASSIGNMENT;
          }
        case 117: break;
        case 89: 
          { return JsTokenId.KEYWORD_THROW;
          }
        case 118: break;
        case 35: 
          { yypushback(1);
                                     yybegin(STRINGEND);
                                     if (tokenLength - 1 > 0) {
                                         return JsTokenId.STRING;
                                     }
          }
        case 119: break;
        case 68: 
          { return JsTokenId.KEYWORD_VAR;
          }
        case 120: break;
        case 93: 
          { return JsTokenId.DOC_COMMENT;
          }
        case 121: break;
        case 88: 
          { return JsTokenId.RESERVED_SUPER;
          }
        case 122: break;
        case 110: 
          { return JsTokenId.RESERVED_INTERFACE;
          }
        case 123: break;
        case 43: 
          { return JsTokenId.OPERATOR_MULTIPLICATION_ASSIGNMENT;
          }
        case 124: break;
        case 24: 
          { return JsTokenId.OPERATOR_NOT;
          }
        case 125: break;
        case 12: 
          { yybegin(SSTRING);
                                    return JsTokenId.STRING_BEGIN;
          }
        case 126: break;
        case 76: 
          { return JsTokenId.KEYWORD_ELSE;
          }
        case 127: break;
        case 81: 
          { return JsTokenId.KEYWORD_WITH;
          }
        case 128: break;
        case 72: 
          { return JsTokenId.OPERATOR_LEFT_SHIFT_ARITHMETIC_ASSIGNMENT;
          }
        case 129: break;
        case 49: 
          { return JsTokenId.OPERATOR_EQUALS;
          }
        case 130: break;
        case 27: 
          { return JsTokenId.OPERATOR_COLON;
          }
        case 131: break;
        case 45: 
          { return JsTokenId.OPERATOR_MINUS_ASSIGNMENT;
          }
        case 132: break;
        case 18: 
          { return JsTokenId.BRACKET_LEFT_CURLY;
          }
        case 133: break;
        case 66: 
          { return JsTokenId.KEYWORD_FOR;
          }
        case 134: break;
        case 29: 
          { return JsTokenId.OPERATOR_BITWISE_OR;
          }
        case 135: break;
        case 67: 
          { return JsTokenId.RESERVED_LET;
          }
        case 136: break;
        case 20: 
          { return JsTokenId.OPERATOR_SEMICOLON;
          }
        case 137: break;
        case 83: 
          { return JsTokenId.OPERATOR_RIGHT_SHIFT_ASSIGNMENT;
          }
        case 138: break;
        case 53: 
          { return JsTokenId.OPERATOR_LEFT_SHIFT_ARITHMETIC;
          }
        case 139: break;
        case 96: 
          { return JsTokenId.RESERVED_STATIC;
          }
        case 140: break;
        case 77: 
          { return JsTokenId.KEYWORD_CASE;
          }
        case 141: break;
        case 26: 
          { return JsTokenId.OPERATOR_TERNARY;
          }
        case 142: break;
        case 15: 
          { return JsTokenId.OPERATOR_ASSIGNMENT;
          }
        case 143: break;
        case 79: 
          { return JsTokenId.KEYWORD_THIS;
          }
        case 144: break;
        case 92: 
          { return JsTokenId.KEYWORD_WHILE;
          }
        case 145: break;
        case 113: 
          { return JsTokenId.RESERVED_IMPLEMENTS;
          }
        case 146: break;
        case 95: 
          { return JsTokenId.RESERVED_EXPORT;
          }
        case 147: break;
        case 1: 
          { yybegin(YYINITIAL);
                                     if (tokenLength > 0) {
                                         return JsTokenId.EOL;
                                     }
          }
        case 148: break;
        case 108: 
          { return JsTokenId.KEYWORD_DEBUGGER;
          }
        case 149: break;
        case 98: 
          { return JsTokenId.KEYWORD_TYPEOF;
          }
        case 150: break;
        case 28: 
          { return JsTokenId.OPERATOR_BITWISE_AND;
          }
        case 151: break;
        case 105: 
          { return JsTokenId.RESERVED_PRIVATE;
          }
        case 152: break;
        case 22: 
          { return JsTokenId.OPERATOR_GREATER;
          }
        case 153: break;
        case 87: 
          { return JsTokenId.RESERVED_CLASS;
          }
        case 154: break;
        case 17: 
          { return JsTokenId.BRACKET_RIGHT_PAREN;
          }
        case 155: break;
        case 64: 
          { return JsTokenId.KEYWORD_TRY;
          }
        case 156: break;
        case 63: 
          { yypushback(1);
                                     yybegin(REGEXPEND);
                                     if (tokenLength - 1 > 0) {
                                         return JsTokenId.REGEXP;
                                     }
          }
        case 157: break;
        case 61: 
          { return JsTokenId.OPERATOR_BITWISE_XOR_ASSIGNMENT;
          }
        case 158: break;
        case 21: 
          { return JsTokenId.OPERATOR_COMMA;
          }
        case 159: break;
        case 69: 
          { return JsTokenId.OPERATOR_EQUALS_EXACTLY;
          }
        case 160: break;
        case 50: 
          { return JsTokenId.OPERATOR_GREATER_EQUALS;
          }
        case 161: break;
        case 54: 
          { return JsTokenId.OPERATOR_NOT_EQUALS;
          }
        case 162: break;
        case 78: 
          { return JsTokenId.KEYWORD_TRUE;
          }
        case 163: break;
        case 56: 
          { return JsTokenId.OPERATOR_AND;
          }
        case 164: break;
        case 4: 
          { return JsTokenId.WHITESPACE;
          }
        case 165: break;
        case 60: 
          { return JsTokenId.OPERATOR_INCREMENT;
          }
        case 166: break;
        case 103: 
          { return JsTokenId.KEYWORD_DEFAULT;
          }
        case 167: break;
        case 73: 
          { return JsTokenId.OPERATOR_NOT_EQUALS_EXACTLY;
          }
        case 168: break;
        case 58: 
          { return JsTokenId.OPERATOR_OR;
          }
        case 169: break;
        case 84: 
          { return JsTokenId.KEYWORD_BREAK;
          }
        case 170: break;
        case 101: 
          { return JsTokenId.RESERVED_PUBLIC;
          }
        case 171: break;
        case 82: 
          { return JsTokenId.KEYWORD_VOID;
          }
        case 172: break;
        case 19: 
          { return JsTokenId.BRACKET_RIGHT_CURLY;
          }
        case 173: break;
        case 48: 
          { return JsTokenId.KEYWORD_DO;
          }
        case 174: break;
        case 46: 
          { return JsTokenId.KEYWORD_IN;
          }
        case 175: break;
        case 39: 
          { yypushback(1);
                                     yybegin(ERROR);
          }
        case 176: break;
        case 23: 
          { return JsTokenId.OPERATOR_LOWER;
          }
        case 177: break;
        case 34: 
          { yypushback(1);
                                     yybegin(YYINITIAL);
                                     if (tokenLength - 1 > 0) {
                                         return getErrorToken();
                                     }
          }
        case 178: break;
        case 62: 
          { return JsTokenId.OPERATOR_MODULUS_ASSIGNMENT;
          }
        case 179: break;
        case 71: 
          { return JsTokenId.OPERATOR_RIGHT_SHIFT;
          }
        case 180: break;
        case 44: 
          { return JsTokenId.OPERATOR_DECREMENT;
          }
        case 181: break;
        case 107: 
          { return JsTokenId.KEYWORD_CONTINUE;
          }
        case 182: break;
        case 31: 
          { return JsTokenId.OPERATOR_BITWISE_XOR;
          }
        case 183: break;
        case 51: 
          { return JsTokenId.OPERATOR_RIGHT_SHIFT_ARITHMETIC;
          }
        case 184: break;
        case 75: 
          { return JsTokenId.RESERVED_ENUM;
          }
        case 185: break;
        case 11: 
          { yybegin(STRING);
                                    return JsTokenId.STRING_BEGIN;
          }
        case 186: break;
        case 85: 
          { return JsTokenId.KEYWORD_CATCH;
          }
        case 187: break;
        case 102: 
          { return JsTokenId.RESERVED_EXTENDS;
          }
        case 188: break;
        case 70: 
          { return JsTokenId.OPERATOR_RIGHT_SHIFT_ARITHMETIC_ASSIGNMENT;
          }
        case 189: break;
        case 37: 
          { yypushback(1);
                                     yybegin(YYINITIAL);
                                     if (tokenLength -1 > 0) {
                                         return getErrorToken();
                                     }
          }
        case 190: break;
        case 2: 
          { return getErrorToken();
          }
        case 191: break;
        case 36: 
          { yybegin(YYINITIAL);
                                     return JsTokenId.STRING_END;
          }
        case 192: break;
        case 109: 
          { return JsTokenId.KEYWORD_FUNCTION;
          }
        case 193: break;
        case 5: 
          { if (canFollowLiteral) {
                                       yybegin(REGEXP);
                                       return JsTokenId.REGEXP_BEGIN;
                                     } else {
                                       return JsTokenId.OPERATOR_DIVISION;
                                     }
          }
        case 194: break;
        case 30: 
          { return JsTokenId.OPERATOR_PLUS;
          }
        case 195: break;
        case 42: 
          { if (canFollowLiteral) {
                                       yypushback(1);
                                       yybegin(REGEXP);
                                       return JsTokenId.REGEXP_BEGIN;
                                     } else {
                                       return JsTokenId.OPERATOR_DIVISION_ASSIGNMENT;
                                     }
          }
        case 196: break;
        case 112: 
          { return JsTokenId.KEYWORD_INSTANCEOF;
          }
        case 197: break;
        case 74: 
          { return JsTokenId.BLOCK_COMMENT;
          }
        case 198: break;
        case 6: 
          { return JsTokenId.OPERATOR_MULTIPLICATION;
          }
        case 199: break;
        case 7: 
          { return JsTokenId.IDENTIFIER;
          }
        case 200: break;
        case 80: 
          { return JsTokenId.KEYWORD_NULL;
          }
        case 201: break;
        case 8: 
          { return JsTokenId.NUMBER;
          }
        case 202: break;
        case 94: 
          { return JsTokenId.KEYWORD_RETURN;
          }
        case 203: break;
        case 100: 
          { return JsTokenId.KEYWORD_DELETE;
          }
        case 204: break;
        case 52: 
          { return JsTokenId.OPERATOR_LOWER_EQUALS;
          }
        case 205: break;
        case 47: 
          { return JsTokenId.KEYWORD_IF;
          }
        case 206: break;
        case 111: 
          { return JsTokenId.RESERVED_PROTECTED;
          }
        case 207: break;
        case 57: 
          { return JsTokenId.OPERATOR_BITWISE_OR_ASSIGNMENT;
          }
        case 208: break;
        case 3: 
          { return JsTokenId.EOL;
          }
        case 209: break;
        case 106: 
          { return JsTokenId.RESERVED_PACKAGE;
          }
        case 210: break;
        case 97: 
          { return JsTokenId.KEYWORD_SWITCH;
          }
        case 211: break;
        case 41: 
          { yybegin(LCOMMENTEND);
                                   return JsTokenId.LINE_COMMENT;
          }
        case 212: break;
        case 9: 
          { return JsTokenId.OPERATOR_DOT;
          }
        case 213: break;
        case 90: 
          { return JsTokenId.KEYWORD_FALSE;
          }
        case 214: break;
        case 104: 
          { return JsTokenId.KEYWORD_FINALLY;
          }
        case 215: break;
        case 65: 
          { return JsTokenId.KEYWORD_NEW;
          }
        case 216: break;
        case 38: 
          { yypushback(1);
                                     yybegin(SSTRINGEND);
                                     if (tokenLength - 1 > 0) {
                                         return JsTokenId.STRING;
                                     }
          }
        case 217: break;
        case 32: 
          { return JsTokenId.OPERATOR_MODULUS;
          }
        case 218: break;
        case 99: 
          { return JsTokenId.RESERVED_IMPORT;
          }
        case 219: break;
        case 13: 
          { return JsTokenId.BRACKET_LEFT_BRACKET;
          }
        case 220: break;
        case 86: 
          { return JsTokenId.RESERVED_CONST;
          }
        case 221: break;
        case 14: 
          { return JsTokenId.BRACKET_RIGHT_BRACKET;
          }
        case 222: break;
        case 10: 
          { return JsTokenId.OPERATOR_MINUS;
          }
        case 223: break;
        case 59: 
          { return JsTokenId.OPERATOR_PLUS_ASSIGNMENT;
          }
        case 224: break;
        case 91: 
          { return JsTokenId.RESERVED_YIELD;
          }
        case 225: break;
        case 33: 
          { 
          }
        case 226: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return getErrorToken();
    } else {
        return null;
    }
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
