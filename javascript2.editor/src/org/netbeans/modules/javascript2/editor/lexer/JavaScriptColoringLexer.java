/* The following code was generated by JFlex 1.4.3 on 11/24/11 2:05 PM */

package org.netbeans.modules.javascript2.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/24/11 2:05 PM from the specification file
 * <tt>/home/sickboy/workspace/netbeans-web/javascript2.editor/tools/JavaScriptColoringScanner.flex</tt>
 */
public final class JavaScriptColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int SSTRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\66"+
    "\1\24\1\0\1\6\1\66\1\67\1\25\1\53\1\54\1\5\1\71"+
    "\1\62\1\23\1\21\1\4\1\10\1\16\2\15\4\17\2\11\1\52"+
    "\1\61\1\65\1\63\1\64\1\62\1\0\1\31\1\27\1\33\1\14"+
    "\1\22\1\20\1\47\1\36\1\41\1\6\1\32\1\12\1\50\1\40"+
    "\1\37\1\45\1\6\1\30\1\34\1\35\1\42\1\46\1\44\1\13"+
    "\1\43\1\51\1\57\1\26\1\60\1\66\1\6\1\0\1\31\1\27"+
    "\1\33\1\14\1\22\1\20\1\47\1\36\1\41\1\6\1\32\1\12"+
    "\1\50\1\40\1\37\1\45\1\6\1\30\1\34\1\35\1\42\1\46"+
    "\1\44\1\13\1\43\1\51\1\55\1\70\1\56\1\62\41\7\2\0"+
    "\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0"+
    "\27\6\1\0\37\6\1\0\u013f\6\31\0\162\6\4\0\14\6\16\0"+
    "\5\6\11\0\1\6\21\0\130\7\5\0\23\7\12\0\1\6\13\0"+
    "\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\54\6\1\0"+
    "\46\6\1\0\5\6\4\0\202\6\1\0\4\7\3\0\105\6\1\0"+
    "\46\6\2\0\2\6\6\0\20\6\41\0\46\6\2\0\1\6\7\0"+
    "\47\6\11\0\21\7\1\0\27\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\1\0\1\7\13\0\33\6\5\0\3\6\15\0\4\7\14\0"+
    "\6\7\13\0\32\6\5\0\13\6\16\7\7\0\12\7\4\0\2\6"+
    "\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0"+
    "\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7"+
    "\36\6\33\7\2\0\3\6\60\0\46\6\13\7\1\6\u014f\0\3\7"+
    "\66\6\2\0\1\7\1\6\20\7\2\0\1\6\4\7\3\0\12\6"+
    "\2\7\2\0\12\7\21\0\3\7\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6"+
    "\7\7\2\0\2\7\2\0\3\7\11\0\1\7\4\0\2\6\1\0"+
    "\3\6\2\7\2\0\12\7\4\6\15\0\3\7\1\0\6\6\4\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\13\0"+
    "\4\6\1\0\1\6\7\0\14\7\3\6\14\0\3\7\1\0\11\6"+
    "\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6"+
    "\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\2\0\1\7\1\6\6\7\3\0\2\7\2\0\3\7\10\0"+
    "\2\7\4\0\2\6\1\0\3\6\4\0\12\7\1\0\1\6\20\0"+
    "\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6"+
    "\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\10\6"+
    "\1\0\3\6\4\0\5\7\3\0\3\7\1\0\4\7\11\0\1\7"+
    "\17\0\11\7\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\4\0\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\11\0\2\6\4\0\12\7\22\0\2\7"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6"+
    "\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7"+
    "\7\0\1\6\1\0\2\6\4\0\12\7\22\0\2\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\20\6\4\0\6\7\2\0\3\7"+
    "\1\0\4\7\11\0\1\7\10\0\2\6\4\0\12\7\22\0\2\7"+
    "\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6"+
    "\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7"+
    "\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7"+
    "\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6"+
    "\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6"+
    "\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6"+
    "\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0\2\6"+
    "\42\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7"+
    "\1\0\1\7\4\0\2\7\10\6\1\0\42\6\6\0\24\7\1\0"+
    "\2\7\4\6\4\0\10\7\1\0\44\7\11\0\1\7\71\0\42\6"+
    "\1\0\5\6\1\0\2\6\1\0\7\7\3\0\4\7\6\0\12\7"+
    "\6\0\6\6\4\7\106\0\46\6\12\0\51\6\7\0\132\6\5\0"+
    "\104\6\5\0\122\6\6\0\7\6\1\0\77\6\1\0\1\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\47\6\1\0"+
    "\1\6\1\0\4\6\2\0\37\6\1\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\7\6\1\0"+
    "\27\6\1\0\37\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0"+
    "\47\6\1\0\23\6\16\0\11\7\56\0\125\6\14\0\u026c\6\2\0"+
    "\10\6\12\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0"+
    "\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6"+
    "\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0"+
    "\2\6\1\7\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6"+
    "\10\0\51\6\1\7\126\0\35\6\3\0\14\7\4\0\14\7\12\0"+
    "\12\7\36\6\2\0\5\6\u038b\0\154\6\224\0\234\6\4\0\132\6"+
    "\6\0\26\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6"+
    "\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6"+
    "\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6\17\0\4\7"+
    "\32\0\5\7\20\0\2\6\23\0\1\6\13\0\4\7\6\0\6\7"+
    "\1\0\1\6\15\0\1\6\40\0\22\6\36\0\15\7\4\0\1\7"+
    "\3\0\6\7\27\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6"+
    "\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\3\6\1\0\7\6\3\0\3\6\5\0\5\6\26\0\44\6"+
    "\u0e81\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6\4\0"+
    "\126\6\2\0\2\7\2\0\3\6\1\0\137\6\5\0\50\6\4\0"+
    "\136\6\21\0\30\6\70\0\20\6\u0200\0\u19b6\6\112\0\u51a6\6\132\0"+
    "\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0\7\6\14\0"+
    "\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0"+
    "\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0"+
    "\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0\4\7\17\0"+
    "\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0"+
    "\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0"+
    "\32\6\12\0\132\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0"+
    "\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\3\2\2\3\1\4\2\5\3\4\1\3"+
    "\1\4\1\3\1\6\1\7\14\4\1\3\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\5\3\1\1\2\17"+
    "\1\20\2\1\1\21\1\0\1\22\3\5\1\0\3\5"+
    "\1\0\2\4\1\23\34\4\1\24\1\25\11\4\1\3"+
    "\2\1\2\21\2\0\4\5\1\0\7\4\1\26\27\4"+
    "\1\27\3\4\1\30\3\4\1\31\7\4\1\32\3\4"+
    "\1\0\2\5\1\33\10\4\1\34\2\4\1\35\2\4"+
    "\1\36\3\4\1\37\1\4\1\40\10\4\1\41\1\4"+
    "\1\42\2\4\1\43\5\4\1\44\5\4\1\45\1\46"+
    "\2\5\4\4\1\47\1\50\1\51\3\4\1\52\3\4"+
    "\1\53\1\54\1\55\2\4\1\56\1\57\3\4\1\60"+
    "\6\4\1\61\5\4\2\5\1\62\2\4\1\63\3\4"+
    "\1\64\1\4\1\65\2\4\1\66\1\4\1\67\1\4"+
    "\1\70\1\71\1\72\3\4\1\73\3\4\1\74\1\4"+
    "\2\5\1\75\1\4\1\76\1\4\1\77\1\100\10\4"+
    "\1\101\1\102\1\4\2\5\1\103\1\104\1\105\1\106"+
    "\6\4\1\107\2\5\1\4\1\110\1\4\1\111\1\4"+
    "\1\112\2\5\1\4\1\113\1\114\1\0\1\5\1\4"+
    "\1\0\1\5\1\115\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\5\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[355];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\256\0\u0122\0\u015c"+
    "\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c"+
    "\0\u0366\0\u03a0\0\256\0\256\0\u03da\0\u0414\0\u044e\0\u0488"+
    "\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658"+
    "\0\256\0\256\0\256\0\256\0\256\0\256\0\256\0\256"+
    "\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\256"+
    "\0\256\0\u0828\0\u0862\0\u089c\0\u08d6\0\256\0\u0910\0\u094a"+
    "\0\256\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0"+
    "\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0"+
    "\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80"+
    "\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050"+
    "\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u01d0\0\u11ac\0\u11e6"+
    "\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6"+
    "\0\u13f0\0\u142a\0\u1464\0\u149e\0\256\0\u14d8\0\u1512\0\u154c"+
    "\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c"+
    "\0\u1756\0\u1790\0\u17ca\0\u01d0\0\u1804\0\u183e\0\u1878\0\u18b2"+
    "\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82"+
    "\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52"+
    "\0\u1c8c\0\u1cc6\0\u1d00\0\u01d0\0\u1d3a\0\u1d74\0\u1dae\0\u01d0"+
    "\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e"+
    "\0\u1fb8\0\u1ff2\0\u202c\0\u01d0\0\u2066\0\u20a0\0\u20da\0\u2114"+
    "\0\u214e\0\u2188\0\u01d0\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa"+
    "\0\u22e4\0\u231e\0\u2358\0\u01d0\0\u2392\0\u23cc\0\u01d0\0\u2406"+
    "\0\u2440\0\u01d0\0\u247a\0\u24b4\0\u24ee\0\u01d0\0\u2528\0\u01d0"+
    "\0\u2562\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8"+
    "\0\u01d0\0\u2732\0\u01d0\0\u276c\0\u27a6\0\u01d0\0\u27e0\0\u281a"+
    "\0\u2854\0\u288e\0\u28c8\0\u01d0\0\u2902\0\u293c\0\u2976\0\u29b0"+
    "\0\u29ea\0\u01d0\0\u01d0\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c"+
    "\0\u2b46\0\u01d0\0\u01d0\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u01d0"+
    "\0\u2c68\0\u2ca2\0\u2cdc\0\u01d0\0\u01d0\0\u01d0\0\u2d16\0\u2d50"+
    "\0\u01d0\0\u01d0\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38\0\u2e72\0\u2eac"+
    "\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94\0\u01d0\0\u2fce\0\u3008\0\u3042"+
    "\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u01d0\0\u3164\0\u319e\0\u01d0"+
    "\0\u31d8\0\u3212\0\u324c\0\u01d0\0\u3286\0\u01d0\0\u32c0\0\u32fa"+
    "\0\u01d0\0\u3334\0\u01d0\0\u336e\0\u01d0\0\u01d0\0\u01d0\0\u33a8"+
    "\0\u33e2\0\u341c\0\u01d0\0\u3456\0\u3490\0\u34ca\0\u01d0\0\u3504"+
    "\0\u353e\0\u3578\0\u01d0\0\u35b2\0\u01d0\0\u35ec\0\u01d0\0\u01d0"+
    "\0\u3626\0\u3660\0\u369a\0\u36d4\0\u370e\0\u3748\0\u3782\0\u37bc"+
    "\0\u01d0\0\u01d0\0\u37f6\0\u3830\0\u386a\0\u01d0\0\u01d0\0\u01d0"+
    "\0\u01d0\0\u38a4\0\u38de\0\u3918\0\u3952\0\u398c\0\u39c6\0\u01d0"+
    "\0\u3a00\0\u3a3a\0\u3a74\0\u01d0\0\u3aae\0\u01d0\0\u3ae8\0\u01d0"+
    "\0\u3b22\0\u3b5c\0\u3b96\0\u01d0\0\u01d0\0\u3bd0\0\u3c0a\0\u3c44"+
    "\0\u3c7e\0\u3cb8\0\u01d0\0\u3cf2\0\u3d2c\0\u3d66\0\u3da0\0\u3dda"+
    "\0\u3e14\0\u3e4e\0\u3e88\0\u3ec2\0\u3efc\0\u3f36\0\u3f70\0\u3faa"+
    "\0\u3fe4\0\u401e\0\u4058";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[355];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\13\1\14\1\15\1\12\1\16\3\14\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\4\1\25\1\26\1\27"+
    "\1\12\1\30\1\31\1\32\2\12\1\33\1\34\2\12"+
    "\1\35\1\36\1\37\1\40\2\12\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\41\1\11\1\51"+
    "\1\52\1\11\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\21\56\1\61\1\56\1\62\43\56\1\63\1\57\1\60"+
    "\22\63\1\61\1\62\43\63\74\0\1\6\72\0\1\7"+
    "\72\0\1\64\1\65\55\0\1\41\71\0\1\41\14\0"+
    "\13\12\1\0\1\12\4\0\23\12\1\66\27\0\1\67"+
    "\1\70\1\71\1\72\1\71\1\73\1\74\1\73\1\71"+
    "\1\75\1\76\57\0\2\14\1\71\1\0\1\71\3\14"+
    "\1\71\1\75\1\76\55\0\13\12\1\0\1\12\4\0"+
    "\10\12\1\77\12\12\1\66\25\0\13\12\1\0\1\100"+
    "\4\0\10\12\1\101\12\12\1\66\25\0\4\12\1\102"+
    "\6\12\1\0\1\12\4\0\2\12\1\103\5\12\1\104"+
    "\1\12\1\105\1\106\7\12\1\66\27\0\2\75\3\0"+
    "\3\75\60\0\4\12\1\107\1\110\5\12\1\0\1\12"+
    "\4\0\11\12\1\111\11\12\1\66\42\0\1\41\37\0"+
    "\1\41\14\0\13\12\1\0\1\12\4\0\1\12\1\112"+
    "\6\12\1\113\3\12\1\114\6\12\1\66\25\0\13\12"+
    "\1\0\1\115\4\0\23\12\1\66\25\0\13\12\1\0"+
    "\1\12\4\0\1\116\22\12\1\66\25\0\4\12\1\117"+
    "\6\12\1\0\1\12\4\0\2\12\1\120\4\12\1\121"+
    "\1\122\12\12\1\66\25\0\13\12\1\0\1\12\4\0"+
    "\6\12\1\123\1\124\3\12\1\125\1\126\1\127\5\12"+
    "\1\66\25\0\13\12\1\0\1\12\4\0\1\12\1\130"+
    "\5\12\1\131\4\12\1\132\6\12\1\66\25\0\13\12"+
    "\1\0\1\133\4\0\2\12\1\134\10\12\1\135\7\12"+
    "\1\66\25\0\12\12\1\136\1\0\1\12\4\0\11\12"+
    "\1\137\7\12\1\140\1\12\1\66\25\0\13\12\1\0"+
    "\1\12\4\0\7\12\1\141\2\12\1\142\10\12\1\66"+
    "\25\0\13\12\1\0\1\12\4\0\1\12\1\143\1\144"+
    "\10\12\1\145\7\12\1\66\25\0\13\12\1\0\1\12"+
    "\4\0\2\12\1\146\5\12\1\147\12\12\1\66\25\0"+
    "\13\12\1\0\1\12\4\0\10\12\1\150\12\12\1\66"+
    "\102\0\1\41\1\151\70\0\1\41\1\0\1\11\67\0"+
    "\1\41\3\0\1\41\65\0\1\41\4\0\1\41\64\0"+
    "\1\41\5\0\1\41\1\56\2\0\21\56\1\0\1\56"+
    "\1\0\43\56\2\0\1\60\67\0\2\4\1\0\5\4"+
    "\1\152\4\4\2\152\1\153\52\4\1\63\2\0\22\63"+
    "\2\0\43\63\1\64\1\154\1\155\67\64\5\156\1\157"+
    "\64\156\10\0\1\67\1\70\1\71\1\0\1\71\1\73"+
    "\1\74\1\73\1\71\1\75\1\76\57\0\2\70\2\0"+
    "\1\71\3\70\1\71\1\75\1\76\57\0\1\160\1\161"+
    "\2\0\5\161\1\0\1\161\4\0\1\161\1\0\1\161"+
    "\1\0\1\161\46\0\1\162\1\70\1\71\1\0\1\71"+
    "\3\162\1\71\1\75\1\76\57\0\1\73\1\70\1\71"+
    "\1\0\1\71\3\73\1\71\1\75\1\76\57\0\2\75"+
    "\2\0\1\71\3\75\1\71\1\0\1\76\57\0\2\163"+
    "\3\0\3\163\3\0\1\164\45\0\1\164\6\0\13\12"+
    "\1\0\1\12\4\0\11\12\1\165\11\12\1\66\25\0"+
    "\4\12\1\166\5\12\1\167\1\0\1\12\4\0\1\170"+
    "\22\12\1\66\25\0\13\12\1\0\1\12\4\0\13\12"+
    "\1\171\7\12\1\66\25\0\13\12\1\0\1\12\4\0"+
    "\10\12\1\172\12\12\1\66\25\0\4\12\1\173\6\12"+
    "\1\0\1\12\4\0\23\12\1\66\25\0\13\12\1\0"+
    "\1\12\4\0\1\12\1\174\21\12\1\66\25\0\13\12"+
    "\1\0\1\12\4\0\11\12\1\175\11\12\1\66\25\0"+
    "\13\12\1\0\1\12\4\0\11\12\1\176\11\12\1\66"+
    "\25\0\13\12\1\0\1\12\4\0\5\12\1\177\15\12"+
    "\1\66\25\0\13\12\1\0\1\12\4\0\6\12\1\200"+
    "\7\12\1\201\4\12\1\66\25\0\13\12\1\0\1\12"+
    "\4\0\13\12\1\202\7\12\1\66\25\0\13\12\1\0"+
    "\1\203\4\0\23\12\1\66\25\0\13\12\1\0\1\12"+
    "\4\0\10\12\1\204\12\12\1\66\25\0\13\12\1\0"+
    "\1\12\4\0\6\12\1\205\14\12\1\66\25\0\13\12"+
    "\1\0\1\12\4\0\6\12\1\206\14\12\1\66\25\0"+
    "\13\12\1\0\1\12\4\0\5\12\1\207\15\12\1\66"+
    "\25\0\13\12\1\0\1\12\4\0\2\12\1\210\20\12"+
    "\1\66\25\0\13\12\1\0\1\12\4\0\5\12\1\211"+
    "\1\212\14\12\1\66\25\0\13\12\1\0\1\12\4\0"+
    "\2\12\1\213\20\12\1\66\25\0\13\12\1\0\1\12"+
    "\4\0\11\12\1\214\11\12\1\66\25\0\13\12\1\0"+
    "\1\12\4\0\2\12\1\215\20\12\1\66\25\0\13\12"+
    "\1\0\1\12\4\0\10\12\1\216\12\12\1\66\25\0"+
    "\13\12\1\0\1\12\4\0\16\12\1\217\4\12\1\66"+
    "\25\0\13\12\1\0\1\12\4\0\11\12\1\220\11\12"+
    "\1\66\25\0\13\12\1\0\1\12\4\0\12\12\1\221"+
    "\10\12\1\66\25\0\13\12\1\0\1\12\4\0\2\12"+
    "\1\222\10\12\1\223\1\224\6\12\1\66\25\0\13\12"+
    "\1\0\1\12\4\0\1\12\1\225\10\12\1\226\10\12"+
    "\1\66\25\0\13\12\1\0\1\12\4\0\16\12\1\227"+
    "\4\12\1\66\25\0\13\12\1\0\1\12\4\0\15\12"+
    "\1\230\5\12\1\66\25\0\13\12\1\0\1\12\4\0"+
    "\6\12\1\231\14\12\1\66\25\0\4\12\1\232\6\12"+
    "\1\0\1\12\4\0\23\12\1\66\25\0\13\12\1\0"+
    "\1\12\4\0\5\12\1\233\1\234\14\12\1\66\25\0"+
    "\13\12\1\0\1\12\4\0\16\12\1\235\4\12\1\66"+
    "\25\0\13\12\1\0\1\12\4\0\12\12\1\236\10\12"+
    "\1\66\25\0\13\12\1\0\1\12\4\0\6\12\1\237"+
    "\14\12\1\66\25\0\13\12\1\0\1\12\4\0\10\12"+
    "\1\240\1\12\1\241\10\12\1\66\25\0\13\12\1\0"+
    "\1\12\4\0\4\12\1\242\16\12\1\66\25\0\13\12"+
    "\1\0\1\12\4\0\1\243\22\12\1\66\25\0\13\12"+
    "\1\0\1\12\4\0\1\12\1\244\21\12\1\66\25\0"+
    "\4\12\1\245\6\12\1\0\1\12\4\0\12\12\1\246"+
    "\10\12\1\66\25\0\13\12\1\0\1\12\4\0\6\12"+
    "\1\247\14\12\1\66\102\0\1\41\1\11\15\0\1\153"+
    "\4\0\3\153\62\0\1\4\4\0\3\4\54\0\1\155"+
    "\67\0\5\156\1\250\64\156\4\0\1\155\1\157\74\0"+
    "\1\160\1\161\1\71\1\0\5\161\1\0\1\161\4\0"+
    "\1\161\1\0\1\161\1\0\1\161\46\0\2\251\1\71"+
    "\1\0\5\251\1\0\1\251\4\0\1\251\1\0\1\251"+
    "\1\0\1\251\46\0\1\252\1\70\1\71\1\0\1\71"+
    "\3\252\1\71\1\75\1\76\57\0\2\163\2\0\1\71"+
    "\3\163\1\71\61\0\2\163\3\0\3\163\60\0\13\12"+
    "\1\0\1\12\4\0\20\12\1\253\2\12\1\66\25\0"+
    "\13\12\1\0\1\254\4\0\23\12\1\66\25\0\13\12"+
    "\1\0\1\12\4\0\2\12\1\255\20\12\1\66\25\0"+
    "\13\12\1\0\1\12\4\0\13\12\1\256\7\12\1\66"+
    "\25\0\13\12\1\0\1\12\4\0\1\257\22\12\1\66"+
    "\25\0\13\12\1\0\1\12\4\0\2\12\1\260\20\12"+
    "\1\66\25\0\13\12\1\0\1\12\4\0\5\12\1\261"+
    "\15\12\1\66\25\0\13\12\1\0\1\12\4\0\2\12"+
    "\1\262\20\12\1\66\25\0\13\12\1\0\1\12\4\0"+
    "\4\12\1\263\16\12\1\66\25\0\13\12\1\0\1\264"+
    "\4\0\23\12\1\66\25\0\13\12\1\0\1\265\4\0"+
    "\23\12\1\66\25\0\13\12\1\0\1\12\4\0\10\12"+
    "\1\266\12\12\1\66\25\0\13\12\1\0\1\12\4\0"+
    "\21\12\1\267\1\12\1\66\25\0\13\12\1\0\1\12"+
    "\4\0\2\12\1\270\20\12\1\66\25\0\4\12\1\271"+
    "\6\12\1\0\1\12\4\0\23\12\1\66\25\0\13\12"+
    "\1\0\1\272\4\0\23\12\1\66\25\0\13\12\1\0"+
    "\1\12\4\0\13\12\1\273\7\12\1\66\25\0\13\12"+
    "\1\0\1\12\4\0\6\12\1\274\14\12\1\66\25\0"+
    "\13\12\1\0\1\12\4\0\5\12\1\275\15\12\1\66"+
    "\25\0\13\12\1\0\1\276\4\0\23\12\1\66\25\0"+
    "\13\12\1\0\1\12\4\0\4\12\1\277\16\12\1\66"+
    "\25\0\13\12\1\0\1\12\4\0\1\12\1\300\21\12"+
    "\1\66\25\0\13\12\1\0\1\12\4\0\5\12\1\301"+
    "\1\302\14\12\1\66\25\0\13\12\1\0\1\12\4\0"+
    "\6\12\1\303\14\12\1\66\25\0\13\12\1\0\1\12"+
    "\4\0\1\12\1\304\21\12\1\66\25\0\13\12\1\0"+
    "\1\305\4\0\23\12\1\66\25\0\13\12\1\0\1\12"+
    "\4\0\4\12\1\306\16\12\1\66\25\0\13\12\1\0"+
    "\1\12\4\0\6\12\1\307\14\12\1\66\25\0\13\12"+
    "\1\0\1\12\4\0\11\12\1\310\11\12\1\66\25\0"+
    "\13\12\1\0\1\311\4\0\23\12\1\66\25\0\13\12"+
    "\1\0\1\12\4\0\10\12\1\312\12\12\1\66\25\0"+
    "\13\12\1\0\1\12\4\0\5\12\1\313\15\12\1\66"+
    "\25\0\13\12\1\0\1\314\4\0\23\12\1\66\25\0"+
    "\13\12\1\0\1\12\4\0\12\12\1\315\10\12\1\66"+
    "\25\0\4\12\1\316\6\12\1\0\1\12\4\0\23\12"+
    "\1\66\25\0\13\12\1\0\1\12\4\0\6\12\1\317"+
    "\14\12\1\66\25\0\13\12\1\0\1\320\4\0\23\12"+
    "\1\66\25\0\4\12\1\321\6\12\1\0\1\12\4\0"+
    "\10\12\1\322\12\12\1\66\25\0\4\12\1\323\6\12"+
    "\1\0\1\12\4\0\23\12\1\66\25\0\13\12\1\0"+
    "\1\12\4\0\7\12\1\324\13\12\1\66\25\0\13\12"+
    "\1\0\1\12\4\0\6\12\1\325\14\12\1\66\25\0"+
    "\13\12\1\0\1\12\4\0\17\12\1\326\3\12\1\66"+
    "\25\0\13\12\1\0\1\12\4\0\3\12\1\327\17\12"+
    "\1\66\25\0\4\12\1\330\6\12\1\0\1\12\4\0"+
    "\23\12\1\66\25\0\13\12\1\0\1\12\4\0\2\12"+
    "\1\331\20\12\1\66\25\0\6\12\1\332\4\12\1\0"+
    "\1\12\4\0\23\12\1\66\25\0\13\12\1\0\1\12"+
    "\4\0\10\12\1\333\12\12\1\66\17\0\4\156\1\155"+
    "\1\250\64\156\10\0\2\334\1\71\1\0\5\334\1\0"+
    "\1\334\4\0\1\334\1\0\1\334\1\0\1\334\46\0"+
    "\1\335\1\70\1\71\1\0\1\71\3\335\1\71\1\75"+
    "\1\76\55\0\13\12\1\0\1\12\4\0\6\12\1\336"+
    "\14\12\1\66\25\0\13\12\1\0\1\12\4\0\13\12"+
    "\1\337\7\12\1\66\25\0\13\12\1\0\1\12\4\0"+
    "\20\12\1\340\2\12\1\66\25\0\4\12\1\341\6\12"+
    "\1\0\1\12\4\0\23\12\1\66\25\0\13\12\1\0"+
    "\1\12\4\0\6\12\1\342\14\12\1\66\25\0\13\12"+
    "\1\0\1\343\4\0\23\12\1\66\25\0\4\12\1\344"+
    "\6\12\1\0\1\12\4\0\23\12\1\66\25\0\13\12"+
    "\1\0\1\12\4\0\6\12\1\345\14\12\1\66\25\0"+
    "\13\12\1\0\1\12\4\0\11\12\1\346\11\12\1\66"+
    "\25\0\13\12\1\0\1\12\4\0\1\12\1\347\21\12"+
    "\1\66\25\0\13\12\1\0\1\12\4\0\3\12\1\350"+
    "\17\12\1\66\25\0\13\12\1\0\1\351\4\0\23\12"+
    "\1\66\25\0\13\12\1\0\1\12\4\0\1\12\1\352"+
    "\21\12\1\66\25\0\13\12\1\0\1\12\4\0\1\12"+
    "\1\353\21\12\1\66\25\0\13\12\1\0\1\12\4\0"+
    "\5\12\1\354\15\12\1\66\25\0\13\12\1\0\1\12"+
    "\4\0\7\12\1\355\13\12\1\66\25\0\13\12\1\0"+
    "\1\12\4\0\6\12\1\356\14\12\1\66\25\0\13\12"+
    "\1\0\1\12\4\0\12\12\1\357\10\12\1\66\25\0"+
    "\13\12\1\0\1\12\4\0\12\12\1\360\10\12\1\66"+
    "\25\0\13\12\1\0\1\12\4\0\6\12\1\361\14\12"+
    "\1\66\25\0\13\12\1\0\1\12\4\0\1\12\1\362"+
    "\21\12\1\66\25\0\13\12\1\0\1\12\4\0\7\12"+
    "\1\363\13\12\1\66\25\0\13\12\1\0\1\12\4\0"+
    "\4\12\1\364\16\12\1\66\25\0\13\12\1\0\1\12"+
    "\4\0\5\12\1\365\15\12\1\66\25\0\13\12\1\0"+
    "\1\12\4\0\15\12\1\366\5\12\1\66\25\0\13\12"+
    "\1\0\1\12\4\0\10\12\1\367\12\12\1\66\25\0"+
    "\13\12\1\0\1\12\4\0\17\12\1\370\3\12\1\66"+
    "\25\0\13\12\1\0\1\12\4\0\2\12\1\371\20\12"+
    "\1\66\25\0\13\12\1\0\1\12\4\0\1\12\1\372"+
    "\21\12\1\66\25\0\13\12\1\0\1\373\4\0\23\12"+
    "\1\66\25\0\13\12\1\0\1\12\4\0\1\12\1\374"+
    "\21\12\1\66\25\0\13\12\1\0\1\375\4\0\23\12"+
    "\1\66\25\0\13\12\1\0\1\376\4\0\23\12\1\66"+
    "\25\0\13\12\1\0\1\12\4\0\2\12\1\377\20\12"+
    "\1\66\25\0\13\12\1\0\1\12\4\0\2\12\1\u0100"+
    "\20\12\1\66\25\0\13\12\1\0\1\12\4\0\12\12"+
    "\1\u0101\10\12\1\66\25\0\13\12\1\0\1\12\4\0"+
    "\6\12\1\u0102\14\12\1\66\27\0\2\u0103\1\71\1\0"+
    "\5\u0103\1\0\1\u0103\4\0\1\u0103\1\0\1\u0103\1\0"+
    "\1\u0103\46\0\1\u0104\1\70\1\71\1\0\1\71\3\u0104"+
    "\1\71\1\75\1\76\55\0\13\12\1\0\1\u0105\4\0"+
    "\23\12\1\66\25\0\4\12\1\u0106\6\12\1\0\1\12"+
    "\4\0\23\12\1\66\25\0\13\12\1\0\1\12\4\0"+
    "\20\12\1\u0107\2\12\1\66\25\0\13\12\1\0\1\u0108"+
    "\4\0\23\12\1\66\25\0\4\12\1\u0109\6\12\1\0"+
    "\1\12\4\0\23\12\1\66\25\0\13\12\1\0\1\12"+
    "\4\0\12\12\1\u010a\10\12\1\66\25\0\6\12\1\u010b"+
    "\4\12\1\0\1\12\4\0\23\12\1\66\25\0\13\12"+
    "\1\0\1\12\4\0\6\12\1\u010c\14\12\1\66\25\0"+
    "\13\12\1\0\1\12\4\0\2\12\1\u010d\20\12\1\66"+
    "\25\0\13\12\1\0\1\12\4\0\11\12\1\u010e\11\12"+
    "\1\66\25\0\13\12\1\0\1\12\4\0\2\12\1\u010f"+
    "\20\12\1\66\25\0\13\12\1\0\1\12\4\0\11\12"+
    "\1\u0110\11\12\1\66\25\0\13\12\1\0\1\12\4\0"+
    "\4\12\1\u0111\16\12\1\66\25\0\13\12\1\0\1\12"+
    "\4\0\1\12\1\u0112\21\12\1\66\25\0\13\12\1\0"+
    "\1\12\4\0\7\12\1\u0113\13\12\1\66\25\0\13\12"+
    "\1\0\1\12\4\0\12\12\1\u0114\10\12\1\66\25\0"+
    "\13\12\1\0\1\12\4\0\5\12\1\u0115\15\12\1\66"+
    "\25\0\12\12\1\u0116\1\0\1\12\4\0\23\12\1\66"+
    "\25\0\13\12\1\0\1\u0117\4\0\23\12\1\66\25\0"+
    "\13\12\1\0\1\12\4\0\11\12\1\u0118\11\12\1\66"+
    "\25\0\12\12\1\u0119\1\0\1\12\4\0\23\12\1\66"+
    "\25\0\13\12\1\0\1\12\4\0\21\12\1\u011a\1\12"+
    "\1\66\25\0\13\12\1\0\1\12\4\0\6\12\1\u011b"+
    "\14\12\1\66\25\0\13\12\1\0\1\12\4\0\4\12"+
    "\1\u011c\16\12\1\66\25\0\13\12\1\0\1\12\4\0"+
    "\6\12\1\u011d\14\12\1\66\25\0\13\12\1\0\1\12"+
    "\4\0\20\12\1\u011e\2\12\1\66\25\0\13\12\1\0"+
    "\1\12\4\0\4\12\1\u011f\16\12\1\66\25\0\13\12"+
    "\1\0\1\12\4\0\12\12\1\u0120\10\12\1\66\27\0"+
    "\2\u0121\1\71\1\0\5\u0121\1\0\1\u0121\4\0\1\u0121"+
    "\1\0\1\u0121\1\0\1\u0121\46\0\1\u0122\1\70\1\71"+
    "\1\0\1\71\3\u0122\1\71\1\75\1\76\55\0\13\12"+
    "\1\0\1\12\4\0\6\12\1\u0123\14\12\1\66\25\0"+
    "\13\12\1\0\1\u0124\4\0\23\12\1\66\25\0\13\12"+
    "\1\0\1\12\4\0\14\12\1\u0125\6\12\1\66\25\0"+
    "\13\12\1\0\1\12\4\0\10\12\1\u0126\12\12\1\66"+
    "\25\0\13\12\1\0\1\12\4\0\5\12\1\u0127\15\12"+
    "\1\66\25\0\13\12\1\0\1\12\4\0\11\12\1\u0128"+
    "\11\12\1\66\25\0\13\12\1\0\1\12\4\0\4\12"+
    "\1\u0129\16\12\1\66\25\0\13\12\1\0\1\12\4\0"+
    "\13\12\1\u012a\7\12\1\66\25\0\13\12\1\0\1\12"+
    "\4\0\10\12\1\u012b\12\12\1\66\25\0\13\12\1\0"+
    "\1\u012c\4\0\23\12\1\66\25\0\13\12\1\0\1\12"+
    "\4\0\4\12\1\u012d\16\12\1\66\25\0\13\12\1\0"+
    "\1\12\4\0\2\12\1\u012e\20\12\1\66\25\0\13\12"+
    "\1\0\1\u012f\4\0\23\12\1\66\25\0\13\12\1\0"+
    "\1\12\4\0\6\12\1\u0130\14\12\1\66\25\0\13\12"+
    "\1\0\1\u0131\4\0\23\12\1\66\25\0\13\12\1\0"+
    "\1\u0132\4\0\23\12\1\66\25\0\4\12\1\u0133\6\12"+
    "\1\0\1\12\4\0\23\12\1\66\27\0\2\u0134\1\71"+
    "\1\0\5\u0134\1\0\1\u0134\4\0\1\u0134\1\0\1\u0134"+
    "\1\0\1\u0134\46\0\1\u0135\1\70\1\71\1\0\1\71"+
    "\3\u0135\1\71\1\75\1\76\55\0\13\12\1\0\1\12"+
    "\4\0\1\12\1\u0136\21\12\1\66\25\0\13\12\1\0"+
    "\1\12\4\0\11\12\1\u0137\11\12\1\66\25\0\13\12"+
    "\1\0\1\12\4\0\6\12\1\u0138\14\12\1\66\25\0"+
    "\13\12\1\0\1\u0139\4\0\23\12\1\66\25\0\13\12"+
    "\1\0\1\12\4\0\11\12\1\u013a\11\12\1\66\25\0"+
    "\13\12\1\0\1\12\4\0\11\12\1\u013b\11\12\1\66"+
    "\25\0\13\12\1\0\1\u013c\4\0\23\12\1\66\25\0"+
    "\13\12\1\0\1\12\4\0\4\12\1\u013d\16\12\1\66"+
    "\25\0\13\12\1\0\1\12\4\0\11\12\1\u013e\11\12"+
    "\1\66\25\0\13\12\1\0\1\u013f\4\0\23\12\1\66"+
    "\25\0\13\12\1\0\1\u0140\4\0\23\12\1\66\27\0"+
    "\2\u0141\1\71\1\0\5\u0141\1\0\1\u0141\4\0\1\u0141"+
    "\1\0\1\u0141\1\0\1\u0141\46\0\1\u0142\1\70\1\71"+
    "\1\0\1\71\3\u0142\1\71\1\75\1\76\55\0\13\12"+
    "\1\0\1\12\4\0\12\12\1\u0143\10\12\1\66\25\0"+
    "\13\12\1\0\1\12\4\0\6\12\1\u0144\14\12\1\66"+
    "\25\0\13\12\1\0\1\12\4\0\10\12\1\u0145\12\12"+
    "\1\66\25\0\13\12\1\0\1\u0146\4\0\23\12\1\66"+
    "\25\0\13\12\1\0\1\12\4\0\6\12\1\u0147\14\12"+
    "\1\66\25\0\6\12\1\u0148\4\12\1\0\1\12\4\0"+
    "\23\12\1\66\27\0\2\u0149\1\71\1\0\5\u0149\1\0"+
    "\1\u0149\4\0\1\u0149\1\0\1\u0149\1\0\1\u0149\46\0"+
    "\1\u014a\1\70\1\71\1\0\1\71\3\u014a\1\71\1\75"+
    "\1\76\55\0\13\12\1\0\1\12\4\0\22\12\1\u014b"+
    "\1\66\25\0\12\12\1\u014c\1\0\1\12\4\0\23\12"+
    "\1\66\25\0\13\12\1\0\1\12\4\0\5\12\1\u014d"+
    "\15\12\1\66\27\0\2\u014e\1\71\1\0\5\u014e\1\0"+
    "\1\u014e\4\0\1\u014e\1\0\1\u014e\1\0\1\u014e\46\0"+
    "\1\u014f\1\70\1\71\1\0\1\71\3\u014f\1\71\1\75"+
    "\1\76\55\0\13\12\1\0\1\u0150\4\0\23\12\1\66"+
    "\27\0\2\u0151\1\71\1\0\5\u0151\1\0\1\u0151\4\0"+
    "\1\u0151\1\0\1\u0151\1\0\1\u0151\46\0\1\u0152\1\70"+
    "\1\71\1\0\1\71\3\u0152\1\71\1\75\1\76\55\0"+
    "\6\12\1\u0153\4\12\1\0\1\12\4\0\23\12\1\66"+
    "\27\0\2\u0154\1\71\1\0\5\u0154\1\0\1\u0154\4\0"+
    "\1\u0154\1\0\1\u0154\1\0\1\u0154\46\0\1\u0155\1\70"+
    "\1\71\1\0\1\71\3\u0155\1\71\1\75\1\76\57\0"+
    "\2\u0156\1\71\1\0\5\u0156\1\0\1\u0156\4\0\1\u0156"+
    "\1\0\1\u0156\1\0\1\u0156\46\0\1\u0157\1\70\1\71"+
    "\1\0\1\71\3\u0157\1\71\1\75\1\76\57\0\2\u0158"+
    "\1\71\1\0\5\u0158\1\0\1\u0158\4\0\1\u0158\1\0"+
    "\1\u0158\1\0\1\u0158\46\0\1\u0159\1\70\1\71\1\0"+
    "\1\71\3\u0159\1\71\1\75\1\76\57\0\2\u015a\1\71"+
    "\1\0\5\u015a\1\0\1\u015a\4\0\1\u015a\1\0\1\u015a"+
    "\1\0\1\u015a\46\0\1\u015b\1\70\1\71\1\0\1\71"+
    "\3\u015b\1\71\1\75\1\76\57\0\2\u015c\1\71\1\0"+
    "\5\u015c\1\0\1\u015c\4\0\1\u015c\1\0\1\u015c\1\0"+
    "\1\u015c\46\0\1\u015d\1\70\1\71\1\0\1\71\3\u015d"+
    "\1\71\1\75\1\76\57\0\2\u015e\1\71\1\0\5\u015e"+
    "\1\0\1\u015e\4\0\1\u015e\1\0\1\u015e\1\0\1\u015e"+
    "\46\0\1\u015f\1\70\1\71\1\0\1\71\3\u015f\1\71"+
    "\1\75\1\76\61\0\1\71\67\0\1\u0160\1\70\1\71"+
    "\1\0\1\71\3\u0160\1\71\1\75\1\76\57\0\1\u0161"+
    "\1\70\1\71\1\0\1\71\3\u0161\1\71\1\75\1\76"+
    "\57\0\1\u0162\1\70\1\71\1\0\1\71\3\u0162\1\71"+
    "\1\75\1\76\57\0\1\u0163\1\70\1\71\1\0\1\71"+
    "\3\u0163\1\71\1\75\1\76\57\0\2\70\1\71\1\0"+
    "\1\71\3\70\1\71\1\75\1\76\47\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16530];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\14\1\2\11\14\1\10\11"+
    "\7\1\2\11\3\1\1\0\1\11\2\1\1\11\1\0"+
    "\3\1\1\0\56\1\1\11\2\0\4\1\1\0\63\1"+
    "\1\0\245\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[355];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private StateStack stack = new StateStack();

    private LexerInput input;

    public JavaScriptColoringLexer(LexerRestartInfo info) {
        this.input = info.input();

        if(info.state() != null) {
            //reset state
            setState((LexerState)info.state());
        } else {
            //initial state
            zzState = zzLexicalState = YYINITIAL;
            stack.clear();
        }
    }

    public static final class LexerState  {
        final StateStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;


        LexerState (StateStack stack, int zzState, int zzLexicalState) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                    return true;
            }

            if (obj == null || obj.getClass() != this.getClass()) {
                    return false;
            }

            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                && (this.zzState == state.zzState)
                && (this.zzLexicalState == state.zzLexicalState));
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            if (stack != null) {
                hash = 31 * hash + this.stack.hashCode();
            }
            return hash;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.createClone(), zzState, zzLexicalState);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
    }

 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaScriptColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaScriptColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1816) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JsTokenId nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      int tokenLength = 0;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
          zzInput = input.read();

          if(zzInput == LexerInput.EOF) {
              //end of input reached
              zzInput = YYEOF;
              break zzForAction;
              //notice: currently LexerInput.EOF == YYEOF
          }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 48: 
          { return JsTokenId.KEYWORD_THROW;
          }
        case 78: break;
        case 26: 
          { return JsTokenId.KEYWORD_VAR;
          }
        case 79: break;
        case 13: 
          { return JsTokenId.OPERATOR_RBRACKET;
          }
        case 80: break;
        case 9: 
          { return JsTokenId.OPERATOR_RPARAN;
          }
        case 81: break;
        case 47: 
          { return JsTokenId.RESERVED_SUPER;
          }
        case 82: break;
        case 73: 
          { return JsTokenId.RESERVED_INTERFACE;
          }
        case 83: break;
        case 28: 
          { return JsTokenId.KEYWORD_ELSE;
          }
        case 84: break;
        case 36: 
          { return JsTokenId.KEYWORD_WITH;
          }
        case 85: break;
        case 11: 
          { return JsTokenId.OPERATOR_RCURLY;
          }
        case 86: break;
        case 22: 
          { return JsTokenId.KEYWORD_FOR;
          }
        case 87: break;
        case 14: 
          { return JsTokenId.OPERATOR_SEMICOLON;
          }
        case 88: break;
        case 54: 
          { return JsTokenId.RESERVED_STATIC;
          }
        case 89: break;
        case 72: 
          { return JsTokenId.RESERVED_TRANSIENT;
          }
        case 90: break;
        case 8: 
          { return JsTokenId.OPERATOR_LPARAN;
          }
        case 91: break;
        case 31: 
          { return JsTokenId.KEYWORD_CASE;
          }
        case 92: break;
        case 71: 
          { return JsTokenId.RESERVED_VOLATILE;
          }
        case 93: break;
        case 34: 
          { return JsTokenId.KEYWORD_THIS;
          }
        case 94: break;
        case 12: 
          { return JsTokenId.OPERATOR_LBRACKET;
          }
        case 95: break;
        case 49: 
          { return JsTokenId.KEYWORD_WHILE;
          }
        case 96: break;
        case 76: 
          { return JsTokenId.RESERVED_IMPLEMENTS;
          }
        case 97: break;
        case 52: 
          { return JsTokenId.RESERVED_EXPORT;
          }
        case 98: break;
        case 57: 
          { return JsTokenId.KEYWORD_TYPEOF;
          }
        case 99: break;
        case 65: 
          { return JsTokenId.RESERVED_PRIVATE;
          }
        case 100: break;
        case 10: 
          { return JsTokenId.OPERATOR_LCURLY;
          }
        case 101: break;
        case 43: 
          { return JsTokenId.RESERVED_CLASS;
          }
        case 102: break;
        case 23: 
          { return JsTokenId.KEYWORD_TRY;
          }
        case 103: break;
        case 41: 
          { return JsTokenId.RESERVED_FINAL;
          }
        case 104: break;
        case 64: 
          { return JsTokenId.RESERVED_BOOLEAN;
          }
        case 105: break;
        case 33: 
          { return JsTokenId.KEYWORD_TRUE;
          }
        case 106: break;
        case 2: 
          { return JsTokenId.WHITESPACE;
          }
        case 107: break;
        case 61: 
          { return JsTokenId.KEYWORD_DEFAULT;
          }
        case 108: break;
        case 67: 
          { return JsTokenId.RESERVED_DEBUGGER;
          }
        case 109: break;
        case 51: 
          { return JsTokenId.RESERVED_DOUBLE;
          }
        case 110: break;
        case 42: 
          { return JsTokenId.KEYWORD_BREAK;
          }
        case 111: break;
        case 60: 
          { return JsTokenId.RESERVED_PUBLIC;
          }
        case 112: break;
        case 37: 
          { return JsTokenId.KEYWORD_VOID;
          }
        case 113: break;
        case 18: 
          { return JsTokenId.TYPE;
          }
        case 114: break;
        case 19: 
          { return JsTokenId.KEYWORD_DO;
          }
        case 115: break;
        case 27: 
          { return JsTokenId.RESERVED_LONG;
          }
        case 116: break;
        case 21: 
          { return JsTokenId.KEYWORD_IN;
          }
        case 117: break;
        case 58: 
          { return JsTokenId.RESERVED_NATIVE;
          }
        case 118: break;
        case 39: 
          { return JsTokenId.RESERVED_FLOAT;
          }
        case 119: break;
        case 70: 
          { return JsTokenId.KEYWORD_CONTINUE;
          }
        case 120: break;
        case 29: 
          { return JsTokenId.RESERVED_ENUM;
          }
        case 121: break;
        case 44: 
          { return JsTokenId.KEYWORD_CATCH;
          }
        case 122: break;
        case 32: 
          { return JsTokenId.RESERVED_CHAR;
          }
        case 123: break;
        case 63: 
          { return JsTokenId.RESERVED_EXTENDS;
          }
        case 124: break;
        case 68: 
          { return JsTokenId.KEYWORD_FUNCTION;
          }
        case 125: break;
        case 6: 
          { yybegin(STRING);
          }
        case 126: break;
        case 15: 
          { yybegin(YYINITIAL);
          }
        case 127: break;
        case 75: 
          { return JsTokenId.KEYWORD_INSTANCEOF;
          }
        case 128: break;
        case 56: 
          { return JsTokenId.RESERVED_THROWS;
          }
        case 129: break;
        case 16: 
          { yybegin(YYINITIAL);
                                     return JsTokenId.STRING;
          }
        case 130: break;
        case 4: 
          { return JsTokenId.IDENTIFIER;
          }
        case 131: break;
        case 35: 
          { return JsTokenId.KEYWORD_NULL;
          }
        case 132: break;
        case 5: 
          { return JsTokenId.NUMBER;
          }
        case 133: break;
        case 53: 
          { return JsTokenId.KEYWORD_RETURN;
          }
        case 134: break;
        case 30: 
          { return JsTokenId.RESERVED_BYTE;
          }
        case 135: break;
        case 50: 
          { return JsTokenId.KEYWORD_DELETE;
          }
        case 136: break;
        case 46: 
          { return JsTokenId.RESERVED_SHORT;
          }
        case 137: break;
        case 20: 
          { return JsTokenId.KEYWORD_IF;
          }
        case 138: break;
        case 74: 
          { return JsTokenId.RESERVED_PROTECTED;
          }
        case 139: break;
        case 25: 
          { return JsTokenId.RESERVED_INT;
          }
        case 140: break;
        case 55: 
          { return JsTokenId.KEYWORD_SWITCH;
          }
        case 141: break;
        case 66: 
          { return JsTokenId.RESERVED_PACKAGE;
          }
        case 142: break;
        case 40: 
          { return JsTokenId.KEYWORD_FALSE;
          }
        case 143: break;
        case 3: 
          { return JsTokenId.OPERATOR;
          }
        case 144: break;
        case 24: 
          { return JsTokenId.KEYWORD_NEW;
          }
        case 145: break;
        case 62: 
          { return JsTokenId.KEYWORD_FINALLY;
          }
        case 146: break;
        case 59: 
          { return JsTokenId.RESERVED_IMPORT;
          }
        case 147: break;
        case 45: 
          { return JsTokenId.RESERVED_CONST;
          }
        case 148: break;
        case 17: 
          { return JsTokenId.COMMENT;
          }
        case 149: break;
        case 77: 
          { return JsTokenId.RESERVED_SYNCHRONIZED;
          }
        case 150: break;
        case 7: 
          { yybegin(SSTRING);
          }
        case 151: break;
        case 69: 
          { return JsTokenId.RESERVED_ABSTRACT;
          }
        case 152: break;
        case 38: 
          { return JsTokenId.RESERVED_GOTO;
          }
        case 153: break;
        case 1: 
          { 
          }
        case 154: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JsTokenId.UNKNOWN_TOKEN;
    } else {
        return null;
    }
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
