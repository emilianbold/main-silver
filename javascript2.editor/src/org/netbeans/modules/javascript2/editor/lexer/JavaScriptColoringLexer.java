/* The following code was generated by JFlex 1.4.3 on 12/7/11 9:05 PM */

package org.netbeans.modules.javascript2.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/7/11 9:05 PM from the specification file
 * <tt>/home/sickboy/workspace/netbeans-web/javascript2.editor/tools/JavaScriptColoringScanner.flex</tt>
 */
public final class JavaScriptColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int SSTRING = 6;
  public static final int REGEXP = 10;
  public static final int STRINGEND = 4;
  public static final int REGEXPEND = 12;
  public static final int SSTRINGEND = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\3\1\2\1\0\1\3\1\1\16\6\4\0\1\3\1\64"+
    "\1\24\1\0\1\7\1\74\1\70\1\25\1\51\1\52\1\5\1\72"+
    "\1\60\1\23\1\21\1\4\1\10\1\16\2\15\4\17\2\11\1\67"+
    "\1\57\1\63\1\61\1\62\1\66\1\0\1\31\1\27\1\33\1\14"+
    "\1\22\1\20\1\43\1\36\1\41\1\7\1\32\1\12\1\50\1\40"+
    "\1\37\1\46\1\7\1\30\1\34\1\35\1\42\1\47\1\45\1\13"+
    "\1\44\1\7\1\55\1\26\1\56\1\73\1\7\1\0\1\31\1\27"+
    "\1\33\1\14\1\22\1\20\1\43\1\36\1\41\1\7\1\32\1\12"+
    "\1\50\1\40\1\37\1\46\1\7\1\30\1\34\1\35\1\42\1\47"+
    "\1\45\1\13\1\44\1\7\1\53\1\71\1\54\1\65\41\6\2\0"+
    "\4\7\4\0\1\7\2\0\1\6\7\0\1\7\4\0\1\7\5\0"+
    "\27\7\1\0\37\7\1\0\u013f\7\31\0\162\7\4\0\14\7\16\0"+
    "\5\7\11\0\1\7\21\0\130\6\5\0\23\6\12\0\1\7\13\0"+
    "\1\7\1\0\3\7\1\0\1\7\1\0\24\7\1\0\54\7\1\0"+
    "\46\7\1\0\5\7\4\0\202\7\1\0\4\6\3\0\105\7\1\0"+
    "\46\7\2\0\2\7\6\0\20\7\41\0\46\7\2\0\1\7\7\0"+
    "\47\7\11\0\21\6\1\0\27\6\1\0\3\6\1\0\1\6\1\0"+
    "\2\6\1\0\1\6\13\0\33\7\5\0\3\7\15\0\4\6\14\0"+
    "\6\6\13\0\32\7\5\0\13\7\16\6\7\0\12\6\4\0\2\7"+
    "\1\6\143\7\1\0\1\7\10\6\1\0\6\6\2\7\2\6\1\0"+
    "\4\6\2\7\12\6\3\7\2\0\1\7\17\0\1\6\1\7\1\6"+
    "\36\7\33\6\2\0\3\7\60\0\46\7\13\6\1\7\u014f\0\3\6"+
    "\66\7\2\0\1\6\1\7\20\6\2\0\1\7\4\6\3\0\12\7"+
    "\2\6\2\0\12\6\21\0\3\6\1\0\10\7\2\0\2\7\2\0"+
    "\26\7\1\0\7\7\1\0\1\7\3\0\4\7\2\0\1\6\1\7"+
    "\7\6\2\0\2\6\2\0\3\6\11\0\1\6\4\0\2\7\1\0"+
    "\3\7\2\6\2\0\12\6\4\7\15\0\3\6\1\0\6\7\4\0"+
    "\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0\2\7\1\0"+
    "\2\7\2\0\1\6\1\0\5\6\4\0\2\6\2\0\3\6\13\0"+
    "\4\7\1\0\1\7\7\0\14\6\3\7\14\0\3\6\1\0\11\7"+
    "\1\0\3\7\1\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7"+
    "\2\0\1\6\1\7\10\6\1\0\3\6\1\0\3\6\2\0\1\7"+
    "\17\0\2\7\2\6\2\0\12\6\1\0\1\7\17\0\3\6\1\0"+
    "\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0"+
    "\5\7\2\0\1\6\1\7\6\6\3\0\2\6\2\0\3\6\10\0"+
    "\2\6\4\0\2\7\1\0\3\7\4\0\12\6\1\0\1\7\20\0"+
    "\1\6\1\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\10\7"+
    "\1\0\3\7\4\0\5\6\3\0\3\6\1\0\4\6\11\0\1\6"+
    "\17\0\11\6\11\0\1\7\7\0\3\6\1\0\10\7\1\0\3\7"+
    "\1\0\27\7\1\0\12\7\1\0\5\7\4\0\7\6\1\0\3\6"+
    "\1\0\4\6\7\0\2\6\11\0\2\7\4\0\12\6\22\0\2\6"+
    "\1\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7"+
    "\2\0\1\6\1\7\7\6\1\0\3\6\1\0\4\6\7\0\2\6"+
    "\7\0\1\7\1\0\2\7\4\0\12\6\22\0\2\6\1\0\10\7"+
    "\1\0\3\7\1\0\27\7\1\0\20\7\4\0\6\6\2\0\3\6"+
    "\1\0\4\6\11\0\1\6\10\0\2\7\4\0\12\6\22\0\2\6"+
    "\1\0\22\7\3\0\30\7\1\0\11\7\1\0\1\7\2\0\7\7"+
    "\3\0\1\6\4\0\6\6\1\0\1\6\1\0\10\6\22\0\2\6"+
    "\15\0\60\7\1\6\2\7\7\6\4\0\10\7\10\6\1\0\12\6"+
    "\47\0\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7"+
    "\6\0\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7"+
    "\2\0\2\7\1\0\4\7\1\6\2\7\6\6\1\0\2\6\1\7"+
    "\2\0\5\7\1\0\1\7\1\0\6\6\2\0\12\6\2\0\2\7"+
    "\42\0\1\7\27\0\2\6\6\0\12\6\13\0\1\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\10\7\1\0\42\7\6\0\24\6\1\0"+
    "\2\6\4\7\4\0\10\6\1\0\44\6\11\0\1\6\71\0\42\7"+
    "\1\0\5\7\1\0\2\7\1\0\7\6\3\0\4\6\6\0\12\6"+
    "\6\0\6\7\4\6\106\0\46\7\12\0\51\7\7\0\132\7\5\0"+
    "\104\7\5\0\122\7\6\0\7\7\1\0\77\7\1\0\1\7\1\0"+
    "\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\47\7\1\0"+
    "\1\7\1\0\4\7\2\0\37\7\1\0\1\7\1\0\4\7\2\0"+
    "\7\7\1\0\1\7\1\0\4\7\2\0\7\7\1\0\7\7\1\0"+
    "\27\7\1\0\37\7\1\0\1\7\1\0\4\7\2\0\7\7\1\0"+
    "\47\7\1\0\23\7\16\0\11\6\56\0\125\7\14\0\u026c\7\2\0"+
    "\10\7\12\0\32\7\5\0\113\7\3\0\3\7\17\0\15\7\1\0"+
    "\4\7\3\6\13\0\22\7\3\6\13\0\22\7\2\6\14\0\15\7"+
    "\1\0\3\7\1\0\2\6\14\0\64\7\40\6\3\0\1\7\3\0"+
    "\2\7\1\6\2\0\12\6\41\0\3\6\2\0\12\6\6\0\130\7"+
    "\10\0\51\7\1\6\126\0\35\7\3\0\14\6\4\0\14\6\12\0"+
    "\12\6\36\7\2\0\5\7\u038b\0\154\7\224\0\234\7\4\0\132\7"+
    "\6\0\26\7\2\0\6\7\2\0\46\7\2\0\6\7\2\0\10\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\1\0\37\7\2\0\65\7"+
    "\1\0\7\7\1\0\1\7\3\0\3\7\1\0\7\7\3\0\4\7"+
    "\2\0\6\7\4\0\15\7\5\0\3\7\1\0\7\7\17\0\4\6"+
    "\32\0\5\6\20\0\2\7\23\0\1\7\13\0\4\6\6\0\6\6"+
    "\1\0\1\7\15\0\1\7\40\0\22\7\36\0\15\6\4\0\1\6"+
    "\3\0\6\6\27\0\1\7\4\0\1\7\2\0\12\7\1\0\1\7"+
    "\3\0\5\7\6\0\1\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\1\0\3\7\1\0\7\7\3\0\3\7\5\0\5\7\26\0\44\7"+
    "\u0e81\0\3\7\31\0\11\7\6\6\1\0\5\7\2\0\5\7\4\0"+
    "\126\7\2\0\2\6\2\0\3\7\1\0\137\7\5\0\50\7\4\0"+
    "\136\7\21\0\30\7\70\0\20\7\u0200\0\u19b6\7\112\0\u51a6\7\132\0"+
    "\u048d\7\u0773\0\u2ba4\7\u215c\0\u012e\7\2\0\73\7\225\0\7\7\14\0"+
    "\5\7\5\0\1\7\1\6\12\7\1\0\15\7\1\0\5\7\1\0"+
    "\1\7\1\0\2\7\1\0\2\7\1\0\154\7\41\0\u016b\7\22\0"+
    "\100\7\2\0\66\7\50\0\15\7\3\0\20\6\20\0\4\6\17\0"+
    "\2\7\30\0\3\7\31\0\1\7\6\0\5\7\1\0\207\7\2\0"+
    "\1\6\4\0\1\7\13\0\12\6\7\0\32\7\4\0\1\7\1\0"+
    "\32\7\12\0\132\7\3\0\6\7\2\0\6\7\2\0\6\7\2\0"+
    "\3\7\3\0\2\7\3\0\2\7\22\0\3\6\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\2\2\1\3\1\4\1\5\1\6\2\7"+
    "\3\6\1\10\1\6\1\11\1\12\1\13\13\6\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\1\2\40\1\41\1\1\1\42"+
    "\1\1\2\43\1\44\1\1\1\45\1\46\1\47\1\0"+
    "\1\50\1\51\3\7\1\0\3\7\1\0\2\6\1\52"+
    "\7\6\1\53\1\54\15\6\1\55\1\56\11\6\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\2\1\2\47\2\0"+
    "\4\7\1\0\1\75\4\6\1\76\20\6\1\77\3\6"+
    "\1\100\13\6\1\101\1\6\1\102\1\103\1\104\1\0"+
    "\2\7\6\6\1\105\2\6\1\106\3\6\1\107\6\6"+
    "\1\110\1\6\1\111\1\6\1\112\6\6\1\113\4\6"+
    "\1\114\1\115\2\7\3\6\1\116\4\6\1\117\1\6"+
    "\1\120\1\121\1\122\2\6\1\123\1\6\1\124\5\6"+
    "\1\125\1\126\4\6\2\7\1\127\5\6\1\130\1\131"+
    "\1\6\1\132\1\133\1\134\3\6\1\135\3\6\1\136"+
    "\2\7\1\137\1\6\1\140\1\6\1\141\5\6\1\142"+
    "\1\143\2\7\1\144\1\145\1\146\4\6\2\7\1\6"+
    "\1\147\1\6\1\150\2\7\1\151\1\152\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\5\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u01ab\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u01ab\0\u01ab"+
    "\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac"+
    "\0\u06e9\0\u0726\0\u0763\0\u01ab\0\u01ab\0\u01ab\0\u01ab\0\u01ab"+
    "\0\u01ab\0\u01ab\0\u01ab\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u01ab"+
    "\0\u01ab\0\u01ab\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5"+
    "\0\u0a02\0\u01ab\0\u01ab\0\u0a3f\0\u01ab\0\u0a7c\0\u0ab9\0\u01ab"+
    "\0\u01ab\0\u0af6\0\u01ab\0\u0b33\0\u0b70\0\u0bad\0\u01ab\0\u01ab"+
    "\0\u0bea\0\u0c27\0\u01ab\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58"+
    "\0\u0d95\0\u0dd2\0\u02dc\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03"+
    "\0\u0f40\0\u0f7d\0\u01ab\0\u01ab\0\u0fba\0\u0ff7\0\u1034\0\u1071"+
    "\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259"+
    "\0\u1296\0\u02dc\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404"+
    "\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u01ab\0\u01ab\0\u1535\0\u01ab"+
    "\0\u1572\0\u01ab\0\u01ab\0\u01ab\0\u01ab\0\u01ab\0\u01ab\0\u01ab"+
    "\0\u01ab\0\u01ab\0\u15af\0\u15ec\0\u1629\0\u01ab\0\u1666\0\u16a3"+
    "\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u02dc\0\u1811\0\u184e"+
    "\0\u188b\0\u18c8\0\u02dc\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9"+
    "\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1"+
    "\0\u1c1e\0\u1c5b\0\u1c98\0\u02dc\0\u1cd5\0\u1d12\0\u1d4f\0\u02dc"+
    "\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37"+
    "\0\u1f74\0\u1fb1\0\u1fee\0\u02dc\0\u202b\0\u01ab\0\u2068\0\u01ab"+
    "\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250"+
    "\0\u228d\0\u02dc\0\u22ca\0\u2307\0\u02dc\0\u2344\0\u2381\0\u23be"+
    "\0\u02dc\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c\0\u02dc"+
    "\0\u2569\0\u02dc\0\u25a6\0\u02dc\0\u25e3\0\u2620\0\u265d\0\u269a"+
    "\0\u26d7\0\u2714\0\u02dc\0\u2751\0\u278e\0\u27cb\0\u2808\0\u02dc"+
    "\0\u01ab\0\u2845\0\u2882\0\u28bf\0\u28fc\0\u2939\0\u02dc\0\u2976"+
    "\0\u29b3\0\u29f0\0\u2a2d\0\u02dc\0\u2a6a\0\u02dc\0\u02dc\0\u02dc"+
    "\0\u2aa7\0\u2ae4\0\u02dc\0\u2b21\0\u02dc\0\u2b5e\0\u2b9b\0\u2bd8"+
    "\0\u2c15\0\u2c52\0\u02dc\0\u02dc\0\u2c8f\0\u2ccc\0\u2d09\0\u2d46"+
    "\0\u2d83\0\u2dc0\0\u02dc\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4\0\u2ef1"+
    "\0\u02dc\0\u02dc\0\u2f2e\0\u02dc\0\u02dc\0\u02dc\0\u2f6b\0\u2fa8"+
    "\0\u2fe5\0\u02dc\0\u3022\0\u305f\0\u309c\0\u02dc\0\u30d9\0\u3116"+
    "\0\u02dc\0\u3153\0\u02dc\0\u3190\0\u02dc\0\u31cd\0\u320a\0\u3247"+
    "\0\u3284\0\u32c1\0\u02dc\0\u02dc\0\u32fe\0\u333b\0\u02dc\0\u02dc"+
    "\0\u02dc\0\u3378\0\u33b5\0\u33f2\0\u342f\0\u346c\0\u34a9\0\u34e6"+
    "\0\u02dc\0\u3523\0\u02dc\0\u3560\0\u359d\0\u02dc\0\u02dc\0\u35da"+
    "\0\u3617\0\u3654\0\u3691\0\u36ce\0\u370b\0\u3748\0\u3785\0\u37c2"+
    "\0\u37ff\0\u383c\0\u3879\0\u38b6\0\u38f3\0\u3930\0\u396d\0\u39aa"+
    "\0\u39e7\0\u3a24\0\u3a61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\10\1\16"+
    "\1\17\1\20\1\21\1\16\1\22\3\20\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\10\1\31\1\32\2\16"+
    "\1\33\1\34\1\35\2\16\1\36\1\37\2\16\1\40"+
    "\1\41\1\42\1\43\1\16\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\21\70\1\73\1\70\1\74\46\70"+
    "\24\10\1\75\50\10\1\76\1\77\1\100\22\76\1\101"+
    "\1\74\46\76\25\10\1\75\47\10\1\102\1\71\1\72"+
    "\1\102\1\103\21\102\1\10\46\102\4\10\1\104\70\10"+
    "\77\0\1\12\75\0\1\13\75\0\1\105\1\106\53\0"+
    "\1\107\74\0\1\110\21\0\13\16\1\0\1\16\4\0"+
    "\22\16\34\0\1\111\1\112\1\113\1\114\1\113\1\115"+
    "\1\116\1\115\1\113\1\117\1\120\62\0\2\20\1\113"+
    "\1\0\1\113\3\20\1\113\1\117\1\120\60\0\13\16"+
    "\1\0\1\121\4\0\22\16\32\0\13\16\1\0\1\122"+
    "\4\0\10\16\1\123\11\16\32\0\13\16\1\0\1\16"+
    "\4\0\2\16\1\124\5\16\1\125\1\16\1\126\1\127"+
    "\6\16\34\0\2\117\3\0\3\117\63\0\4\16\1\130"+
    "\1\131\5\16\1\0\1\16\4\0\11\16\1\132\10\16"+
    "\47\0\1\133\35\0\1\134\21\0\13\16\1\0\1\16"+
    "\4\0\1\16\1\135\20\16\32\0\13\16\1\0\1\136"+
    "\4\0\22\16\32\0\4\16\1\137\6\16\1\0\1\16"+
    "\4\0\2\16\1\140\5\16\1\141\11\16\32\0\13\16"+
    "\1\0\1\16\4\0\6\16\1\142\4\16\1\143\2\16"+
    "\1\144\3\16\32\0\13\16\1\0\1\16\4\0\1\16"+
    "\1\145\5\16\1\146\5\16\1\147\4\16\32\0\13\16"+
    "\1\0\1\150\4\0\13\16\1\151\6\16\32\0\12\16"+
    "\1\152\1\0\1\16\4\0\11\16\1\153\7\16\1\154"+
    "\32\0\13\16\1\0\1\16\4\0\12\16\1\155\7\16"+
    "\32\0\13\16\1\0\1\16\4\0\7\16\1\156\2\16"+
    "\1\157\7\16\32\0\13\16\1\0\1\16\4\0\1\16"+
    "\1\160\1\161\10\16\1\162\6\16\32\0\13\16\1\0"+
    "\1\16\4\0\2\16\1\163\5\16\1\164\11\16\105\0"+
    "\1\165\74\0\1\166\1\167\73\0\1\170\1\0\1\171"+
    "\72\0\1\172\74\0\1\173\6\0\1\174\65\0\1\175"+
    "\7\0\1\176\64\0\1\177\10\0\1\200\63\0\1\201"+
    "\74\0\1\202\13\0\1\70\2\0\21\70\1\0\1\70"+
    "\1\0\46\70\2\0\1\72\72\0\2\10\1\0\5\10"+
    "\1\203\4\10\2\203\1\204\55\10\1\76\2\0\22\76"+
    "\2\0\46\76\2\0\1\100\72\0\1\102\2\0\1\102"+
    "\1\0\21\102\1\0\46\102\6\0\13\104\1\0\1\104"+
    "\4\0\22\104\24\0\1\105\1\205\1\206\72\105\5\207"+
    "\1\210\67\207\10\0\1\111\1\112\1\113\1\0\1\113"+
    "\1\115\1\116\1\115\1\113\1\117\1\120\62\0\2\112"+
    "\2\0\1\113\3\112\1\113\1\117\1\120\62\0\1\211"+
    "\1\212\2\0\5\212\1\0\1\212\4\0\1\212\1\0"+
    "\1\212\1\0\1\212\51\0\1\213\1\112\1\113\1\0"+
    "\1\113\3\213\1\113\1\117\1\120\62\0\1\115\1\112"+
    "\1\113\1\0\1\113\3\115\1\113\1\117\1\120\62\0"+
    "\2\117\2\0\1\113\3\117\1\113\1\0\1\120\62\0"+
    "\2\214\3\0\3\214\3\0\1\215\46\0\1\215\10\0"+
    "\13\16\1\0\1\16\4\0\6\16\1\216\13\16\32\0"+
    "\4\16\1\217\5\16\1\220\1\0\1\16\4\0\1\221"+
    "\21\16\32\0\4\16\1\222\6\16\1\0\1\16\4\0"+
    "\22\16\32\0\13\16\1\0\1\16\4\0\1\16\1\223"+
    "\20\16\32\0\13\16\1\0\1\16\4\0\11\16\1\224"+
    "\10\16\32\0\13\16\1\0\1\16\4\0\11\16\1\225"+
    "\10\16\32\0\13\16\1\0\1\16\4\0\5\16\1\226"+
    "\14\16\32\0\13\16\1\0\1\16\4\0\6\16\1\227"+
    "\10\16\1\230\2\16\32\0\13\16\1\0\1\16\4\0"+
    "\13\16\1\231\6\16\32\0\13\16\1\0\1\232\4\0"+
    "\22\16\32\0\13\16\1\0\1\16\4\0\6\16\1\233"+
    "\13\16\32\0\13\16\1\0\1\16\4\0\2\16\1\234"+
    "\17\16\32\0\13\16\1\0\1\16\4\0\5\16\1\235"+
    "\1\236\13\16\32\0\13\16\1\0\1\16\4\0\11\16"+
    "\1\237\10\16\32\0\13\16\1\0\1\16\4\0\2\16"+
    "\1\240\17\16\32\0\13\16\1\0\1\16\4\0\17\16"+
    "\1\241\2\16\32\0\13\16\1\0\1\16\4\0\12\16"+
    "\1\242\7\16\32\0\13\16\1\0\1\16\4\0\13\16"+
    "\1\243\1\16\1\244\4\16\32\0\13\16\1\0\1\16"+
    "\4\0\1\16\1\245\10\16\1\246\7\16\32\0\13\16"+
    "\1\0\1\16\4\0\17\16\1\247\2\16\32\0\13\16"+
    "\1\0\1\16\4\0\16\16\1\250\3\16\32\0\4\16"+
    "\1\251\6\16\1\0\1\16\4\0\22\16\32\0\13\16"+
    "\1\0\1\16\4\0\5\16\1\252\1\253\13\16\32\0"+
    "\13\16\1\0\1\16\4\0\17\16\1\254\2\16\32\0"+
    "\13\16\1\0\1\255\4\0\22\16\32\0\13\16\1\0"+
    "\1\16\4\0\12\16\1\256\7\16\32\0\13\16\1\0"+
    "\1\16\4\0\6\16\1\257\13\16\32\0\13\16\1\0"+
    "\1\16\4\0\10\16\1\260\1\16\1\261\7\16\32\0"+
    "\13\16\1\0\1\16\4\0\4\16\1\262\15\16\32\0"+
    "\13\16\1\0\1\16\4\0\1\263\21\16\32\0\13\16"+
    "\1\0\1\16\4\0\1\16\1\264\20\16\32\0\13\16"+
    "\1\0\1\16\4\0\12\16\1\265\7\16\105\0\1\266"+
    "\1\267\73\0\1\270\23\0\1\204\4\0\3\204\65\0"+
    "\1\10\4\0\3\10\57\0\1\206\72\0\5\207\1\271"+
    "\67\207\4\0\1\206\1\210\77\0\1\211\1\212\1\113"+
    "\1\0\5\212\1\0\1\212\4\0\1\212\1\0\1\212"+
    "\1\0\1\212\51\0\2\272\1\113\1\0\5\272\1\0"+
    "\1\272\4\0\1\272\1\0\1\272\1\0\1\272\51\0"+
    "\1\273\1\112\1\113\1\0\1\113\3\273\1\113\1\117"+
    "\1\120\62\0\2\214\2\0\1\113\3\214\1\113\64\0"+
    "\2\214\3\0\3\214\63\0\13\16\1\0\1\274\4\0"+
    "\22\16\32\0\13\16\1\0\1\16\4\0\2\16\1\275"+
    "\17\16\32\0\13\16\1\0\1\16\4\0\13\16\1\276"+
    "\6\16\32\0\13\16\1\0\1\16\4\0\5\16\1\277"+
    "\14\16\32\0\13\16\1\0\1\16\4\0\2\16\1\300"+
    "\17\16\32\0\13\16\1\0\1\16\4\0\4\16\1\301"+
    "\15\16\32\0\13\16\1\0\1\302\4\0\22\16\32\0"+
    "\13\16\1\0\1\303\4\0\22\16\32\0\13\16\1\0"+
    "\1\16\4\0\10\16\1\304\11\16\32\0\13\16\1\0"+
    "\1\16\4\0\21\16\1\305\32\0\13\16\1\0\1\16"+
    "\4\0\2\16\1\306\17\16\32\0\13\16\1\0\1\16"+
    "\4\0\13\16\1\307\6\16\32\0\13\16\1\0\1\16"+
    "\4\0\5\16\1\310\14\16\32\0\13\16\1\0\1\311"+
    "\4\0\22\16\32\0\13\16\1\0\1\16\4\0\4\16"+
    "\1\312\15\16\32\0\13\16\1\0\1\16\4\0\5\16"+
    "\1\313\1\314\13\16\32\0\13\16\1\0\1\16\4\0"+
    "\6\16\1\315\13\16\32\0\13\16\1\0\1\316\4\0"+
    "\22\16\32\0\13\16\1\0\1\16\4\0\6\16\1\317"+
    "\13\16\32\0\13\16\1\0\1\320\4\0\22\16\32\0"+
    "\13\16\1\0\1\16\4\0\10\16\1\321\11\16\32\0"+
    "\13\16\1\0\1\16\4\0\5\16\1\322\14\16\32\0"+
    "\13\16\1\0\1\323\4\0\22\16\32\0\4\16\1\324"+
    "\6\16\1\0\1\16\4\0\22\16\32\0\13\16\1\0"+
    "\1\16\4\0\6\16\1\325\13\16\32\0\13\16\1\0"+
    "\1\326\4\0\22\16\32\0\4\16\1\327\6\16\1\0"+
    "\1\16\4\0\10\16\1\330\11\16\32\0\4\16\1\331"+
    "\6\16\1\0\1\16\4\0\22\16\32\0\4\16\1\332"+
    "\6\16\1\0\1\16\4\0\22\16\32\0\13\16\1\0"+
    "\1\16\4\0\7\16\1\333\12\16\32\0\13\16\1\0"+
    "\1\16\4\0\6\16\1\334\13\16\32\0\13\16\1\0"+
    "\1\16\4\0\20\16\1\335\1\16\32\0\13\16\1\0"+
    "\1\16\4\0\3\16\1\336\16\16\32\0\4\16\1\337"+
    "\6\16\1\0\1\16\4\0\22\16\32\0\6\16\1\340"+
    "\4\16\1\0\1\16\4\0\22\16\105\0\1\341\13\0"+
    "\4\207\1\206\1\271\67\207\10\0\2\342\1\113\1\0"+
    "\5\342\1\0\1\342\4\0\1\342\1\0\1\342\1\0"+
    "\1\342\51\0\1\343\1\112\1\113\1\0\1\113\3\343"+
    "\1\113\1\117\1\120\60\0\13\16\1\0\1\16\4\0"+
    "\6\16\1\344\13\16\32\0\13\16\1\0\1\16\4\0"+
    "\13\16\1\345\6\16\32\0\13\16\1\0\1\16\4\0"+
    "\14\16\1\346\5\16\32\0\13\16\1\0\1\347\4\0"+
    "\22\16\32\0\4\16\1\350\6\16\1\0\1\16\4\0"+
    "\22\16\32\0\13\16\1\0\1\16\4\0\6\16\1\351"+
    "\13\16\32\0\13\16\1\0\1\16\4\0\11\16\1\352"+
    "\10\16\32\0\13\16\1\0\1\16\4\0\1\16\1\353"+
    "\20\16\32\0\13\16\1\0\1\16\4\0\3\16\1\354"+
    "\16\16\32\0\13\16\1\0\1\16\4\0\1\16\1\355"+
    "\20\16\32\0\13\16\1\0\1\16\4\0\5\16\1\356"+
    "\14\16\32\0\13\16\1\0\1\16\4\0\7\16\1\357"+
    "\12\16\32\0\13\16\1\0\1\16\4\0\6\16\1\360"+
    "\13\16\32\0\13\16\1\0\1\16\4\0\12\16\1\361"+
    "\7\16\32\0\13\16\1\0\1\16\4\0\12\16\1\362"+
    "\7\16\32\0\13\16\1\0\1\16\4\0\1\16\1\363"+
    "\20\16\32\0\13\16\1\0\1\16\4\0\4\16\1\364"+
    "\15\16\32\0\13\16\1\0\1\16\4\0\16\16\1\365"+
    "\3\16\32\0\13\16\1\0\1\16\4\0\10\16\1\366"+
    "\11\16\32\0\13\16\1\0\1\16\4\0\2\16\1\367"+
    "\17\16\32\0\13\16\1\0\1\16\4\0\1\16\1\370"+
    "\20\16\32\0\13\16\1\0\1\371\4\0\22\16\32\0"+
    "\13\16\1\0\1\16\4\0\1\16\1\372\20\16\32\0"+
    "\6\16\1\373\4\16\1\0\1\16\4\0\22\16\32\0"+
    "\13\16\1\0\1\374\4\0\22\16\32\0\13\16\1\0"+
    "\1\375\4\0\22\16\32\0\13\16\1\0\1\16\4\0"+
    "\2\16\1\376\17\16\32\0\13\16\1\0\1\16\4\0"+
    "\2\16\1\377\17\16\32\0\13\16\1\0\1\16\4\0"+
    "\12\16\1\u0100\7\16\34\0\2\u0101\1\113\1\0\5\u0101"+
    "\1\0\1\u0101\4\0\1\u0101\1\0\1\u0101\1\0\1\u0101"+
    "\51\0\1\u0102\1\112\1\113\1\0\1\113\3\u0102\1\113"+
    "\1\117\1\120\60\0\13\16\1\0\1\u0103\4\0\22\16"+
    "\32\0\4\16\1\u0104\6\16\1\0\1\16\4\0\22\16"+
    "\32\0\13\16\1\0\1\16\4\0\14\16\1\u0105\5\16"+
    "\32\0\4\16\1\u0106\6\16\1\0\1\16\4\0\22\16"+
    "\32\0\13\16\1\0\1\16\4\0\12\16\1\u0107\7\16"+
    "\32\0\6\16\1\u0108\4\16\1\0\1\16\4\0\22\16"+
    "\32\0\13\16\1\0\1\16\4\0\6\16\1\u0109\13\16"+
    "\32\0\13\16\1\0\1\16\4\0\11\16\1\u010a\10\16"+
    "\32\0\13\16\1\0\1\16\4\0\11\16\1\u010b\10\16"+
    "\32\0\13\16\1\0\1\16\4\0\4\16\1\u010c\15\16"+
    "\32\0\13\16\1\0\1\16\4\0\7\16\1\u010d\12\16"+
    "\32\0\12\16\1\u010e\1\0\1\16\4\0\22\16\32\0"+
    "\13\16\1\0\1\16\4\0\11\16\1\u010f\10\16\32\0"+
    "\12\16\1\u0110\1\0\1\16\4\0\22\16\32\0\13\16"+
    "\1\0\1\16\4\0\21\16\1\u0111\32\0\13\16\1\0"+
    "\1\16\4\0\6\16\1\u0112\13\16\32\0\13\16\1\0"+
    "\1\16\4\0\4\16\1\u0113\15\16\32\0\13\16\1\0"+
    "\1\16\4\0\6\16\1\u0114\13\16\32\0\13\16\1\0"+
    "\1\16\4\0\14\16\1\u0115\5\16\32\0\13\16\1\0"+
    "\1\16\4\0\4\16\1\u0116\15\16\34\0\2\u0117\1\113"+
    "\1\0\5\u0117\1\0\1\u0117\4\0\1\u0117\1\0\1\u0117"+
    "\1\0\1\u0117\51\0\1\u0118\1\112\1\113\1\0\1\113"+
    "\3\u0118\1\113\1\117\1\120\60\0\13\16\1\0\1\16"+
    "\4\0\6\16\1\u0119\13\16\32\0\13\16\1\0\1\u011a"+
    "\4\0\22\16\32\0\13\16\1\0\1\16\4\0\15\16"+
    "\1\u011b\4\16\32\0\13\16\1\0\1\16\4\0\10\16"+
    "\1\u011c\11\16\32\0\13\16\1\0\1\16\4\0\5\16"+
    "\1\u011d\14\16\32\0\13\16\1\0\1\16\4\0\13\16"+
    "\1\u011e\6\16\32\0\13\16\1\0\1\16\4\0\4\16"+
    "\1\u011f\15\16\32\0\13\16\1\0\1\16\4\0\2\16"+
    "\1\u0120\17\16\32\0\13\16\1\0\1\u0121\4\0\22\16"+
    "\32\0\13\16\1\0\1\16\4\0\6\16\1\u0122\13\16"+
    "\32\0\13\16\1\0\1\u0123\4\0\22\16\32\0\13\16"+
    "\1\0\1\u0124\4\0\22\16\34\0\2\u0125\1\113\1\0"+
    "\5\u0125\1\0\1\u0125\4\0\1\u0125\1\0\1\u0125\1\0"+
    "\1\u0125\51\0\1\u0126\1\112\1\113\1\0\1\113\3\u0126"+
    "\1\113\1\117\1\120\60\0\13\16\1\0\1\16\4\0"+
    "\1\16\1\u0127\20\16\32\0\13\16\1\0\1\16\4\0"+
    "\11\16\1\u0128\10\16\32\0\13\16\1\0\1\u0129\4\0"+
    "\22\16\32\0\13\16\1\0\1\u012a\4\0\22\16\32\0"+
    "\13\16\1\0\1\16\4\0\4\16\1\u012b\15\16\32\0"+
    "\13\16\1\0\1\16\4\0\11\16\1\u012c\10\16\32\0"+
    "\13\16\1\0\1\u012d\4\0\22\16\34\0\2\u012e\1\113"+
    "\1\0\5\u012e\1\0\1\u012e\4\0\1\u012e\1\0\1\u012e"+
    "\1\0\1\u012e\51\0\1\u012f\1\112\1\113\1\0\1\113"+
    "\3\u012f\1\113\1\117\1\120\60\0\13\16\1\0\1\16"+
    "\4\0\10\16\1\u0130\11\16\32\0\13\16\1\0\1\u0131"+
    "\4\0\22\16\32\0\13\16\1\0\1\16\4\0\6\16"+
    "\1\u0132\13\16\32\0\6\16\1\u0133\4\16\1\0\1\16"+
    "\4\0\22\16\34\0\2\u0134\1\113\1\0\5\u0134\1\0"+
    "\1\u0134\4\0\1\u0134\1\0\1\u0134\1\0\1\u0134\51\0"+
    "\1\u0135\1\112\1\113\1\0\1\113\3\u0135\1\113\1\117"+
    "\1\120\60\0\12\16\1\u0136\1\0\1\16\4\0\22\16"+
    "\32\0\13\16\1\0\1\16\4\0\5\16\1\u0137\14\16"+
    "\34\0\2\u0138\1\113\1\0\5\u0138\1\0\1\u0138\4\0"+
    "\1\u0138\1\0\1\u0138\1\0\1\u0138\51\0\1\u0139\1\112"+
    "\1\113\1\0\1\113\3\u0139\1\113\1\117\1\120\62\0"+
    "\2\u013a\1\113\1\0\5\u013a\1\0\1\u013a\4\0\1\u013a"+
    "\1\0\1\u013a\1\0\1\u013a\51\0\1\u013b\1\112\1\113"+
    "\1\0\1\113\3\u013b\1\113\1\117\1\120\62\0\2\u013c"+
    "\1\113\1\0\5\u013c\1\0\1\u013c\4\0\1\u013c\1\0"+
    "\1\u013c\1\0\1\u013c\51\0\1\u013d\1\112\1\113\1\0"+
    "\1\113\3\u013d\1\113\1\117\1\120\62\0\2\u013e\1\113"+
    "\1\0\5\u013e\1\0\1\u013e\4\0\1\u013e\1\0\1\u013e"+
    "\1\0\1\u013e\51\0\1\u013f\1\112\1\113\1\0\1\113"+
    "\3\u013f\1\113\1\117\1\120\62\0\2\u0140\1\113\1\0"+
    "\5\u0140\1\0\1\u0140\4\0\1\u0140\1\0\1\u0140\1\0"+
    "\1\u0140\51\0\1\u0141\1\112\1\113\1\0\1\113\3\u0141"+
    "\1\113\1\117\1\120\62\0\2\u0142\1\113\1\0\5\u0142"+
    "\1\0\1\u0142\4\0\1\u0142\1\0\1\u0142\1\0\1\u0142"+
    "\51\0\1\u0143\1\112\1\113\1\0\1\113\3\u0143\1\113"+
    "\1\117\1\120\62\0\2\u0144\1\113\1\0\5\u0144\1\0"+
    "\1\u0144\4\0\1\u0144\1\0\1\u0144\1\0\1\u0144\51\0"+
    "\1\u0145\1\112\1\113\1\0\1\113\3\u0145\1\113\1\117"+
    "\1\120\62\0\2\u0146\1\113\1\0\5\u0146\1\0\1\u0146"+
    "\4\0\1\u0146\1\0\1\u0146\1\0\1\u0146\51\0\1\u0147"+
    "\1\112\1\113\1\0\1\113\3\u0147\1\113\1\117\1\120"+
    "\64\0\1\113\72\0\1\u0148\1\112\1\113\1\0\1\113"+
    "\3\u0148\1\113\1\117\1\120\62\0\1\u0149\1\112\1\113"+
    "\1\0\1\113\3\u0149\1\113\1\117\1\120\62\0\1\u014a"+
    "\1\112\1\113\1\0\1\113\3\u014a\1\113\1\117\1\120"+
    "\62\0\1\u014b\1\112\1\113\1\0\1\113\3\u014b\1\113"+
    "\1\117\1\120\62\0\2\112\1\113\1\0\1\113\3\112"+
    "\1\113\1\117\1\120\52\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15006];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\1\1\1\11\14\1\2\11\13\1\10\11"+
    "\4\1\3\11\7\1\2\11\1\1\1\11\2\1\2\11"+
    "\1\1\1\11\2\1\1\0\2\11\2\1\1\11\1\0"+
    "\3\1\1\0\12\1\2\11\30\1\2\11\1\1\1\11"+
    "\1\1\11\11\3\1\1\11\2\0\4\1\1\0\50\1"+
    "\1\11\1\1\1\11\1\0\47\1\1\11\126\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private StateStack stack = new StateStack();

    private LexerInput input;

    private boolean canFollowLiteral = true;

    public JavaScriptColoringLexer(LexerRestartInfo info) {
        this.input = info.input();

        if(info.state() != null) {
            //reset state
            setState((LexerState)info.state());
        } else {
            //initial state
            zzState = zzLexicalState = YYINITIAL;
            stack.clear();
        }
    }

    public LexerState getState() {
        if (stack.isEmpty() && zzState == YYINITIAL && zzLexicalState == YYINITIAL
                && canFollowLiteral) {
            return null;
        }
        return new LexerState(stack.createClone(), zzState, zzLexicalState, canFollowLiteral);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
        this.canFollowLiteral = state.canFollowLiteral;
    }

    public JsTokenId nextToken() throws java.io.IOException {
        JsTokenId token = yylex();
        if (token != null && !JsTokenId.UNKNOWN.equals(token)
            && !JsTokenId.WHITESPACE.equals(token)) {
            canFollowLiteral = canFollowLiteral(token);
        }
        return token;
    }

    private static boolean canFollowLiteral(JsTokenId token) {
        if ("operator".equals(token.primaryCategory())) {
            return true;
        }

        switch (token) {
            case BRACKET_LEFT_PAREN:
            case BRACKET_LEFT_BRACKET:
            case KEYWORD_RETURN:
            case KEYWORD_THROW:
            case RESERVED_YIELD:
            case EOL:
                return true;
        }
        return false;
    }

    public static final class LexerState  {
        final StateStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;
        /** can be the literal used here */
        final boolean canFollowLiteral;

        LexerState (StateStack stack, int zzState, int zzLexicalState, boolean canFollowLiteral) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.canFollowLiteral = canFollowLiteral;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final LexerState other = (LexerState) obj;
            if (this.stack != other.stack && (this.stack == null || !this.stack.equals(other.stack))) {
                return false;
            }
            if (this.zzState != other.zzState) {
                return false;
            }
            if (this.zzLexicalState != other.zzLexicalState) {
                return false;
            }
            if (this.canFollowLiteral != other.canFollowLiteral) {
                return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            int hash = 7;
            hash = 71 * hash + (this.stack != null ? this.stack.hashCode() : 0);
            hash = 71 * hash + this.zzState;
            hash = 71 * hash + this.zzLexicalState;
            hash = 71 * hash + (this.canFollowLiteral ? 1 : 0);
            return hash;
        }
    }

 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaScriptColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaScriptColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1816) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JsTokenId yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      int tokenLength = 0;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          zzInput = input.read();

          if(zzInput == LexerInput.EOF) {
              //end of input reached
              zzInput = YYEOF;
              break zzForAction;
              //notice: currently LexerInput.EOF == YYEOF
          }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 38: 
          { yybegin(YYINITIAL);
                                     return JsTokenId.REGEXP_END;
          }
        case 107: break;
        case 12: 
          { return JsTokenId.BRACKET_LEFT_PAREN;
          }
        case 108: break;
        case 24: 
          { return JsTokenId.OPERATOR_BITWISE_NOT;
          }
        case 109: break;
        case 53: 
          { return JsTokenId.OPERATOR_BITWISE_AND_ASSIGNMENT;
          }
        case 110: break;
        case 84: 
          { return JsTokenId.KEYWORD_THROW;
          }
        case 111: break;
        case 33: 
          { yypushback(1);
                                     yybegin(STRINGEND);
                                     if (tokenLength - 1 > 0) {
                                         return JsTokenId.STRING;
                                     }
          }
        case 112: break;
        case 65: 
          { return JsTokenId.KEYWORD_VAR;
          }
        case 113: break;
        case 83: 
          { return JsTokenId.RESERVED_SUPER;
          }
        case 114: break;
        case 103: 
          { return JsTokenId.RESERVED_INTERFACE;
          }
        case 115: break;
        case 41: 
          { return JsTokenId.OPERATOR_MULTIPLICATION_ASSIGNMENT;
          }
        case 116: break;
        case 23: 
          { return JsTokenId.OPERATOR_NOT;
          }
        case 117: break;
        case 11: 
          { yybegin(SSTRING);
                                    return JsTokenId.STRING_BEGIN;
          }
        case 118: break;
        case 69: 
          { return JsTokenId.KEYWORD_ELSE;
          }
        case 119: break;
        case 75: 
          { return JsTokenId.KEYWORD_WITH;
          }
        case 120: break;
        case 47: 
          { return JsTokenId.OPERATOR_EQUALS;
          }
        case 121: break;
        case 68: 
          { return JsTokenId.OPERATOR_LEFT_SHIFT_ARITHMETIC_ASSIGNMENT;
          }
        case 122: break;
        case 26: 
          { return JsTokenId.OPERATOR_COLON;
          }
        case 123: break;
        case 44: 
          { return JsTokenId.OPERATOR_MINUS_ASSIGNMENT;
          }
        case 124: break;
        case 14: 
          { return JsTokenId.BRACKET_LEFT_CURLY;
          }
        case 125: break;
        case 62: 
          { return JsTokenId.KEYWORD_FOR;
          }
        case 126: break;
        case 28: 
          { return JsTokenId.OPERATOR_BITWISE_OR;
          }
        case 127: break;
        case 61: 
          { return JsTokenId.RESERVED_LET;
          }
        case 128: break;
        case 18: 
          { return JsTokenId.OPERATOR_SEMICOLON;
          }
        case 129: break;
        case 77: 
          { return JsTokenId.OPERATOR_RIGHT_SHIFT_ASSIGNMENT;
          }
        case 130: break;
        case 51: 
          { return JsTokenId.OPERATOR_LEFT_SHIFT_ARITHMETIC;
          }
        case 131: break;
        case 90: 
          { return JsTokenId.RESERVED_STATIC;
          }
        case 132: break;
        case 71: 
          { return JsTokenId.KEYWORD_CASE;
          }
        case 133: break;
        case 25: 
          { return JsTokenId.OPERATOR_TERNARY;
          }
        case 134: break;
        case 20: 
          { return JsTokenId.OPERATOR_ASSIGNMENT;
          }
        case 135: break;
        case 73: 
          { return JsTokenId.KEYWORD_THIS;
          }
        case 136: break;
        case 86: 
          { return JsTokenId.KEYWORD_WHILE;
          }
        case 137: break;
        case 106: 
          { return JsTokenId.RESERVED_IMPLEMENTS;
          }
        case 138: break;
        case 88: 
          { return JsTokenId.RESERVED_EXPORT;
          }
        case 139: break;
        case 100: 
          { return JsTokenId.KEYWORD_DEBUGGER;
          }
        case 140: break;
        case 92: 
          { return JsTokenId.KEYWORD_TYPEOF;
          }
        case 141: break;
        case 27: 
          { return JsTokenId.OPERATOR_BITWISE_AND;
          }
        case 142: break;
        case 98: 
          { return JsTokenId.RESERVED_PRIVATE;
          }
        case 143: break;
        case 21: 
          { return JsTokenId.OPERATOR_GREATER;
          }
        case 144: break;
        case 80: 
          { return JsTokenId.RESERVED_CLASS;
          }
        case 145: break;
        case 13: 
          { return JsTokenId.BRACKET_RIGHT_PAREN;
          }
        case 146: break;
        case 63: 
          { return JsTokenId.KEYWORD_TRY;
          }
        case 147: break;
        case 37: 
          { yypushback(1);
                                     yybegin(REGEXPEND);
                                     if (tokenLength - 1 > 0) {
                                         return JsTokenId.REGEXP;
                                     }
          }
        case 148: break;
        case 59: 
          { return JsTokenId.OPERATOR_BITWISE_XOR_ASSIGNMENT;
          }
        case 149: break;
        case 19: 
          { return JsTokenId.OPERATOR_COMMA;
          }
        case 150: break;
        case 48: 
          { return JsTokenId.OPERATOR_GREATER_EQUALS;
          }
        case 151: break;
        case 52: 
          { return JsTokenId.OPERATOR_NOT_EQUALS;
          }
        case 152: break;
        case 72: 
          { return JsTokenId.KEYWORD_TRUE;
          }
        case 153: break;
        case 54: 
          { return JsTokenId.OPERATOR_AND;
          }
        case 154: break;
        case 3: 
          { return JsTokenId.WHITESPACE;
          }
        case 155: break;
        case 58: 
          { return JsTokenId.OPERATOR_INCREMENT;
          }
        case 156: break;
        case 95: 
          { return JsTokenId.KEYWORD_DEFAULT;
          }
        case 157: break;
        case 40: 
          { return JsTokenId.OPERATOR_DIVISION_ASSIGNMENT;
          }
        case 158: break;
        case 56: 
          { return JsTokenId.OPERATOR_OR;
          }
        case 159: break;
        case 79: 
          { return JsTokenId.KEYWORD_BREAK;
          }
        case 160: break;
        case 35: 
          { yypushback(1);
                                     yybegin(YYINITIAL);
                                     if (tokenLength -1 > 0) {
                                         return JsTokenId.UNKNOWN;
                                     }
          }
        case 161: break;
        case 94: 
          { return JsTokenId.RESERVED_PUBLIC;
          }
        case 162: break;
        case 76: 
          { return JsTokenId.KEYWORD_VOID;
          }
        case 163: break;
        case 15: 
          { return JsTokenId.BRACKET_RIGHT_CURLY;
          }
        case 164: break;
        case 42: 
          { return JsTokenId.KEYWORD_DO;
          }
        case 165: break;
        case 46: 
          { return JsTokenId.KEYWORD_IN;
          }
        case 166: break;
        case 22: 
          { return JsTokenId.OPERATOR_LOWER;
          }
        case 167: break;
        case 60: 
          { return JsTokenId.OPERATOR_MODULUS_ASSIGNMENT;
          }
        case 168: break;
        case 67: 
          { return JsTokenId.OPERATOR_RIGHT_SHIFT;
          }
        case 169: break;
        case 43: 
          { return JsTokenId.OPERATOR_DECREMENT;
          }
        case 170: break;
        case 102: 
          { return JsTokenId.KEYWORD_CONTINUE;
          }
        case 171: break;
        case 30: 
          { return JsTokenId.OPERATOR_BITWISE_XOR;
          }
        case 172: break;
        case 49: 
          { return JsTokenId.OPERATOR_RIGHT_SHIFT_ARITHMETIC;
          }
        case 173: break;
        case 70: 
          { return JsTokenId.RESERVED_ENUM;
          }
        case 174: break;
        case 10: 
          { yybegin(STRING);
                                    return JsTokenId.STRING_BEGIN;
          }
        case 175: break;
        case 81: 
          { return JsTokenId.KEYWORD_CATCH;
          }
        case 176: break;
        case 97: 
          { return JsTokenId.RESERVED_EXTENDS;
          }
        case 177: break;
        case 66: 
          { return JsTokenId.OPERATOR_RIGHT_SHIFT_ARITHMETIC_ASSIGNMENT;
          }
        case 178: break;
        case 34: 
          { yybegin(YYINITIAL);
                                     return JsTokenId.STRING_END;
          }
        case 179: break;
        case 101: 
          { return JsTokenId.KEYWORD_FUNCTION;
          }
        case 180: break;
        case 4: 
          { if (canFollowLiteral) {
                                       yybegin(REGEXP);
                                       return JsTokenId.REGEXP_BEGIN;
                                     } else {
                                       return JsTokenId.OPERATOR_DIVISION;
                                     }
          }
        case 181: break;
        case 29: 
          { return JsTokenId.OPERATOR_PLUS;
          }
        case 182: break;
        case 105: 
          { return JsTokenId.KEYWORD_INSTANCEOF;
          }
        case 183: break;
        case 5: 
          { return JsTokenId.OPERATOR_MULTIPLICATION;
          }
        case 184: break;
        case 6: 
          { return JsTokenId.IDENTIFIER;
          }
        case 185: break;
        case 74: 
          { return JsTokenId.KEYWORD_NULL;
          }
        case 186: break;
        case 7: 
          { return JsTokenId.NUMBER;
          }
        case 187: break;
        case 89: 
          { return JsTokenId.KEYWORD_RETURN;
          }
        case 188: break;
        case 87: 
          { return JsTokenId.KEYWORD_DELETE;
          }
        case 189: break;
        case 50: 
          { return JsTokenId.OPERATOR_LOWER_EQUALS;
          }
        case 190: break;
        case 45: 
          { return JsTokenId.KEYWORD_IF;
          }
        case 191: break;
        case 104: 
          { return JsTokenId.RESERVED_PROTECTED;
          }
        case 192: break;
        case 55: 
          { return JsTokenId.OPERATOR_BITWISE_OR_ASSIGNMENT;
          }
        case 193: break;
        case 2: 
          { return JsTokenId.EOL;
          }
        case 194: break;
        case 99: 
          { return JsTokenId.RESERVED_PACKAGE;
          }
        case 195: break;
        case 91: 
          { return JsTokenId.KEYWORD_SWITCH;
          }
        case 196: break;
        case 8: 
          { return JsTokenId.OPERATOR_DOT;
          }
        case 197: break;
        case 78: 
          { return JsTokenId.KEYWORD_FALSE;
          }
        case 198: break;
        case 96: 
          { return JsTokenId.KEYWORD_FINALLY;
          }
        case 199: break;
        case 64: 
          { return JsTokenId.KEYWORD_NEW;
          }
        case 200: break;
        case 36: 
          { yypushback(1);
                                     yybegin(SSTRINGEND);
                                     if (tokenLength - 1 > 0) {
                                         return JsTokenId.STRING;
                                     }
          }
        case 201: break;
        case 31: 
          { return JsTokenId.OPERATOR_MODULUS;
          }
        case 202: break;
        case 93: 
          { return JsTokenId.RESERVED_IMPORT;
          }
        case 203: break;
        case 16: 
          { return JsTokenId.BRACKET_LEFT_BRACKET;
          }
        case 204: break;
        case 82: 
          { return JsTokenId.RESERVED_CONST;
          }
        case 205: break;
        case 39: 
          { return JsTokenId.COMMENT;
          }
        case 206: break;
        case 17: 
          { return JsTokenId.BRACKET_RIGHT_BRACKET;
          }
        case 207: break;
        case 9: 
          { return JsTokenId.OPERATOR_MINUS;
          }
        case 208: break;
        case 57: 
          { return JsTokenId.OPERATOR_PLUS_ASSIGNMENT;
          }
        case 209: break;
        case 85: 
          { return JsTokenId.RESERVED_YIELD;
          }
        case 210: break;
        case 32: 
          { yypushback(1);
                                     yybegin(YYINITIAL);
                                     if (tokenLength - 1 > 0) {
                                         return JsTokenId.UNKNOWN;
                                     }
          }
        case 211: break;
        case 1: 
          { 
          }
        case 212: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JsTokenId.UNKNOWN;
    } else {
        return null;
    }
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
