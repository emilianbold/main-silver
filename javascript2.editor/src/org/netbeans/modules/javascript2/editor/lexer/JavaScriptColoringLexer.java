/* The following code was generated by JFlex 1.4.3 on 12/7/11 2:08 PM */

package org.netbeans.modules.javascript2.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/7/11 2:08 PM from the specification file
 * <tt>/home/sickboy/workspace/netbeans-web/javascript2.editor/tools/JavaScriptColoringScanner.flex</tt>
 */
public final class JavaScriptColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int SSTRING = 6;
  public static final int REGEXP = 10;
  public static final int STRINGEND = 4;
  public static final int REGEXPEND = 12;
  public static final int SSTRINGEND = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\3\1\2\1\0\1\3\1\1\16\6\4\0\1\3\1\65"+
    "\1\24\1\0\1\7\1\75\1\71\1\25\1\52\1\53\1\5\1\73"+
    "\1\61\1\23\1\21\1\4\1\10\1\16\2\15\4\17\2\11\1\70"+
    "\1\60\1\64\1\62\1\63\1\67\1\0\1\31\1\27\1\33\1\14"+
    "\1\22\1\20\1\47\1\36\1\41\1\7\1\32\1\12\1\50\1\40"+
    "\1\37\1\45\1\7\1\30\1\34\1\35\1\42\1\46\1\44\1\13"+
    "\1\43\1\51\1\56\1\26\1\57\1\74\1\7\1\0\1\31\1\27"+
    "\1\33\1\14\1\22\1\20\1\47\1\36\1\41\1\7\1\32\1\12"+
    "\1\50\1\40\1\37\1\45\1\7\1\30\1\34\1\35\1\42\1\46"+
    "\1\44\1\13\1\43\1\51\1\54\1\72\1\55\1\66\41\6\2\0"+
    "\4\7\4\0\1\7\2\0\1\6\7\0\1\7\4\0\1\7\5\0"+
    "\27\7\1\0\37\7\1\0\u013f\7\31\0\162\7\4\0\14\7\16\0"+
    "\5\7\11\0\1\7\21\0\130\6\5\0\23\6\12\0\1\7\13\0"+
    "\1\7\1\0\3\7\1\0\1\7\1\0\24\7\1\0\54\7\1\0"+
    "\46\7\1\0\5\7\4\0\202\7\1\0\4\6\3\0\105\7\1\0"+
    "\46\7\2\0\2\7\6\0\20\7\41\0\46\7\2\0\1\7\7\0"+
    "\47\7\11\0\21\6\1\0\27\6\1\0\3\6\1\0\1\6\1\0"+
    "\2\6\1\0\1\6\13\0\33\7\5\0\3\7\15\0\4\6\14\0"+
    "\6\6\13\0\32\7\5\0\13\7\16\6\7\0\12\6\4\0\2\7"+
    "\1\6\143\7\1\0\1\7\10\6\1\0\6\6\2\7\2\6\1\0"+
    "\4\6\2\7\12\6\3\7\2\0\1\7\17\0\1\6\1\7\1\6"+
    "\36\7\33\6\2\0\3\7\60\0\46\7\13\6\1\7\u014f\0\3\6"+
    "\66\7\2\0\1\6\1\7\20\6\2\0\1\7\4\6\3\0\12\7"+
    "\2\6\2\0\12\6\21\0\3\6\1\0\10\7\2\0\2\7\2\0"+
    "\26\7\1\0\7\7\1\0\1\7\3\0\4\7\2\0\1\6\1\7"+
    "\7\6\2\0\2\6\2\0\3\6\11\0\1\6\4\0\2\7\1\0"+
    "\3\7\2\6\2\0\12\6\4\7\15\0\3\6\1\0\6\7\4\0"+
    "\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0\2\7\1\0"+
    "\2\7\2\0\1\6\1\0\5\6\4\0\2\6\2\0\3\6\13\0"+
    "\4\7\1\0\1\7\7\0\14\6\3\7\14\0\3\6\1\0\11\7"+
    "\1\0\3\7\1\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7"+
    "\2\0\1\6\1\7\10\6\1\0\3\6\1\0\3\6\2\0\1\7"+
    "\17\0\2\7\2\6\2\0\12\6\1\0\1\7\17\0\3\6\1\0"+
    "\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0"+
    "\5\7\2\0\1\6\1\7\6\6\3\0\2\6\2\0\3\6\10\0"+
    "\2\6\4\0\2\7\1\0\3\7\4\0\12\6\1\0\1\7\20\0"+
    "\1\6\1\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\10\7"+
    "\1\0\3\7\4\0\5\6\3\0\3\6\1\0\4\6\11\0\1\6"+
    "\17\0\11\6\11\0\1\7\7\0\3\6\1\0\10\7\1\0\3\7"+
    "\1\0\27\7\1\0\12\7\1\0\5\7\4\0\7\6\1\0\3\6"+
    "\1\0\4\6\7\0\2\6\11\0\2\7\4\0\12\6\22\0\2\6"+
    "\1\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7"+
    "\2\0\1\6\1\7\7\6\1\0\3\6\1\0\4\6\7\0\2\6"+
    "\7\0\1\7\1\0\2\7\4\0\12\6\22\0\2\6\1\0\10\7"+
    "\1\0\3\7\1\0\27\7\1\0\20\7\4\0\6\6\2\0\3\6"+
    "\1\0\4\6\11\0\1\6\10\0\2\7\4\0\12\6\22\0\2\6"+
    "\1\0\22\7\3\0\30\7\1\0\11\7\1\0\1\7\2\0\7\7"+
    "\3\0\1\6\4\0\6\6\1\0\1\6\1\0\10\6\22\0\2\6"+
    "\15\0\60\7\1\6\2\7\7\6\4\0\10\7\10\6\1\0\12\6"+
    "\47\0\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7"+
    "\6\0\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7"+
    "\2\0\2\7\1\0\4\7\1\6\2\7\6\6\1\0\2\6\1\7"+
    "\2\0\5\7\1\0\1\7\1\0\6\6\2\0\12\6\2\0\2\7"+
    "\42\0\1\7\27\0\2\6\6\0\12\6\13\0\1\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\10\7\1\0\42\7\6\0\24\6\1\0"+
    "\2\6\4\7\4\0\10\6\1\0\44\6\11\0\1\6\71\0\42\7"+
    "\1\0\5\7\1\0\2\7\1\0\7\6\3\0\4\6\6\0\12\6"+
    "\6\0\6\7\4\6\106\0\46\7\12\0\51\7\7\0\132\7\5\0"+
    "\104\7\5\0\122\7\6\0\7\7\1\0\77\7\1\0\1\7\1\0"+
    "\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\47\7\1\0"+
    "\1\7\1\0\4\7\2\0\37\7\1\0\1\7\1\0\4\7\2\0"+
    "\7\7\1\0\1\7\1\0\4\7\2\0\7\7\1\0\7\7\1\0"+
    "\27\7\1\0\37\7\1\0\1\7\1\0\4\7\2\0\7\7\1\0"+
    "\47\7\1\0\23\7\16\0\11\6\56\0\125\7\14\0\u026c\7\2\0"+
    "\10\7\12\0\32\7\5\0\113\7\3\0\3\7\17\0\15\7\1\0"+
    "\4\7\3\6\13\0\22\7\3\6\13\0\22\7\2\6\14\0\15\7"+
    "\1\0\3\7\1\0\2\6\14\0\64\7\40\6\3\0\1\7\3\0"+
    "\2\7\1\6\2\0\12\6\41\0\3\6\2\0\12\6\6\0\130\7"+
    "\10\0\51\7\1\6\126\0\35\7\3\0\14\6\4\0\14\6\12\0"+
    "\12\6\36\7\2\0\5\7\u038b\0\154\7\224\0\234\7\4\0\132\7"+
    "\6\0\26\7\2\0\6\7\2\0\46\7\2\0\6\7\2\0\10\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\1\0\37\7\2\0\65\7"+
    "\1\0\7\7\1\0\1\7\3\0\3\7\1\0\7\7\3\0\4\7"+
    "\2\0\6\7\4\0\15\7\5\0\3\7\1\0\7\7\17\0\4\6"+
    "\32\0\5\6\20\0\2\7\23\0\1\7\13\0\4\6\6\0\6\6"+
    "\1\0\1\7\15\0\1\7\40\0\22\7\36\0\15\6\4\0\1\6"+
    "\3\0\6\6\27\0\1\7\4\0\1\7\2\0\12\7\1\0\1\7"+
    "\3\0\5\7\6\0\1\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\1\0\3\7\1\0\7\7\3\0\3\7\5\0\5\7\26\0\44\7"+
    "\u0e81\0\3\7\31\0\11\7\6\6\1\0\5\7\2\0\5\7\4\0"+
    "\126\7\2\0\2\6\2\0\3\7\1\0\137\7\5\0\50\7\4\0"+
    "\136\7\21\0\30\7\70\0\20\7\u0200\0\u19b6\7\112\0\u51a6\7\132\0"+
    "\u048d\7\u0773\0\u2ba4\7\u215c\0\u012e\7\2\0\73\7\225\0\7\7\14\0"+
    "\5\7\5\0\1\7\1\6\12\7\1\0\15\7\1\0\5\7\1\0"+
    "\1\7\1\0\2\7\1\0\2\7\1\0\154\7\41\0\u016b\7\22\0"+
    "\100\7\2\0\66\7\50\0\15\7\3\0\20\6\20\0\4\6\17\0"+
    "\2\7\30\0\3\7\31\0\1\7\6\0\5\7\1\0\207\7\2\0"+
    "\1\6\4\0\1\7\13\0\12\6\7\0\32\7\4\0\1\7\1\0"+
    "\32\7\12\0\132\7\3\0\6\7\2\0\6\7\2\0\6\7\2\0"+
    "\3\7\3\0\2\7\3\0\2\7\22\0\3\6\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\3\2\1\3\1\4\1\5\2\6\3\5"+
    "\1\7\1\5\1\10\1\11\1\12\15\5\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\1\2\37\1\40\1\1\1\41\1\1"+
    "\1\42\1\1\1\43\1\44\1\0\1\45\1\0\1\46"+
    "\1\47\3\6\1\0\3\6\1\0\2\5\1\50\10\5"+
    "\1\51\1\52\24\5\1\53\1\54\12\5\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\2\1\1\73\2\45\2\0"+
    "\1\73\4\6\1\0\7\5\1\74\27\5\1\75\3\5"+
    "\1\76\3\5\1\77\10\5\1\100\3\5\1\101\1\102"+
    "\1\103\2\0\2\6\1\104\10\5\1\105\2\5\1\106"+
    "\2\5\1\107\3\5\1\110\1\5\1\111\10\5\1\112"+
    "\1\5\1\113\2\5\1\114\6\5\1\115\5\5\1\116"+
    "\1\117\1\120\2\6\4\5\1\121\1\122\1\123\3\5"+
    "\1\124\3\5\1\125\1\126\1\127\2\5\1\130\1\131"+
    "\3\5\1\132\6\5\1\133\1\134\5\5\2\6\1\135"+
    "\2\5\1\136\3\5\1\137\1\5\1\140\2\5\1\141"+
    "\1\5\1\142\1\5\1\143\1\144\1\145\3\5\1\146"+
    "\3\5\1\147\1\5\2\6\1\150\1\5\1\151\1\5"+
    "\1\152\1\153\10\5\1\154\1\155\1\5\2\6\1\156"+
    "\1\157\1\160\1\161\6\5\1\162\2\6\1\5\1\163"+
    "\1\5\1\164\1\5\1\165\2\6\1\5\1\166\1\167"+
    "\1\0\1\6\1\5\1\0\1\6\1\170\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\5\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[400];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u01b2\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364"+
    "\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u01b2\0\u01b2"+
    "\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8"+
    "\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u01b2\0\u01b2\0\u01b2"+
    "\0\u01b2\0\u01b2\0\u01b2\0\u01b2\0\u01b2\0\u083c\0\u087a\0\u08b8"+
    "\0\u08f6\0\u01b2\0\u01b2\0\u01b2\0\u0934\0\u0972\0\u09b0\0\u09ee"+
    "\0\u0a2c\0\u0a6a\0\u0aa8\0\u01b2\0\u01b2\0\u0ae6\0\u01b2\0\u0b24"+
    "\0\u01b2\0\u0b62\0\u01b2\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0bde"+
    "\0\u01b2\0\u0c98\0\u0cd6\0\u01b2\0\u0d14\0\u0d52\0\u0d90\0\u0dce"+
    "\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe"+
    "\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u01b2\0\u01b2\0\u10f4\0\u1132"+
    "\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322"+
    "\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512"+
    "\0\u1550\0\u158e\0\u02e8\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4"+
    "\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u01b2\0\u01b2"+
    "\0\u1876\0\u01b2\0\u18b4\0\u01b2\0\u01b2\0\u01b2\0\u01b2\0\u01b2"+
    "\0\u01b2\0\u01b2\0\u01b2\0\u01b2\0\u18f2\0\u1930\0\u196e\0\u19ac"+
    "\0\u01b2\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e"+
    "\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e"+
    "\0\u02e8\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00"+
    "\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0"+
    "\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0"+
    "\0\u02e8\0\u231e\0\u235c\0\u239a\0\u02e8\0\u23d8\0\u2416\0\u2454"+
    "\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644"+
    "\0\u2682\0\u02e8\0\u26c0\0\u26fe\0\u273c\0\u01b2\0\u277a\0\u01b2"+
    "\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u02e8\0\u28b0\0\u28ee\0\u292c"+
    "\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u02e8\0\u2aa0\0\u2ade"+
    "\0\u02e8\0\u2b1c\0\u2b5a\0\u02e8\0\u2b98\0\u2bd6\0\u2c14\0\u02e8"+
    "\0\u2c52\0\u02e8\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6"+
    "\0\u2e04\0\u2e42\0\u02e8\0\u2e80\0\u02e8\0\u2ebe\0\u2efc\0\u02e8"+
    "\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4\0\u3032\0\u3070\0\u02e8\0\u30ae"+
    "\0\u30ec\0\u312a\0\u3168\0\u31a6\0\u02e8\0\u02e8\0\u01b2\0\u31e4"+
    "\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a\0\u02e8\0\u02e8\0\u3358"+
    "\0\u3396\0\u33d4\0\u3412\0\u02e8\0\u3450\0\u348e\0\u34cc\0\u02e8"+
    "\0\u02e8\0\u02e8\0\u350a\0\u3548\0\u02e8\0\u02e8\0\u3586\0\u35c4"+
    "\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u3738\0\u3776\0\u37b4"+
    "\0\u02e8\0\u02e8\0\u37f2\0\u3830\0\u386e\0\u38ac\0\u38ea\0\u3928"+
    "\0\u3966\0\u02e8\0\u39a4\0\u39e2\0\u02e8\0\u3a20\0\u3a5e\0\u3a9c"+
    "\0\u02e8\0\u3ada\0\u02e8\0\u3b18\0\u3b56\0\u02e8\0\u3b94\0\u02e8"+
    "\0\u3bd2\0\u02e8\0\u02e8\0\u02e8\0\u3c10\0\u3c4e\0\u3c8c\0\u02e8"+
    "\0\u3cca\0\u3d08\0\u3d46\0\u02e8\0\u3d84\0\u3dc2\0\u3e00\0\u02e8"+
    "\0\u3e3e\0\u02e8\0\u3e7c\0\u02e8\0\u02e8\0\u3eba\0\u3ef8\0\u3f36"+
    "\0\u3f74\0\u3fb2\0\u3ff0\0\u402e\0\u406c\0\u02e8\0\u02e8\0\u40aa"+
    "\0\u40e8\0\u4126\0\u02e8\0\u02e8\0\u02e8\0\u02e8\0\u4164\0\u41a2"+
    "\0\u41e0\0\u421e\0\u425c\0\u429a\0\u02e8\0\u42d8\0\u4316\0\u4354"+
    "\0\u02e8\0\u4392\0\u02e8\0\u43d0\0\u02e8\0\u440e\0\u444c\0\u448a"+
    "\0\u02e8\0\u02e8\0\u44c8\0\u4506\0\u4544\0\u4582\0\u45c0\0\u02e8"+
    "\0\u45fe\0\u463c\0\u467a\0\u46b8\0\u46f6\0\u4734\0\u4772\0\u47b0"+
    "\0\u47ee\0\u482c\0\u486a\0\u48a8\0\u48e6\0\u4924\0\u4962\0\u49a0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[400];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\10\1\16"+
    "\1\17\1\20\1\21\1\16\1\22\3\20\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\10\1\31\1\32\1\33"+
    "\1\16\1\34\1\35\1\36\2\16\1\37\1\40\1\16"+
    "\1\41\1\42\1\43\1\44\1\45\2\16\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\21\72\1\75\1\72"+
    "\1\76\47\72\24\10\1\77\51\10\1\100\1\73\1\74"+
    "\22\100\1\101\1\76\47\100\25\10\1\77\50\10\1\102"+
    "\2\10\1\102\1\103\21\102\1\10\47\102\4\10\1\104"+
    "\71\10\100\0\1\12\76\0\1\13\72\0\1\105\2\0"+
    "\1\105\1\106\1\107\20\105\1\0\33\105\1\110\13\105"+
    "\62\0\1\111\21\0\13\16\1\0\1\16\4\0\23\16"+
    "\34\0\1\112\1\113\1\114\1\115\1\114\1\116\1\117"+
    "\1\116\1\114\1\120\1\121\63\0\2\20\1\114\1\0"+
    "\1\114\3\20\1\114\1\120\1\121\61\0\13\16\1\0"+
    "\1\16\4\0\10\16\1\122\12\16\32\0\13\16\1\0"+
    "\1\123\4\0\10\16\1\124\12\16\32\0\4\16\1\125"+
    "\6\16\1\0\1\16\4\0\2\16\1\126\5\16\1\127"+
    "\1\16\1\130\1\131\7\16\34\0\2\120\3\0\3\120"+
    "\64\0\4\16\1\132\1\133\5\16\1\0\1\16\4\0"+
    "\11\16\1\134\11\16\47\0\1\135\36\0\1\136\21\0"+
    "\13\16\1\0\1\16\4\0\1\16\1\137\6\16\1\140"+
    "\3\16\1\141\6\16\32\0\13\16\1\0\1\142\4\0"+
    "\23\16\32\0\13\16\1\0\1\16\4\0\1\143\22\16"+
    "\32\0\4\16\1\144\6\16\1\0\1\16\4\0\2\16"+
    "\1\145\4\16\1\146\1\147\12\16\32\0\13\16\1\0"+
    "\1\16\4\0\6\16\1\150\1\151\3\16\1\152\1\153"+
    "\1\154\5\16\32\0\13\16\1\0\1\16\4\0\1\16"+
    "\1\155\5\16\1\156\4\16\1\157\6\16\32\0\13\16"+
    "\1\0\1\160\4\0\2\16\1\161\10\16\1\162\7\16"+
    "\32\0\12\16\1\163\1\0\1\16\4\0\11\16\1\164"+
    "\7\16\1\165\1\16\32\0\13\16\1\0\1\16\4\0"+
    "\12\16\1\166\10\16\32\0\13\16\1\0\1\16\4\0"+
    "\7\16\1\167\2\16\1\170\10\16\32\0\13\16\1\0"+
    "\1\16\4\0\1\16\1\171\1\172\10\16\1\173\7\16"+
    "\32\0\13\16\1\0\1\16\4\0\2\16\1\174\5\16"+
    "\1\175\12\16\32\0\13\16\1\0\1\16\4\0\10\16"+
    "\1\176\12\16\106\0\1\177\75\0\1\200\1\201\74\0"+
    "\1\202\1\0\1\203\73\0\1\204\75\0\1\205\6\0"+
    "\1\206\66\0\1\207\7\0\1\210\65\0\1\211\10\0"+
    "\1\212\64\0\1\213\75\0\1\214\13\0\1\72\2\0"+
    "\21\72\1\0\1\72\1\0\47\72\2\0\1\74\73\0"+
    "\2\10\1\0\5\10\1\215\4\10\2\215\1\216\56\10"+
    "\1\100\2\0\22\100\2\0\47\100\1\102\2\0\1\102"+
    "\1\0\21\102\1\0\47\102\6\0\13\104\1\0\1\104"+
    "\4\0\23\104\24\0\1\105\2\0\1\105\1\217\21\105"+
    "\1\0\47\105\1\106\1\220\1\221\73\106\1\222\2\223"+
    "\1\222\1\224\1\105\20\222\1\223\47\222\10\0\1\112"+
    "\1\113\1\114\1\0\1\114\1\116\1\117\1\116\1\114"+
    "\1\120\1\121\63\0\2\113\2\0\1\114\3\113\1\114"+
    "\1\120\1\121\63\0\1\225\1\226\2\0\5\226\1\0"+
    "\1\226\4\0\1\226\1\0\1\226\1\0\1\226\52\0"+
    "\1\227\1\113\1\114\1\0\1\114\3\227\1\114\1\120"+
    "\1\121\63\0\1\116\1\113\1\114\1\0\1\114\3\116"+
    "\1\114\1\120\1\121\63\0\2\120\2\0\1\114\3\120"+
    "\1\114\1\0\1\121\63\0\2\230\3\0\3\230\3\0"+
    "\1\231\47\0\1\231\10\0\13\16\1\0\1\16\4\0"+
    "\11\16\1\232\11\16\32\0\4\16\1\233\5\16\1\234"+
    "\1\0\1\16\4\0\1\235\22\16\32\0\13\16\1\0"+
    "\1\16\4\0\13\16\1\236\7\16\32\0\13\16\1\0"+
    "\1\16\4\0\10\16\1\237\12\16\32\0\4\16\1\240"+
    "\6\16\1\0\1\16\4\0\23\16\32\0\13\16\1\0"+
    "\1\16\4\0\1\16\1\241\21\16\32\0\13\16\1\0"+
    "\1\16\4\0\11\16\1\242\11\16\32\0\13\16\1\0"+
    "\1\16\4\0\11\16\1\243\11\16\32\0\13\16\1\0"+
    "\1\16\4\0\5\16\1\244\15\16\32\0\13\16\1\0"+
    "\1\16\4\0\6\16\1\245\7\16\1\246\4\16\32\0"+
    "\13\16\1\0\1\16\4\0\13\16\1\247\7\16\32\0"+
    "\13\16\1\0\1\250\4\0\23\16\32\0\13\16\1\0"+
    "\1\16\4\0\10\16\1\251\12\16\32\0\13\16\1\0"+
    "\1\16\4\0\6\16\1\252\14\16\32\0\13\16\1\0"+
    "\1\16\4\0\6\16\1\253\14\16\32\0\13\16\1\0"+
    "\1\16\4\0\5\16\1\254\15\16\32\0\13\16\1\0"+
    "\1\16\4\0\2\16\1\255\20\16\32\0\13\16\1\0"+
    "\1\16\4\0\5\16\1\256\1\257\14\16\32\0\13\16"+
    "\1\0\1\16\4\0\2\16\1\260\20\16\32\0\13\16"+
    "\1\0\1\16\4\0\11\16\1\261\11\16\32\0\13\16"+
    "\1\0\1\16\4\0\2\16\1\262\20\16\32\0\13\16"+
    "\1\0\1\16\4\0\10\16\1\263\12\16\32\0\13\16"+
    "\1\0\1\16\4\0\16\16\1\264\4\16\32\0\13\16"+
    "\1\0\1\16\4\0\11\16\1\265\11\16\32\0\13\16"+
    "\1\0\1\16\4\0\12\16\1\266\10\16\32\0\13\16"+
    "\1\0\1\16\4\0\2\16\1\267\10\16\1\270\1\271"+
    "\6\16\32\0\13\16\1\0\1\16\4\0\1\16\1\272"+
    "\10\16\1\273\10\16\32\0\13\16\1\0\1\16\4\0"+
    "\16\16\1\274\4\16\32\0\13\16\1\0\1\16\4\0"+
    "\15\16\1\275\5\16\32\0\13\16\1\0\1\16\4\0"+
    "\6\16\1\276\14\16\32\0\4\16\1\277\6\16\1\0"+
    "\1\16\4\0\23\16\32\0\13\16\1\0\1\16\4\0"+
    "\5\16\1\300\1\301\14\16\32\0\13\16\1\0\1\16"+
    "\4\0\16\16\1\302\4\16\32\0\13\16\1\0\1\303"+
    "\4\0\23\16\32\0\13\16\1\0\1\16\4\0\12\16"+
    "\1\304\10\16\32\0\13\16\1\0\1\16\4\0\6\16"+
    "\1\305\14\16\32\0\13\16\1\0\1\16\4\0\10\16"+
    "\1\306\1\16\1\307\10\16\32\0\13\16\1\0\1\16"+
    "\4\0\4\16\1\310\16\16\32\0\13\16\1\0\1\16"+
    "\4\0\1\311\22\16\32\0\13\16\1\0\1\16\4\0"+
    "\1\16\1\312\21\16\32\0\4\16\1\313\6\16\1\0"+
    "\1\16\4\0\12\16\1\314\10\16\32\0\13\16\1\0"+
    "\1\16\4\0\6\16\1\315\14\16\106\0\1\316\1\317"+
    "\74\0\1\320\23\0\1\216\4\0\3\216\66\0\1\10"+
    "\4\0\3\10\64\0\13\217\1\0\1\217\4\0\23\217"+
    "\26\0\1\221\73\0\1\222\2\223\1\222\1\224\1\321"+
    "\20\222\1\223\47\222\5\223\1\322\75\223\1\322\13\224"+
    "\1\223\1\224\4\223\23\224\24\223\10\0\1\225\1\226"+
    "\1\114\1\0\5\226\1\0\1\226\4\0\1\226\1\0"+
    "\1\226\1\0\1\226\52\0\2\323\1\114\1\0\5\323"+
    "\1\0\1\323\4\0\1\323\1\0\1\323\1\0\1\323"+
    "\52\0\1\324\1\113\1\114\1\0\1\114\3\324\1\114"+
    "\1\120\1\121\63\0\2\230\2\0\1\114\3\230\1\114"+
    "\65\0\2\230\3\0\3\230\64\0\13\16\1\0\1\16"+
    "\4\0\20\16\1\325\2\16\32\0\13\16\1\0\1\326"+
    "\4\0\23\16\32\0\13\16\1\0\1\16\4\0\2\16"+
    "\1\327\20\16\32\0\13\16\1\0\1\16\4\0\13\16"+
    "\1\330\7\16\32\0\13\16\1\0\1\16\4\0\1\331"+
    "\22\16\32\0\13\16\1\0\1\16\4\0\2\16\1\332"+
    "\20\16\32\0\13\16\1\0\1\16\4\0\5\16\1\333"+
    "\15\16\32\0\13\16\1\0\1\16\4\0\2\16\1\334"+
    "\20\16\32\0\13\16\1\0\1\16\4\0\4\16\1\335"+
    "\16\16\32\0\13\16\1\0\1\336\4\0\23\16\32\0"+
    "\13\16\1\0\1\337\4\0\23\16\32\0\13\16\1\0"+
    "\1\16\4\0\10\16\1\340\12\16\32\0\13\16\1\0"+
    "\1\16\4\0\21\16\1\341\1\16\32\0\13\16\1\0"+
    "\1\16\4\0\2\16\1\342\20\16\32\0\4\16\1\343"+
    "\6\16\1\0\1\16\4\0\23\16\32\0\13\16\1\0"+
    "\1\344\4\0\23\16\32\0\13\16\1\0\1\16\4\0"+
    "\13\16\1\345\7\16\32\0\13\16\1\0\1\16\4\0"+
    "\6\16\1\346\14\16\32\0\13\16\1\0\1\16\4\0"+
    "\5\16\1\347\15\16\32\0\13\16\1\0\1\350\4\0"+
    "\23\16\32\0\13\16\1\0\1\16\4\0\4\16\1\351"+
    "\16\16\32\0\13\16\1\0\1\16\4\0\1\16\1\352"+
    "\21\16\32\0\13\16\1\0\1\16\4\0\5\16\1\353"+
    "\1\354\14\16\32\0\13\16\1\0\1\16\4\0\6\16"+
    "\1\355\14\16\32\0\13\16\1\0\1\16\4\0\1\16"+
    "\1\356\21\16\32\0\13\16\1\0\1\357\4\0\23\16"+
    "\32\0\13\16\1\0\1\16\4\0\4\16\1\360\16\16"+
    "\32\0\13\16\1\0\1\16\4\0\6\16\1\361\14\16"+
    "\32\0\13\16\1\0\1\16\4\0\11\16\1\362\11\16"+
    "\32\0\13\16\1\0\1\363\4\0\23\16\32\0\13\16"+
    "\1\0\1\16\4\0\10\16\1\364\12\16\32\0\13\16"+
    "\1\0\1\16\4\0\5\16\1\365\15\16\32\0\13\16"+
    "\1\0\1\366\4\0\23\16\32\0\13\16\1\0\1\16"+
    "\4\0\12\16\1\367\10\16\32\0\4\16\1\370\6\16"+
    "\1\0\1\16\4\0\23\16\32\0\13\16\1\0\1\16"+
    "\4\0\6\16\1\371\14\16\32\0\13\16\1\0\1\372"+
    "\4\0\23\16\32\0\4\16\1\373\6\16\1\0\1\16"+
    "\4\0\10\16\1\374\12\16\32\0\4\16\1\375\6\16"+
    "\1\0\1\16\4\0\23\16\32\0\4\16\1\376\6\16"+
    "\1\0\1\16\4\0\23\16\32\0\13\16\1\0\1\16"+
    "\4\0\7\16\1\377\13\16\32\0\13\16\1\0\1\16"+
    "\4\0\6\16\1\u0100\14\16\32\0\13\16\1\0\1\16"+
    "\4\0\17\16\1\u0101\3\16\32\0\13\16\1\0\1\16"+
    "\4\0\3\16\1\u0102\17\16\32\0\4\16\1\u0103\6\16"+
    "\1\0\1\16\4\0\23\16\32\0\13\16\1\0\1\16"+
    "\4\0\2\16\1\u0104\20\16\32\0\6\16\1\u0105\4\16"+
    "\1\0\1\16\4\0\23\16\32\0\13\16\1\0\1\16"+
    "\4\0\10\16\1\u0106\12\16\106\0\1\u0107\13\0\1\222"+
    "\2\223\1\222\1\217\1\321\20\222\1\223\47\222\4\223"+
    "\1\221\1\322\70\223\10\0\2\u0108\1\114\1\0\5\u0108"+
    "\1\0\1\u0108\4\0\1\u0108\1\0\1\u0108\1\0\1\u0108"+
    "\52\0\1\u0109\1\113\1\114\1\0\1\114\3\u0109\1\114"+
    "\1\120\1\121\61\0\13\16\1\0\1\16\4\0\6\16"+
    "\1\u010a\14\16\32\0\13\16\1\0\1\16\4\0\13\16"+
    "\1\u010b\7\16\32\0\13\16\1\0\1\16\4\0\20\16"+
    "\1\u010c\2\16\32\0\4\16\1\u010d\6\16\1\0\1\16"+
    "\4\0\23\16\32\0\13\16\1\0\1\16\4\0\6\16"+
    "\1\u010e\14\16\32\0\13\16\1\0\1\u010f\4\0\23\16"+
    "\32\0\4\16\1\u0110\6\16\1\0\1\16\4\0\23\16"+
    "\32\0\13\16\1\0\1\16\4\0\6\16\1\u0111\14\16"+
    "\32\0\13\16\1\0\1\16\4\0\11\16\1\u0112\11\16"+
    "\32\0\13\16\1\0\1\16\4\0\1\16\1\u0113\21\16"+
    "\32\0\13\16\1\0\1\16\4\0\3\16\1\u0114\17\16"+
    "\32\0\13\16\1\0\1\u0115\4\0\23\16\32\0\13\16"+
    "\1\0\1\16\4\0\1\16\1\u0116\21\16\32\0\13\16"+
    "\1\0\1\16\4\0\1\16\1\u0117\21\16\32\0\13\16"+
    "\1\0\1\16\4\0\5\16\1\u0118\15\16\32\0\13\16"+
    "\1\0\1\16\4\0\7\16\1\u0119\13\16\32\0\13\16"+
    "\1\0\1\16\4\0\6\16\1\u011a\14\16\32\0\13\16"+
    "\1\0\1\16\4\0\12\16\1\u011b\10\16\32\0\13\16"+
    "\1\0\1\16\4\0\12\16\1\u011c\10\16\32\0\13\16"+
    "\1\0\1\16\4\0\6\16\1\u011d\14\16\32\0\13\16"+
    "\1\0\1\16\4\0\1\16\1\u011e\21\16\32\0\13\16"+
    "\1\0\1\16\4\0\7\16\1\u011f\13\16\32\0\13\16"+
    "\1\0\1\16\4\0\4\16\1\u0120\16\16\32\0\13\16"+
    "\1\0\1\16\4\0\5\16\1\u0121\15\16\32\0\13\16"+
    "\1\0\1\16\4\0\15\16\1\u0122\5\16\32\0\13\16"+
    "\1\0\1\16\4\0\10\16\1\u0123\12\16\32\0\13\16"+
    "\1\0\1\16\4\0\17\16\1\u0124\3\16\32\0\13\16"+
    "\1\0\1\16\4\0\2\16\1\u0125\20\16\32\0\13\16"+
    "\1\0\1\16\4\0\1\16\1\u0126\21\16\32\0\13\16"+
    "\1\0\1\u0127\4\0\23\16\32\0\13\16\1\0\1\16"+
    "\4\0\1\16\1\u0128\21\16\32\0\6\16\1\u0129\4\16"+
    "\1\0\1\16\4\0\23\16\32\0\13\16\1\0\1\u012a"+
    "\4\0\23\16\32\0\13\16\1\0\1\u012b\4\0\23\16"+
    "\32\0\13\16\1\0\1\16\4\0\2\16\1\u012c\20\16"+
    "\32\0\13\16\1\0\1\16\4\0\2\16\1\u012d\20\16"+
    "\32\0\13\16\1\0\1\16\4\0\12\16\1\u012e\10\16"+
    "\32\0\13\16\1\0\1\16\4\0\6\16\1\u012f\14\16"+
    "\34\0\2\u0130\1\114\1\0\5\u0130\1\0\1\u0130\4\0"+
    "\1\u0130\1\0\1\u0130\1\0\1\u0130\52\0\1\u0131\1\113"+
    "\1\114\1\0\1\114\3\u0131\1\114\1\120\1\121\61\0"+
    "\13\16\1\0\1\u0132\4\0\23\16\32\0\4\16\1\u0133"+
    "\6\16\1\0\1\16\4\0\23\16\32\0\13\16\1\0"+
    "\1\16\4\0\20\16\1\u0134\2\16\32\0\13\16\1\0"+
    "\1\u0135\4\0\23\16\32\0\4\16\1\u0136\6\16\1\0"+
    "\1\16\4\0\23\16\32\0\13\16\1\0\1\16\4\0"+
    "\12\16\1\u0137\10\16\32\0\6\16\1\u0138\4\16\1\0"+
    "\1\16\4\0\23\16\32\0\13\16\1\0\1\16\4\0"+
    "\6\16\1\u0139\14\16\32\0\13\16\1\0\1\16\4\0"+
    "\2\16\1\u013a\20\16\32\0\13\16\1\0\1\16\4\0"+
    "\11\16\1\u013b\11\16\32\0\13\16\1\0\1\16\4\0"+
    "\2\16\1\u013c\20\16\32\0\13\16\1\0\1\16\4\0"+
    "\11\16\1\u013d\11\16\32\0\13\16\1\0\1\16\4\0"+
    "\4\16\1\u013e\16\16\32\0\13\16\1\0\1\16\4\0"+
    "\1\16\1\u013f\21\16\32\0\13\16\1\0\1\16\4\0"+
    "\7\16\1\u0140\13\16\32\0\13\16\1\0\1\16\4\0"+
    "\12\16\1\u0141\10\16\32\0\13\16\1\0\1\16\4\0"+
    "\5\16\1\u0142\15\16\32\0\12\16\1\u0143\1\0\1\16"+
    "\4\0\23\16\32\0\13\16\1\0\1\u0144\4\0\23\16"+
    "\32\0\13\16\1\0\1\16\4\0\11\16\1\u0145\11\16"+
    "\32\0\12\16\1\u0146\1\0\1\16\4\0\23\16\32\0"+
    "\13\16\1\0\1\16\4\0\21\16\1\u0147\1\16\32\0"+
    "\13\16\1\0\1\16\4\0\6\16\1\u0148\14\16\32\0"+
    "\13\16\1\0\1\16\4\0\4\16\1\u0149\16\16\32\0"+
    "\13\16\1\0\1\16\4\0\6\16\1\u014a\14\16\32\0"+
    "\13\16\1\0\1\16\4\0\20\16\1\u014b\2\16\32\0"+
    "\13\16\1\0\1\16\4\0\4\16\1\u014c\16\16\32\0"+
    "\13\16\1\0\1\16\4\0\12\16\1\u014d\10\16\34\0"+
    "\2\u014e\1\114\1\0\5\u014e\1\0\1\u014e\4\0\1\u014e"+
    "\1\0\1\u014e\1\0\1\u014e\52\0\1\u014f\1\113\1\114"+
    "\1\0\1\114\3\u014f\1\114\1\120\1\121\61\0\13\16"+
    "\1\0\1\16\4\0\6\16\1\u0150\14\16\32\0\13\16"+
    "\1\0\1\u0151\4\0\23\16\32\0\13\16\1\0\1\16"+
    "\4\0\14\16\1\u0152\6\16\32\0\13\16\1\0\1\16"+
    "\4\0\10\16\1\u0153\12\16\32\0\13\16\1\0\1\16"+
    "\4\0\5\16\1\u0154\15\16\32\0\13\16\1\0\1\16"+
    "\4\0\11\16\1\u0155\11\16\32\0\13\16\1\0\1\16"+
    "\4\0\4\16\1\u0156\16\16\32\0\13\16\1\0\1\16"+
    "\4\0\13\16\1\u0157\7\16\32\0\13\16\1\0\1\16"+
    "\4\0\10\16\1\u0158\12\16\32\0\13\16\1\0\1\u0159"+
    "\4\0\23\16\32\0\13\16\1\0\1\16\4\0\4\16"+
    "\1\u015a\16\16\32\0\13\16\1\0\1\16\4\0\2\16"+
    "\1\u015b\20\16\32\0\13\16\1\0\1\u015c\4\0\23\16"+
    "\32\0\13\16\1\0\1\16\4\0\6\16\1\u015d\14\16"+
    "\32\0\13\16\1\0\1\u015e\4\0\23\16\32\0\13\16"+
    "\1\0\1\u015f\4\0\23\16\32\0\4\16\1\u0160\6\16"+
    "\1\0\1\16\4\0\23\16\34\0\2\u0161\1\114\1\0"+
    "\5\u0161\1\0\1\u0161\4\0\1\u0161\1\0\1\u0161\1\0"+
    "\1\u0161\52\0\1\u0162\1\113\1\114\1\0\1\114\3\u0162"+
    "\1\114\1\120\1\121\61\0\13\16\1\0\1\16\4\0"+
    "\1\16\1\u0163\21\16\32\0\13\16\1\0\1\16\4\0"+
    "\11\16\1\u0164\11\16\32\0\13\16\1\0\1\16\4\0"+
    "\6\16\1\u0165\14\16\32\0\13\16\1\0\1\u0166\4\0"+
    "\23\16\32\0\13\16\1\0\1\16\4\0\11\16\1\u0167"+
    "\11\16\32\0\13\16\1\0\1\16\4\0\11\16\1\u0168"+
    "\11\16\32\0\13\16\1\0\1\u0169\4\0\23\16\32\0"+
    "\13\16\1\0\1\16\4\0\4\16\1\u016a\16\16\32\0"+
    "\13\16\1\0\1\16\4\0\11\16\1\u016b\11\16\32\0"+
    "\13\16\1\0\1\u016c\4\0\23\16\32\0\13\16\1\0"+
    "\1\u016d\4\0\23\16\34\0\2\u016e\1\114\1\0\5\u016e"+
    "\1\0\1\u016e\4\0\1\u016e\1\0\1\u016e\1\0\1\u016e"+
    "\52\0\1\u016f\1\113\1\114\1\0\1\114\3\u016f\1\114"+
    "\1\120\1\121\61\0\13\16\1\0\1\16\4\0\12\16"+
    "\1\u0170\10\16\32\0\13\16\1\0\1\16\4\0\6\16"+
    "\1\u0171\14\16\32\0\13\16\1\0\1\16\4\0\10\16"+
    "\1\u0172\12\16\32\0\13\16\1\0\1\u0173\4\0\23\16"+
    "\32\0\13\16\1\0\1\16\4\0\6\16\1\u0174\14\16"+
    "\32\0\6\16\1\u0175\4\16\1\0\1\16\4\0\23\16"+
    "\34\0\2\u0176\1\114\1\0\5\u0176\1\0\1\u0176\4\0"+
    "\1\u0176\1\0\1\u0176\1\0\1\u0176\52\0\1\u0177\1\113"+
    "\1\114\1\0\1\114\3\u0177\1\114\1\120\1\121\61\0"+
    "\13\16\1\0\1\16\4\0\22\16\1\u0178\32\0\12\16"+
    "\1\u0179\1\0\1\16\4\0\23\16\32\0\13\16\1\0"+
    "\1\16\4\0\5\16\1\u017a\15\16\34\0\2\u017b\1\114"+
    "\1\0\5\u017b\1\0\1\u017b\4\0\1\u017b\1\0\1\u017b"+
    "\1\0\1\u017b\52\0\1\u017c\1\113\1\114\1\0\1\114"+
    "\3\u017c\1\114\1\120\1\121\61\0\13\16\1\0\1\u017d"+
    "\4\0\23\16\34\0\2\u017e\1\114\1\0\5\u017e\1\0"+
    "\1\u017e\4\0\1\u017e\1\0\1\u017e\1\0\1\u017e\52\0"+
    "\1\u017f\1\113\1\114\1\0\1\114\3\u017f\1\114\1\120"+
    "\1\121\61\0\6\16\1\u0180\4\16\1\0\1\16\4\0"+
    "\23\16\34\0\2\u0181\1\114\1\0\5\u0181\1\0\1\u0181"+
    "\4\0\1\u0181\1\0\1\u0181\1\0\1\u0181\52\0\1\u0182"+
    "\1\113\1\114\1\0\1\114\3\u0182\1\114\1\120\1\121"+
    "\63\0\2\u0183\1\114\1\0\5\u0183\1\0\1\u0183\4\0"+
    "\1\u0183\1\0\1\u0183\1\0\1\u0183\52\0\1\u0184\1\113"+
    "\1\114\1\0\1\114\3\u0184\1\114\1\120\1\121\63\0"+
    "\2\u0185\1\114\1\0\5\u0185\1\0\1\u0185\4\0\1\u0185"+
    "\1\0\1\u0185\1\0\1\u0185\52\0\1\u0186\1\113\1\114"+
    "\1\0\1\114\3\u0186\1\114\1\120\1\121\63\0\2\u0187"+
    "\1\114\1\0\5\u0187\1\0\1\u0187\4\0\1\u0187\1\0"+
    "\1\u0187\1\0\1\u0187\52\0\1\u0188\1\113\1\114\1\0"+
    "\1\114\3\u0188\1\114\1\120\1\121\63\0\2\u0189\1\114"+
    "\1\0\5\u0189\1\0\1\u0189\4\0\1\u0189\1\0\1\u0189"+
    "\1\0\1\u0189\52\0\1\u018a\1\113\1\114\1\0\1\114"+
    "\3\u018a\1\114\1\120\1\121\63\0\2\u018b\1\114\1\0"+
    "\5\u018b\1\0\1\u018b\4\0\1\u018b\1\0\1\u018b\1\0"+
    "\1\u018b\52\0\1\u018c\1\113\1\114\1\0\1\114\3\u018c"+
    "\1\114\1\120\1\121\65\0\1\114\73\0\1\u018d\1\113"+
    "\1\114\1\0\1\114\3\u018d\1\114\1\120\1\121\63\0"+
    "\1\u018e\1\113\1\114\1\0\1\114\3\u018e\1\114\1\120"+
    "\1\121\63\0\1\u018f\1\113\1\114\1\0\1\114\3\u018f"+
    "\1\114\1\120\1\121\63\0\1\u0190\1\113\1\114\1\0"+
    "\1\114\3\u0190\1\114\1\120\1\121\63\0\2\113\1\114"+
    "\1\0\1\114\3\113\1\114\1\120\1\121\53\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18910];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\1\1\1\11\14\1\2\11\15\1\10\11"+
    "\4\1\3\11\7\1\2\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\2\1\1\11\1\0\3\1\1\0\13\1\2\11\40\1"+
    "\2\11\1\1\1\11\1\1\11\11\4\1\1\11\2\0"+
    "\5\1\1\0\64\1\1\11\1\1\1\11\2\0\64\1"+
    "\1\11\163\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[400];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private StateStack stack = new StateStack();

    private LexerInput input;

    private JsTokenId lastToken;

    public JavaScriptColoringLexer(LexerRestartInfo info) {
        this.input = info.input();

        if(info.state() != null) {
            //reset state
            setState((LexerState)info.state());
        } else {
            //initial state
            zzState = zzLexicalState = YYINITIAL;
            stack.clear();
        }
    }

    public static final class LexerState  {
        final StateStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;


        LexerState (StateStack stack, int zzState, int zzLexicalState) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                    return true;
            }

            if (obj == null || obj.getClass() != this.getClass()) {
                    return false;
            }

            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                && (this.zzState == state.zzState)
                && (this.zzLexicalState == state.zzLexicalState));
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            if (stack != null) {
                hash = 31 * hash + this.stack.hashCode();
            }
            return hash;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.createClone(), zzState, zzLexicalState);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
    }

    public JsTokenId nextToken() throws java.io.IOException {
        JsTokenId token = yylex();
        if (token != null && !JsTokenId.UNKNOWN.equals(token)
            && !JsTokenId.WHITESPACE.equals(token)) {
            lastToken = token;
        }
        return token;
    }

    private boolean canFollowLiteral() {
        if (lastToken == null || "operator".equals(lastToken.primaryCategory())) {
            return true;
        }

        switch (lastToken) {
            case BRACKET_LEFT_PAREN:
            case BRACKET_LEFT_BRACKET:
            case KEYWORD_RETURN:
            case KEYWORD_THROW:
            case RESERVED_YIELD:
            //case EOL:
                return true;
        }
        return false;
    }
 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaScriptColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaScriptColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1816) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JsTokenId yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      int tokenLength = 0;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          zzInput = input.read();

          if(zzInput == LexerInput.EOF) {
              //end of input reached
              zzInput = YYEOF;
              break zzForAction;
          }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 36: 
          { yybegin(YYINITIAL);
                                     return JsTokenId.REGEXP_END;
          }
        case 121: break;
        case 11: 
          { return JsTokenId.BRACKET_LEFT_PAREN;
          }
        case 122: break;
        case 23: 
          { return JsTokenId.OPERATOR_BITWISE_NOT;
          }
        case 123: break;
        case 51: 
          { return JsTokenId.OPERATOR_BITWISE_AND_ASSIGNMENT;
          }
        case 124: break;
        case 90: 
          { return JsTokenId.KEYWORD_THROW;
          }
        case 125: break;
        case 32: 
          { yypushback(1);
                                     yybegin(STRINGEND);
                                     if (tokenLength - 1 > 0) {
                                         return JsTokenId.STRING;
                                     }
          }
        case 126: break;
        case 64: 
          { return JsTokenId.KEYWORD_VAR;
          }
        case 127: break;
        case 89: 
          { return JsTokenId.RESERVED_SUPER;
          }
        case 128: break;
        case 116: 
          { return JsTokenId.RESERVED_INTERFACE;
          }
        case 129: break;
        case 39: 
          { return JsTokenId.OPERATOR_MULTIPLICATION_ASSIGNMENT;
          }
        case 130: break;
        case 22: 
          { return JsTokenId.OPERATOR_NOT;
          }
        case 131: break;
        case 10: 
          { yybegin(SSTRING);
                                    return JsTokenId.STRING_BEGIN;
          }
        case 132: break;
        case 69: 
          { return JsTokenId.KEYWORD_ELSE;
          }
        case 133: break;
        case 77: 
          { return JsTokenId.KEYWORD_WITH;
          }
        case 134: break;
        case 45: 
          { return JsTokenId.OPERATOR_EQUALS;
          }
        case 135: break;
        case 67: 
          { return JsTokenId.OPERATOR_LEFT_SHIFT_ARITHMETIC_ASSIGNMENT;
          }
        case 136: break;
        case 25: 
          { return JsTokenId.OPERATOR_COLON;
          }
        case 137: break;
        case 42: 
          { return JsTokenId.OPERATOR_MINUS_ASSIGNMENT;
          }
        case 138: break;
        case 13: 
          { return JsTokenId.BRACKET_LEFT_CURLY;
          }
        case 139: break;
        case 60: 
          { return JsTokenId.KEYWORD_FOR;
          }
        case 140: break;
        case 27: 
          { return JsTokenId.OPERATOR_BITWISE_OR;
          }
        case 141: break;
        case 17: 
          { return JsTokenId.OPERATOR_SEMICOLON;
          }
        case 142: break;
        case 80: 
          { return JsTokenId.OPERATOR_RIGHT_SHIFT_ASSIGNMENT;
          }
        case 143: break;
        case 49: 
          { return JsTokenId.OPERATOR_LEFT_SHIFT_ARITHMETIC;
          }
        case 144: break;
        case 97: 
          { return JsTokenId.RESERVED_STATIC;
          }
        case 145: break;
        case 115: 
          { return JsTokenId.RESERVED_TRANSIENT;
          }
        case 146: break;
        case 114: 
          { return JsTokenId.RESERVED_VOLATILE;
          }
        case 147: break;
        case 72: 
          { return JsTokenId.KEYWORD_CASE;
          }
        case 148: break;
        case 24: 
          { return JsTokenId.OPERATOR_TERNARY;
          }
        case 149: break;
        case 19: 
          { return JsTokenId.OPERATOR_ASSIGNMENT;
          }
        case 150: break;
        case 75: 
          { return JsTokenId.KEYWORD_THIS;
          }
        case 151: break;
        case 92: 
          { return JsTokenId.KEYWORD_WHILE;
          }
        case 152: break;
        case 119: 
          { return JsTokenId.RESERVED_IMPLEMENTS;
          }
        case 153: break;
        case 95: 
          { return JsTokenId.RESERVED_EXPORT;
          }
        case 154: break;
        case 100: 
          { return JsTokenId.KEYWORD_TYPEOF;
          }
        case 155: break;
        case 26: 
          { return JsTokenId.OPERATOR_BITWISE_AND;
          }
        case 156: break;
        case 108: 
          { return JsTokenId.RESERVED_PRIVATE;
          }
        case 157: break;
        case 20: 
          { return JsTokenId.OPERATOR_GREATER;
          }
        case 158: break;
        case 85: 
          { return JsTokenId.RESERVED_CLASS;
          }
        case 159: break;
        case 12: 
          { return JsTokenId.BRACKET_RIGHT_PAREN;
          }
        case 160: break;
        case 61: 
          { return JsTokenId.KEYWORD_TRY;
          }
        case 161: break;
        case 35: 
          { yypushback(1);
                                     yybegin(REGEXPEND);
                                     if (tokenLength - 1 > 0) {
                                         return JsTokenId.REGEXP;
                                     }
          }
        case 162: break;
        case 57: 
          { return JsTokenId.OPERATOR_BITWISE_XOR_ASSIGNMENT;
          }
        case 163: break;
        case 18: 
          { return JsTokenId.OPERATOR_COMMA;
          }
        case 164: break;
        case 83: 
          { return JsTokenId.RESERVED_FINAL;
          }
        case 165: break;
        case 46: 
          { return JsTokenId.OPERATOR_GREATER_EQUALS;
          }
        case 166: break;
        case 107: 
          { return JsTokenId.RESERVED_BOOLEAN;
          }
        case 167: break;
        case 50: 
          { return JsTokenId.OPERATOR_NOT_EQUALS;
          }
        case 168: break;
        case 74: 
          { return JsTokenId.KEYWORD_TRUE;
          }
        case 169: break;
        case 52: 
          { return JsTokenId.OPERATOR_AND;
          }
        case 170: break;
        case 2: 
          { return JsTokenId.WHITESPACE;
          }
        case 171: break;
        case 56: 
          { return JsTokenId.OPERATOR_INCREMENT;
          }
        case 172: break;
        case 104: 
          { return JsTokenId.KEYWORD_DEFAULT;
          }
        case 173: break;
        case 38: 
          { return JsTokenId.OPERATOR_DIVISION_ASSIGNMENT;
          }
        case 174: break;
        case 110: 
          { return JsTokenId.RESERVED_DEBUGGER;
          }
        case 175: break;
        case 94: 
          { return JsTokenId.RESERVED_DOUBLE;
          }
        case 176: break;
        case 54: 
          { return JsTokenId.OPERATOR_OR;
          }
        case 177: break;
        case 84: 
          { return JsTokenId.KEYWORD_BREAK;
          }
        case 178: break;
        case 103: 
          { return JsTokenId.RESERVED_PUBLIC;
          }
        case 179: break;
        case 78: 
          { return JsTokenId.KEYWORD_VOID;
          }
        case 180: break;
        case 14: 
          { return JsTokenId.BRACKET_RIGHT_CURLY;
          }
        case 181: break;
        case 40: 
          { return JsTokenId.KEYWORD_DO;
          }
        case 182: break;
        case 68: 
          { return JsTokenId.RESERVED_LONG;
          }
        case 183: break;
        case 44: 
          { return JsTokenId.KEYWORD_IN;
          }
        case 184: break;
        case 101: 
          { return JsTokenId.RESERVED_NATIVE;
          }
        case 185: break;
        case 81: 
          { return JsTokenId.RESERVED_FLOAT;
          }
        case 186: break;
        case 21: 
          { return JsTokenId.OPERATOR_LOWER;
          }
        case 187: break;
        case 58: 
          { return JsTokenId.OPERATOR_MODULUS_ASSIGNMENT;
          }
        case 188: break;
        case 66: 
          { return JsTokenId.OPERATOR_RIGHT_SHIFT;
          }
        case 189: break;
        case 41: 
          { return JsTokenId.OPERATOR_DECREMENT;
          }
        case 190: break;
        case 113: 
          { return JsTokenId.KEYWORD_CONTINUE;
          }
        case 191: break;
        case 29: 
          { return JsTokenId.OPERATOR_BITWISE_XOR;
          }
        case 192: break;
        case 47: 
          { return JsTokenId.OPERATOR_RIGHT_SHIFT_ARITHMETIC;
          }
        case 193: break;
        case 70: 
          { return JsTokenId.RESERVED_ENUM;
          }
        case 194: break;
        case 9: 
          { yybegin(STRING);
                                    return JsTokenId.STRING_BEGIN;
          }
        case 195: break;
        case 86: 
          { return JsTokenId.KEYWORD_CATCH;
          }
        case 196: break;
        case 73: 
          { return JsTokenId.RESERVED_CHAR;
          }
        case 197: break;
        case 106: 
          { return JsTokenId.RESERVED_EXTENDS;
          }
        case 198: break;
        case 65: 
          { return JsTokenId.OPERATOR_RIGHT_SHIFT_ARITHMETIC_ASSIGNMENT;
          }
        case 199: break;
        case 33: 
          { yybegin(YYINITIAL);
                                     return JsTokenId.STRING_END;
          }
        case 200: break;
        case 111: 
          { return JsTokenId.KEYWORD_FUNCTION;
          }
        case 201: break;
        case 28: 
          { return JsTokenId.OPERATOR_PLUS;
          }
        case 202: break;
        case 31: 
          { yybegin(YYINITIAL);
          }
        case 203: break;
        case 118: 
          { return JsTokenId.KEYWORD_INSTANCEOF;
          }
        case 204: break;
        case 99: 
          { return JsTokenId.RESERVED_THROWS;
          }
        case 205: break;
        case 4: 
          { return JsTokenId.OPERATOR_MULTIPLICATION;
          }
        case 206: break;
        case 5: 
          { return JsTokenId.IDENTIFIER;
          }
        case 207: break;
        case 76: 
          { return JsTokenId.KEYWORD_NULL;
          }
        case 208: break;
        case 6: 
          { return JsTokenId.NUMBER;
          }
        case 209: break;
        case 96: 
          { return JsTokenId.KEYWORD_RETURN;
          }
        case 210: break;
        case 71: 
          { return JsTokenId.RESERVED_BYTE;
          }
        case 211: break;
        case 93: 
          { return JsTokenId.KEYWORD_DELETE;
          }
        case 212: break;
        case 88: 
          { return JsTokenId.RESERVED_SHORT;
          }
        case 213: break;
        case 48: 
          { return JsTokenId.OPERATOR_LOWER_EQUALS;
          }
        case 214: break;
        case 43: 
          { return JsTokenId.KEYWORD_IF;
          }
        case 215: break;
        case 117: 
          { return JsTokenId.RESERVED_PROTECTED;
          }
        case 216: break;
        case 53: 
          { return JsTokenId.OPERATOR_BITWISE_OR_ASSIGNMENT;
          }
        case 217: break;
        case 63: 
          { return JsTokenId.RESERVED_INT;
          }
        case 218: break;
        case 109: 
          { return JsTokenId.RESERVED_PACKAGE;
          }
        case 219: break;
        case 98: 
          { return JsTokenId.KEYWORD_SWITCH;
          }
        case 220: break;
        case 7: 
          { return JsTokenId.OPERATOR_DOT;
          }
        case 221: break;
        case 82: 
          { return JsTokenId.KEYWORD_FALSE;
          }
        case 222: break;
        case 105: 
          { return JsTokenId.KEYWORD_FINALLY;
          }
        case 223: break;
        case 62: 
          { return JsTokenId.KEYWORD_NEW;
          }
        case 224: break;
        case 34: 
          { yypushback(1);
                                     yybegin(SSTRINGEND);
                                     if (tokenLength - 1 > 0) {
                                         return JsTokenId.STRING;
                                     }
          }
        case 225: break;
        case 30: 
          { return JsTokenId.OPERATOR_MODULUS;
          }
        case 226: break;
        case 102: 
          { return JsTokenId.RESERVED_IMPORT;
          }
        case 227: break;
        case 15: 
          { return JsTokenId.BRACKET_LEFT_BRACKET;
          }
        case 228: break;
        case 87: 
          { return JsTokenId.RESERVED_CONST;
          }
        case 229: break;
        case 59: 
          { yypushback(tokenLength - 1);
                                     if (canFollowLiteral()) {
                                       yybegin(REGEXP);
                                       return JsTokenId.REGEXP_BEGIN;
                                     } else {
                                       yybegin(YYINITIAL);
                                       return JsTokenId.OPERATOR_DIVISION;
                                     }
          }
        case 230: break;
        case 37: 
          { return JsTokenId.COMMENT;
          }
        case 231: break;
        case 16: 
          { return JsTokenId.BRACKET_RIGHT_BRACKET;
          }
        case 232: break;
        case 120: 
          { return JsTokenId.RESERVED_SYNCHRONIZED;
          }
        case 233: break;
        case 3: 
          { return JsTokenId.OPERATOR_DIVISION;
          }
        case 234: break;
        case 8: 
          { return JsTokenId.OPERATOR_MINUS;
          }
        case 235: break;
        case 55: 
          { return JsTokenId.OPERATOR_PLUS_ASSIGNMENT;
          }
        case 236: break;
        case 91: 
          { return JsTokenId.RESERVED_YIELD;
          }
        case 237: break;
        case 112: 
          { return JsTokenId.RESERVED_ABSTRACT;
          }
        case 238: break;
        case 79: 
          { return JsTokenId.RESERVED_GOTO;
          }
        case 239: break;
        case 1: 
          { 
          }
        case 240: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return JsTokenId.UNKNOWN;
    } else {
        return null;
    }
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
