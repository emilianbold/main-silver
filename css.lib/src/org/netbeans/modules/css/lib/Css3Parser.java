// $ANTLR 3.3 Nov 30, 2010 12:50:56 /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g 2013-03-25 12:47:01

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2011 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2011 Sun Microsystems, Inc.
 */
package org.netbeans.modules.css.lib;
    


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.debug.*;
import java.io.IOException;
public class Css3Parser extends DebugParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NAMESPACE_SYM", "SEMI", "IDENT", "STRING", "URI", "CHARSET_SYM", "IMPORT_SYM", "COMMA", "MEDIA_SYM", "LBRACE", "RBRACE", "AND", "ONLY", "NOT", "GEN", "LPAREN", "COLON", "RPAREN", "AT_IDENT", "WS", "MOZ_DOCUMENT_SYM", "MOZ_URL_PREFIX", "MOZ_DOMAIN", "MOZ_REGEXP", "WEBKIT_KEYFRAMES_SYM", "PERCENTAGE", "PAGE_SYM", "COUNTER_STYLE_SYM", "FONT_FACE_SYM", "TOPLEFTCORNER_SYM", "TOPLEFT_SYM", "TOPCENTER_SYM", "TOPRIGHT_SYM", "TOPRIGHTCORNER_SYM", "BOTTOMLEFTCORNER_SYM", "BOTTOMLEFT_SYM", "BOTTOMCENTER_SYM", "BOTTOMRIGHT_SYM", "BOTTOMRIGHTCORNER_SYM", "LEFTTOP_SYM", "LEFTMIDDLE_SYM", "LEFTBOTTOM_SYM", "RIGHTTOP_SYM", "RIGHTMIDDLE_SYM", "RIGHTBOTTOM_SYM", "SOLIDUS", "PLUS", "GREATER", "TILDE", "MINUS", "HASH_SYMBOL", "HASH", "DOT", "LBRACKET", "DCOLON", "SASS_EXTEND_ONLY_SELECTOR", "STAR", "PIPE", "NAME", "LESS_AND", "OPEQ", "INCLUDES", "DASHMATCH", "BEGINS", "ENDS", "CONTAINS", "RBRACKET", "SASS_VAR", "IMPORTANT_SYM", "NUMBER", "LENGTH", "EMS", "REM", "EXS", "ANGLE", "TIME", "FREQ", "RESOLUTION", "DIMENSION", "NL", "COMMENT", "SASS_DEFAULT", "SASS_MIXIN", "SASS_INCLUDE", "LESS_DOTS", "LESS_REST", "LESS_WHEN", "GREATER_OR_EQ", "LESS", "LESS_OR_EQ", "SASS_EXTEND", "SASS_OPTIONAL", "SASS_DEBUG", "SASS_WARN", "SASS_IF", "SASS_ELSE", "OR", "CP_EQ", "CP_NOT_EQ", "SASS_FOR", "SASS_EACH", "SASS_WHILE", "SASS_FUNCTION", "SASS_RETURN", "SASS_CONTENT", "HEXCHAR", "NONASCII", "UNICODE", "ESCAPE", "NMSTART", "NMCHAR", "URL", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "CDO", "CDC", "INVALID", "LINE_COMMENT"
    };
    public static final int EOF=-1;
    public static final int NAMESPACE_SYM=4;
    public static final int SEMI=5;
    public static final int IDENT=6;
    public static final int STRING=7;
    public static final int URI=8;
    public static final int CHARSET_SYM=9;
    public static final int IMPORT_SYM=10;
    public static final int COMMA=11;
    public static final int MEDIA_SYM=12;
    public static final int LBRACE=13;
    public static final int RBRACE=14;
    public static final int AND=15;
    public static final int ONLY=16;
    public static final int NOT=17;
    public static final int GEN=18;
    public static final int LPAREN=19;
    public static final int COLON=20;
    public static final int RPAREN=21;
    public static final int AT_IDENT=22;
    public static final int WS=23;
    public static final int MOZ_DOCUMENT_SYM=24;
    public static final int MOZ_URL_PREFIX=25;
    public static final int MOZ_DOMAIN=26;
    public static final int MOZ_REGEXP=27;
    public static final int WEBKIT_KEYFRAMES_SYM=28;
    public static final int PERCENTAGE=29;
    public static final int PAGE_SYM=30;
    public static final int COUNTER_STYLE_SYM=31;
    public static final int FONT_FACE_SYM=32;
    public static final int TOPLEFTCORNER_SYM=33;
    public static final int TOPLEFT_SYM=34;
    public static final int TOPCENTER_SYM=35;
    public static final int TOPRIGHT_SYM=36;
    public static final int TOPRIGHTCORNER_SYM=37;
    public static final int BOTTOMLEFTCORNER_SYM=38;
    public static final int BOTTOMLEFT_SYM=39;
    public static final int BOTTOMCENTER_SYM=40;
    public static final int BOTTOMRIGHT_SYM=41;
    public static final int BOTTOMRIGHTCORNER_SYM=42;
    public static final int LEFTTOP_SYM=43;
    public static final int LEFTMIDDLE_SYM=44;
    public static final int LEFTBOTTOM_SYM=45;
    public static final int RIGHTTOP_SYM=46;
    public static final int RIGHTMIDDLE_SYM=47;
    public static final int RIGHTBOTTOM_SYM=48;
    public static final int SOLIDUS=49;
    public static final int PLUS=50;
    public static final int GREATER=51;
    public static final int TILDE=52;
    public static final int MINUS=53;
    public static final int HASH_SYMBOL=54;
    public static final int HASH=55;
    public static final int DOT=56;
    public static final int LBRACKET=57;
    public static final int DCOLON=58;
    public static final int SASS_EXTEND_ONLY_SELECTOR=59;
    public static final int STAR=60;
    public static final int PIPE=61;
    public static final int NAME=62;
    public static final int LESS_AND=63;
    public static final int OPEQ=64;
    public static final int INCLUDES=65;
    public static final int DASHMATCH=66;
    public static final int BEGINS=67;
    public static final int ENDS=68;
    public static final int CONTAINS=69;
    public static final int RBRACKET=70;
    public static final int SASS_VAR=71;
    public static final int IMPORTANT_SYM=72;
    public static final int NUMBER=73;
    public static final int LENGTH=74;
    public static final int EMS=75;
    public static final int REM=76;
    public static final int EXS=77;
    public static final int ANGLE=78;
    public static final int TIME=79;
    public static final int FREQ=80;
    public static final int RESOLUTION=81;
    public static final int DIMENSION=82;
    public static final int NL=83;
    public static final int COMMENT=84;
    public static final int SASS_DEFAULT=85;
    public static final int SASS_MIXIN=86;
    public static final int SASS_INCLUDE=87;
    public static final int LESS_DOTS=88;
    public static final int LESS_REST=89;
    public static final int LESS_WHEN=90;
    public static final int GREATER_OR_EQ=91;
    public static final int LESS=92;
    public static final int LESS_OR_EQ=93;
    public static final int SASS_EXTEND=94;
    public static final int SASS_OPTIONAL=95;
    public static final int SASS_DEBUG=96;
    public static final int SASS_WARN=97;
    public static final int SASS_IF=98;
    public static final int SASS_ELSE=99;
    public static final int OR=100;
    public static final int CP_EQ=101;
    public static final int CP_NOT_EQ=102;
    public static final int SASS_FOR=103;
    public static final int SASS_EACH=104;
    public static final int SASS_WHILE=105;
    public static final int SASS_FUNCTION=106;
    public static final int SASS_RETURN=107;
    public static final int SASS_CONTENT=108;
    public static final int HEXCHAR=109;
    public static final int NONASCII=110;
    public static final int UNICODE=111;
    public static final int ESCAPE=112;
    public static final int NMSTART=113;
    public static final int NMCHAR=114;
    public static final int URL=115;
    public static final int A=116;
    public static final int B=117;
    public static final int C=118;
    public static final int D=119;
    public static final int E=120;
    public static final int F=121;
    public static final int G=122;
    public static final int H=123;
    public static final int I=124;
    public static final int J=125;
    public static final int K=126;
    public static final int L=127;
    public static final int M=128;
    public static final int N=129;
    public static final int O=130;
    public static final int P=131;
    public static final int Q=132;
    public static final int R=133;
    public static final int S=134;
    public static final int T=135;
    public static final int U=136;
    public static final int V=137;
    public static final int W=138;
    public static final int X=139;
    public static final int Y=140;
    public static final int Z=141;
    public static final int CDO=142;
    public static final int CDC=143;
    public static final int INVALID=144;
    public static final int LINE_COMMENT=145;

    // delegates
    // delegators

    public static final String[] ruleNames = new String[] {
        "invalidRule", "sass_debug", "generic_at_rule", "mediaFeature", 
        "synpred21_Css3", "sass_function_return", "syncTo_SEMI", "media", 
        "cp_full_expression", "importItem", "sass_else", "synpred5_Css3", 
        "sass_selector_interpolation_expression", "synpred19_Css3", "unaryOperator", 
        "margin_sym", "mediaExpression", "cp_mixin_call_arg", "synpred30_Css3", 
        "slAttributeValue", "synpred22_Css3", "synpred32_Css3", "synpred18_Css3", 
        "cssId", "simpleSelectorSequence", "pseudo", "expression", "selectorsGroup", 
        "webkitKeyframesBlock", "synpred13_Css3", "cp_mixin_declaration", 
        "synpred28_Css3", "page", "synpred24_Css3", "namespacePrefixName", 
        "synpred6_Css3", "synpred12_Css3", "sass_declaration_property_value_interpolation_expression", 
        "bodyItem", "sass_if", "sass_extend", "sass_for", "sass_interpolation_expression_var", 
        "synpred1_Css3", "less_function_in_condition", "synpred29_Css3", 
        "hexColor", "sass_extend_only_selector", "moz_document_function", 
        "webkitKeyframeSelectors", "propertyValue", "cp_expression_list", 
        "vendorAtRule", "cp_variable", "synpred17_Css3", "body", "cp_full_expression_atom", 
        "synpred14_Css3", "mediaQuery", "mediaType", "pseudoPage", "moz_document", 
        "expressionPredicate", "declaration", "webkitKeyframes", "styleSheet", 
        "cp_additionExp", "cp_mixin_call", "synpred31_Css3", "synpred2_Css3", 
        "synpred26_Css3", "elementSubsequent", "namespacePrefix", "charSet", 
        "sass_declaration_interpolation_expression", "synpred4_Css3", "namespace", 
        "cp_mixin_call_args", "synpred23_Css3", "sass_function_declaration", 
        "fnAttributeValue", "synpred16_Css3", "cp_multiplyExp", "syncTo_RBRACE", 
        "fnAttributeName", "mediaQueryList", "cp_mixin_name", "term", "cp_args_list", 
        "synpred15_Css3", "cp_expression", "sass_while", "mediaQueryOperator", 
        "sass_mq_interpolation_expression", "cp_propertyValue", "sass_function_name", 
        "counterStyle", "syncToFollow", "slAttribute", "prio", "cp_term", 
        "synpred9_Css3", "less_condition", "cp_full_expression_operator", 
        "synpred8_Css3", "slAttributeName", "functionName", "ws", "synpred3_Css3", 
        "margin", "imports", "cp_arg", "resourceIdentifier", "synpred20_Css3", 
        "charSetValue", "function", "cssClass", "cp_variable_declaration", 
        "synpred25_Css3", "elementName", "sass_control_expression", "combinator", 
        "cp_atomExp", "esPred", "sass_content", "less_condition_operator", 
        "sass_nested_properties", "less_fn_name", "rule", "sass_control", 
        "sass_each", "synpred27_Css3", "less_mixin_guarded", "sass_each_list", 
        "synpred11_Css3", "property", "operator", "fnAttribute", "declarations", 
        "synpred10_Css3", "synpred7_Css3", "syncToDeclarationsRule", "atRuleId", 
        "typeSelector", "selector", "fontFace", "sass_control_block", "namespaces"
    };
    public static final boolean[] decisionCanBacktrack = new boolean[] {
        false, // invalid decision
        false, false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, true, false, false, 
            false, false, false, false, false, false, false, false, false, 
            true, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, true, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, true, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, true, false, false, false, false, true, false, 
            false, true, false, true, false, true, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, true, false, 
            false, false, false, false, false, false, true, false, false, 
            false, false, false, false, true, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, true, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, true, false, true, false, false, false, false, false, 
            false, false, false, false, true, false, true, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, true, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false
    };

     
        public int ruleLevel = 0;
        public int getRuleLevel() { return ruleLevel; }
        public void incRuleLevel() { ruleLevel++; }
        public void decRuleLevel() { ruleLevel--; }
        public Css3Parser(TokenStream input) {
            this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT, new RecognizerSharedState());
        }
        public Css3Parser(TokenStream input, int port, RecognizerSharedState state) {
            super(input, state);
            DebugEventSocketProxy proxy =
                new DebugEventSocketProxy(this, port, null);
            setDebugListener(proxy);
            try {
                proxy.handshake();
            }
            catch (IOException ioe) {
                reportError(ioe);
            }
        }
    public Css3Parser(TokenStream input, DebugEventListener dbg) {
        super(input, dbg, new RecognizerSharedState());

    }
    protected boolean evalPredicate(boolean result, String predicate) {
        dbg.semanticPredicate(result, predicate);
        return result;
    }


    public String[] getTokenNames() { return Css3Parser.tokenNames; }
    public String getGrammarFileName() { return "/Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g"; }



        protected boolean isLessSource() {
            return false;
        }
        
        protected boolean isScssSource() {
            return false;
        }
        
        private boolean isCssPreprocessorSource() {
            return isLessSource() || isScssSource();
        }
        
    /**
         * Use the current stacked followset to work out the valid tokens that
         * can follow on from the current point in the parse, then recover by
         * eating tokens that are not a member of the follow set we compute.
         *
         * This method is used whenever we wish to force a sync, even though
         * the parser has not yet checked LA(1) for alt selection. This is useful
         * in situations where only a subset of tokens can begin a new construct
         * (such as the start of a new statement in a block) and we want to
         * proactively detect garbage so that the current rule does not exit on
         * on an exception.
         *
         * We could override recover() to make this the default behavior but that
         * is too much like using a sledge hammer to crack a nut. We want finer
         * grained control of the recovery and error mechanisms.
         */
        protected void syncToSet()
        {
            // Compute the followset that is in context wherever we are in the
            // rule chain/stack
            //
             BitSet follow = state.following[state._fsp]; //computeContextSensitiveRuleFOLLOW();

             syncToSet(follow);
        }

        protected void syncToSet(BitSet follow)
        {
            int mark = -1;

            //create error-recovery node
            dbg.enterRule(getGrammarFileName(), "recovery");

            try {

                mark = input.mark();

                // Consume all tokens in the stream until we find a member of the follow
                // set, which means the next production should be guaranteed to be happy.
                //
                while (! follow.member(input.LA(1)) ) {

                    if  (input.LA(1) == Token.EOF) {

                        // Looks like we didn't find anything at all that can help us here
                        // so we need to rewind to where we were and let normal error handling
                        // bail out.
                        //
                        input.rewind();
                        mark = -1;
                        return;
                    }
                    input.consume();

                    // Now here, because you are consuming some tokens, yu will probably want
                    // to raise an error message such as "Spurious elements after the class member were discarded"
                    // using whatever your override of displayRecognitionError() routine does to record
                    // error messages. The exact error my depend on context etc.
                    //
                }
            } catch (Exception e) {

              // Just ignore any errors here, we will just let the recognizer
              // try to resync as normal - something must be very screwed.
              //
            }
            finally {
                dbg.exitRule(getGrammarFileName(), "recovery");

                // Always release the mark we took
                //
                if  (mark != -1) {
                    input.release(mark);
                }
            }
        }
        
        /**
             * synces to next RBRACE "}" taking nesting into account
             */
            protected void syncToRBRACE(int nest)
                {
                    
                    int mark = -1;
                    //create error-recovery node
                    //dbg.enterRule(getGrammarFileName(), "recovery");

                    try {
                        mark = input.mark();
                        for(;;) {
                            //read char
                            int c = input.LA(1);
                            
                            switch(c) {
                                case Token.EOF:
                                    input.rewind();
                                    mark = -1;
                                    return ;
                                case Css3Lexer.LBRACE:
                                    nest++;
                                    break;
                                case Css3Lexer.RBRACE:
                                    nest--;
                                    if(nest == 0) {
                                        //do not eat the final RBRACE
                                        return ;
                                    }
                            }
                            
                            input.consume();
                                                
                        }

                    } catch (Exception e) {

                      // Just ignore any errors here, we will just let the recognizer
                      // try to resync as normal - something must be very screwed.
                      //
                    }
                    finally {
                        if  (mark != -1) {
                            input.release(mark);
                        }
                        //dbg.exitRule(getGrammarFileName(), "recovery");
                    }
                }
        



    // $ANTLR start "styleSheet"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:317:1: styleSheet : ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF ;
    public final void styleSheet() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "styleSheet");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(317, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:318:5: ( ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:319:6: ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF
            {
            dbg.location(319,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:319:6: ( ws )?
            int alt1=2;
            try { dbg.enterSubRule(1);
            try { dbg.enterDecision(1, decisionCanBacktrack[1]);

            int LA1_0 = input.LA(1);

            if ( (LA1_0==WS||(LA1_0>=NL && LA1_0<=COMMENT)) ) {
                alt1=1;
            }
            } finally {dbg.exitDecision(1);}

            switch (alt1) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:319:6: ws
                    {
                    dbg.location(319,6);
                    pushFollow(FOLLOW_ws_in_styleSheet125);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(1);}

            dbg.location(320,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:320:6: ( charSet ( ws )? )?
            int alt3=2;
            try { dbg.enterSubRule(3);
            try { dbg.enterDecision(3, decisionCanBacktrack[3]);

            int LA3_0 = input.LA(1);

            if ( (LA3_0==CHARSET_SYM) ) {
                alt3=1;
            }
            } finally {dbg.exitDecision(3);}

            switch (alt3) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:320:8: charSet ( ws )?
                    {
                    dbg.location(320,8);
                    pushFollow(FOLLOW_charSet_in_styleSheet135);
                    charSet();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(320,16);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:320:16: ( ws )?
                    int alt2=2;
                    try { dbg.enterSubRule(2);
                    try { dbg.enterDecision(2, decisionCanBacktrack[2]);

                    int LA2_0 = input.LA(1);

                    if ( (LA2_0==WS||(LA2_0>=NL && LA2_0<=COMMENT)) ) {
                        alt2=1;
                    }
                    } finally {dbg.exitDecision(2);}

                    switch (alt2) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:320:16: ws
                            {
                            dbg.location(320,16);
                            pushFollow(FOLLOW_ws_in_styleSheet137);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(2);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(3);}

            dbg.location(321,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:321:9: ( imports )?
            int alt4=2;
            try { dbg.enterSubRule(4);
            try { dbg.enterDecision(4, decisionCanBacktrack[4]);

            try {
                isCyclicDecision = true;
                alt4 = dfa4.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(4);}

            switch (alt4) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:321:9: imports
                    {
                    dbg.location(321,9);
                    pushFollow(FOLLOW_imports_in_styleSheet151);
                    imports();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(4);}

            dbg.location(322,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:322:9: ( namespaces )?
            int alt5=2;
            try { dbg.enterSubRule(5);
            try { dbg.enterDecision(5, decisionCanBacktrack[5]);

            int LA5_0 = input.LA(1);

            if ( (LA5_0==NAMESPACE_SYM) ) {
                alt5=1;
            }
            } finally {dbg.exitDecision(5);}

            switch (alt5) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:322:9: namespaces
                    {
                    dbg.location(322,9);
                    pushFollow(FOLLOW_namespaces_in_styleSheet162);
                    namespaces();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(5);}

            dbg.location(323,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:9: ( body )?
            int alt6=2;
            try { dbg.enterSubRule(6);
            try { dbg.enterDecision(6, decisionCanBacktrack[6]);

            int LA6_0 = input.LA(1);

            if ( (LA6_0==IDENT||(LA6_0>=IMPORT_SYM && LA6_0<=MEDIA_SYM)||LA6_0==GEN||LA6_0==COLON||LA6_0==AT_IDENT||LA6_0==MOZ_DOCUMENT_SYM||LA6_0==WEBKIT_KEYFRAMES_SYM||(LA6_0>=PAGE_SYM && LA6_0<=FONT_FACE_SYM)||LA6_0==GREATER||(LA6_0>=MINUS && LA6_0<=PIPE)||LA6_0==LESS_AND||LA6_0==SASS_VAR||(LA6_0>=SASS_MIXIN && LA6_0<=SASS_INCLUDE)||(LA6_0>=SASS_DEBUG && LA6_0<=SASS_IF)||(LA6_0>=SASS_FOR && LA6_0<=SASS_FUNCTION)) ) {
                alt6=1;
            }
            } finally {dbg.exitDecision(6);}

            switch (alt6) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:9: body
                    {
                    dbg.location(323,9);
                    pushFollow(FOLLOW_body_in_styleSheet174);
                    body();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(6);}

            dbg.location(324,6);
            match(input,EOF,FOLLOW_EOF_in_styleSheet182); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(325, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "styleSheet");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "styleSheet"


    // $ANTLR start "namespaces"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:1: namespaces : ( namespace ( ws )? )+ ;
    public final void namespaces() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespaces");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(327, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:328:2: ( ( namespace ( ws )? )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:329:2: ( namespace ( ws )? )+
            {
            dbg.location(329,2);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:329:2: ( namespace ( ws )? )+
            int cnt8=0;
            try { dbg.enterSubRule(8);

            loop8:
            do {
                int alt8=2;
                try { dbg.enterDecision(8, decisionCanBacktrack[8]);

                int LA8_0 = input.LA(1);

                if ( (LA8_0==NAMESPACE_SYM) ) {
                    alt8=1;
                }


                } finally {dbg.exitDecision(8);}

                switch (alt8) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:329:4: namespace ( ws )?
            	    {
            	    dbg.location(329,4);
            	    pushFollow(FOLLOW_namespace_in_namespaces199);
            	    namespace();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(329,14);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:329:14: ( ws )?
            	    int alt7=2;
            	    try { dbg.enterSubRule(7);
            	    try { dbg.enterDecision(7, decisionCanBacktrack[7]);

            	    int LA7_0 = input.LA(1);

            	    if ( (LA7_0==WS||(LA7_0>=NL && LA7_0<=COMMENT)) ) {
            	        alt7=1;
            	    }
            	    } finally {dbg.exitDecision(7);}

            	    switch (alt7) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:329:14: ws
            	            {
            	            dbg.location(329,14);
            	            pushFollow(FOLLOW_ws_in_namespaces201);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(7);}


            	    }
            	    break;

            	default :
            	    if ( cnt8 >= 1 ) break loop8;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(8, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt8++;
            } while (true);
            } finally {dbg.exitSubRule(8);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(330, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespaces");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespaces"


    // $ANTLR start "namespace"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:332:1: namespace : NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI ;
    public final void namespace() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespace");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(332, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:3: ( NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:5: NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI
            {
            dbg.location(333,5);
            match(input,NAMESPACE_SYM,FOLLOW_NAMESPACE_SYM_in_namespace217); if (state.failed) return ;
            dbg.location(333,19);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:19: ( ws )?
            int alt9=2;
            try { dbg.enterSubRule(9);
            try { dbg.enterDecision(9, decisionCanBacktrack[9]);

            int LA9_0 = input.LA(1);

            if ( (LA9_0==WS||(LA9_0>=NL && LA9_0<=COMMENT)) ) {
                alt9=1;
            }
            } finally {dbg.exitDecision(9);}

            switch (alt9) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:19: ws
                    {
                    dbg.location(333,19);
                    pushFollow(FOLLOW_ws_in_namespace219);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(9);}

            dbg.location(333,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:23: ( namespacePrefixName ( ws )? )?
            int alt11=2;
            try { dbg.enterSubRule(11);
            try { dbg.enterDecision(11, decisionCanBacktrack[11]);

            int LA11_0 = input.LA(1);

            if ( (LA11_0==IDENT) ) {
                alt11=1;
            }
            } finally {dbg.exitDecision(11);}

            switch (alt11) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:24: namespacePrefixName ( ws )?
                    {
                    dbg.location(333,24);
                    pushFollow(FOLLOW_namespacePrefixName_in_namespace223);
                    namespacePrefixName();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(333,44);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:44: ( ws )?
                    int alt10=2;
                    try { dbg.enterSubRule(10);
                    try { dbg.enterDecision(10, decisionCanBacktrack[10]);

                    int LA10_0 = input.LA(1);

                    if ( (LA10_0==WS||(LA10_0>=NL && LA10_0<=COMMENT)) ) {
                        alt10=1;
                    }
                    } finally {dbg.exitDecision(10);}

                    switch (alt10) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:44: ws
                            {
                            dbg.location(333,44);
                            pushFollow(FOLLOW_ws_in_namespace225);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(10);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(11);}

            dbg.location(333,50);
            pushFollow(FOLLOW_resourceIdentifier_in_namespace230);
            resourceIdentifier();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(333,69);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:69: ( ws )?
            int alt12=2;
            try { dbg.enterSubRule(12);
            try { dbg.enterDecision(12, decisionCanBacktrack[12]);

            int LA12_0 = input.LA(1);

            if ( (LA12_0==WS||(LA12_0>=NL && LA12_0<=COMMENT)) ) {
                alt12=1;
            }
            } finally {dbg.exitDecision(12);}

            switch (alt12) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:69: ws
                    {
                    dbg.location(333,69);
                    pushFollow(FOLLOW_ws_in_namespace232);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(12);}

            dbg.location(333,73);
            match(input,SEMI,FOLLOW_SEMI_in_namespace235); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(334, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespace");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespace"


    // $ANTLR start "namespacePrefixName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:1: namespacePrefixName : IDENT ;
    public final void namespacePrefixName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespacePrefixName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(336, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:3: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:5: IDENT
            {
            dbg.location(337,5);
            match(input,IDENT,FOLLOW_IDENT_in_namespacePrefixName248); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(338, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespacePrefixName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespacePrefixName"


    // $ANTLR start "resourceIdentifier"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:340:1: resourceIdentifier : ( STRING | URI );
    public final void resourceIdentifier() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "resourceIdentifier");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(340, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:341:3: ( STRING | URI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(341,3);
            if ( (input.LA(1)>=STRING && input.LA(1)<=URI) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(342, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "resourceIdentifier");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "resourceIdentifier"


    // $ANTLR start "charSet"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:344:1: charSet : CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI ;
    public final void charSet() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "charSet");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(344, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:345:5: ( CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:345:9: CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI
            {
            dbg.location(345,9);
            match(input,CHARSET_SYM,FOLLOW_CHARSET_SYM_in_charSet286); if (state.failed) return ;
            dbg.location(345,21);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:345:21: ( ws )?
            int alt13=2;
            try { dbg.enterSubRule(13);
            try { dbg.enterDecision(13, decisionCanBacktrack[13]);

            int LA13_0 = input.LA(1);

            if ( (LA13_0==WS||(LA13_0>=NL && LA13_0<=COMMENT)) ) {
                alt13=1;
            }
            } finally {dbg.exitDecision(13);}

            switch (alt13) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:345:21: ws
                    {
                    dbg.location(345,21);
                    pushFollow(FOLLOW_ws_in_charSet288);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(13);}

            dbg.location(345,25);
            pushFollow(FOLLOW_charSetValue_in_charSet291);
            charSetValue();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(345,38);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:345:38: ( ws )?
            int alt14=2;
            try { dbg.enterSubRule(14);
            try { dbg.enterDecision(14, decisionCanBacktrack[14]);

            int LA14_0 = input.LA(1);

            if ( (LA14_0==WS||(LA14_0>=NL && LA14_0<=COMMENT)) ) {
                alt14=1;
            }
            } finally {dbg.exitDecision(14);}

            switch (alt14) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:345:38: ws
                    {
                    dbg.location(345,38);
                    pushFollow(FOLLOW_ws_in_charSet293);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(14);}

            dbg.location(345,42);
            match(input,SEMI,FOLLOW_SEMI_in_charSet296); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(346, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "charSet");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "charSet"


    // $ANTLR start "charSetValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:348:1: charSetValue : STRING ;
    public final void charSetValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "charSetValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(348, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:2: ( STRING )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:4: STRING
            {
            dbg.location(349,4);
            match(input,STRING,FOLLOW_STRING_in_charSetValue310); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(350, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "charSetValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "charSetValue"


    // $ANTLR start "imports"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:352:1: imports : ( importItem ( ws )? )+ ;
    public final void imports() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "imports");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(352, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:353:2: ( ( importItem ( ws )? )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:354:2: ( importItem ( ws )? )+
            {
            dbg.location(354,2);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:354:2: ( importItem ( ws )? )+
            int cnt16=0;
            try { dbg.enterSubRule(16);

            loop16:
            do {
                int alt16=2;
                try { dbg.enterDecision(16, decisionCanBacktrack[16]);

                try {
                    isCyclicDecision = true;
                    alt16 = dfa16.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(16);}

                switch (alt16) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:354:4: importItem ( ws )?
            	    {
            	    dbg.location(354,4);
            	    pushFollow(FOLLOW_importItem_in_imports324);
            	    importItem();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(354,15);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:354:15: ( ws )?
            	    int alt15=2;
            	    try { dbg.enterSubRule(15);
            	    try { dbg.enterDecision(15, decisionCanBacktrack[15]);

            	    int LA15_0 = input.LA(1);

            	    if ( (LA15_0==WS||(LA15_0>=NL && LA15_0<=COMMENT)) ) {
            	        alt15=1;
            	    }
            	    } finally {dbg.exitDecision(15);}

            	    switch (alt15) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:354:15: ws
            	            {
            	            dbg.location(354,15);
            	            pushFollow(FOLLOW_ws_in_imports326);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(15);}


            	    }
            	    break;

            	default :
            	    if ( cnt16 >= 1 ) break loop16;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(16, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt16++;
            } while (true);
            } finally {dbg.exitSubRule(16);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(355, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "imports");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "imports"


    // $ANTLR start "importItem"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:357:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ws )? mediaQueryList SEMI | {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ws )? ( COMMA ( ws )? resourceIdentifier )* mediaQueryList SEMI );
    public final void importItem() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "importItem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(357, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:5: ( IMPORT_SYM ( ws )? resourceIdentifier ( ws )? mediaQueryList SEMI | {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ws )? ( COMMA ( ws )? resourceIdentifier )* mediaQueryList SEMI )
            int alt23=2;
            try { dbg.enterDecision(23, decisionCanBacktrack[23]);

            int LA23_0 = input.LA(1);

            if ( (LA23_0==IMPORT_SYM) ) {
                int LA23_1 = input.LA(2);

                if ( (!(evalPredicate(evalPredicate(isScssSource(),"isScssSource()"),""))) ) {
                    alt23=1;
                }
                else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
                    alt23=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 23, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(23);}

            switch (alt23) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:359:9: IMPORT_SYM ( ws )? resourceIdentifier ( ws )? mediaQueryList SEMI
                    {
                    dbg.location(359,9);
                    match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem356); if (state.failed) return ;
                    dbg.location(359,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:359:20: ( ws )?
                    int alt17=2;
                    try { dbg.enterSubRule(17);
                    try { dbg.enterDecision(17, decisionCanBacktrack[17]);

                    int LA17_0 = input.LA(1);

                    if ( (LA17_0==WS||(LA17_0>=NL && LA17_0<=COMMENT)) ) {
                        alt17=1;
                    }
                    } finally {dbg.exitDecision(17);}

                    switch (alt17) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:359:20: ws
                            {
                            dbg.location(359,20);
                            pushFollow(FOLLOW_ws_in_importItem358);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(17);}

                    dbg.location(359,24);
                    pushFollow(FOLLOW_resourceIdentifier_in_importItem361);
                    resourceIdentifier();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(359,43);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:359:43: ( ws )?
                    int alt18=2;
                    try { dbg.enterSubRule(18);
                    try { dbg.enterDecision(18, decisionCanBacktrack[18]);

                    int LA18_0 = input.LA(1);

                    if ( (LA18_0==WS||(LA18_0>=NL && LA18_0<=COMMENT)) ) {
                        alt18=1;
                    }
                    } finally {dbg.exitDecision(18);}

                    switch (alt18) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:359:43: ws
                            {
                            dbg.location(359,43);
                            pushFollow(FOLLOW_ws_in_importItem363);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(18);}

                    dbg.location(359,47);
                    pushFollow(FOLLOW_mediaQueryList_in_importItem366);
                    mediaQueryList();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(359,62);
                    match(input,SEMI,FOLLOW_SEMI_in_importItem368); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:362:9: {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ws )? ( COMMA ( ws )? resourceIdentifier )* mediaQueryList SEMI
                    {
                    dbg.location(362,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "importItem", "isScssSource()");
                    }
                    dbg.location(362,27);
                    match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem399); if (state.failed) return ;
                    dbg.location(362,38);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:362:38: ( ws )?
                    int alt19=2;
                    try { dbg.enterSubRule(19);
                    try { dbg.enterDecision(19, decisionCanBacktrack[19]);

                    int LA19_0 = input.LA(1);

                    if ( (LA19_0==WS||(LA19_0>=NL && LA19_0<=COMMENT)) ) {
                        alt19=1;
                    }
                    } finally {dbg.exitDecision(19);}

                    switch (alt19) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:362:38: ws
                            {
                            dbg.location(362,38);
                            pushFollow(FOLLOW_ws_in_importItem401);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(19);}

                    dbg.location(362,42);
                    pushFollow(FOLLOW_resourceIdentifier_in_importItem404);
                    resourceIdentifier();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(362,61);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:362:61: ( ws )?
                    int alt20=2;
                    try { dbg.enterSubRule(20);
                    try { dbg.enterDecision(20, decisionCanBacktrack[20]);

                    int LA20_0 = input.LA(1);

                    if ( (LA20_0==WS||(LA20_0>=NL && LA20_0<=COMMENT)) ) {
                        alt20=1;
                    }
                    } finally {dbg.exitDecision(20);}

                    switch (alt20) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:362:61: ws
                            {
                            dbg.location(362,61);
                            pushFollow(FOLLOW_ws_in_importItem406);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(20);}

                    dbg.location(362,65);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:362:65: ( COMMA ( ws )? resourceIdentifier )*
                    try { dbg.enterSubRule(22);

                    loop22:
                    do {
                        int alt22=2;
                        try { dbg.enterDecision(22, decisionCanBacktrack[22]);

                        int LA22_0 = input.LA(1);

                        if ( (LA22_0==COMMA) ) {
                            alt22=1;
                        }


                        } finally {dbg.exitDecision(22);}

                        switch (alt22) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:362:66: COMMA ( ws )? resourceIdentifier
                    	    {
                    	    dbg.location(362,66);
                    	    match(input,COMMA,FOLLOW_COMMA_in_importItem410); if (state.failed) return ;
                    	    dbg.location(362,72);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:362:72: ( ws )?
                    	    int alt21=2;
                    	    try { dbg.enterSubRule(21);
                    	    try { dbg.enterDecision(21, decisionCanBacktrack[21]);

                    	    int LA21_0 = input.LA(1);

                    	    if ( (LA21_0==WS||(LA21_0>=NL && LA21_0<=COMMENT)) ) {
                    	        alt21=1;
                    	    }
                    	    } finally {dbg.exitDecision(21);}

                    	    switch (alt21) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:362:72: ws
                    	            {
                    	            dbg.location(362,72);
                    	            pushFollow(FOLLOW_ws_in_importItem412);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(21);}

                    	    dbg.location(362,76);
                    	    pushFollow(FOLLOW_resourceIdentifier_in_importItem415);
                    	    resourceIdentifier();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop22;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(22);}

                    dbg.location(362,97);
                    pushFollow(FOLLOW_mediaQueryList_in_importItem419);
                    mediaQueryList();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(362,112);
                    match(input,SEMI,FOLLOW_SEMI_in_importItem421); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(363, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "importItem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "importItem"


    // $ANTLR start "media"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:364:1: media : MEDIA_SYM ( ws )? ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_mq_interpolation_expression ( ws )? | ( mediaQueryList )=> mediaQueryList ) LBRACE ( ws )? ( ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI | sass_declaration_interpolation_expression COLON )=> declaration SEMI ( ws )? | {...}? sass_extend ( ws )? | {...}? sass_debug ( ws )? | {...}? sass_control ( ws )? | {...}? sass_content ( ws )? | rule ( ws )? | page ( ws )? | fontFace ( ws )? | vendorAtRule ( ws )? | media ( ws )? )* RBRACE ;
    public final void media() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "media");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(364, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:365:5: ( MEDIA_SYM ( ws )? ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_mq_interpolation_expression ( ws )? | ( mediaQueryList )=> mediaQueryList ) LBRACE ( ws )? ( ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI | sass_declaration_interpolation_expression COLON )=> declaration SEMI ( ws )? | {...}? sass_extend ( ws )? | {...}? sass_debug ( ws )? | {...}? sass_control ( ws )? | {...}? sass_content ( ws )? | rule ( ws )? | page ( ws )? | fontFace ( ws )? | vendorAtRule ( ws )? | media ( ws )? )* RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:365:7: MEDIA_SYM ( ws )? ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_mq_interpolation_expression ( ws )? | ( mediaQueryList )=> mediaQueryList ) LBRACE ( ws )? ( ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI | sass_declaration_interpolation_expression COLON )=> declaration SEMI ( ws )? | {...}? sass_extend ( ws )? | {...}? sass_debug ( ws )? | {...}? sass_control ( ws )? | {...}? sass_content ( ws )? | rule ( ws )? | page ( ws )? | fontFace ( ws )? | vendorAtRule ( ws )? | media ( ws )? )* RBRACE
            {
            dbg.location(365,7);
            match(input,MEDIA_SYM,FOLLOW_MEDIA_SYM_in_media437); if (state.failed) return ;
            dbg.location(365,17);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:365:17: ( ws )?
            int alt24=2;
            try { dbg.enterSubRule(24);
            try { dbg.enterDecision(24, decisionCanBacktrack[24]);

            int LA24_0 = input.LA(1);

            if ( (LA24_0==WS||(LA24_0>=NL && LA24_0<=COMMENT)) ) {
                alt24=1;
            }
            } finally {dbg.exitDecision(24);}

            switch (alt24) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:365:17: ws
                    {
                    dbg.location(365,17);
                    pushFollow(FOLLOW_ws_in_media439);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(24);}

            dbg.location(367,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:367:9: ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_mq_interpolation_expression ( ws )? | ( mediaQueryList )=> mediaQueryList )
            int alt26=2;
            try { dbg.enterSubRule(26);
            try { dbg.enterDecision(26, decisionCanBacktrack[26]);

            try {
                isCyclicDecision = true;
                alt26 = dfa26.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(26);}

            switch (alt26) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:13: ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_mq_interpolation_expression ( ws )?
                    {
                    dbg.location(368,64);
                    pushFollow(FOLLOW_sass_mq_interpolation_expression_in_media494);
                    sass_mq_interpolation_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(368,97);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:97: ( ws )?
                    int alt25=2;
                    try { dbg.enterSubRule(25);
                    try { dbg.enterDecision(25, decisionCanBacktrack[25]);

                    int LA25_0 = input.LA(1);

                    if ( (LA25_0==WS||(LA25_0>=NL && LA25_0<=COMMENT)) ) {
                        alt25=1;
                    }
                    } finally {dbg.exitDecision(25);}

                    switch (alt25) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:97: ws
                            {
                            dbg.location(368,97);
                            pushFollow(FOLLOW_ws_in_media496);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(25);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:370:13: ( mediaQueryList )=> mediaQueryList
                    {
                    dbg.location(370,31);
                    pushFollow(FOLLOW_mediaQueryList_in_media530);
                    mediaQueryList();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(26);}

            dbg.location(373,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_media559); if (state.failed) return ;
            dbg.location(373,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:16: ( ws )?
            int alt27=2;
            try { dbg.enterSubRule(27);
            try { dbg.enterDecision(27, decisionCanBacktrack[27]);

            int LA27_0 = input.LA(1);

            if ( (LA27_0==WS||(LA27_0>=NL && LA27_0<=COMMENT)) ) {
                alt27=1;
            }
            } finally {dbg.exitDecision(27);}

            switch (alt27) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:16: ws
                    {
                    dbg.location(373,16);
                    pushFollow(FOLLOW_ws_in_media561);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(27);}

            dbg.location(374,13);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:374:13: ( ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI | sass_declaration_interpolation_expression COLON )=> declaration SEMI ( ws )? | {...}? sass_extend ( ws )? | {...}? sass_debug ( ws )? | {...}? sass_control ( ws )? | {...}? sass_content ( ws )? | rule ( ws )? | page ( ws )? | fontFace ( ws )? | vendorAtRule ( ws )? | media ( ws )? )*
            try { dbg.enterSubRule(38);

            loop38:
            do {
                int alt38=11;
                try { dbg.enterDecision(38, decisionCanBacktrack[38]);

                try {
                    isCyclicDecision = true;
                    alt38 = dfa38.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(38);}

                switch (alt38) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:376:17: ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI | sass_declaration_interpolation_expression COLON )=> declaration SEMI ( ws )?
            	    {
            	    dbg.location(376,134);
            	    pushFollow(FOLLOW_declaration_in_media647);
            	    declaration();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(376,146);
            	    match(input,SEMI,FOLLOW_SEMI_in_media649); if (state.failed) return ;
            	    dbg.location(376,151);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:376:151: ( ws )?
            	    int alt28=2;
            	    try { dbg.enterSubRule(28);
            	    try { dbg.enterDecision(28, decisionCanBacktrack[28]);

            	    int LA28_0 = input.LA(1);

            	    if ( (LA28_0==WS||(LA28_0>=NL && LA28_0<=COMMENT)) ) {
            	        alt28=1;
            	    }
            	    } finally {dbg.exitDecision(28);}

            	    switch (alt28) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:376:151: ws
            	            {
            	            dbg.location(376,151);
            	            pushFollow(FOLLOW_ws_in_media651);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(28);}


            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:377:19: {...}? sass_extend ( ws )?
            	    {
            	    dbg.location(377,19);
            	    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        throw new FailedPredicateException(input, "media", "isScssSource()");
            	    }
            	    dbg.location(377,37);
            	    pushFollow(FOLLOW_sass_extend_in_media674);
            	    sass_extend();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(377,49);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:377:49: ( ws )?
            	    int alt29=2;
            	    try { dbg.enterSubRule(29);
            	    try { dbg.enterDecision(29, decisionCanBacktrack[29]);

            	    int LA29_0 = input.LA(1);

            	    if ( (LA29_0==WS||(LA29_0>=NL && LA29_0<=COMMENT)) ) {
            	        alt29=1;
            	    }
            	    } finally {dbg.exitDecision(29);}

            	    switch (alt29) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:377:49: ws
            	            {
            	            dbg.location(377,49);
            	            pushFollow(FOLLOW_ws_in_media676);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(29);}


            	    }
            	    break;
            	case 3 :
            	    dbg.enterAlt(3);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:378:19: {...}? sass_debug ( ws )?
            	    {
            	    dbg.location(378,19);
            	    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        throw new FailedPredicateException(input, "media", "isScssSource()");
            	    }
            	    dbg.location(378,37);
            	    pushFollow(FOLLOW_sass_debug_in_media699);
            	    sass_debug();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(378,48);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:378:48: ( ws )?
            	    int alt30=2;
            	    try { dbg.enterSubRule(30);
            	    try { dbg.enterDecision(30, decisionCanBacktrack[30]);

            	    int LA30_0 = input.LA(1);

            	    if ( (LA30_0==WS||(LA30_0>=NL && LA30_0<=COMMENT)) ) {
            	        alt30=1;
            	    }
            	    } finally {dbg.exitDecision(30);}

            	    switch (alt30) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:378:48: ws
            	            {
            	            dbg.location(378,48);
            	            pushFollow(FOLLOW_ws_in_media701);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(30);}


            	    }
            	    break;
            	case 4 :
            	    dbg.enterAlt(4);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:19: {...}? sass_control ( ws )?
            	    {
            	    dbg.location(379,19);
            	    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        throw new FailedPredicateException(input, "media", "isScssSource()");
            	    }
            	    dbg.location(379,37);
            	    pushFollow(FOLLOW_sass_control_in_media724);
            	    sass_control();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(379,50);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:50: ( ws )?
            	    int alt31=2;
            	    try { dbg.enterSubRule(31);
            	    try { dbg.enterDecision(31, decisionCanBacktrack[31]);

            	    int LA31_0 = input.LA(1);

            	    if ( (LA31_0==WS||(LA31_0>=NL && LA31_0<=COMMENT)) ) {
            	        alt31=1;
            	    }
            	    } finally {dbg.exitDecision(31);}

            	    switch (alt31) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:50: ws
            	            {
            	            dbg.location(379,50);
            	            pushFollow(FOLLOW_ws_in_media726);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(31);}


            	    }
            	    break;
            	case 5 :
            	    dbg.enterAlt(5);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:380:19: {...}? sass_content ( ws )?
            	    {
            	    dbg.location(380,19);
            	    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        throw new FailedPredicateException(input, "media", "isScssSource()");
            	    }
            	    dbg.location(380,37);
            	    pushFollow(FOLLOW_sass_content_in_media749);
            	    sass_content();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(380,50);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:380:50: ( ws )?
            	    int alt32=2;
            	    try { dbg.enterSubRule(32);
            	    try { dbg.enterDecision(32, decisionCanBacktrack[32]);

            	    int LA32_0 = input.LA(1);

            	    if ( (LA32_0==WS||(LA32_0>=NL && LA32_0<=COMMENT)) ) {
            	        alt32=1;
            	    }
            	    } finally {dbg.exitDecision(32);}

            	    switch (alt32) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:380:50: ws
            	            {
            	            dbg.location(380,50);
            	            pushFollow(FOLLOW_ws_in_media751);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(32);}


            	    }
            	    break;
            	case 6 :
            	    dbg.enterAlt(6);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:382:19: rule ( ws )?
            	    {
            	    dbg.location(382,19);
            	    pushFollow(FOLLOW_rule_in_media789);
            	    rule();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(382,25);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:382:25: ( ws )?
            	    int alt33=2;
            	    try { dbg.enterSubRule(33);
            	    try { dbg.enterDecision(33, decisionCanBacktrack[33]);

            	    int LA33_0 = input.LA(1);

            	    if ( (LA33_0==WS||(LA33_0>=NL && LA33_0<=COMMENT)) ) {
            	        alt33=1;
            	    }
            	    } finally {dbg.exitDecision(33);}

            	    switch (alt33) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:382:25: ws
            	            {
            	            dbg.location(382,25);
            	            pushFollow(FOLLOW_ws_in_media792);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(33);}


            	    }
            	    break;
            	case 7 :
            	    dbg.enterAlt(7);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:19: page ( ws )?
            	    {
            	    dbg.location(383,19);
            	    pushFollow(FOLLOW_page_in_media813);
            	    page();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(383,25);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:25: ( ws )?
            	    int alt34=2;
            	    try { dbg.enterSubRule(34);
            	    try { dbg.enterDecision(34, decisionCanBacktrack[34]);

            	    int LA34_0 = input.LA(1);

            	    if ( (LA34_0==WS||(LA34_0>=NL && LA34_0<=COMMENT)) ) {
            	        alt34=1;
            	    }
            	    } finally {dbg.exitDecision(34);}

            	    switch (alt34) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:25: ws
            	            {
            	            dbg.location(383,25);
            	            pushFollow(FOLLOW_ws_in_media816);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(34);}


            	    }
            	    break;
            	case 8 :
            	    dbg.enterAlt(8);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:384:19: fontFace ( ws )?
            	    {
            	    dbg.location(384,19);
            	    pushFollow(FOLLOW_fontFace_in_media837);
            	    fontFace();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(384,29);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:384:29: ( ws )?
            	    int alt35=2;
            	    try { dbg.enterSubRule(35);
            	    try { dbg.enterDecision(35, decisionCanBacktrack[35]);

            	    int LA35_0 = input.LA(1);

            	    if ( (LA35_0==WS||(LA35_0>=NL && LA35_0<=COMMENT)) ) {
            	        alt35=1;
            	    }
            	    } finally {dbg.exitDecision(35);}

            	    switch (alt35) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:384:29: ws
            	            {
            	            dbg.location(384,29);
            	            pushFollow(FOLLOW_ws_in_media840);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(35);}


            	    }
            	    break;
            	case 9 :
            	    dbg.enterAlt(9);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:19: vendorAtRule ( ws )?
            	    {
            	    dbg.location(385,19);
            	    pushFollow(FOLLOW_vendorAtRule_in_media861);
            	    vendorAtRule();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(385,33);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:33: ( ws )?
            	    int alt36=2;
            	    try { dbg.enterSubRule(36);
            	    try { dbg.enterDecision(36, decisionCanBacktrack[36]);

            	    int LA36_0 = input.LA(1);

            	    if ( (LA36_0==WS||(LA36_0>=NL && LA36_0<=COMMENT)) ) {
            	        alt36=1;
            	    }
            	    } finally {dbg.exitDecision(36);}

            	    switch (alt36) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:33: ws
            	            {
            	            dbg.location(385,33);
            	            pushFollow(FOLLOW_ws_in_media864);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(36);}


            	    }
            	    break;
            	case 10 :
            	    dbg.enterAlt(10);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:19: media ( ws )?
            	    {
            	    dbg.location(389,19);
            	    pushFollow(FOLLOW_media_in_media936);
            	    media();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(389,25);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:25: ( ws )?
            	    int alt37=2;
            	    try { dbg.enterSubRule(37);
            	    try { dbg.enterDecision(37, decisionCanBacktrack[37]);

            	    int LA37_0 = input.LA(1);

            	    if ( (LA37_0==WS||(LA37_0>=NL && LA37_0<=COMMENT)) ) {
            	        alt37=1;
            	    }
            	    } finally {dbg.exitDecision(37);}

            	    switch (alt37) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:25: ws
            	            {
            	            dbg.location(389,25);
            	            pushFollow(FOLLOW_ws_in_media938);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(37);}


            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);
            } finally {dbg.exitSubRule(38);}

            dbg.location(393,10);
            match(input,RBRACE,FOLLOW_RBRACE_in_media983); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(394, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "media");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "media"


    // $ANTLR start "mediaQueryList"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:396:1: mediaQueryList : ( mediaQuery ( COMMA ( ws )? mediaQuery )* )? ;
    public final void mediaQueryList() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaQueryList");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(396, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:397:2: ( ( mediaQuery ( COMMA ( ws )? mediaQuery )* )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:397:4: ( mediaQuery ( COMMA ( ws )? mediaQuery )* )?
            {
            dbg.location(397,4);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:397:4: ( mediaQuery ( COMMA ( ws )? mediaQuery )* )?
            int alt41=2;
            try { dbg.enterSubRule(41);
            try { dbg.enterDecision(41, decisionCanBacktrack[41]);

            int LA41_0 = input.LA(1);

            if ( (LA41_0==IDENT||(LA41_0>=ONLY && LA41_0<=LPAREN)) ) {
                alt41=1;
            }
            } finally {dbg.exitDecision(41);}

            switch (alt41) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:397:6: mediaQuery ( COMMA ( ws )? mediaQuery )*
                    {
                    dbg.location(397,6);
                    pushFollow(FOLLOW_mediaQuery_in_mediaQueryList999);
                    mediaQuery();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(397,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:397:17: ( COMMA ( ws )? mediaQuery )*
                    try { dbg.enterSubRule(40);

                    loop40:
                    do {
                        int alt40=2;
                        try { dbg.enterDecision(40, decisionCanBacktrack[40]);

                        int LA40_0 = input.LA(1);

                        if ( (LA40_0==COMMA) ) {
                            alt40=1;
                        }


                        } finally {dbg.exitDecision(40);}

                        switch (alt40) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:397:19: COMMA ( ws )? mediaQuery
                    	    {
                    	    dbg.location(397,19);
                    	    match(input,COMMA,FOLLOW_COMMA_in_mediaQueryList1003); if (state.failed) return ;
                    	    dbg.location(397,25);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:397:25: ( ws )?
                    	    int alt39=2;
                    	    try { dbg.enterSubRule(39);
                    	    try { dbg.enterDecision(39, decisionCanBacktrack[39]);

                    	    int LA39_0 = input.LA(1);

                    	    if ( (LA39_0==WS||(LA39_0>=NL && LA39_0<=COMMENT)) ) {
                    	        alt39=1;
                    	    }
                    	    } finally {dbg.exitDecision(39);}

                    	    switch (alt39) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:397:25: ws
                    	            {
                    	            dbg.location(397,25);
                    	            pushFollow(FOLLOW_ws_in_mediaQueryList1005);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(39);}

                    	    dbg.location(397,29);
                    	    pushFollow(FOLLOW_mediaQuery_in_mediaQueryList1008);
                    	    mediaQuery();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop40;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(40);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(41);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(398, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaQueryList");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaQueryList"


    // $ANTLR start "mediaQuery"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:400:1: mediaQuery : ( ( mediaQueryOperator ( ws )? )? mediaType ( ws )? ( AND ( ws )? mediaExpression )* | mediaExpression ( AND ( ws )? mediaExpression )* );
    public final void mediaQuery() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaQuery");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(400, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:401:2: ( ( mediaQueryOperator ( ws )? )? mediaType ( ws )? ( AND ( ws )? mediaExpression )* | mediaExpression ( AND ( ws )? mediaExpression )* )
            int alt49=2;
            try { dbg.enterDecision(49, decisionCanBacktrack[49]);

            int LA49_0 = input.LA(1);

            if ( (LA49_0==IDENT||(LA49_0>=ONLY && LA49_0<=GEN)) ) {
                alt49=1;
            }
            else if ( (LA49_0==LPAREN) ) {
                alt49=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(49);}

            switch (alt49) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:401:4: ( mediaQueryOperator ( ws )? )? mediaType ( ws )? ( AND ( ws )? mediaExpression )*
                    {
                    dbg.location(401,4);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:401:4: ( mediaQueryOperator ( ws )? )?
                    int alt43=2;
                    try { dbg.enterSubRule(43);
                    try { dbg.enterDecision(43, decisionCanBacktrack[43]);

                    int LA43_0 = input.LA(1);

                    if ( ((LA43_0>=ONLY && LA43_0<=NOT)) ) {
                        alt43=1;
                    }
                    } finally {dbg.exitDecision(43);}

                    switch (alt43) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:401:5: mediaQueryOperator ( ws )?
                            {
                            dbg.location(401,5);
                            pushFollow(FOLLOW_mediaQueryOperator_in_mediaQuery1027);
                            mediaQueryOperator();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(401,24);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:401:24: ( ws )?
                            int alt42=2;
                            try { dbg.enterSubRule(42);
                            try { dbg.enterDecision(42, decisionCanBacktrack[42]);

                            int LA42_0 = input.LA(1);

                            if ( (LA42_0==WS||(LA42_0>=NL && LA42_0<=COMMENT)) ) {
                                alt42=1;
                            }
                            } finally {dbg.exitDecision(42);}

                            switch (alt42) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:401:24: ws
                                    {
                                    dbg.location(401,24);
                                    pushFollow(FOLLOW_ws_in_mediaQuery1029);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(42);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(43);}

                    dbg.location(401,32);
                    pushFollow(FOLLOW_mediaType_in_mediaQuery1036);
                    mediaType();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(401,42);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:401:42: ( ws )?
                    int alt44=2;
                    try { dbg.enterSubRule(44);
                    try { dbg.enterDecision(44, decisionCanBacktrack[44]);

                    int LA44_0 = input.LA(1);

                    if ( (LA44_0==WS||(LA44_0>=NL && LA44_0<=COMMENT)) ) {
                        alt44=1;
                    }
                    } finally {dbg.exitDecision(44);}

                    switch (alt44) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:401:42: ws
                            {
                            dbg.location(401,42);
                            pushFollow(FOLLOW_ws_in_mediaQuery1038);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(44);}

                    dbg.location(401,46);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:401:46: ( AND ( ws )? mediaExpression )*
                    try { dbg.enterSubRule(46);

                    loop46:
                    do {
                        int alt46=2;
                        try { dbg.enterDecision(46, decisionCanBacktrack[46]);

                        int LA46_0 = input.LA(1);

                        if ( (LA46_0==AND) ) {
                            alt46=1;
                        }


                        } finally {dbg.exitDecision(46);}

                        switch (alt46) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:401:48: AND ( ws )? mediaExpression
                    	    {
                    	    dbg.location(401,48);
                    	    match(input,AND,FOLLOW_AND_in_mediaQuery1043); if (state.failed) return ;
                    	    dbg.location(401,52);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:401:52: ( ws )?
                    	    int alt45=2;
                    	    try { dbg.enterSubRule(45);
                    	    try { dbg.enterDecision(45, decisionCanBacktrack[45]);

                    	    int LA45_0 = input.LA(1);

                    	    if ( (LA45_0==WS||(LA45_0>=NL && LA45_0<=COMMENT)) ) {
                    	        alt45=1;
                    	    }
                    	    } finally {dbg.exitDecision(45);}

                    	    switch (alt45) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:401:52: ws
                    	            {
                    	            dbg.location(401,52);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery1045);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(45);}

                    	    dbg.location(401,56);
                    	    pushFollow(FOLLOW_mediaExpression_in_mediaQuery1048);
                    	    mediaExpression();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop46;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(46);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:4: mediaExpression ( AND ( ws )? mediaExpression )*
                    {
                    dbg.location(402,4);
                    pushFollow(FOLLOW_mediaExpression_in_mediaQuery1056);
                    mediaExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(402,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:20: ( AND ( ws )? mediaExpression )*
                    try { dbg.enterSubRule(48);

                    loop48:
                    do {
                        int alt48=2;
                        try { dbg.enterDecision(48, decisionCanBacktrack[48]);

                        int LA48_0 = input.LA(1);

                        if ( (LA48_0==AND) ) {
                            alt48=1;
                        }


                        } finally {dbg.exitDecision(48);}

                        switch (alt48) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:22: AND ( ws )? mediaExpression
                    	    {
                    	    dbg.location(402,22);
                    	    match(input,AND,FOLLOW_AND_in_mediaQuery1060); if (state.failed) return ;
                    	    dbg.location(402,26);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:26: ( ws )?
                    	    int alt47=2;
                    	    try { dbg.enterSubRule(47);
                    	    try { dbg.enterDecision(47, decisionCanBacktrack[47]);

                    	    int LA47_0 = input.LA(1);

                    	    if ( (LA47_0==WS||(LA47_0>=NL && LA47_0<=COMMENT)) ) {
                    	        alt47=1;
                    	    }
                    	    } finally {dbg.exitDecision(47);}

                    	    switch (alt47) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:26: ws
                    	            {
                    	            dbg.location(402,26);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery1062);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(47);}

                    	    dbg.location(402,30);
                    	    pushFollow(FOLLOW_mediaExpression_in_mediaQuery1065);
                    	    mediaExpression();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop48;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(48);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(403, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaQuery");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaQuery"


    // $ANTLR start "mediaQueryOperator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:405:1: mediaQueryOperator : ( ONLY | NOT );
    public final void mediaQueryOperator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaQueryOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(405, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:3: ( ONLY | NOT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(406,3);
            if ( (input.LA(1)>=ONLY && input.LA(1)<=NOT) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(407, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaQueryOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaQueryOperator"


    // $ANTLR start "mediaType"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:409:1: mediaType : ( IDENT | GEN );
    public final void mediaType() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaType");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(409, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:2: ( IDENT | GEN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(410,2);
            if ( input.LA(1)==IDENT||input.LA(1)==GEN ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(411, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaType");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaType"


    // $ANTLR start "mediaExpression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:1: mediaExpression : LPAREN ( ws )? mediaFeature ( ws )? ( COLON ( ws )? expression ( ws )? )? RPAREN ( ws )? ;
    public final void mediaExpression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(413, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:5: ( LPAREN ( ws )? mediaFeature ( ws )? ( COLON ( ws )? expression ( ws )? )? RPAREN ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:7: LPAREN ( ws )? mediaFeature ( ws )? ( COLON ( ws )? expression ( ws )? )? RPAREN ( ws )?
            {
            dbg.location(414,7);
            match(input,LPAREN,FOLLOW_LPAREN_in_mediaExpression1120); if (state.failed) return ;
            dbg.location(414,14);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:14: ( ws )?
            int alt50=2;
            try { dbg.enterSubRule(50);
            try { dbg.enterDecision(50, decisionCanBacktrack[50]);

            int LA50_0 = input.LA(1);

            if ( (LA50_0==WS||(LA50_0>=NL && LA50_0<=COMMENT)) ) {
                alt50=1;
            }
            } finally {dbg.exitDecision(50);}

            switch (alt50) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:14: ws
                    {
                    dbg.location(414,14);
                    pushFollow(FOLLOW_ws_in_mediaExpression1122);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(50);}

            dbg.location(414,18);
            pushFollow(FOLLOW_mediaFeature_in_mediaExpression1125);
            mediaFeature();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(414,31);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:31: ( ws )?
            int alt51=2;
            try { dbg.enterSubRule(51);
            try { dbg.enterDecision(51, decisionCanBacktrack[51]);

            int LA51_0 = input.LA(1);

            if ( (LA51_0==WS||(LA51_0>=NL && LA51_0<=COMMENT)) ) {
                alt51=1;
            }
            } finally {dbg.exitDecision(51);}

            switch (alt51) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:31: ws
                    {
                    dbg.location(414,31);
                    pushFollow(FOLLOW_ws_in_mediaExpression1127);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(51);}

            dbg.location(414,35);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:35: ( COLON ( ws )? expression ( ws )? )?
            int alt54=2;
            try { dbg.enterSubRule(54);
            try { dbg.enterDecision(54, decisionCanBacktrack[54]);

            int LA54_0 = input.LA(1);

            if ( (LA54_0==COLON) ) {
                alt54=1;
            }
            } finally {dbg.exitDecision(54);}

            switch (alt54) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:37: COLON ( ws )? expression ( ws )?
                    {
                    dbg.location(414,37);
                    match(input,COLON,FOLLOW_COLON_in_mediaExpression1132); if (state.failed) return ;
                    dbg.location(414,43);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:43: ( ws )?
                    int alt52=2;
                    try { dbg.enterSubRule(52);
                    try { dbg.enterDecision(52, decisionCanBacktrack[52]);

                    int LA52_0 = input.LA(1);

                    if ( (LA52_0==WS||(LA52_0>=NL && LA52_0<=COMMENT)) ) {
                        alt52=1;
                    }
                    } finally {dbg.exitDecision(52);}

                    switch (alt52) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:43: ws
                            {
                            dbg.location(414,43);
                            pushFollow(FOLLOW_ws_in_mediaExpression1134);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(52);}

                    dbg.location(414,47);
                    pushFollow(FOLLOW_expression_in_mediaExpression1137);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(414,58);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:58: ( ws )?
                    int alt53=2;
                    try { dbg.enterSubRule(53);
                    try { dbg.enterDecision(53, decisionCanBacktrack[53]);

                    int LA53_0 = input.LA(1);

                    if ( (LA53_0==WS||(LA53_0>=NL && LA53_0<=COMMENT)) ) {
                        alt53=1;
                    }
                    } finally {dbg.exitDecision(53);}

                    switch (alt53) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:58: ws
                            {
                            dbg.location(414,58);
                            pushFollow(FOLLOW_ws_in_mediaExpression1139);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(53);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(54);}

            dbg.location(414,64);
            match(input,RPAREN,FOLLOW_RPAREN_in_mediaExpression1144); if (state.failed) return ;
            dbg.location(414,71);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:71: ( ws )?
            int alt55=2;
            try { dbg.enterSubRule(55);
            try { dbg.enterDecision(55, decisionCanBacktrack[55]);

            int LA55_0 = input.LA(1);

            if ( (LA55_0==WS||(LA55_0>=NL && LA55_0<=COMMENT)) ) {
                alt55=1;
            }
            } finally {dbg.exitDecision(55);}

            switch (alt55) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:71: ws
                    {
                    dbg.location(414,71);
                    pushFollow(FOLLOW_ws_in_mediaExpression1146);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(55);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(415, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaExpression"


    // $ANTLR start "mediaFeature"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:1: mediaFeature : ( IDENT | GEN | {...}? cp_variable );
    public final void mediaFeature() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaFeature");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(417, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:418:2: ( IDENT | GEN | {...}? cp_variable )
            int alt56=3;
            try { dbg.enterDecision(56, decisionCanBacktrack[56]);

            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt56=1;
                }
                break;
            case GEN:
                {
                alt56=2;
                }
                break;
            case MEDIA_SYM:
            case AT_IDENT:
            case SASS_VAR:
                {
                alt56=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(56);}

            switch (alt56) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:418:4: IDENT
                    {
                    dbg.location(418,4);
                    match(input,IDENT,FOLLOW_IDENT_in_mediaFeature1162); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:418:12: GEN
                    {
                    dbg.location(418,12);
                    match(input,GEN,FOLLOW_GEN_in_mediaFeature1166); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:418:18: {...}? cp_variable
                    {
                    dbg.location(418,18);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaFeature", "isCssPreprocessorSource()");
                    }
                    dbg.location(418,47);
                    pushFollow(FOLLOW_cp_variable_in_mediaFeature1172);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(419, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaFeature");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaFeature"


    // $ANTLR start "body"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:2: body : ( bodyItem ( ws )? )+ ;
    public final void body() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "body");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(421, 2);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:7: ( ( bodyItem ( ws )? )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:2: ( bodyItem ( ws )? )+
            {
            dbg.location(422,2);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:2: ( bodyItem ( ws )? )+
            int cnt58=0;
            try { dbg.enterSubRule(58);

            loop58:
            do {
                int alt58=2;
                try { dbg.enterDecision(58, decisionCanBacktrack[58]);

                int LA58_0 = input.LA(1);

                if ( (LA58_0==IDENT||(LA58_0>=IMPORT_SYM && LA58_0<=MEDIA_SYM)||LA58_0==GEN||LA58_0==COLON||LA58_0==AT_IDENT||LA58_0==MOZ_DOCUMENT_SYM||LA58_0==WEBKIT_KEYFRAMES_SYM||(LA58_0>=PAGE_SYM && LA58_0<=FONT_FACE_SYM)||LA58_0==GREATER||(LA58_0>=MINUS && LA58_0<=PIPE)||LA58_0==LESS_AND||LA58_0==SASS_VAR||(LA58_0>=SASS_MIXIN && LA58_0<=SASS_INCLUDE)||(LA58_0>=SASS_DEBUG && LA58_0<=SASS_IF)||(LA58_0>=SASS_FOR && LA58_0<=SASS_FUNCTION)) ) {
                    alt58=1;
                }


                } finally {dbg.exitDecision(58);}

                switch (alt58) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:4: bodyItem ( ws )?
            	    {
            	    dbg.location(422,4);
            	    pushFollow(FOLLOW_bodyItem_in_body1188);
            	    bodyItem();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(422,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:13: ( ws )?
            	    int alt57=2;
            	    try { dbg.enterSubRule(57);
            	    try { dbg.enterDecision(57, decisionCanBacktrack[57]);

            	    int LA57_0 = input.LA(1);

            	    if ( (LA57_0==WS||(LA57_0>=NL && LA57_0<=COMMENT)) ) {
            	        alt57=1;
            	    }
            	    } finally {dbg.exitDecision(57);}

            	    switch (alt57) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:13: ws
            	            {
            	            dbg.location(422,13);
            	            pushFollow(FOLLOW_ws_in_body1190);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(57);}


            	    }
            	    break;

            	default :
            	    if ( cnt58 >= 1 ) break loop58;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(58, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt58++;
            } while (true);
            } finally {dbg.exitSubRule(58);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(423, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "body");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "body"


    // $ANTLR start "bodyItem"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:425:1: bodyItem : ( ( cp_mixin_call )=> cp_mixin_call | rule | media | page | counterStyle | fontFace | vendorAtRule | {...}? cp_variable_declaration | {...}? importItem | {...}? sass_debug | {...}? sass_control | {...}? sass_function_declaration );
    public final void bodyItem() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "bodyItem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(425, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:5: ( ( cp_mixin_call )=> cp_mixin_call | rule | media | page | counterStyle | fontFace | vendorAtRule | {...}? cp_variable_declaration | {...}? importItem | {...}? sass_debug | {...}? sass_control | {...}? sass_function_declaration )
            int alt59=12;
            try { dbg.enterDecision(59, decisionCanBacktrack[59]);

            try {
                isCyclicDecision = true;
                alt59 = dfa59.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(59);}

            switch (alt59) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:429:9: ( cp_mixin_call )=> cp_mixin_call
                    {
                    dbg.location(429,26);
                    pushFollow(FOLLOW_cp_mixin_call_in_bodyItem1232);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:430:8: rule
                    {
                    dbg.location(430,8);
                    pushFollow(FOLLOW_rule_in_bodyItem1241);
                    rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:11: media
                    {
                    dbg.location(431,11);
                    pushFollow(FOLLOW_media_in_bodyItem1253);
                    media();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:432:11: page
                    {
                    dbg.location(432,11);
                    pushFollow(FOLLOW_page_in_bodyItem1265);
                    page();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:433:11: counterStyle
                    {
                    dbg.location(433,11);
                    pushFollow(FOLLOW_counterStyle_in_bodyItem1277);
                    counterStyle();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:434:11: fontFace
                    {
                    dbg.location(434,11);
                    pushFollow(FOLLOW_fontFace_in_bodyItem1289);
                    fontFace();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:435:11: vendorAtRule
                    {
                    dbg.location(435,11);
                    pushFollow(FOLLOW_vendorAtRule_in_bodyItem1301);
                    vendorAtRule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:436:11: {...}? cp_variable_declaration
                    {
                    dbg.location(436,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isCssPreprocessorSource()");
                    }
                    dbg.location(436,40);
                    pushFollow(FOLLOW_cp_variable_declaration_in_bodyItem1315);
                    cp_variable_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:437:11: {...}? importItem
                    {
                    dbg.location(437,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isCssPreprocessorSource()");
                    }
                    dbg.location(437,40);
                    pushFollow(FOLLOW_importItem_in_bodyItem1329);
                    importItem();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:11: {...}? sass_debug
                    {
                    dbg.location(438,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(438,29);
                    pushFollow(FOLLOW_sass_debug_in_bodyItem1344);
                    sass_debug();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:11: {...}? sass_control
                    {
                    dbg.location(439,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(439,29);
                    pushFollow(FOLLOW_sass_control_in_bodyItem1358);
                    sass_control();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:440:11: {...}? sass_function_declaration
                    {
                    dbg.location(440,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(440,29);
                    pushFollow(FOLLOW_sass_function_declaration_in_bodyItem1372);
                    sass_function_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(NL)); 
                
        }
        finally {
        }
        dbg.location(441, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bodyItem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "bodyItem"


    // $ANTLR start "vendorAtRule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:1: vendorAtRule : ( moz_document | webkitKeyframes | generic_at_rule );
    public final void vendorAtRule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "vendorAtRule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(446, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:447:1: ( moz_document | webkitKeyframes | generic_at_rule )
            int alt60=3;
            try { dbg.enterDecision(60, decisionCanBacktrack[60]);

            switch ( input.LA(1) ) {
            case MOZ_DOCUMENT_SYM:
                {
                alt60=1;
                }
                break;
            case WEBKIT_KEYFRAMES_SYM:
                {
                alt60=2;
                }
                break;
            case AT_IDENT:
                {
                alt60=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(60);}

            switch (alt60) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:447:3: moz_document
                    {
                    dbg.location(447,3);
                    pushFollow(FOLLOW_moz_document_in_vendorAtRule1394);
                    moz_document();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:447:18: webkitKeyframes
                    {
                    dbg.location(447,18);
                    pushFollow(FOLLOW_webkitKeyframes_in_vendorAtRule1398);
                    webkitKeyframes();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:447:36: generic_at_rule
                    {
                    dbg.location(447,36);
                    pushFollow(FOLLOW_generic_at_rule_in_vendorAtRule1402);
                    generic_at_rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(447, 51);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vendorAtRule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "vendorAtRule"


    // $ANTLR start "atRuleId"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:449:1: atRuleId : ( IDENT | STRING );
    public final void atRuleId() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "atRuleId");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(449, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:450:2: ( IDENT | STRING )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(450,2);
            if ( (input.LA(1)>=IDENT && input.LA(1)<=STRING) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(452, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "atRuleId");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "atRuleId"


    // $ANTLR start "generic_at_rule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:1: generic_at_rule : AT_IDENT ( WS )* ( atRuleId ( WS )* )? LBRACE syncTo_RBRACE RBRACE ;
    public final void generic_at_rule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "generic_at_rule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(454, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:455:5: ( AT_IDENT ( WS )* ( atRuleId ( WS )* )? LBRACE syncTo_RBRACE RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:455:7: AT_IDENT ( WS )* ( atRuleId ( WS )* )? LBRACE syncTo_RBRACE RBRACE
            {
            dbg.location(455,7);
            match(input,AT_IDENT,FOLLOW_AT_IDENT_in_generic_at_rule1438); if (state.failed) return ;
            dbg.location(455,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:455:16: ( WS )*
            try { dbg.enterSubRule(61);

            loop61:
            do {
                int alt61=2;
                try { dbg.enterDecision(61, decisionCanBacktrack[61]);

                int LA61_0 = input.LA(1);

                if ( (LA61_0==WS) ) {
                    alt61=1;
                }


                } finally {dbg.exitDecision(61);}

                switch (alt61) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:455:16: WS
            	    {
            	    dbg.location(455,16);
            	    match(input,WS,FOLLOW_WS_in_generic_at_rule1440); if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);
            } finally {dbg.exitSubRule(61);}

            dbg.location(455,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:455:20: ( atRuleId ( WS )* )?
            int alt63=2;
            try { dbg.enterSubRule(63);
            try { dbg.enterDecision(63, decisionCanBacktrack[63]);

            int LA63_0 = input.LA(1);

            if ( ((LA63_0>=IDENT && LA63_0<=STRING)) ) {
                alt63=1;
            }
            } finally {dbg.exitDecision(63);}

            switch (alt63) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:455:22: atRuleId ( WS )*
                    {
                    dbg.location(455,22);
                    pushFollow(FOLLOW_atRuleId_in_generic_at_rule1445);
                    atRuleId();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(455,31);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:455:31: ( WS )*
                    try { dbg.enterSubRule(62);

                    loop62:
                    do {
                        int alt62=2;
                        try { dbg.enterDecision(62, decisionCanBacktrack[62]);

                        int LA62_0 = input.LA(1);

                        if ( (LA62_0==WS) ) {
                            alt62=1;
                        }


                        } finally {dbg.exitDecision(62);}

                        switch (alt62) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:455:31: WS
                    	    {
                    	    dbg.location(455,31);
                    	    match(input,WS,FOLLOW_WS_in_generic_at_rule1447); if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop62;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(62);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(63);}

            dbg.location(456,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_generic_at_rule1462); if (state.failed) return ;
            dbg.location(457,10);
            pushFollow(FOLLOW_syncTo_RBRACE_in_generic_at_rule1474);
            syncTo_RBRACE();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(458,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_generic_at_rule1484); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(459, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "generic_at_rule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "generic_at_rule"


    // $ANTLR start "moz_document"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:460:1: moz_document : MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE ;
    public final void moz_document() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "moz_document");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(460, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:461:2: ( MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:2: MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE
            {
            dbg.location(462,2);
            match(input,MOZ_DOCUMENT_SYM,FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document1500); if (state.failed) return ;
            dbg.location(462,19);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:19: ( ws )?
            int alt64=2;
            try { dbg.enterSubRule(64);
            try { dbg.enterDecision(64, decisionCanBacktrack[64]);

            int LA64_0 = input.LA(1);

            if ( (LA64_0==WS||(LA64_0>=NL && LA64_0<=COMMENT)) ) {
                alt64=1;
            }
            } finally {dbg.exitDecision(64);}

            switch (alt64) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:19: ws
                    {
                    dbg.location(462,19);
                    pushFollow(FOLLOW_ws_in_moz_document1502);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(64);}

            dbg.location(462,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:23: ( moz_document_function ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:25: moz_document_function ( ws )?
            {
            dbg.location(462,25);
            pushFollow(FOLLOW_moz_document_function_in_moz_document1507);
            moz_document_function();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(462,47);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:47: ( ws )?
            int alt65=2;
            try { dbg.enterSubRule(65);
            try { dbg.enterDecision(65, decisionCanBacktrack[65]);

            int LA65_0 = input.LA(1);

            if ( (LA65_0==WS||(LA65_0>=NL && LA65_0<=COMMENT)) ) {
                alt65=1;
            }
            } finally {dbg.exitDecision(65);}

            switch (alt65) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:47: ws
                    {
                    dbg.location(462,47);
                    pushFollow(FOLLOW_ws_in_moz_document1509);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(65);}


            }

            dbg.location(462,52);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:52: ( COMMA ( ws )? moz_document_function ( ws )? )*
            try { dbg.enterSubRule(68);

            loop68:
            do {
                int alt68=2;
                try { dbg.enterDecision(68, decisionCanBacktrack[68]);

                int LA68_0 = input.LA(1);

                if ( (LA68_0==COMMA) ) {
                    alt68=1;
                }


                } finally {dbg.exitDecision(68);}

                switch (alt68) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:54: COMMA ( ws )? moz_document_function ( ws )?
            	    {
            	    dbg.location(462,54);
            	    match(input,COMMA,FOLLOW_COMMA_in_moz_document1515); if (state.failed) return ;
            	    dbg.location(462,60);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:60: ( ws )?
            	    int alt66=2;
            	    try { dbg.enterSubRule(66);
            	    try { dbg.enterDecision(66, decisionCanBacktrack[66]);

            	    int LA66_0 = input.LA(1);

            	    if ( (LA66_0==WS||(LA66_0>=NL && LA66_0<=COMMENT)) ) {
            	        alt66=1;
            	    }
            	    } finally {dbg.exitDecision(66);}

            	    switch (alt66) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:60: ws
            	            {
            	            dbg.location(462,60);
            	            pushFollow(FOLLOW_ws_in_moz_document1517);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(66);}

            	    dbg.location(462,64);
            	    pushFollow(FOLLOW_moz_document_function_in_moz_document1520);
            	    moz_document_function();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(462,86);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:86: ( ws )?
            	    int alt67=2;
            	    try { dbg.enterSubRule(67);
            	    try { dbg.enterDecision(67, decisionCanBacktrack[67]);

            	    int LA67_0 = input.LA(1);

            	    if ( (LA67_0==WS||(LA67_0>=NL && LA67_0<=COMMENT)) ) {
            	        alt67=1;
            	    }
            	    } finally {dbg.exitDecision(67);}

            	    switch (alt67) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:86: ws
            	            {
            	            dbg.location(462,86);
            	            pushFollow(FOLLOW_ws_in_moz_document1522);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(67);}


            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);
            } finally {dbg.exitSubRule(68);}

            dbg.location(463,2);
            match(input,LBRACE,FOLLOW_LBRACE_in_moz_document1529); if (state.failed) return ;
            dbg.location(463,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:463:9: ( ws )?
            int alt69=2;
            try { dbg.enterSubRule(69);
            try { dbg.enterDecision(69, decisionCanBacktrack[69]);

            int LA69_0 = input.LA(1);

            if ( (LA69_0==WS||(LA69_0>=NL && LA69_0<=COMMENT)) ) {
                alt69=1;
            }
            } finally {dbg.exitDecision(69);}

            switch (alt69) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:463:9: ws
                    {
                    dbg.location(463,9);
                    pushFollow(FOLLOW_ws_in_moz_document1531);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(69);}

            dbg.location(464,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:464:3: ( body )?
            int alt70=2;
            try { dbg.enterSubRule(70);
            try { dbg.enterDecision(70, decisionCanBacktrack[70]);

            int LA70_0 = input.LA(1);

            if ( (LA70_0==IDENT||(LA70_0>=IMPORT_SYM && LA70_0<=MEDIA_SYM)||LA70_0==GEN||LA70_0==COLON||LA70_0==AT_IDENT||LA70_0==MOZ_DOCUMENT_SYM||LA70_0==WEBKIT_KEYFRAMES_SYM||(LA70_0>=PAGE_SYM && LA70_0<=FONT_FACE_SYM)||LA70_0==GREATER||(LA70_0>=MINUS && LA70_0<=PIPE)||LA70_0==LESS_AND||LA70_0==SASS_VAR||(LA70_0>=SASS_MIXIN && LA70_0<=SASS_INCLUDE)||(LA70_0>=SASS_DEBUG && LA70_0<=SASS_IF)||(LA70_0>=SASS_FOR && LA70_0<=SASS_FUNCTION)) ) {
                alt70=1;
            }
            } finally {dbg.exitDecision(70);}

            switch (alt70) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:464:3: body
                    {
                    dbg.location(464,3);
                    pushFollow(FOLLOW_body_in_moz_document1536);
                    body();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(70);}

            dbg.location(465,2);
            match(input,RBRACE,FOLLOW_RBRACE_in_moz_document1541); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(466, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moz_document");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "moz_document"


    // $ANTLR start "moz_document_function"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:468:1: moz_document_function : ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP );
    public final void moz_document_function() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "moz_document_function");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(468, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:469:2: ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(469,2);
            if ( input.LA(1)==URI||(input.LA(1)>=MOZ_URL_PREFIX && input.LA(1)<=MOZ_REGEXP) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(471, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moz_document_function");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "moz_document_function"


    // $ANTLR start "webkitKeyframes"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:1: webkitKeyframes : WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE ;
    public final void webkitKeyframes() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "webkitKeyframes");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(474, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:475:2: ( WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:476:2: WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE
            {
            dbg.location(476,2);
            match(input,WEBKIT_KEYFRAMES_SYM,FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes1582); if (state.failed) return ;
            dbg.location(476,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:476:23: ( ws )?
            int alt71=2;
            try { dbg.enterSubRule(71);
            try { dbg.enterDecision(71, decisionCanBacktrack[71]);

            int LA71_0 = input.LA(1);

            if ( (LA71_0==WS||(LA71_0>=NL && LA71_0<=COMMENT)) ) {
                alt71=1;
            }
            } finally {dbg.exitDecision(71);}

            switch (alt71) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:476:23: ws
                    {
                    dbg.location(476,23);
                    pushFollow(FOLLOW_ws_in_webkitKeyframes1584);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(71);}

            dbg.location(476,27);
            pushFollow(FOLLOW_atRuleId_in_webkitKeyframes1587);
            atRuleId();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(476,36);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:476:36: ( ws )?
            int alt72=2;
            try { dbg.enterSubRule(72);
            try { dbg.enterDecision(72, decisionCanBacktrack[72]);

            int LA72_0 = input.LA(1);

            if ( (LA72_0==WS||(LA72_0>=NL && LA72_0<=COMMENT)) ) {
                alt72=1;
            }
            } finally {dbg.exitDecision(72);}

            switch (alt72) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:476:36: ws
                    {
                    dbg.location(476,36);
                    pushFollow(FOLLOW_ws_in_webkitKeyframes1589);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(72);}

            dbg.location(477,2);
            match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframes1594); if (state.failed) return ;
            dbg.location(477,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:477:9: ( ws )?
            int alt73=2;
            try { dbg.enterSubRule(73);
            try { dbg.enterDecision(73, decisionCanBacktrack[73]);

            int LA73_0 = input.LA(1);

            if ( (LA73_0==WS||(LA73_0>=NL && LA73_0<=COMMENT)) ) {
                alt73=1;
            }
            } finally {dbg.exitDecision(73);}

            switch (alt73) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:477:9: ws
                    {
                    dbg.location(477,9);
                    pushFollow(FOLLOW_ws_in_webkitKeyframes1596);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(73);}

            dbg.location(478,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:478:3: ( webkitKeyframesBlock ( ws )? )*
            try { dbg.enterSubRule(75);

            loop75:
            do {
                int alt75=2;
                try { dbg.enterDecision(75, decisionCanBacktrack[75]);

                int LA75_0 = input.LA(1);

                if ( (LA75_0==IDENT||LA75_0==PERCENTAGE) ) {
                    alt75=1;
                }


                } finally {dbg.exitDecision(75);}

                switch (alt75) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:478:5: webkitKeyframesBlock ( ws )?
            	    {
            	    dbg.location(478,5);
            	    pushFollow(FOLLOW_webkitKeyframesBlock_in_webkitKeyframes1603);
            	    webkitKeyframesBlock();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(478,26);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:478:26: ( ws )?
            	    int alt74=2;
            	    try { dbg.enterSubRule(74);
            	    try { dbg.enterDecision(74, decisionCanBacktrack[74]);

            	    int LA74_0 = input.LA(1);

            	    if ( (LA74_0==WS||(LA74_0>=NL && LA74_0<=COMMENT)) ) {
            	        alt74=1;
            	    }
            	    } finally {dbg.exitDecision(74);}

            	    switch (alt74) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:478:26: ws
            	            {
            	            dbg.location(478,26);
            	            pushFollow(FOLLOW_ws_in_webkitKeyframes1605);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(74);}


            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);
            } finally {dbg.exitSubRule(75);}

            dbg.location(479,2);
            match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframes1612); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(480, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "webkitKeyframes");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "webkitKeyframes"


    // $ANTLR start "webkitKeyframesBlock"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:1: webkitKeyframesBlock : webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow declarations RBRACE ;
    public final void webkitKeyframesBlock() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "webkitKeyframesBlock");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(482, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:483:2: ( webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow declarations RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:484:2: webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow declarations RBRACE
            {
            dbg.location(484,2);
            pushFollow(FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock1625);
            webkitKeyframeSelectors();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(484,26);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:484:26: ( ws )?
            int alt76=2;
            try { dbg.enterSubRule(76);
            try { dbg.enterDecision(76, decisionCanBacktrack[76]);

            int LA76_0 = input.LA(1);

            if ( (LA76_0==WS||(LA76_0>=NL && LA76_0<=COMMENT)) ) {
                alt76=1;
            }
            } finally {dbg.exitDecision(76);}

            switch (alt76) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:484:26: ws
                    {
                    dbg.location(484,26);
                    pushFollow(FOLLOW_ws_in_webkitKeyframesBlock1627);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(76);}

            dbg.location(486,2);
            match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframesBlock1632); if (state.failed) return ;
            dbg.location(486,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:10: ( ws )?
            int alt77=2;
            try { dbg.enterSubRule(77);
            try { dbg.enterDecision(77, decisionCanBacktrack[77]);

            int LA77_0 = input.LA(1);

            if ( (LA77_0==WS||(LA77_0>=NL && LA77_0<=COMMENT)) ) {
                alt77=1;
            }
            } finally {dbg.exitDecision(77);}

            switch (alt77) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:10: ws
                    {
                    dbg.location(486,10);
                    pushFollow(FOLLOW_ws_in_webkitKeyframesBlock1635);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(77);}

            dbg.location(486,14);
            pushFollow(FOLLOW_syncToFollow_in_webkitKeyframesBlock1638);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(487,3);
            pushFollow(FOLLOW_declarations_in_webkitKeyframesBlock1642);
            declarations();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(488,2);
            match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframesBlock1645); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(489, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "webkitKeyframesBlock");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "webkitKeyframesBlock"


    // $ANTLR start "webkitKeyframeSelectors"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:491:1: webkitKeyframeSelectors : ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )* ;
    public final void webkitKeyframeSelectors() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "webkitKeyframeSelectors");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(491, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:492:2: ( ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:493:2: ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*
            {
            dbg.location(493,2);
            if ( input.LA(1)==IDENT||input.LA(1)==PERCENTAGE ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(493,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:493:25: ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*
            try { dbg.enterSubRule(80);

            loop80:
            do {
                int alt80=2;
                try { dbg.enterDecision(80, decisionCanBacktrack[80]);

                try {
                    isCyclicDecision = true;
                    alt80 = dfa80.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(80);}

                switch (alt80) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:493:27: ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE )
            	    {
            	    dbg.location(493,27);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:493:27: ( ws )?
            	    int alt78=2;
            	    try { dbg.enterSubRule(78);
            	    try { dbg.enterDecision(78, decisionCanBacktrack[78]);

            	    int LA78_0 = input.LA(1);

            	    if ( (LA78_0==WS||(LA78_0>=NL && LA78_0<=COMMENT)) ) {
            	        alt78=1;
            	    }
            	    } finally {dbg.exitDecision(78);}

            	    switch (alt78) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:493:27: ws
            	            {
            	            dbg.location(493,27);
            	            pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors1672);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(78);}

            	    dbg.location(493,31);
            	    match(input,COMMA,FOLLOW_COMMA_in_webkitKeyframeSelectors1675); if (state.failed) return ;
            	    dbg.location(493,37);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:493:37: ( ws )?
            	    int alt79=2;
            	    try { dbg.enterSubRule(79);
            	    try { dbg.enterDecision(79, decisionCanBacktrack[79]);

            	    int LA79_0 = input.LA(1);

            	    if ( (LA79_0==WS||(LA79_0>=NL && LA79_0<=COMMENT)) ) {
            	        alt79=1;
            	    }
            	    } finally {dbg.exitDecision(79);}

            	    switch (alt79) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:493:37: ws
            	            {
            	            dbg.location(493,37);
            	            pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors1677);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(79);}

            	    dbg.location(493,41);
            	    if ( input.LA(1)==IDENT||input.LA(1)==PERCENTAGE ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);
            } finally {dbg.exitSubRule(80);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(494, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "webkitKeyframeSelectors");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "webkitKeyframeSelectors"


    // $ANTLR start "page"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:496:1: page : PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( declaration | margin ( ws )? )? ( SEMI ( ws )? ( declaration | margin ( ws )? )? )* RBRACE ;
    public final void page() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "page");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(496, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:497:5: ( PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( declaration | margin ( ws )? )? ( SEMI ( ws )? ( declaration | margin ( ws )? )? )* RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:497:7: PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( declaration | margin ( ws )? )? ( SEMI ( ws )? ( declaration | margin ( ws )? )? )* RBRACE
            {
            dbg.location(497,7);
            match(input,PAGE_SYM,FOLLOW_PAGE_SYM_in_page1709); if (state.failed) return ;
            dbg.location(497,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:497:16: ( ws )?
            int alt81=2;
            try { dbg.enterSubRule(81);
            try { dbg.enterDecision(81, decisionCanBacktrack[81]);

            int LA81_0 = input.LA(1);

            if ( (LA81_0==WS||(LA81_0>=NL && LA81_0<=COMMENT)) ) {
                alt81=1;
            }
            } finally {dbg.exitDecision(81);}

            switch (alt81) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:497:16: ws
                    {
                    dbg.location(497,16);
                    pushFollow(FOLLOW_ws_in_page1711);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(81);}

            dbg.location(497,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:497:20: ( IDENT ( ws )? )?
            int alt83=2;
            try { dbg.enterSubRule(83);
            try { dbg.enterDecision(83, decisionCanBacktrack[83]);

            int LA83_0 = input.LA(1);

            if ( (LA83_0==IDENT) ) {
                alt83=1;
            }
            } finally {dbg.exitDecision(83);}

            switch (alt83) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:497:22: IDENT ( ws )?
                    {
                    dbg.location(497,22);
                    match(input,IDENT,FOLLOW_IDENT_in_page1716); if (state.failed) return ;
                    dbg.location(497,28);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:497:28: ( ws )?
                    int alt82=2;
                    try { dbg.enterSubRule(82);
                    try { dbg.enterDecision(82, decisionCanBacktrack[82]);

                    int LA82_0 = input.LA(1);

                    if ( (LA82_0==WS||(LA82_0>=NL && LA82_0<=COMMENT)) ) {
                        alt82=1;
                    }
                    } finally {dbg.exitDecision(82);}

                    switch (alt82) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:497:28: ws
                            {
                            dbg.location(497,28);
                            pushFollow(FOLLOW_ws_in_page1718);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(82);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(83);}

            dbg.location(497,35);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:497:35: ( pseudoPage ( ws )? )?
            int alt85=2;
            try { dbg.enterSubRule(85);
            try { dbg.enterDecision(85, decisionCanBacktrack[85]);

            int LA85_0 = input.LA(1);

            if ( (LA85_0==COLON) ) {
                alt85=1;
            }
            } finally {dbg.exitDecision(85);}

            switch (alt85) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:497:36: pseudoPage ( ws )?
                    {
                    dbg.location(497,36);
                    pushFollow(FOLLOW_pseudoPage_in_page1725);
                    pseudoPage();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(497,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:497:47: ( ws )?
                    int alt84=2;
                    try { dbg.enterSubRule(84);
                    try { dbg.enterDecision(84, decisionCanBacktrack[84]);

                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==WS||(LA84_0>=NL && LA84_0<=COMMENT)) ) {
                        alt84=1;
                    }
                    } finally {dbg.exitDecision(84);}

                    switch (alt84) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:497:47: ws
                            {
                            dbg.location(497,47);
                            pushFollow(FOLLOW_ws_in_page1727);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(84);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(85);}

            dbg.location(498,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_page1740); if (state.failed) return ;
            dbg.location(498,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:498:16: ( ws )?
            int alt86=2;
            try { dbg.enterSubRule(86);
            try { dbg.enterDecision(86, decisionCanBacktrack[86]);

            int LA86_0 = input.LA(1);

            if ( (LA86_0==WS||(LA86_0>=NL && LA86_0<=COMMENT)) ) {
                alt86=1;
            }
            } finally {dbg.exitDecision(86);}

            switch (alt86) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:498:16: ws
                    {
                    dbg.location(498,16);
                    pushFollow(FOLLOW_ws_in_page1742);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(86);}

            dbg.location(502,13);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:13: ( declaration | margin ( ws )? )?
            int alt88=3;
            try { dbg.enterSubRule(88);
            try { dbg.enterDecision(88, decisionCanBacktrack[88]);

            int LA88_0 = input.LA(1);

            if ( (LA88_0==IDENT||LA88_0==MEDIA_SYM||LA88_0==GEN||LA88_0==AT_IDENT||(LA88_0>=MINUS && LA88_0<=DOT)||LA88_0==STAR||LA88_0==SASS_VAR) ) {
                alt88=1;
            }
            else if ( ((LA88_0>=TOPLEFTCORNER_SYM && LA88_0<=RIGHTBOTTOM_SYM)) ) {
                alt88=2;
            }
            } finally {dbg.exitDecision(88);}

            switch (alt88) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:14: declaration
                    {
                    dbg.location(502,14);
                    pushFollow(FOLLOW_declaration_in_page1797);
                    declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:26: margin ( ws )?
                    {
                    dbg.location(502,26);
                    pushFollow(FOLLOW_margin_in_page1799);
                    margin();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(502,33);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:33: ( ws )?
                    int alt87=2;
                    try { dbg.enterSubRule(87);
                    try { dbg.enterDecision(87, decisionCanBacktrack[87]);

                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==WS||(LA87_0>=NL && LA87_0<=COMMENT)) ) {
                        alt87=1;
                    }
                    } finally {dbg.exitDecision(87);}

                    switch (alt87) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:33: ws
                            {
                            dbg.location(502,33);
                            pushFollow(FOLLOW_ws_in_page1801);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(87);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(88);}

            dbg.location(502,39);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:39: ( SEMI ( ws )? ( declaration | margin ( ws )? )? )*
            try { dbg.enterSubRule(92);

            loop92:
            do {
                int alt92=2;
                try { dbg.enterDecision(92, decisionCanBacktrack[92]);

                int LA92_0 = input.LA(1);

                if ( (LA92_0==SEMI) ) {
                    alt92=1;
                }


                } finally {dbg.exitDecision(92);}

                switch (alt92) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:40: SEMI ( ws )? ( declaration | margin ( ws )? )?
            	    {
            	    dbg.location(502,40);
            	    match(input,SEMI,FOLLOW_SEMI_in_page1807); if (state.failed) return ;
            	    dbg.location(502,45);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:45: ( ws )?
            	    int alt89=2;
            	    try { dbg.enterSubRule(89);
            	    try { dbg.enterDecision(89, decisionCanBacktrack[89]);

            	    int LA89_0 = input.LA(1);

            	    if ( (LA89_0==WS||(LA89_0>=NL && LA89_0<=COMMENT)) ) {
            	        alt89=1;
            	    }
            	    } finally {dbg.exitDecision(89);}

            	    switch (alt89) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:45: ws
            	            {
            	            dbg.location(502,45);
            	            pushFollow(FOLLOW_ws_in_page1809);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(89);}

            	    dbg.location(502,49);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:49: ( declaration | margin ( ws )? )?
            	    int alt91=3;
            	    try { dbg.enterSubRule(91);
            	    try { dbg.enterDecision(91, decisionCanBacktrack[91]);

            	    int LA91_0 = input.LA(1);

            	    if ( (LA91_0==IDENT||LA91_0==MEDIA_SYM||LA91_0==GEN||LA91_0==AT_IDENT||(LA91_0>=MINUS && LA91_0<=DOT)||LA91_0==STAR||LA91_0==SASS_VAR) ) {
            	        alt91=1;
            	    }
            	    else if ( ((LA91_0>=TOPLEFTCORNER_SYM && LA91_0<=RIGHTBOTTOM_SYM)) ) {
            	        alt91=2;
            	    }
            	    } finally {dbg.exitDecision(91);}

            	    switch (alt91) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:50: declaration
            	            {
            	            dbg.location(502,50);
            	            pushFollow(FOLLOW_declaration_in_page1813);
            	            declaration();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:62: margin ( ws )?
            	            {
            	            dbg.location(502,62);
            	            pushFollow(FOLLOW_margin_in_page1815);
            	            margin();

            	            state._fsp--;
            	            if (state.failed) return ;
            	            dbg.location(502,69);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:69: ( ws )?
            	            int alt90=2;
            	            try { dbg.enterSubRule(90);
            	            try { dbg.enterDecision(90, decisionCanBacktrack[90]);

            	            int LA90_0 = input.LA(1);

            	            if ( (LA90_0==WS||(LA90_0>=NL && LA90_0<=COMMENT)) ) {
            	                alt90=1;
            	            }
            	            } finally {dbg.exitDecision(90);}

            	            switch (alt90) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:69: ws
            	                    {
            	                    dbg.location(502,69);
            	                    pushFollow(FOLLOW_ws_in_page1817);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(90);}


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(91);}


            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);
            } finally {dbg.exitSubRule(92);}

            dbg.location(503,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_page1832); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(504, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "page");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "page"


    // $ANTLR start "counterStyle"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:506:1: counterStyle : COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule declarations RBRACE ;
    public final void counterStyle() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "counterStyle");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(506, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:507:5: ( COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule declarations RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:507:7: COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule declarations RBRACE
            {
            dbg.location(507,7);
            match(input,COUNTER_STYLE_SYM,FOLLOW_COUNTER_STYLE_SYM_in_counterStyle1853); if (state.failed) return ;
            dbg.location(507,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:507:25: ( ws )?
            int alt93=2;
            try { dbg.enterSubRule(93);
            try { dbg.enterDecision(93, decisionCanBacktrack[93]);

            int LA93_0 = input.LA(1);

            if ( (LA93_0==WS||(LA93_0>=NL && LA93_0<=COMMENT)) ) {
                alt93=1;
            }
            } finally {dbg.exitDecision(93);}

            switch (alt93) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:507:25: ws
                    {
                    dbg.location(507,25);
                    pushFollow(FOLLOW_ws_in_counterStyle1855);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(93);}

            dbg.location(507,29);
            match(input,IDENT,FOLLOW_IDENT_in_counterStyle1858); if (state.failed) return ;
            dbg.location(507,35);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:507:35: ( ws )?
            int alt94=2;
            try { dbg.enterSubRule(94);
            try { dbg.enterDecision(94, decisionCanBacktrack[94]);

            int LA94_0 = input.LA(1);

            if ( (LA94_0==WS||(LA94_0>=NL && LA94_0<=COMMENT)) ) {
                alt94=1;
            }
            } finally {dbg.exitDecision(94);}

            switch (alt94) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:507:35: ws
                    {
                    dbg.location(507,35);
                    pushFollow(FOLLOW_ws_in_counterStyle1860);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(94);}

            dbg.location(508,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_counterStyle1871); if (state.failed) return ;
            dbg.location(508,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:16: ( ws )?
            int alt95=2;
            try { dbg.enterSubRule(95);
            try { dbg.enterDecision(95, decisionCanBacktrack[95]);

            int LA95_0 = input.LA(1);

            if ( (LA95_0==WS||(LA95_0>=NL && LA95_0<=COMMENT)) ) {
                alt95=1;
            }
            } finally {dbg.exitDecision(95);}

            switch (alt95) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:16: ws
                    {
                    dbg.location(508,16);
                    pushFollow(FOLLOW_ws_in_counterStyle1873);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(95);}

            dbg.location(508,20);
            pushFollow(FOLLOW_syncToDeclarationsRule_in_counterStyle1876);
            syncToDeclarationsRule();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(509,3);
            pushFollow(FOLLOW_declarations_in_counterStyle1880);
            declarations();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(510,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_counterStyle1890); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(511, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "counterStyle");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "counterStyle"


    // $ANTLR start "fontFace"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:513:1: fontFace : FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule declarations RBRACE ;
    public final void fontFace() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fontFace");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(513, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:514:5: ( FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule declarations RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:514:7: FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule declarations RBRACE
            {
            dbg.location(514,7);
            match(input,FONT_FACE_SYM,FOLLOW_FONT_FACE_SYM_in_fontFace1911); if (state.failed) return ;
            dbg.location(514,21);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:514:21: ( ws )?
            int alt96=2;
            try { dbg.enterSubRule(96);
            try { dbg.enterDecision(96, decisionCanBacktrack[96]);

            int LA96_0 = input.LA(1);

            if ( (LA96_0==WS||(LA96_0>=NL && LA96_0<=COMMENT)) ) {
                alt96=1;
            }
            } finally {dbg.exitDecision(96);}

            switch (alt96) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:514:21: ws
                    {
                    dbg.location(514,21);
                    pushFollow(FOLLOW_ws_in_fontFace1913);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(96);}

            dbg.location(515,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_fontFace1924); if (state.failed) return ;
            dbg.location(515,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:515:16: ( ws )?
            int alt97=2;
            try { dbg.enterSubRule(97);
            try { dbg.enterDecision(97, decisionCanBacktrack[97]);

            int LA97_0 = input.LA(1);

            if ( (LA97_0==WS||(LA97_0>=NL && LA97_0<=COMMENT)) ) {
                alt97=1;
            }
            } finally {dbg.exitDecision(97);}

            switch (alt97) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:515:16: ws
                    {
                    dbg.location(515,16);
                    pushFollow(FOLLOW_ws_in_fontFace1926);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(97);}

            dbg.location(515,20);
            pushFollow(FOLLOW_syncToDeclarationsRule_in_fontFace1929);
            syncToDeclarationsRule();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(516,3);
            pushFollow(FOLLOW_declarations_in_fontFace1933);
            declarations();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(517,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_fontFace1943); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(518, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fontFace");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fontFace"


    // $ANTLR start "margin"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:520:1: margin : margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule declarations RBRACE ;
    public final void margin() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "margin");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(520, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:521:2: ( margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule declarations RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:521:4: margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule declarations RBRACE
            {
            dbg.location(521,4);
            pushFollow(FOLLOW_margin_sym_in_margin1958);
            margin_sym();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(521,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:521:15: ( ws )?
            int alt98=2;
            try { dbg.enterSubRule(98);
            try { dbg.enterDecision(98, decisionCanBacktrack[98]);

            int LA98_0 = input.LA(1);

            if ( (LA98_0==WS||(LA98_0>=NL && LA98_0<=COMMENT)) ) {
                alt98=1;
            }
            } finally {dbg.exitDecision(98);}

            switch (alt98) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:521:15: ws
                    {
                    dbg.location(521,15);
                    pushFollow(FOLLOW_ws_in_margin1960);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(98);}

            dbg.location(521,19);
            match(input,LBRACE,FOLLOW_LBRACE_in_margin1963); if (state.failed) return ;
            dbg.location(521,26);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:521:26: ( ws )?
            int alt99=2;
            try { dbg.enterSubRule(99);
            try { dbg.enterDecision(99, decisionCanBacktrack[99]);

            int LA99_0 = input.LA(1);

            if ( (LA99_0==WS||(LA99_0>=NL && LA99_0<=COMMENT)) ) {
                alt99=1;
            }
            } finally {dbg.exitDecision(99);}

            switch (alt99) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:521:26: ws
                    {
                    dbg.location(521,26);
                    pushFollow(FOLLOW_ws_in_margin1965);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(99);}

            dbg.location(521,30);
            pushFollow(FOLLOW_syncToDeclarationsRule_in_margin1968);
            syncToDeclarationsRule();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(521,53);
            pushFollow(FOLLOW_declarations_in_margin1970);
            declarations();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(521,66);
            match(input,RBRACE,FOLLOW_RBRACE_in_margin1972); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(522, 8);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "margin");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "margin"


    // $ANTLR start "margin_sym"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:1: margin_sym : ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM );
    public final void margin_sym() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "margin_sym");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(524, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:525:2: ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(525,2);
            if ( (input.LA(1)>=TOPLEFTCORNER_SYM && input.LA(1)<=RIGHTBOTTOM_SYM) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(542, 8);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "margin_sym");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "margin_sym"


    // $ANTLR start "pseudoPage"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:544:1: pseudoPage : COLON IDENT ;
    public final void pseudoPage() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "pseudoPage");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(544, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:545:5: ( COLON IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:545:7: COLON IDENT
            {
            dbg.location(545,7);
            match(input,COLON,FOLLOW_COLON_in_pseudoPage2201); if (state.failed) return ;
            dbg.location(545,13);
            match(input,IDENT,FOLLOW_IDENT_in_pseudoPage2203); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(546, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pseudoPage");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "pseudoPage"


    // $ANTLR start "operator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:548:1: operator : ( SOLIDUS | COMMA );
    public final void operator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "operator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(548, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:549:5: ( SOLIDUS | COMMA )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(549,5);
            if ( input.LA(1)==COMMA||input.LA(1)==SOLIDUS ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(551, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "operator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "operator"


    // $ANTLR start "combinator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:553:1: combinator : ( PLUS ( ws )? | GREATER ( ws )? | TILDE ( ws )? | );
    public final void combinator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "combinator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(553, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:554:5: ( PLUS ( ws )? | GREATER ( ws )? | TILDE ( ws )? | )
            int alt103=4;
            try { dbg.enterDecision(103, decisionCanBacktrack[103]);

            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt103=1;
                }
                break;
            case GREATER:
                {
                alt103=2;
                }
                break;
            case TILDE:
                {
                alt103=3;
                }
                break;
            case IDENT:
            case GEN:
            case COLON:
            case HASH_SYMBOL:
            case HASH:
            case DOT:
            case LBRACKET:
            case DCOLON:
            case SASS_EXTEND_ONLY_SELECTOR:
            case STAR:
            case PIPE:
            case LESS_AND:
                {
                alt103=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(103);}

            switch (alt103) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:554:7: PLUS ( ws )?
                    {
                    dbg.location(554,7);
                    match(input,PLUS,FOLLOW_PLUS_in_combinator2253); if (state.failed) return ;
                    dbg.location(554,12);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:554:12: ( ws )?
                    int alt100=2;
                    try { dbg.enterSubRule(100);
                    try { dbg.enterDecision(100, decisionCanBacktrack[100]);

                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==WS||(LA100_0>=NL && LA100_0<=COMMENT)) ) {
                        alt100=1;
                    }
                    } finally {dbg.exitDecision(100);}

                    switch (alt100) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:554:12: ws
                            {
                            dbg.location(554,12);
                            pushFollow(FOLLOW_ws_in_combinator2255);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(100);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:555:7: GREATER ( ws )?
                    {
                    dbg.location(555,7);
                    match(input,GREATER,FOLLOW_GREATER_in_combinator2264); if (state.failed) return ;
                    dbg.location(555,15);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:555:15: ( ws )?
                    int alt101=2;
                    try { dbg.enterSubRule(101);
                    try { dbg.enterDecision(101, decisionCanBacktrack[101]);

                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==WS||(LA101_0>=NL && LA101_0<=COMMENT)) ) {
                        alt101=1;
                    }
                    } finally {dbg.exitDecision(101);}

                    switch (alt101) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:555:15: ws
                            {
                            dbg.location(555,15);
                            pushFollow(FOLLOW_ws_in_combinator2266);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(101);}


                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:556:7: TILDE ( ws )?
                    {
                    dbg.location(556,7);
                    match(input,TILDE,FOLLOW_TILDE_in_combinator2275); if (state.failed) return ;
                    dbg.location(556,13);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:556:13: ( ws )?
                    int alt102=2;
                    try { dbg.enterSubRule(102);
                    try { dbg.enterDecision(102, decisionCanBacktrack[102]);

                    int LA102_0 = input.LA(1);

                    if ( (LA102_0==WS||(LA102_0>=NL && LA102_0<=COMMENT)) ) {
                        alt102=1;
                    }
                    } finally {dbg.exitDecision(102);}

                    switch (alt102) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:556:13: ws
                            {
                            dbg.location(556,13);
                            pushFollow(FOLLOW_ws_in_combinator2277);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(102);}


                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:558:5: 
                    {
                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(558, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "combinator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "combinator"


    // $ANTLR start "unaryOperator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:560:1: unaryOperator : ( MINUS | PLUS );
    public final void unaryOperator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "unaryOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(560, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:561:5: ( MINUS | PLUS )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(561,5);
            if ( input.LA(1)==PLUS||input.LA(1)==MINUS ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(563, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unaryOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "unaryOperator"


    // $ANTLR start "property"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:565:1: property : ( ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression | IDENT | GEN | {...}? cp_variable ) ( ws )? ;
    public final void property() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "property");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(565, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:566:5: ( ( ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression | IDENT | GEN | {...}? cp_variable ) ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:567:5: ( ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression | IDENT | GEN | {...}? cp_variable ) ( ws )?
            {
            dbg.location(567,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:567:5: ( ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression | IDENT | GEN | {...}? cp_variable )
            int alt104=4;
            try { dbg.enterSubRule(104);
            try { dbg.enterDecision(104, decisionCanBacktrack[104]);

            int LA104_0 = input.LA(1);

            if ( (LA104_0==HASH_SYMBOL) && (synpred5_Css3())) {
                alt104=1;
            }
            else if ( (LA104_0==IDENT) ) {
                int LA104_2 = input.LA(2);

                if ( (synpred5_Css3()) ) {
                    alt104=1;
                }
                else if ( (true) ) {
                    alt104=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 104, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA104_0==MINUS||(LA104_0>=HASH && LA104_0<=DOT)) && (synpred5_Css3())) {
                alt104=1;
            }
            else if ( (LA104_0==GEN) ) {
                alt104=3;
            }
            else if ( (LA104_0==MEDIA_SYM||LA104_0==AT_IDENT||LA104_0==SASS_VAR) ) {
                alt104=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(104);}

            switch (alt104) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:570:9: ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression
                    {
                    dbg.location(570,53);
                    pushFollow(FOLLOW_sass_declaration_interpolation_expression_in_property2384);
                    sass_declaration_interpolation_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:571:11: IDENT
                    {
                    dbg.location(571,11);
                    match(input,IDENT,FOLLOW_IDENT_in_property2396); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:572:11: GEN
                    {
                    dbg.location(572,11);
                    match(input,GEN,FOLLOW_GEN_in_property2409); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:573:11: {...}? cp_variable
                    {
                    dbg.location(573,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "property", "isCssPreprocessorSource()");
                    }
                    dbg.location(573,40);
                    pushFollow(FOLLOW_cp_variable_in_property2424);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(104);}

            dbg.location(574,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:574:7: ( ws )?
            int alt105=2;
            try { dbg.enterSubRule(105);
            try { dbg.enterDecision(105, decisionCanBacktrack[105]);

            int LA105_0 = input.LA(1);

            if ( (LA105_0==WS||(LA105_0>=NL && LA105_0<=COMMENT)) ) {
                alt105=1;
            }
            } finally {dbg.exitDecision(105);}

            switch (alt105) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:574:7: ws
                    {
                    dbg.location(574,7);
                    pushFollow(FOLLOW_ws_in_property2432);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(105);}


            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(COLON)); 
                
        }
        finally {
        }
        dbg.location(575, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "property");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "property"


    // $ANTLR start "rule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:580:1: rule : ( ( cp_mixin_declaration )=> cp_mixin_declaration | selectorsGroup ) LBRACE ( ws )? syncToFollow declarations RBRACE ;
    public final void rule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "rule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(580, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:581:5: ( ( ( cp_mixin_declaration )=> cp_mixin_declaration | selectorsGroup ) LBRACE ( ws )? syncToFollow declarations RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:581:9: ( ( cp_mixin_declaration )=> cp_mixin_declaration | selectorsGroup ) LBRACE ( ws )? syncToFollow declarations RBRACE
            {
            dbg.location(581,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:581:9: ( ( cp_mixin_declaration )=> cp_mixin_declaration | selectorsGroup )
            int alt106=2;
            try { dbg.enterSubRule(106);
            try { dbg.enterDecision(106, decisionCanBacktrack[106]);

            try {
                isCyclicDecision = true;
                alt106 = dfa106.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(106);}

            switch (alt106) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:584:13: ( cp_mixin_declaration )=> cp_mixin_declaration
                    {
                    dbg.location(584,37);
                    pushFollow(FOLLOW_cp_mixin_declaration_in_rule2496);
                    cp_mixin_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:586:13: selectorsGroup
                    {
                    dbg.location(586,13);
                    pushFollow(FOLLOW_selectorsGroup_in_rule2526);
                    selectorsGroup();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(106);}

            dbg.location(589,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_rule2548); if (state.failed) return ;
            dbg.location(589,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:589:16: ( ws )?
            int alt107=2;
            try { dbg.enterSubRule(107);
            try { dbg.enterDecision(107, decisionCanBacktrack[107]);

            int LA107_0 = input.LA(1);

            if ( (LA107_0==WS||(LA107_0>=NL && LA107_0<=COMMENT)) ) {
                alt107=1;
            }
            } finally {dbg.exitDecision(107);}

            switch (alt107) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:589:16: ws
                    {
                    dbg.location(589,16);
                    pushFollow(FOLLOW_ws_in_rule2550);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(107);}

            dbg.location(589,20);
            pushFollow(FOLLOW_syncToFollow_in_rule2553);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(590,13);
            pushFollow(FOLLOW_declarations_in_rule2567);
            declarations();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(591,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_rule2577); if (state.failed) return ;

            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(RBRACE));
                    input.consume(); //consume the RBRACE as well   
                    
        }
        finally {
        }
        dbg.location(592, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "rule"


    // $ANTLR start "declarations"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:600:1: declarations : ( ( cp_variable_declaration )=> cp_variable_declaration ( ws )? | ( declaration SEMI )=> declaration SEMI ( ws )? | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )* COLON (~ ( SEMI | LBRACE | RBRACE ) )* SEMI )=> declaration SEMI ( ws )? | ( sass_nested_properties )=> sass_nested_properties ( ws )? | ( rule )=> rule ( ws )? | {...}? sass_extend ( ws )? | {...}? sass_debug ( ws )? | {...}? sass_control ( ws )? | {...}? media ( ws )? | {...}? cp_mixin_call ( ws )? | {...}? sass_content ( ws )? | {...}? sass_function_return ( ws )? | {...}? importItem ( ws )? | ( (~ SEMI )* SEMI )=> syncTo_SEMI )* ( declaration )? ;
    public final void declarations() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "declarations");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(600, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:5: ( ( ( cp_variable_declaration )=> cp_variable_declaration ( ws )? | ( declaration SEMI )=> declaration SEMI ( ws )? | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )* COLON (~ ( SEMI | LBRACE | RBRACE ) )* SEMI )=> declaration SEMI ( ws )? | ( sass_nested_properties )=> sass_nested_properties ( ws )? | ( rule )=> rule ( ws )? | {...}? sass_extend ( ws )? | {...}? sass_debug ( ws )? | {...}? sass_control ( ws )? | {...}? media ( ws )? | {...}? cp_mixin_call ( ws )? | {...}? sass_content ( ws )? | {...}? sass_function_return ( ws )? | {...}? importItem ( ws )? | ( (~ SEMI )* SEMI )=> syncTo_SEMI )* ( declaration )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:602:13: ( ( cp_variable_declaration )=> cp_variable_declaration ( ws )? | ( declaration SEMI )=> declaration SEMI ( ws )? | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )* COLON (~ ( SEMI | LBRACE | RBRACE ) )* SEMI )=> declaration SEMI ( ws )? | ( sass_nested_properties )=> sass_nested_properties ( ws )? | ( rule )=> rule ( ws )? | {...}? sass_extend ( ws )? | {...}? sass_debug ( ws )? | {...}? sass_control ( ws )? | {...}? media ( ws )? | {...}? cp_mixin_call ( ws )? | {...}? sass_content ( ws )? | {...}? sass_function_return ( ws )? | {...}? importItem ( ws )? | ( (~ SEMI )* SEMI )=> syncTo_SEMI )* ( declaration )?
            {
            dbg.location(602,13);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:602:13: ( ( cp_variable_declaration )=> cp_variable_declaration ( ws )? | ( declaration SEMI )=> declaration SEMI ( ws )? | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )* COLON (~ ( SEMI | LBRACE | RBRACE ) )* SEMI )=> declaration SEMI ( ws )? | ( sass_nested_properties )=> sass_nested_properties ( ws )? | ( rule )=> rule ( ws )? | {...}? sass_extend ( ws )? | {...}? sass_debug ( ws )? | {...}? sass_control ( ws )? | {...}? media ( ws )? | {...}? cp_mixin_call ( ws )? | {...}? sass_content ( ws )? | {...}? sass_function_return ( ws )? | {...}? importItem ( ws )? | ( (~ SEMI )* SEMI )=> syncTo_SEMI )*
            try { dbg.enterSubRule(121);

            loop121:
            do {
                int alt121=15;
                try { dbg.enterDecision(121, decisionCanBacktrack[121]);

                try {
                    isCyclicDecision = true;
                    alt121 = dfa121.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(121);}

                switch (alt121) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:603:17: ( cp_variable_declaration )=> cp_variable_declaration ( ws )?
            	    {
            	    dbg.location(603,44);
            	    pushFollow(FOLLOW_cp_variable_declaration_in_declarations2643);
            	    cp_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(603,68);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:603:68: ( ws )?
            	    int alt108=2;
            	    try { dbg.enterSubRule(108);
            	    try { dbg.enterDecision(108, decisionCanBacktrack[108]);

            	    int LA108_0 = input.LA(1);

            	    if ( (LA108_0==WS||(LA108_0>=NL && LA108_0<=COMMENT)) ) {
            	        alt108=1;
            	    }
            	    } finally {dbg.exitDecision(108);}

            	    switch (alt108) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:603:68: ws
            	            {
            	            dbg.location(603,68);
            	            pushFollow(FOLLOW_ws_in_declarations2645);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(108);}


            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:3: ( declaration SEMI )=> declaration SEMI ( ws )?
            	    {
            	    dbg.location(609,23);
            	    pushFollow(FOLLOW_declaration_in_declarations2726);
            	    declaration();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(609,35);
            	    match(input,SEMI,FOLLOW_SEMI_in_declarations2728); if (state.failed) return ;
            	    dbg.location(609,40);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:40: ( ws )?
            	    int alt109=2;
            	    try { dbg.enterSubRule(109);
            	    try { dbg.enterDecision(109, decisionCanBacktrack[109]);

            	    int LA109_0 = input.LA(1);

            	    if ( (LA109_0==WS||(LA109_0>=NL && LA109_0<=COMMENT)) ) {
            	        alt109=1;
            	    }
            	    } finally {dbg.exitDecision(109);}

            	    switch (alt109) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:40: ws
            	            {
            	            dbg.location(609,40);
            	            pushFollow(FOLLOW_ws_in_declarations2730);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(109);}


            	    }
            	    break;
            	case 3 :
            	    dbg.enterAlt(3);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:3: ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )* COLON (~ ( SEMI | LBRACE | RBRACE ) )* SEMI )=> declaration SEMI ( ws )?
            	    {
            	    dbg.location(613,69);
            	    pushFollow(FOLLOW_declaration_in_declarations2815);
            	    declaration();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(613,81);
            	    match(input,SEMI,FOLLOW_SEMI_in_declarations2817); if (state.failed) return ;
            	    dbg.location(613,86);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:86: ( ws )?
            	    int alt110=2;
            	    try { dbg.enterSubRule(110);
            	    try { dbg.enterDecision(110, decisionCanBacktrack[110]);

            	    int LA110_0 = input.LA(1);

            	    if ( (LA110_0==WS||(LA110_0>=NL && LA110_0<=COMMENT)) ) {
            	        alt110=1;
            	    }
            	    } finally {dbg.exitDecision(110);}

            	    switch (alt110) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:86: ws
            	            {
            	            dbg.location(613,86);
            	            pushFollow(FOLLOW_ws_in_declarations2819);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(110);}


            	    }
            	    break;
            	case 4 :
            	    dbg.enterAlt(4);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:615:3: ( sass_nested_properties )=> sass_nested_properties ( ws )?
            	    {
            	    dbg.location(615,29);
            	    pushFollow(FOLLOW_sass_nested_properties_in_declarations2832);
            	    sass_nested_properties();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(615,52);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:615:52: ( ws )?
            	    int alt111=2;
            	    try { dbg.enterSubRule(111);
            	    try { dbg.enterDecision(111, decisionCanBacktrack[111]);

            	    int LA111_0 = input.LA(1);

            	    if ( (LA111_0==WS||(LA111_0>=NL && LA111_0<=COMMENT)) ) {
            	        alt111=1;
            	    }
            	    } finally {dbg.exitDecision(111);}

            	    switch (alt111) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:615:52: ws
            	            {
            	            dbg.location(615,52);
            	            pushFollow(FOLLOW_ws_in_declarations2834);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(111);}


            	    }
            	    break;
            	case 5 :
            	    dbg.enterAlt(5);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:617:17: ( rule )=> rule ( ws )?
            	    {
            	    dbg.location(617,25);
            	    pushFollow(FOLLOW_rule_in_declarations2861);
            	    rule();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(617,30);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:617:30: ( ws )?
            	    int alt112=2;
            	    try { dbg.enterSubRule(112);
            	    try { dbg.enterDecision(112, decisionCanBacktrack[112]);

            	    int LA112_0 = input.LA(1);

            	    if ( (LA112_0==WS||(LA112_0>=NL && LA112_0<=COMMENT)) ) {
            	        alt112=1;
            	    }
            	    } finally {dbg.exitDecision(112);}

            	    switch (alt112) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:617:30: ws
            	            {
            	            dbg.location(617,30);
            	            pushFollow(FOLLOW_ws_in_declarations2863);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(112);}


            	    }
            	    break;
            	case 6 :
            	    dbg.enterAlt(6);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:17: {...}? sass_extend ( ws )?
            	    {
            	    dbg.location(619,17);
            	    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        throw new FailedPredicateException(input, "declarations", "isScssSource()");
            	    }
            	    dbg.location(619,35);
            	    pushFollow(FOLLOW_sass_extend_in_declarations2902);
            	    sass_extend();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(619,47);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:47: ( ws )?
            	    int alt113=2;
            	    try { dbg.enterSubRule(113);
            	    try { dbg.enterDecision(113, decisionCanBacktrack[113]);

            	    int LA113_0 = input.LA(1);

            	    if ( (LA113_0==WS||(LA113_0>=NL && LA113_0<=COMMENT)) ) {
            	        alt113=1;
            	    }
            	    } finally {dbg.exitDecision(113);}

            	    switch (alt113) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:47: ws
            	            {
            	            dbg.location(619,47);
            	            pushFollow(FOLLOW_ws_in_declarations2904);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(113);}


            	    }
            	    break;
            	case 7 :
            	    dbg.enterAlt(7);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:17: {...}? sass_debug ( ws )?
            	    {
            	    dbg.location(621,17);
            	    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        throw new FailedPredicateException(input, "declarations", "isScssSource()");
            	    }
            	    dbg.location(621,35);
            	    pushFollow(FOLLOW_sass_debug_in_declarations2943);
            	    sass_debug();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(621,46);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:46: ( ws )?
            	    int alt114=2;
            	    try { dbg.enterSubRule(114);
            	    try { dbg.enterDecision(114, decisionCanBacktrack[114]);

            	    int LA114_0 = input.LA(1);

            	    if ( (LA114_0==WS||(LA114_0>=NL && LA114_0<=COMMENT)) ) {
            	        alt114=1;
            	    }
            	    } finally {dbg.exitDecision(114);}

            	    switch (alt114) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:46: ws
            	            {
            	            dbg.location(621,46);
            	            pushFollow(FOLLOW_ws_in_declarations2945);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(114);}


            	    }
            	    break;
            	case 8 :
            	    dbg.enterAlt(8);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:17: {...}? sass_control ( ws )?
            	    {
            	    dbg.location(623,17);
            	    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        throw new FailedPredicateException(input, "declarations", "isScssSource()");
            	    }
            	    dbg.location(623,35);
            	    pushFollow(FOLLOW_sass_control_in_declarations2984);
            	    sass_control();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(623,48);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:48: ( ws )?
            	    int alt115=2;
            	    try { dbg.enterSubRule(115);
            	    try { dbg.enterDecision(115, decisionCanBacktrack[115]);

            	    int LA115_0 = input.LA(1);

            	    if ( (LA115_0==WS||(LA115_0>=NL && LA115_0<=COMMENT)) ) {
            	        alt115=1;
            	    }
            	    } finally {dbg.exitDecision(115);}

            	    switch (alt115) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:48: ws
            	            {
            	            dbg.location(623,48);
            	            pushFollow(FOLLOW_ws_in_declarations2986);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(115);}


            	    }
            	    break;
            	case 9 :
            	    dbg.enterAlt(9);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:625:17: {...}? media ( ws )?
            	    {
            	    dbg.location(625,17);
            	    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        throw new FailedPredicateException(input, "declarations", "isCssPreprocessorSource()");
            	    }
            	    dbg.location(625,46);
            	    pushFollow(FOLLOW_media_in_declarations3025);
            	    media();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(625,52);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:625:52: ( ws )?
            	    int alt116=2;
            	    try { dbg.enterSubRule(116);
            	    try { dbg.enterDecision(116, decisionCanBacktrack[116]);

            	    int LA116_0 = input.LA(1);

            	    if ( (LA116_0==WS||(LA116_0>=NL && LA116_0<=COMMENT)) ) {
            	        alt116=1;
            	    }
            	    } finally {dbg.exitDecision(116);}

            	    switch (alt116) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:625:52: ws
            	            {
            	            dbg.location(625,52);
            	            pushFollow(FOLLOW_ws_in_declarations3027);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(116);}


            	    }
            	    break;
            	case 10 :
            	    dbg.enterAlt(10);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:17: {...}? cp_mixin_call ( ws )?
            	    {
            	    dbg.location(627,17);
            	    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        throw new FailedPredicateException(input, "declarations", "isCssPreprocessorSource()");
            	    }
            	    dbg.location(627,46);
            	    pushFollow(FOLLOW_cp_mixin_call_in_declarations3066);
            	    cp_mixin_call();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(627,60);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:60: ( ws )?
            	    int alt117=2;
            	    try { dbg.enterSubRule(117);
            	    try { dbg.enterDecision(117, decisionCanBacktrack[117]);

            	    int LA117_0 = input.LA(1);

            	    if ( (LA117_0==WS||(LA117_0>=NL && LA117_0<=COMMENT)) ) {
            	        alt117=1;
            	    }
            	    } finally {dbg.exitDecision(117);}

            	    switch (alt117) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:60: ws
            	            {
            	            dbg.location(627,60);
            	            pushFollow(FOLLOW_ws_in_declarations3068);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(117);}


            	    }
            	    break;
            	case 11 :
            	    dbg.enterAlt(11);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:17: {...}? sass_content ( ws )?
            	    {
            	    dbg.location(629,17);
            	    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        throw new FailedPredicateException(input, "declarations", "isScssSource()");
            	    }
            	    dbg.location(629,35);
            	    pushFollow(FOLLOW_sass_content_in_declarations3107);
            	    sass_content();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(629,48);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:48: ( ws )?
            	    int alt118=2;
            	    try { dbg.enterSubRule(118);
            	    try { dbg.enterDecision(118, decisionCanBacktrack[118]);

            	    int LA118_0 = input.LA(1);

            	    if ( (LA118_0==WS||(LA118_0>=NL && LA118_0<=COMMENT)) ) {
            	        alt118=1;
            	    }
            	    } finally {dbg.exitDecision(118);}

            	    switch (alt118) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:48: ws
            	            {
            	            dbg.location(629,48);
            	            pushFollow(FOLLOW_ws_in_declarations3109);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(118);}


            	    }
            	    break;
            	case 12 :
            	    dbg.enterAlt(12);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:631:17: {...}? sass_function_return ( ws )?
            	    {
            	    dbg.location(631,17);
            	    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        throw new FailedPredicateException(input, "declarations", "isScssSource()");
            	    }
            	    dbg.location(631,35);
            	    pushFollow(FOLLOW_sass_function_return_in_declarations3148);
            	    sass_function_return();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(631,56);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:631:56: ( ws )?
            	    int alt119=2;
            	    try { dbg.enterSubRule(119);
            	    try { dbg.enterDecision(119, decisionCanBacktrack[119]);

            	    int LA119_0 = input.LA(1);

            	    if ( (LA119_0==WS||(LA119_0>=NL && LA119_0<=COMMENT)) ) {
            	        alt119=1;
            	    }
            	    } finally {dbg.exitDecision(119);}

            	    switch (alt119) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:631:56: ws
            	            {
            	            dbg.location(631,56);
            	            pushFollow(FOLLOW_ws_in_declarations3150);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(119);}


            	    }
            	    break;
            	case 13 :
            	    dbg.enterAlt(13);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:633:17: {...}? importItem ( ws )?
            	    {
            	    dbg.location(633,17);
            	    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        throw new FailedPredicateException(input, "declarations", "isScssSource()");
            	    }
            	    dbg.location(633,35);
            	    pushFollow(FOLLOW_importItem_in_declarations3190);
            	    importItem();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(633,46);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:633:46: ( ws )?
            	    int alt120=2;
            	    try { dbg.enterSubRule(120);
            	    try { dbg.enterDecision(120, decisionCanBacktrack[120]);

            	    int LA120_0 = input.LA(1);

            	    if ( (LA120_0==WS||(LA120_0>=NL && LA120_0<=COMMENT)) ) {
            	        alt120=1;
            	    }
            	    } finally {dbg.exitDecision(120);}

            	    switch (alt120) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:633:46: ws
            	            {
            	            dbg.location(633,46);
            	            pushFollow(FOLLOW_ws_in_declarations3192);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(120);}


            	    }
            	    break;
            	case 14 :
            	    dbg.enterAlt(14);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:17: ( (~ SEMI )* SEMI )=> syncTo_SEMI
            	    {
            	    dbg.location(635,32);
            	    pushFollow(FOLLOW_syncTo_SEMI_in_declarations3237);
            	    syncTo_SEMI();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);
            } finally {dbg.exitSubRule(121);}

            dbg.location(637,13);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:637:13: ( declaration )?
            int alt122=2;
            try { dbg.enterSubRule(122);
            try { dbg.enterDecision(122, decisionCanBacktrack[122]);

            int LA122_0 = input.LA(1);

            if ( (LA122_0==IDENT||LA122_0==MEDIA_SYM||LA122_0==GEN||LA122_0==AT_IDENT||(LA122_0>=MINUS && LA122_0<=DOT)||LA122_0==STAR||LA122_0==SASS_VAR) ) {
                alt122=1;
            }
            } finally {dbg.exitDecision(122);}

            switch (alt122) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:637:13: declaration
                    {
                    dbg.location(637,13);
                    pushFollow(FOLLOW_declaration_in_declarations3267);
                    declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(122);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(638, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "declarations");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "declarations"


    // $ANTLR start "selectorsGroup"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:640:1: selectorsGroup : ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression ( ws )? | selector ( COMMA ( ws )? selector )* );
    public final void selectorsGroup() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "selectorsGroup");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(640, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:641:5: ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression ( ws )? | selector ( COMMA ( ws )? selector )* )
            int alt126=2;
            try { dbg.enterDecision(126, decisionCanBacktrack[126]);

            try {
                isCyclicDecision = true;
                alt126 = dfa126.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(126);}

            switch (alt126) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:9: ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression ( ws )?
                    {
                    dbg.location(643,60);
                    pushFollow(FOLLOW_sass_selector_interpolation_expression_in_selectorsGroup3327);
                    sass_selector_interpolation_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(643,99);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:99: ( ws )?
                    int alt123=2;
                    try { dbg.enterSubRule(123);
                    try { dbg.enterDecision(123, decisionCanBacktrack[123]);

                    int LA123_0 = input.LA(1);

                    if ( (LA123_0==WS||(LA123_0>=NL && LA123_0<=COMMENT)) ) {
                        alt123=1;
                    }
                    } finally {dbg.exitDecision(123);}

                    switch (alt123) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:99: ws
                            {
                            dbg.location(643,99);
                            pushFollow(FOLLOW_ws_in_selectorsGroup3329);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(123);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:645:9: selector ( COMMA ( ws )? selector )*
                    {
                    dbg.location(645,9);
                    pushFollow(FOLLOW_selector_in_selectorsGroup3344);
                    selector();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(645,18);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:645:18: ( COMMA ( ws )? selector )*
                    try { dbg.enterSubRule(125);

                    loop125:
                    do {
                        int alt125=2;
                        try { dbg.enterDecision(125, decisionCanBacktrack[125]);

                        int LA125_0 = input.LA(1);

                        if ( (LA125_0==COMMA) ) {
                            alt125=1;
                        }


                        } finally {dbg.exitDecision(125);}

                        switch (alt125) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:645:19: COMMA ( ws )? selector
                    	    {
                    	    dbg.location(645,19);
                    	    match(input,COMMA,FOLLOW_COMMA_in_selectorsGroup3347); if (state.failed) return ;
                    	    dbg.location(645,25);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:645:25: ( ws )?
                    	    int alt124=2;
                    	    try { dbg.enterSubRule(124);
                    	    try { dbg.enterDecision(124, decisionCanBacktrack[124]);

                    	    int LA124_0 = input.LA(1);

                    	    if ( (LA124_0==WS||(LA124_0>=NL && LA124_0<=COMMENT)) ) {
                    	        alt124=1;
                    	    }
                    	    } finally {dbg.exitDecision(124);}

                    	    switch (alt124) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:645:25: ws
                    	            {
                    	            dbg.location(645,25);
                    	            pushFollow(FOLLOW_ws_in_selectorsGroup3349);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(124);}

                    	    dbg.location(645,29);
                    	    pushFollow(FOLLOW_selector_in_selectorsGroup3352);
                    	    selector();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop125;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(125);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(646, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "selectorsGroup");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "selectorsGroup"


    // $ANTLR start "selector"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:648:1: selector : simpleSelectorSequence ( combinator simpleSelectorSequence )* ;
    public final void selector() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "selector");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(648, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:649:5: ( simpleSelectorSequence ( combinator simpleSelectorSequence )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:649:7: simpleSelectorSequence ( combinator simpleSelectorSequence )*
            {
            dbg.location(649,7);
            pushFollow(FOLLOW_simpleSelectorSequence_in_selector3379);
            simpleSelectorSequence();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(649,30);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:649:30: ( combinator simpleSelectorSequence )*
            try { dbg.enterSubRule(127);

            loop127:
            do {
                int alt127=2;
                try { dbg.enterDecision(127, decisionCanBacktrack[127]);

                int LA127_0 = input.LA(1);

                if ( (LA127_0==IDENT||LA127_0==GEN||LA127_0==COLON||(LA127_0>=PLUS && LA127_0<=TILDE)||(LA127_0>=HASH_SYMBOL && LA127_0<=PIPE)||LA127_0==LESS_AND) ) {
                    alt127=1;
                }


                } finally {dbg.exitDecision(127);}

                switch (alt127) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:649:31: combinator simpleSelectorSequence
            	    {
            	    dbg.location(649,31);
            	    pushFollow(FOLLOW_combinator_in_selector3382);
            	    combinator();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(649,42);
            	    pushFollow(FOLLOW_simpleSelectorSequence_in_selector3384);
            	    simpleSelectorSequence();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);
            } finally {dbg.exitSubRule(127);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(650, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "selector");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "selector"


    // $ANTLR start "simpleSelectorSequence"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:653:1: simpleSelectorSequence : ( ( typeSelector ( ( esPred )=> elementSubsequent ( ws )? )* ) | ( ( ( esPred )=> elementSubsequent ( ws )? )+ ) );
    public final void simpleSelectorSequence() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "simpleSelectorSequence");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(653, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:2: ( ( typeSelector ( ( esPred )=> elementSubsequent ( ws )? )* ) | ( ( ( esPred )=> elementSubsequent ( ws )? )+ ) )
            int alt132=2;
            try { dbg.enterDecision(132, decisionCanBacktrack[132]);

            int LA132_0 = input.LA(1);

            if ( (LA132_0==IDENT||LA132_0==GEN||(LA132_0>=STAR && LA132_0<=PIPE)||LA132_0==LESS_AND) ) {
                alt132=1;
            }
            else if ( (LA132_0==COLON||(LA132_0>=HASH_SYMBOL && LA132_0<=SASS_EXTEND_ONLY_SELECTOR)) ) {
                alt132=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(132);}

            switch (alt132) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:2: ( typeSelector ( ( esPred )=> elementSubsequent ( ws )? )* )
                    {
                    dbg.location(656,2);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:2: ( typeSelector ( ( esPred )=> elementSubsequent ( ws )? )* )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:4: typeSelector ( ( esPred )=> elementSubsequent ( ws )? )*
                    {
                    dbg.location(656,4);
                    pushFollow(FOLLOW_typeSelector_in_simpleSelectorSequence3417);
                    typeSelector();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(656,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:17: ( ( esPred )=> elementSubsequent ( ws )? )*
                    try { dbg.enterSubRule(129);

                    loop129:
                    do {
                        int alt129=2;
                        try { dbg.enterDecision(129, decisionCanBacktrack[129]);

                        try {
                            isCyclicDecision = true;
                            alt129 = dfa129.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(129);}

                        switch (alt129) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:18: ( esPred )=> elementSubsequent ( ws )?
                    	    {
                    	    dbg.location(656,28);
                    	    pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence3424);
                    	    elementSubsequent();

                    	    state._fsp--;
                    	    if (state.failed) return ;
                    	    dbg.location(656,46);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:46: ( ws )?
                    	    int alt128=2;
                    	    try { dbg.enterSubRule(128);
                    	    try { dbg.enterDecision(128, decisionCanBacktrack[128]);

                    	    int LA128_0 = input.LA(1);

                    	    if ( (LA128_0==WS||(LA128_0>=NL && LA128_0<=COMMENT)) ) {
                    	        alt128=1;
                    	    }
                    	    } finally {dbg.exitDecision(128);}

                    	    switch (alt128) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:46: ws
                    	            {
                    	            dbg.location(656,46);
                    	            pushFollow(FOLLOW_ws_in_simpleSelectorSequence3426);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(128);}


                    	    }
                    	    break;

                    	default :
                    	    break loop129;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(129);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:2: ( ( ( esPred )=> elementSubsequent ( ws )? )+ )
                    {
                    dbg.location(658,2);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:2: ( ( ( esPred )=> elementSubsequent ( ws )? )+ )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:4: ( ( esPred )=> elementSubsequent ( ws )? )+
                    {
                    dbg.location(658,4);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:4: ( ( esPred )=> elementSubsequent ( ws )? )+
                    int cnt131=0;
                    try { dbg.enterSubRule(131);

                    loop131:
                    do {
                        int alt131=2;
                        try { dbg.enterDecision(131, decisionCanBacktrack[131]);

                        switch ( input.LA(1) ) {
                        case SASS_EXTEND_ONLY_SELECTOR:
                            {
                            int LA131_2 = input.LA(2);

                            if ( ((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
                                alt131=1;
                            }


                            }
                            break;
                        case HASH:
                            {
                            int LA131_3 = input.LA(2);

                            if ( (synpred15_Css3()) ) {
                                alt131=1;
                            }


                            }
                            break;
                        case HASH_SYMBOL:
                            {
                            int LA131_4 = input.LA(2);

                            if ( (synpred15_Css3()) ) {
                                alt131=1;
                            }


                            }
                            break;
                        case DOT:
                            {
                            int LA131_5 = input.LA(2);

                            if ( (synpred15_Css3()) ) {
                                alt131=1;
                            }


                            }
                            break;
                        case LBRACKET:
                            {
                            int LA131_6 = input.LA(2);

                            if ( (synpred15_Css3()) ) {
                                alt131=1;
                            }


                            }
                            break;
                        case COLON:
                        case DCOLON:
                            {
                            int LA131_7 = input.LA(2);

                            if ( (synpred15_Css3()) ) {
                                alt131=1;
                            }


                            }
                            break;

                        }

                        } finally {dbg.exitDecision(131);}

                        switch (alt131) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:5: ( esPred )=> elementSubsequent ( ws )?
                    	    {
                    	    dbg.location(658,15);
                    	    pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence3445);
                    	    elementSubsequent();

                    	    state._fsp--;
                    	    if (state.failed) return ;
                    	    dbg.location(658,33);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:33: ( ws )?
                    	    int alt130=2;
                    	    try { dbg.enterSubRule(130);
                    	    try { dbg.enterDecision(130, decisionCanBacktrack[130]);

                    	    int LA130_0 = input.LA(1);

                    	    if ( (LA130_0==WS||(LA130_0>=NL && LA130_0<=COMMENT)) ) {
                    	        alt130=1;
                    	    }
                    	    } finally {dbg.exitDecision(130);}

                    	    switch (alt130) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:33: ws
                    	            {
                    	            dbg.location(658,33);
                    	            pushFollow(FOLLOW_ws_in_simpleSelectorSequence3447);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(130);}


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt131 >= 1 ) break loop131;
                    	    if (state.backtracking>0) {state.failed=true; return ;}
                                EarlyExitException eee =
                                    new EarlyExitException(131, input);
                                dbg.recognitionException(eee);

                                throw eee;
                        }
                        cnt131++;
                    } while (true);
                    } finally {dbg.exitSubRule(131);}


                    }


                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                        reportError(rce);
                        consumeUntil(input, BitSet.of(LBRACE)); 
                    
        }
        finally {
        }
        dbg.location(659, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "simpleSelectorSequence");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "simpleSelectorSequence"


    // $ANTLR start "esPred"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:666:1: esPred : ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR );
    public final void esPred() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "esPred");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(666, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:5: ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(667,5);
            if ( input.LA(1)==COLON||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=SASS_EXTEND_ONLY_SELECTOR) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(668, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "esPred");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "esPred"


    // $ANTLR start "typeSelector"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:1: typeSelector options {k=2; } : ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? ( elementName ( ws )? ) ;
    public final void typeSelector() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "typeSelector");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(670, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:3: ( ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? ( elementName ( ws )? ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? ( elementName ( ws )? )
            {
            dbg.location(672,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )?
            int alt133=2;
            try { dbg.enterSubRule(133);
            try { dbg.enterDecision(133, decisionCanBacktrack[133]);

            int LA133_0 = input.LA(1);

            if ( (LA133_0==IDENT) ) {
                int LA133_1 = input.LA(2);

                if ( (synpred16_Css3()) ) {
                    alt133=1;
                }
            }
            else if ( (LA133_0==STAR) ) {
                int LA133_2 = input.LA(2);

                if ( (synpred16_Css3()) ) {
                    alt133=1;
                }
            }
            else if ( (LA133_0==PIPE) && (synpred16_Css3())) {
                alt133=1;
            }
            } finally {dbg.exitDecision(133);}

            switch (alt133) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:7: ( ( IDENT | STAR )? PIPE )=> namespacePrefix
                    {
                    dbg.location(672,31);
                    pushFollow(FOLLOW_namespacePrefix_in_typeSelector3563);
                    namespacePrefix();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(133);}

            dbg.location(672,49);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:49: ( elementName ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:51: elementName ( ws )?
            {
            dbg.location(672,51);
            pushFollow(FOLLOW_elementName_in_typeSelector3569);
            elementName();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(672,63);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:63: ( ws )?
            int alt134=2;
            try { dbg.enterSubRule(134);
            try { dbg.enterDecision(134, decisionCanBacktrack[134]);

            int LA134_0 = input.LA(1);

            if ( (LA134_0==WS||(LA134_0>=NL && LA134_0<=COMMENT)) ) {
                alt134=1;
            }
            } finally {dbg.exitDecision(134);}

            switch (alt134) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:63: ws
                    {
                    dbg.location(672,63);
                    pushFollow(FOLLOW_ws_in_typeSelector3571);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(134);}


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(673, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "typeSelector");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "typeSelector"


    // $ANTLR start "namespacePrefix"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:675:1: namespacePrefix : ( namespacePrefixName | STAR )? PIPE ;
    public final void namespacePrefix() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespacePrefix");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(675, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:676:3: ( ( namespacePrefixName | STAR )? PIPE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:676:5: ( namespacePrefixName | STAR )? PIPE
            {
            dbg.location(676,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:676:5: ( namespacePrefixName | STAR )?
            int alt135=3;
            try { dbg.enterSubRule(135);
            try { dbg.enterDecision(135, decisionCanBacktrack[135]);

            int LA135_0 = input.LA(1);

            if ( (LA135_0==IDENT) ) {
                alt135=1;
            }
            else if ( (LA135_0==STAR) ) {
                alt135=2;
            }
            } finally {dbg.exitDecision(135);}

            switch (alt135) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:676:7: namespacePrefixName
                    {
                    dbg.location(676,7);
                    pushFollow(FOLLOW_namespacePrefixName_in_namespacePrefix3589);
                    namespacePrefixName();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:676:29: STAR
                    {
                    dbg.location(676,29);
                    match(input,STAR,FOLLOW_STAR_in_namespacePrefix3593); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(135);}

            dbg.location(676,36);
            match(input,PIPE,FOLLOW_PIPE_in_namespacePrefix3597); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(677, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespacePrefix");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespacePrefix"


    // $ANTLR start "elementSubsequent"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:680:1: elementSubsequent : ({...}? sass_extend_only_selector | cssId | cssClass | slAttribute | pseudo ) ;
    public final void elementSubsequent() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "elementSubsequent");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(680, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:681:5: ( ({...}? sass_extend_only_selector | cssId | cssClass | slAttribute | pseudo ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:682:5: ({...}? sass_extend_only_selector | cssId | cssClass | slAttribute | pseudo )
            {
            dbg.location(682,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:682:5: ({...}? sass_extend_only_selector | cssId | cssClass | slAttribute | pseudo )
            int alt136=5;
            try { dbg.enterSubRule(136);
            try { dbg.enterDecision(136, decisionCanBacktrack[136]);

            switch ( input.LA(1) ) {
            case SASS_EXTEND_ONLY_SELECTOR:
                {
                alt136=1;
                }
                break;
            case HASH_SYMBOL:
            case HASH:
                {
                alt136=2;
                }
                break;
            case DOT:
                {
                alt136=3;
                }
                break;
            case LBRACKET:
                {
                alt136=4;
                }
                break;
            case COLON:
            case DCOLON:
                {
                alt136=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(136);}

            switch (alt136) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:683:9: {...}? sass_extend_only_selector
                    {
                    dbg.location(683,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "elementSubsequent", "isScssSource()");
                    }
                    dbg.location(683,27);
                    pushFollow(FOLLOW_sass_extend_only_selector_in_elementSubsequent3636);
                    sass_extend_only_selector();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:684:8: cssId
                    {
                    dbg.location(684,8);
                    pushFollow(FOLLOW_cssId_in_elementSubsequent3645);
                    cssId();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:685:8: cssClass
                    {
                    dbg.location(685,8);
                    pushFollow(FOLLOW_cssClass_in_elementSubsequent3654);
                    cssClass();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:686:11: slAttribute
                    {
                    dbg.location(686,11);
                    pushFollow(FOLLOW_slAttribute_in_elementSubsequent3666);
                    slAttribute();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:687:11: pseudo
                    {
                    dbg.location(687,11);
                    pushFollow(FOLLOW_pseudo_in_elementSubsequent3678);
                    pseudo();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(136);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(689, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "elementSubsequent");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "elementSubsequent"


    // $ANTLR start "cssId"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:692:1: cssId : ( HASH | ( HASH_SYMBOL NAME ) );
    public final void cssId() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cssId");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(692, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:693:5: ( HASH | ( HASH_SYMBOL NAME ) )
            int alt137=2;
            try { dbg.enterDecision(137, decisionCanBacktrack[137]);

            int LA137_0 = input.LA(1);

            if ( (LA137_0==HASH) ) {
                alt137=1;
            }
            else if ( (LA137_0==HASH_SYMBOL) ) {
                alt137=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(137);}

            switch (alt137) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:693:7: HASH
                    {
                    dbg.location(693,7);
                    match(input,HASH,FOLLOW_HASH_in_cssId3706); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:693:14: ( HASH_SYMBOL NAME )
                    {
                    dbg.location(693,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:693:14: ( HASH_SYMBOL NAME )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:693:16: HASH_SYMBOL NAME
                    {
                    dbg.location(693,16);
                    match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_cssId3712); if (state.failed) return ;
                    dbg.location(693,28);
                    match(input,NAME,FOLLOW_NAME_in_cssId3714); if (state.failed) return ;

                    }


                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(WS, IDENT, LBRACE)); 
                
        }
        finally {
        }
        dbg.location(694, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cssId");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cssId"


    // $ANTLR start "cssClass"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:700:1: cssClass : DOT ( IDENT | GEN ) ;
    public final void cssClass() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cssClass");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(700, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:701:5: ( DOT ( IDENT | GEN ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:701:7: DOT ( IDENT | GEN )
            {
            dbg.location(701,7);
            match(input,DOT,FOLLOW_DOT_in_cssClass3742); if (state.failed) return ;
            dbg.location(701,11);
            if ( input.LA(1)==IDENT||input.LA(1)==GEN ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(WS, IDENT, LBRACE)); 
                
        }
        finally {
        }
        dbg.location(702, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cssClass");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cssClass"


    // $ANTLR start "elementName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:709:1: elementName : ( ( IDENT | GEN | LESS_AND ) | STAR );
    public final void elementName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "elementName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(709, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:710:5: ( ( IDENT | GEN | LESS_AND ) | STAR )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(710,5);
            if ( input.LA(1)==IDENT||input.LA(1)==GEN||input.LA(1)==STAR||input.LA(1)==LESS_AND ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(711, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "elementName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "elementName"


    // $ANTLR start "slAttribute"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:713:1: slAttribute : LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET ;
    public final void slAttribute() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "slAttribute");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(713, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:714:5: ( LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:714:7: LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET
            {
            dbg.location(714,7);
            match(input,LBRACKET,FOLLOW_LBRACKET_in_slAttribute3816); if (state.failed) return ;
            dbg.location(715,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:715:6: ( namespacePrefix )?
            int alt138=2;
            try { dbg.enterSubRule(138);
            try { dbg.enterDecision(138, decisionCanBacktrack[138]);

            int LA138_0 = input.LA(1);

            if ( (LA138_0==IDENT) ) {
                int LA138_1 = input.LA(2);

                if ( (LA138_1==PIPE) ) {
                    alt138=1;
                }
            }
            else if ( ((LA138_0>=STAR && LA138_0<=PIPE)) ) {
                alt138=1;
            }
            } finally {dbg.exitDecision(138);}

            switch (alt138) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:715:6: namespacePrefix
                    {
                    dbg.location(715,6);
                    pushFollow(FOLLOW_namespacePrefix_in_slAttribute3823);
                    namespacePrefix();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(138);}

            dbg.location(715,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:715:23: ( ws )?
            int alt139=2;
            try { dbg.enterSubRule(139);
            try { dbg.enterDecision(139, decisionCanBacktrack[139]);

            int LA139_0 = input.LA(1);

            if ( (LA139_0==WS||(LA139_0>=NL && LA139_0<=COMMENT)) ) {
                alt139=1;
            }
            } finally {dbg.exitDecision(139);}

            switch (alt139) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:715:23: ws
                    {
                    dbg.location(715,23);
                    pushFollow(FOLLOW_ws_in_slAttribute3826);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(139);}

            dbg.location(716,9);
            pushFollow(FOLLOW_slAttributeName_in_slAttribute3837);
            slAttributeName();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(716,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:716:25: ( ws )?
            int alt140=2;
            try { dbg.enterSubRule(140);
            try { dbg.enterDecision(140, decisionCanBacktrack[140]);

            int LA140_0 = input.LA(1);

            if ( (LA140_0==WS||(LA140_0>=NL && LA140_0<=COMMENT)) ) {
                alt140=1;
            }
            } finally {dbg.exitDecision(140);}

            switch (alt140) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:716:25: ws
                    {
                    dbg.location(716,25);
                    pushFollow(FOLLOW_ws_in_slAttribute3839);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(140);}

            dbg.location(718,13);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:718:13: ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )?
            int alt143=2;
            try { dbg.enterSubRule(143);
            try { dbg.enterDecision(143, decisionCanBacktrack[143]);

            int LA143_0 = input.LA(1);

            if ( ((LA143_0>=OPEQ && LA143_0<=CONTAINS)) ) {
                alt143=1;
            }
            } finally {dbg.exitDecision(143);}

            switch (alt143) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:719:17: ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )?
                    {
                    dbg.location(719,17);
                    if ( (input.LA(1)>=OPEQ && input.LA(1)<=CONTAINS) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(727,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:727:17: ( ws )?
                    int alt141=2;
                    try { dbg.enterSubRule(141);
                    try { dbg.enterDecision(141, decisionCanBacktrack[141]);

                    int LA141_0 = input.LA(1);

                    if ( (LA141_0==WS||(LA141_0>=NL && LA141_0<=COMMENT)) ) {
                        alt141=1;
                    }
                    } finally {dbg.exitDecision(141);}

                    switch (alt141) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:727:17: ws
                            {
                            dbg.location(727,17);
                            pushFollow(FOLLOW_ws_in_slAttribute4061);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(141);}

                    dbg.location(728,17);
                    pushFollow(FOLLOW_slAttributeValue_in_slAttribute4080);
                    slAttributeValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(729,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:729:17: ( ws )?
                    int alt142=2;
                    try { dbg.enterSubRule(142);
                    try { dbg.enterDecision(142, decisionCanBacktrack[142]);

                    int LA142_0 = input.LA(1);

                    if ( (LA142_0==WS||(LA142_0>=NL && LA142_0<=COMMENT)) ) {
                        alt142=1;
                    }
                    } finally {dbg.exitDecision(142);}

                    switch (alt142) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:729:17: ws
                            {
                            dbg.location(729,17);
                            pushFollow(FOLLOW_ws_in_slAttribute4098);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(142);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(143);}

            dbg.location(732,7);
            match(input,RBRACKET,FOLLOW_RBRACKET_in_slAttribute4127); if (state.failed) return ;

            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(IDENT, LBRACE)); 
                
        }
        finally {
        }
        dbg.location(733, 1);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "slAttribute");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "slAttribute"


    // $ANTLR start "slAttributeName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:740:1: slAttributeName : IDENT ;
    public final void slAttributeName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "slAttributeName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(740, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:741:2: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:741:4: IDENT
            {
            dbg.location(741,4);
            match(input,IDENT,FOLLOW_IDENT_in_slAttributeName4143); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(742, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "slAttributeName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "slAttributeName"


    // $ANTLR start "slAttributeValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:744:1: slAttributeValue : ( IDENT | STRING ) ;
    public final void slAttributeValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "slAttributeValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(744, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:745:2: ( ( IDENT | STRING ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:2: ( IDENT | STRING )
            {
            dbg.location(746,2);
            if ( (input.LA(1)>=IDENT && input.LA(1)<=STRING) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(750, 9);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "slAttributeValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "slAttributeValue"


    // $ANTLR start "pseudo"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:752:1: pseudo : ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) ) ;
    public final void pseudo() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "pseudo");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(752, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:753:5: ( ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:753:7: ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) )
            {
            dbg.location(753,7);
            if ( input.LA(1)==COLON||input.LA(1)==DCOLON ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(754,14);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:754:14: ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) )
            int alt152=2;
            try { dbg.enterSubRule(152);
            try { dbg.enterDecision(152, decisionCanBacktrack[152]);

            int LA152_0 = input.LA(1);

            if ( (LA152_0==IDENT||LA152_0==GEN) ) {
                alt152=1;
            }
            else if ( (LA152_0==NOT) ) {
                alt152=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(152);}

            switch (alt152) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:755:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
                    {
                    dbg.location(755,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:755:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:756:21: ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
                    {
                    dbg.location(756,21);
                    if ( input.LA(1)==IDENT||input.LA(1)==GEN ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(757,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:757:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
                    int alt148=2;
                    try { dbg.enterSubRule(148);
                    try { dbg.enterDecision(148, decisionCanBacktrack[148]);

                    try {
                        isCyclicDecision = true;
                        alt148 = dfa148.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(148);}

                    switch (alt148) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:758:25: ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN
                            {
                            dbg.location(758,25);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:758:25: ( ws )?
                            int alt144=2;
                            try { dbg.enterSubRule(144);
                            try { dbg.enterDecision(144, decisionCanBacktrack[144]);

                            int LA144_0 = input.LA(1);

                            if ( (LA144_0==WS||(LA144_0>=NL && LA144_0<=COMMENT)) ) {
                                alt144=1;
                            }
                            } finally {dbg.exitDecision(144);}

                            switch (alt144) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:758:25: ws
                                    {
                                    dbg.location(758,25);
                                    pushFollow(FOLLOW_ws_in_pseudo4338);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(144);}

                            dbg.location(758,29);
                            match(input,LPAREN,FOLLOW_LPAREN_in_pseudo4341); if (state.failed) return ;
                            dbg.location(758,36);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:758:36: ( ws )?
                            int alt145=2;
                            try { dbg.enterSubRule(145);
                            try { dbg.enterDecision(145, decisionCanBacktrack[145]);

                            int LA145_0 = input.LA(1);

                            if ( (LA145_0==WS||(LA145_0>=NL && LA145_0<=COMMENT)) ) {
                                alt145=1;
                            }
                            } finally {dbg.exitDecision(145);}

                            switch (alt145) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:758:36: ws
                                    {
                                    dbg.location(758,36);
                                    pushFollow(FOLLOW_ws_in_pseudo4343);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(145);}

                            dbg.location(758,40);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:758:40: ( ( expression ( ws )? ) | STAR )?
                            int alt147=3;
                            try { dbg.enterSubRule(147);
                            try { dbg.enterDecision(147, decisionCanBacktrack[147]);

                            int LA147_0 = input.LA(1);

                            if ( ((LA147_0>=IDENT && LA147_0<=URI)||LA147_0==MEDIA_SYM||LA147_0==GEN||LA147_0==AT_IDENT||LA147_0==PERCENTAGE||LA147_0==PLUS||LA147_0==MINUS||LA147_0==HASH||LA147_0==SASS_VAR||(LA147_0>=NUMBER && LA147_0<=DIMENSION)) ) {
                                alt147=1;
                            }
                            else if ( (LA147_0==STAR) ) {
                                alt147=2;
                            }
                            } finally {dbg.exitDecision(147);}

                            switch (alt147) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:758:42: ( expression ( ws )? )
                                    {
                                    dbg.location(758,42);
                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:758:42: ( expression ( ws )? )
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:758:43: expression ( ws )?
                                    {
                                    dbg.location(758,43);
                                    pushFollow(FOLLOW_expression_in_pseudo4349);
                                    expression();

                                    state._fsp--;
                                    if (state.failed) return ;
                                    dbg.location(758,54);
                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:758:54: ( ws )?
                                    int alt146=2;
                                    try { dbg.enterSubRule(146);
                                    try { dbg.enterDecision(146, decisionCanBacktrack[146]);

                                    int LA146_0 = input.LA(1);

                                    if ( (LA146_0==WS||(LA146_0>=NL && LA146_0<=COMMENT)) ) {
                                        alt146=1;
                                    }
                                    } finally {dbg.exitDecision(146);}

                                    switch (alt146) {
                                        case 1 :
                                            dbg.enterAlt(1);

                                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:758:54: ws
                                            {
                                            dbg.location(758,54);
                                            pushFollow(FOLLOW_ws_in_pseudo4351);
                                            ws();

                                            state._fsp--;
                                            if (state.failed) return ;

                                            }
                                            break;

                                    }
                                    } finally {dbg.exitSubRule(146);}


                                    }


                                    }
                                    break;
                                case 2 :
                                    dbg.enterAlt(2);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:758:61: STAR
                                    {
                                    dbg.location(758,61);
                                    match(input,STAR,FOLLOW_STAR_in_pseudo4357); if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(147);}

                            dbg.location(758,69);
                            match(input,RPAREN,FOLLOW_RPAREN_in_pseudo4362); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(148);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:762:17: ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN )
                    {
                    dbg.location(762,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:762:17: ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:762:19: NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN
                    {
                    dbg.location(762,19);
                    match(input,NOT,FOLLOW_NOT_in_pseudo4441); if (state.failed) return ;
                    dbg.location(762,23);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:762:23: ( ws )?
                    int alt149=2;
                    try { dbg.enterSubRule(149);
                    try { dbg.enterDecision(149, decisionCanBacktrack[149]);

                    int LA149_0 = input.LA(1);

                    if ( (LA149_0==WS||(LA149_0>=NL && LA149_0<=COMMENT)) ) {
                        alt149=1;
                    }
                    } finally {dbg.exitDecision(149);}

                    switch (alt149) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:762:23: ws
                            {
                            dbg.location(762,23);
                            pushFollow(FOLLOW_ws_in_pseudo4443);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(149);}

                    dbg.location(762,27);
                    match(input,LPAREN,FOLLOW_LPAREN_in_pseudo4446); if (state.failed) return ;
                    dbg.location(762,34);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:762:34: ( ws )?
                    int alt150=2;
                    try { dbg.enterSubRule(150);
                    try { dbg.enterDecision(150, decisionCanBacktrack[150]);

                    int LA150_0 = input.LA(1);

                    if ( (LA150_0==WS||(LA150_0>=NL && LA150_0<=COMMENT)) ) {
                        alt150=1;
                    }
                    } finally {dbg.exitDecision(150);}

                    switch (alt150) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:762:34: ws
                            {
                            dbg.location(762,34);
                            pushFollow(FOLLOW_ws_in_pseudo4448);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(150);}

                    dbg.location(762,38);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:762:38: ( simpleSelectorSequence )?
                    int alt151=2;
                    try { dbg.enterSubRule(151);
                    try { dbg.enterDecision(151, decisionCanBacktrack[151]);

                    int LA151_0 = input.LA(1);

                    if ( (LA151_0==IDENT||LA151_0==GEN||LA151_0==COLON||(LA151_0>=HASH_SYMBOL && LA151_0<=PIPE)||LA151_0==LESS_AND) ) {
                        alt151=1;
                    }
                    } finally {dbg.exitDecision(151);}

                    switch (alt151) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:762:38: simpleSelectorSequence
                            {
                            dbg.location(762,38);
                            pushFollow(FOLLOW_simpleSelectorSequence_in_pseudo4451);
                            simpleSelectorSequence();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(151);}

                    dbg.location(762,62);
                    match(input,RPAREN,FOLLOW_RPAREN_in_pseudo4454); if (state.failed) return ;

                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(152);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(764, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pseudo");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "pseudo"


    // $ANTLR start "declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:766:1: declaration : ( ( STAR )? property COLON ( ws )? propertyValue ( ws )? ( prio ( ws )? )? | {...}? ( STAR )? property COLON ( ws )? cp_propertyValue ( ws )? );
    public final void declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(766, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:5: ( ( STAR )? property COLON ( ws )? propertyValue ( ws )? ( prio ( ws )? )? | {...}? ( STAR )? property COLON ( ws )? cp_propertyValue ( ws )? )
            int alt161=2;
            try { dbg.enterDecision(161, decisionCanBacktrack[161]);

            try {
                isCyclicDecision = true;
                alt161 = dfa161.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(161);}

            switch (alt161) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:5: ( STAR )? property COLON ( ws )? propertyValue ( ws )? ( prio ( ws )? )?
                    {
                    dbg.location(768,5);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:5: ( STAR )?
                    int alt153=2;
                    try { dbg.enterSubRule(153);
                    try { dbg.enterDecision(153, decisionCanBacktrack[153]);

                    int LA153_0 = input.LA(1);

                    if ( (LA153_0==STAR) ) {
                        alt153=1;
                    }
                    } finally {dbg.exitDecision(153);}

                    switch (alt153) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:5: STAR
                            {
                            dbg.location(768,5);
                            match(input,STAR,FOLLOW_STAR_in_declaration4493); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(153);}

                    dbg.location(768,11);
                    pushFollow(FOLLOW_property_in_declaration4496);
                    property();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(768,20);
                    match(input,COLON,FOLLOW_COLON_in_declaration4498); if (state.failed) return ;
                    dbg.location(768,26);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:26: ( ws )?
                    int alt154=2;
                    try { dbg.enterSubRule(154);
                    try { dbg.enterDecision(154, decisionCanBacktrack[154]);

                    int LA154_0 = input.LA(1);

                    if ( (LA154_0==WS||(LA154_0>=NL && LA154_0<=COMMENT)) ) {
                        alt154=1;
                    }
                    } finally {dbg.exitDecision(154);}

                    switch (alt154) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:26: ws
                            {
                            dbg.location(768,26);
                            pushFollow(FOLLOW_ws_in_declaration4500);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(154);}

                    dbg.location(768,30);
                    pushFollow(FOLLOW_propertyValue_in_declaration4503);
                    propertyValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(768,44);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:44: ( ws )?
                    int alt155=2;
                    try { dbg.enterSubRule(155);
                    try { dbg.enterDecision(155, decisionCanBacktrack[155]);

                    int LA155_0 = input.LA(1);

                    if ( (LA155_0==WS||(LA155_0>=NL && LA155_0<=COMMENT)) ) {
                        alt155=1;
                    }
                    } finally {dbg.exitDecision(155);}

                    switch (alt155) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:44: ws
                            {
                            dbg.location(768,44);
                            pushFollow(FOLLOW_ws_in_declaration4505);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(155);}

                    dbg.location(768,48);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:48: ( prio ( ws )? )?
                    int alt157=2;
                    try { dbg.enterSubRule(157);
                    try { dbg.enterDecision(157, decisionCanBacktrack[157]);

                    int LA157_0 = input.LA(1);

                    if ( (LA157_0==IMPORTANT_SYM) ) {
                        alt157=1;
                    }
                    } finally {dbg.exitDecision(157);}

                    switch (alt157) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:49: prio ( ws )?
                            {
                            dbg.location(768,49);
                            pushFollow(FOLLOW_prio_in_declaration4509);
                            prio();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(768,54);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:54: ( ws )?
                            int alt156=2;
                            try { dbg.enterSubRule(156);
                            try { dbg.enterDecision(156, decisionCanBacktrack[156]);

                            int LA156_0 = input.LA(1);

                            if ( (LA156_0==WS||(LA156_0>=NL && LA156_0<=COMMENT)) ) {
                                alt156=1;
                            }
                            } finally {dbg.exitDecision(156);}

                            switch (alt156) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:54: ws
                                    {
                                    dbg.location(768,54);
                                    pushFollow(FOLLOW_ws_in_declaration4511);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(156);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(157);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:769:7: {...}? ( STAR )? property COLON ( ws )? cp_propertyValue ( ws )?
                    {
                    dbg.location(769,7);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isCssPreprocessorSource()");
                    }
                    dbg.location(769,36);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:769:36: ( STAR )?
                    int alt158=2;
                    try { dbg.enterSubRule(158);
                    try { dbg.enterDecision(158, decisionCanBacktrack[158]);

                    int LA158_0 = input.LA(1);

                    if ( (LA158_0==STAR) ) {
                        alt158=1;
                    }
                    } finally {dbg.exitDecision(158);}

                    switch (alt158) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:769:36: STAR
                            {
                            dbg.location(769,36);
                            match(input,STAR,FOLLOW_STAR_in_declaration4524); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(158);}

                    dbg.location(769,42);
                    pushFollow(FOLLOW_property_in_declaration4527);
                    property();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(769,51);
                    match(input,COLON,FOLLOW_COLON_in_declaration4529); if (state.failed) return ;
                    dbg.location(769,57);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:769:57: ( ws )?
                    int alt159=2;
                    try { dbg.enterSubRule(159);
                    try { dbg.enterDecision(159, decisionCanBacktrack[159]);

                    int LA159_0 = input.LA(1);

                    if ( (LA159_0==WS||(LA159_0>=NL && LA159_0<=COMMENT)) ) {
                        alt159=1;
                    }
                    } finally {dbg.exitDecision(159);}

                    switch (alt159) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:769:57: ws
                            {
                            dbg.location(769,57);
                            pushFollow(FOLLOW_ws_in_declaration4531);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(159);}

                    dbg.location(769,61);
                    pushFollow(FOLLOW_cp_propertyValue_in_declaration4534);
                    cp_propertyValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(769,78);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:769:78: ( ws )?
                    int alt160=2;
                    try { dbg.enterSubRule(160);
                    try { dbg.enterDecision(160, decisionCanBacktrack[160]);

                    int LA160_0 = input.LA(1);

                    if ( (LA160_0==WS||(LA160_0>=NL && LA160_0<=COMMENT)) ) {
                        alt160=1;
                    }
                    } finally {dbg.exitDecision(160);}

                    switch (alt160) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:769:78: ws
                            {
                            dbg.location(769,78);
                            pushFollow(FOLLOW_ws_in_declaration4536);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(160);}


                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    //recovery: if an mismatched token occures inside a declaration is found,
                    //then skip all tokens until an end of the rule is found represented by right curly brace
                    consumeUntil(input, BitSet.of(SEMI, RBRACE)); 
                
        }
        finally {
        }
        dbg.location(770, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "declaration"


    // $ANTLR start "cp_propertyValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:1: cp_propertyValue : ( ( (~ ( HASH_SYMBOL | SEMI | RBRACE | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_declaration_property_value_interpolation_expression | {...}? cp_expression_list | propertyValue );
    public final void cp_propertyValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_propertyValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(779, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:5: ( ( (~ ( HASH_SYMBOL | SEMI | RBRACE | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_declaration_property_value_interpolation_expression | {...}? cp_expression_list | propertyValue )
            int alt162=3;
            try { dbg.enterDecision(162, decisionCanBacktrack[162]);

            try {
                isCyclicDecision = true;
                alt162 = dfa162.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(162);}

            switch (alt162) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:783:5: ( (~ ( HASH_SYMBOL | SEMI | RBRACE | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_declaration_property_value_interpolation_expression
                    {
                    dbg.location(783,62);
                    pushFollow(FOLLOW_sass_declaration_property_value_interpolation_expression_in_cp_propertyValue4597);
                    sass_declaration_property_value_interpolation_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:784:7: {...}? cp_expression_list
                    {
                    dbg.location(784,7);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_propertyValue", "isCssPreprocessorSource()");
                    }
                    dbg.location(784,36);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_propertyValue4607);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:785:7: propertyValue
                    {
                    dbg.location(785,7);
                    pushFollow(FOLLOW_propertyValue_in_cp_propertyValue4615);
                    propertyValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(786, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_propertyValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_propertyValue"


    // $ANTLR start "propertyValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:1: propertyValue : expression ;
    public final void propertyValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "propertyValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(788, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:789:2: ( expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:790:9: expression
            {
            dbg.location(790,9);
            pushFollow(FOLLOW_expression_in_propertyValue4637);
            expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(791, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "propertyValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "propertyValue"


    // $ANTLR start "expressionPredicate"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:794:1: expressionPredicate options {k=1; } : (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) ;
    public final void expressionPredicate() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "expressionPredicate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(794, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:796:5: ( (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:797:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE )
            {
            dbg.location(797,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:797:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+
            int cnt163=0;
            try { dbg.enterSubRule(163);

            loop163:
            do {
                int alt163=2;
                try { dbg.enterDecision(163, decisionCanBacktrack[163]);

                int LA163_0 = input.LA(1);

                if ( (LA163_0==NAMESPACE_SYM||(LA163_0>=IDENT && LA163_0<=MEDIA_SYM)||(LA163_0>=AND && LA163_0<=RPAREN)||(LA163_0>=WS && LA163_0<=RIGHTBOTTOM_SYM)||(LA163_0>=PLUS && LA163_0<=SASS_EXTEND_ONLY_SELECTOR)||(LA163_0>=PIPE && LA163_0<=RBRACKET)||(LA163_0>=IMPORTANT_SYM && LA163_0<=LINE_COMMENT)) ) {
                    alt163=1;
                }


                } finally {dbg.exitDecision(163);}

                switch (alt163) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:797:7: ~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR )
            	    {
            	    dbg.location(797,7);
            	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=RPAREN)||(input.LA(1)>=WS && input.LA(1)<=RIGHTBOTTOM_SYM)||(input.LA(1)>=PLUS && input.LA(1)<=SASS_EXTEND_ONLY_SELECTOR)||(input.LA(1)>=PIPE && input.LA(1)<=RBRACKET)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=LINE_COMMENT) ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt163 >= 1 ) break loop163;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(163, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt163++;
            } while (true);
            } finally {dbg.exitSubRule(163);}

            dbg.location(797,76);
            if ( input.LA(1)==SEMI||input.LA(1)==RBRACE ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(798, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "expressionPredicate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "expressionPredicate"


    // $ANTLR start "syncToDeclarationsRule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:802:1: syncToDeclarationsRule : ;
    public final void syncToDeclarationsRule() throws RecognitionException {

                //why sync to DOT? - LESS allows class rules nested
                syncToSet(BitSet.of(IDENT, RBRACE, STAR, DOT)); 
            
        try { dbg.enterRule(getGrammarFileName(), "syncToDeclarationsRule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(802, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:807:6: ()
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:808:6: 
            {
            }

        }
        finally {
        }
        dbg.location(808, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncToDeclarationsRule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncToDeclarationsRule"


    // $ANTLR start "syncTo_RBRACE"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:810:1: syncTo_RBRACE : ;
    public final void syncTo_RBRACE() throws RecognitionException {

                syncToRBRACE(1); //initial nest == 1
            
        try { dbg.enterRule(getGrammarFileName(), "syncTo_RBRACE");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(810, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:814:6: ()
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:815:6: 
            {
            }

        }
        finally {
        }
        dbg.location(815, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncTo_RBRACE");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncTo_RBRACE"


    // $ANTLR start "syncTo_SEMI"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:1: syncTo_SEMI : SEMI ;
    public final void syncTo_SEMI() throws RecognitionException {

                syncToSet(BitSet.of(SEMI)); 
            
        try { dbg.enterRule(getGrammarFileName(), "syncTo_SEMI");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(817, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:6: ( SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:822:13: SEMI
            {
            dbg.location(822,13);
            match(input,SEMI,FOLLOW_SEMI_in_syncTo_SEMI4824); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(823, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncTo_SEMI");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncTo_SEMI"


    // $ANTLR start "syncToFollow"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:826:1: syncToFollow : ;
    public final void syncToFollow() throws RecognitionException {

                syncToSet();
            
        try { dbg.enterRule(getGrammarFileName(), "syncToFollow");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(826, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:830:6: ()
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:6: 
            {
            }

        }
        finally {
        }
        dbg.location(831, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncToFollow");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncToFollow"


    // $ANTLR start "prio"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:833:1: prio : IMPORTANT_SYM ;
    public final void prio() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "prio");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(833, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:834:5: ( IMPORTANT_SYM )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:834:7: IMPORTANT_SYM
            {
            dbg.location(834,7);
            match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_prio4879); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(835, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prio");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "prio"


    // $ANTLR start "expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:837:1: expression : term ( ( ws | ( operator ( ws )? )? ) term )* ;
    public final void expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(837, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:5: ( term ( ( ws | ( operator ( ws )? )? ) term )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:7: term ( ( ws | ( operator ( ws )? )? ) term )*
            {
            dbg.location(838,7);
            pushFollow(FOLLOW_term_in_expression4900);
            term();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(838,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:12: ( ( ws | ( operator ( ws )? )? ) term )*
            try { dbg.enterSubRule(167);

            loop167:
            do {
                int alt167=2;
                try { dbg.enterDecision(167, decisionCanBacktrack[167]);

                try {
                    isCyclicDecision = true;
                    alt167 = dfa167.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(167);}

                switch (alt167) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:14: ( ws | ( operator ( ws )? )? ) term
            	    {
            	    dbg.location(838,14);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:14: ( ws | ( operator ( ws )? )? )
            	    int alt166=2;
            	    try { dbg.enterSubRule(166);
            	    try { dbg.enterDecision(166, decisionCanBacktrack[166]);

            	    int LA166_0 = input.LA(1);

            	    if ( (LA166_0==WS||(LA166_0>=NL && LA166_0<=COMMENT)) ) {
            	        alt166=1;
            	    }
            	    else if ( ((LA166_0>=IDENT && LA166_0<=URI)||(LA166_0>=COMMA && LA166_0<=MEDIA_SYM)||LA166_0==GEN||LA166_0==AT_IDENT||LA166_0==PERCENTAGE||(LA166_0>=SOLIDUS && LA166_0<=PLUS)||LA166_0==MINUS||LA166_0==HASH||LA166_0==SASS_VAR||(LA166_0>=NUMBER && LA166_0<=DIMENSION)) ) {
            	        alt166=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 166, 0, input);

            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(166);}

            	    switch (alt166) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:16: ws
            	            {
            	            dbg.location(838,16);
            	            pushFollow(FOLLOW_ws_in_expression4906);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:21: ( operator ( ws )? )?
            	            {
            	            dbg.location(838,21);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:21: ( operator ( ws )? )?
            	            int alt165=2;
            	            try { dbg.enterSubRule(165);
            	            try { dbg.enterDecision(165, decisionCanBacktrack[165]);

            	            int LA165_0 = input.LA(1);

            	            if ( (LA165_0==COMMA||LA165_0==SOLIDUS) ) {
            	                alt165=1;
            	            }
            	            } finally {dbg.exitDecision(165);}

            	            switch (alt165) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:22: operator ( ws )?
            	                    {
            	                    dbg.location(838,22);
            	                    pushFollow(FOLLOW_operator_in_expression4911);
            	                    operator();

            	                    state._fsp--;
            	                    if (state.failed) return ;
            	                    dbg.location(838,31);
            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:31: ( ws )?
            	                    int alt164=2;
            	                    try { dbg.enterSubRule(164);
            	                    try { dbg.enterDecision(164, decisionCanBacktrack[164]);

            	                    int LA164_0 = input.LA(1);

            	                    if ( (LA164_0==WS||(LA164_0>=NL && LA164_0<=COMMENT)) ) {
            	                        alt164=1;
            	                    }
            	                    } finally {dbg.exitDecision(164);}

            	                    switch (alt164) {
            	                        case 1 :
            	                            dbg.enterAlt(1);

            	                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:31: ws
            	                            {
            	                            dbg.location(838,31);
            	                            pushFollow(FOLLOW_ws_in_expression4913);
            	                            ws();

            	                            state._fsp--;
            	                            if (state.failed) return ;

            	                            }
            	                            break;

            	                    }
            	                    } finally {dbg.exitSubRule(164);}


            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(165);}


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(166);}

            	    dbg.location(838,38);
            	    pushFollow(FOLLOW_term_in_expression4919);
            	    term();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop167;
                }
            } while (true);
            } finally {dbg.exitSubRule(167);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(839, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "expression"


    // $ANTLR start "term"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:841:1: term : ( unaryOperator ( ws )? )? ( ( function )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | GEN | URI | hexColor | {...}? cp_variable ) ;
    public final void term() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "term");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(841, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:842:5: ( ( unaryOperator ( ws )? )? ( ( function )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | GEN | URI | hexColor | {...}? cp_variable ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:843:5: ( unaryOperator ( ws )? )? ( ( function )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | GEN | URI | hexColor | {...}? cp_variable )
            {
            dbg.location(843,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:843:5: ( unaryOperator ( ws )? )?
            int alt169=2;
            try { dbg.enterSubRule(169);
            try { dbg.enterDecision(169, decisionCanBacktrack[169]);

            int LA169_0 = input.LA(1);

            if ( (LA169_0==PLUS||LA169_0==MINUS) ) {
                alt169=1;
            }
            } finally {dbg.exitDecision(169);}

            switch (alt169) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:843:7: unaryOperator ( ws )?
                    {
                    dbg.location(843,7);
                    pushFollow(FOLLOW_unaryOperator_in_term4949);
                    unaryOperator();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(843,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:843:21: ( ws )?
                    int alt168=2;
                    try { dbg.enterSubRule(168);
                    try { dbg.enterDecision(168, decisionCanBacktrack[168]);

                    int LA168_0 = input.LA(1);

                    if ( (LA168_0==WS||(LA168_0>=NL && LA168_0<=COMMENT)) ) {
                        alt168=1;
                    }
                    } finally {dbg.exitDecision(168);}

                    switch (alt168) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:843:21: ws
                            {
                            dbg.location(843,21);
                            pushFollow(FOLLOW_ws_in_term4951);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(168);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(169);}

            dbg.location(844,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:844:5: ( ( function )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | GEN | URI | hexColor | {...}? cp_variable )
            int alt170=18;
            try { dbg.enterSubRule(170);
            try { dbg.enterDecision(170, decisionCanBacktrack[170]);

            try {
                isCyclicDecision = true;
                alt170 = dfa170.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(170);}

            switch (alt170) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:845:9: ( function )=> function
                    {
                    dbg.location(845,21);
                    pushFollow(FOLLOW_function_in_term4975);
                    function();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:846:11: IDENT
                    {
                    dbg.location(846,11);
                    match(input,IDENT,FOLLOW_IDENT_in_term4987); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:847:11: NUMBER
                    {
                    dbg.location(847,11);
                    match(input,NUMBER,FOLLOW_NUMBER_in_term4999); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:848:11: PERCENTAGE
                    {
                    dbg.location(848,11);
                    match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_term5011); if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:849:11: LENGTH
                    {
                    dbg.location(849,11);
                    match(input,LENGTH,FOLLOW_LENGTH_in_term5023); if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:850:11: EMS
                    {
                    dbg.location(850,11);
                    match(input,EMS,FOLLOW_EMS_in_term5035); if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:851:11: REM
                    {
                    dbg.location(851,11);
                    match(input,REM,FOLLOW_REM_in_term5047); if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:852:11: EXS
                    {
                    dbg.location(852,11);
                    match(input,EXS,FOLLOW_EXS_in_term5059); if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:853:11: ANGLE
                    {
                    dbg.location(853,11);
                    match(input,ANGLE,FOLLOW_ANGLE_in_term5071); if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:854:11: TIME
                    {
                    dbg.location(854,11);
                    match(input,TIME,FOLLOW_TIME_in_term5083); if (state.failed) return ;

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:855:11: FREQ
                    {
                    dbg.location(855,11);
                    match(input,FREQ,FOLLOW_FREQ_in_term5095); if (state.failed) return ;

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:856:11: RESOLUTION
                    {
                    dbg.location(856,11);
                    match(input,RESOLUTION,FOLLOW_RESOLUTION_in_term5107); if (state.failed) return ;

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:857:11: DIMENSION
                    {
                    dbg.location(857,11);
                    match(input,DIMENSION,FOLLOW_DIMENSION_in_term5119); if (state.failed) return ;

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:858:11: STRING
                    {
                    dbg.location(858,11);
                    match(input,STRING,FOLLOW_STRING_in_term5136); if (state.failed) return ;

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:11: GEN
                    {
                    dbg.location(859,11);
                    match(input,GEN,FOLLOW_GEN_in_term5148); if (state.failed) return ;

                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:860:11: URI
                    {
                    dbg.location(860,11);
                    match(input,URI,FOLLOW_URI_in_term5160); if (state.failed) return ;

                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:11: hexColor
                    {
                    dbg.location(861,11);
                    pushFollow(FOLLOW_hexColor_in_term5172);
                    hexColor();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 18 :
                    dbg.enterAlt(18);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:862:11: {...}? cp_variable
                    {
                    dbg.location(862,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
                    }
                    dbg.location(862,40);
                    pushFollow(FOLLOW_cp_variable_in_term5186);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(170);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(864, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "term");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "term"


    // $ANTLR start "function"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:866:1: function : functionName ( ws )? LPAREN ( ws )? ( ( cp_args_list )=> cp_args_list | ( cp_expression_list )=> cp_expression_list ( ws )? | expression ( ws )? | fnAttribute ( COMMA ( ws )? fnAttribute )* | {...}?) RPAREN ;
    public final void function() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "function");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(866, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:867:2: ( functionName ( ws )? LPAREN ( ws )? ( ( cp_args_list )=> cp_args_list | ( cp_expression_list )=> cp_expression_list ( ws )? | expression ( ws )? | fnAttribute ( COMMA ( ws )? fnAttribute )* | {...}?) RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:867:5: functionName ( ws )? LPAREN ( ws )? ( ( cp_args_list )=> cp_args_list | ( cp_expression_list )=> cp_expression_list ( ws )? | expression ( ws )? | fnAttribute ( COMMA ( ws )? fnAttribute )* | {...}?) RPAREN
            {
            dbg.location(867,5);
            pushFollow(FOLLOW_functionName_in_function5207);
            functionName();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(867,18);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:867:18: ( ws )?
            int alt171=2;
            try { dbg.enterSubRule(171);
            try { dbg.enterDecision(171, decisionCanBacktrack[171]);

            int LA171_0 = input.LA(1);

            if ( (LA171_0==WS||(LA171_0>=NL && LA171_0<=COMMENT)) ) {
                alt171=1;
            }
            } finally {dbg.exitDecision(171);}

            switch (alt171) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:867:18: ws
                    {
                    dbg.location(867,18);
                    pushFollow(FOLLOW_ws_in_function5209);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(171);}

            dbg.location(868,3);
            match(input,LPAREN,FOLLOW_LPAREN_in_function5214); if (state.failed) return ;
            dbg.location(868,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:868:10: ( ws )?
            int alt172=2;
            try { dbg.enterSubRule(172);
            try { dbg.enterDecision(172, decisionCanBacktrack[172]);

            int LA172_0 = input.LA(1);

            if ( (LA172_0==WS||(LA172_0>=NL && LA172_0<=COMMENT)) ) {
                alt172=1;
            }
            } finally {dbg.exitDecision(172);}

            switch (alt172) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:868:10: ws
                    {
                    dbg.location(868,10);
                    pushFollow(FOLLOW_ws_in_function5216);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(172);}

            dbg.location(869,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:3: ( ( cp_args_list )=> cp_args_list | ( cp_expression_list )=> cp_expression_list ( ws )? | expression ( ws )? | fnAttribute ( COMMA ( ws )? fnAttribute )* | {...}?)
            int alt177=5;
            try { dbg.enterSubRule(177);
            try { dbg.enterDecision(177, decisionCanBacktrack[177]);

            try {
                isCyclicDecision = true;
                alt177 = dfa177.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(177);}

            switch (alt177) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:870:21: ( cp_args_list )=> cp_args_list
                    {
                    dbg.location(870,37);
                    pushFollow(FOLLOW_cp_args_list_in_function5247);
                    cp_args_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:871:23: ( cp_expression_list )=> cp_expression_list ( ws )?
                    {
                    dbg.location(871,45);
                    pushFollow(FOLLOW_cp_expression_list_in_function5275);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(871,64);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:871:64: ( ws )?
                    int alt173=2;
                    try { dbg.enterSubRule(173);
                    try { dbg.enterDecision(173, decisionCanBacktrack[173]);

                    int LA173_0 = input.LA(1);

                    if ( (LA173_0==WS||(LA173_0>=NL && LA173_0<=COMMENT)) ) {
                        alt173=1;
                    }
                    } finally {dbg.exitDecision(173);}

                    switch (alt173) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:871:64: ws
                            {
                            dbg.location(871,64);
                            pushFollow(FOLLOW_ws_in_function5277);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(173);}


                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:872:23: expression ( ws )?
                    {
                    dbg.location(872,23);
                    pushFollow(FOLLOW_expression_in_function5302);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(872,34);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:872:34: ( ws )?
                    int alt174=2;
                    try { dbg.enterSubRule(174);
                    try { dbg.enterDecision(174, decisionCanBacktrack[174]);

                    int LA174_0 = input.LA(1);

                    if ( (LA174_0==WS||(LA174_0>=NL && LA174_0<=COMMENT)) ) {
                        alt174=1;
                    }
                    } finally {dbg.exitDecision(174);}

                    switch (alt174) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:872:34: ws
                            {
                            dbg.location(872,34);
                            pushFollow(FOLLOW_ws_in_function5304);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(174);}


                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:873:23: fnAttribute ( COMMA ( ws )? fnAttribute )*
                    {
                    dbg.location(873,23);
                    pushFollow(FOLLOW_fnAttribute_in_function5329);
                    fnAttribute();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(873,35);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:873:35: ( COMMA ( ws )? fnAttribute )*
                    try { dbg.enterSubRule(176);

                    loop176:
                    do {
                        int alt176=2;
                        try { dbg.enterDecision(176, decisionCanBacktrack[176]);

                        int LA176_0 = input.LA(1);

                        if ( (LA176_0==COMMA) ) {
                            alt176=1;
                        }


                        } finally {dbg.exitDecision(176);}

                        switch (alt176) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:873:36: COMMA ( ws )? fnAttribute
                    	    {
                    	    dbg.location(873,36);
                    	    match(input,COMMA,FOLLOW_COMMA_in_function5332); if (state.failed) return ;
                    	    dbg.location(873,42);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:873:42: ( ws )?
                    	    int alt175=2;
                    	    try { dbg.enterSubRule(175);
                    	    try { dbg.enterDecision(175, decisionCanBacktrack[175]);

                    	    int LA175_0 = input.LA(1);

                    	    if ( (LA175_0==WS||(LA175_0>=NL && LA175_0<=COMMENT)) ) {
                    	        alt175=1;
                    	    }
                    	    } finally {dbg.exitDecision(175);}

                    	    switch (alt175) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:873:42: ws
                    	            {
                    	            dbg.location(873,42);
                    	            pushFollow(FOLLOW_ws_in_function5334);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(175);}

                    	    dbg.location(873,46);
                    	    pushFollow(FOLLOW_fnAttribute_in_function5337);
                    	    fnAttribute();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop176;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(176);}


                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:875:21: {...}?
                    {
                    dbg.location(875,21);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "function", "isCssPreprocessorSource()");
                    }

                    }
                    break;

            }
            } finally {dbg.exitSubRule(177);}

            dbg.location(877,3);
            match(input,RPAREN,FOLLOW_RPAREN_in_function5393); if (state.failed) return ;

            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(RPAREN, SEMI, RBRACE)); 

        }
        finally {
        }
        dbg.location(878, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "function");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "function"


    // $ANTLR start "functionName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:884:1: functionName : ( IDENT COLON )? IDENT ( DOT IDENT )* ;
    public final void functionName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "functionName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(884, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:888:2: ( ( IDENT COLON )? IDENT ( DOT IDENT )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:889:9: ( IDENT COLON )? IDENT ( DOT IDENT )*
            {
            dbg.location(889,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:889:9: ( IDENT COLON )?
            int alt178=2;
            try { dbg.enterSubRule(178);
            try { dbg.enterDecision(178, decisionCanBacktrack[178]);

            int LA178_0 = input.LA(1);

            if ( (LA178_0==IDENT) ) {
                int LA178_1 = input.LA(2);

                if ( (LA178_1==COLON) ) {
                    alt178=1;
                }
            }
            } finally {dbg.exitDecision(178);}

            switch (alt178) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:889:10: IDENT COLON
                    {
                    dbg.location(889,10);
                    match(input,IDENT,FOLLOW_IDENT_in_functionName5450); if (state.failed) return ;
                    dbg.location(889,16);
                    match(input,COLON,FOLLOW_COLON_in_functionName5452); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(178);}

            dbg.location(889,24);
            match(input,IDENT,FOLLOW_IDENT_in_functionName5456); if (state.failed) return ;
            dbg.location(889,30);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:889:30: ( DOT IDENT )*
            try { dbg.enterSubRule(179);

            loop179:
            do {
                int alt179=2;
                try { dbg.enterDecision(179, decisionCanBacktrack[179]);

                int LA179_0 = input.LA(1);

                if ( (LA179_0==DOT) ) {
                    alt179=1;
                }


                } finally {dbg.exitDecision(179);}

                switch (alt179) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:889:31: DOT IDENT
            	    {
            	    dbg.location(889,31);
            	    match(input,DOT,FOLLOW_DOT_in_functionName5459); if (state.failed) return ;
            	    dbg.location(889,35);
            	    match(input,IDENT,FOLLOW_IDENT_in_functionName5461); if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop179;
                }
            } while (true);
            } finally {dbg.exitSubRule(179);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(891, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "functionName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "functionName"


    // $ANTLR start "fnAttribute"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:893:1: fnAttribute : fnAttributeName ( ws )? OPEQ ( ws )? fnAttributeValue ( ws )? ;
    public final void fnAttribute() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttribute");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(893, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:894:2: ( fnAttributeName ( ws )? OPEQ ( ws )? fnAttributeValue ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:894:4: fnAttributeName ( ws )? OPEQ ( ws )? fnAttributeValue ( ws )?
            {
            dbg.location(894,4);
            pushFollow(FOLLOW_fnAttributeName_in_fnAttribute5484);
            fnAttributeName();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(894,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:894:20: ( ws )?
            int alt180=2;
            try { dbg.enterSubRule(180);
            try { dbg.enterDecision(180, decisionCanBacktrack[180]);

            int LA180_0 = input.LA(1);

            if ( (LA180_0==WS||(LA180_0>=NL && LA180_0<=COMMENT)) ) {
                alt180=1;
            }
            } finally {dbg.exitDecision(180);}

            switch (alt180) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:894:20: ws
                    {
                    dbg.location(894,20);
                    pushFollow(FOLLOW_ws_in_fnAttribute5486);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(180);}

            dbg.location(894,24);
            match(input,OPEQ,FOLLOW_OPEQ_in_fnAttribute5489); if (state.failed) return ;
            dbg.location(894,29);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:894:29: ( ws )?
            int alt181=2;
            try { dbg.enterSubRule(181);
            try { dbg.enterDecision(181, decisionCanBacktrack[181]);

            int LA181_0 = input.LA(1);

            if ( (LA181_0==WS||(LA181_0>=NL && LA181_0<=COMMENT)) ) {
                alt181=1;
            }
            } finally {dbg.exitDecision(181);}

            switch (alt181) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:894:29: ws
                    {
                    dbg.location(894,29);
                    pushFollow(FOLLOW_ws_in_fnAttribute5491);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(181);}

            dbg.location(894,33);
            pushFollow(FOLLOW_fnAttributeValue_in_fnAttribute5494);
            fnAttributeValue();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(894,50);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:894:50: ( ws )?
            int alt182=2;
            try { dbg.enterSubRule(182);
            try { dbg.enterDecision(182, decisionCanBacktrack[182]);

            int LA182_0 = input.LA(1);

            if ( (LA182_0==WS||(LA182_0>=NL && LA182_0<=COMMENT)) ) {
                alt182=1;
            }
            } finally {dbg.exitDecision(182);}

            switch (alt182) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:894:50: ws
                    {
                    dbg.location(894,50);
                    pushFollow(FOLLOW_ws_in_fnAttribute5496);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(182);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(895, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttribute");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttribute"


    // $ANTLR start "fnAttributeName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:897:1: fnAttributeName : IDENT ( DOT IDENT )* ;
    public final void fnAttributeName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttributeName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(897, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:2: ( IDENT ( DOT IDENT )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:4: IDENT ( DOT IDENT )*
            {
            dbg.location(898,4);
            match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName5512); if (state.failed) return ;
            dbg.location(898,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:10: ( DOT IDENT )*
            try { dbg.enterSubRule(183);

            loop183:
            do {
                int alt183=2;
                try { dbg.enterDecision(183, decisionCanBacktrack[183]);

                int LA183_0 = input.LA(1);

                if ( (LA183_0==DOT) ) {
                    alt183=1;
                }


                } finally {dbg.exitDecision(183);}

                switch (alt183) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:11: DOT IDENT
            	    {
            	    dbg.location(898,11);
            	    match(input,DOT,FOLLOW_DOT_in_fnAttributeName5515); if (state.failed) return ;
            	    dbg.location(898,15);
            	    match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName5517); if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop183;
                }
            } while (true);
            } finally {dbg.exitSubRule(183);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(899, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttributeName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttributeName"


    // $ANTLR start "fnAttributeValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:901:1: fnAttributeValue : expression ;
    public final void fnAttributeValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttributeValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(901, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:902:2: ( expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:902:4: expression
            {
            dbg.location(902,4);
            pushFollow(FOLLOW_expression_in_fnAttributeValue5531);
            expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(903, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttributeValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttributeValue"


    // $ANTLR start "hexColor"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:1: hexColor : HASH ;
    public final void hexColor() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "hexColor");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(905, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:906:5: ( HASH )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:906:7: HASH
            {
            dbg.location(906,7);
            match(input,HASH,FOLLOW_HASH_in_hexColor5549); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(907, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hexColor");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "hexColor"


    // $ANTLR start "ws"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:1: ws : ( WS | NL | COMMENT )+ ;
    public final void ws() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "ws");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(909, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:910:5: ( ( WS | NL | COMMENT )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:910:7: ( WS | NL | COMMENT )+
            {
            dbg.location(910,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:910:7: ( WS | NL | COMMENT )+
            int cnt184=0;
            try { dbg.enterSubRule(184);

            loop184:
            do {
                int alt184=2;
                try { dbg.enterDecision(184, decisionCanBacktrack[184]);

                int LA184_0 = input.LA(1);

                if ( (LA184_0==WS||(LA184_0>=NL && LA184_0<=COMMENT)) ) {
                    alt184=1;
                }


                } finally {dbg.exitDecision(184);}

                switch (alt184) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            	    {
            	    dbg.location(910,7);
            	    if ( input.LA(1)==WS||(input.LA(1)>=NL && input.LA(1)<=COMMENT) ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt184 >= 1 ) break loop184;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(184, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt184++;
            } while (true);
            } finally {dbg.exitSubRule(184);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(911, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ws");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "ws"


    // $ANTLR start "cp_variable_declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:916:1: cp_variable_declaration : ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ws )? SEMI | {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ws )? ( SASS_DEFAULT ( ws )? )? SEMI );
    public final void cp_variable_declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_variable_declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(916, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:917:5: ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ws )? SEMI | {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ws )? ( SASS_DEFAULT ( ws )? )? SEMI )
            int alt193=2;
            try { dbg.enterDecision(193, decisionCanBacktrack[193]);

            int LA193_0 = input.LA(1);

            if ( (LA193_0==MEDIA_SYM||LA193_0==AT_IDENT) ) {
                int LA193_1 = input.LA(2);

                if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
                    alt193=1;
                }
                else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
                    alt193=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 193, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA193_0==SASS_VAR) ) {
                int LA193_2 = input.LA(2);

                if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
                    alt193=1;
                }
                else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
                    alt193=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 193, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 193, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(193);}

            switch (alt193) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ws )? SEMI
                    {
                    dbg.location(918,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable_declaration", "isLessSource()");
                    }
                    dbg.location(918,27);
                    pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration5618);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(918,39);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:39: ( ws )?
                    int alt185=2;
                    try { dbg.enterSubRule(185);
                    try { dbg.enterDecision(185, decisionCanBacktrack[185]);

                    int LA185_0 = input.LA(1);

                    if ( (LA185_0==WS||(LA185_0>=NL && LA185_0<=COMMENT)) ) {
                        alt185=1;
                    }
                    } finally {dbg.exitDecision(185);}

                    switch (alt185) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:39: ws
                            {
                            dbg.location(918,39);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5620);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(185);}

                    dbg.location(918,43);
                    match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration5623); if (state.failed) return ;
                    dbg.location(918,49);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:49: ( ws )?
                    int alt186=2;
                    try { dbg.enterSubRule(186);
                    try { dbg.enterDecision(186, decisionCanBacktrack[186]);

                    int LA186_0 = input.LA(1);

                    if ( (LA186_0==WS||(LA186_0>=NL && LA186_0<=COMMENT)) ) {
                        alt186=1;
                    }
                    } finally {dbg.exitDecision(186);}

                    switch (alt186) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:49: ws
                            {
                            dbg.location(918,49);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5625);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(186);}

                    dbg.location(918,53);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration5628);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(918,72);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:72: ( ws )?
                    int alt187=2;
                    try { dbg.enterSubRule(187);
                    try { dbg.enterDecision(187, decisionCanBacktrack[187]);

                    int LA187_0 = input.LA(1);

                    if ( (LA187_0==WS||(LA187_0>=NL && LA187_0<=COMMENT)) ) {
                        alt187=1;
                    }
                    } finally {dbg.exitDecision(187);}

                    switch (alt187) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:72: ws
                            {
                            dbg.location(918,72);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5630);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(187);}

                    dbg.location(918,76);
                    match(input,SEMI,FOLLOW_SEMI_in_cp_variable_declaration5633); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:920:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ws )? ( SASS_DEFAULT ( ws )? )? SEMI
                    {
                    dbg.location(920,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable_declaration", "isScssSource()");
                    }
                    dbg.location(920,27);
                    pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration5660);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(920,39);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:920:39: ( ws )?
                    int alt188=2;
                    try { dbg.enterSubRule(188);
                    try { dbg.enterDecision(188, decisionCanBacktrack[188]);

                    int LA188_0 = input.LA(1);

                    if ( (LA188_0==WS||(LA188_0>=NL && LA188_0<=COMMENT)) ) {
                        alt188=1;
                    }
                    } finally {dbg.exitDecision(188);}

                    switch (alt188) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:920:39: ws
                            {
                            dbg.location(920,39);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5662);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(188);}

                    dbg.location(920,43);
                    match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration5665); if (state.failed) return ;
                    dbg.location(920,49);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:920:49: ( ws )?
                    int alt189=2;
                    try { dbg.enterSubRule(189);
                    try { dbg.enterDecision(189, decisionCanBacktrack[189]);

                    int LA189_0 = input.LA(1);

                    if ( (LA189_0==WS||(LA189_0>=NL && LA189_0<=COMMENT)) ) {
                        alt189=1;
                    }
                    } finally {dbg.exitDecision(189);}

                    switch (alt189) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:920:49: ws
                            {
                            dbg.location(920,49);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5667);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(189);}

                    dbg.location(920,53);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration5670);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(920,72);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:920:72: ( ws )?
                    int alt190=2;
                    try { dbg.enterSubRule(190);
                    try { dbg.enterDecision(190, decisionCanBacktrack[190]);

                    int LA190_0 = input.LA(1);

                    if ( (LA190_0==WS||(LA190_0>=NL && LA190_0<=COMMENT)) ) {
                        alt190=1;
                    }
                    } finally {dbg.exitDecision(190);}

                    switch (alt190) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:920:72: ws
                            {
                            dbg.location(920,72);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5672);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(190);}

                    dbg.location(920,76);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:920:76: ( SASS_DEFAULT ( ws )? )?
                    int alt192=2;
                    try { dbg.enterSubRule(192);
                    try { dbg.enterDecision(192, decisionCanBacktrack[192]);

                    int LA192_0 = input.LA(1);

                    if ( (LA192_0==SASS_DEFAULT) ) {
                        alt192=1;
                    }
                    } finally {dbg.exitDecision(192);}

                    switch (alt192) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:920:77: SASS_DEFAULT ( ws )?
                            {
                            dbg.location(920,77);
                            match(input,SASS_DEFAULT,FOLLOW_SASS_DEFAULT_in_cp_variable_declaration5676); if (state.failed) return ;
                            dbg.location(920,90);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:920:90: ( ws )?
                            int alt191=2;
                            try { dbg.enterSubRule(191);
                            try { dbg.enterDecision(191, decisionCanBacktrack[191]);

                            int LA191_0 = input.LA(1);

                            if ( (LA191_0==WS||(LA191_0>=NL && LA191_0<=COMMENT)) ) {
                                alt191=1;
                            }
                            } finally {dbg.exitDecision(191);}

                            switch (alt191) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:920:90: ws
                                    {
                                    dbg.location(920,90);
                                    pushFollow(FOLLOW_ws_in_cp_variable_declaration5678);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(191);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(192);}

                    dbg.location(920,96);
                    match(input,SEMI,FOLLOW_SEMI_in_cp_variable_declaration5683); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(921, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_variable_declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_variable_declaration"


    // $ANTLR start "cp_variable"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:924:1: cp_variable : ({...}? ( AT_IDENT | MEDIA_SYM ) | {...}? ( SASS_VAR ) );
    public final void cp_variable() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_variable");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(924, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:925:5: ({...}? ( AT_IDENT | MEDIA_SYM ) | {...}? ( SASS_VAR ) )
            int alt194=2;
            try { dbg.enterDecision(194, decisionCanBacktrack[194]);

            int LA194_0 = input.LA(1);

            if ( (LA194_0==MEDIA_SYM||LA194_0==AT_IDENT) ) {
                alt194=1;
            }
            else if ( (LA194_0==SASS_VAR) ) {
                alt194=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 194, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(194);}

            switch (alt194) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:926:9: {...}? ( AT_IDENT | MEDIA_SYM )
                    {
                    dbg.location(926,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable", "isLessSource()");
                    }
                    dbg.location(926,27);
                    if ( input.LA(1)==MEDIA_SYM||input.LA(1)==AT_IDENT ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:9: {...}? ( SASS_VAR )
                    {
                    dbg.location(928,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable", "isScssSource()");
                    }
                    dbg.location(928,27);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:27: ( SASS_VAR )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:29: SASS_VAR
                    {
                    dbg.location(928,29);
                    match(input,SASS_VAR,FOLLOW_SASS_VAR_in_cp_variable5748); if (state.failed) return ;

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(930, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_variable");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_variable"


    // $ANTLR start "cp_expression_list"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:932:1: cp_expression_list : cp_expression ( ( ws )? COMMA ( ws )? cp_expression )* ;
    public final void cp_expression_list() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression_list");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(932, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:933:5: ( cp_expression ( ( ws )? COMMA ( ws )? cp_expression )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:5: cp_expression ( ( ws )? COMMA ( ws )? cp_expression )*
            {
            dbg.location(934,5);
            pushFollow(FOLLOW_cp_expression_in_cp_expression_list5772);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(934,19);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:19: ( ( ws )? COMMA ( ws )? cp_expression )*
            try { dbg.enterSubRule(197);

            loop197:
            do {
                int alt197=2;
                try { dbg.enterDecision(197, decisionCanBacktrack[197]);

                try {
                    isCyclicDecision = true;
                    alt197 = dfa197.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(197);}

                switch (alt197) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:20: ( ws )? COMMA ( ws )? cp_expression
            	    {
            	    dbg.location(934,20);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:20: ( ws )?
            	    int alt195=2;
            	    try { dbg.enterSubRule(195);
            	    try { dbg.enterDecision(195, decisionCanBacktrack[195]);

            	    int LA195_0 = input.LA(1);

            	    if ( (LA195_0==WS||(LA195_0>=NL && LA195_0<=COMMENT)) ) {
            	        alt195=1;
            	    }
            	    } finally {dbg.exitDecision(195);}

            	    switch (alt195) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:20: ws
            	            {
            	            dbg.location(934,20);
            	            pushFollow(FOLLOW_ws_in_cp_expression_list5775);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(195);}

            	    dbg.location(934,24);
            	    match(input,COMMA,FOLLOW_COMMA_in_cp_expression_list5778); if (state.failed) return ;
            	    dbg.location(934,30);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:30: ( ws )?
            	    int alt196=2;
            	    try { dbg.enterSubRule(196);
            	    try { dbg.enterDecision(196, decisionCanBacktrack[196]);

            	    int LA196_0 = input.LA(1);

            	    if ( (LA196_0==WS||(LA196_0>=NL && LA196_0<=COMMENT)) ) {
            	        alt196=1;
            	    }
            	    } finally {dbg.exitDecision(196);}

            	    switch (alt196) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:30: ws
            	            {
            	            dbg.location(934,30);
            	            pushFollow(FOLLOW_ws_in_cp_expression_list5780);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(196);}

            	    dbg.location(934,34);
            	    pushFollow(FOLLOW_cp_expression_in_cp_expression_list5783);
            	    cp_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop197;
                }
            } while (true);
            } finally {dbg.exitSubRule(197);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(935, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression_list");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression_list"


    // $ANTLR start "cp_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:938:1: cp_expression : cp_additionExp ( ( ws )? cp_additionExp )* ;
    public final void cp_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(938, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:939:5: ( cp_additionExp ( ( ws )? cp_additionExp )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:5: cp_additionExp ( ( ws )? cp_additionExp )*
            {
            dbg.location(940,5);
            pushFollow(FOLLOW_cp_additionExp_in_cp_expression5816);
            cp_additionExp();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(941,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:941:5: ( ( ws )? cp_additionExp )*
            try { dbg.enterSubRule(199);

            loop199:
            do {
                int alt199=2;
                try { dbg.enterDecision(199, decisionCanBacktrack[199]);

                try {
                    isCyclicDecision = true;
                    alt199 = dfa199.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(199);}

                switch (alt199) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:941:6: ( ws )? cp_additionExp
            	    {
            	    dbg.location(941,6);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:941:6: ( ws )?
            	    int alt198=2;
            	    try { dbg.enterSubRule(198);
            	    try { dbg.enterDecision(198, decisionCanBacktrack[198]);

            	    int LA198_0 = input.LA(1);

            	    if ( (LA198_0==WS||(LA198_0>=NL && LA198_0<=COMMENT)) ) {
            	        alt198=1;
            	    }
            	    } finally {dbg.exitDecision(198);}

            	    switch (alt198) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:941:6: ws
            	            {
            	            dbg.location(941,6);
            	            pushFollow(FOLLOW_ws_in_cp_expression5823);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(198);}

            	    dbg.location(941,10);
            	    pushFollow(FOLLOW_cp_additionExp_in_cp_expression5826);
            	    cp_additionExp();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop199;
                }
            } while (true);
            } finally {dbg.exitSubRule(199);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(942, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression"


    // $ANTLR start "cp_additionExp"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:944:1: cp_additionExp : cp_multiplyExp ( ( ( ws )? ( PLUS | MINUS ) )=> ( ws )? ( PLUS ( ws )? cp_multiplyExp | MINUS ( ws )? cp_multiplyExp ) )* ;
    public final void cp_additionExp() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_additionExp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(944, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:945:5: ( cp_multiplyExp ( ( ( ws )? ( PLUS | MINUS ) )=> ( ws )? ( PLUS ( ws )? cp_multiplyExp | MINUS ( ws )? cp_multiplyExp ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:945:10: cp_multiplyExp ( ( ( ws )? ( PLUS | MINUS ) )=> ( ws )? ( PLUS ( ws )? cp_multiplyExp | MINUS ( ws )? cp_multiplyExp ) )*
            {
            dbg.location(945,10);
            pushFollow(FOLLOW_cp_multiplyExp_in_cp_additionExp5848);
            cp_multiplyExp();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(946,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:10: ( ( ( ws )? ( PLUS | MINUS ) )=> ( ws )? ( PLUS ( ws )? cp_multiplyExp | MINUS ( ws )? cp_multiplyExp ) )*
            try { dbg.enterSubRule(204);

            loop204:
            do {
                int alt204=2;
                try { dbg.enterDecision(204, decisionCanBacktrack[204]);

                try {
                    isCyclicDecision = true;
                    alt204 = dfa204.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(204);}

                switch (alt204) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:13: ( ( ws )? ( PLUS | MINUS ) )=> ( ws )? ( PLUS ( ws )? cp_multiplyExp | MINUS ( ws )? cp_multiplyExp )
            	    {
            	    dbg.location(947,36);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:36: ( ws )?
            	    int alt200=2;
            	    try { dbg.enterSubRule(200);
            	    try { dbg.enterDecision(200, decisionCanBacktrack[200]);

            	    int LA200_0 = input.LA(1);

            	    if ( (LA200_0==WS||(LA200_0>=NL && LA200_0<=COMMENT)) ) {
            	        alt200=1;
            	    }
            	    } finally {dbg.exitDecision(200);}

            	    switch (alt200) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:36: ws
            	            {
            	            dbg.location(947,36);
            	            pushFollow(FOLLOW_ws_in_cp_additionExp5888);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(200);}

            	    dbg.location(947,40);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:40: ( PLUS ( ws )? cp_multiplyExp | MINUS ( ws )? cp_multiplyExp )
            	    int alt203=2;
            	    try { dbg.enterSubRule(203);
            	    try { dbg.enterDecision(203, decisionCanBacktrack[203]);

            	    int LA203_0 = input.LA(1);

            	    if ( (LA203_0==PLUS) ) {
            	        alt203=1;
            	    }
            	    else if ( (LA203_0==MINUS) ) {
            	        alt203=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 203, 0, input);

            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(203);}

            	    switch (alt203) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:42: PLUS ( ws )? cp_multiplyExp
            	            {
            	            dbg.location(947,42);
            	            match(input,PLUS,FOLLOW_PLUS_in_cp_additionExp5893); if (state.failed) return ;
            	            dbg.location(947,47);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:47: ( ws )?
            	            int alt201=2;
            	            try { dbg.enterSubRule(201);
            	            try { dbg.enterDecision(201, decisionCanBacktrack[201]);

            	            int LA201_0 = input.LA(1);

            	            if ( (LA201_0==WS||(LA201_0>=NL && LA201_0<=COMMENT)) ) {
            	                alt201=1;
            	            }
            	            } finally {dbg.exitDecision(201);}

            	            switch (alt201) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:47: ws
            	                    {
            	                    dbg.location(947,47);
            	                    pushFollow(FOLLOW_ws_in_cp_additionExp5895);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(201);}

            	            dbg.location(947,51);
            	            pushFollow(FOLLOW_cp_multiplyExp_in_cp_additionExp5898);
            	            cp_multiplyExp();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:68: MINUS ( ws )? cp_multiplyExp
            	            {
            	            dbg.location(947,68);
            	            match(input,MINUS,FOLLOW_MINUS_in_cp_additionExp5902); if (state.failed) return ;
            	            dbg.location(947,74);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:74: ( ws )?
            	            int alt202=2;
            	            try { dbg.enterSubRule(202);
            	            try { dbg.enterDecision(202, decisionCanBacktrack[202]);

            	            int LA202_0 = input.LA(1);

            	            if ( (LA202_0==WS||(LA202_0>=NL && LA202_0<=COMMENT)) ) {
            	                alt202=1;
            	            }
            	            } finally {dbg.exitDecision(202);}

            	            switch (alt202) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:74: ws
            	                    {
            	                    dbg.location(947,74);
            	                    pushFollow(FOLLOW_ws_in_cp_additionExp5904);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(202);}

            	            dbg.location(947,78);
            	            pushFollow(FOLLOW_cp_multiplyExp_in_cp_additionExp5907);
            	            cp_multiplyExp();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(203);}


            	    }
            	    break;

            	default :
            	    break loop204;
                }
            } while (true);
            } finally {dbg.exitSubRule(204);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(949, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_additionExp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_additionExp"


    // $ANTLR start "cp_multiplyExp"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:1: cp_multiplyExp : cp_atomExp ( ( ( ws )? ( STAR | SOLIDUS ) )=> ( ws )? ( STAR ( ws )? cp_atomExp | SOLIDUS ( ws )? cp_atomExp ) )* ;
    public final void cp_multiplyExp() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_multiplyExp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(951, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:952:5: ( cp_atomExp ( ( ( ws )? ( STAR | SOLIDUS ) )=> ( ws )? ( STAR ( ws )? cp_atomExp | SOLIDUS ( ws )? cp_atomExp ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:952:10: cp_atomExp ( ( ( ws )? ( STAR | SOLIDUS ) )=> ( ws )? ( STAR ( ws )? cp_atomExp | SOLIDUS ( ws )? cp_atomExp ) )*
            {
            dbg.location(952,10);
            pushFollow(FOLLOW_cp_atomExp_in_cp_multiplyExp5942);
            cp_atomExp();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(953,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:953:10: ( ( ( ws )? ( STAR | SOLIDUS ) )=> ( ws )? ( STAR ( ws )? cp_atomExp | SOLIDUS ( ws )? cp_atomExp ) )*
            try { dbg.enterSubRule(209);

            loop209:
            do {
                int alt209=2;
                try { dbg.enterDecision(209, decisionCanBacktrack[209]);

                try {
                    isCyclicDecision = true;
                    alt209 = dfa209.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(209);}

                switch (alt209) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:954:13: ( ( ws )? ( STAR | SOLIDUS ) )=> ( ws )? ( STAR ( ws )? cp_atomExp | SOLIDUS ( ws )? cp_atomExp )
            	    {
            	    dbg.location(954,38);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:954:38: ( ws )?
            	    int alt205=2;
            	    try { dbg.enterSubRule(205);
            	    try { dbg.enterDecision(205, decisionCanBacktrack[205]);

            	    int LA205_0 = input.LA(1);

            	    if ( (LA205_0==WS||(LA205_0>=NL && LA205_0<=COMMENT)) ) {
            	        alt205=1;
            	    }
            	    } finally {dbg.exitDecision(205);}

            	    switch (alt205) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:954:38: ws
            	            {
            	            dbg.location(954,38);
            	            pushFollow(FOLLOW_ws_in_cp_multiplyExp5982);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(205);}

            	    dbg.location(954,42);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:954:42: ( STAR ( ws )? cp_atomExp | SOLIDUS ( ws )? cp_atomExp )
            	    int alt208=2;
            	    try { dbg.enterSubRule(208);
            	    try { dbg.enterDecision(208, decisionCanBacktrack[208]);

            	    int LA208_0 = input.LA(1);

            	    if ( (LA208_0==STAR) ) {
            	        alt208=1;
            	    }
            	    else if ( (LA208_0==SOLIDUS) ) {
            	        alt208=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 208, 0, input);

            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(208);}

            	    switch (alt208) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:954:44: STAR ( ws )? cp_atomExp
            	            {
            	            dbg.location(954,44);
            	            match(input,STAR,FOLLOW_STAR_in_cp_multiplyExp5987); if (state.failed) return ;
            	            dbg.location(954,49);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:954:49: ( ws )?
            	            int alt206=2;
            	            try { dbg.enterSubRule(206);
            	            try { dbg.enterDecision(206, decisionCanBacktrack[206]);

            	            int LA206_0 = input.LA(1);

            	            if ( (LA206_0==WS||(LA206_0>=NL && LA206_0<=COMMENT)) ) {
            	                alt206=1;
            	            }
            	            } finally {dbg.exitDecision(206);}

            	            switch (alt206) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:954:49: ws
            	                    {
            	                    dbg.location(954,49);
            	                    pushFollow(FOLLOW_ws_in_cp_multiplyExp5989);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(206);}

            	            dbg.location(954,53);
            	            pushFollow(FOLLOW_cp_atomExp_in_cp_multiplyExp5992);
            	            cp_atomExp();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:954:66: SOLIDUS ( ws )? cp_atomExp
            	            {
            	            dbg.location(954,66);
            	            match(input,SOLIDUS,FOLLOW_SOLIDUS_in_cp_multiplyExp5996); if (state.failed) return ;
            	            dbg.location(954,74);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:954:74: ( ws )?
            	            int alt207=2;
            	            try { dbg.enterSubRule(207);
            	            try { dbg.enterDecision(207, decisionCanBacktrack[207]);

            	            int LA207_0 = input.LA(1);

            	            if ( (LA207_0==WS||(LA207_0>=NL && LA207_0<=COMMENT)) ) {
            	                alt207=1;
            	            }
            	            } finally {dbg.exitDecision(207);}

            	            switch (alt207) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:954:74: ws
            	                    {
            	                    dbg.location(954,74);
            	                    pushFollow(FOLLOW_ws_in_cp_multiplyExp5998);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(207);}

            	            dbg.location(954,78);
            	            pushFollow(FOLLOW_cp_atomExp_in_cp_multiplyExp6001);
            	            cp_atomExp();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(208);}


            	    }
            	    break;

            	default :
            	    break loop209;
                }
            } while (true);
            } finally {dbg.exitSubRule(209);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(956, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_multiplyExp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_multiplyExp"


    // $ANTLR start "cp_atomExp"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:958:1: cp_atomExp : ( term | IMPORTANT_SYM | sass_interpolation_expression_var | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_additionExp ( ws )? RPAREN );
    public final void cp_atomExp() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_atomExp");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(958, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:959:5: ( term | IMPORTANT_SYM | sass_interpolation_expression_var | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_additionExp ( ws )? RPAREN )
            int alt214=4;
            try { dbg.enterDecision(214, decisionCanBacktrack[214]);

            try {
                isCyclicDecision = true;
                alt214 = dfa214.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(214);}

            switch (alt214) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:960:5: term
                    {
                    dbg.location(960,5);
                    pushFollow(FOLLOW_term_in_cp_atomExp6040);
                    term();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:7: IMPORTANT_SYM
                    {
                    dbg.location(961,7);
                    match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_cp_atomExp6048); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:962:7: sass_interpolation_expression_var
                    {
                    dbg.location(962,7);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_cp_atomExp6057);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:963:7: ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_additionExp ( ws )? RPAREN
                    {
                    dbg.location(963,7);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:963:7: ( unaryOperator ( ws )? )?
                    int alt211=2;
                    try { dbg.enterSubRule(211);
                    try { dbg.enterDecision(211, decisionCanBacktrack[211]);

                    int LA211_0 = input.LA(1);

                    if ( (LA211_0==PLUS||LA211_0==MINUS) ) {
                        alt211=1;
                    }
                    } finally {dbg.exitDecision(211);}

                    switch (alt211) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:963:9: unaryOperator ( ws )?
                            {
                            dbg.location(963,9);
                            pushFollow(FOLLOW_unaryOperator_in_cp_atomExp6068);
                            unaryOperator();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(963,23);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:963:23: ( ws )?
                            int alt210=2;
                            try { dbg.enterSubRule(210);
                            try { dbg.enterDecision(210, decisionCanBacktrack[210]);

                            int LA210_0 = input.LA(1);

                            if ( (LA210_0==WS||(LA210_0>=NL && LA210_0<=COMMENT)) ) {
                                alt210=1;
                            }
                            } finally {dbg.exitDecision(210);}

                            switch (alt210) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:963:23: ws
                                    {
                                    dbg.location(963,23);
                                    pushFollow(FOLLOW_ws_in_cp_atomExp6070);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(210);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(211);}

                    dbg.location(963,30);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_atomExp6076); if (state.failed) return ;
                    dbg.location(963,37);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:963:37: ( ws )?
                    int alt212=2;
                    try { dbg.enterSubRule(212);
                    try { dbg.enterDecision(212, decisionCanBacktrack[212]);

                    int LA212_0 = input.LA(1);

                    if ( (LA212_0==WS||(LA212_0>=NL && LA212_0<=COMMENT)) ) {
                        alt212=1;
                    }
                    } finally {dbg.exitDecision(212);}

                    switch (alt212) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:963:37: ws
                            {
                            dbg.location(963,37);
                            pushFollow(FOLLOW_ws_in_cp_atomExp6078);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(212);}

                    dbg.location(963,41);
                    pushFollow(FOLLOW_cp_additionExp_in_cp_atomExp6081);
                    cp_additionExp();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(963,56);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:963:56: ( ws )?
                    int alt213=2;
                    try { dbg.enterSubRule(213);
                    try { dbg.enterDecision(213, decisionCanBacktrack[213]);

                    int LA213_0 = input.LA(1);

                    if ( (LA213_0==WS||(LA213_0>=NL && LA213_0<=COMMENT)) ) {
                        alt213=1;
                    }
                    } finally {dbg.exitDecision(213);}

                    switch (alt213) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:963:56: ws
                            {
                            dbg.location(963,56);
                            pushFollow(FOLLOW_ws_in_cp_atomExp6083);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(213);}

                    dbg.location(963,60);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_atomExp6086); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(964, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_atomExp");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_atomExp"


    // $ANTLR start "cp_term"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:968:1: cp_term : ( ( NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION ) | STRING | IDENT | GEN | URI | hexColor | function | cp_variable ) ( ws )? ;
    public final void cp_term() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_term");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(968, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:969:5: ( ( ( NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION ) | STRING | IDENT | GEN | URI | hexColor | function | cp_variable ) ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:970:9: ( ( NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION ) | STRING | IDENT | GEN | URI | hexColor | function | cp_variable ) ( ws )?
            {
            dbg.location(970,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:970:9: ( ( NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION ) | STRING | IDENT | GEN | URI | hexColor | function | cp_variable )
            int alt215=8;
            try { dbg.enterSubRule(215);
            try { dbg.enterDecision(215, decisionCanBacktrack[215]);

            try {
                isCyclicDecision = true;
                alt215 = dfa215.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(215);}

            switch (alt215) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:971:9: ( NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION )
                    {
                    dbg.location(971,9);
                    if ( input.LA(1)==PERCENTAGE||(input.LA(1)>=NUMBER && input.LA(1)<=DIMENSION) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:984:7: STRING
                    {
                    dbg.location(984,7);
                    match(input,STRING,FOLLOW_STRING_in_cp_term6325); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:7: IDENT
                    {
                    dbg.location(985,7);
                    match(input,IDENT,FOLLOW_IDENT_in_cp_term6333); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:986:7: GEN
                    {
                    dbg.location(986,7);
                    match(input,GEN,FOLLOW_GEN_in_cp_term6341); if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:987:7: URI
                    {
                    dbg.location(987,7);
                    match(input,URI,FOLLOW_URI_in_cp_term6349); if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:988:7: hexColor
                    {
                    dbg.location(988,7);
                    pushFollow(FOLLOW_hexColor_in_cp_term6357);
                    hexColor();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:989:7: function
                    {
                    dbg.location(989,7);
                    pushFollow(FOLLOW_function_in_cp_term6365);
                    function();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:990:7: cp_variable
                    {
                    dbg.location(990,7);
                    pushFollow(FOLLOW_cp_variable_in_cp_term6373);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(215);}

            dbg.location(992,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:992:5: ( ws )?
            int alt216=2;
            try { dbg.enterSubRule(216);
            try { dbg.enterDecision(216, decisionCanBacktrack[216]);

            int LA216_0 = input.LA(1);

            if ( (LA216_0==WS||(LA216_0>=NL && LA216_0<=COMMENT)) ) {
                alt216=1;
            }
            } finally {dbg.exitDecision(216);}

            switch (alt216) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:992:5: ws
                    {
                    dbg.location(992,5);
                    pushFollow(FOLLOW_ws_in_cp_term6385);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(216);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(993, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_term");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_term"


    // $ANTLR start "cp_mixin_declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1002:1: cp_mixin_declaration : ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ws )? ( less_mixin_guarded ( ws )? )? | {...}? SASS_MIXIN ws cp_mixin_name ( ws )? ( LPAREN ( ws )? ( cp_args_list )? RPAREN ( ws )? )? );
    public final void cp_mixin_declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1002, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1003:5: ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ws )? ( less_mixin_guarded ( ws )? )? | {...}? SASS_MIXIN ws cp_mixin_name ( ws )? ( LPAREN ( ws )? ( cp_args_list )? RPAREN ( ws )? )? )
            int alt228=2;
            try { dbg.enterDecision(228, decisionCanBacktrack[228]);

            int LA228_0 = input.LA(1);

            if ( (LA228_0==DOT) ) {
                alt228=1;
            }
            else if ( (LA228_0==SASS_MIXIN) ) {
                alt228=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 228, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(228);}

            switch (alt228) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1004:5: {...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ws )? ( less_mixin_guarded ( ws )? )?
                    {
                    dbg.location(1004,5);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_declaration", "isLessSource()");
                    }
                    dbg.location(1004,23);
                    match(input,DOT,FOLLOW_DOT_in_cp_mixin_declaration6416); if (state.failed) return ;
                    dbg.location(1004,27);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration6418);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1004,41);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1004:41: ( ws )?
                    int alt217=2;
                    try { dbg.enterSubRule(217);
                    try { dbg.enterDecision(217, decisionCanBacktrack[217]);

                    int LA217_0 = input.LA(1);

                    if ( (LA217_0==WS||(LA217_0>=NL && LA217_0<=COMMENT)) ) {
                        alt217=1;
                    }
                    } finally {dbg.exitDecision(217);}

                    switch (alt217) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1004:41: ws
                            {
                            dbg.location(1004,41);
                            pushFollow(FOLLOW_ws_in_cp_mixin_declaration6420);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(217);}

                    dbg.location(1004,45);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration6423); if (state.failed) return ;
                    dbg.location(1004,52);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1004:52: ( ws )?
                    int alt218=2;
                    try { dbg.enterSubRule(218);
                    try { dbg.enterDecision(218, decisionCanBacktrack[218]);

                    int LA218_0 = input.LA(1);

                    if ( (LA218_0==WS||(LA218_0>=NL && LA218_0<=COMMENT)) ) {
                        alt218=1;
                    }
                    } finally {dbg.exitDecision(218);}

                    switch (alt218) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1004:52: ws
                            {
                            dbg.location(1004,52);
                            pushFollow(FOLLOW_ws_in_cp_mixin_declaration6425);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(218);}

                    dbg.location(1004,56);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1004:56: ( cp_args_list )?
                    int alt219=2;
                    try { dbg.enterSubRule(219);
                    try { dbg.enterDecision(219, decisionCanBacktrack[219]);

                    int LA219_0 = input.LA(1);

                    if ( (LA219_0==MEDIA_SYM||LA219_0==AT_IDENT||LA219_0==SASS_VAR||(LA219_0>=LESS_DOTS && LA219_0<=LESS_REST)) ) {
                        alt219=1;
                    }
                    } finally {dbg.exitDecision(219);}

                    switch (alt219) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1004:56: cp_args_list
                            {
                            dbg.location(1004,56);
                            pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration6428);
                            cp_args_list();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(219);}

                    dbg.location(1004,70);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration6431); if (state.failed) return ;
                    dbg.location(1004,77);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1004:77: ( ws )?
                    int alt220=2;
                    try { dbg.enterSubRule(220);
                    try { dbg.enterDecision(220, decisionCanBacktrack[220]);

                    int LA220_0 = input.LA(1);

                    if ( (LA220_0==WS||(LA220_0>=NL && LA220_0<=COMMENT)) ) {
                        alt220=1;
                    }
                    } finally {dbg.exitDecision(220);}

                    switch (alt220) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1004:77: ws
                            {
                            dbg.location(1004,77);
                            pushFollow(FOLLOW_ws_in_cp_mixin_declaration6433);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(220);}

                    dbg.location(1004,81);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1004:81: ( less_mixin_guarded ( ws )? )?
                    int alt222=2;
                    try { dbg.enterSubRule(222);
                    try { dbg.enterDecision(222, decisionCanBacktrack[222]);

                    int LA222_0 = input.LA(1);

                    if ( (LA222_0==LESS_WHEN) ) {
                        alt222=1;
                    }
                    } finally {dbg.exitDecision(222);}

                    switch (alt222) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1004:82: less_mixin_guarded ( ws )?
                            {
                            dbg.location(1004,82);
                            pushFollow(FOLLOW_less_mixin_guarded_in_cp_mixin_declaration6437);
                            less_mixin_guarded();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(1004,101);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1004:101: ( ws )?
                            int alt221=2;
                            try { dbg.enterSubRule(221);
                            try { dbg.enterDecision(221, decisionCanBacktrack[221]);

                            int LA221_0 = input.LA(1);

                            if ( (LA221_0==WS||(LA221_0>=NL && LA221_0<=COMMENT)) ) {
                                alt221=1;
                            }
                            } finally {dbg.exitDecision(221);}

                            switch (alt221) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1004:101: ws
                                    {
                                    dbg.location(1004,101);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6439);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(221);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(222);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1006:5: {...}? SASS_MIXIN ws cp_mixin_name ( ws )? ( LPAREN ( ws )? ( cp_args_list )? RPAREN ( ws )? )?
                    {
                    dbg.location(1006,5);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_declaration", "isScssSource()");
                    }
                    dbg.location(1006,23);
                    match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_cp_mixin_declaration6456); if (state.failed) return ;
                    dbg.location(1006,34);
                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6458);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1006,37);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration6460);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1006,51);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1006:51: ( ws )?
                    int alt223=2;
                    try { dbg.enterSubRule(223);
                    try { dbg.enterDecision(223, decisionCanBacktrack[223]);

                    int LA223_0 = input.LA(1);

                    if ( (LA223_0==WS||(LA223_0>=NL && LA223_0<=COMMENT)) ) {
                        alt223=1;
                    }
                    } finally {dbg.exitDecision(223);}

                    switch (alt223) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1006:51: ws
                            {
                            dbg.location(1006,51);
                            pushFollow(FOLLOW_ws_in_cp_mixin_declaration6462);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(223);}

                    dbg.location(1006,55);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1006:55: ( LPAREN ( ws )? ( cp_args_list )? RPAREN ( ws )? )?
                    int alt227=2;
                    try { dbg.enterSubRule(227);
                    try { dbg.enterDecision(227, decisionCanBacktrack[227]);

                    int LA227_0 = input.LA(1);

                    if ( (LA227_0==LPAREN) ) {
                        alt227=1;
                    }
                    } finally {dbg.exitDecision(227);}

                    switch (alt227) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1006:56: LPAREN ( ws )? ( cp_args_list )? RPAREN ( ws )?
                            {
                            dbg.location(1006,56);
                            match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration6466); if (state.failed) return ;
                            dbg.location(1006,63);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1006:63: ( ws )?
                            int alt224=2;
                            try { dbg.enterSubRule(224);
                            try { dbg.enterDecision(224, decisionCanBacktrack[224]);

                            int LA224_0 = input.LA(1);

                            if ( (LA224_0==WS||(LA224_0>=NL && LA224_0<=COMMENT)) ) {
                                alt224=1;
                            }
                            } finally {dbg.exitDecision(224);}

                            switch (alt224) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1006:63: ws
                                    {
                                    dbg.location(1006,63);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6468);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(224);}

                            dbg.location(1006,67);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1006:67: ( cp_args_list )?
                            int alt225=2;
                            try { dbg.enterSubRule(225);
                            try { dbg.enterDecision(225, decisionCanBacktrack[225]);

                            int LA225_0 = input.LA(1);

                            if ( (LA225_0==MEDIA_SYM||LA225_0==AT_IDENT||LA225_0==SASS_VAR||(LA225_0>=LESS_DOTS && LA225_0<=LESS_REST)) ) {
                                alt225=1;
                            }
                            } finally {dbg.exitDecision(225);}

                            switch (alt225) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1006:67: cp_args_list
                                    {
                                    dbg.location(1006,67);
                                    pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration6471);
                                    cp_args_list();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(225);}

                            dbg.location(1006,81);
                            match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration6474); if (state.failed) return ;
                            dbg.location(1006,88);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1006:88: ( ws )?
                            int alt226=2;
                            try { dbg.enterSubRule(226);
                            try { dbg.enterDecision(226, decisionCanBacktrack[226]);

                            int LA226_0 = input.LA(1);

                            if ( (LA226_0==WS||(LA226_0>=NL && LA226_0<=COMMENT)) ) {
                                alt226=1;
                            }
                            } finally {dbg.exitDecision(226);}

                            switch (alt226) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1006:88: ws
                                    {
                                    dbg.location(1006,88);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6476);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(226);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(227);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1007, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_declaration"


    // $ANTLR start "cp_mixin_call"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1011:1: cp_mixin_call : ({...}? DOT cp_mixin_name | {...}? SASS_INCLUDE ws cp_mixin_name ) ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ws )? SEMI ;
    public final void cp_mixin_call() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1011, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1012:5: ( ({...}? DOT cp_mixin_name | {...}? SASS_INCLUDE ws cp_mixin_name ) ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ws )? SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1013:5: ({...}? DOT cp_mixin_name | {...}? SASS_INCLUDE ws cp_mixin_name ) ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ws )? SEMI
            {
            dbg.location(1013,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1013:5: ({...}? DOT cp_mixin_name | {...}? SASS_INCLUDE ws cp_mixin_name )
            int alt229=2;
            try { dbg.enterSubRule(229);
            try { dbg.enterDecision(229, decisionCanBacktrack[229]);

            int LA229_0 = input.LA(1);

            if ( (LA229_0==DOT) ) {
                alt229=1;
            }
            else if ( (LA229_0==SASS_INCLUDE) ) {
                alt229=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 229, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(229);}

            switch (alt229) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:9: {...}? DOT cp_mixin_name
                    {
                    dbg.location(1014,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_call", "isLessSource()");
                    }
                    dbg.location(1014,27);
                    match(input,DOT,FOLLOW_DOT_in_cp_mixin_call6518); if (state.failed) return ;
                    dbg.location(1014,31);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call6520);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1016:9: {...}? SASS_INCLUDE ws cp_mixin_name
                    {
                    dbg.location(1016,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_call", "isScssSource()");
                    }
                    dbg.location(1016,27);
                    match(input,SASS_INCLUDE,FOLLOW_SASS_INCLUDE_in_cp_mixin_call6542); if (state.failed) return ;
                    dbg.location(1016,40);
                    pushFollow(FOLLOW_ws_in_cp_mixin_call6544);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1016,43);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call6546);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(229);}

            dbg.location(1018,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1018:5: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
            int alt233=2;
            try { dbg.enterSubRule(233);
            try { dbg.enterDecision(233, decisionCanBacktrack[233]);

            try {
                isCyclicDecision = true;
                alt233 = dfa233.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(233);}

            switch (alt233) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1018:6: ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN
                    {
                    dbg.location(1018,6);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1018:6: ( ws )?
                    int alt230=2;
                    try { dbg.enterSubRule(230);
                    try { dbg.enterDecision(230, decisionCanBacktrack[230]);

                    int LA230_0 = input.LA(1);

                    if ( (LA230_0==WS||(LA230_0>=NL && LA230_0<=COMMENT)) ) {
                        alt230=1;
                    }
                    } finally {dbg.exitDecision(230);}

                    switch (alt230) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1018:6: ws
                            {
                            dbg.location(1018,6);
                            pushFollow(FOLLOW_ws_in_cp_mixin_call6559);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(230);}

                    dbg.location(1018,10);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_call6562); if (state.failed) return ;
                    dbg.location(1018,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1018:17: ( ws )?
                    int alt231=2;
                    try { dbg.enterSubRule(231);
                    try { dbg.enterDecision(231, decisionCanBacktrack[231]);

                    int LA231_0 = input.LA(1);

                    if ( (LA231_0==WS||(LA231_0>=NL && LA231_0<=COMMENT)) ) {
                        alt231=1;
                    }
                    } finally {dbg.exitDecision(231);}

                    switch (alt231) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1018:17: ws
                            {
                            dbg.location(1018,17);
                            pushFollow(FOLLOW_ws_in_cp_mixin_call6564);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(231);}

                    dbg.location(1018,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1018:21: ( cp_mixin_call_args )?
                    int alt232=2;
                    try { dbg.enterSubRule(232);
                    try { dbg.enterDecision(232, decisionCanBacktrack[232]);

                    int LA232_0 = input.LA(1);

                    if ( ((LA232_0>=IDENT && LA232_0<=URI)||LA232_0==MEDIA_SYM||(LA232_0>=GEN && LA232_0<=LPAREN)||LA232_0==AT_IDENT||LA232_0==PERCENTAGE||LA232_0==PLUS||(LA232_0>=MINUS && LA232_0<=HASH)||(LA232_0>=SASS_VAR && LA232_0<=DIMENSION)) ) {
                        alt232=1;
                    }
                    } finally {dbg.exitDecision(232);}

                    switch (alt232) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1018:21: cp_mixin_call_args
                            {
                            dbg.location(1018,21);
                            pushFollow(FOLLOW_cp_mixin_call_args_in_cp_mixin_call6567);
                            cp_mixin_call_args();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(232);}

                    dbg.location(1018,41);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_call6570); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(233);}

            dbg.location(1018,50);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1018:50: ( ws )?
            int alt234=2;
            try { dbg.enterSubRule(234);
            try { dbg.enterDecision(234, decisionCanBacktrack[234]);

            int LA234_0 = input.LA(1);

            if ( (LA234_0==WS||(LA234_0>=NL && LA234_0<=COMMENT)) ) {
                alt234=1;
            }
            } finally {dbg.exitDecision(234);}

            switch (alt234) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1018:50: ws
                    {
                    dbg.location(1018,50);
                    pushFollow(FOLLOW_ws_in_cp_mixin_call6574);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(234);}

            dbg.location(1018,54);
            match(input,SEMI,FOLLOW_SEMI_in_cp_mixin_call6577); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1019, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_call");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_call"


    // $ANTLR start "cp_mixin_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1021:1: cp_mixin_name : IDENT ;
    public final void cp_mixin_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1021, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1022:5: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1023:5: IDENT
            {
            dbg.location(1023,5);
            match(input,IDENT,FOLLOW_IDENT_in_cp_mixin_name6606); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1024, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_name"


    // $ANTLR start "cp_mixin_call_args"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1026:1: cp_mixin_call_args : cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ;
    public final void cp_mixin_call_args() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_args");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1026, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1027:5: ( cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1030:5: cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )*
            {
            dbg.location(1030,5);
            pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6642);
            cp_mixin_call_arg();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1030,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1030:23: ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )*
            try { dbg.enterSubRule(236);

            loop236:
            do {
                int alt236=2;
                try { dbg.enterDecision(236, decisionCanBacktrack[236]);

                int LA236_0 = input.LA(1);

                if ( (LA236_0==SEMI||LA236_0==COMMA) ) {
                    alt236=1;
                }


                } finally {dbg.exitDecision(236);}

                switch (alt236) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1030:25: ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg
            	    {
            	    dbg.location(1030,25);
            	    if ( input.LA(1)==SEMI||input.LA(1)==COMMA ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }

            	    dbg.location(1030,40);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1030:40: ( ws )?
            	    int alt235=2;
            	    try { dbg.enterSubRule(235);
            	    try { dbg.enterDecision(235, decisionCanBacktrack[235]);

            	    int LA235_0 = input.LA(1);

            	    if ( (LA235_0==WS||(LA235_0>=NL && LA235_0<=COMMENT)) ) {
            	        alt235=1;
            	    }
            	    } finally {dbg.exitDecision(235);}

            	    switch (alt235) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1030:40: ws
            	            {
            	            dbg.location(1030,40);
            	            pushFollow(FOLLOW_ws_in_cp_mixin_call_args6654);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(235);}

            	    dbg.location(1030,44);
            	    pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6657);
            	    cp_mixin_call_arg();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop236;
                }
            } while (true);
            } finally {dbg.exitSubRule(236);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1031, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_call_args");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_call_args"


    // $ANTLR start "cp_mixin_call_arg"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1033:1: cp_mixin_call_arg : ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? ;
    public final void cp_mixin_call_arg() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_arg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1033, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1034:5: ( ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )?
            {
            dbg.location(1035,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )
            int alt239=2;
            try { dbg.enterSubRule(239);
            try { dbg.enterDecision(239, decisionCanBacktrack[239]);

            try {
                isCyclicDecision = true;
                alt239 = dfa239.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(239);}

            switch (alt239) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1036:9: cp_variable ( ws )? COLON ( ws )? cp_expression
                    {
                    dbg.location(1036,9);
                    pushFollow(FOLLOW_cp_variable_in_cp_mixin_call_arg6699);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1036,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1036:21: ( ws )?
                    int alt237=2;
                    try { dbg.enterSubRule(237);
                    try { dbg.enterDecision(237, decisionCanBacktrack[237]);

                    int LA237_0 = input.LA(1);

                    if ( (LA237_0==WS||(LA237_0>=NL && LA237_0<=COMMENT)) ) {
                        alt237=1;
                    }
                    } finally {dbg.exitDecision(237);}

                    switch (alt237) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1036:21: ws
                            {
                            dbg.location(1036,21);
                            pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6701);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(237);}

                    dbg.location(1036,25);
                    match(input,COLON,FOLLOW_COLON_in_cp_mixin_call_arg6704); if (state.failed) return ;
                    dbg.location(1036,31);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1036:31: ( ws )?
                    int alt238=2;
                    try { dbg.enterSubRule(238);
                    try { dbg.enterDecision(238, decisionCanBacktrack[238]);

                    int LA238_0 = input.LA(1);

                    if ( (LA238_0==WS||(LA238_0>=NL && LA238_0<=COMMENT)) ) {
                        alt238=1;
                    }
                    } finally {dbg.exitDecision(238);}

                    switch (alt238) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1036:31: ws
                            {
                            dbg.location(1036,31);
                            pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6706);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(238);}

                    dbg.location(1036,35);
                    pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg6709);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1037:11: cp_expression
                    {
                    dbg.location(1037,11);
                    pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg6721);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(239);}

            dbg.location(1038,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1038:7: ( ws )?
            int alt240=2;
            try { dbg.enterSubRule(240);
            try { dbg.enterDecision(240, decisionCanBacktrack[240]);

            int LA240_0 = input.LA(1);

            if ( (LA240_0==WS||(LA240_0>=NL && LA240_0<=COMMENT)) ) {
                alt240=1;
            }
            } finally {dbg.exitDecision(240);}

            switch (alt240) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1038:7: ws
                    {
                    dbg.location(1038,7);
                    pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6729);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(240);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1039, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_call_arg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_call_arg"


    // $ANTLR start "cp_args_list"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1042:1: cp_args_list : ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? ( LESS_DOTS | LESS_REST ) )? ) | ( LESS_DOTS | LESS_REST ) );
    public final void cp_args_list() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_args_list");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1042, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:5: ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? ( LESS_DOTS | LESS_REST ) )? ) | ( LESS_DOTS | LESS_REST ) )
            int alt245=2;
            try { dbg.enterDecision(245, decisionCanBacktrack[245]);

            int LA245_0 = input.LA(1);

            if ( (LA245_0==MEDIA_SYM||LA245_0==AT_IDENT||LA245_0==SASS_VAR) ) {
                alt245=1;
            }
            else if ( ((LA245_0>=LESS_DOTS && LA245_0<=LESS_REST)) ) {
                alt245=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 245, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(245);}

            switch (alt245) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? ( LESS_DOTS | LESS_REST ) )? )
                    {
                    dbg.location(1046,5);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? ( LESS_DOTS | LESS_REST ) )? )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:7: cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? ( LESS_DOTS | LESS_REST ) )?
                    {
                    dbg.location(1046,7);
                    pushFollow(FOLLOW_cp_arg_in_cp_args_list6765);
                    cp_arg();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1046,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*
                    try { dbg.enterSubRule(242);

                    loop242:
                    do {
                        int alt242=2;
                        try { dbg.enterDecision(242, decisionCanBacktrack[242]);

                        try {
                            isCyclicDecision = true;
                            alt242 = dfa242.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(242);}

                        switch (alt242) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:16: ( COMMA | SEMI ) ( ws )? cp_arg
                    	    {
                    	    dbg.location(1046,16);
                    	    if ( input.LA(1)==SEMI||input.LA(1)==COMMA ) {
                    	        input.consume();
                    	        state.errorRecovery=false;state.failed=false;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return ;}
                    	        MismatchedSetException mse = new MismatchedSetException(null,input);
                    	        dbg.recognitionException(mse);
                    	        throw mse;
                    	    }

                    	    dbg.location(1046,33);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:33: ( ws )?
                    	    int alt241=2;
                    	    try { dbg.enterSubRule(241);
                    	    try { dbg.enterDecision(241, decisionCanBacktrack[241]);

                    	    int LA241_0 = input.LA(1);

                    	    if ( (LA241_0==WS||(LA241_0>=NL && LA241_0<=COMMENT)) ) {
                    	        alt241=1;
                    	    }
                    	    } finally {dbg.exitDecision(241);}

                    	    switch (alt241) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:33: ws
                    	            {
                    	            dbg.location(1046,33);
                    	            pushFollow(FOLLOW_ws_in_cp_args_list6779);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(241);}

                    	    dbg.location(1046,37);
                    	    pushFollow(FOLLOW_cp_arg_in_cp_args_list6782);
                    	    cp_arg();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop242;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(242);}

                    dbg.location(1046,46);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:46: ( ( COMMA | SEMI ) ( ws )? ( LESS_DOTS | LESS_REST ) )?
                    int alt244=2;
                    try { dbg.enterSubRule(244);
                    try { dbg.enterDecision(244, decisionCanBacktrack[244]);

                    int LA244_0 = input.LA(1);

                    if ( (LA244_0==SEMI||LA244_0==COMMA) ) {
                        alt244=1;
                    }
                    } finally {dbg.exitDecision(244);}

                    switch (alt244) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:48: ( COMMA | SEMI ) ( ws )? ( LESS_DOTS | LESS_REST )
                            {
                            dbg.location(1046,48);
                            if ( input.LA(1)==SEMI||input.LA(1)==COMMA ) {
                                input.consume();
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                dbg.recognitionException(mse);
                                throw mse;
                            }

                            dbg.location(1046,65);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:65: ( ws )?
                            int alt243=2;
                            try { dbg.enterSubRule(243);
                            try { dbg.enterDecision(243, decisionCanBacktrack[243]);

                            int LA243_0 = input.LA(1);

                            if ( (LA243_0==WS||(LA243_0>=NL && LA243_0<=COMMENT)) ) {
                                alt243=1;
                            }
                            } finally {dbg.exitDecision(243);}

                            switch (alt243) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:65: ws
                                    {
                                    dbg.location(1046,65);
                                    pushFollow(FOLLOW_ws_in_cp_args_list6798);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(243);}

                            dbg.location(1046,69);
                            if ( (input.LA(1)>=LESS_DOTS && input.LA(1)<=LESS_REST) ) {
                                input.consume();
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                dbg.recognitionException(mse);
                                throw mse;
                            }


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(244);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1048:5: ( LESS_DOTS | LESS_REST )
                    {
                    dbg.location(1048,5);
                    if ( (input.LA(1)>=LESS_DOTS && input.LA(1)<=LESS_REST) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1049, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_args_list");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_args_list"


    // $ANTLR start "cp_arg"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1052:1: cp_arg : cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? ;
    public final void cp_arg() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_arg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1052, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:5: ( cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1054:5: cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )?
            {
            dbg.location(1054,5);
            pushFollow(FOLLOW_cp_variable_in_cp_arg6855);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1054,17);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1054:17: ( ws )?
            int alt246=2;
            try { dbg.enterSubRule(246);
            try { dbg.enterDecision(246, decisionCanBacktrack[246]);

            int LA246_0 = input.LA(1);

            if ( (LA246_0==WS||(LA246_0>=NL && LA246_0<=COMMENT)) ) {
                alt246=1;
            }
            } finally {dbg.exitDecision(246);}

            switch (alt246) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1054:17: ws
                    {
                    dbg.location(1054,17);
                    pushFollow(FOLLOW_ws_in_cp_arg6857);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(246);}

            dbg.location(1054,21);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1054:21: ( COLON ( ws )? cp_expression ( ws )? )?
            int alt249=2;
            try { dbg.enterSubRule(249);
            try { dbg.enterDecision(249, decisionCanBacktrack[249]);

            int LA249_0 = input.LA(1);

            if ( (LA249_0==COLON) ) {
                alt249=1;
            }
            } finally {dbg.exitDecision(249);}

            switch (alt249) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1054:23: COLON ( ws )? cp_expression ( ws )?
                    {
                    dbg.location(1054,23);
                    match(input,COLON,FOLLOW_COLON_in_cp_arg6862); if (state.failed) return ;
                    dbg.location(1054,29);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1054:29: ( ws )?
                    int alt247=2;
                    try { dbg.enterSubRule(247);
                    try { dbg.enterDecision(247, decisionCanBacktrack[247]);

                    int LA247_0 = input.LA(1);

                    if ( (LA247_0==WS||(LA247_0>=NL && LA247_0<=COMMENT)) ) {
                        alt247=1;
                    }
                    } finally {dbg.exitDecision(247);}

                    switch (alt247) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1054:29: ws
                            {
                            dbg.location(1054,29);
                            pushFollow(FOLLOW_ws_in_cp_arg6864);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(247);}

                    dbg.location(1054,33);
                    pushFollow(FOLLOW_cp_expression_in_cp_arg6867);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1054,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1054:47: ( ws )?
                    int alt248=2;
                    try { dbg.enterSubRule(248);
                    try { dbg.enterDecision(248, decisionCanBacktrack[248]);

                    int LA248_0 = input.LA(1);

                    if ( (LA248_0==WS||(LA248_0>=NL && LA248_0<=COMMENT)) ) {
                        alt248=1;
                    }
                    } finally {dbg.exitDecision(248);}

                    switch (alt248) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1054:47: ws
                            {
                            dbg.location(1054,47);
                            pushFollow(FOLLOW_ws_in_cp_arg6869);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(248);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(249);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1055, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_arg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_arg"


    // $ANTLR start "less_mixin_guarded"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:1: less_mixin_guarded : LESS_WHEN ( ws )? less_condition ( ( COMMA | AND ) ( ws )? less_condition )* ;
    public final void less_mixin_guarded() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_mixin_guarded");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1059, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1060:5: ( LESS_WHEN ( ws )? less_condition ( ( COMMA | AND ) ( ws )? less_condition )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1061:5: LESS_WHEN ( ws )? less_condition ( ( COMMA | AND ) ( ws )? less_condition )*
            {
            dbg.location(1061,5);
            match(input,LESS_WHEN,FOLLOW_LESS_WHEN_in_less_mixin_guarded6895); if (state.failed) return ;
            dbg.location(1061,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1061:15: ( ws )?
            int alt250=2;
            try { dbg.enterSubRule(250);
            try { dbg.enterDecision(250, decisionCanBacktrack[250]);

            int LA250_0 = input.LA(1);

            if ( (LA250_0==WS||(LA250_0>=NL && LA250_0<=COMMENT)) ) {
                alt250=1;
            }
            } finally {dbg.exitDecision(250);}

            switch (alt250) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1061:15: ws
                    {
                    dbg.location(1061,15);
                    pushFollow(FOLLOW_ws_in_less_mixin_guarded6897);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(250);}

            dbg.location(1061,19);
            pushFollow(FOLLOW_less_condition_in_less_mixin_guarded6900);
            less_condition();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1061,34);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1061:34: ( ( COMMA | AND ) ( ws )? less_condition )*
            try { dbg.enterSubRule(252);

            loop252:
            do {
                int alt252=2;
                try { dbg.enterDecision(252, decisionCanBacktrack[252]);

                int LA252_0 = input.LA(1);

                if ( (LA252_0==COMMA||LA252_0==AND) ) {
                    alt252=1;
                }


                } finally {dbg.exitDecision(252);}

                switch (alt252) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1061:36: ( COMMA | AND ) ( ws )? less_condition
            	    {
            	    dbg.location(1061,36);
            	    if ( input.LA(1)==COMMA||input.LA(1)==AND ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }

            	    dbg.location(1061,50);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1061:50: ( ws )?
            	    int alt251=2;
            	    try { dbg.enterSubRule(251);
            	    try { dbg.enterDecision(251, decisionCanBacktrack[251]);

            	    int LA251_0 = input.LA(1);

            	    if ( (LA251_0==WS||(LA251_0>=NL && LA251_0<=COMMENT)) ) {
            	        alt251=1;
            	    }
            	    } finally {dbg.exitDecision(251);}

            	    switch (alt251) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1061:50: ws
            	            {
            	            dbg.location(1061,50);
            	            pushFollow(FOLLOW_ws_in_less_mixin_guarded6912);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(251);}

            	    dbg.location(1061,54);
            	    pushFollow(FOLLOW_less_condition_in_less_mixin_guarded6915);
            	    less_condition();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop252;
                }
            } while (true);
            } finally {dbg.exitSubRule(252);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1062, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_mixin_guarded");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_mixin_guarded"


    // $ANTLR start "less_condition"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1066:1: less_condition : ( NOT ( ws )? )? LPAREN ( ws )? ( less_function_in_condition ( ws )? | ( cp_variable ( ( ws )? less_condition_operator ( ws )? cp_expression )? ) ) RPAREN ;
    public final void less_condition() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_condition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1066, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:5: ( ( NOT ( ws )? )? LPAREN ( ws )? ( less_function_in_condition ( ws )? | ( cp_variable ( ( ws )? less_condition_operator ( ws )? cp_expression )? ) ) RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1068:5: ( NOT ( ws )? )? LPAREN ( ws )? ( less_function_in_condition ( ws )? | ( cp_variable ( ( ws )? less_condition_operator ( ws )? cp_expression )? ) ) RPAREN
            {
            dbg.location(1068,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1068:5: ( NOT ( ws )? )?
            int alt254=2;
            try { dbg.enterSubRule(254);
            try { dbg.enterDecision(254, decisionCanBacktrack[254]);

            int LA254_0 = input.LA(1);

            if ( (LA254_0==NOT) ) {
                alt254=1;
            }
            } finally {dbg.exitDecision(254);}

            switch (alt254) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1068:6: NOT ( ws )?
                    {
                    dbg.location(1068,6);
                    match(input,NOT,FOLLOW_NOT_in_less_condition6945); if (state.failed) return ;
                    dbg.location(1068,10);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1068:10: ( ws )?
                    int alt253=2;
                    try { dbg.enterSubRule(253);
                    try { dbg.enterDecision(253, decisionCanBacktrack[253]);

                    int LA253_0 = input.LA(1);

                    if ( (LA253_0==WS||(LA253_0>=NL && LA253_0<=COMMENT)) ) {
                        alt253=1;
                    }
                    } finally {dbg.exitDecision(253);}

                    switch (alt253) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1068:10: ws
                            {
                            dbg.location(1068,10);
                            pushFollow(FOLLOW_ws_in_less_condition6947);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(253);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(254);}

            dbg.location(1069,5);
            match(input,LPAREN,FOLLOW_LPAREN_in_less_condition6956); if (state.failed) return ;
            dbg.location(1069,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1069:12: ( ws )?
            int alt255=2;
            try { dbg.enterSubRule(255);
            try { dbg.enterDecision(255, decisionCanBacktrack[255]);

            int LA255_0 = input.LA(1);

            if ( (LA255_0==WS||(LA255_0>=NL && LA255_0<=COMMENT)) ) {
                alt255=1;
            }
            } finally {dbg.exitDecision(255);}

            switch (alt255) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1069:12: ws
                    {
                    dbg.location(1069,12);
                    pushFollow(FOLLOW_ws_in_less_condition6958);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(255);}

            dbg.location(1070,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1070:9: ( less_function_in_condition ( ws )? | ( cp_variable ( ( ws )? less_condition_operator ( ws )? cp_expression )? ) )
            int alt260=2;
            try { dbg.enterSubRule(260);
            try { dbg.enterDecision(260, decisionCanBacktrack[260]);

            int LA260_0 = input.LA(1);

            if ( (LA260_0==IDENT) ) {
                alt260=1;
            }
            else if ( (LA260_0==MEDIA_SYM||LA260_0==AT_IDENT||LA260_0==SASS_VAR) ) {
                alt260=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 260, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(260);}

            switch (alt260) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:13: less_function_in_condition ( ws )?
                    {
                    dbg.location(1071,13);
                    pushFollow(FOLLOW_less_function_in_condition_in_less_condition6984);
                    less_function_in_condition();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1071,40);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:40: ( ws )?
                    int alt256=2;
                    try { dbg.enterSubRule(256);
                    try { dbg.enterDecision(256, decisionCanBacktrack[256]);

                    int LA256_0 = input.LA(1);

                    if ( (LA256_0==WS||(LA256_0>=NL && LA256_0<=COMMENT)) ) {
                        alt256=1;
                    }
                    } finally {dbg.exitDecision(256);}

                    switch (alt256) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:40: ws
                            {
                            dbg.location(1071,40);
                            pushFollow(FOLLOW_ws_in_less_condition6986);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(256);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:13: ( cp_variable ( ( ws )? less_condition_operator ( ws )? cp_expression )? )
                    {
                    dbg.location(1073,13);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:13: ( cp_variable ( ( ws )? less_condition_operator ( ws )? cp_expression )? )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:15: cp_variable ( ( ws )? less_condition_operator ( ws )? cp_expression )?
                    {
                    dbg.location(1073,15);
                    pushFollow(FOLLOW_cp_variable_in_less_condition7017);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1073,27);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:27: ( ( ws )? less_condition_operator ( ws )? cp_expression )?
                    int alt259=2;
                    try { dbg.enterSubRule(259);
                    try { dbg.enterDecision(259, decisionCanBacktrack[259]);

                    int LA259_0 = input.LA(1);

                    if ( (LA259_0==WS||LA259_0==GREATER||LA259_0==OPEQ||(LA259_0>=NL && LA259_0<=COMMENT)||(LA259_0>=GREATER_OR_EQ && LA259_0<=LESS_OR_EQ)) ) {
                        alt259=1;
                    }
                    } finally {dbg.exitDecision(259);}

                    switch (alt259) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:28: ( ws )? less_condition_operator ( ws )? cp_expression
                            {
                            dbg.location(1073,28);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:28: ( ws )?
                            int alt257=2;
                            try { dbg.enterSubRule(257);
                            try { dbg.enterDecision(257, decisionCanBacktrack[257]);

                            int LA257_0 = input.LA(1);

                            if ( (LA257_0==WS||(LA257_0>=NL && LA257_0<=COMMENT)) ) {
                                alt257=1;
                            }
                            } finally {dbg.exitDecision(257);}

                            switch (alt257) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:28: ws
                                    {
                                    dbg.location(1073,28);
                                    pushFollow(FOLLOW_ws_in_less_condition7020);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(257);}

                            dbg.location(1073,32);
                            pushFollow(FOLLOW_less_condition_operator_in_less_condition7023);
                            less_condition_operator();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(1073,56);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:56: ( ws )?
                            int alt258=2;
                            try { dbg.enterSubRule(258);
                            try { dbg.enterDecision(258, decisionCanBacktrack[258]);

                            int LA258_0 = input.LA(1);

                            if ( (LA258_0==WS||(LA258_0>=NL && LA258_0<=COMMENT)) ) {
                                alt258=1;
                            }
                            } finally {dbg.exitDecision(258);}

                            switch (alt258) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:56: ws
                                    {
                                    dbg.location(1073,56);
                                    pushFollow(FOLLOW_ws_in_less_condition7025);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(258);}

                            dbg.location(1073,60);
                            pushFollow(FOLLOW_cp_expression_in_less_condition7028);
                            cp_expression();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(259);}


                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(260);}

            dbg.location(1075,5);
            match(input,RPAREN,FOLLOW_RPAREN_in_less_condition7057); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1076, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_condition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_condition"


    // $ANTLR start "less_function_in_condition"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1079:1: less_function_in_condition : less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN ;
    public final void less_function_in_condition() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_function_in_condition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1079, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1080:5: ( less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1081:5: less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN
            {
            dbg.location(1081,5);
            pushFollow(FOLLOW_less_fn_name_in_less_function_in_condition7083);
            less_fn_name();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1081,18);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1081:18: ( ws )?
            int alt261=2;
            try { dbg.enterSubRule(261);
            try { dbg.enterDecision(261, decisionCanBacktrack[261]);

            int LA261_0 = input.LA(1);

            if ( (LA261_0==WS||(LA261_0>=NL && LA261_0<=COMMENT)) ) {
                alt261=1;
            }
            } finally {dbg.exitDecision(261);}

            switch (alt261) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1081:18: ws
                    {
                    dbg.location(1081,18);
                    pushFollow(FOLLOW_ws_in_less_function_in_condition7085);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(261);}

            dbg.location(1081,22);
            match(input,LPAREN,FOLLOW_LPAREN_in_less_function_in_condition7088); if (state.failed) return ;
            dbg.location(1081,29);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1081:29: ( ws )?
            int alt262=2;
            try { dbg.enterSubRule(262);
            try { dbg.enterDecision(262, decisionCanBacktrack[262]);

            int LA262_0 = input.LA(1);

            if ( (LA262_0==WS||(LA262_0>=NL && LA262_0<=COMMENT)) ) {
                alt262=1;
            }
            } finally {dbg.exitDecision(262);}

            switch (alt262) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1081:29: ws
                    {
                    dbg.location(1081,29);
                    pushFollow(FOLLOW_ws_in_less_function_in_condition7090);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(262);}

            dbg.location(1081,33);
            pushFollow(FOLLOW_cp_variable_in_less_function_in_condition7093);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1081,45);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1081:45: ( ws )?
            int alt263=2;
            try { dbg.enterSubRule(263);
            try { dbg.enterDecision(263, decisionCanBacktrack[263]);

            int LA263_0 = input.LA(1);

            if ( (LA263_0==WS||(LA263_0>=NL && LA263_0<=COMMENT)) ) {
                alt263=1;
            }
            } finally {dbg.exitDecision(263);}

            switch (alt263) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1081:45: ws
                    {
                    dbg.location(1081,45);
                    pushFollow(FOLLOW_ws_in_less_function_in_condition7095);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(263);}

            dbg.location(1081,49);
            match(input,RPAREN,FOLLOW_RPAREN_in_less_function_in_condition7098); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1082, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_function_in_condition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_function_in_condition"


    // $ANTLR start "less_fn_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1085:1: less_fn_name : IDENT ;
    public final void less_fn_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_fn_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1085, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1086:5: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1087:5: IDENT
            {
            dbg.location(1087,5);
            match(input,IDENT,FOLLOW_IDENT_in_less_fn_name7120); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1088, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_fn_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_fn_name"


    // $ANTLR start "less_condition_operator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1090:1: less_condition_operator : ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ );
    public final void less_condition_operator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_condition_operator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1090, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1091:5: ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(1091,5);
            if ( input.LA(1)==GREATER||input.LA(1)==OPEQ||(input.LA(1)>=GREATER_OR_EQ && input.LA(1)<=LESS_OR_EQ) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1093, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_condition_operator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_condition_operator"


    // $ANTLR start "sass_selector_interpolation_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:1: sass_selector_interpolation_expression : ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) ) )* ;
    public final void sass_selector_interpolation_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_selector_interpolation_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1111, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1112:5: ( ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1113:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) ) )*
            {
            dbg.location(1113,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1113:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) )
            int alt264=2;
            try { dbg.enterSubRule(264);
            try { dbg.enterDecision(264, decisionCanBacktrack[264]);

            int LA264_0 = input.LA(1);

            if ( (LA264_0==HASH_SYMBOL) ) {
                int LA264_1 = input.LA(2);

                if ( (synpred23_Css3()) ) {
                    alt264=1;
                }
                else if ( (true) ) {
                    alt264=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 264, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA264_0==IDENT||LA264_0==COMMA||LA264_0==COLON||LA264_0==GREATER||LA264_0==MINUS||(LA264_0>=HASH && LA264_0<=DOT)||LA264_0==STAR||LA264_0==LESS_AND) ) {
                alt264=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 264, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(264);}

            switch (alt264) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1114:13: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
                    {
                    dbg.location(1114,50);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7217);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1116:13: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER )
                    {
                    dbg.location(1116,13);
                    if ( input.LA(1)==IDENT||input.LA(1)==COMMA||input.LA(1)==COLON||input.LA(1)==GREATER||(input.LA(1)>=MINUS && input.LA(1)<=DOT)||input.LA(1)==STAR||input.LA(1)==LESS_AND ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(264);}

            dbg.location(1118,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1118:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) ) )*
            try { dbg.enterSubRule(267);

            loop267:
            do {
                int alt267=2;
                try { dbg.enterDecision(267, decisionCanBacktrack[267]);

                try {
                    isCyclicDecision = true;
                    alt267 = dfa267.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(267);}

                switch (alt267) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1119:13: ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) )
            	    {
            	    dbg.location(1119,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1119:13: ( ws )?
            	    int alt265=2;
            	    try { dbg.enterSubRule(265);
            	    try { dbg.enterDecision(265, decisionCanBacktrack[265]);

            	    int LA265_0 = input.LA(1);

            	    if ( (LA265_0==WS||(LA265_0>=NL && LA265_0<=COMMENT)) ) {
            	        alt265=1;
            	    }
            	    } finally {dbg.exitDecision(265);}

            	    switch (alt265) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1119:13: ws
            	            {
            	            dbg.location(1119,13);
            	            pushFollow(FOLLOW_ws_in_sass_selector_interpolation_expression7319);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(265);}

            	    dbg.location(1120,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1120:13: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) )
            	    int alt266=2;
            	    try { dbg.enterSubRule(266);
            	    try { dbg.enterDecision(266, decisionCanBacktrack[266]);

            	    int LA266_0 = input.LA(1);

            	    if ( (LA266_0==HASH_SYMBOL) ) {
            	        int LA266_1 = input.LA(2);

            	        if ( (synpred24_Css3()) ) {
            	            alt266=1;
            	        }
            	        else if ( (true) ) {
            	            alt266=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return ;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 266, 1, input);

            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	    }
            	    else if ( (LA266_0==IDENT||LA266_0==COMMA||LA266_0==COLON||LA266_0==GREATER||LA266_0==MINUS||(LA266_0>=HASH && LA266_0<=DOT)||LA266_0==STAR||LA266_0==LESS_AND) ) {
            	        alt266=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 266, 0, input);

            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(266);}

            	    switch (alt266) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1121:17: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
            	            {
            	            dbg.location(1121,54);
            	            pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7356);
            	            sass_interpolation_expression_var();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1123:17: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER )
            	            {
            	            dbg.location(1123,17);
            	            if ( input.LA(1)==IDENT||input.LA(1)==COMMA||input.LA(1)==COLON||input.LA(1)==GREATER||(input.LA(1)>=MINUS && input.LA(1)<=DOT)||input.LA(1)==STAR||input.LA(1)==LESS_AND ) {
            	                input.consume();
            	                state.errorRecovery=false;state.failed=false;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return ;}
            	                MismatchedSetException mse = new MismatchedSetException(null,input);
            	                dbg.recognitionException(mse);
            	                throw mse;
            	            }


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(266);}


            	    }
            	    break;

            	default :
            	    break loop267;
                }
            } while (true);
            } finally {dbg.exitSubRule(267);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1127, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_selector_interpolation_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_selector_interpolation_expression"


    // $ANTLR start "sass_declaration_interpolation_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1129:1: sass_declaration_interpolation_expression : ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )* ;
    public final void sass_declaration_interpolation_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_declaration_interpolation_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1129, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:5: ( ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1131:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*
            {
            dbg.location(1131,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1131:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
            int alt268=2;
            try { dbg.enterSubRule(268);
            try { dbg.enterDecision(268, decisionCanBacktrack[268]);

            int LA268_0 = input.LA(1);

            if ( (LA268_0==HASH_SYMBOL) ) {
                int LA268_1 = input.LA(2);

                if ( (LA268_1==LBRACE) && (synpred25_Css3())) {
                    alt268=1;
                }
                else if ( (LA268_1==IDENT||LA268_1==COLON||LA268_1==WS||(LA268_1>=MINUS && LA268_1<=DOT)||(LA268_1>=NL && LA268_1<=COMMENT)) ) {
                    alt268=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 268, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA268_0==IDENT||LA268_0==MINUS||(LA268_0>=HASH && LA268_0<=DOT)) ) {
                alt268=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 268, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(268);}

            switch (alt268) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:13: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
                    {
                    dbg.location(1132,50);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7504);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:13: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH )
                    {
                    dbg.location(1134,13);
                    if ( input.LA(1)==IDENT||(input.LA(1)>=MINUS && input.LA(1)<=DOT) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(268);}

            dbg.location(1136,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1136:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*
            try { dbg.enterSubRule(271);

            loop271:
            do {
                int alt271=2;
                try { dbg.enterDecision(271, decisionCanBacktrack[271]);

                try {
                    isCyclicDecision = true;
                    alt271 = dfa271.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(271);}

                switch (alt271) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1137:13: ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
            	    {
            	    dbg.location(1137,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1137:13: ( ws )?
            	    int alt269=2;
            	    try { dbg.enterSubRule(269);
            	    try { dbg.enterDecision(269, decisionCanBacktrack[269]);

            	    int LA269_0 = input.LA(1);

            	    if ( (LA269_0==WS||(LA269_0>=NL && LA269_0<=COMMENT)) ) {
            	        alt269=1;
            	    }
            	    } finally {dbg.exitDecision(269);}

            	    switch (alt269) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1137:13: ws
            	            {
            	            dbg.location(1137,13);
            	            pushFollow(FOLLOW_ws_in_sass_declaration_interpolation_expression7585);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(269);}

            	    dbg.location(1138,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:13: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
            	    int alt270=2;
            	    try { dbg.enterSubRule(270);
            	    try { dbg.enterDecision(270, decisionCanBacktrack[270]);

            	    int LA270_0 = input.LA(1);

            	    if ( (LA270_0==HASH_SYMBOL) ) {
            	        int LA270_1 = input.LA(2);

            	        if ( (LA270_1==LBRACE) && (synpred26_Css3())) {
            	            alt270=1;
            	        }
            	        else if ( (LA270_1==IDENT||LA270_1==COLON||LA270_1==WS||(LA270_1>=MINUS && LA270_1<=DOT)||(LA270_1>=NL && LA270_1<=COMMENT)) ) {
            	            alt270=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return ;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 270, 1, input);

            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	    }
            	    else if ( (LA270_0==IDENT||LA270_0==MINUS||(LA270_0>=HASH && LA270_0<=DOT)) ) {
            	        alt270=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 270, 0, input);

            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(270);}

            	    switch (alt270) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1139:17: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
            	            {
            	            dbg.location(1139,54);
            	            pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7622);
            	            sass_interpolation_expression_var();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1141:17: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH )
            	            {
            	            dbg.location(1141,17);
            	            if ( input.LA(1)==IDENT||(input.LA(1)>=MINUS && input.LA(1)<=DOT) ) {
            	                input.consume();
            	                state.errorRecovery=false;state.failed=false;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return ;}
            	                MismatchedSetException mse = new MismatchedSetException(null,input);
            	                dbg.recognitionException(mse);
            	                throw mse;
            	            }


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(270);}


            	    }
            	    break;

            	default :
            	    break loop271;
                }
            } while (true);
            } finally {dbg.exitSubRule(271);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1145, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_declaration_interpolation_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_declaration_interpolation_expression"


    // $ANTLR start "sass_declaration_property_value_interpolation_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1147:1: sass_declaration_property_value_interpolation_expression : ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | SOLIDUS ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | SOLIDUS ) ) )* ;
    public final void sass_declaration_property_value_interpolation_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_declaration_property_value_interpolation_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1147, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1148:5: ( ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | SOLIDUS ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | SOLIDUS ) ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1149:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | SOLIDUS ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | SOLIDUS ) ) )*
            {
            dbg.location(1149,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1149:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | SOLIDUS ) )
            int alt272=2;
            try { dbg.enterSubRule(272);
            try { dbg.enterDecision(272, decisionCanBacktrack[272]);

            int LA272_0 = input.LA(1);

            if ( (LA272_0==HASH_SYMBOL) ) {
                int LA272_1 = input.LA(2);

                if ( (LA272_1==LBRACE) && (synpred27_Css3())) {
                    alt272=1;
                }
                else if ( ((LA272_1>=SEMI && LA272_1<=IDENT)||LA272_1==RBRACE||LA272_1==WS||LA272_1==SOLIDUS||(LA272_1>=MINUS && LA272_1<=DOT)||(LA272_1>=NL && LA272_1<=COMMENT)) ) {
                    alt272=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 272, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA272_0==IDENT||LA272_0==SOLIDUS||LA272_0==MINUS||(LA272_0>=HASH && LA272_0<=DOT)) ) {
                alt272=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 272, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(272);}

            switch (alt272) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:13: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
                    {
                    dbg.location(1150,50);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_declaration_property_value_interpolation_expression7746);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1153:13: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | SOLIDUS )
                    {
                    dbg.location(1153,13);
                    if ( input.LA(1)==IDENT||input.LA(1)==SOLIDUS||(input.LA(1)>=MINUS && input.LA(1)<=DOT) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(272);}

            dbg.location(1155,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1155:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | SOLIDUS ) ) )*
            try { dbg.enterSubRule(275);

            loop275:
            do {
                int alt275=2;
                try { dbg.enterDecision(275, decisionCanBacktrack[275]);

                try {
                    isCyclicDecision = true;
                    alt275 = dfa275.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(275);}

                switch (alt275) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1156:13: ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | SOLIDUS ) )
            	    {
            	    dbg.location(1156,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1156:13: ( ws )?
            	    int alt273=2;
            	    try { dbg.enterSubRule(273);
            	    try { dbg.enterDecision(273, decisionCanBacktrack[273]);

            	    int LA273_0 = input.LA(1);

            	    if ( (LA273_0==WS||(LA273_0>=NL && LA273_0<=COMMENT)) ) {
            	        alt273=1;
            	    }
            	    } finally {dbg.exitDecision(273);}

            	    switch (alt273) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1156:13: ws
            	            {
            	            dbg.location(1156,13);
            	            pushFollow(FOLLOW_ws_in_sass_declaration_property_value_interpolation_expression7833);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(273);}

            	    dbg.location(1157,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1157:13: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | SOLIDUS ) )
            	    int alt274=2;
            	    try { dbg.enterSubRule(274);
            	    try { dbg.enterDecision(274, decisionCanBacktrack[274]);

            	    int LA274_0 = input.LA(1);

            	    if ( (LA274_0==HASH_SYMBOL) ) {
            	        int LA274_1 = input.LA(2);

            	        if ( (LA274_1==LBRACE) && (synpred28_Css3())) {
            	            alt274=1;
            	        }
            	        else if ( ((LA274_1>=SEMI && LA274_1<=IDENT)||LA274_1==RBRACE||LA274_1==WS||LA274_1==SOLIDUS||(LA274_1>=MINUS && LA274_1<=DOT)||(LA274_1>=NL && LA274_1<=COMMENT)) ) {
            	            alt274=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return ;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 274, 1, input);

            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	    }
            	    else if ( (LA274_0==IDENT||LA274_0==SOLIDUS||LA274_0==MINUS||(LA274_0>=HASH && LA274_0<=DOT)) ) {
            	        alt274=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 274, 0, input);

            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(274);}

            	    switch (alt274) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1158:17: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
            	            {
            	            dbg.location(1158,54);
            	            pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_declaration_property_value_interpolation_expression7870);
            	            sass_interpolation_expression_var();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:17: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | SOLIDUS )
            	            {
            	            dbg.location(1161,17);
            	            if ( input.LA(1)==IDENT||input.LA(1)==SOLIDUS||(input.LA(1)>=MINUS && input.LA(1)<=DOT) ) {
            	                input.consume();
            	                state.errorRecovery=false;state.failed=false;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return ;}
            	                MismatchedSetException mse = new MismatchedSetException(null,input);
            	                dbg.recognitionException(mse);
            	                throw mse;
            	            }


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(274);}


            	    }
            	    break;

            	default :
            	    break loop275;
                }
            } while (true);
            } finally {dbg.exitSubRule(275);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1165, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_declaration_property_value_interpolation_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_declaration_property_value_interpolation_expression"


    // $ANTLR start "sass_mq_interpolation_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1167:1: sass_mq_interpolation_expression : ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | AND | NOT ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | AND | NOT ) ) )* ;
    public final void sass_mq_interpolation_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_mq_interpolation_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1167, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:5: ( ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | AND | NOT ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | AND | NOT ) ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1169:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | AND | NOT ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | AND | NOT ) ) )*
            {
            dbg.location(1169,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1169:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | AND | NOT ) )
            int alt276=2;
            try { dbg.enterSubRule(276);
            try { dbg.enterDecision(276, decisionCanBacktrack[276]);

            int LA276_0 = input.LA(1);

            if ( (LA276_0==HASH_SYMBOL) ) {
                int LA276_1 = input.LA(2);

                if ( (synpred29_Css3()) ) {
                    alt276=1;
                }
                else if ( (true) ) {
                    alt276=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 276, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA276_0==IDENT||LA276_0==AND||LA276_0==NOT||LA276_0==COLON||LA276_0==MINUS||(LA276_0>=HASH && LA276_0<=DOT)) ) {
                alt276=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 276, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(276);}

            switch (alt276) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1170:13: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
                    {
                    dbg.location(1170,50);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_mq_interpolation_expression8004);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1172:13: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | AND | NOT )
                    {
                    dbg.location(1172,13);
                    if ( input.LA(1)==IDENT||input.LA(1)==AND||input.LA(1)==NOT||input.LA(1)==COLON||(input.LA(1)>=MINUS && input.LA(1)<=DOT) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(276);}

            dbg.location(1174,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1174:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | AND | NOT ) ) )*
            try { dbg.enterSubRule(279);

            loop279:
            do {
                int alt279=2;
                try { dbg.enterDecision(279, decisionCanBacktrack[279]);

                try {
                    isCyclicDecision = true;
                    alt279 = dfa279.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(279);}

                switch (alt279) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1175:13: ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | AND | NOT ) )
            	    {
            	    dbg.location(1175,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1175:13: ( ws )?
            	    int alt277=2;
            	    try { dbg.enterSubRule(277);
            	    try { dbg.enterDecision(277, decisionCanBacktrack[277]);

            	    int LA277_0 = input.LA(1);

            	    if ( (LA277_0==WS||(LA277_0>=NL && LA277_0<=COMMENT)) ) {
            	        alt277=1;
            	    }
            	    } finally {dbg.exitDecision(277);}

            	    switch (alt277) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1175:13: ws
            	            {
            	            dbg.location(1175,13);
            	            pushFollow(FOLLOW_ws_in_sass_mq_interpolation_expression8097);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(277);}

            	    dbg.location(1176,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1176:13: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | AND | NOT ) )
            	    int alt278=2;
            	    try { dbg.enterSubRule(278);
            	    try { dbg.enterDecision(278, decisionCanBacktrack[278]);

            	    int LA278_0 = input.LA(1);

            	    if ( (LA278_0==HASH_SYMBOL) ) {
            	        int LA278_1 = input.LA(2);

            	        if ( (synpred30_Css3()) ) {
            	            alt278=1;
            	        }
            	        else if ( (true) ) {
            	            alt278=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return ;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 278, 1, input);

            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	    }
            	    else if ( (LA278_0==IDENT||LA278_0==AND||LA278_0==NOT||LA278_0==COLON||LA278_0==MINUS||(LA278_0>=HASH && LA278_0<=DOT)) ) {
            	        alt278=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 278, 0, input);

            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(278);}

            	    switch (alt278) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1177:17: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
            	            {
            	            dbg.location(1177,54);
            	            pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_mq_interpolation_expression8134);
            	            sass_interpolation_expression_var();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1179:17: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | AND | NOT )
            	            {
            	            dbg.location(1179,17);
            	            if ( input.LA(1)==IDENT||input.LA(1)==AND||input.LA(1)==NOT||input.LA(1)==COLON||(input.LA(1)>=MINUS && input.LA(1)<=DOT) ) {
            	                input.consume();
            	                state.errorRecovery=false;state.failed=false;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return ;}
            	                MismatchedSetException mse = new MismatchedSetException(null,input);
            	                dbg.recognitionException(mse);
            	                throw mse;
            	            }


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(278);}


            	    }
            	    break;

            	default :
            	    break loop279;
                }
            } while (true);
            } finally {dbg.exitSubRule(279);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1183, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_mq_interpolation_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_mq_interpolation_expression"


    // $ANTLR start "sass_interpolation_expression_var"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1185:1: sass_interpolation_expression_var : HASH_SYMBOL LBRACE cp_expression RBRACE ;
    public final void sass_interpolation_expression_var() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_interpolation_expression_var");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1185, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1186:5: ( HASH_SYMBOL LBRACE cp_expression RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1187:9: HASH_SYMBOL LBRACE cp_expression RBRACE
            {
            dbg.location(1187,9);
            match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var8255); if (state.failed) return ;
            dbg.location(1187,21);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_interpolation_expression_var8257); if (state.failed) return ;
            dbg.location(1187,28);
            pushFollow(FOLLOW_cp_expression_in_sass_interpolation_expression_var8259);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1187,42);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_interpolation_expression_var8261); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1188, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_interpolation_expression_var");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_interpolation_expression_var"


    // $ANTLR start "sass_nested_properties"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1208:1: sass_nested_properties : property COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow declarations RBRACE ;
    public final void sass_nested_properties() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_nested_properties");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1208, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1209:5: ( property COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow declarations RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:5: property COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow declarations RBRACE
            {
            dbg.location(1210,5);
            pushFollow(FOLLOW_property_in_sass_nested_properties8305);
            property();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1210,14);
            match(input,COLON,FOLLOW_COLON_in_sass_nested_properties8307); if (state.failed) return ;
            dbg.location(1210,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:20: ( ws )?
            int alt280=2;
            try { dbg.enterSubRule(280);
            try { dbg.enterDecision(280, decisionCanBacktrack[280]);

            int LA280_0 = input.LA(1);

            if ( (LA280_0==WS||(LA280_0>=NL && LA280_0<=COMMENT)) ) {
                alt280=1;
            }
            } finally {dbg.exitDecision(280);}

            switch (alt280) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:20: ws
                    {
                    dbg.location(1210,20);
                    pushFollow(FOLLOW_ws_in_sass_nested_properties8309);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(280);}

            dbg.location(1210,24);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:24: ( propertyValue ( ws )? )?
            int alt282=2;
            try { dbg.enterSubRule(282);
            try { dbg.enterDecision(282, decisionCanBacktrack[282]);

            int LA282_0 = input.LA(1);

            if ( ((LA282_0>=IDENT && LA282_0<=URI)||LA282_0==MEDIA_SYM||LA282_0==GEN||LA282_0==AT_IDENT||LA282_0==PERCENTAGE||LA282_0==PLUS||LA282_0==MINUS||LA282_0==HASH||LA282_0==SASS_VAR||(LA282_0>=NUMBER && LA282_0<=DIMENSION)) ) {
                alt282=1;
            }
            } finally {dbg.exitDecision(282);}

            switch (alt282) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:25: propertyValue ( ws )?
                    {
                    dbg.location(1210,25);
                    pushFollow(FOLLOW_propertyValue_in_sass_nested_properties8313);
                    propertyValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1210,39);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:39: ( ws )?
                    int alt281=2;
                    try { dbg.enterSubRule(281);
                    try { dbg.enterDecision(281, decisionCanBacktrack[281]);

                    int LA281_0 = input.LA(1);

                    if ( (LA281_0==WS||(LA281_0>=NL && LA281_0<=COMMENT)) ) {
                        alt281=1;
                    }
                    } finally {dbg.exitDecision(281);}

                    switch (alt281) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:39: ws
                            {
                            dbg.location(1210,39);
                            pushFollow(FOLLOW_ws_in_sass_nested_properties8315);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(281);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(282);}

            dbg.location(1210,45);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_nested_properties8320); if (state.failed) return ;
            dbg.location(1210,52);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:52: ( ws )?
            int alt283=2;
            try { dbg.enterSubRule(283);
            try { dbg.enterDecision(283, decisionCanBacktrack[283]);

            int LA283_0 = input.LA(1);

            if ( (LA283_0==WS||(LA283_0>=NL && LA283_0<=COMMENT)) ) {
                alt283=1;
            }
            } finally {dbg.exitDecision(283);}

            switch (alt283) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:52: ws
                    {
                    dbg.location(1210,52);
                    pushFollow(FOLLOW_ws_in_sass_nested_properties8322);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(283);}

            dbg.location(1210,56);
            pushFollow(FOLLOW_syncToFollow_in_sass_nested_properties8325);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1210,69);
            pushFollow(FOLLOW_declarations_in_sass_nested_properties8327);
            declarations();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1210,82);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_nested_properties8329); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1211, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_nested_properties");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_nested_properties"


    // $ANTLR start "sass_extend"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1213:1: sass_extend : SASS_EXTEND ws simpleSelectorSequence ( SASS_OPTIONAL ( ws )? )? SEMI ;
    public final void sass_extend() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_extend");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1213, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1214:5: ( SASS_EXTEND ws simpleSelectorSequence ( SASS_OPTIONAL ( ws )? )? SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1215:5: SASS_EXTEND ws simpleSelectorSequence ( SASS_OPTIONAL ( ws )? )? SEMI
            {
            dbg.location(1215,5);
            match(input,SASS_EXTEND,FOLLOW_SASS_EXTEND_in_sass_extend8350); if (state.failed) return ;
            dbg.location(1215,17);
            pushFollow(FOLLOW_ws_in_sass_extend8352);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1215,20);
            pushFollow(FOLLOW_simpleSelectorSequence_in_sass_extend8354);
            simpleSelectorSequence();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1215,43);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1215:43: ( SASS_OPTIONAL ( ws )? )?
            int alt285=2;
            try { dbg.enterSubRule(285);
            try { dbg.enterDecision(285, decisionCanBacktrack[285]);

            int LA285_0 = input.LA(1);

            if ( (LA285_0==SASS_OPTIONAL) ) {
                alt285=1;
            }
            } finally {dbg.exitDecision(285);}

            switch (alt285) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1215:44: SASS_OPTIONAL ( ws )?
                    {
                    dbg.location(1215,44);
                    match(input,SASS_OPTIONAL,FOLLOW_SASS_OPTIONAL_in_sass_extend8357); if (state.failed) return ;
                    dbg.location(1215,58);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1215:58: ( ws )?
                    int alt284=2;
                    try { dbg.enterSubRule(284);
                    try { dbg.enterDecision(284, decisionCanBacktrack[284]);

                    int LA284_0 = input.LA(1);

                    if ( (LA284_0==WS||(LA284_0>=NL && LA284_0<=COMMENT)) ) {
                        alt284=1;
                    }
                    } finally {dbg.exitDecision(284);}

                    switch (alt284) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1215:58: ws
                            {
                            dbg.location(1215,58);
                            pushFollow(FOLLOW_ws_in_sass_extend8359);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(284);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(285);}

            dbg.location(1215,64);
            match(input,SEMI,FOLLOW_SEMI_in_sass_extend8364); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1216, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_extend");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_extend"


    // $ANTLR start "sass_extend_only_selector"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1218:1: sass_extend_only_selector : SASS_EXTEND_ONLY_SELECTOR ;
    public final void sass_extend_only_selector() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_extend_only_selector");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1218, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1219:5: ( SASS_EXTEND_ONLY_SELECTOR )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1220:5: SASS_EXTEND_ONLY_SELECTOR
            {
            dbg.location(1220,5);
            match(input,SASS_EXTEND_ONLY_SELECTOR,FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector8389); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1221, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_extend_only_selector");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_extend_only_selector"


    // $ANTLR start "sass_debug"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1223:1: sass_debug : ( SASS_DEBUG | SASS_WARN ) ws cp_full_expression SEMI ;
    public final void sass_debug() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_debug");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1223, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1224:5: ( ( SASS_DEBUG | SASS_WARN ) ws cp_full_expression SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1225:5: ( SASS_DEBUG | SASS_WARN ) ws cp_full_expression SEMI
            {
            dbg.location(1225,5);
            if ( (input.LA(1)>=SASS_DEBUG && input.LA(1)<=SASS_WARN) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(1225,32);
            pushFollow(FOLLOW_ws_in_sass_debug8420);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1225,35);
            pushFollow(FOLLOW_cp_full_expression_in_sass_debug8422);
            cp_full_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1225,54);
            match(input,SEMI,FOLLOW_SEMI_in_sass_debug8424); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1226, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_debug");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_debug"


    // $ANTLR start "sass_control"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1228:1: sass_control : ( sass_if | sass_for | sass_each | sass_while );
    public final void sass_control() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_control");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1228, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1229:5: ( sass_if | sass_for | sass_each | sass_while )
            int alt286=4;
            try { dbg.enterDecision(286, decisionCanBacktrack[286]);

            switch ( input.LA(1) ) {
            case SASS_IF:
                {
                alt286=1;
                }
                break;
            case SASS_FOR:
                {
                alt286=2;
                }
                break;
            case SASS_EACH:
                {
                alt286=3;
                }
                break;
            case SASS_WHILE:
                {
                alt286=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 286, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(286);}

            switch (alt286) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:5: sass_if
                    {
                    dbg.location(1230,5);
                    pushFollow(FOLLOW_sass_if_in_sass_control8449);
                    sass_if();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:15: sass_for
                    {
                    dbg.location(1230,15);
                    pushFollow(FOLLOW_sass_for_in_sass_control8453);
                    sass_for();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:26: sass_each
                    {
                    dbg.location(1230,26);
                    pushFollow(FOLLOW_sass_each_in_sass_control8457);
                    sass_each();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:38: sass_while
                    {
                    dbg.location(1230,38);
                    pushFollow(FOLLOW_sass_while_in_sass_control8461);
                    sass_while();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1231, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_control");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_control"


    // $ANTLR start "sass_if"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1233:1: sass_if : SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? ;
    public final void sass_if() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_if");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1233, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1234:5: ( SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:5: SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
            {
            dbg.location(1235,5);
            match(input,SASS_IF,FOLLOW_SASS_IF_in_sass_if8482); if (state.failed) return ;
            dbg.location(1235,13);
            pushFollow(FOLLOW_ws_in_sass_if8484);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1235,16);
            pushFollow(FOLLOW_sass_control_expression_in_sass_if8486);
            sass_control_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1235,40);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:40: ( ws )?
            int alt287=2;
            try { dbg.enterSubRule(287);
            try { dbg.enterDecision(287, decisionCanBacktrack[287]);

            int LA287_0 = input.LA(1);

            if ( (LA287_0==WS||(LA287_0>=NL && LA287_0<=COMMENT)) ) {
                alt287=1;
            }
            } finally {dbg.exitDecision(287);}

            switch (alt287) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:40: ws
                    {
                    dbg.location(1235,40);
                    pushFollow(FOLLOW_ws_in_sass_if8488);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(287);}

            dbg.location(1235,44);
            pushFollow(FOLLOW_sass_control_block_in_sass_if8491);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1235,63);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:63: ( ( ws )? sass_else )?
            int alt289=2;
            try { dbg.enterSubRule(289);
            try { dbg.enterDecision(289, decisionCanBacktrack[289]);

            try {
                isCyclicDecision = true;
                alt289 = dfa289.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(289);}

            switch (alt289) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:64: ( ws )? sass_else
                    {
                    dbg.location(1235,64);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:64: ( ws )?
                    int alt288=2;
                    try { dbg.enterSubRule(288);
                    try { dbg.enterDecision(288, decisionCanBacktrack[288]);

                    int LA288_0 = input.LA(1);

                    if ( (LA288_0==WS||(LA288_0>=NL && LA288_0<=COMMENT)) ) {
                        alt288=1;
                    }
                    } finally {dbg.exitDecision(288);}

                    switch (alt288) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:64: ws
                            {
                            dbg.location(1235,64);
                            pushFollow(FOLLOW_ws_in_sass_if8494);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(288);}

                    dbg.location(1235,68);
                    pushFollow(FOLLOW_sass_else_in_sass_if8497);
                    sass_else();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(289);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1236, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_if");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_if"


    // $ANTLR start "sass_else"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );
    public final void sass_else() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_else");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1238, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1239:5: ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
            int alt296=2;
            try { dbg.enterDecision(296, decisionCanBacktrack[296]);

            try {
                isCyclicDecision = true;
                alt296 = dfa296.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(296);}

            switch (alt296) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:5: SASS_ELSE ( ws )? sass_control_block
                    {
                    dbg.location(1240,5);
                    match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else8524); if (state.failed) return ;
                    dbg.location(1240,15);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:15: ( ws )?
                    int alt290=2;
                    try { dbg.enterSubRule(290);
                    try { dbg.enterDecision(290, decisionCanBacktrack[290]);

                    int LA290_0 = input.LA(1);

                    if ( (LA290_0==WS||(LA290_0>=NL && LA290_0<=COMMENT)) ) {
                        alt290=1;
                    }
                    } finally {dbg.exitDecision(290);}

                    switch (alt290) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:15: ws
                            {
                            dbg.location(1240,15);
                            pushFollow(FOLLOW_ws_in_sass_else8526);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(290);}

                    dbg.location(1240,19);
                    pushFollow(FOLLOW_sass_control_block_in_sass_else8529);
                    sass_control_block();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:5: SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
                    {
                    dbg.location(1242,5);
                    match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else8542); if (state.failed) return ;
                    dbg.location(1242,15);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:15: ( ws )?
                    int alt291=2;
                    try { dbg.enterSubRule(291);
                    try { dbg.enterDecision(291, decisionCanBacktrack[291]);

                    int LA291_0 = input.LA(1);

                    if ( (LA291_0==WS||(LA291_0>=NL && LA291_0<=COMMENT)) ) {
                        alt291=1;
                    }
                    } finally {dbg.exitDecision(291);}

                    switch (alt291) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:15: ws
                            {
                            dbg.location(1242,15);
                            pushFollow(FOLLOW_ws_in_sass_else8544);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(291);}

                    dbg.location(1242,19);
                    if ( !(evalPredicate("if".equalsIgnoreCase(input.LT(1).getText()),"\"if\".equalsIgnoreCase(input.LT(1).getText())")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "sass_else", "\"if\".equalsIgnoreCase(input.LT(1).getText())");
                    }
                    dbg.location(1242,67);
                    match(input,IDENT,FOLLOW_IDENT_in_sass_else8549); if (state.failed) return ;
                    dbg.location(1242,82);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:82: ( ws )?
                    int alt292=2;
                    try { dbg.enterSubRule(292);
                    try { dbg.enterDecision(292, decisionCanBacktrack[292]);

                    int LA292_0 = input.LA(1);

                    if ( (LA292_0==WS||(LA292_0>=NL && LA292_0<=COMMENT)) ) {
                        alt292=1;
                    }
                    } finally {dbg.exitDecision(292);}

                    switch (alt292) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:82: ws
                            {
                            dbg.location(1242,82);
                            pushFollow(FOLLOW_ws_in_sass_else8553);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(292);}

                    dbg.location(1242,86);
                    pushFollow(FOLLOW_sass_control_expression_in_sass_else8556);
                    sass_control_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1242,110);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:110: ( ws )?
                    int alt293=2;
                    try { dbg.enterSubRule(293);
                    try { dbg.enterDecision(293, decisionCanBacktrack[293]);

                    int LA293_0 = input.LA(1);

                    if ( (LA293_0==WS||(LA293_0>=NL && LA293_0<=COMMENT)) ) {
                        alt293=1;
                    }
                    } finally {dbg.exitDecision(293);}

                    switch (alt293) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:110: ws
                            {
                            dbg.location(1242,110);
                            pushFollow(FOLLOW_ws_in_sass_else8558);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(293);}

                    dbg.location(1242,114);
                    pushFollow(FOLLOW_sass_control_block_in_sass_else8561);
                    sass_control_block();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1242,133);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:133: ( ( ws )? sass_else )?
                    int alt295=2;
                    try { dbg.enterSubRule(295);
                    try { dbg.enterDecision(295, decisionCanBacktrack[295]);

                    try {
                        isCyclicDecision = true;
                        alt295 = dfa295.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(295);}

                    switch (alt295) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:134: ( ws )? sass_else
                            {
                            dbg.location(1242,134);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:134: ( ws )?
                            int alt294=2;
                            try { dbg.enterSubRule(294);
                            try { dbg.enterDecision(294, decisionCanBacktrack[294]);

                            int LA294_0 = input.LA(1);

                            if ( (LA294_0==WS||(LA294_0>=NL && LA294_0<=COMMENT)) ) {
                                alt294=1;
                            }
                            } finally {dbg.exitDecision(294);}

                            switch (alt294) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:134: ws
                                    {
                                    dbg.location(1242,134);
                                    pushFollow(FOLLOW_ws_in_sass_else8564);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(294);}

                            dbg.location(1242,138);
                            pushFollow(FOLLOW_sass_else_in_sass_else8567);
                            sass_else();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(295);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1243, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_else");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_else"


    // $ANTLR start "sass_control_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1245:1: sass_control_expression : cp_full_expression ;
    public final void sass_control_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_control_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1245, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1246:5: ( cp_full_expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:5: cp_full_expression
            {
            dbg.location(1247,5);
            pushFollow(FOLLOW_cp_full_expression_in_sass_control_expression8590);
            cp_full_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1248, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_control_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_control_expression"


    // $ANTLR start "cp_full_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1250:1: cp_full_expression : cp_full_expression_atom ( ( ( ws )? cp_full_expression_operator )=> ( ws )? cp_full_expression_operator ( ws )? cp_full_expression_atom )* ;
    public final void cp_full_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_full_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1250, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1251:5: ( cp_full_expression_atom ( ( ( ws )? cp_full_expression_operator )=> ( ws )? cp_full_expression_operator ( ws )? cp_full_expression_atom )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1251:10: cp_full_expression_atom ( ( ( ws )? cp_full_expression_operator )=> ( ws )? cp_full_expression_operator ( ws )? cp_full_expression_atom )*
            {
            dbg.location(1251,10);
            pushFollow(FOLLOW_cp_full_expression_atom_in_cp_full_expression8610);
            cp_full_expression_atom();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1252,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:10: ( ( ( ws )? cp_full_expression_operator )=> ( ws )? cp_full_expression_operator ( ws )? cp_full_expression_atom )*
            try { dbg.enterSubRule(299);

            loop299:
            do {
                int alt299=2;
                try { dbg.enterDecision(299, decisionCanBacktrack[299]);

                try {
                    isCyclicDecision = true;
                    alt299 = dfa299.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(299);}

                switch (alt299) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:12: ( ( ws )? cp_full_expression_operator )=> ( ws )? cp_full_expression_operator ( ws )? cp_full_expression_atom
            	    {
            	    dbg.location(1252,47);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:47: ( ws )?
            	    int alt297=2;
            	    try { dbg.enterSubRule(297);
            	    try { dbg.enterDecision(297, decisionCanBacktrack[297]);

            	    int LA297_0 = input.LA(1);

            	    if ( (LA297_0==WS||(LA297_0>=NL && LA297_0<=COMMENT)) ) {
            	        alt297=1;
            	    }
            	    } finally {dbg.exitDecision(297);}

            	    switch (alt297) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:47: ws
            	            {
            	            dbg.location(1252,47);
            	            pushFollow(FOLLOW_ws_in_cp_full_expression8631);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(297);}

            	    dbg.location(1252,51);
            	    pushFollow(FOLLOW_cp_full_expression_operator_in_cp_full_expression8634);
            	    cp_full_expression_operator();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(1252,79);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:79: ( ws )?
            	    int alt298=2;
            	    try { dbg.enterSubRule(298);
            	    try { dbg.enterDecision(298, decisionCanBacktrack[298]);

            	    int LA298_0 = input.LA(1);

            	    if ( (LA298_0==WS||(LA298_0>=NL && LA298_0<=COMMENT)) ) {
            	        alt298=1;
            	    }
            	    } finally {dbg.exitDecision(298);}

            	    switch (alt298) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:79: ws
            	            {
            	            dbg.location(1252,79);
            	            pushFollow(FOLLOW_ws_in_cp_full_expression8636);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(298);}

            	    dbg.location(1252,83);
            	    pushFollow(FOLLOW_cp_full_expression_atom_in_cp_full_expression8639);
            	    cp_full_expression_atom();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop299;
                }
            } while (true);
            } finally {dbg.exitSubRule(299);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1253, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_full_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_full_expression"


    // $ANTLR start "cp_full_expression_operator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1255:1: cp_full_expression_operator : ( OR | AND | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ );
    public final void cp_full_expression_operator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_full_expression_operator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1255, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1256:5: ( OR | AND | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(1256,5);
            if ( input.LA(1)==AND||input.LA(1)==GREATER||(input.LA(1)>=GREATER_OR_EQ && input.LA(1)<=LESS_OR_EQ)||(input.LA(1)>=OR && input.LA(1)<=CP_NOT_EQ) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1258, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_full_expression_operator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_full_expression_operator"


    // $ANTLR start "cp_full_expression_atom"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1260:1: cp_full_expression_atom : ( NOT ( ws )? )? ( ( cp_expression )=> cp_expression | LPAREN ( ws )? cp_full_expression ( ws )? RPAREN ) ;
    public final void cp_full_expression_atom() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_full_expression_atom");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1260, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1261:5: ( ( NOT ( ws )? )? ( ( cp_expression )=> cp_expression | LPAREN ( ws )? cp_full_expression ( ws )? RPAREN ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1262:9: ( NOT ( ws )? )? ( ( cp_expression )=> cp_expression | LPAREN ( ws )? cp_full_expression ( ws )? RPAREN )
            {
            dbg.location(1262,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1262:9: ( NOT ( ws )? )?
            int alt301=2;
            try { dbg.enterSubRule(301);
            try { dbg.enterDecision(301, decisionCanBacktrack[301]);

            int LA301_0 = input.LA(1);

            if ( (LA301_0==NOT) ) {
                alt301=1;
            }
            } finally {dbg.exitDecision(301);}

            switch (alt301) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1262:10: NOT ( ws )?
                    {
                    dbg.location(1262,10);
                    match(input,NOT,FOLLOW_NOT_in_cp_full_expression_atom8726); if (state.failed) return ;
                    dbg.location(1262,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1262:14: ( ws )?
                    int alt300=2;
                    try { dbg.enterSubRule(300);
                    try { dbg.enterDecision(300, decisionCanBacktrack[300]);

                    int LA300_0 = input.LA(1);

                    if ( (LA300_0==WS||(LA300_0>=NL && LA300_0<=COMMENT)) ) {
                        alt300=1;
                    }
                    } finally {dbg.exitDecision(300);}

                    switch (alt300) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1262:14: ws
                            {
                            dbg.location(1262,14);
                            pushFollow(FOLLOW_ws_in_cp_full_expression_atom8728);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(300);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(301);}

            dbg.location(1263,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:9: ( ( cp_expression )=> cp_expression | LPAREN ( ws )? cp_full_expression ( ws )? RPAREN )
            int alt304=2;
            try { dbg.enterSubRule(304);
            try { dbg.enterDecision(304, decisionCanBacktrack[304]);

            try {
                isCyclicDecision = true;
                alt304 = dfa304.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(304);}

            switch (alt304) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:13: ( cp_expression )=> cp_expression
                    {
                    dbg.location(1264,30);
                    pushFollow(FOLLOW_cp_expression_in_cp_full_expression_atom8760);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1265:15: LPAREN ( ws )? cp_full_expression ( ws )? RPAREN
                    {
                    dbg.location(1265,15);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_full_expression_atom8776); if (state.failed) return ;
                    dbg.location(1265,22);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1265:22: ( ws )?
                    int alt302=2;
                    try { dbg.enterSubRule(302);
                    try { dbg.enterDecision(302, decisionCanBacktrack[302]);

                    int LA302_0 = input.LA(1);

                    if ( (LA302_0==WS||(LA302_0>=NL && LA302_0<=COMMENT)) ) {
                        alt302=1;
                    }
                    } finally {dbg.exitDecision(302);}

                    switch (alt302) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1265:22: ws
                            {
                            dbg.location(1265,22);
                            pushFollow(FOLLOW_ws_in_cp_full_expression_atom8778);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(302);}

                    dbg.location(1265,26);
                    pushFollow(FOLLOW_cp_full_expression_in_cp_full_expression_atom8781);
                    cp_full_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1265,45);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1265:45: ( ws )?
                    int alt303=2;
                    try { dbg.enterSubRule(303);
                    try { dbg.enterDecision(303, decisionCanBacktrack[303]);

                    int LA303_0 = input.LA(1);

                    if ( (LA303_0==WS||(LA303_0>=NL && LA303_0<=COMMENT)) ) {
                        alt303=1;
                    }
                    } finally {dbg.exitDecision(303);}

                    switch (alt303) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1265:45: ws
                            {
                            dbg.location(1265,45);
                            pushFollow(FOLLOW_ws_in_cp_full_expression_atom8783);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(303);}

                    dbg.location(1265,49);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_full_expression_atom8786); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(304);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1267, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_full_expression_atom");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_full_expression_atom"


    // $ANTLR start "sass_for"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1269:1: sass_for : SASS_FOR ws cp_variable ws IDENT ws cp_term IDENT ws cp_term sass_control_block ;
    public final void sass_for() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_for");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1269, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1270:5: ( SASS_FOR ws cp_variable ws IDENT ws cp_term IDENT ws cp_term sass_control_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1271:5: SASS_FOR ws cp_variable ws IDENT ws cp_term IDENT ws cp_term sass_control_block
            {
            dbg.location(1271,5);
            match(input,SASS_FOR,FOLLOW_SASS_FOR_in_sass_for8821); if (state.failed) return ;
            dbg.location(1271,14);
            pushFollow(FOLLOW_ws_in_sass_for8823);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1271,17);
            pushFollow(FOLLOW_cp_variable_in_sass_for8825);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1271,29);
            pushFollow(FOLLOW_ws_in_sass_for8827);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1271,32);
            match(input,IDENT,FOLLOW_IDENT_in_sass_for8829); if (state.failed) return ;
            dbg.location(1271,47);
            pushFollow(FOLLOW_ws_in_sass_for8833);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1271,50);
            pushFollow(FOLLOW_cp_term_in_sass_for8835);
            cp_term();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1271,58);
            match(input,IDENT,FOLLOW_IDENT_in_sass_for8837); if (state.failed) return ;
            dbg.location(1271,71);
            pushFollow(FOLLOW_ws_in_sass_for8841);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1271,74);
            pushFollow(FOLLOW_cp_term_in_sass_for8843);
            cp_term();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1271,82);
            pushFollow(FOLLOW_sass_control_block_in_sass_for8845);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1272, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_for");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_for"


    // $ANTLR start "sass_each"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1274:1: sass_each : SASS_EACH ws cp_variable ws IDENT ws sass_each_list sass_control_block ;
    public final void sass_each() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_each");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1274, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1275:5: ( SASS_EACH ws cp_variable ws IDENT ws sass_each_list sass_control_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1276:5: SASS_EACH ws cp_variable ws IDENT ws sass_each_list sass_control_block
            {
            dbg.location(1276,5);
            match(input,SASS_EACH,FOLLOW_SASS_EACH_in_sass_each8866); if (state.failed) return ;
            dbg.location(1276,15);
            pushFollow(FOLLOW_ws_in_sass_each8868);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1276,18);
            pushFollow(FOLLOW_cp_variable_in_sass_each8870);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1276,30);
            pushFollow(FOLLOW_ws_in_sass_each8872);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1276,33);
            match(input,IDENT,FOLLOW_IDENT_in_sass_each8874); if (state.failed) return ;
            dbg.location(1276,46);
            pushFollow(FOLLOW_ws_in_sass_each8878);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1276,49);
            pushFollow(FOLLOW_sass_each_list_in_sass_each8880);
            sass_each_list();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1276,64);
            pushFollow(FOLLOW_sass_control_block_in_sass_each8882);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1277, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_each");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_each"


    // $ANTLR start "sass_each_list"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1279:1: sass_each_list : cp_term ( COMMA ( ws )? cp_term )* ;
    public final void sass_each_list() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_each_list");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1279, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1280:5: ( cp_term ( COMMA ( ws )? cp_term )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:5: cp_term ( COMMA ( ws )? cp_term )*
            {
            dbg.location(1281,5);
            pushFollow(FOLLOW_cp_term_in_sass_each_list8907);
            cp_term();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1281,13);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:13: ( COMMA ( ws )? cp_term )*
            try { dbg.enterSubRule(306);

            loop306:
            do {
                int alt306=2;
                try { dbg.enterDecision(306, decisionCanBacktrack[306]);

                int LA306_0 = input.LA(1);

                if ( (LA306_0==COMMA) ) {
                    alt306=1;
                }


                } finally {dbg.exitDecision(306);}

                switch (alt306) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:14: COMMA ( ws )? cp_term
            	    {
            	    dbg.location(1281,14);
            	    match(input,COMMA,FOLLOW_COMMA_in_sass_each_list8910); if (state.failed) return ;
            	    dbg.location(1281,20);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:20: ( ws )?
            	    int alt305=2;
            	    try { dbg.enterSubRule(305);
            	    try { dbg.enterDecision(305, decisionCanBacktrack[305]);

            	    int LA305_0 = input.LA(1);

            	    if ( (LA305_0==WS||(LA305_0>=NL && LA305_0<=COMMENT)) ) {
            	        alt305=1;
            	    }
            	    } finally {dbg.exitDecision(305);}

            	    switch (alt305) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:20: ws
            	            {
            	            dbg.location(1281,20);
            	            pushFollow(FOLLOW_ws_in_sass_each_list8912);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(305);}

            	    dbg.location(1281,24);
            	    pushFollow(FOLLOW_cp_term_in_sass_each_list8915);
            	    cp_term();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop306;
                }
            } while (true);
            } finally {dbg.exitSubRule(306);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1282, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_each_list");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_each_list"


    // $ANTLR start "sass_while"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1284:1: sass_while : SASS_WHILE ws sass_control_expression ( ws )? sass_control_block ;
    public final void sass_while() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_while");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1284, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1285:5: ( SASS_WHILE ws sass_control_expression ( ws )? sass_control_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1286:5: SASS_WHILE ws sass_control_expression ( ws )? sass_control_block
            {
            dbg.location(1286,5);
            match(input,SASS_WHILE,FOLLOW_SASS_WHILE_in_sass_while8942); if (state.failed) return ;
            dbg.location(1286,16);
            pushFollow(FOLLOW_ws_in_sass_while8944);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1286,19);
            pushFollow(FOLLOW_sass_control_expression_in_sass_while8946);
            sass_control_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1286,43);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1286:43: ( ws )?
            int alt307=2;
            try { dbg.enterSubRule(307);
            try { dbg.enterDecision(307, decisionCanBacktrack[307]);

            int LA307_0 = input.LA(1);

            if ( (LA307_0==WS||(LA307_0>=NL && LA307_0<=COMMENT)) ) {
                alt307=1;
            }
            } finally {dbg.exitDecision(307);}

            switch (alt307) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1286:43: ws
                    {
                    dbg.location(1286,43);
                    pushFollow(FOLLOW_ws_in_sass_while8948);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(307);}

            dbg.location(1286,47);
            pushFollow(FOLLOW_sass_control_block_in_sass_while8951);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1287, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_while");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_while"


    // $ANTLR start "sass_control_block"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:1: sass_control_block : LBRACE ( ws )? declarations RBRACE ;
    public final void sass_control_block() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_control_block");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1289, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1290:5: ( LBRACE ( ws )? declarations RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1291:5: LBRACE ( ws )? declarations RBRACE
            {
            dbg.location(1291,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_control_block8972); if (state.failed) return ;
            dbg.location(1291,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1291:12: ( ws )?
            int alt308=2;
            try { dbg.enterSubRule(308);
            try { dbg.enterDecision(308, decisionCanBacktrack[308]);

            int LA308_0 = input.LA(1);

            if ( (LA308_0==WS||(LA308_0>=NL && LA308_0<=COMMENT)) ) {
                alt308=1;
            }
            } finally {dbg.exitDecision(308);}

            switch (alt308) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1291:12: ws
                    {
                    dbg.location(1291,12);
                    pushFollow(FOLLOW_ws_in_sass_control_block8974);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(308);}

            dbg.location(1291,16);
            pushFollow(FOLLOW_declarations_in_sass_control_block8977);
            declarations();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1291,29);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_control_block8979); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1292, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_control_block");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_control_block"


    // $ANTLR start "sass_function_declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1294:1: sass_function_declaration : SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? declarations RBRACE ;
    public final void sass_function_declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_function_declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1294, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1295:5: ( SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? declarations RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:5: SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? declarations RBRACE
            {
            dbg.location(1300,5);
            match(input,SASS_FUNCTION,FOLLOW_SASS_FUNCTION_in_sass_function_declaration9025); if (state.failed) return ;
            dbg.location(1300,19);
            pushFollow(FOLLOW_ws_in_sass_function_declaration9027);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1300,22);
            pushFollow(FOLLOW_sass_function_name_in_sass_function_declaration9029);
            sass_function_name();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1300,41);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:41: ( ws )?
            int alt309=2;
            try { dbg.enterSubRule(309);
            try { dbg.enterDecision(309, decisionCanBacktrack[309]);

            int LA309_0 = input.LA(1);

            if ( (LA309_0==WS||(LA309_0>=NL && LA309_0<=COMMENT)) ) {
                alt309=1;
            }
            } finally {dbg.exitDecision(309);}

            switch (alt309) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:41: ws
                    {
                    dbg.location(1300,41);
                    pushFollow(FOLLOW_ws_in_sass_function_declaration9031);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(309);}

            dbg.location(1300,45);
            match(input,LPAREN,FOLLOW_LPAREN_in_sass_function_declaration9034); if (state.failed) return ;
            dbg.location(1300,52);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:52: ( cp_args_list )?
            int alt310=2;
            try { dbg.enterSubRule(310);
            try { dbg.enterDecision(310, decisionCanBacktrack[310]);

            int LA310_0 = input.LA(1);

            if ( (LA310_0==MEDIA_SYM||LA310_0==AT_IDENT||LA310_0==SASS_VAR||(LA310_0>=LESS_DOTS && LA310_0<=LESS_REST)) ) {
                alt310=1;
            }
            } finally {dbg.exitDecision(310);}

            switch (alt310) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:52: cp_args_list
                    {
                    dbg.location(1300,52);
                    pushFollow(FOLLOW_cp_args_list_in_sass_function_declaration9036);
                    cp_args_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(310);}

            dbg.location(1300,66);
            match(input,RPAREN,FOLLOW_RPAREN_in_sass_function_declaration9039); if (state.failed) return ;
            dbg.location(1300,73);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:73: ( ws )?
            int alt311=2;
            try { dbg.enterSubRule(311);
            try { dbg.enterDecision(311, decisionCanBacktrack[311]);

            int LA311_0 = input.LA(1);

            if ( (LA311_0==WS||(LA311_0>=NL && LA311_0<=COMMENT)) ) {
                alt311=1;
            }
            } finally {dbg.exitDecision(311);}

            switch (alt311) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:73: ws
                    {
                    dbg.location(1300,73);
                    pushFollow(FOLLOW_ws_in_sass_function_declaration9041);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(311);}

            dbg.location(1300,77);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_function_declaration9044); if (state.failed) return ;
            dbg.location(1300,84);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:84: ( ws )?
            int alt312=2;
            try { dbg.enterSubRule(312);
            try { dbg.enterDecision(312, decisionCanBacktrack[312]);

            int LA312_0 = input.LA(1);

            if ( (LA312_0==WS||(LA312_0>=NL && LA312_0<=COMMENT)) ) {
                alt312=1;
            }
            } finally {dbg.exitDecision(312);}

            switch (alt312) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:84: ws
                    {
                    dbg.location(1300,84);
                    pushFollow(FOLLOW_ws_in_sass_function_declaration9046);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(312);}

            dbg.location(1300,88);
            pushFollow(FOLLOW_declarations_in_sass_function_declaration9049);
            declarations();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1300,101);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_function_declaration9051); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1301, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_function_declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_function_declaration"


    // $ANTLR start "sass_function_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1303:1: sass_function_name : IDENT ;
    public final void sass_function_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_function_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1303, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1304:5: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1305:5: IDENT
            {
            dbg.location(1305,5);
            match(input,IDENT,FOLLOW_IDENT_in_sass_function_name9076); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1306, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_function_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_function_name"


    // $ANTLR start "sass_function_return"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1308:1: sass_function_return : SASS_RETURN ws cp_full_expression SEMI ;
    public final void sass_function_return() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_function_return");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1308, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1309:5: ( SASS_RETURN ws cp_full_expression SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1310:5: SASS_RETURN ws cp_full_expression SEMI
            {
            dbg.location(1310,5);
            match(input,SASS_RETURN,FOLLOW_SASS_RETURN_in_sass_function_return9097); if (state.failed) return ;
            dbg.location(1310,17);
            pushFollow(FOLLOW_ws_in_sass_function_return9099);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1310,20);
            pushFollow(FOLLOW_cp_full_expression_in_sass_function_return9101);
            cp_full_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1310,39);
            match(input,SEMI,FOLLOW_SEMI_in_sass_function_return9103); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1311, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_function_return");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_function_return"


    // $ANTLR start "sass_content"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1313:1: sass_content : SASS_CONTENT ( ws )? SEMI ;
    public final void sass_content() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_content");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1313, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1314:5: ( SASS_CONTENT ( ws )? SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1315:5: SASS_CONTENT ( ws )? SEMI
            {
            dbg.location(1315,5);
            match(input,SASS_CONTENT,FOLLOW_SASS_CONTENT_in_sass_content9128); if (state.failed) return ;
            dbg.location(1315,18);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1315:18: ( ws )?
            int alt313=2;
            try { dbg.enterSubRule(313);
            try { dbg.enterDecision(313, decisionCanBacktrack[313]);

            int LA313_0 = input.LA(1);

            if ( (LA313_0==WS||(LA313_0>=NL && LA313_0<=COMMENT)) ) {
                alt313=1;
            }
            } finally {dbg.exitDecision(313);}

            switch (alt313) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1315:18: ws
                    {
                    dbg.location(1315,18);
                    pushFollow(FOLLOW_ws_in_sass_content9130);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(313);}

            dbg.location(1315,22);
            match(input,SEMI,FOLLOW_SEMI_in_sass_content9133); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1316, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_content");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_content"

    // $ANTLR start synpred1_Css3
    public final void synpred1_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:13: ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:15: (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE
        {
        dbg.location(368,15);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:15: (~ ( HASH_SYMBOL | LBRACE ) )*
        try { dbg.enterSubRule(314);

        loop314:
        do {
            int alt314=2;
            try { dbg.enterDecision(314, decisionCanBacktrack[314]);

            int LA314_0 = input.LA(1);

            if ( ((LA314_0>=NAMESPACE_SYM && LA314_0<=MEDIA_SYM)||(LA314_0>=RBRACE && LA314_0<=MINUS)||(LA314_0>=HASH && LA314_0<=LINE_COMMENT)) ) {
                alt314=1;
            }


            } finally {dbg.exitDecision(314);}

            switch (alt314) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:15: ~ ( HASH_SYMBOL | LBRACE )
        	    {
        	    dbg.location(368,15);
        	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=RBRACE && input.LA(1)<=MINUS)||(input.LA(1)>=HASH && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop314;
            }
        } while (true);
        } finally {dbg.exitSubRule(314);}

        dbg.location(368,42);
        match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_synpred1_Css3488); if (state.failed) return ;
        dbg.location(368,54);
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred1_Css3490); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_Css3

    // $ANTLR start synpred2_Css3
    public final void synpred2_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:370:13: ( mediaQueryList )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:370:14: mediaQueryList
        {
        dbg.location(370,14);
        pushFollow(FOLLOW_mediaQueryList_in_synpred2_Css3527);
        mediaQueryList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_Css3

    // $ANTLR start synpred3_Css3
    public final void synpred3_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:376:17: ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI | sass_declaration_interpolation_expression COLON )
        int alt317=2;
        try { dbg.enterDecision(317, decisionCanBacktrack[317]);

        try {
            isCyclicDecision = true;
            alt317 = dfa317.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(317);}

        switch (alt317) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:376:18: (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI
                {
                dbg.location(376,18);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:376:18: (~ ( LBRACE | SEMI | RBRACE | COLON ) )+
                int cnt315=0;
                try { dbg.enterSubRule(315);

                loop315:
                do {
                    int alt315=2;
                    try { dbg.enterDecision(315, decisionCanBacktrack[315]);

                    int LA315_0 = input.LA(1);

                    if ( (LA315_0==NAMESPACE_SYM||(LA315_0>=IDENT && LA315_0<=MEDIA_SYM)||(LA315_0>=AND && LA315_0<=LPAREN)||(LA315_0>=RPAREN && LA315_0<=LINE_COMMENT)) ) {
                        alt315=1;
                    }


                    } finally {dbg.exitDecision(315);}

                    switch (alt315) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:376:18: ~ ( LBRACE | SEMI | RBRACE | COLON )
                	    {
                	    dbg.location(376,18);
                	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=LPAREN)||(input.LA(1)>=RPAREN && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    if ( cnt315 >= 1 ) break loop315;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(315, input);
                            dbg.recognitionException(eee);

                            throw eee;
                    }
                    cnt315++;
                } while (true);
                } finally {dbg.exitSubRule(315);}

                dbg.location(376,47);
                match(input,COLON,FOLLOW_COLON_in_synpred3_Css3625); if (state.failed) return ;
                dbg.location(376,53);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:376:53: (~ ( SEMI | LBRACE | RBRACE ) )+
                int cnt316=0;
                try { dbg.enterSubRule(316);

                loop316:
                do {
                    int alt316=2;
                    try { dbg.enterDecision(316, decisionCanBacktrack[316]);

                    int LA316_0 = input.LA(1);

                    if ( (LA316_0==NAMESPACE_SYM||(LA316_0>=IDENT && LA316_0<=MEDIA_SYM)||(LA316_0>=AND && LA316_0<=LINE_COMMENT)) ) {
                        alt316=1;
                    }


                    } finally {dbg.exitDecision(316);}

                    switch (alt316) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:376:53: ~ ( SEMI | LBRACE | RBRACE )
                	    {
                	    dbg.location(376,53);
                	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    if ( cnt316 >= 1 ) break loop316;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(316, input);
                            dbg.recognitionException(eee);

                            throw eee;
                    }
                    cnt316++;
                } while (true);
                } finally {dbg.exitSubRule(316);}

                dbg.location(376,76);
                match(input,SEMI,FOLLOW_SEMI_in_synpred3_Css3637); if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:376:83: sass_declaration_interpolation_expression COLON
                {
                dbg.location(376,83);
                pushFollow(FOLLOW_sass_declaration_interpolation_expression_in_synpred3_Css3641);
                sass_declaration_interpolation_expression();

                state._fsp--;
                if (state.failed) return ;
                dbg.location(376,125);
                match(input,COLON,FOLLOW_COLON_in_synpred3_Css3643); if (state.failed) return ;

                }
                break;

        }}
    // $ANTLR end synpred3_Css3

    // $ANTLR start synpred4_Css3
    public final void synpred4_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:429:9: ( cp_mixin_call )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:429:10: cp_mixin_call
        {
        dbg.location(429,10);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred4_Css31229);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_Css3

    // $ANTLR start synpred5_Css3
    public final void synpred5_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:570:9: ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:570:10: (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE
        {
        dbg.location(570,10);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:570:10: (~ ( HASH_SYMBOL | COLON ) )*
        try { dbg.enterSubRule(318);

        loop318:
        do {
            int alt318=2;
            try { dbg.enterDecision(318, decisionCanBacktrack[318]);

            int LA318_0 = input.LA(1);

            if ( ((LA318_0>=NAMESPACE_SYM && LA318_0<=LPAREN)||(LA318_0>=RPAREN && LA318_0<=MINUS)||(LA318_0>=HASH && LA318_0<=LINE_COMMENT)) ) {
                alt318=1;
            }


            } finally {dbg.exitDecision(318);}

            switch (alt318) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:570:10: ~ ( HASH_SYMBOL | COLON )
        	    {
        	    dbg.location(570,10);
        	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=LPAREN)||(input.LA(1)>=RPAREN && input.LA(1)<=MINUS)||(input.LA(1)>=HASH && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop318;
            }
        } while (true);
        } finally {dbg.exitSubRule(318);}

        dbg.location(570,32);
        match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_synpred5_Css32379); if (state.failed) return ;
        dbg.location(570,44);
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred5_Css32381); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_Css3

    // $ANTLR start synpred6_Css3
    public final void synpred6_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:584:13: ( cp_mixin_declaration )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:584:14: cp_mixin_declaration
        {
        dbg.location(584,14);
        pushFollow(FOLLOW_cp_mixin_declaration_in_synpred6_Css32493);
        cp_mixin_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_Css3

    // $ANTLR start synpred7_Css3
    public final void synpred7_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:603:17: ( cp_variable_declaration )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:603:18: cp_variable_declaration
        {
        dbg.location(603,18);
        pushFollow(FOLLOW_cp_variable_declaration_in_synpred7_Css32640);
        cp_variable_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_Css3

    // $ANTLR start synpred8_Css3
    public final void synpred8_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:3: ( declaration SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:4: declaration SEMI
        {
        dbg.location(609,4);
        pushFollow(FOLLOW_declaration_in_synpred8_Css32721);
        declaration();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(609,16);
        match(input,SEMI,FOLLOW_SEMI_in_synpred8_Css32723); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_Css3

    // $ANTLR start synpred9_Css3
    public final void synpred9_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:3: ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )* COLON (~ ( SEMI | LBRACE | RBRACE ) )* SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:4: (~ ( LBRACE | SEMI | RBRACE | COLON ) )* COLON (~ ( SEMI | LBRACE | RBRACE ) )* SEMI
        {
        dbg.location(613,4);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:4: (~ ( LBRACE | SEMI | RBRACE | COLON ) )*
        try { dbg.enterSubRule(319);

        loop319:
        do {
            int alt319=2;
            try { dbg.enterDecision(319, decisionCanBacktrack[319]);

            int LA319_0 = input.LA(1);

            if ( (LA319_0==NAMESPACE_SYM||(LA319_0>=IDENT && LA319_0<=MEDIA_SYM)||(LA319_0>=AND && LA319_0<=LPAREN)||(LA319_0>=RPAREN && LA319_0<=LINE_COMMENT)) ) {
                alt319=1;
            }


            } finally {dbg.exitDecision(319);}

            switch (alt319) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:4: ~ ( LBRACE | SEMI | RBRACE | COLON )
        	    {
        	    dbg.location(613,4);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=LPAREN)||(input.LA(1)>=RPAREN && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop319;
            }
        } while (true);
        } finally {dbg.exitSubRule(319);}

        dbg.location(613,33);
        match(input,COLON,FOLLOW_COLON_in_synpred9_Css32800); if (state.failed) return ;
        dbg.location(613,39);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:39: (~ ( SEMI | LBRACE | RBRACE ) )*
        try { dbg.enterSubRule(320);

        loop320:
        do {
            int alt320=2;
            try { dbg.enterDecision(320, decisionCanBacktrack[320]);

            int LA320_0 = input.LA(1);

            if ( (LA320_0==NAMESPACE_SYM||(LA320_0>=IDENT && LA320_0<=MEDIA_SYM)||(LA320_0>=AND && LA320_0<=LINE_COMMENT)) ) {
                alt320=1;
            }


            } finally {dbg.exitDecision(320);}

            switch (alt320) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:39: ~ ( SEMI | LBRACE | RBRACE )
        	    {
        	    dbg.location(613,39);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop320;
            }
        } while (true);
        } finally {dbg.exitSubRule(320);}

        dbg.location(613,62);
        match(input,SEMI,FOLLOW_SEMI_in_synpred9_Css32812); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_Css3

    // $ANTLR start synpred10_Css3
    public final void synpred10_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:615:3: ( sass_nested_properties )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:615:4: sass_nested_properties
        {
        dbg.location(615,4);
        pushFollow(FOLLOW_sass_nested_properties_in_synpred10_Css32829);
        sass_nested_properties();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_Css3

    // $ANTLR start synpred11_Css3
    public final void synpred11_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:617:17: ( rule )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:617:18: rule
        {
        dbg.location(617,18);
        pushFollow(FOLLOW_rule_in_synpred11_Css32858);
        rule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_Css3

    // $ANTLR start synpred12_Css3
    public final void synpred12_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:17: ( (~ SEMI )* SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:18: (~ SEMI )* SEMI
        {
        dbg.location(635,18);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:18: (~ SEMI )*
        try { dbg.enterSubRule(321);

        loop321:
        do {
            int alt321=2;
            try { dbg.enterDecision(321, decisionCanBacktrack[321]);

            int LA321_0 = input.LA(1);

            if ( (LA321_0==NAMESPACE_SYM||(LA321_0>=IDENT && LA321_0<=LINE_COMMENT)) ) {
                alt321=1;
            }


            } finally {dbg.exitDecision(321);}

            switch (alt321) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:18: ~ SEMI
        	    {
        	    dbg.location(635,18);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop321;
            }
        } while (true);
        } finally {dbg.exitSubRule(321);}

        dbg.location(635,25);
        match(input,SEMI,FOLLOW_SEMI_in_synpred12_Css33234); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_Css3

    // $ANTLR start synpred13_Css3
    public final void synpred13_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:9: ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:11: (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE
        {
        dbg.location(643,11);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:11: (~ ( HASH_SYMBOL | LBRACE ) )*
        try { dbg.enterSubRule(322);

        loop322:
        do {
            int alt322=2;
            try { dbg.enterDecision(322, decisionCanBacktrack[322]);

            int LA322_0 = input.LA(1);

            if ( ((LA322_0>=NAMESPACE_SYM && LA322_0<=MEDIA_SYM)||(LA322_0>=RBRACE && LA322_0<=MINUS)||(LA322_0>=HASH && LA322_0<=LINE_COMMENT)) ) {
                alt322=1;
            }


            } finally {dbg.exitDecision(322);}

            switch (alt322) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:11: ~ ( HASH_SYMBOL | LBRACE )
        	    {
        	    dbg.location(643,11);
        	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=RBRACE && input.LA(1)<=MINUS)||(input.LA(1)>=HASH && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop322;
            }
        } while (true);
        } finally {dbg.exitSubRule(322);}

        dbg.location(643,38);
        match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_synpred13_Css33321); if (state.failed) return ;
        dbg.location(643,50);
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred13_Css33323); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_Css3

    // $ANTLR start synpred14_Css3
    public final void synpred14_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:18: ( esPred )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:19: esPred
        {
        dbg.location(656,19);
        pushFollow(FOLLOW_esPred_in_synpred14_Css33421);
        esPred();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_Css3

    // $ANTLR start synpred15_Css3
    public final void synpred15_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:5: ( esPred )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:6: esPred
        {
        dbg.location(658,6);
        pushFollow(FOLLOW_esPred_in_synpred15_Css33442);
        esPred();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_Css3

    // $ANTLR start synpred16_Css3
    public final void synpred16_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:7: ( ( IDENT | STAR )? PIPE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:8: ( IDENT | STAR )? PIPE
        {
        dbg.location(672,8);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:8: ( IDENT | STAR )?
        int alt323=2;
        try { dbg.enterSubRule(323);
        try { dbg.enterDecision(323, decisionCanBacktrack[323]);

        int LA323_0 = input.LA(1);

        if ( (LA323_0==IDENT||LA323_0==STAR) ) {
            alt323=1;
        }
        } finally {dbg.exitDecision(323);}

        switch (alt323) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
                {
                dbg.location(672,8);
                if ( input.LA(1)==IDENT||input.LA(1)==STAR ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    dbg.recognitionException(mse);
                    throw mse;
                }


                }
                break;

        }
        } finally {dbg.exitSubRule(323);}

        dbg.location(672,24);
        match(input,PIPE,FOLLOW_PIPE_in_synpred16_Css33560); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_Css3

    // $ANTLR start synpred17_Css3
    public final void synpred17_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:783:5: ( (~ ( HASH_SYMBOL | SEMI | RBRACE | LBRACE ) )* HASH_SYMBOL LBRACE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:783:6: (~ ( HASH_SYMBOL | SEMI | RBRACE | LBRACE ) )* HASH_SYMBOL LBRACE
        {
        dbg.location(783,6);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:783:6: (~ ( HASH_SYMBOL | SEMI | RBRACE | LBRACE ) )*
        try { dbg.enterSubRule(324);

        loop324:
        do {
            int alt324=2;
            try { dbg.enterDecision(324, decisionCanBacktrack[324]);

            int LA324_0 = input.LA(1);

            if ( (LA324_0==NAMESPACE_SYM||(LA324_0>=IDENT && LA324_0<=MEDIA_SYM)||(LA324_0>=AND && LA324_0<=MINUS)||(LA324_0>=HASH && LA324_0<=LINE_COMMENT)) ) {
                alt324=1;
            }


            } finally {dbg.exitDecision(324);}

            switch (alt324) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:783:6: ~ ( HASH_SYMBOL | SEMI | RBRACE | LBRACE )
        	    {
        	    dbg.location(783,6);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=MINUS)||(input.LA(1)>=HASH && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop324;
            }
        } while (true);
        } finally {dbg.exitSubRule(324);}

        dbg.location(783,41);
        match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_synpred17_Css34592); if (state.failed) return ;
        dbg.location(783,53);
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred17_Css34594); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_Css3

    // $ANTLR start synpred18_Css3
    public final void synpred18_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:845:9: ( function )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:845:10: function
        {
        dbg.location(845,10);
        pushFollow(FOLLOW_function_in_synpred18_Css34972);
        function();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_Css3

    // $ANTLR start synpred19_Css3
    public final void synpred19_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:870:21: ( cp_args_list )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:870:22: cp_args_list
        {
        dbg.location(870,22);
        pushFollow(FOLLOW_cp_args_list_in_synpred19_Css35244);
        cp_args_list();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_Css3

    // $ANTLR start synpred20_Css3
    public final void synpred20_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:871:23: ( cp_expression_list )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:871:24: cp_expression_list
        {
        dbg.location(871,24);
        pushFollow(FOLLOW_cp_expression_list_in_synpred20_Css35272);
        cp_expression_list();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_Css3

    // $ANTLR start synpred21_Css3
    public final void synpred21_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:13: ( ( ws )? ( PLUS | MINUS ) )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:14: ( ws )? ( PLUS | MINUS )
        {
        dbg.location(947,14);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:14: ( ws )?
        int alt325=2;
        try { dbg.enterSubRule(325);
        try { dbg.enterDecision(325, decisionCanBacktrack[325]);

        int LA325_0 = input.LA(1);

        if ( (LA325_0==WS||(LA325_0>=NL && LA325_0<=COMMENT)) ) {
            alt325=1;
        }
        } finally {dbg.exitDecision(325);}

        switch (alt325) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:14: ws
                {
                dbg.location(947,14);
                pushFollow(FOLLOW_ws_in_synpred21_Css35875);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(325);}

        dbg.location(947,18);
        if ( input.LA(1)==PLUS||input.LA(1)==MINUS ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            dbg.recognitionException(mse);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred21_Css3

    // $ANTLR start synpred22_Css3
    public final void synpred22_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:954:13: ( ( ws )? ( STAR | SOLIDUS ) )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:954:14: ( ws )? ( STAR | SOLIDUS )
        {
        dbg.location(954,14);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:954:14: ( ws )?
        int alt326=2;
        try { dbg.enterSubRule(326);
        try { dbg.enterDecision(326, decisionCanBacktrack[326]);

        int LA326_0 = input.LA(1);

        if ( (LA326_0==WS||(LA326_0>=NL && LA326_0<=COMMENT)) ) {
            alt326=1;
        }
        } finally {dbg.exitDecision(326);}

        switch (alt326) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:954:14: ws
                {
                dbg.location(954,14);
                pushFollow(FOLLOW_ws_in_synpred22_Css35969);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(326);}

        dbg.location(954,18);
        if ( input.LA(1)==SOLIDUS||input.LA(1)==STAR ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            dbg.recognitionException(mse);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred22_Css3

    // $ANTLR start synpred23_Css3
    public final void synpred23_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1114:13: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1114:14: sass_interpolation_expression_var
        {
        dbg.location(1114,14);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred23_Css37214);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_Css3

    // $ANTLR start synpred24_Css3
    public final void synpred24_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1121:17: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1121:18: sass_interpolation_expression_var
        {
        dbg.location(1121,18);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred24_Css37353);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred24_Css3

    // $ANTLR start synpred25_Css3
    public final void synpred25_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:13: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:14: sass_interpolation_expression_var
        {
        dbg.location(1132,14);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred25_Css37501);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred25_Css3

    // $ANTLR start synpred26_Css3
    public final void synpred26_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1139:17: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1139:18: sass_interpolation_expression_var
        {
        dbg.location(1139,18);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred26_Css37619);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred26_Css3

    // $ANTLR start synpred27_Css3
    public final void synpred27_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:13: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:14: sass_interpolation_expression_var
        {
        dbg.location(1150,14);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred27_Css37743);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_Css3

    // $ANTLR start synpred28_Css3
    public final void synpred28_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1158:17: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1158:18: sass_interpolation_expression_var
        {
        dbg.location(1158,18);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred28_Css37867);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred28_Css3

    // $ANTLR start synpred29_Css3
    public final void synpred29_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1170:13: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1170:14: sass_interpolation_expression_var
        {
        dbg.location(1170,14);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred29_Css38001);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_Css3

    // $ANTLR start synpred30_Css3
    public final void synpred30_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1177:17: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1177:18: sass_interpolation_expression_var
        {
        dbg.location(1177,18);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred30_Css38131);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_Css3

    // $ANTLR start synpred31_Css3
    public final void synpred31_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:12: ( ( ws )? cp_full_expression_operator )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:13: ( ws )? cp_full_expression_operator
        {
        dbg.location(1252,13);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:13: ( ws )?
        int alt327=2;
        try { dbg.enterSubRule(327);
        try { dbg.enterDecision(327, decisionCanBacktrack[327]);

        int LA327_0 = input.LA(1);

        if ( (LA327_0==WS||(LA327_0>=NL && LA327_0<=COMMENT)) ) {
            alt327=1;
        }
        } finally {dbg.exitDecision(327);}

        switch (alt327) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:13: ws
                {
                dbg.location(1252,13);
                pushFollow(FOLLOW_ws_in_synpred31_Css38625);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(327);}

        dbg.location(1252,17);
        pushFollow(FOLLOW_cp_full_expression_operator_in_synpred31_Css38628);
        cp_full_expression_operator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_Css3

    // $ANTLR start synpred32_Css3
    public final void synpred32_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:13: ( cp_expression )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:14: cp_expression
        {
        dbg.location(1264,14);
        pushFollow(FOLLOW_cp_expression_in_synpred32_Css38757);
        cp_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_Css3

    // Delegated rules

    public final boolean synpred26_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred26_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred5_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred10_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred11_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred20_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred16_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred18_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred29_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred14_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred25_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred8_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred15_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred24_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred21_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred9_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred12_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred4_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred17_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred7_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred27_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred30_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred23_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred6_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred3_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred2_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred28_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred13_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred1_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred32_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred31_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred19_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred22_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA4 dfa4 = new DFA4(this);
    protected DFA16 dfa16 = new DFA16(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA59 dfa59 = new DFA59(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA106 dfa106 = new DFA106(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA126 dfa126 = new DFA126(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA148 dfa148 = new DFA148(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA162 dfa162 = new DFA162(this);
    protected DFA167 dfa167 = new DFA167(this);
    protected DFA170 dfa170 = new DFA170(this);
    protected DFA177 dfa177 = new DFA177(this);
    protected DFA197 dfa197 = new DFA197(this);
    protected DFA199 dfa199 = new DFA199(this);
    protected DFA204 dfa204 = new DFA204(this);
    protected DFA209 dfa209 = new DFA209(this);
    protected DFA214 dfa214 = new DFA214(this);
    protected DFA215 dfa215 = new DFA215(this);
    protected DFA233 dfa233 = new DFA233(this);
    protected DFA239 dfa239 = new DFA239(this);
    protected DFA242 dfa242 = new DFA242(this);
    protected DFA267 dfa267 = new DFA267(this);
    protected DFA271 dfa271 = new DFA271(this);
    protected DFA275 dfa275 = new DFA275(this);
    protected DFA279 dfa279 = new DFA279(this);
    protected DFA289 dfa289 = new DFA289(this);
    protected DFA296 dfa296 = new DFA296(this);
    protected DFA295 dfa295 = new DFA295(this);
    protected DFA299 dfa299 = new DFA299(this);
    protected DFA304 dfa304 = new DFA304(this);
    protected DFA317 dfa317 = new DFA317(this);
    static final String DFA4_eotS =
        "\42\uffff";
    static final String DFA4_eofS =
        "\1\2\41\uffff";
    static final String DFA4_minS =
        "\1\4\1\0\40\uffff";
    static final String DFA4_maxS =
        "\1\152\1\0\40\uffff";
    static final String DFA4_acceptS =
        "\2\uffff\1\2\36\uffff\1\1";
    static final String DFA4_specialS =
        "\1\uffff\1\0\40\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\2\1\uffff\1\2\3\uffff\1\1\2\2\5\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\1\uffff\3\2\22\uffff\1\2\1\uffff"+
            "\11\2\1\uffff\1\2\7\uffff\1\2\16\uffff\2\2\10\uffff\3\2\4\uffff"+
            "\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "321:9: ( imports )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")),""))) ) {s = 33;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 2;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA16_eotS =
        "\42\uffff";
    static final String DFA16_eofS =
        "\1\1\41\uffff";
    static final String DFA16_minS =
        "\1\4\30\uffff\1\0\10\uffff";
    static final String DFA16_maxS =
        "\1\152\30\uffff\1\0\10\uffff";
    static final String DFA16_acceptS =
        "\1\uffff\1\2\37\uffff\1\1";
    static final String DFA16_specialS =
        "\31\uffff\1\0\10\uffff}>";
    static final String[] DFA16_transitionS = {
            "\1\1\1\uffff\1\1\3\uffff\1\31\2\1\5\uffff\1\1\1\uffff\1\1\1"+
            "\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\3\1\22\uffff\1\1"+
            "\1\uffff\11\1\1\uffff\1\1\7\uffff\1\1\16\uffff\2\1\10\uffff"+
            "\3\1\4\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA16_eot = DFA.unpackEncodedString(DFA16_eotS);
    static final short[] DFA16_eof = DFA.unpackEncodedString(DFA16_eofS);
    static final char[] DFA16_min = DFA.unpackEncodedStringToUnsignedChars(DFA16_minS);
    static final char[] DFA16_max = DFA.unpackEncodedStringToUnsignedChars(DFA16_maxS);
    static final short[] DFA16_accept = DFA.unpackEncodedString(DFA16_acceptS);
    static final short[] DFA16_special = DFA.unpackEncodedString(DFA16_specialS);
    static final short[][] DFA16_transition;

    static {
        int numStates = DFA16_transitionS.length;
        DFA16_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA16_transition[i] = DFA.unpackEncodedString(DFA16_transitionS[i]);
        }
    }

    class DFA16 extends DFA {

        public DFA16(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 16;
            this.eot = DFA16_eot;
            this.eof = DFA16_eof;
            this.min = DFA16_min;
            this.max = DFA16_max;
            this.accept = DFA16_accept;
            this.special = DFA16_special;
            this.transition = DFA16_transition;
        }
        public String getDescription() {
            return "()+ loopback of 354:2: ( importItem ( ws )? )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA16_25 = input.LA(1);

                         
                        int index16_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))),""))) ) {s = 33;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 1;}

                         
                        input.seek(index16_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 16, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA26_eotS =
        "\16\uffff";
    static final String DFA26_eofS =
        "\16\uffff";
    static final String DFA26_minS =
        "\1\6\1\uffff\1\6\1\0\5\uffff\1\6\1\uffff\1\0\2\uffff";
    static final String DFA26_maxS =
        "\1\70\1\uffff\1\124\1\0\5\uffff\1\124\1\uffff\1\0\2\uffff";
    static final String DFA26_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\1\1\3\2\1\uffff\1\1\1\uffff\2\1";
    static final String DFA26_specialS =
        "\1\2\1\uffff\1\0\1\1\5\uffff\1\3\1\uffff\1\4\2\uffff}>";
    static final String[] DFA26_transitionS = {
            "\1\3\6\uffff\1\10\1\uffff\1\5\1\4\1\2\1\6\1\7\1\5\40\uffff\1"+
            "\5\1\1\2\5",
            "",
            "\1\13\6\uffff\1\14\1\uffff\1\15\1\uffff\1\15\1\6\1\uffff\1"+
            "\15\2\uffff\1\11\35\uffff\1\15\1\12\2\15\32\uffff\2\11",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\13\6\uffff\1\14\1\uffff\1\15\1\uffff\1\15\1\6\1\uffff\1"+
            "\15\2\uffff\1\11\35\uffff\1\15\1\12\2\15\32\uffff\2\11",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "367:9: ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_mq_interpolation_expression ( ws )? | ( mediaQueryList )=> mediaQueryList )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_2 = input.LA(1);

                         
                        int index26_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_2==WS||(LA26_2>=NL && LA26_2<=COMMENT)) ) {s = 9;}

                        else if ( (LA26_2==HASH_SYMBOL) && (synpred1_Css3())) {s = 10;}

                        else if ( (LA26_2==IDENT) ) {s = 11;}

                        else if ( (LA26_2==LBRACE) && (synpred1_Css3())) {s = 12;}

                        else if ( (LA26_2==AND||LA26_2==NOT||LA26_2==COLON||LA26_2==MINUS||(LA26_2>=HASH && LA26_2<=DOT)) && (synpred1_Css3())) {s = 13;}

                        else if ( (LA26_2==GEN) && (synpred2_Css3())) {s = 6;}

                         
                        input.seek(index26_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA26_3 = input.LA(1);

                         
                        int index26_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Css3()) ) {s = 13;}

                        else if ( (synpred2_Css3()) ) {s = 8;}

                         
                        input.seek(index26_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA26_0 = input.LA(1);

                         
                        int index26_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_0==HASH_SYMBOL) && (synpred1_Css3())) {s = 1;}

                        else if ( (LA26_0==NOT) ) {s = 2;}

                        else if ( (LA26_0==IDENT) ) {s = 3;}

                        else if ( (LA26_0==ONLY) && (synpred2_Css3())) {s = 4;}

                        else if ( (LA26_0==AND||LA26_0==COLON||LA26_0==MINUS||(LA26_0>=HASH && LA26_0<=DOT)) && (synpred1_Css3())) {s = 5;}

                        else if ( (LA26_0==GEN) && (synpred2_Css3())) {s = 6;}

                        else if ( (LA26_0==LPAREN) && (synpred2_Css3())) {s = 7;}

                        else if ( (LA26_0==LBRACE) && (synpred2_Css3())) {s = 8;}

                         
                        input.seek(index26_0);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA26_9 = input.LA(1);

                         
                        int index26_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_9==HASH_SYMBOL) && (synpred1_Css3())) {s = 10;}

                        else if ( (LA26_9==IDENT) ) {s = 11;}

                        else if ( (LA26_9==WS||(LA26_9>=NL && LA26_9<=COMMENT)) ) {s = 9;}

                        else if ( (LA26_9==LBRACE) && (synpred1_Css3())) {s = 12;}

                        else if ( (LA26_9==AND||LA26_9==NOT||LA26_9==COLON||LA26_9==MINUS||(LA26_9>=HASH && LA26_9<=DOT)) && (synpred1_Css3())) {s = 13;}

                        else if ( (LA26_9==GEN) && (synpred2_Css3())) {s = 6;}

                         
                        input.seek(index26_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA26_11 = input.LA(1);

                         
                        int index26_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Css3()) ) {s = 13;}

                        else if ( (synpred2_Css3()) ) {s = 8;}

                         
                        input.seek(index26_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA38_eotS =
        "\40\uffff";
    static final String DFA38_eofS =
        "\40\uffff";
    static final String DFA38_minS =
        "\1\6\1\uffff\6\0\10\uffff\1\0\5\uffff\1\0\7\uffff\1\0\1\uffff";
    static final String DFA38_maxS =
        "\1\154\1\uffff\6\0\10\uffff\1\0\5\uffff\1\0\7\uffff\1\0\1\uffff";
    static final String DFA38_acceptS =
        "\1\uffff\1\13\6\uffff\1\1\1\2\1\3\1\4\3\uffff\1\5\1\uffff\1\6\10"+
        "\uffff\1\7\1\10\1\11\2\uffff\1\12";
    static final String DFA38_specialS =
        "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\10\uffff\1\7\5\uffff\1\10\7"+
        "\uffff\1\11\1\uffff}>";
    static final String[] DFA38_transitionS = {
            "\1\4\4\uffff\1\21\1\36\1\uffff\1\1\3\uffff\1\6\1\uffff\1\21"+
            "\1\uffff\1\7\1\uffff\1\34\3\uffff\1\34\1\uffff\1\32\1\uffff"+
            "\1\33\22\uffff\1\21\1\uffff\1\26\1\3\1\20\1\5\3\21\1\2\1\21"+
            "\1\uffff\1\21\7\uffff\1\10\16\uffff\1\21\7\uffff\1\11\1\uffff"+
            "\2\12\1\13\4\uffff\3\13\2\uffff\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA38_eot = DFA.unpackEncodedString(DFA38_eotS);
    static final short[] DFA38_eof = DFA.unpackEncodedString(DFA38_eofS);
    static final char[] DFA38_min = DFA.unpackEncodedStringToUnsignedChars(DFA38_minS);
    static final char[] DFA38_max = DFA.unpackEncodedStringToUnsignedChars(DFA38_maxS);
    static final short[] DFA38_accept = DFA.unpackEncodedString(DFA38_acceptS);
    static final short[] DFA38_special = DFA.unpackEncodedString(DFA38_specialS);
    static final short[][] DFA38_transition;

    static {
        int numStates = DFA38_transitionS.length;
        DFA38_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA38_transition[i] = DFA.unpackEncodedString(DFA38_transitionS[i]);
        }
    }

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = DFA38_eot;
            this.eof = DFA38_eof;
            this.min = DFA38_min;
            this.max = DFA38_max;
            this.accept = DFA38_accept;
            this.special = DFA38_special;
            this.transition = DFA38_transition;
        }
        public String getDescription() {
            return "()* loopback of 374:13: ( ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI | sass_declaration_interpolation_expression COLON )=> declaration SEMI ( ws )? | {...}? sass_extend ( ws )? | {...}? sass_debug ( ws )? | {...}? sass_control ( ws )? | {...}? sass_content ( ws )? | rule ( ws )? | page ( ws )? | fontFace ( ws )? | vendorAtRule ( ws )? | media ( ws )? )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA38_0 = input.LA(1);

                         
                        int index38_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA38_0==RBRACE) ) {s = 1;}

                        else if ( (LA38_0==STAR) ) {s = 2;}

                        else if ( (LA38_0==HASH_SYMBOL) ) {s = 3;}

                        else if ( (LA38_0==IDENT) ) {s = 4;}

                        else if ( (LA38_0==DOT) ) {s = 5;}

                        else if ( (LA38_0==GEN) ) {s = 6;}

                        else if ( (LA38_0==AT_IDENT) ) {s = 7;}

                        else if ( (LA38_0==SASS_VAR) && (synpred3_Css3())) {s = 8;}

                        else if ( (LA38_0==SASS_EXTEND) ) {s = 9;}

                        else if ( ((LA38_0>=SASS_DEBUG && LA38_0<=SASS_WARN)) ) {s = 10;}

                        else if ( (LA38_0==SASS_IF||(LA38_0>=SASS_FOR && LA38_0<=SASS_WHILE)) ) {s = 11;}

                        else if ( (LA38_0==SASS_CONTENT) ) {s = 15;}

                        else if ( (LA38_0==HASH) ) {s = 16;}

                        else if ( (LA38_0==COMMA||LA38_0==COLON||LA38_0==GREATER||(LA38_0>=LBRACKET && LA38_0<=SASS_EXTEND_ONLY_SELECTOR)||LA38_0==PIPE||LA38_0==LESS_AND||LA38_0==SASS_MIXIN) ) {s = 17;}

                        else if ( (LA38_0==MINUS) ) {s = 22;}

                        else if ( (LA38_0==PAGE_SYM) ) {s = 26;}

                        else if ( (LA38_0==FONT_FACE_SYM) ) {s = 27;}

                        else if ( (LA38_0==MOZ_DOCUMENT_SYM||LA38_0==WEBKIT_KEYFRAMES_SYM) ) {s = 28;}

                        else if ( (LA38_0==MEDIA_SYM) ) {s = 30;}

                         
                        input.seek(index38_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA38_2 = input.LA(1);

                         
                        int index38_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred3_Css3()||(synpred3_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 8;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index38_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA38_3 = input.LA(1);

                         
                        int index38_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred3_Css3()||(synpred3_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 8;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index38_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA38_4 = input.LA(1);

                         
                        int index38_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred3_Css3()||(synpred3_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 8;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index38_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA38_5 = input.LA(1);

                         
                        int index38_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred3_Css3()||(synpred3_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 8;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index38_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA38_6 = input.LA(1);

                         
                        int index38_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred3_Css3()||(synpred3_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 8;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index38_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA38_7 = input.LA(1);

                         
                        int index38_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred3_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred3_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 8;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index38_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA38_16 = input.LA(1);

                         
                        int index38_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred3_Css3()||(synpred3_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 8;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index38_16);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA38_22 = input.LA(1);

                         
                        int index38_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred3_Css3()||(synpred3_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 8;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index38_22);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA38_30 = input.LA(1);

                         
                        int index38_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred3_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred3_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 8;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index38_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 38, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA59_eotS =
        "\40\uffff";
    static final String DFA59_eofS =
        "\40\uffff";
    static final String DFA59_minS =
        "\1\6\1\0\16\uffff\1\0\5\uffff\1\0\11\uffff";
    static final String DFA59_maxS =
        "\1\152\1\0\16\uffff\1\0\5\uffff\1\0\11\uffff";
    static final String DFA59_acceptS =
        "\2\uffff\1\1\1\2\15\uffff\1\4\1\5\1\6\1\7\2\uffff\1\10\1\11\1\12"+
        "\1\13\3\uffff\1\14\1\3";
    static final String DFA59_specialS =
        "\1\0\1\1\16\uffff\1\2\5\uffff\1\3\11\uffff}>";
    static final String[] DFA59_transitionS = {
            "\1\3\3\uffff\1\30\1\3\1\20\5\uffff\1\3\1\uffff\1\3\1\uffff\1"+
            "\26\1\uffff\1\24\3\uffff\1\24\1\uffff\1\21\1\22\1\23\22\uffff"+
            "\1\3\1\uffff\3\3\1\1\5\3\1\uffff\1\3\7\uffff\1\27\16\uffff\1"+
            "\3\1\2\10\uffff\2\31\1\32\4\uffff\3\32\1\36",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA59_eot = DFA.unpackEncodedString(DFA59_eotS);
    static final short[] DFA59_eof = DFA.unpackEncodedString(DFA59_eofS);
    static final char[] DFA59_min = DFA.unpackEncodedStringToUnsignedChars(DFA59_minS);
    static final char[] DFA59_max = DFA.unpackEncodedStringToUnsignedChars(DFA59_maxS);
    static final short[] DFA59_accept = DFA.unpackEncodedString(DFA59_acceptS);
    static final short[] DFA59_special = DFA.unpackEncodedString(DFA59_specialS);
    static final short[][] DFA59_transition;

    static {
        int numStates = DFA59_transitionS.length;
        DFA59_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA59_transition[i] = DFA.unpackEncodedString(DFA59_transitionS[i]);
        }
    }

    class DFA59 extends DFA {

        public DFA59(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 59;
            this.eot = DFA59_eot;
            this.eof = DFA59_eof;
            this.min = DFA59_min;
            this.max = DFA59_max;
            this.accept = DFA59_accept;
            this.special = DFA59_special;
            this.transition = DFA59_transition;
        }
        public String getDescription() {
            return "425:1: bodyItem : ( ( cp_mixin_call )=> cp_mixin_call | rule | media | page | counterStyle | fontFace | vendorAtRule | {...}? cp_variable_declaration | {...}? importItem | {...}? sass_debug | {...}? sass_control | {...}? sass_function_declaration );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA59_0 = input.LA(1);

                         
                        int index59_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA59_0==DOT) ) {s = 1;}

                        else if ( (LA59_0==SASS_INCLUDE) && (synpred4_Css3())) {s = 2;}

                        else if ( (LA59_0==IDENT||LA59_0==COMMA||LA59_0==GEN||LA59_0==COLON||LA59_0==GREATER||(LA59_0>=MINUS && LA59_0<=HASH)||(LA59_0>=LBRACKET && LA59_0<=PIPE)||LA59_0==LESS_AND||LA59_0==SASS_MIXIN) ) {s = 3;}

                        else if ( (LA59_0==MEDIA_SYM) ) {s = 16;}

                        else if ( (LA59_0==PAGE_SYM) ) {s = 17;}

                        else if ( (LA59_0==COUNTER_STYLE_SYM) ) {s = 18;}

                        else if ( (LA59_0==FONT_FACE_SYM) ) {s = 19;}

                        else if ( (LA59_0==MOZ_DOCUMENT_SYM||LA59_0==WEBKIT_KEYFRAMES_SYM) ) {s = 20;}

                        else if ( (LA59_0==AT_IDENT) ) {s = 22;}

                        else if ( (LA59_0==SASS_VAR) ) {s = 23;}

                        else if ( (LA59_0==IMPORT_SYM) ) {s = 24;}

                        else if ( ((LA59_0>=SASS_DEBUG && LA59_0<=SASS_WARN)) ) {s = 25;}

                        else if ( (LA59_0==SASS_IF||(LA59_0>=SASS_FOR && LA59_0<=SASS_WHILE)) ) {s = 26;}

                        else if ( (LA59_0==SASS_FUNCTION) ) {s = 30;}

                         
                        input.seek(index59_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA59_1 = input.LA(1);

                         
                        int index59_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred4_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index59_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA59_16 = input.LA(1);

                         
                        int index59_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate((((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))),""))) ) {s = 31;}

                        else if ( ((((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 23;}

                         
                        input.seek(index59_16);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA59_22 = input.LA(1);

                         
                        int index59_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate((((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))),""))) ) {s = 20;}

                        else if ( ((((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 23;}

                         
                        input.seek(index59_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 59, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA80_eotS =
        "\4\uffff";
    static final String DFA80_eofS =
        "\4\uffff";
    static final String DFA80_minS =
        "\2\13\2\uffff";
    static final String DFA80_maxS =
        "\2\124\2\uffff";
    static final String DFA80_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA80_specialS =
        "\4\uffff}>";
    static final String[] DFA80_transitionS = {
            "\1\3\1\uffff\1\2\11\uffff\1\1\73\uffff\2\1",
            "\1\3\1\uffff\1\2\11\uffff\1\1\73\uffff\2\1",
            "",
            ""
    };

    static final short[] DFA80_eot = DFA.unpackEncodedString(DFA80_eotS);
    static final short[] DFA80_eof = DFA.unpackEncodedString(DFA80_eofS);
    static final char[] DFA80_min = DFA.unpackEncodedStringToUnsignedChars(DFA80_minS);
    static final char[] DFA80_max = DFA.unpackEncodedStringToUnsignedChars(DFA80_maxS);
    static final short[] DFA80_accept = DFA.unpackEncodedString(DFA80_acceptS);
    static final short[] DFA80_special = DFA.unpackEncodedString(DFA80_specialS);
    static final short[][] DFA80_transition;

    static {
        int numStates = DFA80_transitionS.length;
        DFA80_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA80_transition[i] = DFA.unpackEncodedString(DFA80_transitionS[i]);
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = DFA80_eot;
            this.eof = DFA80_eof;
            this.min = DFA80_min;
            this.max = DFA80_max;
            this.accept = DFA80_accept;
            this.special = DFA80_special;
            this.transition = DFA80_transition;
        }
        public String getDescription() {
            return "()* loopback of 493:25: ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA106_eotS =
        "\7\uffff";
    static final String DFA106_eofS =
        "\7\uffff";
    static final String DFA106_minS =
        "\2\6\2\uffff\2\6\1\uffff";
    static final String DFA106_maxS =
        "\1\126\1\124\2\uffff\2\124\1\uffff";
    static final String DFA106_acceptS =
        "\2\uffff\1\1\1\2\2\uffff\1\1";
    static final String DFA106_specialS =
        "\1\1\3\uffff\1\2\1\0\1\uffff}>";
    static final String[] DFA106_transitionS = {
            "\1\3\4\uffff\1\3\6\uffff\1\3\1\uffff\1\3\36\uffff\1\3\1\uffff"+
            "\3\3\1\1\5\3\1\uffff\1\3\26\uffff\1\2",
            "\1\4\4\uffff\1\3\1\uffff\1\3\4\uffff\1\3\1\uffff\1\3\2\uffff"+
            "\1\3\33\uffff\1\3\1\uffff\4\3\3\uffff\1\3\2\uffff\1\3\23\uffff"+
            "\2\3",
            "",
            "",
            "\1\3\4\uffff\1\3\1\uffff\1\3\4\uffff\1\3\1\6\1\3\2\uffff\1"+
            "\5\32\uffff\14\3\1\uffff\1\3\23\uffff\2\5",
            "\1\3\4\uffff\1\3\1\uffff\1\3\4\uffff\1\3\1\6\1\3\2\uffff\1"+
            "\5\32\uffff\14\3\1\uffff\1\3\23\uffff\2\5",
            ""
    };

    static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_eotS);
    static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_eofS);
    static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_minS);
    static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_maxS);
    static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_acceptS);
    static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_specialS);
    static final short[][] DFA106_transition;

    static {
        int numStates = DFA106_transitionS.length;
        DFA106_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA106_transition[i] = DFA.unpackEncodedString(DFA106_transitionS[i]);
        }
    }

    class DFA106 extends DFA {

        public DFA106(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = DFA106_eot;
            this.eof = DFA106_eof;
            this.min = DFA106_min;
            this.max = DFA106_max;
            this.accept = DFA106_accept;
            this.special = DFA106_special;
            this.transition = DFA106_transition;
        }
        public String getDescription() {
            return "581:9: ( ( cp_mixin_declaration )=> cp_mixin_declaration | selectorsGroup )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA106_5 = input.LA(1);

                         
                        int index106_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA106_5==IDENT||LA106_5==COMMA||LA106_5==LBRACE||LA106_5==GEN||LA106_5==COLON||(LA106_5>=PLUS && LA106_5<=PIPE)||LA106_5==LESS_AND) ) {s = 3;}

                        else if ( (LA106_5==WS||(LA106_5>=NL && LA106_5<=COMMENT)) ) {s = 5;}

                        else if ( (LA106_5==LPAREN) && (synpred6_Css3())) {s = 6;}

                         
                        input.seek(index106_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA106_0 = input.LA(1);

                         
                        int index106_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA106_0==DOT) ) {s = 1;}

                        else if ( (LA106_0==SASS_MIXIN) && (synpred6_Css3())) {s = 2;}

                        else if ( (LA106_0==IDENT||LA106_0==COMMA||LA106_0==GEN||LA106_0==COLON||LA106_0==GREATER||(LA106_0>=MINUS && LA106_0<=HASH)||(LA106_0>=LBRACKET && LA106_0<=PIPE)||LA106_0==LESS_AND) ) {s = 3;}

                         
                        input.seek(index106_0);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA106_4 = input.LA(1);

                         
                        int index106_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA106_4==WS||(LA106_4>=NL && LA106_4<=COMMENT)) ) {s = 5;}

                        else if ( (LA106_4==IDENT||LA106_4==COMMA||LA106_4==LBRACE||LA106_4==GEN||LA106_4==COLON||(LA106_4>=PLUS && LA106_4<=PIPE)||LA106_4==LESS_AND) ) {s = 3;}

                        else if ( (LA106_4==LPAREN) && (synpred6_Css3())) {s = 6;}

                         
                        input.seek(index106_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 106, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA121_eotS =
        "\44\uffff";
    static final String DFA121_eofS =
        "\44\uffff";
    static final String DFA121_minS =
        "\1\5\7\0\1\uffff\1\0\5\uffff\1\0\11\uffff\1\0\12\uffff";
    static final String DFA121_maxS =
        "\1\154\7\0\1\uffff\1\0\5\uffff\1\0\11\uffff\1\0\12\uffff";
    static final String DFA121_acceptS =
        "\10\uffff\1\17\1\uffff\5\5\1\uffff\3\5\1\6\1\7\1\10\4\uffff\1\12"+
        "\1\13\1\14\1\15\1\16\1\2\1\3\1\4\1\1\1\11";
    static final String DFA121_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\uffff\1\10\5\uffff\1\11\11\uffff"+
        "\1\12\12\uffff}>";
    static final String[] DFA121_transitionS = {
            "\1\36\1\3\3\uffff\1\35\1\21\1\6\1\uffff\1\10\3\uffff\1\5\1\uffff"+
            "\1\15\1\uffff\1\31\34\uffff\1\21\1\uffff\1\17\1\2\1\11\1\4\1"+
            "\20\1\22\1\16\1\1\1\14\1\uffff\1\13\7\uffff\1\7\16\uffff\1\12"+
            "\1\32\6\uffff\1\23\1\uffff\2\24\1\25\4\uffff\3\25\1\uffff\1"+
            "\34\1\33",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA121_eot = DFA.unpackEncodedString(DFA121_eotS);
    static final short[] DFA121_eof = DFA.unpackEncodedString(DFA121_eofS);
    static final char[] DFA121_min = DFA.unpackEncodedStringToUnsignedChars(DFA121_minS);
    static final char[] DFA121_max = DFA.unpackEncodedStringToUnsignedChars(DFA121_maxS);
    static final short[] DFA121_accept = DFA.unpackEncodedString(DFA121_acceptS);
    static final short[] DFA121_special = DFA.unpackEncodedString(DFA121_specialS);
    static final short[][] DFA121_transition;

    static {
        int numStates = DFA121_transitionS.length;
        DFA121_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA121_transition[i] = DFA.unpackEncodedString(DFA121_transitionS[i]);
        }
    }

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = DFA121_eot;
            this.eof = DFA121_eof;
            this.min = DFA121_min;
            this.max = DFA121_max;
            this.accept = DFA121_accept;
            this.special = DFA121_special;
            this.transition = DFA121_transition;
        }
        public String getDescription() {
            return "()* loopback of 602:13: ( ( cp_variable_declaration )=> cp_variable_declaration ( ws )? | ( declaration SEMI )=> declaration SEMI ( ws )? | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )* COLON (~ ( SEMI | LBRACE | RBRACE ) )* SEMI )=> declaration SEMI ( ws )? | ( sass_nested_properties )=> sass_nested_properties ( ws )? | ( rule )=> rule ( ws )? | {...}? sass_extend ( ws )? | {...}? sass_debug ( ws )? | {...}? sass_control ( ws )? | {...}? media ( ws )? | {...}? cp_mixin_call ( ws )? | {...}? sass_content ( ws )? | {...}? sass_function_return ( ws )? | {...}? importItem ( ws )? | ( (~ SEMI )* SEMI )=> syncTo_SEMI )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA121_0 = input.LA(1);

                         
                        int index121_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA121_0==STAR) ) {s = 1;}

                        else if ( (LA121_0==HASH_SYMBOL) ) {s = 2;}

                        else if ( (LA121_0==IDENT) ) {s = 3;}

                        else if ( (LA121_0==DOT) ) {s = 4;}

                        else if ( (LA121_0==GEN) ) {s = 5;}

                        else if ( (LA121_0==MEDIA_SYM) ) {s = 6;}

                        else if ( (LA121_0==SASS_VAR) ) {s = 7;}

                        else if ( (LA121_0==RBRACE) ) {s = 8;}

                        else if ( (LA121_0==HASH) ) {s = 9;}

                        else if ( (LA121_0==SASS_MIXIN) && (synpred11_Css3())) {s = 10;}

                        else if ( (LA121_0==LESS_AND) && (synpred11_Css3())) {s = 11;}

                        else if ( (LA121_0==PIPE) && (synpred11_Css3())) {s = 12;}

                        else if ( (LA121_0==COLON) && (synpred11_Css3())) {s = 13;}

                        else if ( (LA121_0==SASS_EXTEND_ONLY_SELECTOR) && (synpred11_Css3())) {s = 14;}

                        else if ( (LA121_0==MINUS) ) {s = 15;}

                        else if ( (LA121_0==LBRACKET) && (synpred11_Css3())) {s = 16;}

                        else if ( (LA121_0==COMMA||LA121_0==GREATER) && (synpred11_Css3())) {s = 17;}

                        else if ( (LA121_0==DCOLON) && (synpred11_Css3())) {s = 18;}

                        else if ( (LA121_0==SASS_EXTEND) ) {s = 19;}

                        else if ( ((LA121_0>=SASS_DEBUG && LA121_0<=SASS_WARN)) ) {s = 20;}

                        else if ( (LA121_0==SASS_IF||(LA121_0>=SASS_FOR && LA121_0<=SASS_WHILE)) ) {s = 21;}

                        else if ( (LA121_0==AT_IDENT) ) {s = 25;}

                        else if ( (LA121_0==SASS_INCLUDE) ) {s = 26;}

                        else if ( (LA121_0==SASS_CONTENT) ) {s = 27;}

                        else if ( (LA121_0==SASS_RETURN) ) {s = 28;}

                        else if ( (LA121_0==IMPORT_SYM) ) {s = 29;}

                        else if ( (LA121_0==SEMI) && (synpred12_Css3())) {s = 30;}

                         
                        input.seek(index121_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA121_1 = input.LA(1);

                         
                        int index121_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred8_Css3())) ) {s = 31;}

                        else if ( ((synpred9_Css3()||(synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 32;}

                        else if ( (synpred11_Css3()) ) {s = 18;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index121_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA121_2 = input.LA(1);

                         
                        int index121_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred8_Css3())) ) {s = 31;}

                        else if ( ((synpred9_Css3()||(synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 32;}

                        else if ( (synpred10_Css3()) ) {s = 33;}

                        else if ( (synpred11_Css3()) ) {s = 18;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index121_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA121_3 = input.LA(1);

                         
                        int index121_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred8_Css3())) ) {s = 31;}

                        else if ( ((synpred9_Css3()||(synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 32;}

                        else if ( (synpred10_Css3()) ) {s = 33;}

                        else if ( (synpred11_Css3()) ) {s = 18;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index121_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA121_4 = input.LA(1);

                         
                        int index121_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred8_Css3())) ) {s = 31;}

                        else if ( ((synpred9_Css3()||(synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 32;}

                        else if ( (synpred10_Css3()) ) {s = 33;}

                        else if ( ((synpred11_Css3()||(synpred11_Css3()&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 18;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 26;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index121_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA121_5 = input.LA(1);

                         
                        int index121_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred8_Css3())) ) {s = 31;}

                        else if ( ((synpred9_Css3()||(synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 32;}

                        else if ( (synpred10_Css3()) ) {s = 33;}

                        else if ( (synpred11_Css3()) ) {s = 18;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index121_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA121_6 = input.LA(1);

                         
                        int index121_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred7_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred7_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 34;}

                        else if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 31;}

                        else if ( (((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 32;}

                        else if ( (((synpred10_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 33;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 35;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 8;}

                         
                        input.seek(index121_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA121_7 = input.LA(1);

                         
                        int index121_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred7_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((synpred7_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 34;}

                        else if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 31;}

                        else if ( (((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 32;}

                        else if ( (((synpred10_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 33;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 8;}

                         
                        input.seek(index121_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA121_9 = input.LA(1);

                         
                        int index121_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred8_Css3())) ) {s = 31;}

                        else if ( ((synpred9_Css3()||(synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 32;}

                        else if ( (synpred10_Css3()) ) {s = 33;}

                        else if ( (synpred11_Css3()) ) {s = 18;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index121_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA121_15 = input.LA(1);

                         
                        int index121_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred8_Css3())) ) {s = 31;}

                        else if ( ((synpred9_Css3()||(synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 32;}

                        else if ( (synpred10_Css3()) ) {s = 33;}

                        else if ( (synpred11_Css3()) ) {s = 18;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index121_15);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA121_25 = input.LA(1);

                         
                        int index121_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred7_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred7_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 34;}

                        else if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 31;}

                        else if ( (((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 32;}

                        else if ( (((synpred10_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 33;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 8;}

                         
                        input.seek(index121_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 121, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA126_eotS =
        "\21\uffff";
    static final String DFA126_eofS =
        "\21\uffff";
    static final String DFA126_minS =
        "\2\6\3\0\1\uffff\1\0\2\6\5\uffff\1\0\1\uffff\1\0";
    static final String DFA126_maxS =
        "\1\77\1\124\3\0\1\uffff\1\0\2\124\5\uffff\1\0\1\uffff\1\0";
    static final String DFA126_acceptS =
        "\5\uffff\1\2\3\uffff\5\1\1\uffff\1\1\1\uffff";
    static final String DFA126_specialS =
        "\1\6\1\10\1\5\1\3\1\1\1\uffff\1\7\1\2\1\11\5\uffff\1\0\1\uffff\1"+
        "\4}>";
    static final String[] DFA126_transitionS = {
            "\1\2\4\uffff\1\11\6\uffff\1\5\1\uffff\1\10\36\uffff\1\11\1\uffff"+
            "\1\11\1\1\1\6\1\7\3\5\1\3\1\5\1\uffff\1\4",
            "\1\15\4\uffff\1\15\1\uffff\1\12\6\uffff\1\15\2\uffff\1\13\33"+
            "\uffff\1\15\1\uffff\1\15\1\14\2\15\3\uffff\1\15\1\uffff\1\5"+
            "\1\15\23\uffff\2\13",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\16\4\uffff\1\15\1\uffff\1\17\4\uffff\1\5\1\uffff\1\15\2"+
            "\uffff\1\13\33\uffff\1\15\1\uffff\1\15\1\14\2\15\3\uffff\1\15"+
            "\2\uffff\1\15\23\uffff\2\13",
            "\1\20\4\uffff\1\15\1\uffff\1\17\3\uffff\2\5\1\uffff\1\15\2"+
            "\uffff\1\13\33\uffff\1\15\1\uffff\1\15\1\14\2\15\3\uffff\1\15"+
            "\2\uffff\1\15\23\uffff\2\13",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff"
    };

    static final short[] DFA126_eot = DFA.unpackEncodedString(DFA126_eotS);
    static final short[] DFA126_eof = DFA.unpackEncodedString(DFA126_eofS);
    static final char[] DFA126_min = DFA.unpackEncodedStringToUnsignedChars(DFA126_minS);
    static final char[] DFA126_max = DFA.unpackEncodedStringToUnsignedChars(DFA126_maxS);
    static final short[] DFA126_accept = DFA.unpackEncodedString(DFA126_acceptS);
    static final short[] DFA126_special = DFA.unpackEncodedString(DFA126_specialS);
    static final short[][] DFA126_transition;

    static {
        int numStates = DFA126_transitionS.length;
        DFA126_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA126_transition[i] = DFA.unpackEncodedString(DFA126_transitionS[i]);
        }
    }

    class DFA126 extends DFA {

        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = DFA126_eot;
            this.eof = DFA126_eof;
            this.min = DFA126_min;
            this.max = DFA126_max;
            this.accept = DFA126_accept;
            this.special = DFA126_special;
            this.transition = DFA126_transition;
        }
        public String getDescription() {
            return "640:1: selectorsGroup : ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression ( ws )? | selector ( COMMA ( ws )? selector )* );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA126_14 = input.LA(1);

                         
                        int index126_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Css3()) ) {s = 15;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index126_14);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA126_4 = input.LA(1);

                         
                        int index126_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Css3()) ) {s = 13;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index126_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA126_7 = input.LA(1);

                         
                        int index126_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_7==IDENT) ) {s = 14;}

                        else if ( (LA126_7==WS||(LA126_7>=NL && LA126_7<=COMMENT)) && (synpred13_Css3())) {s = 11;}

                        else if ( (LA126_7==HASH_SYMBOL) && (synpred13_Css3())) {s = 12;}

                        else if ( (LA126_7==GEN) ) {s = 5;}

                        else if ( (LA126_7==COMMA||LA126_7==COLON||LA126_7==GREATER||LA126_7==MINUS||(LA126_7>=HASH && LA126_7<=DOT)||LA126_7==STAR||LA126_7==LESS_AND) && (synpred13_Css3())) {s = 13;}

                        else if ( (LA126_7==LBRACE) && (synpred13_Css3())) {s = 15;}

                         
                        input.seek(index126_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA126_3 = input.LA(1);

                         
                        int index126_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Css3()) ) {s = 13;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index126_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA126_16 = input.LA(1);

                         
                        int index126_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Css3()) ) {s = 15;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index126_16);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA126_2 = input.LA(1);

                         
                        int index126_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Css3()) ) {s = 13;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index126_2);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA126_0 = input.LA(1);

                         
                        int index126_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_0==HASH_SYMBOL) ) {s = 1;}

                        else if ( (LA126_0==IDENT) ) {s = 2;}

                        else if ( (LA126_0==STAR) ) {s = 3;}

                        else if ( (LA126_0==LESS_AND) ) {s = 4;}

                        else if ( (LA126_0==GEN||(LA126_0>=LBRACKET && LA126_0<=SASS_EXTEND_ONLY_SELECTOR)||LA126_0==PIPE) ) {s = 5;}

                        else if ( (LA126_0==HASH) ) {s = 6;}

                        else if ( (LA126_0==DOT) ) {s = 7;}

                        else if ( (LA126_0==COLON) ) {s = 8;}

                        else if ( (LA126_0==COMMA||LA126_0==GREATER||LA126_0==MINUS) && (synpred13_Css3())) {s = 9;}

                         
                        input.seek(index126_0);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA126_6 = input.LA(1);

                         
                        int index126_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Css3()) ) {s = 13;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index126_6);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA126_1 = input.LA(1);

                         
                        int index126_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_1==LBRACE) && (synpred13_Css3())) {s = 10;}

                        else if ( (LA126_1==NAME) ) {s = 5;}

                        else if ( (LA126_1==WS||(LA126_1>=NL && LA126_1<=COMMENT)) && (synpred13_Css3())) {s = 11;}

                        else if ( (LA126_1==HASH_SYMBOL) && (synpred13_Css3())) {s = 12;}

                        else if ( (LA126_1==IDENT||LA126_1==COMMA||LA126_1==COLON||LA126_1==GREATER||LA126_1==MINUS||(LA126_1>=HASH && LA126_1<=DOT)||LA126_1==STAR||LA126_1==LESS_AND) && (synpred13_Css3())) {s = 13;}

                         
                        input.seek(index126_1);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA126_8 = input.LA(1);

                         
                        int index126_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_8==WS||(LA126_8>=NL && LA126_8<=COMMENT)) && (synpred13_Css3())) {s = 11;}

                        else if ( (LA126_8==HASH_SYMBOL) && (synpred13_Css3())) {s = 12;}

                        else if ( (LA126_8==IDENT) ) {s = 16;}

                        else if ( (LA126_8==LBRACE) && (synpred13_Css3())) {s = 15;}

                        else if ( (LA126_8==COMMA||LA126_8==COLON||LA126_8==GREATER||LA126_8==MINUS||(LA126_8>=HASH && LA126_8<=DOT)||LA126_8==STAR||LA126_8==LESS_AND) && (synpred13_Css3())) {s = 13;}

                        else if ( ((LA126_8>=NOT && LA126_8<=GEN)) ) {s = 5;}

                         
                        input.seek(index126_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 126, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA129_eotS =
        "\24\uffff";
    static final String DFA129_eofS =
        "\24\uffff";
    static final String DFA129_minS =
        "\1\5\7\uffff\6\0\6\uffff";
    static final String DFA129_maxS =
        "\1\137\7\uffff\6\0\6\uffff";
    static final String DFA129_acceptS =
        "\1\uffff\1\2\21\uffff\1\1";
    static final String DFA129_specialS =
        "\10\uffff\1\0\1\1\1\2\1\3\1\4\1\5\6\uffff}>";
    static final String[] DFA129_transitionS = {
            "\2\1\4\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\15\1\1\34"+
            "\uffff\3\1\1\uffff\1\12\1\11\1\13\1\14\1\15\1\10\2\1\1\uffff"+
            "\1\1\37\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA129_eot = DFA.unpackEncodedString(DFA129_eotS);
    static final short[] DFA129_eof = DFA.unpackEncodedString(DFA129_eofS);
    static final char[] DFA129_min = DFA.unpackEncodedStringToUnsignedChars(DFA129_minS);
    static final char[] DFA129_max = DFA.unpackEncodedStringToUnsignedChars(DFA129_maxS);
    static final short[] DFA129_accept = DFA.unpackEncodedString(DFA129_acceptS);
    static final short[] DFA129_special = DFA.unpackEncodedString(DFA129_specialS);
    static final short[][] DFA129_transition;

    static {
        int numStates = DFA129_transitionS.length;
        DFA129_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA129_transition[i] = DFA.unpackEncodedString(DFA129_transitionS[i]);
        }
    }

    class DFA129 extends DFA {

        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = DFA129_eot;
            this.eof = DFA129_eof;
            this.min = DFA129_min;
            this.max = DFA129_max;
            this.accept = DFA129_accept;
            this.special = DFA129_special;
            this.transition = DFA129_transition;
        }
        public String getDescription() {
            return "()* loopback of 656:17: ( ( esPred )=> elementSubsequent ( ws )? )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA129_8 = input.LA(1);

                         
                        int index129_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred14_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 19;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 1;}

                         
                        input.seek(index129_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA129_9 = input.LA(1);

                         
                        int index129_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index129_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA129_10 = input.LA(1);

                         
                        int index129_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index129_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA129_11 = input.LA(1);

                         
                        int index129_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index129_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA129_12 = input.LA(1);

                         
                        int index129_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index129_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA129_13 = input.LA(1);

                         
                        int index129_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index129_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 129, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA148_eotS =
        "\4\uffff";
    static final String DFA148_eofS =
        "\4\uffff";
    static final String DFA148_minS =
        "\2\5\2\uffff";
    static final String DFA148_maxS =
        "\2\137\2\uffff";
    static final String DFA148_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA148_specialS =
        "\4\uffff}>";
    static final String[] DFA148_transitionS = {
            "\2\3\4\uffff\1\3\1\uffff\1\3\4\uffff\1\3\1\2\2\3\1\uffff\1\1"+
            "\32\uffff\3\3\1\uffff\10\3\1\uffff\1\3\23\uffff\2\1\12\uffff"+
            "\1\3",
            "\2\3\4\uffff\1\3\1\uffff\1\3\4\uffff\1\3\1\2\2\3\1\uffff\1"+
            "\1\32\uffff\3\3\1\uffff\10\3\1\uffff\1\3\23\uffff\2\1\12\uffff"+
            "\1\3",
            "",
            ""
    };

    static final short[] DFA148_eot = DFA.unpackEncodedString(DFA148_eotS);
    static final short[] DFA148_eof = DFA.unpackEncodedString(DFA148_eofS);
    static final char[] DFA148_min = DFA.unpackEncodedStringToUnsignedChars(DFA148_minS);
    static final char[] DFA148_max = DFA.unpackEncodedStringToUnsignedChars(DFA148_maxS);
    static final short[] DFA148_accept = DFA.unpackEncodedString(DFA148_acceptS);
    static final short[] DFA148_special = DFA.unpackEncodedString(DFA148_specialS);
    static final short[][] DFA148_transition;

    static {
        int numStates = DFA148_transitionS.length;
        DFA148_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA148_transition[i] = DFA.unpackEncodedString(DFA148_transitionS[i]);
        }
    }

    class DFA148 extends DFA {

        public DFA148(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = DFA148_eot;
            this.eof = DFA148_eof;
            this.min = DFA148_min;
            this.max = DFA148_max;
            this.accept = DFA148_accept;
            this.special = DFA148_special;
            this.transition = DFA148_transition;
        }
        public String getDescription() {
            return "757:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA161_eotS =
        "\12\uffff";
    static final String DFA161_eofS =
        "\12\uffff";
    static final String DFA161_minS =
        "\1\6\7\0\2\uffff";
    static final String DFA161_maxS =
        "\1\107\7\0\2\uffff";
    static final String DFA161_acceptS =
        "\10\uffff\1\1\1\2";
    static final String DFA161_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\2\uffff}>";
    static final String[] DFA161_transitionS = {
            "\1\3\5\uffff\1\6\5\uffff\1\5\3\uffff\1\6\36\uffff\1\4\1\2\2"+
            "\4\3\uffff\1\1\12\uffff\1\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_eotS);
    static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_eofS);
    static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_minS);
    static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_maxS);
    static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_acceptS);
    static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_specialS);
    static final short[][] DFA161_transition;

    static {
        int numStates = DFA161_transitionS.length;
        DFA161_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA161_transition[i] = DFA.unpackEncodedString(DFA161_transitionS[i]);
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;
        }
        public String getDescription() {
            return "766:1: declaration : ( ( STAR )? property COLON ( ws )? propertyValue ( ws )? ( prio ( ws )? )? | {...}? ( STAR )? property COLON ( ws )? cp_propertyValue ( ws )? );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA161_1 = input.LA(1);

                         
                        int index161_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index161_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA161_2 = input.LA(1);

                         
                        int index161_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index161_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA161_3 = input.LA(1);

                         
                        int index161_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index161_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA161_4 = input.LA(1);

                         
                        int index161_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index161_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA161_5 = input.LA(1);

                         
                        int index161_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index161_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA161_6 = input.LA(1);

                         
                        int index161_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 8;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 9;}

                         
                        input.seek(index161_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA161_7 = input.LA(1);

                         
                        int index161_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 8;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 9;}

                         
                        input.seek(index161_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 161, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA162_eotS =
        "\32\uffff";
    static final String DFA162_eofS =
        "\32\uffff";
    static final String DFA162_minS =
        "\1\6\23\0\1\uffff\2\0\3\uffff";
    static final String DFA162_maxS =
        "\1\122\23\0\1\uffff\2\0\3\uffff";
    static final String DFA162_acceptS =
        "\24\uffff\1\1\2\uffff\1\2\1\uffff\1\3";
    static final String DFA162_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1"+
        "\16\1\17\1\20\1\21\1\22\1\23\1\uffff\1\24\1\25\3\uffff}>";
    static final String[] DFA162_transitionS = {
            "\1\3\1\21\1\23\3\uffff\1\25\5\uffff\1\22\1\27\2\uffff\1\25\6"+
            "\uffff\1\7\23\uffff\1\24\1\4\2\uffff\1\2\1\1\1\5\1\24\16\uffff"+
            "\1\26\1\27\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA162_eot = DFA.unpackEncodedString(DFA162_eotS);
    static final short[] DFA162_eof = DFA.unpackEncodedString(DFA162_eofS);
    static final char[] DFA162_min = DFA.unpackEncodedStringToUnsignedChars(DFA162_minS);
    static final char[] DFA162_max = DFA.unpackEncodedStringToUnsignedChars(DFA162_maxS);
    static final short[] DFA162_accept = DFA.unpackEncodedString(DFA162_acceptS);
    static final short[] DFA162_special = DFA.unpackEncodedString(DFA162_specialS);
    static final short[][] DFA162_transition;

    static {
        int numStates = DFA162_transitionS.length;
        DFA162_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA162_transition[i] = DFA.unpackEncodedString(DFA162_transitionS[i]);
        }
    }

    class DFA162 extends DFA {

        public DFA162(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 162;
            this.eot = DFA162_eot;
            this.eof = DFA162_eof;
            this.min = DFA162_min;
            this.max = DFA162_max;
            this.accept = DFA162_accept;
            this.special = DFA162_special;
            this.transition = DFA162_transition;
        }
        public String getDescription() {
            return "779:1: cp_propertyValue : ( ( (~ ( HASH_SYMBOL | SEMI | RBRACE | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_declaration_property_value_interpolation_expression | {...}? cp_expression_list | propertyValue );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA162_0 = input.LA(1);

                         
                        int index162_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA162_0==HASH_SYMBOL) ) {s = 1;}

                        else if ( (LA162_0==MINUS) ) {s = 2;}

                        else if ( (LA162_0==IDENT) ) {s = 3;}

                        else if ( (LA162_0==PLUS) ) {s = 4;}

                        else if ( (LA162_0==HASH) ) {s = 5;}

                        else if ( (LA162_0==NUMBER) ) {s = 6;}

                        else if ( (LA162_0==PERCENTAGE) ) {s = 7;}

                        else if ( (LA162_0==LENGTH) ) {s = 8;}

                        else if ( (LA162_0==EMS) ) {s = 9;}

                        else if ( (LA162_0==REM) ) {s = 10;}

                        else if ( (LA162_0==EXS) ) {s = 11;}

                        else if ( (LA162_0==ANGLE) ) {s = 12;}

                        else if ( (LA162_0==TIME) ) {s = 13;}

                        else if ( (LA162_0==FREQ) ) {s = 14;}

                        else if ( (LA162_0==RESOLUTION) ) {s = 15;}

                        else if ( (LA162_0==DIMENSION) ) {s = 16;}

                        else if ( (LA162_0==STRING) ) {s = 17;}

                        else if ( (LA162_0==GEN) ) {s = 18;}

                        else if ( (LA162_0==URI) ) {s = 19;}

                        else if ( (LA162_0==SOLIDUS||LA162_0==DOT) && (synpred17_Css3())) {s = 20;}

                        else if ( (LA162_0==MEDIA_SYM||LA162_0==AT_IDENT) ) {s = 21;}

                        else if ( (LA162_0==SASS_VAR) ) {s = 22;}

                        else if ( (LA162_0==LPAREN||LA162_0==IMPORTANT_SYM) ) {s = 23;}

                         
                        input.seek(index162_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA162_1 = input.LA(1);

                         
                        int index162_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_Css3()) ) {s = 20;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 23;}

                         
                        input.seek(index162_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA162_2 = input.LA(1);

                         
                        int index162_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_Css3()) ) {s = 20;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index162_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA162_3 = input.LA(1);

                         
                        int index162_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_Css3()) ) {s = 20;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index162_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA162_4 = input.LA(1);

                         
                        int index162_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index162_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA162_5 = input.LA(1);

                         
                        int index162_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_Css3()) ) {s = 20;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index162_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA162_6 = input.LA(1);

                         
                        int index162_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index162_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA162_7 = input.LA(1);

                         
                        int index162_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index162_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA162_8 = input.LA(1);

                         
                        int index162_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index162_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA162_9 = input.LA(1);

                         
                        int index162_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index162_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA162_10 = input.LA(1);

                         
                        int index162_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index162_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA162_11 = input.LA(1);

                         
                        int index162_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index162_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA162_12 = input.LA(1);

                         
                        int index162_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index162_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA162_13 = input.LA(1);

                         
                        int index162_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index162_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA162_14 = input.LA(1);

                         
                        int index162_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index162_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA162_15 = input.LA(1);

                         
                        int index162_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index162_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA162_16 = input.LA(1);

                         
                        int index162_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index162_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA162_17 = input.LA(1);

                         
                        int index162_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index162_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA162_18 = input.LA(1);

                         
                        int index162_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index162_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA162_19 = input.LA(1);

                         
                        int index162_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index162_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA162_21 = input.LA(1);

                         
                        int index162_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 23;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 25;}

                         
                        input.seek(index162_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA162_22 = input.LA(1);

                         
                        int index162_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 23;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 25;}

                         
                        input.seek(index162_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 162, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA167_eotS =
        "\13\uffff";
    static final String DFA167_eofS =
        "\13\uffff";
    static final String DFA167_minS =
        "\2\5\1\uffff\1\6\1\uffff\1\6\1\5\1\6\1\5\2\23";
    static final String DFA167_maxS =
        "\2\124\1\uffff\1\124\1\uffff\2\124\1\6\3\124";
    static final String DFA167_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\6\uffff";
    static final String DFA167_specialS =
        "\13\uffff}>";
    static final String[] DFA167_transitionS = {
            "\1\2\3\4\2\uffff\1\3\1\4\2\2\3\uffff\1\4\2\uffff\1\2\1\4\1\1"+
            "\5\uffff\1\4\23\uffff\2\4\2\uffff\1\4\1\uffff\1\4\17\uffff\1"+
            "\4\1\2\12\4\2\1",
            "\1\2\3\4\2\uffff\1\2\1\4\2\2\3\uffff\1\4\2\uffff\1\2\1\4\1"+
            "\1\5\uffff\1\4\24\uffff\1\4\2\uffff\1\4\1\uffff\1\4\17\uffff"+
            "\1\4\1\2\12\4\2\1",
            "",
            "\1\6\2\4\3\uffff\1\4\5\uffff\1\4\3\uffff\1\4\1\5\5\uffff\1"+
            "\4\24\uffff\1\4\2\uffff\1\4\1\uffff\1\4\17\uffff\1\4\1\uffff"+
            "\12\4\2\5",
            "",
            "\1\6\2\4\3\uffff\1\4\5\uffff\1\4\3\uffff\1\4\1\5\5\uffff\1"+
            "\4\24\uffff\1\4\2\uffff\1\4\1\uffff\1\4\17\uffff\1\4\1\uffff"+
            "\12\4\2\5",
            "\4\4\2\uffff\4\4\3\uffff\5\4\1\10\5\uffff\1\4\23\uffff\2\4"+
            "\2\uffff\1\4\1\uffff\1\4\1\7\7\uffff\1\2\6\uffff\14\4\2\10",
            "\1\11",
            "\4\4\2\uffff\4\4\3\uffff\2\4\1\uffff\2\4\1\10\5\uffff\1\4\24"+
            "\uffff\1\4\2\uffff\1\4\1\uffff\1\4\10\uffff\1\2\6\uffff\14\4"+
            "\2\10",
            "\1\4\3\uffff\1\12\40\uffff\1\7\7\uffff\1\2\22\uffff\2\12",
            "\1\4\3\uffff\1\12\50\uffff\1\2\22\uffff\2\12"
    };

    static final short[] DFA167_eot = DFA.unpackEncodedString(DFA167_eotS);
    static final short[] DFA167_eof = DFA.unpackEncodedString(DFA167_eofS);
    static final char[] DFA167_min = DFA.unpackEncodedStringToUnsignedChars(DFA167_minS);
    static final char[] DFA167_max = DFA.unpackEncodedStringToUnsignedChars(DFA167_maxS);
    static final short[] DFA167_accept = DFA.unpackEncodedString(DFA167_acceptS);
    static final short[] DFA167_special = DFA.unpackEncodedString(DFA167_specialS);
    static final short[][] DFA167_transition;

    static {
        int numStates = DFA167_transitionS.length;
        DFA167_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA167_transition[i] = DFA.unpackEncodedString(DFA167_transitionS[i]);
        }
    }

    class DFA167 extends DFA {

        public DFA167(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 167;
            this.eot = DFA167_eot;
            this.eof = DFA167_eof;
            this.min = DFA167_min;
            this.max = DFA167_max;
            this.accept = DFA167_accept;
            this.special = DFA167_special;
            this.transition = DFA167_transition;
        }
        public String getDescription() {
            return "()* loopback of 838:12: ( ( ws | ( operator ( ws )? )? ) term )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA170_eotS =
        "\25\uffff";
    static final String DFA170_eofS =
        "\25\uffff";
    static final String DFA170_minS =
        "\1\6\1\0\23\uffff";
    static final String DFA170_maxS =
        "\1\122\1\0\23\uffff";
    static final String DFA170_acceptS =
        "\2\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
        "\1\17\1\20\1\21\1\22\1\uffff\1\1\1\2";
    static final String DFA170_specialS =
        "\1\uffff\1\0\23\uffff}>";
    static final String[] DFA170_transitionS = {
            "\1\1\1\15\1\17\3\uffff\1\21\5\uffff\1\16\3\uffff\1\21\6\uffff"+
            "\1\3\31\uffff\1\20\17\uffff\1\21\1\uffff\1\2\1\4\1\5\1\6\1\7"+
            "\1\10\1\11\1\12\1\13\1\14",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA170_eot = DFA.unpackEncodedString(DFA170_eotS);
    static final short[] DFA170_eof = DFA.unpackEncodedString(DFA170_eofS);
    static final char[] DFA170_min = DFA.unpackEncodedStringToUnsignedChars(DFA170_minS);
    static final char[] DFA170_max = DFA.unpackEncodedStringToUnsignedChars(DFA170_maxS);
    static final short[] DFA170_accept = DFA.unpackEncodedString(DFA170_acceptS);
    static final short[] DFA170_special = DFA.unpackEncodedString(DFA170_specialS);
    static final short[][] DFA170_transition;

    static {
        int numStates = DFA170_transitionS.length;
        DFA170_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA170_transition[i] = DFA.unpackEncodedString(DFA170_transitionS[i]);
        }
    }

    class DFA170 extends DFA {

        public DFA170(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 170;
            this.eot = DFA170_eot;
            this.eof = DFA170_eof;
            this.min = DFA170_min;
            this.max = DFA170_max;
            this.accept = DFA170_accept;
            this.special = DFA170_special;
            this.transition = DFA170_transition;
        }
        public String getDescription() {
            return "844:5: ( ( function )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | GEN | URI | hexColor | {...}? cp_variable )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA170_1 = input.LA(1);

                         
                        int index170_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index170_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 170, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA177_eotS =
        "\37\uffff";
    static final String DFA177_eofS =
        "\37\uffff";
    static final String DFA177_minS =
        "\1\6\2\0\1\uffff\1\6\1\27\17\0\5\uffff\1\6\3\0\1\uffff";
    static final String DFA177_maxS =
        "\1\131\2\0\1\uffff\2\124\17\0\5\uffff\1\124\3\0\1\uffff";
    static final String DFA177_acceptS =
        "\3\uffff\1\1\21\uffff\3\2\1\5\1\3\4\uffff\1\4";
    static final String DFA177_specialS =
        "\1\27\1\13\1\5\1\uffff\1\15\1\2\1\14\1\12\1\10\1\6\1\4\1\3\1\1\1"+
        "\0\1\17\1\20\1\22\1\23\1\25\1\26\1\7\5\uffff\1\11\1\16\1\21\1\24"+
        "\1\uffff}>";
    static final String[] DFA177_transitionS = {
            "\1\5\1\21\1\23\3\uffff\1\1\5\uffff\1\22\1\27\1\uffff\1\30\1"+
            "\1\6\uffff\1\7\24\uffff\1\4\2\uffff\1\4\1\26\1\24\17\uffff\1"+
            "\2\1\25\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\5\uffff"+
            "\2\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\33\1\21\1\23\3\uffff\1\34\5\uffff\1\22\1\27\2\uffff\1\34"+
            "\1\32\5\uffff\1\7\31\uffff\1\24\17\uffff\1\35\1\uffff\1\6\1"+
            "\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\2\32",
            "\1\36\40\uffff\1\36\7\uffff\1\36\22\uffff\2\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\33\1\21\1\23\3\uffff\1\34\5\uffff\1\22\1\27\2\uffff\1\34"+
            "\1\32\5\uffff\1\7\31\uffff\1\24\17\uffff\1\35\1\uffff\1\6\1"+
            "\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\2\32",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA177_eot = DFA.unpackEncodedString(DFA177_eotS);
    static final short[] DFA177_eof = DFA.unpackEncodedString(DFA177_eofS);
    static final char[] DFA177_min = DFA.unpackEncodedStringToUnsignedChars(DFA177_minS);
    static final char[] DFA177_max = DFA.unpackEncodedStringToUnsignedChars(DFA177_maxS);
    static final short[] DFA177_accept = DFA.unpackEncodedString(DFA177_acceptS);
    static final short[] DFA177_special = DFA.unpackEncodedString(DFA177_specialS);
    static final short[][] DFA177_transition;

    static {
        int numStates = DFA177_transitionS.length;
        DFA177_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA177_transition[i] = DFA.unpackEncodedString(DFA177_transitionS[i]);
        }
    }

    class DFA177 extends DFA {

        public DFA177(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 177;
            this.eot = DFA177_eot;
            this.eof = DFA177_eof;
            this.min = DFA177_min;
            this.max = DFA177_max;
            this.accept = DFA177_accept;
            this.special = DFA177_special;
            this.transition = DFA177_transition;
        }
        public String getDescription() {
            return "869:3: ( ( cp_args_list )=> cp_args_list | ( cp_expression_list )=> cp_expression_list ( ws )? | expression ( ws )? | fnAttribute ( COMMA ( ws )? fnAttribute )* | {...}?)";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA177_13 = input.LA(1);

                         
                        int index177_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index177_13);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA177_12 = input.LA(1);

                         
                        int index177_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index177_12);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA177_5 = input.LA(1);

                         
                        int index177_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA177_5==WS||LA177_5==DOT||LA177_5==OPEQ||(LA177_5>=NL && LA177_5<=COMMENT)) ) {s = 30;}

                        else if ( (synpred20_Css3()) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index177_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA177_11 = input.LA(1);

                         
                        int index177_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index177_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA177_10 = input.LA(1);

                         
                        int index177_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index177_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA177_2 = input.LA(1);

                         
                        int index177_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred19_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 3;}

                        else if ( (((synpred20_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 23;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 25;}

                         
                        input.seek(index177_2);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA177_9 = input.LA(1);

                         
                        int index177_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index177_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA177_20 = input.LA(1);

                         
                        int index177_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index177_20);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA177_8 = input.LA(1);

                         
                        int index177_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index177_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA177_26 = input.LA(1);

                         
                        int index177_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA177_26==IDENT) ) {s = 27;}

                        else if ( (LA177_26==NUMBER) ) {s = 6;}

                        else if ( (LA177_26==PERCENTAGE) ) {s = 7;}

                        else if ( (LA177_26==LENGTH) ) {s = 8;}

                        else if ( (LA177_26==EMS) ) {s = 9;}

                        else if ( (LA177_26==REM) ) {s = 10;}

                        else if ( (LA177_26==EXS) ) {s = 11;}

                        else if ( (LA177_26==ANGLE) ) {s = 12;}

                        else if ( (LA177_26==TIME) ) {s = 13;}

                        else if ( (LA177_26==FREQ) ) {s = 14;}

                        else if ( (LA177_26==RESOLUTION) ) {s = 15;}

                        else if ( (LA177_26==DIMENSION) ) {s = 16;}

                        else if ( (LA177_26==STRING) ) {s = 17;}

                        else if ( (LA177_26==GEN) ) {s = 18;}

                        else if ( (LA177_26==URI) ) {s = 19;}

                        else if ( (LA177_26==HASH) ) {s = 20;}

                        else if ( (LA177_26==MEDIA_SYM||LA177_26==AT_IDENT) ) {s = 28;}

                        else if ( (LA177_26==SASS_VAR) ) {s = 29;}

                        else if ( (LA177_26==WS||(LA177_26>=NL && LA177_26<=COMMENT)) ) {s = 26;}

                        else if ( (LA177_26==LPAREN) && (synpred20_Css3())) {s = 23;}

                         
                        input.seek(index177_26);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA177_7 = input.LA(1);

                         
                        int index177_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index177_7);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA177_1 = input.LA(1);

                         
                        int index177_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 3;}

                        else if ( (((synpred20_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 23;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 25;}

                         
                        input.seek(index177_1);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA177_6 = input.LA(1);

                         
                        int index177_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index177_6);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA177_4 = input.LA(1);

                         
                        int index177_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA177_4==WS||(LA177_4>=NL && LA177_4<=COMMENT)) ) {s = 26;}

                        else if ( (LA177_4==IDENT) ) {s = 27;}

                        else if ( (LA177_4==NUMBER) ) {s = 6;}

                        else if ( (LA177_4==PERCENTAGE) ) {s = 7;}

                        else if ( (LA177_4==LENGTH) ) {s = 8;}

                        else if ( (LA177_4==EMS) ) {s = 9;}

                        else if ( (LA177_4==REM) ) {s = 10;}

                        else if ( (LA177_4==EXS) ) {s = 11;}

                        else if ( (LA177_4==ANGLE) ) {s = 12;}

                        else if ( (LA177_4==TIME) ) {s = 13;}

                        else if ( (LA177_4==FREQ) ) {s = 14;}

                        else if ( (LA177_4==RESOLUTION) ) {s = 15;}

                        else if ( (LA177_4==DIMENSION) ) {s = 16;}

                        else if ( (LA177_4==STRING) ) {s = 17;}

                        else if ( (LA177_4==GEN) ) {s = 18;}

                        else if ( (LA177_4==URI) ) {s = 19;}

                        else if ( (LA177_4==HASH) ) {s = 20;}

                        else if ( (LA177_4==MEDIA_SYM||LA177_4==AT_IDENT) ) {s = 28;}

                        else if ( (LA177_4==SASS_VAR) ) {s = 29;}

                        else if ( (LA177_4==LPAREN) && (synpred20_Css3())) {s = 23;}

                         
                        input.seek(index177_4);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA177_27 = input.LA(1);

                         
                        int index177_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index177_27);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA177_14 = input.LA(1);

                         
                        int index177_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index177_14);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA177_15 = input.LA(1);

                         
                        int index177_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index177_15);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA177_28 = input.LA(1);

                         
                        int index177_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index177_28);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA177_16 = input.LA(1);

                         
                        int index177_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index177_16);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA177_17 = input.LA(1);

                         
                        int index177_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index177_17);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA177_29 = input.LA(1);

                         
                        int index177_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index177_29);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA177_18 = input.LA(1);

                         
                        int index177_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index177_18);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA177_19 = input.LA(1);

                         
                        int index177_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 23;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index177_19);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA177_0 = input.LA(1);

                         
                        int index177_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA177_0==MEDIA_SYM||LA177_0==AT_IDENT) ) {s = 1;}

                        else if ( (LA177_0==SASS_VAR) ) {s = 2;}

                        else if ( ((LA177_0>=LESS_DOTS && LA177_0<=LESS_REST)) && (synpred19_Css3())) {s = 3;}

                        else if ( (LA177_0==PLUS||LA177_0==MINUS) ) {s = 4;}

                        else if ( (LA177_0==IDENT) ) {s = 5;}

                        else if ( (LA177_0==NUMBER) ) {s = 6;}

                        else if ( (LA177_0==PERCENTAGE) ) {s = 7;}

                        else if ( (LA177_0==LENGTH) ) {s = 8;}

                        else if ( (LA177_0==EMS) ) {s = 9;}

                        else if ( (LA177_0==REM) ) {s = 10;}

                        else if ( (LA177_0==EXS) ) {s = 11;}

                        else if ( (LA177_0==ANGLE) ) {s = 12;}

                        else if ( (LA177_0==TIME) ) {s = 13;}

                        else if ( (LA177_0==FREQ) ) {s = 14;}

                        else if ( (LA177_0==RESOLUTION) ) {s = 15;}

                        else if ( (LA177_0==DIMENSION) ) {s = 16;}

                        else if ( (LA177_0==STRING) ) {s = 17;}

                        else if ( (LA177_0==GEN) ) {s = 18;}

                        else if ( (LA177_0==URI) ) {s = 19;}

                        else if ( (LA177_0==HASH) ) {s = 20;}

                        else if ( (LA177_0==IMPORTANT_SYM) && (synpred20_Css3())) {s = 21;}

                        else if ( (LA177_0==HASH_SYMBOL) && (synpred20_Css3())) {s = 22;}

                        else if ( (LA177_0==LPAREN) && (synpred20_Css3())) {s = 23;}

                        else if ( (LA177_0==RPAREN) ) {s = 24;}

                         
                        input.seek(index177_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 177, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA197_eotS =
        "\4\uffff";
    static final String DFA197_eofS =
        "\1\2\3\uffff";
    static final String DFA197_minS =
        "\2\5\2\uffff";
    static final String DFA197_maxS =
        "\2\125\2\uffff";
    static final String DFA197_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA197_specialS =
        "\4\uffff}>";
    static final String[] DFA197_transitionS = {
            "\1\2\5\uffff\1\3\2\uffff\1\2\6\uffff\1\2\1\uffff\1\1\73\uffff"+
            "\2\1\1\2",
            "\1\2\5\uffff\1\3\2\uffff\1\2\6\uffff\1\2\1\uffff\1\1\73\uffff"+
            "\2\1\1\2",
            "",
            ""
    };

    static final short[] DFA197_eot = DFA.unpackEncodedString(DFA197_eotS);
    static final short[] DFA197_eof = DFA.unpackEncodedString(DFA197_eofS);
    static final char[] DFA197_min = DFA.unpackEncodedStringToUnsignedChars(DFA197_minS);
    static final char[] DFA197_max = DFA.unpackEncodedStringToUnsignedChars(DFA197_maxS);
    static final short[] DFA197_accept = DFA.unpackEncodedString(DFA197_acceptS);
    static final short[] DFA197_special = DFA.unpackEncodedString(DFA197_specialS);
    static final short[][] DFA197_transition;

    static {
        int numStates = DFA197_transitionS.length;
        DFA197_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA197_transition[i] = DFA.unpackEncodedString(DFA197_transitionS[i]);
        }
    }

    class DFA197 extends DFA {

        public DFA197(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 197;
            this.eot = DFA197_eot;
            this.eof = DFA197_eof;
            this.min = DFA197_min;
            this.max = DFA197_max;
            this.accept = DFA197_accept;
            this.special = DFA197_special;
            this.transition = DFA197_transition;
        }
        public String getDescription() {
            return "()* loopback of 934:19: ( ( ws )? COMMA ( ws )? cp_expression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA199_eotS =
        "\4\uffff";
    static final String DFA199_eofS =
        "\2\2\2\uffff";
    static final String DFA199_minS =
        "\2\5\2\uffff";
    static final String DFA199_maxS =
        "\2\146\2\uffff";
    static final String DFA199_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA199_specialS =
        "\4\uffff}>";
    static final String[] DFA199_transitionS = {
            "\1\2\3\3\2\uffff\1\2\1\3\3\2\2\uffff\2\3\1\uffff\1\2\1\3\1\1"+
            "\5\uffff\1\3\24\uffff\1\3\1\2\1\uffff\3\3\17\uffff\14\3\2\1"+
            "\1\2\5\uffff\3\2\6\uffff\3\2",
            "\1\2\3\3\2\uffff\1\2\1\3\3\2\2\uffff\2\3\1\uffff\1\2\1\3\1"+
            "\1\5\uffff\1\3\24\uffff\1\3\1\2\1\uffff\3\3\17\uffff\14\3\2"+
            "\1\1\2\5\uffff\3\2\6\uffff\3\2",
            "",
            ""
    };

    static final short[] DFA199_eot = DFA.unpackEncodedString(DFA199_eotS);
    static final short[] DFA199_eof = DFA.unpackEncodedString(DFA199_eofS);
    static final char[] DFA199_min = DFA.unpackEncodedStringToUnsignedChars(DFA199_minS);
    static final char[] DFA199_max = DFA.unpackEncodedStringToUnsignedChars(DFA199_maxS);
    static final short[] DFA199_accept = DFA.unpackEncodedString(DFA199_acceptS);
    static final short[] DFA199_special = DFA.unpackEncodedString(DFA199_specialS);
    static final short[][] DFA199_transition;

    static {
        int numStates = DFA199_transitionS.length;
        DFA199_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA199_transition[i] = DFA.unpackEncodedString(DFA199_transitionS[i]);
        }
    }

    class DFA199 extends DFA {

        public DFA199(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 199;
            this.eot = DFA199_eot;
            this.eof = DFA199_eof;
            this.min = DFA199_min;
            this.max = DFA199_max;
            this.accept = DFA199_accept;
            this.special = DFA199_special;
            this.transition = DFA199_transition;
        }
        public String getDescription() {
            return "()* loopback of 941:5: ( ( ws )? cp_additionExp )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA204_eotS =
        "\42\uffff";
    static final String DFA204_eofS =
        "\1\3\41\uffff";
    static final String DFA204_minS =
        "\1\5\2\0\35\uffff\1\0\1\uffff";
    static final String DFA204_maxS =
        "\1\146\2\0\35\uffff\1\0\1\uffff";
    static final String DFA204_acceptS =
        "\3\uffff\1\2\35\uffff\1\1";
    static final String DFA204_specialS =
        "\1\uffff\1\0\1\1\35\uffff\1\2\1\uffff}>";
    static final String[] DFA204_transitionS = {
            "\4\3\2\uffff\5\3\2\uffff\2\3\1\uffff\2\3\1\1\5\uffff\1\3\24"+
            "\uffff\1\2\1\3\1\uffff\1\40\2\3\17\uffff\14\3\2\1\1\3\5\uffff"+
            "\3\3\6\uffff\3\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA204_eot = DFA.unpackEncodedString(DFA204_eotS);
    static final short[] DFA204_eof = DFA.unpackEncodedString(DFA204_eofS);
    static final char[] DFA204_min = DFA.unpackEncodedStringToUnsignedChars(DFA204_minS);
    static final char[] DFA204_max = DFA.unpackEncodedStringToUnsignedChars(DFA204_maxS);
    static final short[] DFA204_accept = DFA.unpackEncodedString(DFA204_acceptS);
    static final short[] DFA204_special = DFA.unpackEncodedString(DFA204_specialS);
    static final short[][] DFA204_transition;

    static {
        int numStates = DFA204_transitionS.length;
        DFA204_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA204_transition[i] = DFA.unpackEncodedString(DFA204_transitionS[i]);
        }
    }

    class DFA204 extends DFA {

        public DFA204(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 204;
            this.eot = DFA204_eot;
            this.eof = DFA204_eof;
            this.min = DFA204_min;
            this.max = DFA204_max;
            this.accept = DFA204_accept;
            this.special = DFA204_special;
            this.transition = DFA204_transition;
        }
        public String getDescription() {
            return "()* loopback of 946:10: ( ( ( ws )? ( PLUS | MINUS ) )=> ( ws )? ( PLUS ( ws )? cp_multiplyExp | MINUS ( ws )? cp_multiplyExp ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA204_1 = input.LA(1);

                         
                        int index204_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_Css3()) ) {s = 33;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index204_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA204_2 = input.LA(1);

                         
                        int index204_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_Css3()) ) {s = 33;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index204_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA204_32 = input.LA(1);

                         
                        int index204_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_Css3()) ) {s = 33;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index204_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 204, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA209_eotS =
        "\5\uffff";
    static final String DFA209_eofS =
        "\2\2\3\uffff";
    static final String DFA209_minS =
        "\2\5\3\uffff";
    static final String DFA209_maxS =
        "\2\146\3\uffff";
    static final String DFA209_acceptS =
        "\2\uffff\1\2\2\1";
    static final String DFA209_specialS =
        "\1\0\1\1\3\uffff}>";
    static final String[] DFA209_transitionS = {
            "\4\2\2\uffff\5\2\2\uffff\2\2\1\uffff\2\2\1\1\5\uffff\1\2\23"+
            "\uffff\1\4\2\2\1\uffff\3\2\4\uffff\1\3\12\uffff\14\2\2\1\1\2"+
            "\5\uffff\3\2\6\uffff\3\2",
            "\4\2\2\uffff\5\2\2\uffff\2\2\1\uffff\2\2\1\1\5\uffff\1\2\23"+
            "\uffff\1\4\2\2\1\uffff\3\2\4\uffff\1\3\12\uffff\14\2\2\1\1\2"+
            "\5\uffff\3\2\6\uffff\3\2",
            "",
            "",
            ""
    };

    static final short[] DFA209_eot = DFA.unpackEncodedString(DFA209_eotS);
    static final short[] DFA209_eof = DFA.unpackEncodedString(DFA209_eofS);
    static final char[] DFA209_min = DFA.unpackEncodedStringToUnsignedChars(DFA209_minS);
    static final char[] DFA209_max = DFA.unpackEncodedStringToUnsignedChars(DFA209_maxS);
    static final short[] DFA209_accept = DFA.unpackEncodedString(DFA209_acceptS);
    static final short[] DFA209_special = DFA.unpackEncodedString(DFA209_specialS);
    static final short[][] DFA209_transition;

    static {
        int numStates = DFA209_transitionS.length;
        DFA209_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA209_transition[i] = DFA.unpackEncodedString(DFA209_transitionS[i]);
        }
    }

    class DFA209 extends DFA {

        public DFA209(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 209;
            this.eot = DFA209_eot;
            this.eof = DFA209_eof;
            this.min = DFA209_min;
            this.max = DFA209_max;
            this.accept = DFA209_accept;
            this.special = DFA209_special;
            this.transition = DFA209_transition;
        }
        public String getDescription() {
            return "()* loopback of 953:10: ( ( ( ws )? ( STAR | SOLIDUS ) )=> ( ws )? ( STAR ( ws )? cp_atomExp | SOLIDUS ( ws )? cp_atomExp ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA209_0 = input.LA(1);

                         
                        int index209_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_0==WS||(LA209_0>=NL && LA209_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA209_0==EOF||(LA209_0>=SEMI && LA209_0<=URI)||(LA209_0>=COMMA && LA209_0<=AND)||(LA209_0>=GEN && LA209_0<=LPAREN)||(LA209_0>=RPAREN && LA209_0<=AT_IDENT)||LA209_0==PERCENTAGE||(LA209_0>=PLUS && LA209_0<=GREATER)||(LA209_0>=MINUS && LA209_0<=HASH)||(LA209_0>=SASS_VAR && LA209_0<=DIMENSION)||LA209_0==SASS_DEFAULT||(LA209_0>=GREATER_OR_EQ && LA209_0<=LESS_OR_EQ)||(LA209_0>=OR && LA209_0<=CP_NOT_EQ)) ) {s = 2;}

                        else if ( (LA209_0==STAR) && (synpred22_Css3())) {s = 3;}

                        else if ( (LA209_0==SOLIDUS) && (synpred22_Css3())) {s = 4;}

                         
                        input.seek(index209_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA209_1 = input.LA(1);

                         
                        int index209_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1==EOF||(LA209_1>=SEMI && LA209_1<=URI)||(LA209_1>=COMMA && LA209_1<=AND)||(LA209_1>=GEN && LA209_1<=LPAREN)||(LA209_1>=RPAREN && LA209_1<=AT_IDENT)||LA209_1==PERCENTAGE||(LA209_1>=PLUS && LA209_1<=GREATER)||(LA209_1>=MINUS && LA209_1<=HASH)||(LA209_1>=SASS_VAR && LA209_1<=DIMENSION)||LA209_1==SASS_DEFAULT||(LA209_1>=GREATER_OR_EQ && LA209_1<=LESS_OR_EQ)||(LA209_1>=OR && LA209_1<=CP_NOT_EQ)) ) {s = 2;}

                        else if ( (LA209_1==WS||(LA209_1>=NL && LA209_1<=COMMENT)) ) {s = 1;}

                        else if ( (LA209_1==STAR) && (synpred22_Css3())) {s = 3;}

                        else if ( (LA209_1==SOLIDUS) && (synpred22_Css3())) {s = 4;}

                         
                        input.seek(index209_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 209, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA214_eotS =
        "\7\uffff";
    static final String DFA214_eofS =
        "\7\uffff";
    static final String DFA214_minS =
        "\2\6\4\uffff\1\6";
    static final String DFA214_maxS =
        "\1\122\1\124\4\uffff\1\124";
    static final String DFA214_acceptS =
        "\2\uffff\1\1\1\2\1\3\1\4\1\uffff";
    static final String DFA214_specialS =
        "\7\uffff}>";
    static final String[] DFA214_transitionS = {
            "\3\2\3\uffff\1\2\5\uffff\1\2\1\5\2\uffff\1\2\6\uffff\1\2\24"+
            "\uffff\1\1\2\uffff\1\1\1\4\1\2\17\uffff\1\2\1\3\12\2",
            "\3\2\3\uffff\1\2\5\uffff\1\2\1\5\2\uffff\1\2\1\6\5\uffff\1"+
            "\2\31\uffff\1\2\17\uffff\1\2\1\uffff\12\2\2\6",
            "",
            "",
            "",
            "",
            "\3\2\3\uffff\1\2\5\uffff\1\2\1\5\2\uffff\1\2\1\6\5\uffff\1"+
            "\2\31\uffff\1\2\17\uffff\1\2\1\uffff\12\2\2\6"
    };

    static final short[] DFA214_eot = DFA.unpackEncodedString(DFA214_eotS);
    static final short[] DFA214_eof = DFA.unpackEncodedString(DFA214_eofS);
    static final char[] DFA214_min = DFA.unpackEncodedStringToUnsignedChars(DFA214_minS);
    static final char[] DFA214_max = DFA.unpackEncodedStringToUnsignedChars(DFA214_maxS);
    static final short[] DFA214_accept = DFA.unpackEncodedString(DFA214_acceptS);
    static final short[] DFA214_special = DFA.unpackEncodedString(DFA214_specialS);
    static final short[][] DFA214_transition;

    static {
        int numStates = DFA214_transitionS.length;
        DFA214_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA214_transition[i] = DFA.unpackEncodedString(DFA214_transitionS[i]);
        }
    }

    class DFA214 extends DFA {

        public DFA214(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 214;
            this.eot = DFA214_eot;
            this.eof = DFA214_eof;
            this.min = DFA214_min;
            this.max = DFA214_max;
            this.accept = DFA214_accept;
            this.special = DFA214_special;
            this.transition = DFA214_transition;
        }
        public String getDescription() {
            return "958:1: cp_atomExp : ( term | IMPORTANT_SYM | sass_interpolation_expression_var | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_additionExp ( ws )? RPAREN );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA215_eotS =
        "\13\uffff";
    static final String DFA215_eofS =
        "\13\uffff";
    static final String DFA215_minS =
        "\1\6\2\uffff\1\6\5\uffff\1\6\1\uffff";
    static final String DFA215_maxS =
        "\1\122\2\uffff\1\124\5\uffff\1\124\1\uffff";
    static final String DFA215_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\1\5\1\6\1\10\1\7\1\uffff\1\3";
    static final String DFA215_specialS =
        "\13\uffff}>";
    static final String[] DFA215_transitionS = {
            "\1\3\1\2\1\5\3\uffff\1\7\5\uffff\1\4\3\uffff\1\7\6\uffff\1\1"+
            "\31\uffff\1\6\17\uffff\1\7\1\uffff\12\1",
            "",
            "",
            "\1\12\4\uffff\1\12\1\uffff\1\12\5\uffff\2\10\2\uffff\1\11\40"+
            "\uffff\1\10\32\uffff\2\11",
            "",
            "",
            "",
            "",
            "",
            "\1\12\4\uffff\1\12\1\uffff\1\12\5\uffff\1\10\3\uffff\1\11\73"+
            "\uffff\2\11",
            ""
    };

    static final short[] DFA215_eot = DFA.unpackEncodedString(DFA215_eotS);
    static final short[] DFA215_eof = DFA.unpackEncodedString(DFA215_eofS);
    static final char[] DFA215_min = DFA.unpackEncodedStringToUnsignedChars(DFA215_minS);
    static final char[] DFA215_max = DFA.unpackEncodedStringToUnsignedChars(DFA215_maxS);
    static final short[] DFA215_accept = DFA.unpackEncodedString(DFA215_acceptS);
    static final short[] DFA215_special = DFA.unpackEncodedString(DFA215_specialS);
    static final short[][] DFA215_transition;

    static {
        int numStates = DFA215_transitionS.length;
        DFA215_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA215_transition[i] = DFA.unpackEncodedString(DFA215_transitionS[i]);
        }
    }

    class DFA215 extends DFA {

        public DFA215(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 215;
            this.eot = DFA215_eot;
            this.eof = DFA215_eof;
            this.min = DFA215_min;
            this.max = DFA215_max;
            this.accept = DFA215_accept;
            this.special = DFA215_special;
            this.transition = DFA215_transition;
        }
        public String getDescription() {
            return "970:9: ( ( NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION ) | STRING | IDENT | GEN | URI | hexColor | function | cp_variable )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA233_eotS =
        "\4\uffff";
    static final String DFA233_eofS =
        "\4\uffff";
    static final String DFA233_minS =
        "\2\5\2\uffff";
    static final String DFA233_maxS =
        "\2\124\2\uffff";
    static final String DFA233_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA233_specialS =
        "\4\uffff}>";
    static final String[] DFA233_transitionS = {
            "\1\3\15\uffff\1\2\3\uffff\1\1\73\uffff\2\1",
            "\1\3\15\uffff\1\2\3\uffff\1\1\73\uffff\2\1",
            "",
            ""
    };

    static final short[] DFA233_eot = DFA.unpackEncodedString(DFA233_eotS);
    static final short[] DFA233_eof = DFA.unpackEncodedString(DFA233_eofS);
    static final char[] DFA233_min = DFA.unpackEncodedStringToUnsignedChars(DFA233_minS);
    static final char[] DFA233_max = DFA.unpackEncodedStringToUnsignedChars(DFA233_maxS);
    static final short[] DFA233_accept = DFA.unpackEncodedString(DFA233_acceptS);
    static final short[] DFA233_special = DFA.unpackEncodedString(DFA233_specialS);
    static final short[][] DFA233_transition;

    static {
        int numStates = DFA233_transitionS.length;
        DFA233_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA233_transition[i] = DFA.unpackEncodedString(DFA233_transitionS[i]);
        }
    }

    class DFA233 extends DFA {

        public DFA233(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 233;
            this.eot = DFA233_eot;
            this.eof = DFA233_eof;
            this.min = DFA233_min;
            this.max = DFA233_max;
            this.accept = DFA233_accept;
            this.special = DFA233_special;
            this.transition = DFA233_transition;
        }
        public String getDescription() {
            return "1018:5: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA239_eotS =
        "\7\uffff";
    static final String DFA239_eofS =
        "\7\uffff";
    static final String DFA239_minS =
        "\1\6\2\5\1\uffff\1\5\1\uffff\1\5";
    static final String DFA239_maxS =
        "\1\122\2\124\1\uffff\1\124\1\uffff\1\124";
    static final String DFA239_acceptS =
        "\3\uffff\1\2\1\uffff\1\1\1\uffff";
    static final String DFA239_specialS =
        "\7\uffff}>";
    static final String[] DFA239_transitionS = {
            "\3\3\3\uffff\1\1\5\uffff\2\3\2\uffff\1\1\6\uffff\1\3\24\uffff"+
            "\1\3\2\uffff\3\3\17\uffff\1\2\13\3",
            "\4\3\2\uffff\2\3\5\uffff\2\3\1\5\2\3\1\4\5\uffff\1\3\23\uffff"+
            "\2\3\2\uffff\3\3\4\uffff\1\3\12\uffff\14\3\2\4",
            "\4\3\2\uffff\2\3\5\uffff\2\3\1\5\2\3\1\6\5\uffff\1\3\23\uffff"+
            "\2\3\2\uffff\3\3\4\uffff\1\3\12\uffff\14\3\2\6",
            "",
            "\4\3\2\uffff\2\3\5\uffff\2\3\1\5\2\3\1\4\5\uffff\1\3\23\uffff"+
            "\2\3\2\uffff\3\3\4\uffff\1\3\12\uffff\14\3\2\4",
            "",
            "\4\3\2\uffff\2\3\5\uffff\2\3\1\5\2\3\1\6\5\uffff\1\3\23\uffff"+
            "\2\3\2\uffff\3\3\4\uffff\1\3\12\uffff\14\3\2\6"
    };

    static final short[] DFA239_eot = DFA.unpackEncodedString(DFA239_eotS);
    static final short[] DFA239_eof = DFA.unpackEncodedString(DFA239_eofS);
    static final char[] DFA239_min = DFA.unpackEncodedStringToUnsignedChars(DFA239_minS);
    static final char[] DFA239_max = DFA.unpackEncodedStringToUnsignedChars(DFA239_maxS);
    static final short[] DFA239_accept = DFA.unpackEncodedString(DFA239_acceptS);
    static final short[] DFA239_special = DFA.unpackEncodedString(DFA239_specialS);
    static final short[][] DFA239_transition;

    static {
        int numStates = DFA239_transitionS.length;
        DFA239_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA239_transition[i] = DFA.unpackEncodedString(DFA239_transitionS[i]);
        }
    }

    class DFA239 extends DFA {

        public DFA239(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 239;
            this.eot = DFA239_eot;
            this.eof = DFA239_eof;
            this.min = DFA239_min;
            this.max = DFA239_max;
            this.accept = DFA239_accept;
            this.special = DFA239_special;
            this.transition = DFA239_transition;
        }
        public String getDescription() {
            return "1035:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA242_eotS =
        "\5\uffff";
    static final String DFA242_eofS =
        "\1\2\4\uffff";
    static final String DFA242_minS =
        "\1\5\1\14\1\uffff\1\14\1\uffff";
    static final String DFA242_maxS =
        "\1\25\1\131\1\uffff\1\131\1\uffff";
    static final String DFA242_acceptS =
        "\2\uffff\1\2\1\uffff\1\1";
    static final String DFA242_specialS =
        "\5\uffff}>";
    static final String[] DFA242_transitionS = {
            "\1\1\5\uffff\1\1\11\uffff\1\2",
            "\1\4\11\uffff\1\4\1\3\57\uffff\1\4\13\uffff\2\3\3\uffff\2\2",
            "",
            "\1\4\11\uffff\1\4\1\3\57\uffff\1\4\13\uffff\2\3\3\uffff\2\2",
            ""
    };

    static final short[] DFA242_eot = DFA.unpackEncodedString(DFA242_eotS);
    static final short[] DFA242_eof = DFA.unpackEncodedString(DFA242_eofS);
    static final char[] DFA242_min = DFA.unpackEncodedStringToUnsignedChars(DFA242_minS);
    static final char[] DFA242_max = DFA.unpackEncodedStringToUnsignedChars(DFA242_maxS);
    static final short[] DFA242_accept = DFA.unpackEncodedString(DFA242_acceptS);
    static final short[] DFA242_special = DFA.unpackEncodedString(DFA242_specialS);
    static final short[][] DFA242_transition;

    static {
        int numStates = DFA242_transitionS.length;
        DFA242_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA242_transition[i] = DFA.unpackEncodedString(DFA242_transitionS[i]);
        }
    }

    class DFA242 extends DFA {

        public DFA242(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 242;
            this.eot = DFA242_eot;
            this.eof = DFA242_eof;
            this.min = DFA242_min;
            this.max = DFA242_max;
            this.accept = DFA242_accept;
            this.special = DFA242_special;
            this.transition = DFA242_transition;
        }
        public String getDescription() {
            return "()* loopback of 1046:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA267_eotS =
        "\4\uffff";
    static final String DFA267_eofS =
        "\4\uffff";
    static final String DFA267_minS =
        "\2\6\2\uffff";
    static final String DFA267_maxS =
        "\2\124\2\uffff";
    static final String DFA267_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA267_specialS =
        "\4\uffff}>";
    static final String[] DFA267_transitionS = {
            "\1\3\4\uffff\1\3\1\uffff\1\2\6\uffff\1\3\2\uffff\1\1\33\uffff"+
            "\1\3\1\uffff\4\3\3\uffff\1\3\2\uffff\1\3\23\uffff\2\1",
            "\1\3\4\uffff\1\3\1\uffff\1\2\6\uffff\1\3\2\uffff\1\1\33\uffff"+
            "\1\3\1\uffff\4\3\3\uffff\1\3\2\uffff\1\3\23\uffff\2\1",
            "",
            ""
    };

    static final short[] DFA267_eot = DFA.unpackEncodedString(DFA267_eotS);
    static final short[] DFA267_eof = DFA.unpackEncodedString(DFA267_eofS);
    static final char[] DFA267_min = DFA.unpackEncodedStringToUnsignedChars(DFA267_minS);
    static final char[] DFA267_max = DFA.unpackEncodedStringToUnsignedChars(DFA267_maxS);
    static final short[] DFA267_accept = DFA.unpackEncodedString(DFA267_acceptS);
    static final short[] DFA267_special = DFA.unpackEncodedString(DFA267_specialS);
    static final short[][] DFA267_transition;

    static {
        int numStates = DFA267_transitionS.length;
        DFA267_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA267_transition[i] = DFA.unpackEncodedString(DFA267_transitionS[i]);
        }
    }

    class DFA267 extends DFA {

        public DFA267(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 267;
            this.eot = DFA267_eot;
            this.eof = DFA267_eof;
            this.min = DFA267_min;
            this.max = DFA267_max;
            this.accept = DFA267_accept;
            this.special = DFA267_special;
            this.transition = DFA267_transition;
        }
        public String getDescription() {
            return "()* loopback of 1118:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA271_eotS =
        "\4\uffff";
    static final String DFA271_eofS =
        "\4\uffff";
    static final String DFA271_minS =
        "\2\6\2\uffff";
    static final String DFA271_maxS =
        "\2\124\2\uffff";
    static final String DFA271_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA271_specialS =
        "\4\uffff}>";
    static final String[] DFA271_transitionS = {
            "\1\3\15\uffff\1\2\2\uffff\1\1\35\uffff\4\3\32\uffff\2\1",
            "\1\3\15\uffff\1\2\2\uffff\1\1\35\uffff\4\3\32\uffff\2\1",
            "",
            ""
    };

    static final short[] DFA271_eot = DFA.unpackEncodedString(DFA271_eotS);
    static final short[] DFA271_eof = DFA.unpackEncodedString(DFA271_eofS);
    static final char[] DFA271_min = DFA.unpackEncodedStringToUnsignedChars(DFA271_minS);
    static final char[] DFA271_max = DFA.unpackEncodedStringToUnsignedChars(DFA271_maxS);
    static final short[] DFA271_accept = DFA.unpackEncodedString(DFA271_acceptS);
    static final short[] DFA271_special = DFA.unpackEncodedString(DFA271_specialS);
    static final short[][] DFA271_transition;

    static {
        int numStates = DFA271_transitionS.length;
        DFA271_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA271_transition[i] = DFA.unpackEncodedString(DFA271_transitionS[i]);
        }
    }

    class DFA271 extends DFA {

        public DFA271(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 271;
            this.eot = DFA271_eot;
            this.eof = DFA271_eof;
            this.min = DFA271_min;
            this.max = DFA271_max;
            this.accept = DFA271_accept;
            this.special = DFA271_special;
            this.transition = DFA271_transition;
        }
        public String getDescription() {
            return "()* loopback of 1136:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA275_eotS =
        "\4\uffff";
    static final String DFA275_eofS =
        "\4\uffff";
    static final String DFA275_minS =
        "\2\5\2\uffff";
    static final String DFA275_maxS =
        "\2\124\2\uffff";
    static final String DFA275_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA275_specialS =
        "\4\uffff}>";
    static final String[] DFA275_transitionS = {
            "\1\2\1\3\7\uffff\1\2\10\uffff\1\1\31\uffff\1\3\3\uffff\4\3\32"+
            "\uffff\2\1",
            "\1\2\1\3\7\uffff\1\2\10\uffff\1\1\31\uffff\1\3\3\uffff\4\3"+
            "\32\uffff\2\1",
            "",
            ""
    };

    static final short[] DFA275_eot = DFA.unpackEncodedString(DFA275_eotS);
    static final short[] DFA275_eof = DFA.unpackEncodedString(DFA275_eofS);
    static final char[] DFA275_min = DFA.unpackEncodedStringToUnsignedChars(DFA275_minS);
    static final char[] DFA275_max = DFA.unpackEncodedStringToUnsignedChars(DFA275_maxS);
    static final short[] DFA275_accept = DFA.unpackEncodedString(DFA275_acceptS);
    static final short[] DFA275_special = DFA.unpackEncodedString(DFA275_specialS);
    static final short[][] DFA275_transition;

    static {
        int numStates = DFA275_transitionS.length;
        DFA275_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA275_transition[i] = DFA.unpackEncodedString(DFA275_transitionS[i]);
        }
    }

    class DFA275 extends DFA {

        public DFA275(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 275;
            this.eot = DFA275_eot;
            this.eof = DFA275_eof;
            this.min = DFA275_min;
            this.max = DFA275_max;
            this.accept = DFA275_accept;
            this.special = DFA275_special;
            this.transition = DFA275_transition;
        }
        public String getDescription() {
            return "()* loopback of 1155:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | SOLIDUS ) ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA279_eotS =
        "\4\uffff";
    static final String DFA279_eofS =
        "\4\uffff";
    static final String DFA279_minS =
        "\2\6\2\uffff";
    static final String DFA279_maxS =
        "\2\124\2\uffff";
    static final String DFA279_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA279_specialS =
        "\4\uffff}>";
    static final String[] DFA279_transitionS = {
            "\1\3\6\uffff\1\2\1\uffff\1\3\1\uffff\1\3\2\uffff\1\3\2\uffff"+
            "\1\1\35\uffff\4\3\32\uffff\2\1",
            "\1\3\6\uffff\1\2\1\uffff\1\3\1\uffff\1\3\2\uffff\1\3\2\uffff"+
            "\1\1\35\uffff\4\3\32\uffff\2\1",
            "",
            ""
    };

    static final short[] DFA279_eot = DFA.unpackEncodedString(DFA279_eotS);
    static final short[] DFA279_eof = DFA.unpackEncodedString(DFA279_eofS);
    static final char[] DFA279_min = DFA.unpackEncodedStringToUnsignedChars(DFA279_minS);
    static final char[] DFA279_max = DFA.unpackEncodedStringToUnsignedChars(DFA279_maxS);
    static final short[] DFA279_accept = DFA.unpackEncodedString(DFA279_acceptS);
    static final short[] DFA279_special = DFA.unpackEncodedString(DFA279_specialS);
    static final short[][] DFA279_transition;

    static {
        int numStates = DFA279_transitionS.length;
        DFA279_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA279_transition[i] = DFA.unpackEncodedString(DFA279_transitionS[i]);
        }
    }

    class DFA279 extends DFA {

        public DFA279(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 279;
            this.eot = DFA279_eot;
            this.eof = DFA279_eof;
            this.min = DFA279_min;
            this.max = DFA279_max;
            this.accept = DFA279_accept;
            this.special = DFA279_special;
            this.transition = DFA279_transition;
        }
        public String getDescription() {
            return "()* loopback of 1174:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | AND | NOT ) ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA289_eotS =
        "\4\uffff";
    static final String DFA289_eofS =
        "\2\3\2\uffff";
    static final String DFA289_minS =
        "\2\5\2\uffff";
    static final String DFA289_maxS =
        "\2\154\2\uffff";
    static final String DFA289_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA289_specialS =
        "\4\uffff}>";
    static final String[] DFA289_transitionS = {
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\1\1\3\3\uffff\1\3\1\uffff\3\3\22\uffff\1\3\1\uffff\11"+
            "\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\1\uffff\2\3\6\uffff"+
            "\1\3\1\uffff\3\3\1\2\3\uffff\6\3",
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\1\1\3\3\uffff\1\3\1\uffff\3\3\22\uffff\1\3\1\uffff\11"+
            "\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\1\uffff\2\3\6\uffff"+
            "\1\3\1\uffff\3\3\1\2\3\uffff\6\3",
            "",
            ""
    };

    static final short[] DFA289_eot = DFA.unpackEncodedString(DFA289_eotS);
    static final short[] DFA289_eof = DFA.unpackEncodedString(DFA289_eofS);
    static final char[] DFA289_min = DFA.unpackEncodedStringToUnsignedChars(DFA289_minS);
    static final char[] DFA289_max = DFA.unpackEncodedStringToUnsignedChars(DFA289_maxS);
    static final short[] DFA289_accept = DFA.unpackEncodedString(DFA289_acceptS);
    static final short[] DFA289_special = DFA.unpackEncodedString(DFA289_specialS);
    static final short[][] DFA289_transition;

    static {
        int numStates = DFA289_transitionS.length;
        DFA289_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA289_transition[i] = DFA.unpackEncodedString(DFA289_transitionS[i]);
        }
    }

    class DFA289 extends DFA {

        public DFA289(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 289;
            this.eot = DFA289_eot;
            this.eof = DFA289_eof;
            this.min = DFA289_min;
            this.max = DFA289_max;
            this.accept = DFA289_accept;
            this.special = DFA289_special;
            this.transition = DFA289_transition;
        }
        public String getDescription() {
            return "1235:63: ( ( ws )? sass_else )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA296_eotS =
        "\5\uffff";
    static final String DFA296_eofS =
        "\5\uffff";
    static final String DFA296_minS =
        "\1\143\2\6\2\uffff";
    static final String DFA296_maxS =
        "\1\143\2\124\2\uffff";
    static final String DFA296_acceptS =
        "\3\uffff\1\1\1\2";
    static final String DFA296_specialS =
        "\5\uffff}>";
    static final String[] DFA296_transitionS = {
            "\1\1",
            "\1\4\6\uffff\1\3\11\uffff\1\2\73\uffff\2\2",
            "\1\4\6\uffff\1\3\11\uffff\1\2\73\uffff\2\2",
            "",
            ""
    };

    static final short[] DFA296_eot = DFA.unpackEncodedString(DFA296_eotS);
    static final short[] DFA296_eof = DFA.unpackEncodedString(DFA296_eofS);
    static final char[] DFA296_min = DFA.unpackEncodedStringToUnsignedChars(DFA296_minS);
    static final char[] DFA296_max = DFA.unpackEncodedStringToUnsignedChars(DFA296_maxS);
    static final short[] DFA296_accept = DFA.unpackEncodedString(DFA296_acceptS);
    static final short[] DFA296_special = DFA.unpackEncodedString(DFA296_specialS);
    static final short[][] DFA296_transition;

    static {
        int numStates = DFA296_transitionS.length;
        DFA296_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA296_transition[i] = DFA.unpackEncodedString(DFA296_transitionS[i]);
        }
    }

    class DFA296 extends DFA {

        public DFA296(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 296;
            this.eot = DFA296_eot;
            this.eof = DFA296_eof;
            this.min = DFA296_min;
            this.max = DFA296_max;
            this.accept = DFA296_accept;
            this.special = DFA296_special;
            this.transition = DFA296_transition;
        }
        public String getDescription() {
            return "1238:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA295_eotS =
        "\4\uffff";
    static final String DFA295_eofS =
        "\2\3\2\uffff";
    static final String DFA295_minS =
        "\2\5\2\uffff";
    static final String DFA295_maxS =
        "\2\154\2\uffff";
    static final String DFA295_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA295_specialS =
        "\4\uffff}>";
    static final String[] DFA295_transitionS = {
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\1\1\3\3\uffff\1\3\1\uffff\3\3\22\uffff\1\3\1\uffff\11"+
            "\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\1\uffff\2\3\6\uffff"+
            "\1\3\1\uffff\3\3\1\2\3\uffff\6\3",
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\1\1\3\3\uffff\1\3\1\uffff\3\3\22\uffff\1\3\1\uffff\11"+
            "\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\1\uffff\2\3\6\uffff"+
            "\1\3\1\uffff\3\3\1\2\3\uffff\6\3",
            "",
            ""
    };

    static final short[] DFA295_eot = DFA.unpackEncodedString(DFA295_eotS);
    static final short[] DFA295_eof = DFA.unpackEncodedString(DFA295_eofS);
    static final char[] DFA295_min = DFA.unpackEncodedStringToUnsignedChars(DFA295_minS);
    static final char[] DFA295_max = DFA.unpackEncodedStringToUnsignedChars(DFA295_maxS);
    static final short[] DFA295_accept = DFA.unpackEncodedString(DFA295_acceptS);
    static final short[] DFA295_special = DFA.unpackEncodedString(DFA295_specialS);
    static final short[][] DFA295_transition;

    static {
        int numStates = DFA295_transitionS.length;
        DFA295_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA295_transition[i] = DFA.unpackEncodedString(DFA295_transitionS[i]);
        }
    }

    class DFA295 extends DFA {

        public DFA295(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 295;
            this.eot = DFA295_eot;
            this.eof = DFA295_eof;
            this.min = DFA295_min;
            this.max = DFA295_max;
            this.accept = DFA295_accept;
            this.special = DFA295_special;
            this.transition = DFA295_transition;
        }
        public String getDescription() {
            return "1242:133: ( ( ws )? sass_else )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA299_eotS =
        "\4\uffff";
    static final String DFA299_eofS =
        "\4\uffff";
    static final String DFA299_minS =
        "\1\5\1\uffff\1\15\1\uffff";
    static final String DFA299_maxS =
        "\1\146\1\uffff\1\146\1\uffff";
    static final String DFA299_acceptS =
        "\1\uffff\1\2\1\uffff\1\1";
    static final String DFA299_specialS =
        "\1\1\1\uffff\1\0\1\uffff}>";
    static final String[] DFA299_transitionS = {
            "\1\1\7\uffff\1\1\1\uffff\1\3\5\uffff\1\1\1\uffff\1\2\33\uffff"+
            "\1\3\37\uffff\2\2\6\uffff\3\3\6\uffff\3\3",
            "",
            "\1\1\1\uffff\1\3\5\uffff\1\1\1\uffff\1\2\33\uffff\1\3\37\uffff"+
            "\2\2\6\uffff\3\3\6\uffff\3\3",
            ""
    };

    static final short[] DFA299_eot = DFA.unpackEncodedString(DFA299_eotS);
    static final short[] DFA299_eof = DFA.unpackEncodedString(DFA299_eofS);
    static final char[] DFA299_min = DFA.unpackEncodedStringToUnsignedChars(DFA299_minS);
    static final char[] DFA299_max = DFA.unpackEncodedStringToUnsignedChars(DFA299_maxS);
    static final short[] DFA299_accept = DFA.unpackEncodedString(DFA299_acceptS);
    static final short[] DFA299_special = DFA.unpackEncodedString(DFA299_specialS);
    static final short[][] DFA299_transition;

    static {
        int numStates = DFA299_transitionS.length;
        DFA299_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA299_transition[i] = DFA.unpackEncodedString(DFA299_transitionS[i]);
        }
    }

    class DFA299 extends DFA {

        public DFA299(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 299;
            this.eot = DFA299_eot;
            this.eof = DFA299_eof;
            this.min = DFA299_min;
            this.max = DFA299_max;
            this.accept = DFA299_accept;
            this.special = DFA299_special;
            this.transition = DFA299_transition;
        }
        public String getDescription() {
            return "()* loopback of 1252:10: ( ( ( ws )? cp_full_expression_operator )=> ( ws )? cp_full_expression_operator ( ws )? cp_full_expression_atom )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA299_2 = input.LA(1);

                         
                        int index299_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA299_2==LBRACE||LA299_2==RPAREN) ) {s = 1;}

                        else if ( (LA299_2==WS||(LA299_2>=NL && LA299_2<=COMMENT)) ) {s = 2;}

                        else if ( (LA299_2==AND||LA299_2==GREATER||(LA299_2>=GREATER_OR_EQ && LA299_2<=LESS_OR_EQ)||(LA299_2>=OR && LA299_2<=CP_NOT_EQ)) && (synpred31_Css3())) {s = 3;}

                         
                        input.seek(index299_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA299_0 = input.LA(1);

                         
                        int index299_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA299_0==SEMI||LA299_0==LBRACE||LA299_0==RPAREN) ) {s = 1;}

                        else if ( (LA299_0==WS||(LA299_0>=NL && LA299_0<=COMMENT)) ) {s = 2;}

                        else if ( (LA299_0==AND||LA299_0==GREATER||(LA299_0>=GREATER_OR_EQ && LA299_0<=LESS_OR_EQ)||(LA299_0>=OR && LA299_0<=CP_NOT_EQ)) && (synpred31_Css3())) {s = 3;}

                         
                        input.seek(index299_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 299, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA304_eotS =
        "\30\uffff";
    static final String DFA304_eofS =
        "\30\uffff";
    static final String DFA304_minS =
        "\1\6\25\uffff\1\0\1\uffff";
    static final String DFA304_maxS =
        "\1\122\25\uffff\1\0\1\uffff";
    static final String DFA304_acceptS =
        "\1\uffff\25\1\1\uffff\1\2";
    static final String DFA304_specialS =
        "\1\0\25\uffff\1\1\1\uffff}>";
    static final String[] DFA304_transitionS = {
            "\1\2\1\16\1\20\3\uffff\1\22\5\uffff\1\17\1\26\2\uffff\1\22\6"+
            "\uffff\1\4\24\uffff\1\1\2\uffff\1\1\1\25\1\21\17\uffff\1\23"+
            "\1\24\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA304_eot = DFA.unpackEncodedString(DFA304_eotS);
    static final short[] DFA304_eof = DFA.unpackEncodedString(DFA304_eofS);
    static final char[] DFA304_min = DFA.unpackEncodedStringToUnsignedChars(DFA304_minS);
    static final char[] DFA304_max = DFA.unpackEncodedStringToUnsignedChars(DFA304_maxS);
    static final short[] DFA304_accept = DFA.unpackEncodedString(DFA304_acceptS);
    static final short[] DFA304_special = DFA.unpackEncodedString(DFA304_specialS);
    static final short[][] DFA304_transition;

    static {
        int numStates = DFA304_transitionS.length;
        DFA304_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA304_transition[i] = DFA.unpackEncodedString(DFA304_transitionS[i]);
        }
    }

    class DFA304 extends DFA {

        public DFA304(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 304;
            this.eot = DFA304_eot;
            this.eof = DFA304_eof;
            this.min = DFA304_min;
            this.max = DFA304_max;
            this.accept = DFA304_accept;
            this.special = DFA304_special;
            this.transition = DFA304_transition;
        }
        public String getDescription() {
            return "1263:9: ( ( cp_expression )=> cp_expression | LPAREN ( ws )? cp_full_expression ( ws )? RPAREN )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA304_0 = input.LA(1);

                         
                        int index304_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA304_0==PLUS||LA304_0==MINUS) && (synpred32_Css3())) {s = 1;}

                        else if ( (LA304_0==IDENT) && (synpred32_Css3())) {s = 2;}

                        else if ( (LA304_0==NUMBER) && (synpred32_Css3())) {s = 3;}

                        else if ( (LA304_0==PERCENTAGE) && (synpred32_Css3())) {s = 4;}

                        else if ( (LA304_0==LENGTH) && (synpred32_Css3())) {s = 5;}

                        else if ( (LA304_0==EMS) && (synpred32_Css3())) {s = 6;}

                        else if ( (LA304_0==REM) && (synpred32_Css3())) {s = 7;}

                        else if ( (LA304_0==EXS) && (synpred32_Css3())) {s = 8;}

                        else if ( (LA304_0==ANGLE) && (synpred32_Css3())) {s = 9;}

                        else if ( (LA304_0==TIME) && (synpred32_Css3())) {s = 10;}

                        else if ( (LA304_0==FREQ) && (synpred32_Css3())) {s = 11;}

                        else if ( (LA304_0==RESOLUTION) && (synpred32_Css3())) {s = 12;}

                        else if ( (LA304_0==DIMENSION) && (synpred32_Css3())) {s = 13;}

                        else if ( (LA304_0==STRING) && (synpred32_Css3())) {s = 14;}

                        else if ( (LA304_0==GEN) && (synpred32_Css3())) {s = 15;}

                        else if ( (LA304_0==URI) && (synpred32_Css3())) {s = 16;}

                        else if ( (LA304_0==HASH) && (synpred32_Css3())) {s = 17;}

                        else if ( (LA304_0==MEDIA_SYM||LA304_0==AT_IDENT) && (synpred32_Css3())) {s = 18;}

                        else if ( (LA304_0==SASS_VAR) && (synpred32_Css3())) {s = 19;}

                        else if ( (LA304_0==IMPORTANT_SYM) && (synpred32_Css3())) {s = 20;}

                        else if ( (LA304_0==HASH_SYMBOL) && (synpred32_Css3())) {s = 21;}

                        else if ( (LA304_0==LPAREN) ) {s = 22;}

                         
                        input.seek(index304_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA304_22 = input.LA(1);

                         
                        int index304_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_Css3()) ) {s = 21;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index304_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 304, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA317_eotS =
        "\11\uffff";
    static final String DFA317_eofS =
        "\5\uffff\1\4\3\uffff";
    static final String DFA317_minS =
        "\3\4\2\uffff\4\4";
    static final String DFA317_maxS =
        "\3\u0091\2\uffff\4\u0091";
    static final String DFA317_acceptS =
        "\3\uffff\1\1\1\2\4\uffff";
    static final String DFA317_specialS =
        "\11\uffff}>";
    static final String[] DFA317_transitionS = {
            "\1\3\1\uffff\1\2\6\3\2\uffff\5\3\1\uffff\40\3\1\2\1\1\2\2\131"+
            "\3",
            "\1\3\1\uffff\1\10\6\3\1\4\1\uffff\5\3\1\5\2\3\1\6\35\3\1\10"+
            "\1\7\2\10\32\3\2\6\75\3",
            "\1\3\1\uffff\1\10\6\3\2\uffff\5\3\1\5\2\3\1\6\35\3\1\10\1\7"+
            "\2\10\32\3\2\6\75\3",
            "",
            "",
            "\1\3\1\uffff\7\3\2\uffff\u0083\3",
            "\1\3\1\uffff\1\10\6\3\2\uffff\10\3\1\6\35\3\1\10\1\7\2\10\32"+
            "\3\2\6\75\3",
            "\1\3\1\uffff\1\10\6\3\1\4\1\uffff\5\3\1\5\2\3\1\6\35\3\1\10"+
            "\1\7\2\10\32\3\2\6\75\3",
            "\1\3\1\uffff\1\10\6\3\2\uffff\5\3\1\5\2\3\1\6\35\3\1\10\1\7"+
            "\2\10\32\3\2\6\75\3"
    };

    static final short[] DFA317_eot = DFA.unpackEncodedString(DFA317_eotS);
    static final short[] DFA317_eof = DFA.unpackEncodedString(DFA317_eofS);
    static final char[] DFA317_min = DFA.unpackEncodedStringToUnsignedChars(DFA317_minS);
    static final char[] DFA317_max = DFA.unpackEncodedStringToUnsignedChars(DFA317_maxS);
    static final short[] DFA317_accept = DFA.unpackEncodedString(DFA317_acceptS);
    static final short[] DFA317_special = DFA.unpackEncodedString(DFA317_specialS);
    static final short[][] DFA317_transition;

    static {
        int numStates = DFA317_transitionS.length;
        DFA317_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA317_transition[i] = DFA.unpackEncodedString(DFA317_transitionS[i]);
        }
    }

    class DFA317 extends DFA {

        public DFA317(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 317;
            this.eot = DFA317_eot;
            this.eof = DFA317_eof;
            this.min = DFA317_min;
            this.max = DFA317_max;
            this.accept = DFA317_accept;
            this.special = DFA317_special;
            this.transition = DFA317_transition;
        }
        public String getDescription() {
            return "376:17: synpred3_Css3 : ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI | sass_declaration_interpolation_expression COLON );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
 

    public static final BitSet FOLLOW_ws_in_styleSheet125 = new BitSet(new long[]{0xBFE80001D1541E50L,0x0000078700C00080L});
    public static final BitSet FOLLOW_charSet_in_styleSheet135 = new BitSet(new long[]{0xBFE80001D1D41C50L,0x0000078700D80080L});
    public static final BitSet FOLLOW_ws_in_styleSheet137 = new BitSet(new long[]{0xBFE80001D1541C50L,0x0000078700C00080L});
    public static final BitSet FOLLOW_imports_in_styleSheet151 = new BitSet(new long[]{0xBFE80001D1541C50L,0x0000078700C00080L});
    public static final BitSet FOLLOW_namespaces_in_styleSheet162 = new BitSet(new long[]{0xBFE80001D1541C40L,0x0000078700C00080L});
    public static final BitSet FOLLOW_body_in_styleSheet174 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_styleSheet182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespace_in_namespaces199 = new BitSet(new long[]{0x0000000000800012L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_namespaces201 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_NAMESPACE_SYM_in_namespace217 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_namespace219 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_namespacePrefixName_in_namespace223 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_namespace225 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_namespace230 = new BitSet(new long[]{0x0000000000800020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_namespace232 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_namespace235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_namespacePrefixName248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_resourceIdentifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARSET_SYM_in_charSet286 = new BitSet(new long[]{0x0000000000800080L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_charSet288 = new BitSet(new long[]{0x0000000000800080L,0x0000000000180000L});
    public static final BitSet FOLLOW_charSetValue_in_charSet291 = new BitSet(new long[]{0x0000000000800020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_charSet293 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_charSet296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_charSetValue310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_imports324 = new BitSet(new long[]{0x0000000000800402L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_imports326 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_IMPORT_SYM_in_importItem356 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_importItem358 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem361 = new BitSet(new long[]{0x00000000008F0060L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_importItem363 = new BitSet(new long[]{0x00000000000F0060L});
    public static final BitSet FOLLOW_mediaQueryList_in_importItem366 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_importItem368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_SYM_in_importItem399 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_importItem401 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem404 = new BitSet(new long[]{0x00000000008F0860L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_importItem406 = new BitSet(new long[]{0x00000000000F0860L});
    public static final BitSet FOLLOW_COMMA_in_importItem410 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_importItem412 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem415 = new BitSet(new long[]{0x00000000000F0860L});
    public static final BitSet FOLLOW_mediaQueryList_in_importItem419 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_importItem421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIA_SYM_in_media437 = new BitSet(new long[]{0x01E00000009FA040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_media439 = new BitSet(new long[]{0x01E00000001FA040L});
    public static final BitSet FOLLOW_sass_mq_interpolation_expression_in_media494 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_media496 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_mediaQueryList_in_media530 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_media559 = new BitSet(new long[]{0xBFE8000151D45840L,0x0000138740580080L});
    public static final BitSet FOLLOW_ws_in_media561 = new BitSet(new long[]{0xBFE8000151545840L,0x0000138740400080L});
    public static final BitSet FOLLOW_declaration_in_media647 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_media649 = new BitSet(new long[]{0xBFE8000151D45840L,0x0000138740580080L});
    public static final BitSet FOLLOW_ws_in_media651 = new BitSet(new long[]{0xBFE8000151545840L,0x0000138740400080L});
    public static final BitSet FOLLOW_sass_extend_in_media674 = new BitSet(new long[]{0xBFE8000151D45840L,0x0000138740580080L});
    public static final BitSet FOLLOW_ws_in_media676 = new BitSet(new long[]{0xBFE8000151545840L,0x0000138740400080L});
    public static final BitSet FOLLOW_sass_debug_in_media699 = new BitSet(new long[]{0xBFE8000151D45840L,0x0000138740580080L});
    public static final BitSet FOLLOW_ws_in_media701 = new BitSet(new long[]{0xBFE8000151545840L,0x0000138740400080L});
    public static final BitSet FOLLOW_sass_control_in_media724 = new BitSet(new long[]{0xBFE8000151D45840L,0x0000138740580080L});
    public static final BitSet FOLLOW_ws_in_media726 = new BitSet(new long[]{0xBFE8000151545840L,0x0000138740400080L});
    public static final BitSet FOLLOW_sass_content_in_media749 = new BitSet(new long[]{0xBFE8000151D45840L,0x0000138740580080L});
    public static final BitSet FOLLOW_ws_in_media751 = new BitSet(new long[]{0xBFE8000151545840L,0x0000138740400080L});
    public static final BitSet FOLLOW_rule_in_media789 = new BitSet(new long[]{0xBFE8000151D45840L,0x0000138740580080L});
    public static final BitSet FOLLOW_ws_in_media792 = new BitSet(new long[]{0xBFE8000151545840L,0x0000138740400080L});
    public static final BitSet FOLLOW_page_in_media813 = new BitSet(new long[]{0xBFE8000151D45840L,0x0000138740580080L});
    public static final BitSet FOLLOW_ws_in_media816 = new BitSet(new long[]{0xBFE8000151545840L,0x0000138740400080L});
    public static final BitSet FOLLOW_fontFace_in_media837 = new BitSet(new long[]{0xBFE8000151D45840L,0x0000138740580080L});
    public static final BitSet FOLLOW_ws_in_media840 = new BitSet(new long[]{0xBFE8000151545840L,0x0000138740400080L});
    public static final BitSet FOLLOW_vendorAtRule_in_media861 = new BitSet(new long[]{0xBFE8000151D45840L,0x0000138740580080L});
    public static final BitSet FOLLOW_ws_in_media864 = new BitSet(new long[]{0xBFE8000151545840L,0x0000138740400080L});
    public static final BitSet FOLLOW_media_in_media936 = new BitSet(new long[]{0xBFE8000151D45840L,0x0000138740580080L});
    public static final BitSet FOLLOW_ws_in_media938 = new BitSet(new long[]{0xBFE8000151545840L,0x0000138740400080L});
    public static final BitSet FOLLOW_RBRACE_in_media983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList999 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_mediaQueryList1003 = new BitSet(new long[]{0x00000000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaQueryList1005 = new BitSet(new long[]{0x00000000000F0040L});
    public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList1008 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_mediaQueryOperator_in_mediaQuery1027 = new BitSet(new long[]{0x0000000000870040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery1029 = new BitSet(new long[]{0x0000000000070040L});
    public static final BitSet FOLLOW_mediaType_in_mediaQuery1036 = new BitSet(new long[]{0x0000000000808002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery1038 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_AND_in_mediaQuery1043 = new BitSet(new long[]{0x00000000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery1045 = new BitSet(new long[]{0x00000000000F0040L});
    public static final BitSet FOLLOW_mediaExpression_in_mediaQuery1048 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_mediaExpression_in_mediaQuery1056 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_AND_in_mediaQuery1060 = new BitSet(new long[]{0x00000000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery1062 = new BitSet(new long[]{0x00000000000F0040L});
    public static final BitSet FOLLOW_mediaExpression_in_mediaQuery1065 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_set_in_mediaQueryOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_mediaType0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_mediaExpression1120 = new BitSet(new long[]{0x0000000000C41040L,0x0000000000180080L});
    public static final BitSet FOLLOW_ws_in_mediaExpression1122 = new BitSet(new long[]{0x0000000000C41040L,0x0000000000180080L});
    public static final BitSet FOLLOW_mediaFeature_in_mediaExpression1125 = new BitSet(new long[]{0x0000000000B00000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaExpression1127 = new BitSet(new long[]{0x0000000000300000L});
    public static final BitSet FOLLOW_COLON_in_mediaExpression1132 = new BitSet(new long[]{0x00A4000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_mediaExpression1134 = new BitSet(new long[]{0x00A4000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_expression_in_mediaExpression1137 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaExpression1139 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_mediaExpression1144 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaExpression1146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_mediaFeature1162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_mediaFeature1166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_mediaFeature1172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bodyItem_in_body1188 = new BitSet(new long[]{0xBFE80001D1D41C42L,0x0000078700D80080L});
    public static final BitSet FOLLOW_ws_in_body1190 = new BitSet(new long[]{0xBFE80001D1541C42L,0x0000078700C00080L});
    public static final BitSet FOLLOW_cp_mixin_call_in_bodyItem1232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_bodyItem1241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_media_in_bodyItem1253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_page_in_bodyItem1265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_counterStyle_in_bodyItem1277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fontFace_in_bodyItem1289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vendorAtRule_in_bodyItem1301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_declaration_in_bodyItem1315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_bodyItem1329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_debug_in_bodyItem1344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_control_in_bodyItem1358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_function_declaration_in_bodyItem1372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moz_document_in_vendorAtRule1394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_webkitKeyframes_in_vendorAtRule1398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_generic_at_rule_in_vendorAtRule1402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_atRuleId0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_IDENT_in_generic_at_rule1438 = new BitSet(new long[]{0x00000000008020C0L});
    public static final BitSet FOLLOW_WS_in_generic_at_rule1440 = new BitSet(new long[]{0x00000000008020C0L});
    public static final BitSet FOLLOW_atRuleId_in_generic_at_rule1445 = new BitSet(new long[]{0x0000000000802000L});
    public static final BitSet FOLLOW_WS_in_generic_at_rule1447 = new BitSet(new long[]{0x0000000000802000L});
    public static final BitSet FOLLOW_LBRACE_in_generic_at_rule1462 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_syncTo_RBRACE_in_generic_at_rule1474 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_generic_at_rule1484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document1500 = new BitSet(new long[]{0x000000000E800100L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_moz_document1502 = new BitSet(new long[]{0x000000000E800100L,0x0000000000180000L});
    public static final BitSet FOLLOW_moz_document_function_in_moz_document1507 = new BitSet(new long[]{0x0000000000802800L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_moz_document1509 = new BitSet(new long[]{0x0000000000002800L});
    public static final BitSet FOLLOW_COMMA_in_moz_document1515 = new BitSet(new long[]{0x000000000E800100L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_moz_document1517 = new BitSet(new long[]{0x000000000E800100L,0x0000000000180000L});
    public static final BitSet FOLLOW_moz_document_function_in_moz_document1520 = new BitSet(new long[]{0x0000000000802800L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_moz_document1522 = new BitSet(new long[]{0x0000000000002800L});
    public static final BitSet FOLLOW_LBRACE_in_moz_document1529 = new BitSet(new long[]{0xBFE80001D1D45C40L,0x0000078700D80080L});
    public static final BitSet FOLLOW_ws_in_moz_document1531 = new BitSet(new long[]{0xBFE80001D1545C40L,0x0000078700C00080L});
    public static final BitSet FOLLOW_body_in_moz_document1536 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_moz_document1541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_moz_document_function0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes1582 = new BitSet(new long[]{0x00000000008000C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1584 = new BitSet(new long[]{0x00000000000000C0L});
    public static final BitSet FOLLOW_atRuleId_in_webkitKeyframes1587 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1589 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_webkitKeyframes1594 = new BitSet(new long[]{0x0000000020804040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1596 = new BitSet(new long[]{0x0000000020004040L});
    public static final BitSet FOLLOW_webkitKeyframesBlock_in_webkitKeyframes1603 = new BitSet(new long[]{0x0000000020804040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1605 = new BitSet(new long[]{0x0000000020004040L});
    public static final BitSet FOLLOW_RBRACE_in_webkitKeyframes1612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock1625 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock1627 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_webkitKeyframesBlock1632 = new BitSet(new long[]{0xBFE8000000D45C60L,0x00001B8740D80080L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock1635 = new BitSet(new long[]{0xBFE8000000545C60L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_syncToFollow_in_webkitKeyframesBlock1638 = new BitSet(new long[]{0xBFE8000000545C60L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_declarations_in_webkitKeyframesBlock1642 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_webkitKeyframesBlock1645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_webkitKeyframeSelectors1660 = new BitSet(new long[]{0x0000000000800802L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors1672 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_webkitKeyframeSelectors1675 = new BitSet(new long[]{0x0000000020800040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors1677 = new BitSet(new long[]{0x0000000020000040L});
    public static final BitSet FOLLOW_set_in_webkitKeyframeSelectors1680 = new BitSet(new long[]{0x0000000000800802L,0x0000000000180000L});
    public static final BitSet FOLLOW_PAGE_SYM_in_page1709 = new BitSet(new long[]{0x0000000000902040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_page1711 = new BitSet(new long[]{0x0000000000102040L});
    public static final BitSet FOLLOW_IDENT_in_page1716 = new BitSet(new long[]{0x0000000000902000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_page1718 = new BitSet(new long[]{0x0000000000102000L});
    public static final BitSet FOLLOW_pseudoPage_in_page1725 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_page1727 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_page1740 = new BitSet(new long[]{0x11E1FFFE00C45060L,0x0000000000180080L});
    public static final BitSet FOLLOW_ws_in_page1742 = new BitSet(new long[]{0x11E1FFFE00445060L,0x0000000000000080L});
    public static final BitSet FOLLOW_declaration_in_page1797 = new BitSet(new long[]{0x0000000000004020L});
    public static final BitSet FOLLOW_margin_in_page1799 = new BitSet(new long[]{0x0000000000804020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_page1801 = new BitSet(new long[]{0x0000000000004020L});
    public static final BitSet FOLLOW_SEMI_in_page1807 = new BitSet(new long[]{0x11E1FFFE00C45060L,0x0000000000180080L});
    public static final BitSet FOLLOW_ws_in_page1809 = new BitSet(new long[]{0x11E1FFFE00445060L,0x0000000000000080L});
    public static final BitSet FOLLOW_declaration_in_page1813 = new BitSet(new long[]{0x0000000000004020L});
    public static final BitSet FOLLOW_margin_in_page1815 = new BitSet(new long[]{0x0000000000804020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_page1817 = new BitSet(new long[]{0x0000000000004020L});
    public static final BitSet FOLLOW_RBRACE_in_page1832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNTER_STYLE_SYM_in_counterStyle1853 = new BitSet(new long[]{0x0000000000800040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_counterStyle1855 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_counterStyle1858 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_counterStyle1860 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_counterStyle1871 = new BitSet(new long[]{0xBFE8000000D45C60L,0x00001B8740D80080L});
    public static final BitSet FOLLOW_ws_in_counterStyle1873 = new BitSet(new long[]{0xBFE8000000545C60L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_syncToDeclarationsRule_in_counterStyle1876 = new BitSet(new long[]{0xBFE8000000545C60L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_declarations_in_counterStyle1880 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_counterStyle1890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FONT_FACE_SYM_in_fontFace1911 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_fontFace1913 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_fontFace1924 = new BitSet(new long[]{0xBFE8000000D45C60L,0x00001B8740D80080L});
    public static final BitSet FOLLOW_ws_in_fontFace1926 = new BitSet(new long[]{0xBFE8000000545C60L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_syncToDeclarationsRule_in_fontFace1929 = new BitSet(new long[]{0xBFE8000000545C60L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_declarations_in_fontFace1933 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_fontFace1943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_margin_sym_in_margin1958 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_margin1960 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_margin1963 = new BitSet(new long[]{0xBFE8000000D45C60L,0x00001B8740D80080L});
    public static final BitSet FOLLOW_ws_in_margin1965 = new BitSet(new long[]{0xBFE8000000545C60L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_syncToDeclarationsRule_in_margin1968 = new BitSet(new long[]{0xBFE8000000545C60L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_declarations_in_margin1970 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_margin1972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_margin_sym0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_pseudoPage2201 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_pseudoPage2203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_combinator2253 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_combinator2255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_in_combinator2264 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_combinator2266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_combinator2275 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_combinator2277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_unaryOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_declaration_interpolation_expression_in_property2384 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_IDENT_in_property2396 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_GEN_in_property2409 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_cp_variable_in_property2424 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_property2432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_declaration_in_rule2496 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_selectorsGroup_in_rule2526 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_rule2548 = new BitSet(new long[]{0xBFE8000000D45C60L,0x00001B8740D80080L});
    public static final BitSet FOLLOW_ws_in_rule2550 = new BitSet(new long[]{0xBFE8000000545C60L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_syncToFollow_in_rule2553 = new BitSet(new long[]{0xBFE8000000545C60L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_declarations_in_rule2567 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_rule2577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_declaration_in_declarations2643 = new BitSet(new long[]{0xBFE8000000D41C62L,0x00001B8740D80080L});
    public static final BitSet FOLLOW_ws_in_declarations2645 = new BitSet(new long[]{0xBFE8000000541C62L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_declaration_in_declarations2726 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_declarations2728 = new BitSet(new long[]{0xBFE8000000D41C62L,0x00001B8740D80080L});
    public static final BitSet FOLLOW_ws_in_declarations2730 = new BitSet(new long[]{0xBFE8000000541C62L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_declaration_in_declarations2815 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_declarations2817 = new BitSet(new long[]{0xBFE8000000D41C62L,0x00001B8740D80080L});
    public static final BitSet FOLLOW_ws_in_declarations2819 = new BitSet(new long[]{0xBFE8000000541C62L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_sass_nested_properties_in_declarations2832 = new BitSet(new long[]{0xBFE8000000D41C62L,0x00001B8740D80080L});
    public static final BitSet FOLLOW_ws_in_declarations2834 = new BitSet(new long[]{0xBFE8000000541C62L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_rule_in_declarations2861 = new BitSet(new long[]{0xBFE8000000D41C62L,0x00001B8740D80080L});
    public static final BitSet FOLLOW_ws_in_declarations2863 = new BitSet(new long[]{0xBFE8000000541C62L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_sass_extend_in_declarations2902 = new BitSet(new long[]{0xBFE8000000D41C62L,0x00001B8740D80080L});
    public static final BitSet FOLLOW_ws_in_declarations2904 = new BitSet(new long[]{0xBFE8000000541C62L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_sass_debug_in_declarations2943 = new BitSet(new long[]{0xBFE8000000D41C62L,0x00001B8740D80080L});
    public static final BitSet FOLLOW_ws_in_declarations2945 = new BitSet(new long[]{0xBFE8000000541C62L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_sass_control_in_declarations2984 = new BitSet(new long[]{0xBFE8000000D41C62L,0x00001B8740D80080L});
    public static final BitSet FOLLOW_ws_in_declarations2986 = new BitSet(new long[]{0xBFE8000000541C62L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_media_in_declarations3025 = new BitSet(new long[]{0xBFE8000000D41C62L,0x00001B8740D80080L});
    public static final BitSet FOLLOW_ws_in_declarations3027 = new BitSet(new long[]{0xBFE8000000541C62L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_cp_mixin_call_in_declarations3066 = new BitSet(new long[]{0xBFE8000000D41C62L,0x00001B8740D80080L});
    public static final BitSet FOLLOW_ws_in_declarations3068 = new BitSet(new long[]{0xBFE8000000541C62L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_sass_content_in_declarations3107 = new BitSet(new long[]{0xBFE8000000D41C62L,0x00001B8740D80080L});
    public static final BitSet FOLLOW_ws_in_declarations3109 = new BitSet(new long[]{0xBFE8000000541C62L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_sass_function_return_in_declarations3148 = new BitSet(new long[]{0xBFE8000000D41C62L,0x00001B8740D80080L});
    public static final BitSet FOLLOW_ws_in_declarations3150 = new BitSet(new long[]{0xBFE8000000541C62L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_importItem_in_declarations3190 = new BitSet(new long[]{0xBFE8000000D41C62L,0x00001B8740D80080L});
    public static final BitSet FOLLOW_ws_in_declarations3192 = new BitSet(new long[]{0xBFE8000000541C62L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_syncTo_SEMI_in_declarations3237 = new BitSet(new long[]{0xBFE8000000541C62L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_declaration_in_declarations3267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_selector_interpolation_expression_in_selectorsGroup3327 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_selectorsGroup3329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_in_selectorsGroup3344 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_selectorsGroup3347 = new BitSet(new long[]{0xBFE8000000940840L,0x0000000000580000L});
    public static final BitSet FOLLOW_ws_in_selectorsGroup3349 = new BitSet(new long[]{0xBFE8000000140840L,0x0000000000400000L});
    public static final BitSet FOLLOW_selector_in_selectorsGroup3352 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_selector3379 = new BitSet(new long[]{0xBFFC000000140842L,0x0000000000400000L});
    public static final BitSet FOLLOW_combinator_in_selector3382 = new BitSet(new long[]{0xBFE8000000140840L,0x0000000000400000L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_selector3384 = new BitSet(new long[]{0xBFFC000000140842L,0x0000000000400000L});
    public static final BitSet FOLLOW_typeSelector_in_simpleSelectorSequence3417 = new BitSet(new long[]{0xBFE8000000140842L,0x0000000000400000L});
    public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence3424 = new BitSet(new long[]{0xBFE8000000940842L,0x0000000000580000L});
    public static final BitSet FOLLOW_ws_in_simpleSelectorSequence3426 = new BitSet(new long[]{0xBFE8000000140842L,0x0000000000400000L});
    public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence3445 = new BitSet(new long[]{0xBFE8000000940842L,0x0000000000580000L});
    public static final BitSet FOLLOW_ws_in_simpleSelectorSequence3447 = new BitSet(new long[]{0xBFE8000000140842L,0x0000000000400000L});
    public static final BitSet FOLLOW_set_in_esPred0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespacePrefix_in_typeSelector3563 = new BitSet(new long[]{0xB000000000040040L});
    public static final BitSet FOLLOW_elementName_in_typeSelector3569 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_typeSelector3571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespacePrefixName_in_namespacePrefix3589 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_STAR_in_namespacePrefix3593 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_PIPE_in_namespacePrefix3597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_extend_only_selector_in_elementSubsequent3636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cssId_in_elementSubsequent3645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cssClass_in_elementSubsequent3654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_slAttribute_in_elementSubsequent3666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pseudo_in_elementSubsequent3678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_in_cssId3706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_cssId3712 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_NAME_in_cssId3714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_cssClass3742 = new BitSet(new long[]{0x0000000000040040L});
    public static final BitSet FOLLOW_set_in_cssClass3744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_elementName0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_slAttribute3816 = new BitSet(new long[]{0x3000000000800040L,0x0000000000180000L});
    public static final BitSet FOLLOW_namespacePrefix_in_slAttribute3823 = new BitSet(new long[]{0x3000000000800040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_slAttribute3826 = new BitSet(new long[]{0x3000000000800040L,0x0000000000180000L});
    public static final BitSet FOLLOW_slAttributeName_in_slAttribute3837 = new BitSet(new long[]{0x0000000000800000L,0x000000000018007FL});
    public static final BitSet FOLLOW_ws_in_slAttribute3839 = new BitSet(new long[]{0x0000000000000000L,0x000000000000007FL});
    public static final BitSet FOLLOW_set_in_slAttribute3881 = new BitSet(new long[]{0x00000000008000C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_slAttribute4061 = new BitSet(new long[]{0x00000000008000C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_slAttributeValue_in_slAttribute4080 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180040L});
    public static final BitSet FOLLOW_ws_in_slAttribute4098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RBRACKET_in_slAttribute4127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_slAttributeName4143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_slAttributeValue4157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_pseudo4217 = new BitSet(new long[]{0x0000000000060040L});
    public static final BitSet FOLLOW_set_in_pseudo4281 = new BitSet(new long[]{0x0000000000880002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_pseudo4338 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_pseudo4341 = new BitSet(new long[]{0x10A4000020E411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_pseudo4343 = new BitSet(new long[]{0x10A4000020E411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_expression_in_pseudo4349 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_pseudo4351 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_STAR_in_pseudo4357 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_pseudo4362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_pseudo4441 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_pseudo4443 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_pseudo4446 = new BitSet(new long[]{0xBFE8000000B40840L,0x0000000000580000L});
    public static final BitSet FOLLOW_ws_in_pseudo4448 = new BitSet(new long[]{0xBFE8000000340840L,0x0000000000400000L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_pseudo4451 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_pseudo4454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_declaration4493 = new BitSet(new long[]{0x11E0000000441040L,0x0000000000000080L});
    public static final BitSet FOLLOW_property_in_declaration4496 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_COLON_in_declaration4498 = new BitSet(new long[]{0x00A4000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_declaration4500 = new BitSet(new long[]{0x00A4000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_propertyValue_in_declaration4503 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180100L});
    public static final BitSet FOLLOW_ws_in_declaration4505 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_prio_in_declaration4509 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_declaration4511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_declaration4524 = new BitSet(new long[]{0x11E0000000441040L,0x0000000000000080L});
    public static final BitSet FOLLOW_property_in_declaration4527 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_COLON_in_declaration4529 = new BitSet(new long[]{0x01E6000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_declaration4531 = new BitSet(new long[]{0x01E6000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_propertyValue_in_declaration4534 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_declaration4536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_declaration_property_value_interpolation_expression_in_cp_propertyValue4597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_propertyValue4607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyValue_in_cp_propertyValue4615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertyValue4637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_expressionPredicate4673 = new BitSet(new long[]{0xEFFDFFFFFFBFDFF0L,0xFFFFFFFFFFFFFF7FL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_set_in_expressionPredicate4706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_syncTo_SEMI4824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_prio4879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_in_expression4900 = new BitSet(new long[]{0x00A6000020C419C2L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_expression4906 = new BitSet(new long[]{0x00A4000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_operator_in_expression4911 = new BitSet(new long[]{0x00A4000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_expression4913 = new BitSet(new long[]{0x00A4000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_term_in_expression4919 = new BitSet(new long[]{0x00A6000020C419C2L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_unaryOperator_in_term4949 = new BitSet(new long[]{0x0080000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_term4951 = new BitSet(new long[]{0x00800000204411C0L,0x000000000007FE80L});
    public static final BitSet FOLLOW_function_in_term4975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_term4987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_term4999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENTAGE_in_term5011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LENGTH_in_term5023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMS_in_term5035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REM_in_term5047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXS_in_term5059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANGLE_in_term5071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIME_in_term5083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FREQ_in_term5095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RESOLUTION_in_term5107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIMENSION_in_term5119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_term5136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_term5148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_URI_in_term5160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hexColor_in_term5172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_term5186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionName_in_function5207 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_function5209 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_function5214 = new BitSet(new long[]{0x00E4000020EC11C0L,0x00000000031FFF80L});
    public static final BitSet FOLLOW_ws_in_function5216 = new BitSet(new long[]{0x00E4000020EC11C0L,0x00000000031FFF80L});
    public static final BitSet FOLLOW_cp_args_list_in_function5247 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_cp_expression_list_in_function5275 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_function5277 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_expression_in_function5302 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_function5304 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_fnAttribute_in_function5329 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_COMMA_in_function5332 = new BitSet(new long[]{0x0000000000800040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_function5334 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_fnAttribute_in_function5337 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_RPAREN_in_function5393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_functionName5450 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_COLON_in_functionName5452 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_functionName5456 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_DOT_in_functionName5459 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_functionName5461 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_fnAttributeName_in_fnAttribute5484 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180001L});
    public static final BitSet FOLLOW_ws_in_fnAttribute5486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_OPEQ_in_fnAttribute5489 = new BitSet(new long[]{0x00A4000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_fnAttribute5491 = new BitSet(new long[]{0x00A4000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_fnAttributeValue_in_fnAttribute5494 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_fnAttribute5496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_fnAttributeName5512 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_DOT_in_fnAttributeName5515 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_fnAttributeName5517 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_expression_in_fnAttributeValue5531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_in_hexColor5549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ws5570 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration5618 = new BitSet(new long[]{0x0000000000900000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5620 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_COLON_in_cp_variable_declaration5623 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5625 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration5628 = new BitSet(new long[]{0x0000000000800020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5630 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_cp_variable_declaration5633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration5660 = new BitSet(new long[]{0x0000000000900000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5662 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_COLON_in_cp_variable_declaration5665 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5667 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration5670 = new BitSet(new long[]{0x0000000000800020L,0x0000000000380000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5672 = new BitSet(new long[]{0x0000000000000020L,0x0000000000200000L});
    public static final BitSet FOLLOW_SASS_DEFAULT_in_cp_variable_declaration5676 = new BitSet(new long[]{0x0000000000800020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5678 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_cp_variable_declaration5683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_cp_variable5716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_VAR_in_cp_variable5748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_in_cp_expression_list5772 = new BitSet(new long[]{0x0000000000800802L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_expression_list5775 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_cp_expression_list5778 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression_list5780 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_cp_expression_list5783 = new BitSet(new long[]{0x0000000000800802L,0x0000000000180000L});
    public static final BitSet FOLLOW_cp_additionExp_in_cp_expression5816 = new BitSet(new long[]{0x00E4000020CC11C2L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression5823 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_additionExp_in_cp_expression5826 = new BitSet(new long[]{0x00E4000020CC11C2L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_multiplyExp_in_cp_additionExp5848 = new BitSet(new long[]{0x0024000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_additionExp5888 = new BitSet(new long[]{0x0024000000000000L});
    public static final BitSet FOLLOW_PLUS_in_cp_additionExp5893 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_additionExp5895 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_multiplyExp_in_cp_additionExp5898 = new BitSet(new long[]{0x0024000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_MINUS_in_cp_additionExp5902 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_additionExp5904 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_multiplyExp_in_cp_additionExp5907 = new BitSet(new long[]{0x0024000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_cp_atomExp_in_cp_multiplyExp5942 = new BitSet(new long[]{0x1002000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_multiplyExp5982 = new BitSet(new long[]{0x1002000000000000L});
    public static final BitSet FOLLOW_STAR_in_cp_multiplyExp5987 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_multiplyExp5989 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_atomExp_in_cp_multiplyExp5992 = new BitSet(new long[]{0x1002000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_SOLIDUS_in_cp_multiplyExp5996 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_multiplyExp5998 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_atomExp_in_cp_multiplyExp6001 = new BitSet(new long[]{0x1002000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_term_in_cp_atomExp6040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_cp_atomExp6048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_cp_atomExp6057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryOperator_in_cp_atomExp6068 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_atomExp6070 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_atomExp6076 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_atomExp6078 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_additionExp_in_cp_atomExp6081 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_atomExp6083 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_atomExp6086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_cp_term6125 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_STRING_in_cp_term6325 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_IDENT_in_cp_term6333 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_GEN_in_cp_term6341 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_URI_in_cp_term6349 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_hexColor_in_cp_term6357 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_function_in_cp_term6365 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_cp_variable_in_cp_term6373 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_term6385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_cp_mixin_declaration6416 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration6418 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6420 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration6423 = new BitSet(new long[]{0x0000000000E01000L,0x0000000003180080L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6425 = new BitSet(new long[]{0x0000000000601000L,0x0000000003000080L});
    public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration6428 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration6431 = new BitSet(new long[]{0x0000000000800002L,0x0000000004180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6433 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_less_mixin_guarded_in_cp_mixin_declaration6437 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_cp_mixin_declaration6456 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6458 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration6460 = new BitSet(new long[]{0x0000000000880002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6462 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration6466 = new BitSet(new long[]{0x0000000000E01000L,0x0000000003180080L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6468 = new BitSet(new long[]{0x0000000000601000L,0x0000000003000080L});
    public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration6471 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration6474 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_cp_mixin_call6518 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call6520 = new BitSet(new long[]{0x0000000000880020L,0x0000000000180000L});
    public static final BitSet FOLLOW_SASS_INCLUDE_in_cp_mixin_call6542 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6544 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call6546 = new BitSet(new long[]{0x0000000000880020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6559 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_call6562 = new BitSet(new long[]{0x00E4000020EC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6564 = new BitSet(new long[]{0x00E4000020EC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_mixin_call_args_in_cp_mixin_call6567 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_call6570 = new BitSet(new long[]{0x0000000000800020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6574 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_cp_mixin_call6577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_cp_mixin_name6606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6642 = new BitSet(new long[]{0x0000000000000822L});
    public static final BitSet FOLLOW_set_in_cp_mixin_call_args6646 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_args6654 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6657 = new BitSet(new long[]{0x0000000000000822L});
    public static final BitSet FOLLOW_cp_variable_in_cp_mixin_call_arg6699 = new BitSet(new long[]{0x0000000000900000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6701 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_COLON_in_cp_mixin_call_arg6704 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6706 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg6709 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg6721 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_arg_in_cp_args_list6765 = new BitSet(new long[]{0x0000000000000822L});
    public static final BitSet FOLLOW_set_in_cp_args_list6769 = new BitSet(new long[]{0x0000000000C01000L,0x0000000000180080L});
    public static final BitSet FOLLOW_ws_in_cp_args_list6779 = new BitSet(new long[]{0x0000000000401000L,0x0000000000000080L});
    public static final BitSet FOLLOW_cp_arg_in_cp_args_list6782 = new BitSet(new long[]{0x0000000000000822L});
    public static final BitSet FOLLOW_set_in_cp_args_list6788 = new BitSet(new long[]{0x0000000000800000L,0x0000000003180000L});
    public static final BitSet FOLLOW_ws_in_cp_args_list6798 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_set_in_cp_args_list6801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_cp_args_list6823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_cp_arg6855 = new BitSet(new long[]{0x0000000000900002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_arg6857 = new BitSet(new long[]{0x0000000000100002L});
    public static final BitSet FOLLOW_COLON_in_cp_arg6862 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_arg6864 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_cp_arg6867 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_arg6869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_WHEN_in_less_mixin_guarded6895 = new BitSet(new long[]{0x00000000008A0000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_less_mixin_guarded6897 = new BitSet(new long[]{0x00000000008A0000L,0x0000000000180000L});
    public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded6900 = new BitSet(new long[]{0x0000000000008802L});
    public static final BitSet FOLLOW_set_in_less_mixin_guarded6904 = new BitSet(new long[]{0x00000000008A0000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_less_mixin_guarded6912 = new BitSet(new long[]{0x00000000008A0000L,0x0000000000180000L});
    public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded6915 = new BitSet(new long[]{0x0000000000008802L});
    public static final BitSet FOLLOW_NOT_in_less_condition6945 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_less_condition6947 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_less_condition6956 = new BitSet(new long[]{0x0000000000C01040L,0x0000000000180080L});
    public static final BitSet FOLLOW_ws_in_less_condition6958 = new BitSet(new long[]{0x0000000000401040L,0x0000000000000080L});
    public static final BitSet FOLLOW_less_function_in_condition_in_less_condition6984 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_less_condition6986 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_cp_variable_in_less_condition7017 = new BitSet(new long[]{0x0008000000A00000L,0x0000000038180001L});
    public static final BitSet FOLLOW_ws_in_less_condition7020 = new BitSet(new long[]{0x0008000000800000L,0x0000000038180001L});
    public static final BitSet FOLLOW_less_condition_operator_in_less_condition7023 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_less_condition7025 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_less_condition7028 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_less_condition7057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_less_fn_name_in_less_function_in_condition7083 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_less_function_in_condition7085 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_less_function_in_condition7088 = new BitSet(new long[]{0x0000000000C01000L,0x0000000000180080L});
    public static final BitSet FOLLOW_ws_in_less_function_in_condition7090 = new BitSet(new long[]{0x0000000000401000L,0x0000000000000080L});
    public static final BitSet FOLLOW_cp_variable_in_less_function_in_condition7093 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_less_function_in_condition7095 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_less_function_in_condition7098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_less_fn_name7120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_less_condition_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7217 = new BitSet(new long[]{0x91E8000000900842L,0x0000000000180000L});
    public static final BitSet FOLLOW_set_in_sass_selector_interpolation_expression7245 = new BitSet(new long[]{0x91E8000000900842L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_selector_interpolation_expression7319 = new BitSet(new long[]{0x91E8000000100840L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7356 = new BitSet(new long[]{0x91E8000000900842L,0x0000000000180000L});
    public static final BitSet FOLLOW_set_in_sass_selector_interpolation_expression7392 = new BitSet(new long[]{0x91E8000000900842L,0x0000000000180000L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7504 = new BitSet(new long[]{0x01E0000000800042L,0x0000000000180000L});
    public static final BitSet FOLLOW_set_in_sass_declaration_interpolation_expression7532 = new BitSet(new long[]{0x01E0000000800042L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_declaration_interpolation_expression7585 = new BitSet(new long[]{0x01E0000000000040L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7622 = new BitSet(new long[]{0x01E0000000800042L,0x0000000000180000L});
    public static final BitSet FOLLOW_set_in_sass_declaration_interpolation_expression7658 = new BitSet(new long[]{0x01E0000000800042L,0x0000000000180000L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_declaration_property_value_interpolation_expression7746 = new BitSet(new long[]{0x01E2000000800042L,0x0000000000180000L});
    public static final BitSet FOLLOW_set_in_sass_declaration_property_value_interpolation_expression7775 = new BitSet(new long[]{0x01E2000000800042L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_declaration_property_value_interpolation_expression7833 = new BitSet(new long[]{0x01E2000000000040L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_declaration_property_value_interpolation_expression7870 = new BitSet(new long[]{0x01E2000000800042L,0x0000000000180000L});
    public static final BitSet FOLLOW_set_in_sass_declaration_property_value_interpolation_expression7907 = new BitSet(new long[]{0x01E2000000800042L,0x0000000000180000L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_mq_interpolation_expression8004 = new BitSet(new long[]{0x01E0000000928042L,0x0000000000180000L});
    public static final BitSet FOLLOW_set_in_sass_mq_interpolation_expression8032 = new BitSet(new long[]{0x01E0000000928042L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_mq_interpolation_expression8097 = new BitSet(new long[]{0x01E0000000128040L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_mq_interpolation_expression8134 = new BitSet(new long[]{0x01E0000000928042L,0x0000000000180000L});
    public static final BitSet FOLLOW_set_in_sass_mq_interpolation_expression8170 = new BitSet(new long[]{0x01E0000000928042L,0x0000000000180000L});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var8255 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_sass_interpolation_expression_var8257 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_sass_interpolation_expression_var8259 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_interpolation_expression_var8261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_sass_nested_properties8305 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_COLON_in_sass_nested_properties8307 = new BitSet(new long[]{0x00A4000020C431C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties8309 = new BitSet(new long[]{0x00A4000020C431C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_propertyValue_in_sass_nested_properties8313 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties8315 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_sass_nested_properties8320 = new BitSet(new long[]{0xBFE8000000D45C60L,0x00001B8740D80080L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties8322 = new BitSet(new long[]{0xBFE8000000545C60L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_syncToFollow_in_sass_nested_properties8325 = new BitSet(new long[]{0xBFE8000000545C60L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_declarations_in_sass_nested_properties8327 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_nested_properties8329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_EXTEND_in_sass_extend8350 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_extend8352 = new BitSet(new long[]{0xBFE8000000140840L,0x0000000000400000L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_sass_extend8354 = new BitSet(new long[]{0x0000000000000020L,0x0000000080000000L});
    public static final BitSet FOLLOW_SASS_OPTIONAL_in_sass_extend8357 = new BitSet(new long[]{0x0000000000800020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_extend8359 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_sass_extend8364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector8389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_sass_debug8410 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_debug8420 = new BitSet(new long[]{0x00E4000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_full_expression_in_sass_debug8422 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_sass_debug8424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_if_in_sass_control8449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_for_in_sass_control8453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_each_in_sass_control8457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_while_in_sass_control8461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_IF_in_sass_if8482 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_if8484 = new BitSet(new long[]{0x00E4000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_sass_control_expression_in_sass_if8486 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_if8488 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_if8491 = new BitSet(new long[]{0x0000000000800002L,0x0000000800180000L});
    public static final BitSet FOLLOW_ws_in_sass_if8494 = new BitSet(new long[]{0x0000000000800000L,0x0000000800180000L});
    public static final BitSet FOLLOW_sass_else_in_sass_if8497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_ELSE_in_sass_else8524 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_else8526 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_else8529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_ELSE_in_sass_else8542 = new BitSet(new long[]{0x0000000000800040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_else8544 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_else8549 = new BitSet(new long[]{0x00E4000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_sass_else8553 = new BitSet(new long[]{0x00E4000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_sass_control_expression_in_sass_else8556 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_else8558 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_else8561 = new BitSet(new long[]{0x0000000000800002L,0x0000000800180000L});
    public static final BitSet FOLLOW_ws_in_sass_else8564 = new BitSet(new long[]{0x0000000000800000L,0x0000000800180000L});
    public static final BitSet FOLLOW_sass_else_in_sass_else8567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_full_expression_in_sass_control_expression8590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_full_expression_atom_in_cp_full_expression8610 = new BitSet(new long[]{0x0008000000808002L,0x0000007038180000L});
    public static final BitSet FOLLOW_ws_in_cp_full_expression8631 = new BitSet(new long[]{0x0008000000808000L,0x0000007038180000L});
    public static final BitSet FOLLOW_cp_full_expression_operator_in_cp_full_expression8634 = new BitSet(new long[]{0x00E4000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_full_expression8636 = new BitSet(new long[]{0x00E4000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_full_expression_atom_in_cp_full_expression8639 = new BitSet(new long[]{0x0008000000808002L,0x0000007038180000L});
    public static final BitSet FOLLOW_set_in_cp_full_expression_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_cp_full_expression_atom8726 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_full_expression_atom8728 = new BitSet(new long[]{0x00E4000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_cp_full_expression_atom8760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_cp_full_expression_atom8776 = new BitSet(new long[]{0x00E4000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_full_expression_atom8778 = new BitSet(new long[]{0x00E4000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_full_expression_in_cp_full_expression_atom8781 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_full_expression_atom8783 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_full_expression_atom8786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_FOR_in_sass_for8821 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_for8823 = new BitSet(new long[]{0x0000000000401000L,0x0000000000000080L});
    public static final BitSet FOLLOW_cp_variable_in_sass_for8825 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_for8827 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_for8829 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_for8833 = new BitSet(new long[]{0x00800000204411C0L,0x000000000007FE80L});
    public static final BitSet FOLLOW_cp_term_in_sass_for8835 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_for8837 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_for8841 = new BitSet(new long[]{0x00800000204411C0L,0x000000000007FE80L});
    public static final BitSet FOLLOW_cp_term_in_sass_for8843 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_for8845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_EACH_in_sass_each8866 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_each8868 = new BitSet(new long[]{0x0000000000401000L,0x0000000000000080L});
    public static final BitSet FOLLOW_cp_variable_in_sass_each8870 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_each8872 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_each8874 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_each8878 = new BitSet(new long[]{0x00800000204411C0L,0x000000000007FE80L});
    public static final BitSet FOLLOW_sass_each_list_in_sass_each8880 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_each8882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_term_in_sass_each_list8907 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_sass_each_list8910 = new BitSet(new long[]{0x0080000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_sass_each_list8912 = new BitSet(new long[]{0x00800000204411C0L,0x000000000007FE80L});
    public static final BitSet FOLLOW_cp_term_in_sass_each_list8915 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_SASS_WHILE_in_sass_while8942 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_while8944 = new BitSet(new long[]{0x00E4000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_sass_control_expression_in_sass_while8946 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_while8948 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_while8951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_sass_control_block8972 = new BitSet(new long[]{0xBFE8000000D45C60L,0x00001B8740D80080L});
    public static final BitSet FOLLOW_ws_in_sass_control_block8974 = new BitSet(new long[]{0xBFE8000000545C60L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_declarations_in_sass_control_block8977 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_control_block8979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_FUNCTION_in_sass_function_declaration9025 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration9027 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_sass_function_name_in_sass_function_declaration9029 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration9031 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_sass_function_declaration9034 = new BitSet(new long[]{0x0000000000601000L,0x0000000003000080L});
    public static final BitSet FOLLOW_cp_args_list_in_sass_function_declaration9036 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_sass_function_declaration9039 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration9041 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_sass_function_declaration9044 = new BitSet(new long[]{0xBFE8000000D45C60L,0x00001B8740D80080L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration9046 = new BitSet(new long[]{0xBFE8000000545C60L,0x00001B8740C00080L});
    public static final BitSet FOLLOW_declarations_in_sass_function_declaration9049 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_function_declaration9051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_sass_function_name9076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_RETURN_in_sass_function_return9097 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_function_return9099 = new BitSet(new long[]{0x00E4000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_full_expression_in_sass_function_return9101 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_sass_function_return9103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_CONTENT_in_sass_content9128 = new BitSet(new long[]{0x0000000000800020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_content9130 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_sass_content9133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred1_Css3476 = new BitSet(new long[]{0xFFFFFFFFFFFFDFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_synpred1_Css3488 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred1_Css3490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mediaQueryList_in_synpred2_Css3527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred3_Css3613 = new BitSet(new long[]{0xFFFFFFFFFFFF9FD0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_COLON_in_synpred3_Css3625 = new BitSet(new long[]{0xFFFFFFFFFFFF9FD0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_set_in_synpred3_Css3627 = new BitSet(new long[]{0xFFFFFFFFFFFF9FF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_SEMI_in_synpred3_Css3637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_declaration_interpolation_expression_in_synpred3_Css3641 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_COLON_in_synpred3_Css3643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred4_Css31229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred5_Css32371 = new BitSet(new long[]{0xFFFFFFFFFFEFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_synpred5_Css32379 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred5_Css32381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_declaration_in_synpred6_Css32493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_declaration_in_synpred7_Css32640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_synpred8_Css32721 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred8_Css32723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred9_Css32788 = new BitSet(new long[]{0xFFFFFFFFFFFF9FD0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_COLON_in_synpred9_Css32800 = new BitSet(new long[]{0xFFFFFFFFFFFF9FF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_set_in_synpred9_Css32802 = new BitSet(new long[]{0xFFFFFFFFFFFF9FF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_SEMI_in_synpred9_Css32812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_nested_properties_in_synpred10_Css32829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_synpred11_Css32858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred12_Css33230 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_SEMI_in_synpred12_Css33234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred13_Css33309 = new BitSet(new long[]{0xFFFFFFFFFFFFDFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_synpred13_Css33321 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred13_Css33323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_esPred_in_synpred14_Css33421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_esPred_in_synpred15_Css33442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred16_Css33551 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_PIPE_in_synpred16_Css33560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred17_Css34580 = new BitSet(new long[]{0xFFFFFFFFFFFF9FD0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_synpred17_Css34592 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred17_Css34594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_in_synpred18_Css34972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_args_list_in_synpred19_Css35244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_list_in_synpred20_Css35272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred21_Css35875 = new BitSet(new long[]{0x0024000000000000L});
    public static final BitSet FOLLOW_set_in_synpred21_Css35878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred22_Css35969 = new BitSet(new long[]{0x1002000000000000L});
    public static final BitSet FOLLOW_set_in_synpred22_Css35972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred23_Css37214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred24_Css37353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred25_Css37501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred26_Css37619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred27_Css37743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred28_Css37867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred29_Css38001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred30_Css38131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred31_Css38625 = new BitSet(new long[]{0x0008000000808000L,0x0000007038180000L});
    public static final BitSet FOLLOW_cp_full_expression_operator_in_synpred31_Css38628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_in_synpred32_Css38757 = new BitSet(new long[]{0x0000000000000002L});

}