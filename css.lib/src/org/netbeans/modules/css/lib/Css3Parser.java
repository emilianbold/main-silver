// $ANTLR 3.3 Nov 30, 2010 12:50:56 /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g 2013-08-20 11:40:37

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2011 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2011 Sun Microsystems, Inc.
 */
package org.netbeans.modules.css.lib;
    


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.debug.*;
import java.io.IOException;
public class Css3Parser extends DebugParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NAMESPACE_SYM", "SEMI", "IDENT", "STRING", "URI", "CHARSET_SYM", "IMPORT_SYM", "COMMA", "MEDIA_SYM", "LBRACE", "RBRACE", "AND", "ONLY", "NOT", "GEN", "LPAREN", "RPAREN", "COLON", "AT_IDENT", "MOZ_DOCUMENT_SYM", "MOZ_URL_PREFIX", "MOZ_DOMAIN", "MOZ_REGEXP", "WEBKIT_KEYFRAMES_SYM", "PERCENTAGE", "PAGE_SYM", "COUNTER_STYLE_SYM", "FONT_FACE_SYM", "TOPLEFTCORNER_SYM", "TOPLEFT_SYM", "TOPCENTER_SYM", "TOPRIGHT_SYM", "TOPRIGHTCORNER_SYM", "BOTTOMLEFTCORNER_SYM", "BOTTOMLEFT_SYM", "BOTTOMCENTER_SYM", "BOTTOMRIGHT_SYM", "BOTTOMRIGHTCORNER_SYM", "LEFTTOP_SYM", "LEFTMIDDLE_SYM", "LEFTBOTTOM_SYM", "RIGHTTOP_SYM", "RIGHTMIDDLE_SYM", "RIGHTBOTTOM_SYM", "SOLIDUS", "MINUS", "PLUS", "GREATER", "TILDE", "HASH_SYMBOL", "HASH", "DOT", "LBRACKET", "DCOLON", "SASS_EXTEND_ONLY_SELECTOR", "STAR", "PIPE", "NAME", "LESS_AND", "OPEQ", "INCLUDES", "DASHMATCH", "BEGINS", "ENDS", "CONTAINS", "RBRACKET", "SASS_VAR", "IMPORTANT_SYM", "NUMBER", "LENGTH", "EMS", "REM", "EXS", "ANGLE", "TIME", "FREQ", "RESOLUTION", "DIMENSION", "LESS_JS_STRING", "PERCENTAGE_SYMBOL", "WS", "NL", "COMMENT", "SASS_DEFAULT", "SASS_CONTENT", "SASS_MIXIN", "SASS_INCLUDE", "SASS_EXTEND", "SASS_DEBUG", "SASS_WARN", "SASS_IF", "SASS_ELSE", "SASS_FOR", "SASS_FUNCTION", "SASS_RETURN", "SASS_EACH", "SASS_WHILE", "OR", "CP_EQ", "CP_NOT_EQ", "LESS", "LESS_OR_EQ", "GREATER_OR_EQ", "CP_DOTS", "LESS_REST", "LESS_WHEN", "AT_SIGN", "SASS_OPTIONAL", "HEXCHAR", "NONASCII", "UNICODE", "ESCAPE", "NMSTART", "NMCHAR", "URL", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "CDO", "CDC", "EXCLAMATION_MARK", "INVALID", "LINE_COMMENT"
    };
    public static final int EOF=-1;
    public static final int NAMESPACE_SYM=4;
    public static final int SEMI=5;
    public static final int IDENT=6;
    public static final int STRING=7;
    public static final int URI=8;
    public static final int CHARSET_SYM=9;
    public static final int IMPORT_SYM=10;
    public static final int COMMA=11;
    public static final int MEDIA_SYM=12;
    public static final int LBRACE=13;
    public static final int RBRACE=14;
    public static final int AND=15;
    public static final int ONLY=16;
    public static final int NOT=17;
    public static final int GEN=18;
    public static final int LPAREN=19;
    public static final int RPAREN=20;
    public static final int COLON=21;
    public static final int AT_IDENT=22;
    public static final int MOZ_DOCUMENT_SYM=23;
    public static final int MOZ_URL_PREFIX=24;
    public static final int MOZ_DOMAIN=25;
    public static final int MOZ_REGEXP=26;
    public static final int WEBKIT_KEYFRAMES_SYM=27;
    public static final int PERCENTAGE=28;
    public static final int PAGE_SYM=29;
    public static final int COUNTER_STYLE_SYM=30;
    public static final int FONT_FACE_SYM=31;
    public static final int TOPLEFTCORNER_SYM=32;
    public static final int TOPLEFT_SYM=33;
    public static final int TOPCENTER_SYM=34;
    public static final int TOPRIGHT_SYM=35;
    public static final int TOPRIGHTCORNER_SYM=36;
    public static final int BOTTOMLEFTCORNER_SYM=37;
    public static final int BOTTOMLEFT_SYM=38;
    public static final int BOTTOMCENTER_SYM=39;
    public static final int BOTTOMRIGHT_SYM=40;
    public static final int BOTTOMRIGHTCORNER_SYM=41;
    public static final int LEFTTOP_SYM=42;
    public static final int LEFTMIDDLE_SYM=43;
    public static final int LEFTBOTTOM_SYM=44;
    public static final int RIGHTTOP_SYM=45;
    public static final int RIGHTMIDDLE_SYM=46;
    public static final int RIGHTBOTTOM_SYM=47;
    public static final int SOLIDUS=48;
    public static final int MINUS=49;
    public static final int PLUS=50;
    public static final int GREATER=51;
    public static final int TILDE=52;
    public static final int HASH_SYMBOL=53;
    public static final int HASH=54;
    public static final int DOT=55;
    public static final int LBRACKET=56;
    public static final int DCOLON=57;
    public static final int SASS_EXTEND_ONLY_SELECTOR=58;
    public static final int STAR=59;
    public static final int PIPE=60;
    public static final int NAME=61;
    public static final int LESS_AND=62;
    public static final int OPEQ=63;
    public static final int INCLUDES=64;
    public static final int DASHMATCH=65;
    public static final int BEGINS=66;
    public static final int ENDS=67;
    public static final int CONTAINS=68;
    public static final int RBRACKET=69;
    public static final int SASS_VAR=70;
    public static final int IMPORTANT_SYM=71;
    public static final int NUMBER=72;
    public static final int LENGTH=73;
    public static final int EMS=74;
    public static final int REM=75;
    public static final int EXS=76;
    public static final int ANGLE=77;
    public static final int TIME=78;
    public static final int FREQ=79;
    public static final int RESOLUTION=80;
    public static final int DIMENSION=81;
    public static final int LESS_JS_STRING=82;
    public static final int PERCENTAGE_SYMBOL=83;
    public static final int WS=84;
    public static final int NL=85;
    public static final int COMMENT=86;
    public static final int SASS_DEFAULT=87;
    public static final int SASS_CONTENT=88;
    public static final int SASS_MIXIN=89;
    public static final int SASS_INCLUDE=90;
    public static final int SASS_EXTEND=91;
    public static final int SASS_DEBUG=92;
    public static final int SASS_WARN=93;
    public static final int SASS_IF=94;
    public static final int SASS_ELSE=95;
    public static final int SASS_FOR=96;
    public static final int SASS_FUNCTION=97;
    public static final int SASS_RETURN=98;
    public static final int SASS_EACH=99;
    public static final int SASS_WHILE=100;
    public static final int OR=101;
    public static final int CP_EQ=102;
    public static final int CP_NOT_EQ=103;
    public static final int LESS=104;
    public static final int LESS_OR_EQ=105;
    public static final int GREATER_OR_EQ=106;
    public static final int CP_DOTS=107;
    public static final int LESS_REST=108;
    public static final int LESS_WHEN=109;
    public static final int AT_SIGN=110;
    public static final int SASS_OPTIONAL=111;
    public static final int HEXCHAR=112;
    public static final int NONASCII=113;
    public static final int UNICODE=114;
    public static final int ESCAPE=115;
    public static final int NMSTART=116;
    public static final int NMCHAR=117;
    public static final int URL=118;
    public static final int A=119;
    public static final int B=120;
    public static final int C=121;
    public static final int D=122;
    public static final int E=123;
    public static final int F=124;
    public static final int G=125;
    public static final int H=126;
    public static final int I=127;
    public static final int J=128;
    public static final int K=129;
    public static final int L=130;
    public static final int M=131;
    public static final int N=132;
    public static final int O=133;
    public static final int P=134;
    public static final int Q=135;
    public static final int R=136;
    public static final int S=137;
    public static final int T=138;
    public static final int U=139;
    public static final int V=140;
    public static final int W=141;
    public static final int X=142;
    public static final int Y=143;
    public static final int Z=144;
    public static final int CDO=145;
    public static final int CDC=146;
    public static final int EXCLAMATION_MARK=147;
    public static final int INVALID=148;
    public static final int LINE_COMMENT=149;

    // delegates
    // delegators

    public static final String[] ruleNames = new String[] {
        "invalidRule", "synpred37_Css3", "cp_math_expression_atom", "synpred12_Css3", 
        "namespacePrefix", "syncToDeclarationsRule", "sass_for", "esPred", 
        "cp_mixin_block", "synpred36_Css3", "functionName", "property", 
        "sass_else", "resourceIdentifier", "sass_control_expression", "mediaType", 
        "charSetValue", "at_rule", "cp_arg", "synpred4_Css3", "charSet", 
        "synpred29_Css3", "elementSubsequent", "cp_mixin_name", "synpred8_Css3", 
        "synpred5_Css3", "synpred14_Css3", "counterStyle", "sass_extend_only_selector", 
        "less_fn_name", "fnAttributeValue", "cp_term_symbol", "namespacePrefixName", 
        "sass_debug", "synpred34_Css3", "synpred22_Css3", "expressionPredicate", 
        "sass_selector_interpolation_expression", "syncTo_RBRACE", "expression", 
        "fnAttributes", "synpred33_Css3", "synpred3_Css3", "synpred19_Css3", 
        "operator", "synpred31_Css3", "synpred25_Css3", "webkitKeyframeSelectors", 
        "mediaQueryList", "synpred15_Css3", "less_mixin_guarded", "less_selector_interpolation", 
        "prio", "fontFace", "selector", "sass_content", "synpred24_Css3", 
        "body", "sass_function_name", "synpred27_Css3", "synpred18_Css3", 
        "slAttributeName", "less_condition", "less_function_in_condition", 
        "simpleSelectorSequence", "cp_math_expressions", "margin_sym", "synpred6_Css3", 
        "synpred32_Css3", "synpred28_Css3", "sass_function_declaration", 
        "synpred16_Css3", "generic_at_rule", "moz_document", "mediaExpression", 
        "cssId", "mediaFeatureValue", "pseudo", "combinator", "synpred17_Css3", 
        "sass_nested_properties", "sass_each", "ws", "sass_control_block", 
        "styleSheet", "syncTo_SEMI", "atRuleId", "pseudoPage", "moz_document_function", 
        "page", "margin", "function", "declarations", "rule", "synpred38_Css3", 
        "syncToFollow", "sass_function_return", "sass_interpolation_expression_var", 
        "cp_args_list", "fnAttributeName", "synpred35_Css3", "mediaFeature", 
        "selectorsGroup", "cssClass", "hexColor", "namespace", "typeSelector", 
        "unaryOperator", "synpred21_Css3", "namespaces", "fnAttribute", 
        "vendorAtRule", "propertyDeclaration", "cp_expression_atom", "synpred1_Css3", 
        "synpred20_Css3", "sass_extend", "declaration", "cp_variable", "synpred11_Css3", 
        "synpred13_Css3", "mediaBody", "sass_while", "cp_expression_list", 
        "cp_math_expression", "imports", "bodyItem", "synpred10_Css3", "mediaQuery", 
        "propertyValue", "synpred26_Css3", "importItem", "elementName", 
        "slAttribute", "sass_declaration_interpolation_expression", "term", 
        "mediaQueryOperator", "webkitKeyframesBlock", "synpred30_Css3", 
        "cp_mixin_call_arg", "cp_mixin_call", "slAttributeValue", "sass_if", 
        "less_condition_operator", "media", "synpred7_Css3", "synpred2_Css3", 
        "cp_expression", "cp_mixin_declaration", "synpred9_Css3", "sass_control", 
        "webkitKeyframes", "cp_expression_operator", "mediaBodyItem", "cp_variable_declaration", 
        "synpred23_Css3", "cp_mixin_call_args", "cp_propertyValue"
    };
    public static final boolean[] decisionCanBacktrack = new boolean[] {
        false, // invalid decision
        false, false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            true, false, false, false, false, false, true, false, false, 
            false, false, false, false, true, false, false, false, true, 
            false, false, true, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, true, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, true, false, false, false, false, true, false, 
            false, false, true, false, false, false, true, false, false, 
            false, false, false, false, false, false, true, false, true, 
            false, true, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            true, false, false, true, false, false, false, false, false, 
            false, false, false, false, false, false, true, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, true, false, 
            false, false, true, false, false, false, false, true, false, 
            false, false, true, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, true, false, true, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false
    };

     
        public int ruleLevel = 0;
        public int getRuleLevel() { return ruleLevel; }
        public void incRuleLevel() { ruleLevel++; }
        public void decRuleLevel() { ruleLevel--; }
        public Css3Parser(TokenStream input) {
            this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT, new RecognizerSharedState());
        }
        public Css3Parser(TokenStream input, int port, RecognizerSharedState state) {
            super(input, state);
            DebugEventSocketProxy proxy =
                new DebugEventSocketProxy(this, port, null);
            setDebugListener(proxy);
            try {
                proxy.handshake();
            }
            catch (IOException ioe) {
                reportError(ioe);
            }
        }
    public Css3Parser(TokenStream input, DebugEventListener dbg) {
        super(input, dbg, new RecognizerSharedState());

    }
    protected boolean evalPredicate(boolean result, String predicate) {
        dbg.semanticPredicate(result, predicate);
        return result;
    }


    public String[] getTokenNames() { return Css3Parser.tokenNames; }
    public String getGrammarFileName() { return "/Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g"; }



        protected boolean isLessSource() {
            return false;
        }
        
        protected boolean isScssSource() {
            return false;
        }
        
        private boolean isCssPreprocessorSource() {
            return isLessSource() || isScssSource();
        }

        private boolean tokenNameEquals(String tokenImage) {
            return tokenImage.equalsIgnoreCase(input.LT(1).getText());
        }

    /**
         * Use the current stacked followset to work out the valid tokens that
         * can follow on from the current point in the parse, then recover by
         * eating tokens that are not a member of the follow set we compute.
         *
         * This method is used whenever we wish to force a sync, even though
         * the parser has not yet checked LA(1) for alt selection. This is useful
         * in situations where only a subset of tokens can begin a new construct
         * (such as the start of a new statement in a block) and we want to
         * proactively detect garbage so that the current rule does not exit on
         * on an exception.
         *
         * We could override recover() to make this the default behavior but that
         * is too much like using a sledge hammer to crack a nut. We want finer
         * grained control of the recovery and error mechanisms.
         */
        protected void syncToSet()
        {
            // Compute the followset that is in context wherever we are in the
            // rule chain/stack
            //
             BitSet follow = state.following[state._fsp]; //computeContextSensitiveRuleFOLLOW();

             syncToSet(follow);
        }

        protected void syncToSet(BitSet follow)
        {
            int mark = -1;

            //create error-recovery node
            dbg.enterRule(getGrammarFileName(), "recovery");

            try {

                mark = input.mark();

                // Consume all tokens in the stream until we find a member of the follow
                // set, which means the next production should be guaranteed to be happy.
                //
                while (! follow.member(input.LA(1)) ) {

                    if  (input.LA(1) == Token.EOF) {

                        // Looks like we didn't find anything at all that can help us here
                        // so we need to rewind to where we were and let normal error handling
                        // bail out.
                        //
                        input.rewind();
                        mark = -1;
                        return;
                    }
                    input.consume();

                    // Now here, because you are consuming some tokens, yu will probably want
                    // to raise an error message such as "Spurious elements after the class member were discarded"
                    // using whatever your override of displayRecognitionError() routine does to record
                    // error messages. The exact error my depend on context etc.
                    //
                }
            } catch (Exception e) {

              // Just ignore any errors here, we will just let the recognizer
              // try to resync as normal - something must be very screwed.
              //
            }
            finally {
                dbg.exitRule(getGrammarFileName(), "recovery");

                // Always release the mark we took
                //
                if  (mark != -1) {
                    input.release(mark);
                }
            }
        }
        
        /**
             * synces to next RBRACE "}" taking nesting into account
             */
            protected void syncToRBRACE(int nest)
                {
                    
                    int mark = -1;
                    //create error-recovery node
                    //dbg.enterRule(getGrammarFileName(), "recovery");

                    try {
                        mark = input.mark();
                        for(;;) {
                            //read char
                            int c = input.LA(1);
                            
                            switch(c) {
                                case Token.EOF:
                                    input.rewind();
                                    mark = -1;
                                    return ;
                                case Css3Lexer.LBRACE:
                                    nest++;
                                    break;
                                case Css3Lexer.RBRACE:
                                    nest--;
                                    if(nest == 0) {
                                        //do not eat the final RBRACE
                                        return ;
                                    }
                            }
                            
                            input.consume();
                                                
                        }

                    } catch (Exception e) {

                      // Just ignore any errors here, we will just let the recognizer
                      // try to resync as normal - something must be very screwed.
                      //
                    }
                    finally {
                        if  (mark != -1) {
                            input.release(mark);
                        }
                        //dbg.exitRule(getGrammarFileName(), "recovery");
                    }
                }
        



    // $ANTLR start "styleSheet"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:321:1: styleSheet : ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF ;
    public final void styleSheet() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "styleSheet");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(321, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:322:5: ( ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:6: ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF
            {
            dbg.location(323,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:6: ( ws )?
            int alt1=2;
            try { dbg.enterSubRule(1);
            try { dbg.enterDecision(1, decisionCanBacktrack[1]);

            int LA1_0 = input.LA(1);

            if ( ((LA1_0>=WS && LA1_0<=COMMENT)) ) {
                alt1=1;
            }
            } finally {dbg.exitDecision(1);}

            switch (alt1) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:6: ws
                    {
                    dbg.location(323,6);
                    pushFollow(FOLLOW_ws_in_styleSheet125);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(1);}

            dbg.location(324,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:6: ( charSet ( ws )? )?
            int alt3=2;
            try { dbg.enterSubRule(3);
            try { dbg.enterDecision(3, decisionCanBacktrack[3]);

            try {
                isCyclicDecision = true;
                alt3 = dfa3.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(3);}

            switch (alt3) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:8: charSet ( ws )?
                    {
                    dbg.location(324,8);
                    pushFollow(FOLLOW_charSet_in_styleSheet135);
                    charSet();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(324,16);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:16: ( ws )?
                    int alt2=2;
                    try { dbg.enterSubRule(2);
                    try { dbg.enterDecision(2, decisionCanBacktrack[2]);

                    int LA2_0 = input.LA(1);

                    if ( ((LA2_0>=WS && LA2_0<=COMMENT)) ) {
                        alt2=1;
                    }
                    } finally {dbg.exitDecision(2);}

                    switch (alt2) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:16: ws
                            {
                            dbg.location(324,16);
                            pushFollow(FOLLOW_ws_in_styleSheet137);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(2);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(3);}

            dbg.location(325,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:9: ( imports )?
            int alt4=2;
            try { dbg.enterSubRule(4);
            try { dbg.enterDecision(4, decisionCanBacktrack[4]);

            try {
                isCyclicDecision = true;
                alt4 = dfa4.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(4);}

            switch (alt4) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:9: imports
                    {
                    dbg.location(325,9);
                    pushFollow(FOLLOW_imports_in_styleSheet151);
                    imports();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(4);}

            dbg.location(326,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:326:9: ( namespaces )?
            int alt5=2;
            try { dbg.enterSubRule(5);
            try { dbg.enterDecision(5, decisionCanBacktrack[5]);

            try {
                isCyclicDecision = true;
                alt5 = dfa5.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(5);}

            switch (alt5) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:326:9: namespaces
                    {
                    dbg.location(326,9);
                    pushFollow(FOLLOW_namespaces_in_styleSheet162);
                    namespaces();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(5);}

            dbg.location(327,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:9: ( body )?
            int alt6=2;
            try { dbg.enterSubRule(6);
            try { dbg.enterDecision(6, decisionCanBacktrack[6]);

            int LA6_0 = input.LA(1);

            if ( ((LA6_0>=NAMESPACE_SYM && LA6_0<=IDENT)||(LA6_0>=CHARSET_SYM && LA6_0<=MEDIA_SYM)||LA6_0==GEN||(LA6_0>=COLON && LA6_0<=MOZ_DOCUMENT_SYM)||LA6_0==WEBKIT_KEYFRAMES_SYM||(LA6_0>=PAGE_SYM && LA6_0<=RIGHTBOTTOM_SYM)||(LA6_0>=MINUS && LA6_0<=PIPE)||LA6_0==LESS_AND||(LA6_0>=RBRACKET && LA6_0<=SASS_VAR)||(LA6_0>=SASS_CONTENT && LA6_0<=SASS_WHILE)||LA6_0==AT_SIGN) ) {
                alt6=1;
            }
            } finally {dbg.exitDecision(6);}

            switch (alt6) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:9: body
                    {
                    dbg.location(327,9);
                    pushFollow(FOLLOW_body_in_styleSheet174);
                    body();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(6);}

            dbg.location(328,6);
            match(input,EOF,FOLLOW_EOF_in_styleSheet182); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(329, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "styleSheet");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "styleSheet"


    // $ANTLR start "namespaces"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:331:1: namespaces : ( namespace ( ws )? )+ ;
    public final void namespaces() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespaces");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(331, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:332:2: ( ( namespace ( ws )? )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:2: ( namespace ( ws )? )+
            {
            dbg.location(333,2);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:2: ( namespace ( ws )? )+
            int cnt8=0;
            try { dbg.enterSubRule(8);

            loop8:
            do {
                int alt8=2;
                try { dbg.enterDecision(8, decisionCanBacktrack[8]);

                try {
                    isCyclicDecision = true;
                    alt8 = dfa8.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(8);}

                switch (alt8) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:4: namespace ( ws )?
            	    {
            	    dbg.location(333,4);
            	    pushFollow(FOLLOW_namespace_in_namespaces199);
            	    namespace();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(333,14);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:14: ( ws )?
            	    int alt7=2;
            	    try { dbg.enterSubRule(7);
            	    try { dbg.enterDecision(7, decisionCanBacktrack[7]);

            	    int LA7_0 = input.LA(1);

            	    if ( ((LA7_0>=WS && LA7_0<=COMMENT)) ) {
            	        alt7=1;
            	    }
            	    } finally {dbg.exitDecision(7);}

            	    switch (alt7) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:14: ws
            	            {
            	            dbg.location(333,14);
            	            pushFollow(FOLLOW_ws_in_namespaces201);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(7);}


            	    }
            	    break;

            	default :
            	    if ( cnt8 >= 1 ) break loop8;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(8, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt8++;
            } while (true);
            } finally {dbg.exitSubRule(8);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(334, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespaces");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespaces"


    // $ANTLR start "namespace"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:1: namespace : NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI ;
    public final void namespace() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespace");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(336, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:3: ( NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:5: NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI
            {
            dbg.location(337,5);
            match(input,NAMESPACE_SYM,FOLLOW_NAMESPACE_SYM_in_namespace217); if (state.failed) return ;
            dbg.location(337,19);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:19: ( ws )?
            int alt9=2;
            try { dbg.enterSubRule(9);
            try { dbg.enterDecision(9, decisionCanBacktrack[9]);

            int LA9_0 = input.LA(1);

            if ( ((LA9_0>=WS && LA9_0<=COMMENT)) ) {
                alt9=1;
            }
            } finally {dbg.exitDecision(9);}

            switch (alt9) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:19: ws
                    {
                    dbg.location(337,19);
                    pushFollow(FOLLOW_ws_in_namespace219);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(9);}

            dbg.location(337,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:23: ( namespacePrefixName ( ws )? )?
            int alt11=2;
            try { dbg.enterSubRule(11);
            try { dbg.enterDecision(11, decisionCanBacktrack[11]);

            int LA11_0 = input.LA(1);

            if ( (LA11_0==IDENT) ) {
                alt11=1;
            }
            } finally {dbg.exitDecision(11);}

            switch (alt11) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:24: namespacePrefixName ( ws )?
                    {
                    dbg.location(337,24);
                    pushFollow(FOLLOW_namespacePrefixName_in_namespace223);
                    namespacePrefixName();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(337,44);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:44: ( ws )?
                    int alt10=2;
                    try { dbg.enterSubRule(10);
                    try { dbg.enterDecision(10, decisionCanBacktrack[10]);

                    int LA10_0 = input.LA(1);

                    if ( ((LA10_0>=WS && LA10_0<=COMMENT)) ) {
                        alt10=1;
                    }
                    } finally {dbg.exitDecision(10);}

                    switch (alt10) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:44: ws
                            {
                            dbg.location(337,44);
                            pushFollow(FOLLOW_ws_in_namespace225);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(10);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(11);}

            dbg.location(337,50);
            pushFollow(FOLLOW_resourceIdentifier_in_namespace230);
            resourceIdentifier();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(337,69);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:69: ( ws )?
            int alt12=2;
            try { dbg.enterSubRule(12);
            try { dbg.enterDecision(12, decisionCanBacktrack[12]);

            int LA12_0 = input.LA(1);

            if ( ((LA12_0>=WS && LA12_0<=COMMENT)) ) {
                alt12=1;
            }
            } finally {dbg.exitDecision(12);}

            switch (alt12) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:69: ws
                    {
                    dbg.location(337,69);
                    pushFollow(FOLLOW_ws_in_namespace232);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(12);}

            dbg.location(337,73);
            match(input,SEMI,FOLLOW_SEMI_in_namespace235); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(338, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespace");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespace"


    // $ANTLR start "namespacePrefixName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:340:1: namespacePrefixName : IDENT ;
    public final void namespacePrefixName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespacePrefixName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(340, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:341:3: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:341:5: IDENT
            {
            dbg.location(341,5);
            match(input,IDENT,FOLLOW_IDENT_in_namespacePrefixName248); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(342, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespacePrefixName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespacePrefixName"


    // $ANTLR start "resourceIdentifier"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:344:1: resourceIdentifier : ( STRING | URI );
    public final void resourceIdentifier() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "resourceIdentifier");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(344, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:345:3: ( STRING | URI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(345,3);
            if ( (input.LA(1)>=STRING && input.LA(1)<=URI) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(346, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "resourceIdentifier");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "resourceIdentifier"


    // $ANTLR start "charSet"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:348:1: charSet : CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI ;
    public final void charSet() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "charSet");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(348, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:5: ( CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:9: CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI
            {
            dbg.location(349,9);
            match(input,CHARSET_SYM,FOLLOW_CHARSET_SYM_in_charSet286); if (state.failed) return ;
            dbg.location(349,21);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:21: ( ws )?
            int alt13=2;
            try { dbg.enterSubRule(13);
            try { dbg.enterDecision(13, decisionCanBacktrack[13]);

            int LA13_0 = input.LA(1);

            if ( ((LA13_0>=WS && LA13_0<=COMMENT)) ) {
                alt13=1;
            }
            } finally {dbg.exitDecision(13);}

            switch (alt13) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:21: ws
                    {
                    dbg.location(349,21);
                    pushFollow(FOLLOW_ws_in_charSet288);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(13);}

            dbg.location(349,25);
            pushFollow(FOLLOW_charSetValue_in_charSet291);
            charSetValue();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(349,38);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:38: ( ws )?
            int alt14=2;
            try { dbg.enterSubRule(14);
            try { dbg.enterDecision(14, decisionCanBacktrack[14]);

            int LA14_0 = input.LA(1);

            if ( ((LA14_0>=WS && LA14_0<=COMMENT)) ) {
                alt14=1;
            }
            } finally {dbg.exitDecision(14);}

            switch (alt14) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:38: ws
                    {
                    dbg.location(349,38);
                    pushFollow(FOLLOW_ws_in_charSet293);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(14);}

            dbg.location(349,42);
            match(input,SEMI,FOLLOW_SEMI_in_charSet296); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(350, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "charSet");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "charSet"


    // $ANTLR start "charSetValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:352:1: charSetValue : STRING ;
    public final void charSetValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "charSetValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(352, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:353:2: ( STRING )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:353:4: STRING
            {
            dbg.location(353,4);
            match(input,STRING,FOLLOW_STRING_in_charSetValue310); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(354, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "charSetValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "charSetValue"


    // $ANTLR start "imports"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:356:1: imports : ( importItem ( ws )? SEMI ( ws )? )+ ;
    public final void imports() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "imports");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(356, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:357:2: ( ( importItem ( ws )? SEMI ( ws )? )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:2: ( importItem ( ws )? SEMI ( ws )? )+
            {
            dbg.location(358,2);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:2: ( importItem ( ws )? SEMI ( ws )? )+
            int cnt17=0;
            try { dbg.enterSubRule(17);

            loop17:
            do {
                int alt17=2;
                try { dbg.enterDecision(17, decisionCanBacktrack[17]);

                try {
                    isCyclicDecision = true;
                    alt17 = dfa17.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(17);}

                switch (alt17) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:4: importItem ( ws )? SEMI ( ws )?
            	    {
            	    dbg.location(358,4);
            	    pushFollow(FOLLOW_importItem_in_imports324);
            	    importItem();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(358,15);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:15: ( ws )?
            	    int alt15=2;
            	    try { dbg.enterSubRule(15);
            	    try { dbg.enterDecision(15, decisionCanBacktrack[15]);

            	    int LA15_0 = input.LA(1);

            	    if ( ((LA15_0>=WS && LA15_0<=COMMENT)) ) {
            	        alt15=1;
            	    }
            	    } finally {dbg.exitDecision(15);}

            	    switch (alt15) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:15: ws
            	            {
            	            dbg.location(358,15);
            	            pushFollow(FOLLOW_ws_in_imports326);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(15);}

            	    dbg.location(358,19);
            	    match(input,SEMI,FOLLOW_SEMI_in_imports329); if (state.failed) return ;
            	    dbg.location(358,24);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:24: ( ws )?
            	    int alt16=2;
            	    try { dbg.enterSubRule(16);
            	    try { dbg.enterDecision(16, decisionCanBacktrack[16]);

            	    int LA16_0 = input.LA(1);

            	    if ( ((LA16_0>=WS && LA16_0<=COMMENT)) ) {
            	        alt16=1;
            	    }
            	    } finally {dbg.exitDecision(16);}

            	    switch (alt16) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:24: ws
            	            {
            	            dbg.location(358,24);
            	            pushFollow(FOLLOW_ws_in_imports331);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(16);}


            	    }
            	    break;

            	default :
            	    if ( cnt17 >= 1 ) break loop17;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(17, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt17++;
            } while (true);
            } finally {dbg.exitSubRule(17);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(359, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "imports");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "imports"


    // $ANTLR start "importItem"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:361:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? );
    public final void importItem() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "importItem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(361, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:362:5: ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? )
            int alt27=2;
            try { dbg.enterDecision(27, decisionCanBacktrack[27]);

            try {
                isCyclicDecision = true;
                alt27 = dfa27.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(27);}

            switch (alt27) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:9: IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    {
                    dbg.location(363,9);
                    match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem361); if (state.failed) return ;
                    dbg.location(363,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:20: ( ws )?
                    int alt18=2;
                    try { dbg.enterSubRule(18);
                    try { dbg.enterDecision(18, decisionCanBacktrack[18]);

                    int LA18_0 = input.LA(1);

                    if ( ((LA18_0>=WS && LA18_0<=COMMENT)) ) {
                        alt18=1;
                    }
                    } finally {dbg.exitDecision(18);}

                    switch (alt18) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:20: ws
                            {
                            dbg.location(363,20);
                            pushFollow(FOLLOW_ws_in_importItem363);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(18);}

                    dbg.location(363,24);
                    pushFollow(FOLLOW_resourceIdentifier_in_importItem366);
                    resourceIdentifier();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(363,43);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:43: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    int alt20=2;
                    try { dbg.enterSubRule(20);
                    try { dbg.enterDecision(20, decisionCanBacktrack[20]);

                    try {
                        isCyclicDecision = true;
                        alt20 = dfa20.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(20);}

                    switch (alt20) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:44: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
                            {
                            dbg.location(363,66);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:66: ( ws )?
                            int alt19=2;
                            try { dbg.enterSubRule(19);
                            try { dbg.enterDecision(19, decisionCanBacktrack[19]);

                            int LA19_0 = input.LA(1);

                            if ( ((LA19_0>=WS && LA19_0<=COMMENT)) ) {
                                alt19=1;
                            }
                            } finally {dbg.exitDecision(19);}

                            switch (alt19) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:66: ws
                                    {
                                    dbg.location(363,66);
                                    pushFollow(FOLLOW_ws_in_importItem376);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(19);}

                            dbg.location(363,70);
                            pushFollow(FOLLOW_mediaQueryList_in_importItem379);
                            mediaQueryList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(20);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:9: {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    {
                    dbg.location(366,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "importItem", "isScssSource()");
                    }
                    dbg.location(366,27);
                    match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem412); if (state.failed) return ;
                    dbg.location(366,38);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:38: ( ws )?
                    int alt21=2;
                    try { dbg.enterSubRule(21);
                    try { dbg.enterDecision(21, decisionCanBacktrack[21]);

                    int LA21_0 = input.LA(1);

                    if ( ((LA21_0>=WS && LA21_0<=COMMENT)) ) {
                        alt21=1;
                    }
                    } finally {dbg.exitDecision(21);}

                    switch (alt21) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:38: ws
                            {
                            dbg.location(366,38);
                            pushFollow(FOLLOW_ws_in_importItem414);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(21);}

                    dbg.location(366,42);
                    pushFollow(FOLLOW_resourceIdentifier_in_importItem417);
                    resourceIdentifier();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(366,61);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:61: ( ( ws )? COMMA ( ws )? resourceIdentifier )*
                    try { dbg.enterSubRule(24);

                    loop24:
                    do {
                        int alt24=2;
                        try { dbg.enterDecision(24, decisionCanBacktrack[24]);

                        try {
                            isCyclicDecision = true;
                            alt24 = dfa24.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(24);}

                        switch (alt24) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:62: ( ws )? COMMA ( ws )? resourceIdentifier
                    	    {
                    	    dbg.location(366,62);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:62: ( ws )?
                    	    int alt22=2;
                    	    try { dbg.enterSubRule(22);
                    	    try { dbg.enterDecision(22, decisionCanBacktrack[22]);

                    	    int LA22_0 = input.LA(1);

                    	    if ( ((LA22_0>=WS && LA22_0<=COMMENT)) ) {
                    	        alt22=1;
                    	    }
                    	    } finally {dbg.exitDecision(22);}

                    	    switch (alt22) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:62: ws
                    	            {
                    	            dbg.location(366,62);
                    	            pushFollow(FOLLOW_ws_in_importItem420);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(22);}

                    	    dbg.location(366,66);
                    	    match(input,COMMA,FOLLOW_COMMA_in_importItem423); if (state.failed) return ;
                    	    dbg.location(366,72);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:72: ( ws )?
                    	    int alt23=2;
                    	    try { dbg.enterSubRule(23);
                    	    try { dbg.enterDecision(23, decisionCanBacktrack[23]);

                    	    int LA23_0 = input.LA(1);

                    	    if ( ((LA23_0>=WS && LA23_0<=COMMENT)) ) {
                    	        alt23=1;
                    	    }
                    	    } finally {dbg.exitDecision(23);}

                    	    switch (alt23) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:72: ws
                    	            {
                    	            dbg.location(366,72);
                    	            pushFollow(FOLLOW_ws_in_importItem425);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(23);}

                    	    dbg.location(366,76);
                    	    pushFollow(FOLLOW_resourceIdentifier_in_importItem428);
                    	    resourceIdentifier();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop24;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(24);}

                    dbg.location(366,97);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:97: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    int alt26=2;
                    try { dbg.enterSubRule(26);
                    try { dbg.enterDecision(26, decisionCanBacktrack[26]);

                    try {
                        isCyclicDecision = true;
                        alt26 = dfa26.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(26);}

                    switch (alt26) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:98: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
                            {
                            dbg.location(366,120);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:120: ( ws )?
                            int alt25=2;
                            try { dbg.enterSubRule(25);
                            try { dbg.enterDecision(25, decisionCanBacktrack[25]);

                            int LA25_0 = input.LA(1);

                            if ( ((LA25_0>=WS && LA25_0<=COMMENT)) ) {
                                alt25=1;
                            }
                            } finally {dbg.exitDecision(25);}

                            switch (alt25) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:120: ws
                                    {
                                    dbg.location(366,120);
                                    pushFollow(FOLLOW_ws_in_importItem440);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(25);}

                            dbg.location(366,124);
                            pushFollow(FOLLOW_mediaQueryList_in_importItem443);
                            mediaQueryList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(26);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(367, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "importItem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "importItem"


    // $ANTLR start "media"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:1: media : MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE ;
    public final void media() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "media");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(368, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:5: ( MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:7: MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE
            {
            dbg.location(369,7);
            match(input,MEDIA_SYM,FOLLOW_MEDIA_SYM_in_media461); if (state.failed) return ;
            dbg.location(369,17);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:17: ( ws )?
            int alt28=2;
            try { dbg.enterSubRule(28);
            try { dbg.enterDecision(28, decisionCanBacktrack[28]);

            int LA28_0 = input.LA(1);

            if ( ((LA28_0>=WS && LA28_0<=COMMENT)) ) {
                alt28=1;
            }
            } finally {dbg.exitDecision(28);}

            switch (alt28) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:17: ws
                    {
                    dbg.location(369,17);
                    pushFollow(FOLLOW_ws_in_media463);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(28);}

            dbg.location(370,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:370:5: ( mediaQueryList )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:371:10: mediaQueryList
            {
            dbg.location(371,10);
            pushFollow(FOLLOW_mediaQueryList_in_media482);
            mediaQueryList();

            state._fsp--;
            if (state.failed) return ;

            }

            dbg.location(372,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:7: ( ws )?
            int alt29=2;
            try { dbg.enterSubRule(29);
            try { dbg.enterDecision(29, decisionCanBacktrack[29]);

            int LA29_0 = input.LA(1);

            if ( ((LA29_0>=WS && LA29_0<=COMMENT)) ) {
                alt29=1;
            }
            } finally {dbg.exitDecision(29);}

            switch (alt29) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:7: ws
                    {
                    dbg.location(372,7);
                    pushFollow(FOLLOW_ws_in_media490);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(29);}

            dbg.location(373,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_media497); if (state.failed) return ;
            dbg.location(373,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:12: ( ws )?
            int alt30=2;
            try { dbg.enterSubRule(30);
            try { dbg.enterDecision(30, decisionCanBacktrack[30]);

            int LA30_0 = input.LA(1);

            if ( ((LA30_0>=WS && LA30_0<=COMMENT)) ) {
                alt30=1;
            }
            } finally {dbg.exitDecision(30);}

            switch (alt30) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:12: ws
                    {
                    dbg.location(373,12);
                    pushFollow(FOLLOW_ws_in_media499);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(30);}

            dbg.location(373,16);
            pushFollow(FOLLOW_syncToFollow_in_media502);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(374,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:374:9: ( mediaBody )?
            int alt31=2;
            try { dbg.enterSubRule(31);
            try { dbg.enterDecision(31, decisionCanBacktrack[31]);

            int LA31_0 = input.LA(1);

            if ( ((LA31_0>=NAMESPACE_SYM && LA31_0<=IDENT)||(LA31_0>=CHARSET_SYM && LA31_0<=MEDIA_SYM)||LA31_0==GEN||(LA31_0>=COLON && LA31_0<=MOZ_DOCUMENT_SYM)||LA31_0==WEBKIT_KEYFRAMES_SYM||(LA31_0>=PAGE_SYM && LA31_0<=RIGHTBOTTOM_SYM)||(LA31_0>=MINUS && LA31_0<=PIPE)||LA31_0==LESS_AND||(LA31_0>=RBRACKET && LA31_0<=SASS_VAR)||(LA31_0>=SASS_CONTENT && LA31_0<=SASS_WHILE)||LA31_0==AT_SIGN) ) {
                alt31=1;
            }
            } finally {dbg.exitDecision(31);}

            switch (alt31) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:374:9: mediaBody
                    {
                    dbg.location(374,9);
                    pushFollow(FOLLOW_mediaBody_in_media512);
                    mediaBody();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(31);}

            dbg.location(375,5);
            match(input,RBRACE,FOLLOW_RBRACE_in_media519); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(376, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "media");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "media"


    // $ANTLR start "mediaBody"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:378:1: mediaBody : ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
    public final void mediaBody() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaBody");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(378, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:5: ( ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:380:5: ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            {
            dbg.location(380,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:380:5: ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            int cnt36=0;
            try { dbg.enterSubRule(36);

            loop36:
            do {
                int alt36=3;
                try { dbg.enterDecision(36, decisionCanBacktrack[36]);

                int LA36_0 = input.LA(1);

                if ( (LA36_0==NAMESPACE_SYM||LA36_0==IDENT||(LA36_0>=CHARSET_SYM && LA36_0<=MEDIA_SYM)||LA36_0==GEN||(LA36_0>=COLON && LA36_0<=MOZ_DOCUMENT_SYM)||LA36_0==WEBKIT_KEYFRAMES_SYM||(LA36_0>=PAGE_SYM && LA36_0<=RIGHTBOTTOM_SYM)||(LA36_0>=MINUS && LA36_0<=PIPE)||LA36_0==LESS_AND||(LA36_0>=RBRACKET && LA36_0<=SASS_VAR)||(LA36_0>=SASS_CONTENT && LA36_0<=SASS_WHILE)||LA36_0==AT_SIGN) ) {
                    alt36=1;
                }
                else if ( (LA36_0==SEMI) ) {
                    alt36=2;
                }


                } finally {dbg.exitDecision(36);}

                switch (alt36) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:10: ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    {
            	    dbg.location(381,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:10: ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:12: mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
            	    {
            	    dbg.location(381,12);
            	    pushFollow(FOLLOW_mediaBodyItem_in_mediaBody557);
            	    mediaBodyItem();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(381,26);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:26: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
            	    int alt33=2;
            	    try { dbg.enterSubRule(33);
            	    try { dbg.enterDecision(33, decisionCanBacktrack[33]);

            	    try {
            	        isCyclicDecision = true;
            	        alt33 = dfa33.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(33);}

            	    switch (alt33) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:27: ( ( ws )? SEMI )=> ( ws )? SEMI
            	            {
            	            dbg.location(381,39);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:39: ( ws )?
            	            int alt32=2;
            	            try { dbg.enterSubRule(32);
            	            try { dbg.enterDecision(32, decisionCanBacktrack[32]);

            	            int LA32_0 = input.LA(1);

            	            if ( ((LA32_0>=WS && LA32_0<=COMMENT)) ) {
            	                alt32=1;
            	            }
            	            } finally {dbg.exitDecision(32);}

            	            switch (alt32) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:39: ws
            	                    {
            	                    dbg.location(381,39);
            	                    pushFollow(FOLLOW_ws_in_mediaBody567);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(32);}

            	            dbg.location(381,43);
            	            match(input,SEMI,FOLLOW_SEMI_in_mediaBody570); if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(33);}

            	    dbg.location(381,50);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:50: ( ws )?
            	    int alt34=2;
            	    try { dbg.enterSubRule(34);
            	    try { dbg.enterDecision(34, decisionCanBacktrack[34]);

            	    int LA34_0 = input.LA(1);

            	    if ( ((LA34_0>=WS && LA34_0<=COMMENT)) ) {
            	        alt34=1;
            	    }
            	    } finally {dbg.exitDecision(34);}

            	    switch (alt34) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:50: ws
            	            {
            	            dbg.location(381,50);
            	            pushFollow(FOLLOW_ws_in_mediaBody574);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(34);}


            	    }


            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:10: ( SEMI ( ws )? )
            	    {
            	    dbg.location(383,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:10: ( SEMI ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:12: SEMI ( ws )?
            	    {
            	    dbg.location(383,12);
            	    match(input,SEMI,FOLLOW_SEMI_in_mediaBody601); if (state.failed) return ;
            	    dbg.location(383,17);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:17: ( ws )?
            	    int alt35=2;
            	    try { dbg.enterSubRule(35);
            	    try { dbg.enterDecision(35, decisionCanBacktrack[35]);

            	    int LA35_0 = input.LA(1);

            	    if ( ((LA35_0>=WS && LA35_0<=COMMENT)) ) {
            	        alt35=1;
            	    }
            	    } finally {dbg.exitDecision(35);}

            	    switch (alt35) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:17: ws
            	            {
            	            dbg.location(383,17);
            	            pushFollow(FOLLOW_ws_in_mediaBody603);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(35);}


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt36 >= 1 ) break loop36;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(36, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt36++;
            } while (true);
            } finally {dbg.exitSubRule(36);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(385, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaBody");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaBody"


    // $ANTLR start "mediaBodyItem"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:387:1: mediaBodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | {...}? sass_extend | {...}? sass_debug | {...}? sass_control | {...}? sass_content | rule | page | fontFace | vendorAtRule | media );
    public final void mediaBodyItem() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaBodyItem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(387, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:388:5: ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | {...}? sass_extend | {...}? sass_debug | {...}? sass_control | {...}? sass_content | rule | page | fontFace | vendorAtRule | media )
            int alt37=13;
            try { dbg.enterDecision(37, decisionCanBacktrack[37]);

            try {
                isCyclicDecision = true;
                alt37 = dfa37.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(37);}

            switch (alt37) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:5: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration
                    {
                    dbg.location(389,85);
                    pushFollow(FOLLOW_cp_mixin_declaration_in_mediaBodyItem669);
                    cp_mixin_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:390:7: ( cp_mixin_call )=> cp_mixin_call
                    {
                    dbg.location(390,24);
                    pushFollow(FOLLOW_cp_mixin_call_in_mediaBodyItem682);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:6: ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration
                    {
                    dbg.location(391,74);
                    pushFollow(FOLLOW_propertyDeclaration_in_mediaBodyItem720);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:6: ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration
                    {
                    dbg.location(392,87);
                    pushFollow(FOLLOW_propertyDeclaration_in_mediaBodyItem747);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:7: {...}? sass_extend
                    {
                    dbg.location(393,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(393,25);
                    pushFollow(FOLLOW_sass_extend_in_mediaBodyItem757);
                    sass_extend();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:7: {...}? sass_debug
                    {
                    dbg.location(394,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(394,25);
                    pushFollow(FOLLOW_sass_debug_in_mediaBodyItem767);
                    sass_debug();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:7: {...}? sass_control
                    {
                    dbg.location(395,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(395,25);
                    pushFollow(FOLLOW_sass_control_in_mediaBodyItem777);
                    sass_control();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:396:7: {...}? sass_content
                    {
                    dbg.location(396,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(396,25);
                    pushFollow(FOLLOW_sass_content_in_mediaBodyItem787);
                    sass_content();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:397:7: rule
                    {
                    dbg.location(397,7);
                    pushFollow(FOLLOW_rule_in_mediaBodyItem795);
                    rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:398:7: page
                    {
                    dbg.location(398,7);
                    pushFollow(FOLLOW_page_in_mediaBodyItem803);
                    page();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:399:7: fontFace
                    {
                    dbg.location(399,7);
                    pushFollow(FOLLOW_fontFace_in_mediaBodyItem811);
                    fontFace();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:400:7: vendorAtRule
                    {
                    dbg.location(400,7);
                    pushFollow(FOLLOW_vendorAtRule_in_mediaBodyItem819);
                    vendorAtRule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:7: media
                    {
                    dbg.location(402,7);
                    pushFollow(FOLLOW_media_in_mediaBodyItem832);
                    media();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(403, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaBodyItem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaBodyItem"


    // $ANTLR start "mediaQueryList"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:405:1: mediaQueryList : mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )* ;
    public final void mediaQueryList() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaQueryList");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(405, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:2: ( mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:4: mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*
            {
            dbg.location(406,4);
            pushFollow(FOLLOW_mediaQuery_in_mediaQueryList846);
            mediaQuery();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(406,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:15: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*
            try { dbg.enterSubRule(40);

            loop40:
            do {
                int alt40=2;
                try { dbg.enterDecision(40, decisionCanBacktrack[40]);

                try {
                    isCyclicDecision = true;
                    alt40 = dfa40.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(40);}

                switch (alt40) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:17: ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery
            	    {
            	    dbg.location(406,31);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:31: ( ws )?
            	    int alt38=2;
            	    try { dbg.enterSubRule(38);
            	    try { dbg.enterDecision(38, decisionCanBacktrack[38]);

            	    int LA38_0 = input.LA(1);

            	    if ( ((LA38_0>=WS && LA38_0<=COMMENT)) ) {
            	        alt38=1;
            	    }
            	    } finally {dbg.exitDecision(38);}

            	    switch (alt38) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:31: ws
            	            {
            	            dbg.location(406,31);
            	            pushFollow(FOLLOW_ws_in_mediaQueryList858);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(38);}

            	    dbg.location(406,35);
            	    match(input,COMMA,FOLLOW_COMMA_in_mediaQueryList861); if (state.failed) return ;
            	    dbg.location(406,41);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:41: ( ws )?
            	    int alt39=2;
            	    try { dbg.enterSubRule(39);
            	    try { dbg.enterDecision(39, decisionCanBacktrack[39]);

            	    int LA39_0 = input.LA(1);

            	    if ( ((LA39_0>=WS && LA39_0<=COMMENT)) ) {
            	        alt39=1;
            	    }
            	    } finally {dbg.exitDecision(39);}

            	    switch (alt39) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:41: ws
            	            {
            	            dbg.location(406,41);
            	            pushFollow(FOLLOW_ws_in_mediaQueryList863);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(39);}

            	    dbg.location(406,45);
            	    pushFollow(FOLLOW_mediaQuery_in_mediaQueryList866);
            	    mediaQuery();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);
            } finally {dbg.exitSubRule(40);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(407, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaQueryList");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaQueryList"


    // $ANTLR start "mediaQuery"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:409:1: mediaQuery : ( ( mediaQueryOperator ( ws )? )? mediaType ( ( ws )? AND ( ws )? mediaExpression )* | mediaExpression ( ( ws )? AND ( ws )? mediaExpression )* );
    public final void mediaQuery() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaQuery");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(409, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:2: ( ( mediaQueryOperator ( ws )? )? mediaType ( ( ws )? AND ( ws )? mediaExpression )* | mediaExpression ( ( ws )? AND ( ws )? mediaExpression )* )
            int alt49=2;
            try { dbg.enterDecision(49, decisionCanBacktrack[49]);

            int LA49_0 = input.LA(1);

            if ( (LA49_0==IDENT||(LA49_0>=ONLY && LA49_0<=GEN)||LA49_0==HASH_SYMBOL) ) {
                alt49=1;
            }
            else if ( (LA49_0==LPAREN) ) {
                alt49=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(49);}

            switch (alt49) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:4: ( mediaQueryOperator ( ws )? )? mediaType ( ( ws )? AND ( ws )? mediaExpression )*
                    {
                    dbg.location(410,4);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:4: ( mediaQueryOperator ( ws )? )?
                    int alt42=2;
                    try { dbg.enterSubRule(42);
                    try { dbg.enterDecision(42, decisionCanBacktrack[42]);

                    int LA42_0 = input.LA(1);

                    if ( ((LA42_0>=ONLY && LA42_0<=NOT)) ) {
                        alt42=1;
                    }
                    } finally {dbg.exitDecision(42);}

                    switch (alt42) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:5: mediaQueryOperator ( ws )?
                            {
                            dbg.location(410,5);
                            pushFollow(FOLLOW_mediaQueryOperator_in_mediaQuery882);
                            mediaQueryOperator();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(410,24);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:24: ( ws )?
                            int alt41=2;
                            try { dbg.enterSubRule(41);
                            try { dbg.enterDecision(41, decisionCanBacktrack[41]);

                            int LA41_0 = input.LA(1);

                            if ( ((LA41_0>=WS && LA41_0<=COMMENT)) ) {
                                alt41=1;
                            }
                            } finally {dbg.exitDecision(41);}

                            switch (alt41) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:24: ws
                                    {
                                    dbg.location(410,24);
                                    pushFollow(FOLLOW_ws_in_mediaQuery884);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(41);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(42);}

                    dbg.location(410,32);
                    pushFollow(FOLLOW_mediaType_in_mediaQuery891);
                    mediaType();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(410,42);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:42: ( ( ws )? AND ( ws )? mediaExpression )*
                    try { dbg.enterSubRule(45);

                    loop45:
                    do {
                        int alt45=2;
                        try { dbg.enterDecision(45, decisionCanBacktrack[45]);

                        try {
                            isCyclicDecision = true;
                            alt45 = dfa45.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(45);}

                        switch (alt45) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:44: ( ws )? AND ( ws )? mediaExpression
                    	    {
                    	    dbg.location(410,44);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:44: ( ws )?
                    	    int alt43=2;
                    	    try { dbg.enterSubRule(43);
                    	    try { dbg.enterDecision(43, decisionCanBacktrack[43]);

                    	    int LA43_0 = input.LA(1);

                    	    if ( ((LA43_0>=WS && LA43_0<=COMMENT)) ) {
                    	        alt43=1;
                    	    }
                    	    } finally {dbg.exitDecision(43);}

                    	    switch (alt43) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:44: ws
                    	            {
                    	            dbg.location(410,44);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery895);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(43);}

                    	    dbg.location(410,48);
                    	    match(input,AND,FOLLOW_AND_in_mediaQuery898); if (state.failed) return ;
                    	    dbg.location(410,52);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:52: ( ws )?
                    	    int alt44=2;
                    	    try { dbg.enterSubRule(44);
                    	    try { dbg.enterDecision(44, decisionCanBacktrack[44]);

                    	    int LA44_0 = input.LA(1);

                    	    if ( ((LA44_0>=WS && LA44_0<=COMMENT)) ) {
                    	        alt44=1;
                    	    }
                    	    } finally {dbg.exitDecision(44);}

                    	    switch (alt44) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:52: ws
                    	            {
                    	            dbg.location(410,52);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery900);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(44);}

                    	    dbg.location(410,56);
                    	    pushFollow(FOLLOW_mediaExpression_in_mediaQuery903);
                    	    mediaExpression();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop45;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(45);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:4: mediaExpression ( ( ws )? AND ( ws )? mediaExpression )*
                    {
                    dbg.location(411,4);
                    pushFollow(FOLLOW_mediaExpression_in_mediaQuery911);
                    mediaExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(411,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:20: ( ( ws )? AND ( ws )? mediaExpression )*
                    try { dbg.enterSubRule(48);

                    loop48:
                    do {
                        int alt48=2;
                        try { dbg.enterDecision(48, decisionCanBacktrack[48]);

                        try {
                            isCyclicDecision = true;
                            alt48 = dfa48.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(48);}

                        switch (alt48) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:22: ( ws )? AND ( ws )? mediaExpression
                    	    {
                    	    dbg.location(411,22);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:22: ( ws )?
                    	    int alt46=2;
                    	    try { dbg.enterSubRule(46);
                    	    try { dbg.enterDecision(46, decisionCanBacktrack[46]);

                    	    int LA46_0 = input.LA(1);

                    	    if ( ((LA46_0>=WS && LA46_0<=COMMENT)) ) {
                    	        alt46=1;
                    	    }
                    	    } finally {dbg.exitDecision(46);}

                    	    switch (alt46) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:22: ws
                    	            {
                    	            dbg.location(411,22);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery915);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(46);}

                    	    dbg.location(411,26);
                    	    match(input,AND,FOLLOW_AND_in_mediaQuery918); if (state.failed) return ;
                    	    dbg.location(411,30);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:30: ( ws )?
                    	    int alt47=2;
                    	    try { dbg.enterSubRule(47);
                    	    try { dbg.enterDecision(47, decisionCanBacktrack[47]);

                    	    int LA47_0 = input.LA(1);

                    	    if ( ((LA47_0>=WS && LA47_0<=COMMENT)) ) {
                    	        alt47=1;
                    	    }
                    	    } finally {dbg.exitDecision(47);}

                    	    switch (alt47) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:30: ws
                    	            {
                    	            dbg.location(411,30);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery920);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(47);}

                    	    dbg.location(411,34);
                    	    pushFollow(FOLLOW_mediaExpression_in_mediaQuery923);
                    	    mediaExpression();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop48;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(48);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(412, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaQuery");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaQuery"


    // $ANTLR start "mediaQueryOperator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:1: mediaQueryOperator : ( ONLY | NOT );
    public final void mediaQueryOperator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaQueryOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(414, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:415:3: ( ONLY | NOT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(415,3);
            if ( (input.LA(1)>=ONLY && input.LA(1)<=NOT) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(416, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaQueryOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaQueryOperator"


    // $ANTLR start "mediaType"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:418:1: mediaType : ( IDENT | GEN | {...}? sass_interpolation_expression_var );
    public final void mediaType() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaType");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(418, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:2: ( IDENT | GEN | {...}? sass_interpolation_expression_var )
            int alt50=3;
            try { dbg.enterDecision(50, decisionCanBacktrack[50]);

            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt50=1;
                }
                break;
            case GEN:
                {
                alt50=2;
                }
                break;
            case HASH_SYMBOL:
                {
                alt50=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(50);}

            switch (alt50) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:4: IDENT
                    {
                    dbg.location(419,4);
                    match(input,IDENT,FOLLOW_IDENT_in_mediaType959); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:12: GEN
                    {
                    dbg.location(419,12);
                    match(input,GEN,FOLLOW_GEN_in_mediaType963); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:18: {...}? sass_interpolation_expression_var
                    {
                    dbg.location(419,18);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaType", "isCssPreprocessorSource()");
                    }
                    dbg.location(419,47);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaType969);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(420, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaType");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaType"


    // $ANTLR start "mediaExpression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:1: mediaExpression : LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN ;
    public final void mediaExpression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(422, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:5: ( LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:424:5: LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN
            {
            dbg.location(424,5);
            match(input,LPAREN,FOLLOW_LPAREN_in_mediaExpression989); if (state.failed) return ;
            dbg.location(424,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:424:12: ( ws )?
            int alt51=2;
            try { dbg.enterSubRule(51);
            try { dbg.enterDecision(51, decisionCanBacktrack[51]);

            int LA51_0 = input.LA(1);

            if ( ((LA51_0>=WS && LA51_0<=COMMENT)) ) {
                alt51=1;
            }
            } finally {dbg.exitDecision(51);}

            switch (alt51) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:424:12: ws
                    {
                    dbg.location(424,12);
                    pushFollow(FOLLOW_ws_in_mediaExpression991);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(51);}

            dbg.location(424,16);
            pushFollow(FOLLOW_mediaFeature_in_mediaExpression994);
            mediaFeature();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(424,29);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:424:29: ( mediaFeatureValue )?
            int alt52=2;
            try { dbg.enterSubRule(52);
            try { dbg.enterDecision(52, decisionCanBacktrack[52]);

            try {
                isCyclicDecision = true;
                alt52 = dfa52.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(52);}

            switch (alt52) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:424:29: mediaFeatureValue
                    {
                    dbg.location(424,29);
                    pushFollow(FOLLOW_mediaFeatureValue_in_mediaExpression996);
                    mediaFeatureValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(52);}

            dbg.location(424,48);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:424:48: ( ws )?
            int alt53=2;
            try { dbg.enterSubRule(53);
            try { dbg.enterDecision(53, decisionCanBacktrack[53]);

            int LA53_0 = input.LA(1);

            if ( ((LA53_0>=WS && LA53_0<=COMMENT)) ) {
                alt53=1;
            }
            } finally {dbg.exitDecision(53);}

            switch (alt53) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:424:48: ws
                    {
                    dbg.location(424,48);
                    pushFollow(FOLLOW_ws_in_mediaExpression999);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(53);}

            dbg.location(424,52);
            match(input,RPAREN,FOLLOW_RPAREN_in_mediaExpression1002); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(425, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaExpression"


    // $ANTLR start "mediaFeatureValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:427:1: mediaFeatureValue : ( ws )? COLON ( ws )? ({...}? cp_expression | expression ) ;
    public final void mediaFeatureValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaFeatureValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(427, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:428:5: ( ( ws )? COLON ( ws )? ({...}? cp_expression | expression ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:429:5: ( ws )? COLON ( ws )? ({...}? cp_expression | expression )
            {
            dbg.location(429,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:429:5: ( ws )?
            int alt54=2;
            try { dbg.enterSubRule(54);
            try { dbg.enterDecision(54, decisionCanBacktrack[54]);

            int LA54_0 = input.LA(1);

            if ( ((LA54_0>=WS && LA54_0<=COMMENT)) ) {
                alt54=1;
            }
            } finally {dbg.exitDecision(54);}

            switch (alt54) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:429:5: ws
                    {
                    dbg.location(429,5);
                    pushFollow(FOLLOW_ws_in_mediaFeatureValue1027);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(54);}

            dbg.location(429,9);
            match(input,COLON,FOLLOW_COLON_in_mediaFeatureValue1030); if (state.failed) return ;
            dbg.location(429,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:429:15: ( ws )?
            int alt55=2;
            try { dbg.enterSubRule(55);
            try { dbg.enterDecision(55, decisionCanBacktrack[55]);

            int LA55_0 = input.LA(1);

            if ( ((LA55_0>=WS && LA55_0<=COMMENT)) ) {
                alt55=1;
            }
            } finally {dbg.exitDecision(55);}

            switch (alt55) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:429:15: ws
                    {
                    dbg.location(429,15);
                    pushFollow(FOLLOW_ws_in_mediaFeatureValue1032);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(55);}

            dbg.location(430,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:430:5: ({...}? cp_expression | expression )
            int alt56=2;
            try { dbg.enterSubRule(56);
            try { dbg.enterDecision(56, decisionCanBacktrack[56]);

            try {
                isCyclicDecision = true;
                alt56 = dfa56.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(56);}

            switch (alt56) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:9: {...}? cp_expression
                    {
                    dbg.location(431,9);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaFeatureValue", "isCssPreprocessorSource()");
                    }
                    dbg.location(431,38);
                    pushFollow(FOLLOW_cp_expression_in_mediaFeatureValue1052);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:433:9: expression
                    {
                    dbg.location(433,9);
                    pushFollow(FOLLOW_expression_in_mediaFeatureValue1072);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(56);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(435, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaFeatureValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaFeatureValue"


    // $ANTLR start "mediaFeature"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:437:1: mediaFeature : ( IDENT | GEN | {...}? ( cp_variable | sass_interpolation_expression_var ) );
    public final void mediaFeature() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaFeature");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(437, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:2: ( IDENT | GEN | {...}? ( cp_variable | sass_interpolation_expression_var ) )
            int alt58=3;
            try { dbg.enterDecision(58, decisionCanBacktrack[58]);

            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt58=1;
                }
                break;
            case GEN:
                {
                alt58=2;
                }
                break;
            case NAMESPACE_SYM:
            case CHARSET_SYM:
            case IMPORT_SYM:
            case MEDIA_SYM:
            case AT_IDENT:
            case MOZ_DOCUMENT_SYM:
            case WEBKIT_KEYFRAMES_SYM:
            case PAGE_SYM:
            case COUNTER_STYLE_SYM:
            case FONT_FACE_SYM:
            case TOPLEFTCORNER_SYM:
            case TOPLEFT_SYM:
            case TOPCENTER_SYM:
            case TOPRIGHT_SYM:
            case TOPRIGHTCORNER_SYM:
            case BOTTOMLEFTCORNER_SYM:
            case BOTTOMLEFT_SYM:
            case BOTTOMCENTER_SYM:
            case BOTTOMRIGHT_SYM:
            case BOTTOMRIGHTCORNER_SYM:
            case LEFTTOP_SYM:
            case LEFTMIDDLE_SYM:
            case LEFTBOTTOM_SYM:
            case RIGHTTOP_SYM:
            case RIGHTMIDDLE_SYM:
            case RIGHTBOTTOM_SYM:
            case HASH_SYMBOL:
            case SASS_VAR:
            case SASS_CONTENT:
            case SASS_MIXIN:
            case SASS_INCLUDE:
            case SASS_EXTEND:
            case SASS_DEBUG:
            case SASS_WARN:
            case SASS_IF:
            case SASS_ELSE:
            case SASS_FOR:
            case SASS_FUNCTION:
            case SASS_RETURN:
            case SASS_EACH:
            case SASS_WHILE:
                {
                alt58=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(58);}

            switch (alt58) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:4: IDENT
                    {
                    dbg.location(438,4);
                    match(input,IDENT,FOLLOW_IDENT_in_mediaFeature1093); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:12: GEN
                    {
                    dbg.location(438,12);
                    match(input,GEN,FOLLOW_GEN_in_mediaFeature1097); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:18: {...}? ( cp_variable | sass_interpolation_expression_var )
                    {
                    dbg.location(438,18);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaFeature", "isCssPreprocessorSource()");
                    }
                    dbg.location(438,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:47: ( cp_variable | sass_interpolation_expression_var )
                    int alt57=2;
                    try { dbg.enterSubRule(57);
                    try { dbg.enterDecision(57, decisionCanBacktrack[57]);

                    int LA57_0 = input.LA(1);

                    if ( (LA57_0==NAMESPACE_SYM||(LA57_0>=CHARSET_SYM && LA57_0<=IMPORT_SYM)||LA57_0==MEDIA_SYM||(LA57_0>=AT_IDENT && LA57_0<=MOZ_DOCUMENT_SYM)||LA57_0==WEBKIT_KEYFRAMES_SYM||(LA57_0>=PAGE_SYM && LA57_0<=RIGHTBOTTOM_SYM)||LA57_0==SASS_VAR||(LA57_0>=SASS_CONTENT && LA57_0<=SASS_WHILE)) ) {
                        alt57=1;
                    }
                    else if ( (LA57_0==HASH_SYMBOL) ) {
                        alt57=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 57, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(57);}

                    switch (alt57) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:49: cp_variable
                            {
                            dbg.location(438,49);
                            pushFollow(FOLLOW_cp_variable_in_mediaFeature1105);
                            cp_variable();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:63: sass_interpolation_expression_var
                            {
                            dbg.location(438,63);
                            pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaFeature1109);
                            sass_interpolation_expression_var();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(57);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(439, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaFeature");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaFeature"


    // $ANTLR start "body"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:441:2: body : ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
    public final void body() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "body");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(441, 2);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:442:5: ( ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:443:5: ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            {
            dbg.location(443,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:443:5: ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            int cnt63=0;
            try { dbg.enterSubRule(63);

            loop63:
            do {
                int alt63=3;
                try { dbg.enterDecision(63, decisionCanBacktrack[63]);

                int LA63_0 = input.LA(1);

                if ( (LA63_0==NAMESPACE_SYM||LA63_0==IDENT||(LA63_0>=CHARSET_SYM && LA63_0<=MEDIA_SYM)||LA63_0==GEN||(LA63_0>=COLON && LA63_0<=MOZ_DOCUMENT_SYM)||LA63_0==WEBKIT_KEYFRAMES_SYM||(LA63_0>=PAGE_SYM && LA63_0<=RIGHTBOTTOM_SYM)||(LA63_0>=MINUS && LA63_0<=PIPE)||LA63_0==LESS_AND||(LA63_0>=RBRACKET && LA63_0<=SASS_VAR)||(LA63_0>=SASS_CONTENT && LA63_0<=SASS_WHILE)||LA63_0==AT_SIGN) ) {
                    alt63=1;
                }
                else if ( (LA63_0==SEMI) ) {
                    alt63=2;
                }


                } finally {dbg.exitDecision(63);}

                switch (alt63) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:10: ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    {
            	    dbg.location(444,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:10: ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:12: bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
            	    {
            	    dbg.location(444,12);
            	    pushFollow(FOLLOW_bodyItem_in_body1146);
            	    bodyItem();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(444,21);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:21: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
            	    int alt60=2;
            	    try { dbg.enterSubRule(60);
            	    try { dbg.enterDecision(60, decisionCanBacktrack[60]);

            	    try {
            	        isCyclicDecision = true;
            	        alt60 = dfa60.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(60);}

            	    switch (alt60) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:22: ( ( ws )? SEMI )=> ( ws )? SEMI
            	            {
            	            dbg.location(444,34);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:34: ( ws )?
            	            int alt59=2;
            	            try { dbg.enterSubRule(59);
            	            try { dbg.enterDecision(59, decisionCanBacktrack[59]);

            	            int LA59_0 = input.LA(1);

            	            if ( ((LA59_0>=WS && LA59_0<=COMMENT)) ) {
            	                alt59=1;
            	            }
            	            } finally {dbg.exitDecision(59);}

            	            switch (alt59) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:34: ws
            	                    {
            	                    dbg.location(444,34);
            	                    pushFollow(FOLLOW_ws_in_body1156);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(59);}

            	            dbg.location(444,38);
            	            match(input,SEMI,FOLLOW_SEMI_in_body1159); if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(60);}

            	    dbg.location(444,45);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:45: ( ws )?
            	    int alt61=2;
            	    try { dbg.enterSubRule(61);
            	    try { dbg.enterDecision(61, decisionCanBacktrack[61]);

            	    int LA61_0 = input.LA(1);

            	    if ( ((LA61_0>=WS && LA61_0<=COMMENT)) ) {
            	        alt61=1;
            	    }
            	    } finally {dbg.exitDecision(61);}

            	    switch (alt61) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:45: ws
            	            {
            	            dbg.location(444,45);
            	            pushFollow(FOLLOW_ws_in_body1163);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(61);}


            	    }


            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:10: ( SEMI ( ws )? )
            	    {
            	    dbg.location(446,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:10: ( SEMI ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:12: SEMI ( ws )?
            	    {
            	    dbg.location(446,12);
            	    match(input,SEMI,FOLLOW_SEMI_in_body1190); if (state.failed) return ;
            	    dbg.location(446,17);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:17: ( ws )?
            	    int alt62=2;
            	    try { dbg.enterSubRule(62);
            	    try { dbg.enterDecision(62, decisionCanBacktrack[62]);

            	    int LA62_0 = input.LA(1);

            	    if ( ((LA62_0>=WS && LA62_0<=COMMENT)) ) {
            	        alt62=1;
            	    }
            	    } finally {dbg.exitDecision(62);}

            	    switch (alt62) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:17: ws
            	            {
            	            dbg.location(446,17);
            	            pushFollow(FOLLOW_ws_in_body1192);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(62);}


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt63 >= 1 ) break loop63;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(63, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt63++;
            } while (true);
            } finally {dbg.exitSubRule(63);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(448, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "body");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "body"


    // $ANTLR start "bodyItem"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:450:1: bodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | {...}? ( cp_mixin_call ( ws )? SEMI )=> cp_mixin_call | {...}? ( cp_mixin_call )=> cp_mixin_call | rule | at_rule | {...}? cp_variable_declaration | {...}? importItem | {...}? sass_debug | {...}? sass_control | {...}? sass_function_declaration );
    public final void bodyItem() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "bodyItem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(450, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:5: ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | {...}? ( cp_mixin_call ( ws )? SEMI )=> cp_mixin_call | {...}? ( cp_mixin_call )=> cp_mixin_call | rule | at_rule | {...}? cp_variable_declaration | {...}? importItem | {...}? sass_debug | {...}? sass_control | {...}? sass_function_declaration )
            int alt64=10;
            try { dbg.enterDecision(64, decisionCanBacktrack[64]);

            try {
                isCyclicDecision = true;
                alt64 = dfa64.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(64);}

            switch (alt64) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:452:9: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration
                    {
                    dbg.location(452,96);
                    pushFollow(FOLLOW_cp_mixin_declaration_in_bodyItem1266);
                    cp_mixin_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:11: {...}? ( cp_mixin_call ( ws )? SEMI )=> cp_mixin_call
                    {
                    dbg.location(454,11);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isLessSource()");
                    }
                    dbg.location(454,55);
                    pushFollow(FOLLOW_cp_mixin_call_in_bodyItem1298);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:455:11: {...}? ( cp_mixin_call )=> cp_mixin_call
                    {
                    dbg.location(455,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(455,46);
                    pushFollow(FOLLOW_cp_mixin_call_in_bodyItem1316);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:456:8: rule
                    {
                    dbg.location(456,8);
                    pushFollow(FOLLOW_rule_in_bodyItem1325);
                    rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:457:11: at_rule
                    {
                    dbg.location(457,11);
                    pushFollow(FOLLOW_at_rule_in_bodyItem1337);
                    at_rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:458:11: {...}? cp_variable_declaration
                    {
                    dbg.location(458,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isCssPreprocessorSource()");
                    }
                    dbg.location(458,40);
                    pushFollow(FOLLOW_cp_variable_declaration_in_bodyItem1351);
                    cp_variable_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:460:11: {...}? importItem
                    {
                    dbg.location(460,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isCssPreprocessorSource()");
                    }
                    dbg.location(460,40);
                    pushFollow(FOLLOW_importItem_in_bodyItem1374);
                    importItem();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:461:11: {...}? sass_debug
                    {
                    dbg.location(461,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(461,29);
                    pushFollow(FOLLOW_sass_debug_in_bodyItem1388);
                    sass_debug();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:11: {...}? sass_control
                    {
                    dbg.location(462,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(462,29);
                    pushFollow(FOLLOW_sass_control_in_bodyItem1402);
                    sass_control();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:463:11: {...}? sass_function_declaration
                    {
                    dbg.location(463,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(463,29);
                    pushFollow(FOLLOW_sass_function_declaration_in_bodyItem1416);
                    sass_function_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(NL)); 
                
        }
        finally {
        }
        dbg.location(464, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bodyItem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "bodyItem"


    // $ANTLR start "at_rule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:469:1: at_rule : ( media | page | counterStyle | fontFace | vendorAtRule );
    public final void at_rule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "at_rule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(469, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:470:5: ( media | page | counterStyle | fontFace | vendorAtRule )
            int alt65=5;
            try { dbg.enterDecision(65, decisionCanBacktrack[65]);

            switch ( input.LA(1) ) {
            case MEDIA_SYM:
                {
                alt65=1;
                }
                break;
            case PAGE_SYM:
                {
                alt65=2;
                }
                break;
            case COUNTER_STYLE_SYM:
                {
                alt65=3;
                }
                break;
            case FONT_FACE_SYM:
                {
                alt65=4;
                }
                break;
            case AT_IDENT:
            case MOZ_DOCUMENT_SYM:
            case WEBKIT_KEYFRAMES_SYM:
                {
                alt65=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(65);}

            switch (alt65) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:471:5: media
                    {
                    dbg.location(471,5);
                    pushFollow(FOLLOW_media_in_at_rule1446);
                    media();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:472:7: page
                    {
                    dbg.location(472,7);
                    pushFollow(FOLLOW_page_in_at_rule1454);
                    page();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:473:7: counterStyle
                    {
                    dbg.location(473,7);
                    pushFollow(FOLLOW_counterStyle_in_at_rule1462);
                    counterStyle();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:7: fontFace
                    {
                    dbg.location(474,7);
                    pushFollow(FOLLOW_fontFace_in_at_rule1470);
                    fontFace();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:475:7: vendorAtRule
                    {
                    dbg.location(475,7);
                    pushFollow(FOLLOW_vendorAtRule_in_at_rule1478);
                    vendorAtRule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(476, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "at_rule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "at_rule"


    // $ANTLR start "vendorAtRule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:478:1: vendorAtRule : ( moz_document | webkitKeyframes | generic_at_rule );
    public final void vendorAtRule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "vendorAtRule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(478, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:479:1: ( moz_document | webkitKeyframes | generic_at_rule )
            int alt66=3;
            try { dbg.enterDecision(66, decisionCanBacktrack[66]);

            switch ( input.LA(1) ) {
            case MOZ_DOCUMENT_SYM:
                {
                alt66=1;
                }
                break;
            case WEBKIT_KEYFRAMES_SYM:
                {
                alt66=2;
                }
                break;
            case AT_IDENT:
                {
                alt66=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(66);}

            switch (alt66) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:479:3: moz_document
                    {
                    dbg.location(479,3);
                    pushFollow(FOLLOW_moz_document_in_vendorAtRule1495);
                    moz_document();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:479:18: webkitKeyframes
                    {
                    dbg.location(479,18);
                    pushFollow(FOLLOW_webkitKeyframes_in_vendorAtRule1499);
                    webkitKeyframes();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:479:36: generic_at_rule
                    {
                    dbg.location(479,36);
                    pushFollow(FOLLOW_generic_at_rule_in_vendorAtRule1503);
                    generic_at_rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(479, 51);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vendorAtRule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "vendorAtRule"


    // $ANTLR start "atRuleId"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:481:1: atRuleId : ( IDENT | STRING );
    public final void atRuleId() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "atRuleId");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(481, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:2: ( IDENT | STRING )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(482,2);
            if ( (input.LA(1)>=IDENT && input.LA(1)<=STRING) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(484, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "atRuleId");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "atRuleId"


    // $ANTLR start "generic_at_rule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:1: generic_at_rule : AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE ;
    public final void generic_at_rule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "generic_at_rule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(486, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:5: ( AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:7: AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE
            {
            dbg.location(487,7);
            match(input,AT_IDENT,FOLLOW_AT_IDENT_in_generic_at_rule1539); if (state.failed) return ;
            dbg.location(487,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:16: ( ws )?
            int alt67=2;
            try { dbg.enterSubRule(67);
            try { dbg.enterDecision(67, decisionCanBacktrack[67]);

            int LA67_0 = input.LA(1);

            if ( ((LA67_0>=WS && LA67_0<=COMMENT)) ) {
                alt67=1;
            }
            } finally {dbg.exitDecision(67);}

            switch (alt67) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:16: ws
                    {
                    dbg.location(487,16);
                    pushFollow(FOLLOW_ws_in_generic_at_rule1541);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(67);}

            dbg.location(487,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:20: ( atRuleId ( ws )? )?
            int alt69=2;
            try { dbg.enterSubRule(69);
            try { dbg.enterDecision(69, decisionCanBacktrack[69]);

            int LA69_0 = input.LA(1);

            if ( ((LA69_0>=IDENT && LA69_0<=STRING)) ) {
                alt69=1;
            }
            } finally {dbg.exitDecision(69);}

            switch (alt69) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:22: atRuleId ( ws )?
                    {
                    dbg.location(487,22);
                    pushFollow(FOLLOW_atRuleId_in_generic_at_rule1546);
                    atRuleId();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(487,31);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:31: ( ws )?
                    int alt68=2;
                    try { dbg.enterSubRule(68);
                    try { dbg.enterDecision(68, decisionCanBacktrack[68]);

                    int LA68_0 = input.LA(1);

                    if ( ((LA68_0>=WS && LA68_0<=COMMENT)) ) {
                        alt68=1;
                    }
                    } finally {dbg.exitDecision(68);}

                    switch (alt68) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:31: ws
                            {
                            dbg.location(487,31);
                            pushFollow(FOLLOW_ws_in_generic_at_rule1548);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(68);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(69);}

            dbg.location(488,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_generic_at_rule1563); if (state.failed) return ;
            dbg.location(489,10);
            pushFollow(FOLLOW_syncTo_RBRACE_in_generic_at_rule1575);
            syncTo_RBRACE();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(490,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_generic_at_rule1585); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(491, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "generic_at_rule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "generic_at_rule"


    // $ANTLR start "moz_document"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:492:1: moz_document : MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE ;
    public final void moz_document() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "moz_document");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(492, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:493:2: ( MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:2: MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE
            {
            dbg.location(494,2);
            match(input,MOZ_DOCUMENT_SYM,FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document1601); if (state.failed) return ;
            dbg.location(494,19);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:19: ( ws )?
            int alt70=2;
            try { dbg.enterSubRule(70);
            try { dbg.enterDecision(70, decisionCanBacktrack[70]);

            int LA70_0 = input.LA(1);

            if ( ((LA70_0>=WS && LA70_0<=COMMENT)) ) {
                alt70=1;
            }
            } finally {dbg.exitDecision(70);}

            switch (alt70) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:19: ws
                    {
                    dbg.location(494,19);
                    pushFollow(FOLLOW_ws_in_moz_document1603);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(70);}

            dbg.location(494,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:23: ( moz_document_function ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:25: moz_document_function ( ws )?
            {
            dbg.location(494,25);
            pushFollow(FOLLOW_moz_document_function_in_moz_document1608);
            moz_document_function();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(494,47);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:47: ( ws )?
            int alt71=2;
            try { dbg.enterSubRule(71);
            try { dbg.enterDecision(71, decisionCanBacktrack[71]);

            int LA71_0 = input.LA(1);

            if ( ((LA71_0>=WS && LA71_0<=COMMENT)) ) {
                alt71=1;
            }
            } finally {dbg.exitDecision(71);}

            switch (alt71) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:47: ws
                    {
                    dbg.location(494,47);
                    pushFollow(FOLLOW_ws_in_moz_document1610);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(71);}


            }

            dbg.location(494,52);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:52: ( COMMA ( ws )? moz_document_function ( ws )? )*
            try { dbg.enterSubRule(74);

            loop74:
            do {
                int alt74=2;
                try { dbg.enterDecision(74, decisionCanBacktrack[74]);

                int LA74_0 = input.LA(1);

                if ( (LA74_0==COMMA) ) {
                    alt74=1;
                }


                } finally {dbg.exitDecision(74);}

                switch (alt74) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:54: COMMA ( ws )? moz_document_function ( ws )?
            	    {
            	    dbg.location(494,54);
            	    match(input,COMMA,FOLLOW_COMMA_in_moz_document1616); if (state.failed) return ;
            	    dbg.location(494,60);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:60: ( ws )?
            	    int alt72=2;
            	    try { dbg.enterSubRule(72);
            	    try { dbg.enterDecision(72, decisionCanBacktrack[72]);

            	    int LA72_0 = input.LA(1);

            	    if ( ((LA72_0>=WS && LA72_0<=COMMENT)) ) {
            	        alt72=1;
            	    }
            	    } finally {dbg.exitDecision(72);}

            	    switch (alt72) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:60: ws
            	            {
            	            dbg.location(494,60);
            	            pushFollow(FOLLOW_ws_in_moz_document1618);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(72);}

            	    dbg.location(494,64);
            	    pushFollow(FOLLOW_moz_document_function_in_moz_document1621);
            	    moz_document_function();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(494,86);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:86: ( ws )?
            	    int alt73=2;
            	    try { dbg.enterSubRule(73);
            	    try { dbg.enterDecision(73, decisionCanBacktrack[73]);

            	    int LA73_0 = input.LA(1);

            	    if ( ((LA73_0>=WS && LA73_0<=COMMENT)) ) {
            	        alt73=1;
            	    }
            	    } finally {dbg.exitDecision(73);}

            	    switch (alt73) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:86: ws
            	            {
            	            dbg.location(494,86);
            	            pushFollow(FOLLOW_ws_in_moz_document1623);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(73);}


            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);
            } finally {dbg.exitSubRule(74);}

            dbg.location(495,2);
            match(input,LBRACE,FOLLOW_LBRACE_in_moz_document1630); if (state.failed) return ;
            dbg.location(495,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:495:9: ( ws )?
            int alt75=2;
            try { dbg.enterSubRule(75);
            try { dbg.enterDecision(75, decisionCanBacktrack[75]);

            int LA75_0 = input.LA(1);

            if ( ((LA75_0>=WS && LA75_0<=COMMENT)) ) {
                alt75=1;
            }
            } finally {dbg.exitDecision(75);}

            switch (alt75) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:495:9: ws
                    {
                    dbg.location(495,9);
                    pushFollow(FOLLOW_ws_in_moz_document1632);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(75);}

            dbg.location(496,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:496:3: ( body )?
            int alt76=2;
            try { dbg.enterSubRule(76);
            try { dbg.enterDecision(76, decisionCanBacktrack[76]);

            int LA76_0 = input.LA(1);

            if ( ((LA76_0>=NAMESPACE_SYM && LA76_0<=IDENT)||(LA76_0>=CHARSET_SYM && LA76_0<=MEDIA_SYM)||LA76_0==GEN||(LA76_0>=COLON && LA76_0<=MOZ_DOCUMENT_SYM)||LA76_0==WEBKIT_KEYFRAMES_SYM||(LA76_0>=PAGE_SYM && LA76_0<=RIGHTBOTTOM_SYM)||(LA76_0>=MINUS && LA76_0<=PIPE)||LA76_0==LESS_AND||(LA76_0>=RBRACKET && LA76_0<=SASS_VAR)||(LA76_0>=SASS_CONTENT && LA76_0<=SASS_WHILE)||LA76_0==AT_SIGN) ) {
                alt76=1;
            }
            } finally {dbg.exitDecision(76);}

            switch (alt76) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:496:3: body
                    {
                    dbg.location(496,3);
                    pushFollow(FOLLOW_body_in_moz_document1637);
                    body();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(76);}

            dbg.location(497,2);
            match(input,RBRACE,FOLLOW_RBRACE_in_moz_document1642); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(498, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moz_document");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "moz_document"


    // $ANTLR start "moz_document_function"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:500:1: moz_document_function : ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP );
    public final void moz_document_function() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "moz_document_function");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(500, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:501:2: ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(501,2);
            if ( input.LA(1)==URI||(input.LA(1)>=MOZ_URL_PREFIX && input.LA(1)<=MOZ_REGEXP) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(503, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moz_document_function");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "moz_document_function"


    // $ANTLR start "webkitKeyframes"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:506:1: webkitKeyframes : WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE ;
    public final void webkitKeyframes() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "webkitKeyframes");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(506, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:507:2: ( WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:2: WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE
            {
            dbg.location(508,2);
            match(input,WEBKIT_KEYFRAMES_SYM,FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes1683); if (state.failed) return ;
            dbg.location(508,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:23: ( ws )?
            int alt77=2;
            try { dbg.enterSubRule(77);
            try { dbg.enterDecision(77, decisionCanBacktrack[77]);

            int LA77_0 = input.LA(1);

            if ( ((LA77_0>=WS && LA77_0<=COMMENT)) ) {
                alt77=1;
            }
            } finally {dbg.exitDecision(77);}

            switch (alt77) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:23: ws
                    {
                    dbg.location(508,23);
                    pushFollow(FOLLOW_ws_in_webkitKeyframes1685);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(77);}

            dbg.location(508,27);
            pushFollow(FOLLOW_atRuleId_in_webkitKeyframes1688);
            atRuleId();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(508,36);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:36: ( ws )?
            int alt78=2;
            try { dbg.enterSubRule(78);
            try { dbg.enterDecision(78, decisionCanBacktrack[78]);

            int LA78_0 = input.LA(1);

            if ( ((LA78_0>=WS && LA78_0<=COMMENT)) ) {
                alt78=1;
            }
            } finally {dbg.exitDecision(78);}

            switch (alt78) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:36: ws
                    {
                    dbg.location(508,36);
                    pushFollow(FOLLOW_ws_in_webkitKeyframes1690);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(78);}

            dbg.location(509,2);
            match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframes1695); if (state.failed) return ;
            dbg.location(509,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:509:9: ( ws )?
            int alt79=2;
            try { dbg.enterSubRule(79);
            try { dbg.enterDecision(79, decisionCanBacktrack[79]);

            int LA79_0 = input.LA(1);

            if ( ((LA79_0>=WS && LA79_0<=COMMENT)) ) {
                alt79=1;
            }
            } finally {dbg.exitDecision(79);}

            switch (alt79) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:509:9: ws
                    {
                    dbg.location(509,9);
                    pushFollow(FOLLOW_ws_in_webkitKeyframes1697);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(79);}

            dbg.location(510,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:510:3: ( webkitKeyframesBlock ( ws )? )*
            try { dbg.enterSubRule(81);

            loop81:
            do {
                int alt81=2;
                try { dbg.enterDecision(81, decisionCanBacktrack[81]);

                int LA81_0 = input.LA(1);

                if ( (LA81_0==IDENT||LA81_0==PERCENTAGE) ) {
                    alt81=1;
                }


                } finally {dbg.exitDecision(81);}

                switch (alt81) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:510:5: webkitKeyframesBlock ( ws )?
            	    {
            	    dbg.location(510,5);
            	    pushFollow(FOLLOW_webkitKeyframesBlock_in_webkitKeyframes1704);
            	    webkitKeyframesBlock();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(510,26);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:510:26: ( ws )?
            	    int alt80=2;
            	    try { dbg.enterSubRule(80);
            	    try { dbg.enterDecision(80, decisionCanBacktrack[80]);

            	    int LA80_0 = input.LA(1);

            	    if ( ((LA80_0>=WS && LA80_0<=COMMENT)) ) {
            	        alt80=1;
            	    }
            	    } finally {dbg.exitDecision(80);}

            	    switch (alt80) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:510:26: ws
            	            {
            	            dbg.location(510,26);
            	            pushFollow(FOLLOW_ws_in_webkitKeyframes1706);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(80);}


            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);
            } finally {dbg.exitSubRule(81);}

            dbg.location(511,2);
            match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframes1713); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(512, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "webkitKeyframes");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "webkitKeyframes"


    // $ANTLR start "webkitKeyframesBlock"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:514:1: webkitKeyframesBlock : webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void webkitKeyframesBlock() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "webkitKeyframesBlock");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(514, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:515:2: ( webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:2: webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(516,2);
            pushFollow(FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock1726);
            webkitKeyframeSelectors();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(516,26);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:26: ( ws )?
            int alt82=2;
            try { dbg.enterSubRule(82);
            try { dbg.enterDecision(82, decisionCanBacktrack[82]);

            int LA82_0 = input.LA(1);

            if ( ((LA82_0>=WS && LA82_0<=COMMENT)) ) {
                alt82=1;
            }
            } finally {dbg.exitDecision(82);}

            switch (alt82) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:26: ws
                    {
                    dbg.location(516,26);
                    pushFollow(FOLLOW_ws_in_webkitKeyframesBlock1728);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(82);}

            dbg.location(517,2);
            match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframesBlock1732); if (state.failed) return ;
            dbg.location(517,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:517:10: ( ws )?
            int alt83=2;
            try { dbg.enterSubRule(83);
            try { dbg.enterDecision(83, decisionCanBacktrack[83]);

            int LA83_0 = input.LA(1);

            if ( ((LA83_0>=WS && LA83_0<=COMMENT)) ) {
                alt83=1;
            }
            } finally {dbg.exitDecision(83);}

            switch (alt83) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:517:10: ws
                    {
                    dbg.location(517,10);
                    pushFollow(FOLLOW_ws_in_webkitKeyframesBlock1735);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(83);}

            dbg.location(517,14);
            pushFollow(FOLLOW_syncToFollow_in_webkitKeyframesBlock1738);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(518,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:518:3: ( declarations )?
            int alt84=2;
            try { dbg.enterSubRule(84);
            try { dbg.enterDecision(84, decisionCanBacktrack[84]);

            int LA84_0 = input.LA(1);

            if ( ((LA84_0>=NAMESPACE_SYM && LA84_0<=IDENT)||(LA84_0>=CHARSET_SYM && LA84_0<=MEDIA_SYM)||LA84_0==GEN||(LA84_0>=COLON && LA84_0<=MOZ_DOCUMENT_SYM)||LA84_0==WEBKIT_KEYFRAMES_SYM||(LA84_0>=PAGE_SYM && LA84_0<=RIGHTBOTTOM_SYM)||(LA84_0>=MINUS && LA84_0<=PIPE)||LA84_0==LESS_AND||(LA84_0>=RBRACKET && LA84_0<=SASS_VAR)||(LA84_0>=SASS_CONTENT && LA84_0<=SASS_WHILE)||LA84_0==AT_SIGN) ) {
                alt84=1;
            }
            } finally {dbg.exitDecision(84);}

            switch (alt84) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:518:3: declarations
                    {
                    dbg.location(518,3);
                    pushFollow(FOLLOW_declarations_in_webkitKeyframesBlock1742);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(84);}

            dbg.location(519,2);
            match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframesBlock1746); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(520, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "webkitKeyframesBlock");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "webkitKeyframesBlock"


    // $ANTLR start "webkitKeyframeSelectors"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:522:1: webkitKeyframeSelectors : ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )* ;
    public final void webkitKeyframeSelectors() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "webkitKeyframeSelectors");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(522, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:523:2: ( ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:2: ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*
            {
            dbg.location(524,2);
            if ( input.LA(1)==IDENT||input.LA(1)==PERCENTAGE ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(524,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:25: ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*
            try { dbg.enterSubRule(87);

            loop87:
            do {
                int alt87=2;
                try { dbg.enterDecision(87, decisionCanBacktrack[87]);

                try {
                    isCyclicDecision = true;
                    alt87 = dfa87.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(87);}

                switch (alt87) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:27: ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE )
            	    {
            	    dbg.location(524,27);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:27: ( ws )?
            	    int alt85=2;
            	    try { dbg.enterSubRule(85);
            	    try { dbg.enterDecision(85, decisionCanBacktrack[85]);

            	    int LA85_0 = input.LA(1);

            	    if ( ((LA85_0>=WS && LA85_0<=COMMENT)) ) {
            	        alt85=1;
            	    }
            	    } finally {dbg.exitDecision(85);}

            	    switch (alt85) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:27: ws
            	            {
            	            dbg.location(524,27);
            	            pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors1773);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(85);}

            	    dbg.location(524,31);
            	    match(input,COMMA,FOLLOW_COMMA_in_webkitKeyframeSelectors1776); if (state.failed) return ;
            	    dbg.location(524,37);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:37: ( ws )?
            	    int alt86=2;
            	    try { dbg.enterSubRule(86);
            	    try { dbg.enterDecision(86, decisionCanBacktrack[86]);

            	    int LA86_0 = input.LA(1);

            	    if ( ((LA86_0>=WS && LA86_0<=COMMENT)) ) {
            	        alt86=1;
            	    }
            	    } finally {dbg.exitDecision(86);}

            	    switch (alt86) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:37: ws
            	            {
            	            dbg.location(524,37);
            	            pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors1778);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(86);}

            	    dbg.location(524,41);
            	    if ( input.LA(1)==IDENT||input.LA(1)==PERCENTAGE ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);
            } finally {dbg.exitSubRule(87);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(525, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "webkitKeyframeSelectors");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "webkitKeyframeSelectors"


    // $ANTLR start "page"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:527:1: page : PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )* RBRACE ;
    public final void page() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "page");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(527, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:5: ( PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )* RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:7: PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )* RBRACE
            {
            dbg.location(528,7);
            match(input,PAGE_SYM,FOLLOW_PAGE_SYM_in_page1810); if (state.failed) return ;
            dbg.location(528,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:16: ( ws )?
            int alt88=2;
            try { dbg.enterSubRule(88);
            try { dbg.enterDecision(88, decisionCanBacktrack[88]);

            int LA88_0 = input.LA(1);

            if ( ((LA88_0>=WS && LA88_0<=COMMENT)) ) {
                alt88=1;
            }
            } finally {dbg.exitDecision(88);}

            switch (alt88) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:16: ws
                    {
                    dbg.location(528,16);
                    pushFollow(FOLLOW_ws_in_page1812);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(88);}

            dbg.location(528,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:20: ( IDENT ( ws )? )?
            int alt90=2;
            try { dbg.enterSubRule(90);
            try { dbg.enterDecision(90, decisionCanBacktrack[90]);

            int LA90_0 = input.LA(1);

            if ( (LA90_0==IDENT) ) {
                alt90=1;
            }
            } finally {dbg.exitDecision(90);}

            switch (alt90) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:22: IDENT ( ws )?
                    {
                    dbg.location(528,22);
                    match(input,IDENT,FOLLOW_IDENT_in_page1817); if (state.failed) return ;
                    dbg.location(528,28);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:28: ( ws )?
                    int alt89=2;
                    try { dbg.enterSubRule(89);
                    try { dbg.enterDecision(89, decisionCanBacktrack[89]);

                    int LA89_0 = input.LA(1);

                    if ( ((LA89_0>=WS && LA89_0<=COMMENT)) ) {
                        alt89=1;
                    }
                    } finally {dbg.exitDecision(89);}

                    switch (alt89) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:28: ws
                            {
                            dbg.location(528,28);
                            pushFollow(FOLLOW_ws_in_page1819);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(89);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(90);}

            dbg.location(528,35);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:35: ( pseudoPage ( ws )? )?
            int alt92=2;
            try { dbg.enterSubRule(92);
            try { dbg.enterDecision(92, decisionCanBacktrack[92]);

            int LA92_0 = input.LA(1);

            if ( (LA92_0==COLON) ) {
                alt92=1;
            }
            } finally {dbg.exitDecision(92);}

            switch (alt92) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:36: pseudoPage ( ws )?
                    {
                    dbg.location(528,36);
                    pushFollow(FOLLOW_pseudoPage_in_page1826);
                    pseudoPage();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(528,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:47: ( ws )?
                    int alt91=2;
                    try { dbg.enterSubRule(91);
                    try { dbg.enterDecision(91, decisionCanBacktrack[91]);

                    int LA91_0 = input.LA(1);

                    if ( ((LA91_0>=WS && LA91_0<=COMMENT)) ) {
                        alt91=1;
                    }
                    } finally {dbg.exitDecision(91);}

                    switch (alt91) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:47: ws
                            {
                            dbg.location(528,47);
                            pushFollow(FOLLOW_ws_in_page1828);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(91);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(92);}

            dbg.location(529,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_page1841); if (state.failed) return ;
            dbg.location(529,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:529:16: ( ws )?
            int alt93=2;
            try { dbg.enterSubRule(93);
            try { dbg.enterDecision(93, decisionCanBacktrack[93]);

            int LA93_0 = input.LA(1);

            if ( ((LA93_0>=WS && LA93_0<=COMMENT)) ) {
                alt93=1;
            }
            } finally {dbg.exitDecision(93);}

            switch (alt93) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:529:16: ws
                    {
                    dbg.location(529,16);
                    pushFollow(FOLLOW_ws_in_page1843);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(93);}

            dbg.location(532,13);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:13: ( ( propertyDeclaration | margin ) ( ws )? )?
            int alt96=2;
            try { dbg.enterSubRule(96);
            try { dbg.enterDecision(96, decisionCanBacktrack[96]);

            int LA96_0 = input.LA(1);

            if ( (LA96_0==NAMESPACE_SYM||LA96_0==IDENT||(LA96_0>=CHARSET_SYM && LA96_0<=IMPORT_SYM)||LA96_0==MEDIA_SYM||LA96_0==GEN||(LA96_0>=AT_IDENT && LA96_0<=MOZ_DOCUMENT_SYM)||LA96_0==WEBKIT_KEYFRAMES_SYM||(LA96_0>=PAGE_SYM && LA96_0<=RIGHTBOTTOM_SYM)||LA96_0==MINUS||(LA96_0>=HASH_SYMBOL && LA96_0<=DOT)||LA96_0==STAR||LA96_0==SASS_VAR||(LA96_0>=SASS_CONTENT && LA96_0<=SASS_WHILE)) ) {
                alt96=1;
            }
            } finally {dbg.exitDecision(96);}

            switch (alt96) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:14: ( propertyDeclaration | margin ) ( ws )?
                    {
                    dbg.location(532,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:14: ( propertyDeclaration | margin )
                    int alt94=2;
                    try { dbg.enterSubRule(94);
                    try { dbg.enterDecision(94, decisionCanBacktrack[94]);

                    try {
                        isCyclicDecision = true;
                        alt94 = dfa94.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(94);}

                    switch (alt94) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:15: propertyDeclaration
                            {
                            dbg.location(532,15);
                            pushFollow(FOLLOW_propertyDeclaration_in_page1886);
                            propertyDeclaration();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:35: margin
                            {
                            dbg.location(532,35);
                            pushFollow(FOLLOW_margin_in_page1888);
                            margin();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(94);}

                    dbg.location(532,43);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:43: ( ws )?
                    int alt95=2;
                    try { dbg.enterSubRule(95);
                    try { dbg.enterDecision(95, decisionCanBacktrack[95]);

                    int LA95_0 = input.LA(1);

                    if ( ((LA95_0>=WS && LA95_0<=COMMENT)) ) {
                        alt95=1;
                    }
                    } finally {dbg.exitDecision(95);}

                    switch (alt95) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:43: ws
                            {
                            dbg.location(532,43);
                            pushFollow(FOLLOW_ws_in_page1891);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(95);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(96);}

            dbg.location(532,49);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:49: ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )*
            try { dbg.enterSubRule(101);

            loop101:
            do {
                int alt101=2;
                try { dbg.enterDecision(101, decisionCanBacktrack[101]);

                int LA101_0 = input.LA(1);

                if ( (LA101_0==SEMI) ) {
                    alt101=1;
                }


                } finally {dbg.exitDecision(101);}

                switch (alt101) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:50: SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )?
            	    {
            	    dbg.location(532,50);
            	    match(input,SEMI,FOLLOW_SEMI_in_page1897); if (state.failed) return ;
            	    dbg.location(532,55);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:55: ( ws )?
            	    int alt97=2;
            	    try { dbg.enterSubRule(97);
            	    try { dbg.enterDecision(97, decisionCanBacktrack[97]);

            	    int LA97_0 = input.LA(1);

            	    if ( ((LA97_0>=WS && LA97_0<=COMMENT)) ) {
            	        alt97=1;
            	    }
            	    } finally {dbg.exitDecision(97);}

            	    switch (alt97) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:55: ws
            	            {
            	            dbg.location(532,55);
            	            pushFollow(FOLLOW_ws_in_page1899);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(97);}

            	    dbg.location(532,59);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:59: ( ( propertyDeclaration | margin ) ( ws )? )?
            	    int alt100=2;
            	    try { dbg.enterSubRule(100);
            	    try { dbg.enterDecision(100, decisionCanBacktrack[100]);

            	    int LA100_0 = input.LA(1);

            	    if ( (LA100_0==NAMESPACE_SYM||LA100_0==IDENT||(LA100_0>=CHARSET_SYM && LA100_0<=IMPORT_SYM)||LA100_0==MEDIA_SYM||LA100_0==GEN||(LA100_0>=AT_IDENT && LA100_0<=MOZ_DOCUMENT_SYM)||LA100_0==WEBKIT_KEYFRAMES_SYM||(LA100_0>=PAGE_SYM && LA100_0<=RIGHTBOTTOM_SYM)||LA100_0==MINUS||(LA100_0>=HASH_SYMBOL && LA100_0<=DOT)||LA100_0==STAR||LA100_0==SASS_VAR||(LA100_0>=SASS_CONTENT && LA100_0<=SASS_WHILE)) ) {
            	        alt100=1;
            	    }
            	    } finally {dbg.exitDecision(100);}

            	    switch (alt100) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:60: ( propertyDeclaration | margin ) ( ws )?
            	            {
            	            dbg.location(532,60);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:60: ( propertyDeclaration | margin )
            	            int alt98=2;
            	            try { dbg.enterSubRule(98);
            	            try { dbg.enterDecision(98, decisionCanBacktrack[98]);

            	            try {
            	                isCyclicDecision = true;
            	                alt98 = dfa98.predict(input);
            	            }
            	            catch (NoViableAltException nvae) {
            	                dbg.recognitionException(nvae);
            	                throw nvae;
            	            }
            	            } finally {dbg.exitDecision(98);}

            	            switch (alt98) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:61: propertyDeclaration
            	                    {
            	                    dbg.location(532,61);
            	                    pushFollow(FOLLOW_propertyDeclaration_in_page1904);
            	                    propertyDeclaration();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;
            	                case 2 :
            	                    dbg.enterAlt(2);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:81: margin
            	                    {
            	                    dbg.location(532,81);
            	                    pushFollow(FOLLOW_margin_in_page1906);
            	                    margin();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(98);}

            	            dbg.location(532,89);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:89: ( ws )?
            	            int alt99=2;
            	            try { dbg.enterSubRule(99);
            	            try { dbg.enterDecision(99, decisionCanBacktrack[99]);

            	            int LA99_0 = input.LA(1);

            	            if ( ((LA99_0>=WS && LA99_0<=COMMENT)) ) {
            	                alt99=1;
            	            }
            	            } finally {dbg.exitDecision(99);}

            	            switch (alt99) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:89: ws
            	                    {
            	                    dbg.location(532,89);
            	                    pushFollow(FOLLOW_ws_in_page1909);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(99);}


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(100);}


            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);
            } finally {dbg.exitSubRule(101);}

            dbg.location(533,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_page1924); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(534, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "page");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "page"


    // $ANTLR start "counterStyle"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:1: counterStyle : COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
    public final void counterStyle() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "counterStyle");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(536, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:537:5: ( COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:537:7: COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
            {
            dbg.location(537,7);
            match(input,COUNTER_STYLE_SYM,FOLLOW_COUNTER_STYLE_SYM_in_counterStyle1945); if (state.failed) return ;
            dbg.location(537,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:537:25: ( ws )?
            int alt102=2;
            try { dbg.enterSubRule(102);
            try { dbg.enterDecision(102, decisionCanBacktrack[102]);

            int LA102_0 = input.LA(1);

            if ( ((LA102_0>=WS && LA102_0<=COMMENT)) ) {
                alt102=1;
            }
            } finally {dbg.exitDecision(102);}

            switch (alt102) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:537:25: ws
                    {
                    dbg.location(537,25);
                    pushFollow(FOLLOW_ws_in_counterStyle1947);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(102);}

            dbg.location(537,29);
            match(input,IDENT,FOLLOW_IDENT_in_counterStyle1950); if (state.failed) return ;
            dbg.location(537,35);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:537:35: ( ws )?
            int alt103=2;
            try { dbg.enterSubRule(103);
            try { dbg.enterDecision(103, decisionCanBacktrack[103]);

            int LA103_0 = input.LA(1);

            if ( ((LA103_0>=WS && LA103_0<=COMMENT)) ) {
                alt103=1;
            }
            } finally {dbg.exitDecision(103);}

            switch (alt103) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:537:35: ws
                    {
                    dbg.location(537,35);
                    pushFollow(FOLLOW_ws_in_counterStyle1952);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(103);}

            dbg.location(538,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_counterStyle1963); if (state.failed) return ;
            dbg.location(538,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:538:16: ( ws )?
            int alt104=2;
            try { dbg.enterSubRule(104);
            try { dbg.enterDecision(104, decisionCanBacktrack[104]);

            int LA104_0 = input.LA(1);

            if ( ((LA104_0>=WS && LA104_0<=COMMENT)) ) {
                alt104=1;
            }
            } finally {dbg.exitDecision(104);}

            switch (alt104) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:538:16: ws
                    {
                    dbg.location(538,16);
                    pushFollow(FOLLOW_ws_in_counterStyle1965);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(104);}

            dbg.location(538,20);
            pushFollow(FOLLOW_syncToDeclarationsRule_in_counterStyle1968);
            syncToDeclarationsRule();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(539,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:3: ( declarations )?
            int alt105=2;
            try { dbg.enterSubRule(105);
            try { dbg.enterDecision(105, decisionCanBacktrack[105]);

            int LA105_0 = input.LA(1);

            if ( ((LA105_0>=NAMESPACE_SYM && LA105_0<=IDENT)||(LA105_0>=CHARSET_SYM && LA105_0<=MEDIA_SYM)||LA105_0==GEN||(LA105_0>=COLON && LA105_0<=MOZ_DOCUMENT_SYM)||LA105_0==WEBKIT_KEYFRAMES_SYM||(LA105_0>=PAGE_SYM && LA105_0<=RIGHTBOTTOM_SYM)||(LA105_0>=MINUS && LA105_0<=PIPE)||LA105_0==LESS_AND||(LA105_0>=RBRACKET && LA105_0<=SASS_VAR)||(LA105_0>=SASS_CONTENT && LA105_0<=SASS_WHILE)||LA105_0==AT_SIGN) ) {
                alt105=1;
            }
            } finally {dbg.exitDecision(105);}

            switch (alt105) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:3: declarations
                    {
                    dbg.location(539,3);
                    pushFollow(FOLLOW_declarations_in_counterStyle1972);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(105);}

            dbg.location(540,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_counterStyle1983); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(541, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "counterStyle");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "counterStyle"


    // $ANTLR start "fontFace"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:543:1: fontFace : FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
    public final void fontFace() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fontFace");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(543, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:544:5: ( FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:544:7: FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
            {
            dbg.location(544,7);
            match(input,FONT_FACE_SYM,FOLLOW_FONT_FACE_SYM_in_fontFace2004); if (state.failed) return ;
            dbg.location(544,21);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:544:21: ( ws )?
            int alt106=2;
            try { dbg.enterSubRule(106);
            try { dbg.enterDecision(106, decisionCanBacktrack[106]);

            int LA106_0 = input.LA(1);

            if ( ((LA106_0>=WS && LA106_0<=COMMENT)) ) {
                alt106=1;
            }
            } finally {dbg.exitDecision(106);}

            switch (alt106) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:544:21: ws
                    {
                    dbg.location(544,21);
                    pushFollow(FOLLOW_ws_in_fontFace2006);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(106);}

            dbg.location(545,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_fontFace2017); if (state.failed) return ;
            dbg.location(545,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:545:16: ( ws )?
            int alt107=2;
            try { dbg.enterSubRule(107);
            try { dbg.enterDecision(107, decisionCanBacktrack[107]);

            int LA107_0 = input.LA(1);

            if ( ((LA107_0>=WS && LA107_0<=COMMENT)) ) {
                alt107=1;
            }
            } finally {dbg.exitDecision(107);}

            switch (alt107) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:545:16: ws
                    {
                    dbg.location(545,16);
                    pushFollow(FOLLOW_ws_in_fontFace2019);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(107);}

            dbg.location(545,20);
            pushFollow(FOLLOW_syncToDeclarationsRule_in_fontFace2022);
            syncToDeclarationsRule();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(546,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:546:3: ( declarations )?
            int alt108=2;
            try { dbg.enterSubRule(108);
            try { dbg.enterDecision(108, decisionCanBacktrack[108]);

            int LA108_0 = input.LA(1);

            if ( ((LA108_0>=NAMESPACE_SYM && LA108_0<=IDENT)||(LA108_0>=CHARSET_SYM && LA108_0<=MEDIA_SYM)||LA108_0==GEN||(LA108_0>=COLON && LA108_0<=MOZ_DOCUMENT_SYM)||LA108_0==WEBKIT_KEYFRAMES_SYM||(LA108_0>=PAGE_SYM && LA108_0<=RIGHTBOTTOM_SYM)||(LA108_0>=MINUS && LA108_0<=PIPE)||LA108_0==LESS_AND||(LA108_0>=RBRACKET && LA108_0<=SASS_VAR)||(LA108_0>=SASS_CONTENT && LA108_0<=SASS_WHILE)||LA108_0==AT_SIGN) ) {
                alt108=1;
            }
            } finally {dbg.exitDecision(108);}

            switch (alt108) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:546:3: declarations
                    {
                    dbg.location(546,3);
                    pushFollow(FOLLOW_declarations_in_fontFace2026);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(108);}

            dbg.location(547,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_fontFace2037); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(548, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fontFace");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fontFace"


    // $ANTLR start "margin"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:550:1: margin : margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
    public final void margin() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "margin");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(550, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:551:2: ( margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:551:4: margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
            {
            dbg.location(551,4);
            pushFollow(FOLLOW_margin_sym_in_margin2052);
            margin_sym();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(551,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:551:15: ( ws )?
            int alt109=2;
            try { dbg.enterSubRule(109);
            try { dbg.enterDecision(109, decisionCanBacktrack[109]);

            int LA109_0 = input.LA(1);

            if ( ((LA109_0>=WS && LA109_0<=COMMENT)) ) {
                alt109=1;
            }
            } finally {dbg.exitDecision(109);}

            switch (alt109) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:551:15: ws
                    {
                    dbg.location(551,15);
                    pushFollow(FOLLOW_ws_in_margin2054);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(109);}

            dbg.location(551,19);
            match(input,LBRACE,FOLLOW_LBRACE_in_margin2057); if (state.failed) return ;
            dbg.location(551,26);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:551:26: ( ws )?
            int alt110=2;
            try { dbg.enterSubRule(110);
            try { dbg.enterDecision(110, decisionCanBacktrack[110]);

            int LA110_0 = input.LA(1);

            if ( ((LA110_0>=WS && LA110_0<=COMMENT)) ) {
                alt110=1;
            }
            } finally {dbg.exitDecision(110);}

            switch (alt110) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:551:26: ws
                    {
                    dbg.location(551,26);
                    pushFollow(FOLLOW_ws_in_margin2059);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(110);}

            dbg.location(551,30);
            pushFollow(FOLLOW_syncToDeclarationsRule_in_margin2062);
            syncToDeclarationsRule();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(551,53);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:551:53: ( declarations )?
            int alt111=2;
            try { dbg.enterSubRule(111);
            try { dbg.enterDecision(111, decisionCanBacktrack[111]);

            int LA111_0 = input.LA(1);

            if ( ((LA111_0>=NAMESPACE_SYM && LA111_0<=IDENT)||(LA111_0>=CHARSET_SYM && LA111_0<=MEDIA_SYM)||LA111_0==GEN||(LA111_0>=COLON && LA111_0<=MOZ_DOCUMENT_SYM)||LA111_0==WEBKIT_KEYFRAMES_SYM||(LA111_0>=PAGE_SYM && LA111_0<=RIGHTBOTTOM_SYM)||(LA111_0>=MINUS && LA111_0<=PIPE)||LA111_0==LESS_AND||(LA111_0>=RBRACKET && LA111_0<=SASS_VAR)||(LA111_0>=SASS_CONTENT && LA111_0<=SASS_WHILE)||LA111_0==AT_SIGN) ) {
                alt111=1;
            }
            } finally {dbg.exitDecision(111);}

            switch (alt111) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:551:53: declarations
                    {
                    dbg.location(551,53);
                    pushFollow(FOLLOW_declarations_in_margin2064);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(111);}

            dbg.location(551,67);
            match(input,RBRACE,FOLLOW_RBRACE_in_margin2067); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(552, 8);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "margin");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "margin"


    // $ANTLR start "margin_sym"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:554:1: margin_sym : ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM );
    public final void margin_sym() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "margin_sym");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(554, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:555:2: ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(555,2);
            if ( (input.LA(1)>=TOPLEFTCORNER_SYM && input.LA(1)<=RIGHTBOTTOM_SYM) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(572, 8);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "margin_sym");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "margin_sym"


    // $ANTLR start "pseudoPage"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:574:1: pseudoPage : COLON IDENT ;
    public final void pseudoPage() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "pseudoPage");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(574, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:575:5: ( COLON IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:575:7: COLON IDENT
            {
            dbg.location(575,7);
            match(input,COLON,FOLLOW_COLON_in_pseudoPage2296); if (state.failed) return ;
            dbg.location(575,13);
            match(input,IDENT,FOLLOW_IDENT_in_pseudoPage2298); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(576, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pseudoPage");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "pseudoPage"


    // $ANTLR start "operator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:578:1: operator : ( SOLIDUS | COMMA );
    public final void operator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "operator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(578, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:579:5: ( SOLIDUS | COMMA )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(579,5);
            if ( input.LA(1)==COMMA||input.LA(1)==SOLIDUS ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(581, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "operator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "operator"


    // $ANTLR start "unaryOperator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:583:1: unaryOperator : ( MINUS | PLUS );
    public final void unaryOperator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "unaryOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(583, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:584:5: ( MINUS | PLUS )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(584,5);
            if ( (input.LA(1)>=MINUS && input.LA(1)<=PLUS) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(586, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unaryOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "unaryOperator"


    // $ANTLR start "property"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:588:1: property : ( ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression | IDENT | GEN | {...}? cp_variable );
    public final void property() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "property");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(588, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:589:5: ( ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression | IDENT | GEN | {...}? cp_variable )
            int alt112=4;
            try { dbg.enterDecision(112, decisionCanBacktrack[112]);

            int LA112_0 = input.LA(1);

            if ( (LA112_0==HASH_SYMBOL) && (synpred13_Css3())) {
                alt112=1;
            }
            else if ( (LA112_0==IDENT) ) {
                int LA112_2 = input.LA(2);

                if ( (synpred13_Css3()) ) {
                    alt112=1;
                }
                else if ( (true) ) {
                    alt112=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA112_0==MINUS||(LA112_0>=HASH && LA112_0<=DOT)) && (synpred13_Css3())) {
                alt112=1;
            }
            else if ( (LA112_0==GEN) ) {
                alt112=3;
            }
            else if ( (LA112_0==NAMESPACE_SYM||(LA112_0>=CHARSET_SYM && LA112_0<=IMPORT_SYM)||LA112_0==MEDIA_SYM||(LA112_0>=AT_IDENT && LA112_0<=MOZ_DOCUMENT_SYM)||LA112_0==WEBKIT_KEYFRAMES_SYM||(LA112_0>=PAGE_SYM && LA112_0<=RIGHTBOTTOM_SYM)||LA112_0==SASS_VAR||(LA112_0>=SASS_CONTENT && LA112_0<=SASS_WHILE)) ) {
                alt112=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 112, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(112);}

            switch (alt112) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:593:5: ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression
                    {
                    dbg.location(593,49);
                    pushFollow(FOLLOW_sass_declaration_interpolation_expression_in_property2413);
                    sass_declaration_interpolation_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:594:7: IDENT
                    {
                    dbg.location(594,7);
                    match(input,IDENT,FOLLOW_IDENT_in_property2421); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:595:7: GEN
                    {
                    dbg.location(595,7);
                    match(input,GEN,FOLLOW_GEN_in_property2430); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:596:7: {...}? cp_variable
                    {
                    dbg.location(596,7);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "property", "isCssPreprocessorSource()");
                    }
                    dbg.location(596,36);
                    pushFollow(FOLLOW_cp_variable_in_property2441);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(COLON)); 
                
        }
        finally {
        }
        dbg.location(598, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "property");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "property"


    // $ANTLR start "rule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:603:1: rule : selectorsGroup ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void rule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "rule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(603, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:604:5: ( selectorsGroup ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:5: selectorsGroup ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(605,5);
            pushFollow(FOLLOW_selectorsGroup_in_rule2480);
            selectorsGroup();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(605,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:20: ( ws )?
            int alt113=2;
            try { dbg.enterSubRule(113);
            try { dbg.enterDecision(113, decisionCanBacktrack[113]);

            int LA113_0 = input.LA(1);

            if ( ((LA113_0>=WS && LA113_0<=COMMENT)) ) {
                alt113=1;
            }
            } finally {dbg.exitDecision(113);}

            switch (alt113) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:605:20: ws
                    {
                    dbg.location(605,20);
                    pushFollow(FOLLOW_ws_in_rule2482);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(113);}

            dbg.location(606,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_rule2489); if (state.failed) return ;
            dbg.location(606,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:606:12: ( ws )?
            int alt114=2;
            try { dbg.enterSubRule(114);
            try { dbg.enterDecision(114, decisionCanBacktrack[114]);

            int LA114_0 = input.LA(1);

            if ( ((LA114_0>=WS && LA114_0<=COMMENT)) ) {
                alt114=1;
            }
            } finally {dbg.exitDecision(114);}

            switch (alt114) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:606:12: ws
                    {
                    dbg.location(606,12);
                    pushFollow(FOLLOW_ws_in_rule2491);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(114);}

            dbg.location(606,16);
            pushFollow(FOLLOW_syncToFollow_in_rule2494);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(607,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:607:9: ( declarations )?
            int alt115=2;
            try { dbg.enterSubRule(115);
            try { dbg.enterDecision(115, decisionCanBacktrack[115]);

            int LA115_0 = input.LA(1);

            if ( ((LA115_0>=NAMESPACE_SYM && LA115_0<=IDENT)||(LA115_0>=CHARSET_SYM && LA115_0<=MEDIA_SYM)||LA115_0==GEN||(LA115_0>=COLON && LA115_0<=MOZ_DOCUMENT_SYM)||LA115_0==WEBKIT_KEYFRAMES_SYM||(LA115_0>=PAGE_SYM && LA115_0<=RIGHTBOTTOM_SYM)||(LA115_0>=MINUS && LA115_0<=PIPE)||LA115_0==LESS_AND||(LA115_0>=RBRACKET && LA115_0<=SASS_VAR)||(LA115_0>=SASS_CONTENT && LA115_0<=SASS_WHILE)||LA115_0==AT_SIGN) ) {
                alt115=1;
            }
            } finally {dbg.exitDecision(115);}

            switch (alt115) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:607:9: declarations
                    {
                    dbg.location(607,9);
                    pushFollow(FOLLOW_declarations_in_rule2505);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(115);}

            dbg.location(608,5);
            match(input,RBRACE,FOLLOW_RBRACE_in_rule2512); if (state.failed) return ;

            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(RBRACE));
                    input.consume(); //consume the RBRACE as well   
                
        }
        finally {
        }
        dbg.location(609, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "rule"


    // $ANTLR start "declarations"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:616:1: declarations : ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
    public final void declarations() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "declarations");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(616, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:617:5: ( ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:618:5: ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            {
            dbg.location(618,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:618:5: ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            int cnt120=0;
            try { dbg.enterSubRule(120);

            loop120:
            do {
                int alt120=3;
                try { dbg.enterDecision(120, decisionCanBacktrack[120]);

                int LA120_0 = input.LA(1);

                if ( (LA120_0==NAMESPACE_SYM||LA120_0==IDENT||(LA120_0>=CHARSET_SYM && LA120_0<=MEDIA_SYM)||LA120_0==GEN||(LA120_0>=COLON && LA120_0<=MOZ_DOCUMENT_SYM)||LA120_0==WEBKIT_KEYFRAMES_SYM||(LA120_0>=PAGE_SYM && LA120_0<=RIGHTBOTTOM_SYM)||(LA120_0>=MINUS && LA120_0<=PIPE)||LA120_0==LESS_AND||(LA120_0>=RBRACKET && LA120_0<=SASS_VAR)||(LA120_0>=SASS_CONTENT && LA120_0<=SASS_WHILE)||LA120_0==AT_SIGN) ) {
                    alt120=1;
                }
                else if ( (LA120_0==SEMI) ) {
                    alt120=2;
                }


                } finally {dbg.exitDecision(120);}

                switch (alt120) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:10: ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    {
            	    dbg.location(619,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:10: ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:12: declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
            	    {
            	    dbg.location(619,12);
            	    pushFollow(FOLLOW_declaration_in_declarations2560);
            	    declaration();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(619,24);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:24: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
            	    int alt117=2;
            	    try { dbg.enterSubRule(117);
            	    try { dbg.enterDecision(117, decisionCanBacktrack[117]);

            	    try {
            	        isCyclicDecision = true;
            	        alt117 = dfa117.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(117);}

            	    switch (alt117) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:25: ( ( ws )? SEMI )=> ( ws )? SEMI
            	            {
            	            dbg.location(619,37);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:37: ( ws )?
            	            int alt116=2;
            	            try { dbg.enterSubRule(116);
            	            try { dbg.enterDecision(116, decisionCanBacktrack[116]);

            	            int LA116_0 = input.LA(1);

            	            if ( ((LA116_0>=WS && LA116_0<=COMMENT)) ) {
            	                alt116=1;
            	            }
            	            } finally {dbg.exitDecision(116);}

            	            switch (alt116) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:37: ws
            	                    {
            	                    dbg.location(619,37);
            	                    pushFollow(FOLLOW_ws_in_declarations2570);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(116);}

            	            dbg.location(619,41);
            	            match(input,SEMI,FOLLOW_SEMI_in_declarations2573); if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(117);}

            	    dbg.location(619,48);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:48: ( ws )?
            	    int alt118=2;
            	    try { dbg.enterSubRule(118);
            	    try { dbg.enterDecision(118, decisionCanBacktrack[118]);

            	    int LA118_0 = input.LA(1);

            	    if ( ((LA118_0>=WS && LA118_0<=COMMENT)) ) {
            	        alt118=1;
            	    }
            	    } finally {dbg.exitDecision(118);}

            	    switch (alt118) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:48: ws
            	            {
            	            dbg.location(619,48);
            	            pushFollow(FOLLOW_ws_in_declarations2577);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(118);}


            	    }


            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:10: ( SEMI ( ws )? )
            	    {
            	    dbg.location(621,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:10: ( SEMI ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:12: SEMI ( ws )?
            	    {
            	    dbg.location(621,12);
            	    match(input,SEMI,FOLLOW_SEMI_in_declarations2604); if (state.failed) return ;
            	    dbg.location(621,17);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:17: ( ws )?
            	    int alt119=2;
            	    try { dbg.enterSubRule(119);
            	    try { dbg.enterDecision(119, decisionCanBacktrack[119]);

            	    int LA119_0 = input.LA(1);

            	    if ( ((LA119_0>=WS && LA119_0<=COMMENT)) ) {
            	        alt119=1;
            	    }
            	    } finally {dbg.exitDecision(119);}

            	    switch (alt119) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:17: ws
            	            {
            	            dbg.location(621,17);
            	            pushFollow(FOLLOW_ws_in_declarations2606);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(119);}


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt120 >= 1 ) break loop120;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(120, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt120++;
            } while (true);
            } finally {dbg.exitSubRule(120);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(623, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "declarations");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "declarations"


    // $ANTLR start "declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:625:1: declaration : ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_nested_properties )=> sass_nested_properties | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call | ( selectorsGroup ( ws )? LBRACE )=> rule | {...}? at_rule | {...}? sass_control | {...}? sass_extend | {...}? sass_debug | {...}? sass_content | {...}? sass_function_return | {...}? importItem | GEN );
    public final void declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(625, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:626:5: ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_nested_properties )=> sass_nested_properties | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call | ( selectorsGroup ( ws )? LBRACE )=> rule | {...}? at_rule | {...}? sass_control | {...}? sass_extend | {...}? sass_debug | {...}? sass_content | {...}? sass_function_return | {...}? importItem | GEN )
            int alt121=15;
            try { dbg.enterDecision(121, decisionCanBacktrack[121]);

            try {
                isCyclicDecision = true;
                alt121 = dfa121.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(121);}

            switch (alt121) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:5: ( cp_variable_declaration )=> cp_variable_declaration
                    {
                    dbg.location(627,32);
                    pushFollow(FOLLOW_cp_variable_declaration_in_declaration2641);
                    cp_variable_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:628:7: ( sass_nested_properties )=> sass_nested_properties
                    {
                    dbg.location(628,33);
                    pushFollow(FOLLOW_sass_nested_properties_in_declaration2654);
                    sass_nested_properties();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:7: ( propertyDeclaration )=> propertyDeclaration
                    {
                    dbg.location(629,30);
                    pushFollow(FOLLOW_propertyDeclaration_in_declaration2667);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:631:7: ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration
                    {
                    dbg.location(631,67);
                    pushFollow(FOLLOW_propertyDeclaration_in_declaration2707);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:7: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )=> cp_mixin_declaration
                    {
                    dbg.location(632,94);
                    pushFollow(FOLLOW_cp_mixin_declaration_in_declaration2753);
                    cp_mixin_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:633:7: ( cp_mixin_call )=> cp_mixin_call
                    {
                    dbg.location(633,24);
                    pushFollow(FOLLOW_cp_mixin_call_in_declaration2766);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:634:7: ( selectorsGroup ( ws )? LBRACE )=> rule
                    {
                    dbg.location(634,36);
                    pushFollow(FOLLOW_rule_in_declaration2784);
                    rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:7: {...}? at_rule
                    {
                    dbg.location(635,7);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isCssPreprocessorSource()");
                    }
                    dbg.location(635,36);
                    pushFollow(FOLLOW_at_rule_in_declaration2795);
                    at_rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:7: {...}? sass_control
                    {
                    dbg.location(636,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(636,25);
                    pushFollow(FOLLOW_sass_control_in_declaration2806);
                    sass_control();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:637:7: {...}? sass_extend
                    {
                    dbg.location(637,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(637,25);
                    pushFollow(FOLLOW_sass_extend_in_declaration2817);
                    sass_extend();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:638:7: {...}? sass_debug
                    {
                    dbg.location(638,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(638,25);
                    pushFollow(FOLLOW_sass_debug_in_declaration2828);
                    sass_debug();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:7: {...}? sass_content
                    {
                    dbg.location(639,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(639,25);
                    pushFollow(FOLLOW_sass_content_in_declaration2839);
                    sass_content();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:640:7: {...}? sass_function_return
                    {
                    dbg.location(640,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(640,25);
                    pushFollow(FOLLOW_sass_function_return_in_declaration2850);
                    sass_function_return();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:641:7: {...}? importItem
                    {
                    dbg.location(641,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(641,25);
                    pushFollow(FOLLOW_importItem_in_declaration2861);
                    importItem();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:642:7: GEN
                    {
                    dbg.location(642,7);
                    match(input,GEN,FOLLOW_GEN_in_declaration2870); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(SEMI));
                
        }
        finally {
        }
        dbg.location(643, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "declaration"


    // $ANTLR start "selectorsGroup"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:649:1: selectorsGroup : ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression | selector ( ( ws )? COMMA ( ws )? selector )* );
    public final void selectorsGroup() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "selectorsGroup");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(649, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:650:5: ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression | selector ( ( ws )? COMMA ( ws )? selector )* )
            int alt125=2;
            try { dbg.enterDecision(125, decisionCanBacktrack[125]);

            try {
                isCyclicDecision = true;
                alt125 = dfa125.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(125);}

            switch (alt125) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:652:9: ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression
                    {
                    dbg.location(652,60);
                    pushFollow(FOLLOW_sass_selector_interpolation_expression_in_selectorsGroup2938);
                    sass_selector_interpolation_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:9: selector ( ( ws )? COMMA ( ws )? selector )*
                    {
                    dbg.location(654,9);
                    pushFollow(FOLLOW_selector_in_selectorsGroup2951);
                    selector();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(654,18);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:18: ( ( ws )? COMMA ( ws )? selector )*
                    try { dbg.enterSubRule(124);

                    loop124:
                    do {
                        int alt124=2;
                        try { dbg.enterDecision(124, decisionCanBacktrack[124]);

                        try {
                            isCyclicDecision = true;
                            alt124 = dfa124.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(124);}

                        switch (alt124) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:19: ( ws )? COMMA ( ws )? selector
                    	    {
                    	    dbg.location(654,19);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:19: ( ws )?
                    	    int alt122=2;
                    	    try { dbg.enterSubRule(122);
                    	    try { dbg.enterDecision(122, decisionCanBacktrack[122]);

                    	    int LA122_0 = input.LA(1);

                    	    if ( ((LA122_0>=WS && LA122_0<=COMMENT)) ) {
                    	        alt122=1;
                    	    }
                    	    } finally {dbg.exitDecision(122);}

                    	    switch (alt122) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:19: ws
                    	            {
                    	            dbg.location(654,19);
                    	            pushFollow(FOLLOW_ws_in_selectorsGroup2954);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(122);}

                    	    dbg.location(654,23);
                    	    match(input,COMMA,FOLLOW_COMMA_in_selectorsGroup2957); if (state.failed) return ;
                    	    dbg.location(654,29);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:29: ( ws )?
                    	    int alt123=2;
                    	    try { dbg.enterSubRule(123);
                    	    try { dbg.enterDecision(123, decisionCanBacktrack[123]);

                    	    int LA123_0 = input.LA(1);

                    	    if ( ((LA123_0>=WS && LA123_0<=COMMENT)) ) {
                    	        alt123=1;
                    	    }
                    	    } finally {dbg.exitDecision(123);}

                    	    switch (alt123) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:29: ws
                    	            {
                    	            dbg.location(654,29);
                    	            pushFollow(FOLLOW_ws_in_selectorsGroup2959);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(123);}

                    	    dbg.location(654,33);
                    	    pushFollow(FOLLOW_selector_in_selectorsGroup2962);
                    	    selector();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop124;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(124);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(655, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "selectorsGroup");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "selectorsGroup"


    // $ANTLR start "selector"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:657:1: selector : ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )* ;
    public final void selector() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "selector");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(657, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:5: ( ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:8: ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )*
            {
            dbg.location(658,8);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:8: ( combinator ( ws )? )?
            int alt127=2;
            try { dbg.enterSubRule(127);
            try { dbg.enterDecision(127, decisionCanBacktrack[127]);

            int LA127_0 = input.LA(1);

            if ( ((LA127_0>=PLUS && LA127_0<=TILDE)) ) {
                alt127=1;
            }
            } finally {dbg.exitDecision(127);}

            switch (alt127) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:9: combinator ( ws )?
                    {
                    dbg.location(658,9);
                    pushFollow(FOLLOW_combinator_in_selector2991);
                    combinator();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(658,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:20: ( ws )?
                    int alt126=2;
                    try { dbg.enterSubRule(126);
                    try { dbg.enterDecision(126, decisionCanBacktrack[126]);

                    int LA126_0 = input.LA(1);

                    if ( ((LA126_0>=WS && LA126_0<=COMMENT)) ) {
                        alt126=1;
                    }
                    } finally {dbg.exitDecision(126);}

                    switch (alt126) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:20: ws
                            {
                            dbg.location(658,20);
                            pushFollow(FOLLOW_ws_in_selector2993);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(126);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(127);}

            dbg.location(658,26);
            pushFollow(FOLLOW_simpleSelectorSequence_in_selector2998);
            simpleSelectorSequence();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(658,49);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:49: ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )*
            try { dbg.enterSubRule(132);

            loop132:
            do {
                int alt132=2;
                try { dbg.enterDecision(132, decisionCanBacktrack[132]);

                try {
                    isCyclicDecision = true;
                    alt132 = dfa132.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(132);}

                switch (alt132) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:51: ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence
            	    {
            	    dbg.location(658,51);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:51: ( ( ( ws )? combinator ( ws )? ) | ( ws )? )
            	    int alt131=2;
            	    try { dbg.enterSubRule(131);
            	    try { dbg.enterDecision(131, decisionCanBacktrack[131]);

            	    try {
            	        isCyclicDecision = true;
            	        alt131 = dfa131.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(131);}

            	    switch (alt131) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:52: ( ( ws )? combinator ( ws )? )
            	            {
            	            dbg.location(658,52);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:52: ( ( ws )? combinator ( ws )? )
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:53: ( ws )? combinator ( ws )?
            	            {
            	            dbg.location(658,53);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:53: ( ws )?
            	            int alt128=2;
            	            try { dbg.enterSubRule(128);
            	            try { dbg.enterDecision(128, decisionCanBacktrack[128]);

            	            int LA128_0 = input.LA(1);

            	            if ( ((LA128_0>=WS && LA128_0<=COMMENT)) ) {
            	                alt128=1;
            	            }
            	            } finally {dbg.exitDecision(128);}

            	            switch (alt128) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:53: ws
            	                    {
            	                    dbg.location(658,53);
            	                    pushFollow(FOLLOW_ws_in_selector3004);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(128);}

            	            dbg.location(658,57);
            	            pushFollow(FOLLOW_combinator_in_selector3007);
            	            combinator();

            	            state._fsp--;
            	            if (state.failed) return ;
            	            dbg.location(658,68);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:68: ( ws )?
            	            int alt129=2;
            	            try { dbg.enterSubRule(129);
            	            try { dbg.enterDecision(129, decisionCanBacktrack[129]);

            	            int LA129_0 = input.LA(1);

            	            if ( ((LA129_0>=WS && LA129_0<=COMMENT)) ) {
            	                alt129=1;
            	            }
            	            } finally {dbg.exitDecision(129);}

            	            switch (alt129) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:68: ws
            	                    {
            	                    dbg.location(658,68);
            	                    pushFollow(FOLLOW_ws_in_selector3009);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(129);}


            	            }


            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:73: ( ws )?
            	            {
            	            dbg.location(658,73);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:73: ( ws )?
            	            int alt130=2;
            	            try { dbg.enterSubRule(130);
            	            try { dbg.enterDecision(130, decisionCanBacktrack[130]);

            	            int LA130_0 = input.LA(1);

            	            if ( ((LA130_0>=WS && LA130_0<=COMMENT)) ) {
            	                alt130=1;
            	            }
            	            } finally {dbg.exitDecision(130);}

            	            switch (alt130) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:73: ws
            	                    {
            	                    dbg.location(658,73);
            	                    pushFollow(FOLLOW_ws_in_selector3013);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(130);}


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(131);}

            	    dbg.location(658,78);
            	    pushFollow(FOLLOW_simpleSelectorSequence_in_selector3017);
            	    simpleSelectorSequence();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);
            } finally {dbg.exitSubRule(132);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(659, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "selector");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "selector"


    // $ANTLR start "combinator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:661:1: combinator : ( PLUS | GREATER | TILDE );
    public final void combinator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "combinator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(661, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:662:5: ( PLUS | GREATER | TILDE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(662,5);
            if ( (input.LA(1)>=PLUS && input.LA(1)<=TILDE) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(664, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "combinator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "combinator"


    // $ANTLR start "simpleSelectorSequence"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:666:1: simpleSelectorSequence : ( ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* ) | elementSubsequent ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* );
    public final void simpleSelectorSequence() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "simpleSelectorSequence");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(666, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:2: ( ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* ) | elementSubsequent ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* )
            int alt137=2;
            try { dbg.enterDecision(137, decisionCanBacktrack[137]);

            int LA137_0 = input.LA(1);

            if ( (LA137_0==IDENT||LA137_0==GEN||(LA137_0>=STAR && LA137_0<=PIPE)||LA137_0==LESS_AND) ) {
                alt137=1;
            }
            else if ( (LA137_0==COLON||(LA137_0>=HASH_SYMBOL && LA137_0<=SASS_EXTEND_ONLY_SELECTOR)||LA137_0==AT_SIGN) ) {
                alt137=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(137);}

            switch (alt137) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:2: ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* )
                    {
                    dbg.location(668,2);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:2: ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:4: typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    {
                    dbg.location(668,4);
                    pushFollow(FOLLOW_typeSelector_in_simpleSelectorSequence3070);
                    typeSelector();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(668,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:17: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    try { dbg.enterSubRule(134);

                    loop134:
                    do {
                        int alt134=2;
                        try { dbg.enterDecision(134, decisionCanBacktrack[134]);

                        try {
                            isCyclicDecision = true;
                            alt134 = dfa134.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(134);}

                        switch (alt134) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:18: ( ( ws )? esPred )=> ( ws )? elementSubsequent
                    	    {
                    	    dbg.location(668,32);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:32: ( ws )?
                    	    int alt133=2;
                    	    try { dbg.enterSubRule(133);
                    	    try { dbg.enterDecision(133, decisionCanBacktrack[133]);

                    	    int LA133_0 = input.LA(1);

                    	    if ( ((LA133_0>=WS && LA133_0<=COMMENT)) ) {
                    	        alt133=1;
                    	    }
                    	    } finally {dbg.exitDecision(133);}

                    	    switch (alt133) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:32: ws
                    	            {
                    	            dbg.location(668,32);
                    	            pushFollow(FOLLOW_ws_in_simpleSelectorSequence3080);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(133);}

                    	    dbg.location(668,36);
                    	    pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence3083);
                    	    elementSubsequent();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop134;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(134);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:2: elementSubsequent ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    {
                    dbg.location(670,2);
                    pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence3094);
                    elementSubsequent();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(670,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:20: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    try { dbg.enterSubRule(136);

                    loop136:
                    do {
                        int alt136=2;
                        try { dbg.enterDecision(136, decisionCanBacktrack[136]);

                        try {
                            isCyclicDecision = true;
                            alt136 = dfa136.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(136);}

                        switch (alt136) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:21: ( ( ws )? esPred )=> ( ws )? elementSubsequent
                    	    {
                    	    dbg.location(670,35);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:35: ( ws )?
                    	    int alt135=2;
                    	    try { dbg.enterSubRule(135);
                    	    try { dbg.enterDecision(135, decisionCanBacktrack[135]);

                    	    int LA135_0 = input.LA(1);

                    	    if ( ((LA135_0>=WS && LA135_0<=COMMENT)) ) {
                    	        alt135=1;
                    	    }
                    	    } finally {dbg.exitDecision(135);}

                    	    switch (alt135) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:35: ws
                    	            {
                    	            dbg.location(670,35);
                    	            pushFollow(FOLLOW_ws_in_simpleSelectorSequence3104);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(135);}

                    	    dbg.location(670,39);
                    	    pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence3107);
                    	    elementSubsequent();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop136;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(136);}


                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                        reportError(rce);
                        consumeUntil(input, BitSet.of(LBRACE)); 
                    
        }
        finally {
        }
        dbg.location(671, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "simpleSelectorSequence");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "simpleSelectorSequence"


    // $ANTLR start "esPred"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:678:1: esPred : ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR );
    public final void esPred() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "esPred");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(678, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:679:5: ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(679,5);
            if ( input.LA(1)==COLON||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=SASS_EXTEND_ONLY_SELECTOR) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(680, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "esPred");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "esPred"


    // $ANTLR start "typeSelector"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:682:1: typeSelector options {k=2; } : ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName ;
    public final void typeSelector() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "typeSelector");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(682, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:684:3: ( ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:684:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName
            {
            dbg.location(684,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:684:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )?
            int alt138=2;
            try { dbg.enterSubRule(138);
            try { dbg.enterDecision(138, decisionCanBacktrack[138]);

            int LA138_0 = input.LA(1);

            if ( (LA138_0==IDENT) ) {
                int LA138_1 = input.LA(2);

                if ( (synpred25_Css3()) ) {
                    alt138=1;
                }
            }
            else if ( (LA138_0==STAR) ) {
                int LA138_2 = input.LA(2);

                if ( (synpred25_Css3()) ) {
                    alt138=1;
                }
            }
            else if ( (LA138_0==PIPE) && (synpred25_Css3())) {
                alt138=1;
            }
            } finally {dbg.exitDecision(138);}

            switch (alt138) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:684:7: ( ( IDENT | STAR )? PIPE )=> namespacePrefix
                    {
                    dbg.location(684,31);
                    pushFollow(FOLLOW_namespacePrefix_in_typeSelector3220);
                    namespacePrefix();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(138);}

            dbg.location(684,49);
            pushFollow(FOLLOW_elementName_in_typeSelector3224);
            elementName();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(685, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "typeSelector");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "typeSelector"


    // $ANTLR start "namespacePrefix"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:687:1: namespacePrefix : ( namespacePrefixName | STAR )? PIPE ;
    public final void namespacePrefix() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespacePrefix");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(687, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:688:3: ( ( namespacePrefixName | STAR )? PIPE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:688:5: ( namespacePrefixName | STAR )? PIPE
            {
            dbg.location(688,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:688:5: ( namespacePrefixName | STAR )?
            int alt139=3;
            try { dbg.enterSubRule(139);
            try { dbg.enterDecision(139, decisionCanBacktrack[139]);

            int LA139_0 = input.LA(1);

            if ( (LA139_0==IDENT) ) {
                alt139=1;
            }
            else if ( (LA139_0==STAR) ) {
                alt139=2;
            }
            } finally {dbg.exitDecision(139);}

            switch (alt139) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:688:7: namespacePrefixName
                    {
                    dbg.location(688,7);
                    pushFollow(FOLLOW_namespacePrefixName_in_namespacePrefix3239);
                    namespacePrefixName();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:688:29: STAR
                    {
                    dbg.location(688,29);
                    match(input,STAR,FOLLOW_STAR_in_namespacePrefix3243); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(139);}

            dbg.location(688,36);
            match(input,PIPE,FOLLOW_PIPE_in_namespacePrefix3247); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(689, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespacePrefix");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespacePrefix"


    // $ANTLR start "elementSubsequent"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:692:1: elementSubsequent : ({...}? sass_extend_only_selector | {...}? less_selector_interpolation | cssId | cssClass | slAttribute | pseudo ) ;
    public final void elementSubsequent() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "elementSubsequent");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(692, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:693:5: ( ({...}? sass_extend_only_selector | {...}? less_selector_interpolation | cssId | cssClass | slAttribute | pseudo ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:694:5: ({...}? sass_extend_only_selector | {...}? less_selector_interpolation | cssId | cssClass | slAttribute | pseudo )
            {
            dbg.location(694,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:694:5: ({...}? sass_extend_only_selector | {...}? less_selector_interpolation | cssId | cssClass | slAttribute | pseudo )
            int alt140=6;
            try { dbg.enterSubRule(140);
            try { dbg.enterDecision(140, decisionCanBacktrack[140]);

            switch ( input.LA(1) ) {
            case SASS_EXTEND_ONLY_SELECTOR:
                {
                alt140=1;
                }
                break;
            case AT_SIGN:
                {
                alt140=2;
                }
                break;
            case HASH_SYMBOL:
            case HASH:
                {
                alt140=3;
                }
                break;
            case DOT:
                {
                alt140=4;
                }
                break;
            case LBRACKET:
                {
                alt140=5;
                }
                break;
            case COLON:
            case DCOLON:
                {
                alt140=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(140);}

            switch (alt140) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:695:9: {...}? sass_extend_only_selector
                    {
                    dbg.location(695,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "elementSubsequent", "isScssSource()");
                    }
                    dbg.location(695,27);
                    pushFollow(FOLLOW_sass_extend_only_selector_in_elementSubsequent3286);
                    sass_extend_only_selector();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:11: {...}? less_selector_interpolation
                    {
                    dbg.location(696,11);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "elementSubsequent", "isLessSource()");
                    }
                    dbg.location(696,29);
                    pushFollow(FOLLOW_less_selector_interpolation_in_elementSubsequent3300);
                    less_selector_interpolation();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:697:8: cssId
                    {
                    dbg.location(697,8);
                    pushFollow(FOLLOW_cssId_in_elementSubsequent3310);
                    cssId();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:698:8: cssClass
                    {
                    dbg.location(698,8);
                    pushFollow(FOLLOW_cssClass_in_elementSubsequent3319);
                    cssClass();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:699:11: slAttribute
                    {
                    dbg.location(699,11);
                    pushFollow(FOLLOW_slAttribute_in_elementSubsequent3331);
                    slAttribute();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:700:11: pseudo
                    {
                    dbg.location(700,11);
                    pushFollow(FOLLOW_pseudo_in_elementSubsequent3343);
                    pseudo();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(140);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(702, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "elementSubsequent");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "elementSubsequent"


    // $ANTLR start "cssId"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:705:1: cssId : ( HASH | ( HASH_SYMBOL ( NAME | {...}? less_selector_interpolation ) ) );
    public final void cssId() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cssId");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(705, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:5: ( HASH | ( HASH_SYMBOL ( NAME | {...}? less_selector_interpolation ) ) )
            int alt142=2;
            try { dbg.enterDecision(142, decisionCanBacktrack[142]);

            int LA142_0 = input.LA(1);

            if ( (LA142_0==HASH) ) {
                alt142=1;
            }
            else if ( (LA142_0==HASH_SYMBOL) ) {
                alt142=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(142);}

            switch (alt142) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:7: HASH
                    {
                    dbg.location(706,7);
                    match(input,HASH,FOLLOW_HASH_in_cssId3371); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:9: ( HASH_SYMBOL ( NAME | {...}? less_selector_interpolation ) )
                    {
                    dbg.location(708,9);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:9: ( HASH_SYMBOL ( NAME | {...}? less_selector_interpolation ) )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:11: HASH_SYMBOL ( NAME | {...}? less_selector_interpolation )
                    {
                    dbg.location(708,11);
                    match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_cssId3393); if (state.failed) return ;
                    dbg.location(709,13);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:709:13: ( NAME | {...}? less_selector_interpolation )
                    int alt141=2;
                    try { dbg.enterSubRule(141);
                    try { dbg.enterDecision(141, decisionCanBacktrack[141]);

                    int LA141_0 = input.LA(1);

                    if ( (LA141_0==NAME) ) {
                        alt141=1;
                    }
                    else if ( (LA141_0==AT_SIGN) ) {
                        alt141=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 141, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(141);}

                    switch (alt141) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:709:15: NAME
                            {
                            dbg.location(709,15);
                            match(input,NAME,FOLLOW_NAME_in_cssId3410); if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:710:17: {...}? less_selector_interpolation
                            {
                            dbg.location(710,17);
                            if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                throw new FailedPredicateException(input, "cssId", "isLessSource()");
                            }
                            dbg.location(710,35);
                            pushFollow(FOLLOW_less_selector_interpolation_in_cssId3431);
                            less_selector_interpolation();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(141);}


                    }


                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(WS, IDENT, LBRACE)); 
                
        }
        finally {
        }
        dbg.location(713, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cssId");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cssId"


    // $ANTLR start "cssClass"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:719:1: cssClass : DOT ( IDENT | GEN | {...}? less_selector_interpolation ) ;
    public final void cssClass() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cssClass");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(719, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:720:5: ( DOT ( IDENT | GEN | {...}? less_selector_interpolation ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:720:7: DOT ( IDENT | GEN | {...}? less_selector_interpolation )
            {
            dbg.location(720,7);
            match(input,DOT,FOLLOW_DOT_in_cssClass3483); if (state.failed) return ;
            dbg.location(721,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:721:9: ( IDENT | GEN | {...}? less_selector_interpolation )
            int alt143=3;
            try { dbg.enterSubRule(143);
            try { dbg.enterDecision(143, decisionCanBacktrack[143]);

            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt143=1;
                }
                break;
            case GEN:
                {
                alt143=2;
                }
                break;
            case AT_SIGN:
                {
                alt143=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(143);}

            switch (alt143) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:722:13: IDENT
                    {
                    dbg.location(722,13);
                    match(input,IDENT,FOLLOW_IDENT_in_cssClass3509); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:723:15: GEN
                    {
                    dbg.location(723,15);
                    match(input,GEN,FOLLOW_GEN_in_cssClass3526); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:724:15: {...}? less_selector_interpolation
                    {
                    dbg.location(724,15);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cssClass", "isLessSource()");
                    }
                    dbg.location(724,33);
                    pushFollow(FOLLOW_less_selector_interpolation_in_cssClass3546);
                    less_selector_interpolation();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(143);}


            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(WS, IDENT, LBRACE)); 
                
        }
        finally {
        }
        dbg.location(726, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cssClass");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cssClass"


    // $ANTLR start "elementName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:733:1: elementName : ( IDENT | GEN | LESS_AND | STAR );
    public final void elementName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "elementName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(733, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:734:5: ( IDENT | GEN | LESS_AND | STAR )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(734,5);
            if ( input.LA(1)==IDENT||input.LA(1)==GEN||input.LA(1)==STAR||input.LA(1)==LESS_AND ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(735, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "elementName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "elementName"


    // $ANTLR start "slAttribute"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:737:1: slAttribute : LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET ;
    public final void slAttribute() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "slAttribute");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(737, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:738:5: ( LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:738:7: LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET
            {
            dbg.location(738,7);
            match(input,LBRACKET,FOLLOW_LBRACKET_in_slAttribute3617); if (state.failed) return ;
            dbg.location(739,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:6: ( namespacePrefix )?
            int alt144=2;
            try { dbg.enterSubRule(144);
            try { dbg.enterDecision(144, decisionCanBacktrack[144]);

            int LA144_0 = input.LA(1);

            if ( (LA144_0==IDENT) ) {
                int LA144_1 = input.LA(2);

                if ( (LA144_1==PIPE) ) {
                    alt144=1;
                }
            }
            else if ( ((LA144_0>=STAR && LA144_0<=PIPE)) ) {
                alt144=1;
            }
            } finally {dbg.exitDecision(144);}

            switch (alt144) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:6: namespacePrefix
                    {
                    dbg.location(739,6);
                    pushFollow(FOLLOW_namespacePrefix_in_slAttribute3624);
                    namespacePrefix();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(144);}

            dbg.location(739,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:23: ( ws )?
            int alt145=2;
            try { dbg.enterSubRule(145);
            try { dbg.enterDecision(145, decisionCanBacktrack[145]);

            int LA145_0 = input.LA(1);

            if ( ((LA145_0>=WS && LA145_0<=COMMENT)) ) {
                alt145=1;
            }
            } finally {dbg.exitDecision(145);}

            switch (alt145) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:23: ws
                    {
                    dbg.location(739,23);
                    pushFollow(FOLLOW_ws_in_slAttribute3627);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(145);}

            dbg.location(740,9);
            pushFollow(FOLLOW_slAttributeName_in_slAttribute3638);
            slAttributeName();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(740,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:740:25: ( ws )?
            int alt146=2;
            try { dbg.enterSubRule(146);
            try { dbg.enterDecision(146, decisionCanBacktrack[146]);

            int LA146_0 = input.LA(1);

            if ( ((LA146_0>=WS && LA146_0<=COMMENT)) ) {
                alt146=1;
            }
            } finally {dbg.exitDecision(146);}

            switch (alt146) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:740:25: ws
                    {
                    dbg.location(740,25);
                    pushFollow(FOLLOW_ws_in_slAttribute3640);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(146);}

            dbg.location(742,13);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:742:13: ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )?
            int alt149=2;
            try { dbg.enterSubRule(149);
            try { dbg.enterDecision(149, decisionCanBacktrack[149]);

            int LA149_0 = input.LA(1);

            if ( ((LA149_0>=OPEQ && LA149_0<=CONTAINS)) ) {
                alt149=1;
            }
            } finally {dbg.exitDecision(149);}

            switch (alt149) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:743:17: ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )?
                    {
                    dbg.location(743,17);
                    if ( (input.LA(1)>=OPEQ && input.LA(1)<=CONTAINS) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(751,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:751:17: ( ws )?
                    int alt147=2;
                    try { dbg.enterSubRule(147);
                    try { dbg.enterDecision(147, decisionCanBacktrack[147]);

                    int LA147_0 = input.LA(1);

                    if ( ((LA147_0>=WS && LA147_0<=COMMENT)) ) {
                        alt147=1;
                    }
                    } finally {dbg.exitDecision(147);}

                    switch (alt147) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:751:17: ws
                            {
                            dbg.location(751,17);
                            pushFollow(FOLLOW_ws_in_slAttribute3862);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(147);}

                    dbg.location(752,17);
                    pushFollow(FOLLOW_slAttributeValue_in_slAttribute3881);
                    slAttributeValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(753,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:753:17: ( ws )?
                    int alt148=2;
                    try { dbg.enterSubRule(148);
                    try { dbg.enterDecision(148, decisionCanBacktrack[148]);

                    int LA148_0 = input.LA(1);

                    if ( ((LA148_0>=WS && LA148_0<=COMMENT)) ) {
                        alt148=1;
                    }
                    } finally {dbg.exitDecision(148);}

                    switch (alt148) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:753:17: ws
                            {
                            dbg.location(753,17);
                            pushFollow(FOLLOW_ws_in_slAttribute3899);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(148);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(149);}

            dbg.location(756,7);
            match(input,RBRACKET,FOLLOW_RBRACKET_in_slAttribute3928); if (state.failed) return ;

            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(IDENT, LBRACE)); 
                
        }
        finally {
        }
        dbg.location(757, 1);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "slAttribute");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "slAttribute"


    // $ANTLR start "slAttributeName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:764:1: slAttributeName : IDENT ;
    public final void slAttributeName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "slAttributeName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(764, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:765:2: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:765:4: IDENT
            {
            dbg.location(765,4);
            match(input,IDENT,FOLLOW_IDENT_in_slAttributeName3944); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(766, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "slAttributeName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "slAttributeName"


    // $ANTLR start "slAttributeValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:768:1: slAttributeValue : ( IDENT | STRING ) ;
    public final void slAttributeValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "slAttributeValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(768, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:769:2: ( ( IDENT | STRING ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:770:2: ( IDENT | STRING )
            {
            dbg.location(770,2);
            if ( (input.LA(1)>=IDENT && input.LA(1)<=STRING) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(774, 9);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "slAttributeValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "slAttributeValue"


    // $ANTLR start "pseudo"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:776:1: pseudo : ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) ) ;
    public final void pseudo() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "pseudo");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(776, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:5: ( ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:7: ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) )
            {
            dbg.location(777,7);
            if ( input.LA(1)==COLON||input.LA(1)==DCOLON ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(778,14);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:14: ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) )
            int alt158=2;
            try { dbg.enterSubRule(158);
            try { dbg.enterDecision(158, decisionCanBacktrack[158]);

            int LA158_0 = input.LA(1);

            if ( (LA158_0==IDENT||LA158_0==GEN) ) {
                alt158=1;
            }
            else if ( (LA158_0==NOT) ) {
                alt158=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(158);}

            switch (alt158) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
                    {
                    dbg.location(779,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:780:21: ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
                    {
                    dbg.location(780,21);
                    if ( input.LA(1)==IDENT||input.LA(1)==GEN ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(781,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:781:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
                    int alt154=2;
                    try { dbg.enterSubRule(154);
                    try { dbg.enterDecision(154, decisionCanBacktrack[154]);

                    try {
                        isCyclicDecision = true;
                        alt154 = dfa154.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(154);}

                    switch (alt154) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:25: ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN
                            {
                            dbg.location(782,25);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:25: ( ws )?
                            int alt150=2;
                            try { dbg.enterSubRule(150);
                            try { dbg.enterDecision(150, decisionCanBacktrack[150]);

                            int LA150_0 = input.LA(1);

                            if ( ((LA150_0>=WS && LA150_0<=COMMENT)) ) {
                                alt150=1;
                            }
                            } finally {dbg.exitDecision(150);}

                            switch (alt150) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:25: ws
                                    {
                                    dbg.location(782,25);
                                    pushFollow(FOLLOW_ws_in_pseudo4139);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(150);}

                            dbg.location(782,29);
                            match(input,LPAREN,FOLLOW_LPAREN_in_pseudo4142); if (state.failed) return ;
                            dbg.location(782,36);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:36: ( ws )?
                            int alt151=2;
                            try { dbg.enterSubRule(151);
                            try { dbg.enterDecision(151, decisionCanBacktrack[151]);

                            int LA151_0 = input.LA(1);

                            if ( ((LA151_0>=WS && LA151_0<=COMMENT)) ) {
                                alt151=1;
                            }
                            } finally {dbg.exitDecision(151);}

                            switch (alt151) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:36: ws
                                    {
                                    dbg.location(782,36);
                                    pushFollow(FOLLOW_ws_in_pseudo4144);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(151);}

                            dbg.location(782,40);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:40: ( ( expression ( ws )? ) | STAR )?
                            int alt153=3;
                            try { dbg.enterSubRule(153);
                            try { dbg.enterDecision(153, decisionCanBacktrack[153]);

                            int LA153_0 = input.LA(1);

                            if ( (LA153_0==NAMESPACE_SYM||(LA153_0>=IDENT && LA153_0<=IMPORT_SYM)||LA153_0==MEDIA_SYM||LA153_0==GEN||(LA153_0>=AT_IDENT && LA153_0<=MOZ_DOCUMENT_SYM)||(LA153_0>=WEBKIT_KEYFRAMES_SYM && LA153_0<=RIGHTBOTTOM_SYM)||(LA153_0>=MINUS && LA153_0<=PLUS)||(LA153_0>=TILDE && LA153_0<=HASH)||LA153_0==SASS_VAR||(LA153_0>=NUMBER && LA153_0<=PERCENTAGE_SYMBOL)||(LA153_0>=SASS_CONTENT && LA153_0<=SASS_WHILE)) ) {
                                alt153=1;
                            }
                            else if ( (LA153_0==STAR) ) {
                                alt153=2;
                            }
                            } finally {dbg.exitDecision(153);}

                            switch (alt153) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:42: ( expression ( ws )? )
                                    {
                                    dbg.location(782,42);
                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:42: ( expression ( ws )? )
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:43: expression ( ws )?
                                    {
                                    dbg.location(782,43);
                                    pushFollow(FOLLOW_expression_in_pseudo4150);
                                    expression();

                                    state._fsp--;
                                    if (state.failed) return ;
                                    dbg.location(782,54);
                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:54: ( ws )?
                                    int alt152=2;
                                    try { dbg.enterSubRule(152);
                                    try { dbg.enterDecision(152, decisionCanBacktrack[152]);

                                    int LA152_0 = input.LA(1);

                                    if ( ((LA152_0>=WS && LA152_0<=COMMENT)) ) {
                                        alt152=1;
                                    }
                                    } finally {dbg.exitDecision(152);}

                                    switch (alt152) {
                                        case 1 :
                                            dbg.enterAlt(1);

                                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:54: ws
                                            {
                                            dbg.location(782,54);
                                            pushFollow(FOLLOW_ws_in_pseudo4152);
                                            ws();

                                            state._fsp--;
                                            if (state.failed) return ;

                                            }
                                            break;

                                    }
                                    } finally {dbg.exitSubRule(152);}


                                    }


                                    }
                                    break;
                                case 2 :
                                    dbg.enterAlt(2);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:61: STAR
                                    {
                                    dbg.location(782,61);
                                    match(input,STAR,FOLLOW_STAR_in_pseudo4158); if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(153);}

                            dbg.location(782,69);
                            match(input,RPAREN,FOLLOW_RPAREN_in_pseudo4163); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(154);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:786:17: ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN )
                    {
                    dbg.location(786,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:786:17: ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:786:19: NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN
                    {
                    dbg.location(786,19);
                    match(input,NOT,FOLLOW_NOT_in_pseudo4242); if (state.failed) return ;
                    dbg.location(786,23);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:786:23: ( ws )?
                    int alt155=2;
                    try { dbg.enterSubRule(155);
                    try { dbg.enterDecision(155, decisionCanBacktrack[155]);

                    int LA155_0 = input.LA(1);

                    if ( ((LA155_0>=WS && LA155_0<=COMMENT)) ) {
                        alt155=1;
                    }
                    } finally {dbg.exitDecision(155);}

                    switch (alt155) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:786:23: ws
                            {
                            dbg.location(786,23);
                            pushFollow(FOLLOW_ws_in_pseudo4244);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(155);}

                    dbg.location(786,27);
                    match(input,LPAREN,FOLLOW_LPAREN_in_pseudo4247); if (state.failed) return ;
                    dbg.location(786,34);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:786:34: ( ws )?
                    int alt156=2;
                    try { dbg.enterSubRule(156);
                    try { dbg.enterDecision(156, decisionCanBacktrack[156]);

                    int LA156_0 = input.LA(1);

                    if ( ((LA156_0>=WS && LA156_0<=COMMENT)) ) {
                        alt156=1;
                    }
                    } finally {dbg.exitDecision(156);}

                    switch (alt156) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:786:34: ws
                            {
                            dbg.location(786,34);
                            pushFollow(FOLLOW_ws_in_pseudo4249);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(156);}

                    dbg.location(786,38);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:786:38: ( simpleSelectorSequence )?
                    int alt157=2;
                    try { dbg.enterSubRule(157);
                    try { dbg.enterDecision(157, decisionCanBacktrack[157]);

                    int LA157_0 = input.LA(1);

                    if ( (LA157_0==IDENT||LA157_0==GEN||LA157_0==COLON||(LA157_0>=HASH_SYMBOL && LA157_0<=PIPE)||LA157_0==LESS_AND||LA157_0==AT_SIGN) ) {
                        alt157=1;
                    }
                    } finally {dbg.exitDecision(157);}

                    switch (alt157) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:786:38: simpleSelectorSequence
                            {
                            dbg.location(786,38);
                            pushFollow(FOLLOW_simpleSelectorSequence_in_pseudo4252);
                            simpleSelectorSequence();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(157);}

                    dbg.location(786,62);
                    match(input,RPAREN,FOLLOW_RPAREN_in_pseudo4255); if (state.failed) return ;

                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(158);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(788, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pseudo");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "pseudo"


    // $ANTLR start "propertyDeclaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:790:1: propertyDeclaration : ( ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? | {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue );
    public final void propertyDeclaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "propertyDeclaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(790, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:791:5: ( ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? | {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue )
            int alt167=2;
            try { dbg.enterDecision(167, decisionCanBacktrack[167]);

            try {
                isCyclicDecision = true;
                alt167 = dfa167.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(167);}

            switch (alt167) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:5: ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )?
                    {
                    dbg.location(792,5);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:5: ( STAR )?
                    int alt159=2;
                    try { dbg.enterSubRule(159);
                    try { dbg.enterDecision(159, decisionCanBacktrack[159]);

                    int LA159_0 = input.LA(1);

                    if ( (LA159_0==STAR) ) {
                        alt159=1;
                    }
                    } finally {dbg.exitDecision(159);}

                    switch (alt159) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:5: STAR
                            {
                            dbg.location(792,5);
                            match(input,STAR,FOLLOW_STAR_in_propertyDeclaration4294); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(159);}

                    dbg.location(792,11);
                    pushFollow(FOLLOW_property_in_propertyDeclaration4297);
                    property();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(792,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:20: ( ws )?
                    int alt160=2;
                    try { dbg.enterSubRule(160);
                    try { dbg.enterDecision(160, decisionCanBacktrack[160]);

                    int LA160_0 = input.LA(1);

                    if ( ((LA160_0>=WS && LA160_0<=COMMENT)) ) {
                        alt160=1;
                    }
                    } finally {dbg.exitDecision(160);}

                    switch (alt160) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:20: ws
                            {
                            dbg.location(792,20);
                            pushFollow(FOLLOW_ws_in_propertyDeclaration4299);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(160);}

                    dbg.location(792,24);
                    match(input,COLON,FOLLOW_COLON_in_propertyDeclaration4302); if (state.failed) return ;
                    dbg.location(792,30);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:30: ( ws )?
                    int alt161=2;
                    try { dbg.enterSubRule(161);
                    try { dbg.enterDecision(161, decisionCanBacktrack[161]);

                    int LA161_0 = input.LA(1);

                    if ( ((LA161_0>=WS && LA161_0<=COMMENT)) ) {
                        alt161=1;
                    }
                    } finally {dbg.exitDecision(161);}

                    switch (alt161) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:30: ws
                            {
                            dbg.location(792,30);
                            pushFollow(FOLLOW_ws_in_propertyDeclaration4304);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(161);}

                    dbg.location(792,34);
                    pushFollow(FOLLOW_propertyValue_in_propertyDeclaration4307);
                    propertyValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(792,48);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:48: ( ( ws )? prio )?
                    int alt163=2;
                    try { dbg.enterSubRule(163);
                    try { dbg.enterDecision(163, decisionCanBacktrack[163]);

                    try {
                        isCyclicDecision = true;
                        alt163 = dfa163.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(163);}

                    switch (alt163) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:49: ( ws )? prio
                            {
                            dbg.location(792,49);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:49: ( ws )?
                            int alt162=2;
                            try { dbg.enterSubRule(162);
                            try { dbg.enterDecision(162, decisionCanBacktrack[162]);

                            int LA162_0 = input.LA(1);

                            if ( ((LA162_0>=WS && LA162_0<=COMMENT)) ) {
                                alt162=1;
                            }
                            } finally {dbg.exitDecision(162);}

                            switch (alt162) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:49: ws
                                    {
                                    dbg.location(792,49);
                                    pushFollow(FOLLOW_ws_in_propertyDeclaration4310);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(162);}

                            dbg.location(792,53);
                            pushFollow(FOLLOW_prio_in_propertyDeclaration4313);
                            prio();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(163);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:793:7: {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue
                    {
                    dbg.location(793,7);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "propertyDeclaration", "isCssPreprocessorSource()");
                    }
                    dbg.location(793,36);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:793:36: ( STAR )?
                    int alt164=2;
                    try { dbg.enterSubRule(164);
                    try { dbg.enterDecision(164, decisionCanBacktrack[164]);

                    int LA164_0 = input.LA(1);

                    if ( (LA164_0==STAR) ) {
                        alt164=1;
                    }
                    } finally {dbg.exitDecision(164);}

                    switch (alt164) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:793:36: STAR
                            {
                            dbg.location(793,36);
                            match(input,STAR,FOLLOW_STAR_in_propertyDeclaration4325); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(164);}

                    dbg.location(793,42);
                    pushFollow(FOLLOW_property_in_propertyDeclaration4328);
                    property();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(793,51);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:793:51: ( ws )?
                    int alt165=2;
                    try { dbg.enterSubRule(165);
                    try { dbg.enterDecision(165, decisionCanBacktrack[165]);

                    int LA165_0 = input.LA(1);

                    if ( ((LA165_0>=WS && LA165_0<=COMMENT)) ) {
                        alt165=1;
                    }
                    } finally {dbg.exitDecision(165);}

                    switch (alt165) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:793:51: ws
                            {
                            dbg.location(793,51);
                            pushFollow(FOLLOW_ws_in_propertyDeclaration4330);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(165);}

                    dbg.location(793,55);
                    match(input,COLON,FOLLOW_COLON_in_propertyDeclaration4333); if (state.failed) return ;
                    dbg.location(793,61);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:793:61: ( ws )?
                    int alt166=2;
                    try { dbg.enterSubRule(166);
                    try { dbg.enterDecision(166, decisionCanBacktrack[166]);

                    int LA166_0 = input.LA(1);

                    if ( ((LA166_0>=WS && LA166_0<=COMMENT)) ) {
                        alt166=1;
                    }
                    } finally {dbg.exitDecision(166);}

                    switch (alt166) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:793:61: ws
                            {
                            dbg.location(793,61);
                            pushFollow(FOLLOW_ws_in_propertyDeclaration4335);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(166);}

                    dbg.location(793,65);
                    pushFollow(FOLLOW_cp_propertyValue_in_propertyDeclaration4338);
                    cp_propertyValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    //recovery: if an mismatched token occures inside a declaration is found,
                    //then skip all tokens until an end of the rule is found represented by right curly brace
                    consumeUntil(input, BitSet.of(SEMI, RBRACE)); 
                
        }
        finally {
        }
        dbg.location(794, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "propertyDeclaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "propertyDeclaration"


    // $ANTLR start "cp_propertyValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:803:1: cp_propertyValue : ({...}? cp_expression_list | propertyValue );
    public final void cp_propertyValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_propertyValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(803, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:804:5: ({...}? cp_expression_list | propertyValue )
            int alt168=2;
            try { dbg.enterDecision(168, decisionCanBacktrack[168]);

            try {
                isCyclicDecision = true;
                alt168 = dfa168.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(168);}

            switch (alt168) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:805:5: {...}? cp_expression_list
                    {
                    dbg.location(805,5);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_propertyValue", "isCssPreprocessorSource()");
                    }
                    dbg.location(805,34);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_propertyValue4373);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:806:7: propertyValue
                    {
                    dbg.location(806,7);
                    pushFollow(FOLLOW_propertyValue_in_cp_propertyValue4381);
                    propertyValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(807, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_propertyValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_propertyValue"


    // $ANTLR start "propertyValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:809:1: propertyValue : expression ;
    public final void propertyValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "propertyValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(809, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:810:2: ( expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:811:9: expression
            {
            dbg.location(811,9);
            pushFollow(FOLLOW_expression_in_propertyValue4403);
            expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(812, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "propertyValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "propertyValue"


    // $ANTLR start "expressionPredicate"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:815:1: expressionPredicate options {k=1; } : (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) ;
    public final void expressionPredicate() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "expressionPredicate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(815, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:5: ( (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:818:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE )
            {
            dbg.location(818,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:818:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+
            int cnt169=0;
            try { dbg.enterSubRule(169);

            loop169:
            do {
                int alt169=2;
                try { dbg.enterDecision(169, decisionCanBacktrack[169]);

                int LA169_0 = input.LA(1);

                if ( (LA169_0==NAMESPACE_SYM||(LA169_0>=IDENT && LA169_0<=MEDIA_SYM)||(LA169_0>=AND && LA169_0<=COLON)||(LA169_0>=MOZ_DOCUMENT_SYM && LA169_0<=RIGHTBOTTOM_SYM)||(LA169_0>=MINUS && LA169_0<=SASS_EXTEND_ONLY_SELECTOR)||(LA169_0>=PIPE && LA169_0<=RBRACKET)||(LA169_0>=IMPORTANT_SYM && LA169_0<=LINE_COMMENT)) ) {
                    alt169=1;
                }


                } finally {dbg.exitDecision(169);}

                switch (alt169) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:818:7: ~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR )
            	    {
            	    dbg.location(818,7);
            	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=COLON)||(input.LA(1)>=MOZ_DOCUMENT_SYM && input.LA(1)<=RIGHTBOTTOM_SYM)||(input.LA(1)>=MINUS && input.LA(1)<=SASS_EXTEND_ONLY_SELECTOR)||(input.LA(1)>=PIPE && input.LA(1)<=RBRACKET)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=LINE_COMMENT) ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt169 >= 1 ) break loop169;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(169, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt169++;
            } while (true);
            } finally {dbg.exitSubRule(169);}

            dbg.location(818,76);
            if ( input.LA(1)==SEMI||input.LA(1)==RBRACE ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(819, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "expressionPredicate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "expressionPredicate"


    // $ANTLR start "syncToDeclarationsRule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:823:1: syncToDeclarationsRule : ;
    public final void syncToDeclarationsRule() throws RecognitionException {

                //why sync to DOT? - LESS allows class rules nested
                syncToSet(BitSet.of(IDENT, RBRACE, STAR, DOT)); 
            
        try { dbg.enterRule(getGrammarFileName(), "syncToDeclarationsRule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(823, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:828:6: ()
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:829:6: 
            {
            }

        }
        finally {
        }
        dbg.location(829, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncToDeclarationsRule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncToDeclarationsRule"


    // $ANTLR start "syncTo_RBRACE"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:1: syncTo_RBRACE : ;
    public final void syncTo_RBRACE() throws RecognitionException {

                syncToRBRACE(1); //initial nest == 1
            
        try { dbg.enterRule(getGrammarFileName(), "syncTo_RBRACE");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(831, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:835:6: ()
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:836:6: 
            {
            }

        }
        finally {
        }
        dbg.location(836, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncTo_RBRACE");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncTo_RBRACE"


    // $ANTLR start "syncTo_SEMI"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:1: syncTo_SEMI : SEMI ;
    public final void syncTo_SEMI() throws RecognitionException {

                syncToSet(BitSet.of(SEMI)); 
            
        try { dbg.enterRule(getGrammarFileName(), "syncTo_SEMI");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(838, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:842:6: ( SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:843:13: SEMI
            {
            dbg.location(843,13);
            match(input,SEMI,FOLLOW_SEMI_in_syncTo_SEMI4590); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(844, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncTo_SEMI");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncTo_SEMI"


    // $ANTLR start "syncToFollow"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:847:1: syncToFollow : ;
    public final void syncToFollow() throws RecognitionException {

                syncToSet();
            
        try { dbg.enterRule(getGrammarFileName(), "syncToFollow");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(847, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:851:6: ()
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:852:6: 
            {
            }

        }
        finally {
        }
        dbg.location(852, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncToFollow");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncToFollow"


    // $ANTLR start "prio"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:854:1: prio : IMPORTANT_SYM ;
    public final void prio() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "prio");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(854, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:855:5: ( IMPORTANT_SYM )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:855:7: IMPORTANT_SYM
            {
            dbg.location(855,7);
            match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_prio4645); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(856, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prio");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "prio"


    // $ANTLR start "expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:858:1: expression : term ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )* ;
    public final void expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(858, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:5: ( term ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:7: term ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )*
            {
            dbg.location(859,7);
            pushFollow(FOLLOW_term_in_expression4666);
            term();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(859,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:12: ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )*
            try { dbg.enterSubRule(173);

            loop173:
            do {
                int alt173=2;
                try { dbg.enterDecision(173, decisionCanBacktrack[173]);

                try {
                    isCyclicDecision = true;
                    alt173 = dfa173.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(173);}

                switch (alt173) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:14: ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term
            	    {
            	    dbg.location(859,66);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:66: ( ws | ( ( ws )? operator ( ws )? ) | )
            	    int alt172=3;
            	    try { dbg.enterSubRule(172);
            	    try { dbg.enterDecision(172, decisionCanBacktrack[172]);

            	    try {
            	        isCyclicDecision = true;
            	        alt172 = dfa172.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(172);}

            	    switch (alt172) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:68: ws
            	            {
            	            dbg.location(859,68);
            	            pushFollow(FOLLOW_ws_in_expression4698);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:73: ( ( ws )? operator ( ws )? )
            	            {
            	            dbg.location(859,73);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:73: ( ( ws )? operator ( ws )? )
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:74: ( ws )? operator ( ws )?
            	            {
            	            dbg.location(859,74);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:74: ( ws )?
            	            int alt170=2;
            	            try { dbg.enterSubRule(170);
            	            try { dbg.enterDecision(170, decisionCanBacktrack[170]);

            	            int LA170_0 = input.LA(1);

            	            if ( ((LA170_0>=WS && LA170_0<=COMMENT)) ) {
            	                alt170=1;
            	            }
            	            } finally {dbg.exitDecision(170);}

            	            switch (alt170) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:74: ws
            	                    {
            	                    dbg.location(859,74);
            	                    pushFollow(FOLLOW_ws_in_expression4703);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(170);}

            	            dbg.location(859,78);
            	            pushFollow(FOLLOW_operator_in_expression4706);
            	            operator();

            	            state._fsp--;
            	            if (state.failed) return ;
            	            dbg.location(859,87);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:87: ( ws )?
            	            int alt171=2;
            	            try { dbg.enterSubRule(171);
            	            try { dbg.enterDecision(171, decisionCanBacktrack[171]);

            	            int LA171_0 = input.LA(1);

            	            if ( ((LA171_0>=WS && LA171_0<=COMMENT)) ) {
            	                alt171=1;
            	            }
            	            } finally {dbg.exitDecision(171);}

            	            switch (alt171) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:87: ws
            	                    {
            	                    dbg.location(859,87);
            	                    pushFollow(FOLLOW_ws_in_expression4708);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(171);}


            	            }


            	            }
            	            break;
            	        case 3 :
            	            dbg.enterAlt(3);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:107: 
            	            {
            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(172);}

            	    dbg.location(859,109);
            	    pushFollow(FOLLOW_term_in_expression4717);
            	    term();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop173;
                }
            } while (true);
            } finally {dbg.exitSubRule(173);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(860, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "expression"


    // $ANTLR start "term"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:862:1: term : ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | {...}? TILDE STRING | {...}? LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol ) ;
    public final void term() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "term");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(862, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:863:5: ( ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | {...}? TILDE STRING | {...}? LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:864:5: ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | {...}? TILDE STRING | {...}? LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol )
            {
            dbg.location(864,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:864:5: ( unaryOperator ( ws )? )?
            int alt175=2;
            try { dbg.enterSubRule(175);
            try { dbg.enterDecision(175, decisionCanBacktrack[175]);

            int LA175_0 = input.LA(1);

            if ( ((LA175_0>=MINUS && LA175_0<=PLUS)) ) {
                alt175=1;
            }
            } finally {dbg.exitDecision(175);}

            switch (alt175) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:864:7: unaryOperator ( ws )?
                    {
                    dbg.location(864,7);
                    pushFollow(FOLLOW_unaryOperator_in_term4747);
                    unaryOperator();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(864,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:864:21: ( ws )?
                    int alt174=2;
                    try { dbg.enterSubRule(174);
                    try { dbg.enterDecision(174, decisionCanBacktrack[174]);

                    int LA174_0 = input.LA(1);

                    if ( ((LA174_0>=WS && LA174_0<=COMMENT)) ) {
                        alt174=1;
                    }
                    } finally {dbg.exitDecision(174);}

                    switch (alt174) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:864:21: ws
                            {
                            dbg.location(864,21);
                            pushFollow(FOLLOW_ws_in_term4749);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(174);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(175);}

            dbg.location(865,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:5: ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | {...}? TILDE STRING | {...}? LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol )
            int alt176=22;
            try { dbg.enterSubRule(176);
            try { dbg.enterDecision(176, decisionCanBacktrack[176]);

            try {
                isCyclicDecision = true;
                alt176 = dfa176.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(176);}

            switch (alt176) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:866:9: ( functionName ( ws )? LPAREN )=> function
                    {
                    dbg.location(866,36);
                    pushFollow(FOLLOW_function_in_term4778);
                    function();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:867:11: IDENT
                    {
                    dbg.location(867,11);
                    match(input,IDENT,FOLLOW_IDENT_in_term4791); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:868:11: NUMBER
                    {
                    dbg.location(868,11);
                    match(input,NUMBER,FOLLOW_NUMBER_in_term4803); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:11: PERCENTAGE
                    {
                    dbg.location(869,11);
                    match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_term4815); if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:870:11: LENGTH
                    {
                    dbg.location(870,11);
                    match(input,LENGTH,FOLLOW_LENGTH_in_term4827); if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:871:11: EMS
                    {
                    dbg.location(871,11);
                    match(input,EMS,FOLLOW_EMS_in_term4839); if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:872:11: REM
                    {
                    dbg.location(872,11);
                    match(input,REM,FOLLOW_REM_in_term4851); if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:873:11: EXS
                    {
                    dbg.location(873,11);
                    match(input,EXS,FOLLOW_EXS_in_term4863); if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:874:11: ANGLE
                    {
                    dbg.location(874,11);
                    match(input,ANGLE,FOLLOW_ANGLE_in_term4875); if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:875:11: TIME
                    {
                    dbg.location(875,11);
                    match(input,TIME,FOLLOW_TIME_in_term4887); if (state.failed) return ;

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:876:11: FREQ
                    {
                    dbg.location(876,11);
                    match(input,FREQ,FOLLOW_FREQ_in_term4899); if (state.failed) return ;

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:877:11: RESOLUTION
                    {
                    dbg.location(877,11);
                    match(input,RESOLUTION,FOLLOW_RESOLUTION_in_term4911); if (state.failed) return ;

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:878:11: DIMENSION
                    {
                    dbg.location(878,11);
                    match(input,DIMENSION,FOLLOW_DIMENSION_in_term4923); if (state.failed) return ;

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:879:11: STRING
                    {
                    dbg.location(879,11);
                    match(input,STRING,FOLLOW_STRING_in_term4940); if (state.failed) return ;

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:880:11: {...}? TILDE STRING
                    {
                    dbg.location(880,11);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isLessSource()");
                    }
                    dbg.location(880,29);
                    match(input,TILDE,FOLLOW_TILDE_in_term4954); if (state.failed) return ;
                    dbg.location(880,35);
                    match(input,STRING,FOLLOW_STRING_in_term4956); if (state.failed) return ;

                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:881:11: {...}? LESS_JS_STRING
                    {
                    dbg.location(881,11);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isLessSource()");
                    }
                    dbg.location(881,29);
                    match(input,LESS_JS_STRING,FOLLOW_LESS_JS_STRING_in_term4971); if (state.failed) return ;

                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:882:11: GEN
                    {
                    dbg.location(882,11);
                    match(input,GEN,FOLLOW_GEN_in_term4983); if (state.failed) return ;

                    }
                    break;
                case 18 :
                    dbg.enterAlt(18);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:883:11: URI
                    {
                    dbg.location(883,11);
                    match(input,URI,FOLLOW_URI_in_term4995); if (state.failed) return ;

                    }
                    break;
                case 19 :
                    dbg.enterAlt(19);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:884:11: hexColor
                    {
                    dbg.location(884,11);
                    pushFollow(FOLLOW_hexColor_in_term5007);
                    hexColor();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 20 :
                    dbg.enterAlt(20);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:885:11: {...}? cp_variable
                    {
                    dbg.location(885,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
                    }
                    dbg.location(885,40);
                    pushFollow(FOLLOW_cp_variable_in_term5021);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 21 :
                    dbg.enterAlt(21);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:886:11: {...}? sass_interpolation_expression_var
                    {
                    dbg.location(886,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
                    }
                    dbg.location(886,40);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_term5035);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 22 :
                    dbg.enterAlt(22);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:887:11: {...}? cp_term_symbol
                    {
                    dbg.location(887,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
                    }
                    dbg.location(887,40);
                    pushFollow(FOLLOW_cp_term_symbol_in_term5049);
                    cp_term_symbol();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(176);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(889, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "term");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "term"


    // $ANTLR start "cp_term_symbol"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:894:1: cp_term_symbol : PERCENTAGE_SYMBOL ;
    public final void cp_term_symbol() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_term_symbol");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(894, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:895:5: ( PERCENTAGE_SYMBOL )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:895:7: PERCENTAGE_SYMBOL
            {
            dbg.location(895,7);
            match(input,PERCENTAGE_SYMBOL,FOLLOW_PERCENTAGE_SYMBOL_in_cp_term_symbol5076); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(896, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_term_symbol");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_term_symbol"


    // $ANTLR start "function"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:1: function : functionName ( ws )? LPAREN ( ws )? ( fnAttributes | ) RPAREN ;
    public final void function() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "function");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(898, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:899:2: ( functionName ( ws )? LPAREN ( ws )? ( fnAttributes | ) RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:899:5: functionName ( ws )? LPAREN ( ws )? ( fnAttributes | ) RPAREN
            {
            dbg.location(899,5);
            pushFollow(FOLLOW_functionName_in_function5092);
            functionName();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(899,18);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:899:18: ( ws )?
            int alt177=2;
            try { dbg.enterSubRule(177);
            try { dbg.enterDecision(177, decisionCanBacktrack[177]);

            int LA177_0 = input.LA(1);

            if ( ((LA177_0>=WS && LA177_0<=COMMENT)) ) {
                alt177=1;
            }
            } finally {dbg.exitDecision(177);}

            switch (alt177) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:899:18: ws
                    {
                    dbg.location(899,18);
                    pushFollow(FOLLOW_ws_in_function5094);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(177);}

            dbg.location(900,3);
            match(input,LPAREN,FOLLOW_LPAREN_in_function5099); if (state.failed) return ;
            dbg.location(900,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:900:10: ( ws )?
            int alt178=2;
            try { dbg.enterSubRule(178);
            try { dbg.enterDecision(178, decisionCanBacktrack[178]);

            int LA178_0 = input.LA(1);

            if ( ((LA178_0>=WS && LA178_0<=COMMENT)) ) {
                alt178=1;
            }
            } finally {dbg.exitDecision(178);}

            switch (alt178) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:900:10: ws
                    {
                    dbg.location(900,10);
                    pushFollow(FOLLOW_ws_in_function5101);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(178);}

            dbg.location(901,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:901:3: ( fnAttributes | )
            int alt179=2;
            try { dbg.enterSubRule(179);
            try { dbg.enterDecision(179, decisionCanBacktrack[179]);

            int LA179_0 = input.LA(1);

            if ( (LA179_0==NAMESPACE_SYM||(LA179_0>=IDENT && LA179_0<=IMPORT_SYM)||LA179_0==MEDIA_SYM||(LA179_0>=NOT && LA179_0<=LPAREN)||(LA179_0>=AT_IDENT && LA179_0<=MOZ_DOCUMENT_SYM)||(LA179_0>=WEBKIT_KEYFRAMES_SYM && LA179_0<=RIGHTBOTTOM_SYM)||(LA179_0>=MINUS && LA179_0<=PLUS)||(LA179_0>=TILDE && LA179_0<=HASH)||(LA179_0>=SASS_VAR && LA179_0<=PERCENTAGE_SYMBOL)||(LA179_0>=SASS_CONTENT && LA179_0<=SASS_WHILE)) ) {
                alt179=1;
            }
            else if ( (LA179_0==RPAREN) ) {
                alt179=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 179, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(179);}

            switch (alt179) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:902:21: fnAttributes
                    {
                    dbg.location(902,21);
                    pushFollow(FOLLOW_fnAttributes_in_function5128);
                    fnAttributes();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:904:3: 
                    {
                    }
                    break;

            }
            } finally {dbg.exitSubRule(179);}

            dbg.location(905,3);
            match(input,RPAREN,FOLLOW_RPAREN_in_function5159); if (state.failed) return ;

            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(RPAREN, SEMI, RBRACE)); 

        }
        finally {
        }
        dbg.location(906, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "function");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "function"


    // $ANTLR start "functionName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:912:1: functionName : ( IDENT COLON )? IDENT ( DOT IDENT )* ;
    public final void functionName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "functionName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(912, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:916:2: ( ( IDENT COLON )? IDENT ( DOT IDENT )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:917:9: ( IDENT COLON )? IDENT ( DOT IDENT )*
            {
            dbg.location(917,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:917:9: ( IDENT COLON )?
            int alt180=2;
            try { dbg.enterSubRule(180);
            try { dbg.enterDecision(180, decisionCanBacktrack[180]);

            int LA180_0 = input.LA(1);

            if ( (LA180_0==IDENT) ) {
                int LA180_1 = input.LA(2);

                if ( (LA180_1==COLON) ) {
                    alt180=1;
                }
            }
            } finally {dbg.exitDecision(180);}

            switch (alt180) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:917:10: IDENT COLON
                    {
                    dbg.location(917,10);
                    match(input,IDENT,FOLLOW_IDENT_in_functionName5216); if (state.failed) return ;
                    dbg.location(917,16);
                    match(input,COLON,FOLLOW_COLON_in_functionName5218); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(180);}

            dbg.location(917,24);
            match(input,IDENT,FOLLOW_IDENT_in_functionName5222); if (state.failed) return ;
            dbg.location(917,30);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:917:30: ( DOT IDENT )*
            try { dbg.enterSubRule(181);

            loop181:
            do {
                int alt181=2;
                try { dbg.enterDecision(181, decisionCanBacktrack[181]);

                int LA181_0 = input.LA(1);

                if ( (LA181_0==DOT) ) {
                    alt181=1;
                }


                } finally {dbg.exitDecision(181);}

                switch (alt181) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:917:31: DOT IDENT
            	    {
            	    dbg.location(917,31);
            	    match(input,DOT,FOLLOW_DOT_in_functionName5225); if (state.failed) return ;
            	    dbg.location(917,35);
            	    match(input,IDENT,FOLLOW_IDENT_in_functionName5227); if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop181;
                }
            } while (true);
            } finally {dbg.exitSubRule(181);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(918, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "functionName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "functionName"


    // $ANTLR start "fnAttributes"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:920:1: fnAttributes : fnAttribute ( ( ws )? COMMA ( ws )? fnAttribute )* ( ws )? ;
    public final void fnAttributes() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttributes");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(920, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:921:5: ( fnAttribute ( ( ws )? COMMA ( ws )? fnAttribute )* ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:922:5: fnAttribute ( ( ws )? COMMA ( ws )? fnAttribute )* ( ws )?
            {
            dbg.location(922,5);
            pushFollow(FOLLOW_fnAttribute_in_fnAttributes5251);
            fnAttribute();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(922,17);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:922:17: ( ( ws )? COMMA ( ws )? fnAttribute )*
            try { dbg.enterSubRule(184);

            loop184:
            do {
                int alt184=2;
                try { dbg.enterDecision(184, decisionCanBacktrack[184]);

                try {
                    isCyclicDecision = true;
                    alt184 = dfa184.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(184);}

                switch (alt184) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:922:18: ( ws )? COMMA ( ws )? fnAttribute
            	    {
            	    dbg.location(922,18);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:922:18: ( ws )?
            	    int alt182=2;
            	    try { dbg.enterSubRule(182);
            	    try { dbg.enterDecision(182, decisionCanBacktrack[182]);

            	    int LA182_0 = input.LA(1);

            	    if ( ((LA182_0>=WS && LA182_0<=COMMENT)) ) {
            	        alt182=1;
            	    }
            	    } finally {dbg.exitDecision(182);}

            	    switch (alt182) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:922:18: ws
            	            {
            	            dbg.location(922,18);
            	            pushFollow(FOLLOW_ws_in_fnAttributes5254);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(182);}

            	    dbg.location(922,22);
            	    match(input,COMMA,FOLLOW_COMMA_in_fnAttributes5257); if (state.failed) return ;
            	    dbg.location(922,28);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:922:28: ( ws )?
            	    int alt183=2;
            	    try { dbg.enterSubRule(183);
            	    try { dbg.enterDecision(183, decisionCanBacktrack[183]);

            	    int LA183_0 = input.LA(1);

            	    if ( ((LA183_0>=WS && LA183_0<=COMMENT)) ) {
            	        alt183=1;
            	    }
            	    } finally {dbg.exitDecision(183);}

            	    switch (alt183) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:922:28: ws
            	            {
            	            dbg.location(922,28);
            	            pushFollow(FOLLOW_ws_in_fnAttributes5259);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(183);}

            	    dbg.location(922,32);
            	    pushFollow(FOLLOW_fnAttribute_in_fnAttributes5262);
            	    fnAttribute();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop184;
                }
            } while (true);
            } finally {dbg.exitSubRule(184);}

            dbg.location(922,46);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:922:46: ( ws )?
            int alt185=2;
            try { dbg.enterSubRule(185);
            try { dbg.enterDecision(185, decisionCanBacktrack[185]);

            int LA185_0 = input.LA(1);

            if ( ((LA185_0>=WS && LA185_0<=COMMENT)) ) {
                alt185=1;
            }
            } finally {dbg.exitDecision(185);}

            switch (alt185) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:922:46: ws
                    {
                    dbg.location(922,46);
                    pushFollow(FOLLOW_ws_in_fnAttributes5266);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(185);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(923, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttributes");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttributes"


    // $ANTLR start "fnAttribute"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:925:1: fnAttribute : ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | {...}? cp_expression | expression );
    public final void fnAttribute() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttribute");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(925, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:926:2: ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | {...}? cp_expression | expression )
            int alt188=3;
            try { dbg.enterDecision(188, decisionCanBacktrack[188]);

            try {
                isCyclicDecision = true;
                alt188 = dfa188.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(188);}

            switch (alt188) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:927:9: ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue
                    {
                    dbg.location(927,46);
                    pushFollow(FOLLOW_fnAttributeName_in_fnAttribute5304);
                    fnAttributeName();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(927,62);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:927:62: ( ws )?
                    int alt186=2;
                    try { dbg.enterSubRule(186);
                    try { dbg.enterDecision(186, decisionCanBacktrack[186]);

                    int LA186_0 = input.LA(1);

                    if ( ((LA186_0>=WS && LA186_0<=COMMENT)) ) {
                        alt186=1;
                    }
                    } finally {dbg.exitDecision(186);}

                    switch (alt186) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:927:62: ws
                            {
                            dbg.location(927,62);
                            pushFollow(FOLLOW_ws_in_fnAttribute5306);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(186);}

                    dbg.location(927,66);
                    if ( input.LA(1)==COLON||input.LA(1)==OPEQ ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(927,79);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:927:79: ( ws )?
                    int alt187=2;
                    try { dbg.enterSubRule(187);
                    try { dbg.enterDecision(187, decisionCanBacktrack[187]);

                    int LA187_0 = input.LA(1);

                    if ( ((LA187_0>=WS && LA187_0<=COMMENT)) ) {
                        alt187=1;
                    }
                    } finally {dbg.exitDecision(187);}

                    switch (alt187) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:927:79: ws
                            {
                            dbg.location(927,79);
                            pushFollow(FOLLOW_ws_in_fnAttribute5315);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(187);}

                    dbg.location(927,83);
                    pushFollow(FOLLOW_fnAttributeValue_in_fnAttribute5318);
                    fnAttributeValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:11: {...}? cp_expression
                    {
                    dbg.location(928,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "fnAttribute", "isCssPreprocessorSource()");
                    }
                    dbg.location(928,40);
                    pushFollow(FOLLOW_cp_expression_in_fnAttribute5332);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:929:11: expression
                    {
                    dbg.location(929,11);
                    pushFollow(FOLLOW_expression_in_fnAttribute5344);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(930, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttribute");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttribute"


    // $ANTLR start "fnAttributeName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:932:1: fnAttributeName : ( IDENT ( DOT IDENT )* | {...}? cp_variable );
    public final void fnAttributeName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttributeName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(932, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:933:2: ( IDENT ( DOT IDENT )* | {...}? cp_variable )
            int alt190=2;
            try { dbg.enterDecision(190, decisionCanBacktrack[190]);

            int LA190_0 = input.LA(1);

            if ( (LA190_0==IDENT) ) {
                alt190=1;
            }
            else if ( (LA190_0==NAMESPACE_SYM||(LA190_0>=CHARSET_SYM && LA190_0<=IMPORT_SYM)||LA190_0==MEDIA_SYM||(LA190_0>=AT_IDENT && LA190_0<=MOZ_DOCUMENT_SYM)||LA190_0==WEBKIT_KEYFRAMES_SYM||(LA190_0>=PAGE_SYM && LA190_0<=RIGHTBOTTOM_SYM)||LA190_0==SASS_VAR||(LA190_0>=SASS_CONTENT && LA190_0<=SASS_WHILE)) ) {
                alt190=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 190, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(190);}

            switch (alt190) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:13: IDENT ( DOT IDENT )*
                    {
                    dbg.location(934,13);
                    match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName5372); if (state.failed) return ;
                    dbg.location(934,19);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:19: ( DOT IDENT )*
                    try { dbg.enterSubRule(189);

                    loop189:
                    do {
                        int alt189=2;
                        try { dbg.enterDecision(189, decisionCanBacktrack[189]);

                        int LA189_0 = input.LA(1);

                        if ( (LA189_0==DOT) ) {
                            alt189=1;
                        }


                        } finally {dbg.exitDecision(189);}

                        switch (alt189) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:20: DOT IDENT
                    	    {
                    	    dbg.location(934,20);
                    	    match(input,DOT,FOLLOW_DOT_in_fnAttributeName5375); if (state.failed) return ;
                    	    dbg.location(934,24);
                    	    match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName5377); if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop189;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(189);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:935:15: {...}? cp_variable
                    {
                    dbg.location(935,15);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "fnAttributeName", "isCssPreprocessorSource()");
                    }
                    dbg.location(935,44);
                    pushFollow(FOLLOW_cp_variable_in_fnAttributeName5397);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(936, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttributeName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttributeName"


    // $ANTLR start "fnAttributeValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:938:1: fnAttributeValue : ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )* | {...}? cp_math_expression );
    public final void fnAttributeValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttributeValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(938, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:939:2: ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )* | {...}? cp_math_expression )
            int alt195=2;
            try { dbg.enterDecision(195, decisionCanBacktrack[195]);

            try {
                isCyclicDecision = true;
                alt195 = dfa195.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(195);}

            switch (alt195) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:13: term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )*
                    {
                    dbg.location(940,13);
                    pushFollow(FOLLOW_term_in_fnAttributeValue5422);
                    term();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(940,18);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:18: ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )*
                    try { dbg.enterSubRule(194);

                    loop194:
                    do {
                        int alt194=2;
                        try { dbg.enterDecision(194, decisionCanBacktrack[194]);

                        try {
                            isCyclicDecision = true;
                            alt194 = dfa194.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(194);}

                        switch (alt194) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:20: ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term
                    	    {
                    	    dbg.location(940,71);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:71: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )
                    	    int alt193=3;
                    	    try { dbg.enterSubRule(193);
                    	    try { dbg.enterDecision(193, decisionCanBacktrack[193]);

                    	    try {
                    	        isCyclicDecision = true;
                    	        alt193 = dfa193.predict(input);
                    	    }
                    	    catch (NoViableAltException nvae) {
                    	        dbg.recognitionException(nvae);
                    	        throw nvae;
                    	    }
                    	    } finally {dbg.exitDecision(193);}

                    	    switch (alt193) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:73: ws
                    	            {
                    	            dbg.location(940,73);
                    	            pushFollow(FOLLOW_ws_in_fnAttributeValue5454);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;
                    	        case 2 :
                    	            dbg.enterAlt(2);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:78: ( ( ws )? SOLIDUS ( ws )? )
                    	            {
                    	            dbg.location(940,78);
                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:78: ( ( ws )? SOLIDUS ( ws )? )
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:79: ( ws )? SOLIDUS ( ws )?
                    	            {
                    	            dbg.location(940,79);
                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:79: ( ws )?
                    	            int alt191=2;
                    	            try { dbg.enterSubRule(191);
                    	            try { dbg.enterDecision(191, decisionCanBacktrack[191]);

                    	            int LA191_0 = input.LA(1);

                    	            if ( ((LA191_0>=WS && LA191_0<=COMMENT)) ) {
                    	                alt191=1;
                    	            }
                    	            } finally {dbg.exitDecision(191);}

                    	            switch (alt191) {
                    	                case 1 :
                    	                    dbg.enterAlt(1);

                    	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:79: ws
                    	                    {
                    	                    dbg.location(940,79);
                    	                    pushFollow(FOLLOW_ws_in_fnAttributeValue5459);
                    	                    ws();

                    	                    state._fsp--;
                    	                    if (state.failed) return ;

                    	                    }
                    	                    break;

                    	            }
                    	            } finally {dbg.exitSubRule(191);}

                    	            dbg.location(940,83);
                    	            match(input,SOLIDUS,FOLLOW_SOLIDUS_in_fnAttributeValue5462); if (state.failed) return ;
                    	            dbg.location(940,91);
                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:91: ( ws )?
                    	            int alt192=2;
                    	            try { dbg.enterSubRule(192);
                    	            try { dbg.enterDecision(192, decisionCanBacktrack[192]);

                    	            int LA192_0 = input.LA(1);

                    	            if ( ((LA192_0>=WS && LA192_0<=COMMENT)) ) {
                    	                alt192=1;
                    	            }
                    	            } finally {dbg.exitDecision(192);}

                    	            switch (alt192) {
                    	                case 1 :
                    	                    dbg.enterAlt(1);

                    	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:91: ws
                    	                    {
                    	                    dbg.location(940,91);
                    	                    pushFollow(FOLLOW_ws_in_fnAttributeValue5464);
                    	                    ws();

                    	                    state._fsp--;
                    	                    if (state.failed) return ;

                    	                    }
                    	                    break;

                    	            }
                    	            } finally {dbg.exitSubRule(192);}


                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            dbg.enterAlt(3);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:111: 
                    	            {
                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(193);}

                    	    dbg.location(940,113);
                    	    pushFollow(FOLLOW_term_in_fnAttributeValue5473);
                    	    term();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop194;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(194);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:941:15: {...}? cp_math_expression
                    {
                    dbg.location(941,15);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "fnAttributeValue", "isCssPreprocessorSource()");
                    }
                    dbg.location(941,44);
                    pushFollow(FOLLOW_cp_math_expression_in_fnAttributeValue5494);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(942, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttributeValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttributeValue"


    // $ANTLR start "hexColor"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:944:1: hexColor : HASH ;
    public final void hexColor() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "hexColor");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(944, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:945:5: ( HASH )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:945:7: HASH
            {
            dbg.location(945,7);
            match(input,HASH,FOLLOW_HASH_in_hexColor5512); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(946, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hexColor");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "hexColor"


    // $ANTLR start "ws"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:948:1: ws : ( WS | NL | COMMENT )+ ;
    public final void ws() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "ws");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(948, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:949:5: ( ( WS | NL | COMMENT )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:949:7: ( WS | NL | COMMENT )+
            {
            dbg.location(949,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:949:7: ( WS | NL | COMMENT )+
            int cnt196=0;
            try { dbg.enterSubRule(196);

            loop196:
            do {
                int alt196=2;
                try { dbg.enterDecision(196, decisionCanBacktrack[196]);

                int LA196_0 = input.LA(1);

                if ( ((LA196_0>=WS && LA196_0<=COMMENT)) ) {
                    alt196=1;
                }


                } finally {dbg.exitDecision(196);}

                switch (alt196) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            	    {
            	    dbg.location(949,7);
            	    if ( (input.LA(1)>=WS && input.LA(1)<=COMMENT) ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt196 >= 1 ) break loop196;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(196, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt196++;
            } while (true);
            } finally {dbg.exitSubRule(196);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(950, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ws");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "ws"


    // $ANTLR start "cp_variable_declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:955:1: cp_variable_declaration : ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list | {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ws )? SASS_DEFAULT )? );
    public final void cp_variable_declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_variable_declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(955, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:956:5: ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list | {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ws )? SASS_DEFAULT )? )
            int alt203=2;
            try { dbg.enterDecision(203, decisionCanBacktrack[203]);

            int LA203_0 = input.LA(1);

            if ( (LA203_0==NAMESPACE_SYM||(LA203_0>=CHARSET_SYM && LA203_0<=IMPORT_SYM)||LA203_0==MEDIA_SYM||(LA203_0>=AT_IDENT && LA203_0<=MOZ_DOCUMENT_SYM)||LA203_0==WEBKIT_KEYFRAMES_SYM||(LA203_0>=PAGE_SYM && LA203_0<=RIGHTBOTTOM_SYM)||(LA203_0>=SASS_CONTENT && LA203_0<=SASS_WHILE)) ) {
                int LA203_1 = input.LA(2);

                if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
                    alt203=1;
                }
                else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
                    alt203=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 203, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA203_0==SASS_VAR) ) {
                int LA203_2 = input.LA(2);

                if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
                    alt203=1;
                }
                else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
                    alt203=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 203, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 203, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(203);}

            switch (alt203) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:957:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list
                    {
                    dbg.location(957,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable_declaration", "isLessSource()");
                    }
                    dbg.location(957,27);
                    pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration5581);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(957,39);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:957:39: ( ws )?
                    int alt197=2;
                    try { dbg.enterSubRule(197);
                    try { dbg.enterDecision(197, decisionCanBacktrack[197]);

                    int LA197_0 = input.LA(1);

                    if ( ((LA197_0>=WS && LA197_0<=COMMENT)) ) {
                        alt197=1;
                    }
                    } finally {dbg.exitDecision(197);}

                    switch (alt197) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:957:39: ws
                            {
                            dbg.location(957,39);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5583);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(197);}

                    dbg.location(957,43);
                    match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration5586); if (state.failed) return ;
                    dbg.location(957,49);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:957:49: ( ws )?
                    int alt198=2;
                    try { dbg.enterSubRule(198);
                    try { dbg.enterDecision(198, decisionCanBacktrack[198]);

                    int LA198_0 = input.LA(1);

                    if ( ((LA198_0>=WS && LA198_0<=COMMENT)) ) {
                        alt198=1;
                    }
                    } finally {dbg.exitDecision(198);}

                    switch (alt198) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:957:49: ws
                            {
                            dbg.location(957,49);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5588);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(198);}

                    dbg.location(957,53);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration5591);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:959:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ws )? SASS_DEFAULT )?
                    {
                    dbg.location(959,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable_declaration", "isScssSource()");
                    }
                    dbg.location(959,27);
                    pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration5614);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(959,39);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:959:39: ( ws )?
                    int alt199=2;
                    try { dbg.enterSubRule(199);
                    try { dbg.enterDecision(199, decisionCanBacktrack[199]);

                    int LA199_0 = input.LA(1);

                    if ( ((LA199_0>=WS && LA199_0<=COMMENT)) ) {
                        alt199=1;
                    }
                    } finally {dbg.exitDecision(199);}

                    switch (alt199) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:959:39: ws
                            {
                            dbg.location(959,39);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5616);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(199);}

                    dbg.location(959,43);
                    match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration5619); if (state.failed) return ;
                    dbg.location(959,49);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:959:49: ( ws )?
                    int alt200=2;
                    try { dbg.enterSubRule(200);
                    try { dbg.enterDecision(200, decisionCanBacktrack[200]);

                    int LA200_0 = input.LA(1);

                    if ( ((LA200_0>=WS && LA200_0<=COMMENT)) ) {
                        alt200=1;
                    }
                    } finally {dbg.exitDecision(200);}

                    switch (alt200) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:959:49: ws
                            {
                            dbg.location(959,49);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5621);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(200);}

                    dbg.location(959,53);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration5624);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(959,72);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:959:72: ( ( ws )? SASS_DEFAULT )?
                    int alt202=2;
                    try { dbg.enterSubRule(202);
                    try { dbg.enterDecision(202, decisionCanBacktrack[202]);

                    try {
                        isCyclicDecision = true;
                        alt202 = dfa202.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(202);}

                    switch (alt202) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:959:73: ( ws )? SASS_DEFAULT
                            {
                            dbg.location(959,73);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:959:73: ( ws )?
                            int alt201=2;
                            try { dbg.enterSubRule(201);
                            try { dbg.enterDecision(201, decisionCanBacktrack[201]);

                            int LA201_0 = input.LA(1);

                            if ( ((LA201_0>=WS && LA201_0<=COMMENT)) ) {
                                alt201=1;
                            }
                            } finally {dbg.exitDecision(201);}

                            switch (alt201) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:959:73: ws
                                    {
                                    dbg.location(959,73);
                                    pushFollow(FOLLOW_ws_in_cp_variable_declaration5627);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(201);}

                            dbg.location(959,77);
                            match(input,SASS_DEFAULT,FOLLOW_SASS_DEFAULT_in_cp_variable_declaration5630); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(202);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(960, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_variable_declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_variable_declaration"


    // $ANTLR start "cp_variable"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:963:1: cp_variable : ({...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE ) | {...}? ( SASS_VAR ) );
    public final void cp_variable() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_variable");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(963, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:964:5: ({...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE ) | {...}? ( SASS_VAR ) )
            int alt204=2;
            try { dbg.enterDecision(204, decisionCanBacktrack[204]);

            int LA204_0 = input.LA(1);

            if ( (LA204_0==NAMESPACE_SYM||(LA204_0>=CHARSET_SYM && LA204_0<=IMPORT_SYM)||LA204_0==MEDIA_SYM||(LA204_0>=AT_IDENT && LA204_0<=MOZ_DOCUMENT_SYM)||LA204_0==WEBKIT_KEYFRAMES_SYM||(LA204_0>=PAGE_SYM && LA204_0<=RIGHTBOTTOM_SYM)||(LA204_0>=SASS_CONTENT && LA204_0<=SASS_WHILE)) ) {
                alt204=1;
            }
            else if ( (LA204_0==SASS_VAR) ) {
                alt204=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 204, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(204);}

            switch (alt204) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:966:9: {...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE )
                    {
                    dbg.location(966,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable", "isLessSource()");
                    }
                    dbg.location(966,27);
                    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=CHARSET_SYM && input.LA(1)<=IMPORT_SYM)||input.LA(1)==MEDIA_SYM||(input.LA(1)>=AT_IDENT && input.LA(1)<=MOZ_DOCUMENT_SYM)||input.LA(1)==WEBKIT_KEYFRAMES_SYM||(input.LA(1)>=PAGE_SYM && input.LA(1)<=RIGHTBOTTOM_SYM)||(input.LA(1)>=SASS_CONTENT && input.LA(1)<=SASS_WHILE) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:968:9: {...}? ( SASS_VAR )
                    {
                    dbg.location(968,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable", "isScssSource()");
                    }
                    dbg.location(968,27);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:968:27: ( SASS_VAR )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:968:29: SASS_VAR
                    {
                    dbg.location(968,29);
                    match(input,SASS_VAR,FOLLOW_SASS_VAR_in_cp_variable5851); if (state.failed) return ;

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(969, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_variable");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_variable"


    // $ANTLR start "cp_expression_list"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:972:1: cp_expression_list : cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )* ;
    public final void cp_expression_list() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression_list");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(972, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:973:5: ( cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:974:5: cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*
            {
            dbg.location(974,5);
            pushFollow(FOLLOW_cp_expression_in_cp_expression_list5879);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(975,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:975:5: ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*
            try { dbg.enterSubRule(207);

            loop207:
            do {
                int alt207=2;
                try { dbg.enterDecision(207, decisionCanBacktrack[207]);

                try {
                    isCyclicDecision = true;
                    alt207 = dfa207.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(207);}

                switch (alt207) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:975:6: ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression
            	    {
            	    dbg.location(975,37);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:975:37: ( ws )?
            	    int alt205=2;
            	    try { dbg.enterSubRule(205);
            	    try { dbg.enterDecision(205, decisionCanBacktrack[205]);

            	    int LA205_0 = input.LA(1);

            	    if ( ((LA205_0>=WS && LA205_0<=COMMENT)) ) {
            	        alt205=1;
            	    }
            	    } finally {dbg.exitDecision(205);}

            	    switch (alt205) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:975:37: ws
            	            {
            	            dbg.location(975,37);
            	            pushFollow(FOLLOW_ws_in_cp_expression_list5898);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(205);}

            	    dbg.location(975,41);
            	    match(input,COMMA,FOLLOW_COMMA_in_cp_expression_list5901); if (state.failed) return ;
            	    dbg.location(975,47);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:975:47: ( ws )?
            	    int alt206=2;
            	    try { dbg.enterSubRule(206);
            	    try { dbg.enterDecision(206, decisionCanBacktrack[206]);

            	    int LA206_0 = input.LA(1);

            	    if ( ((LA206_0>=WS && LA206_0<=COMMENT)) ) {
            	        alt206=1;
            	    }
            	    } finally {dbg.exitDecision(206);}

            	    switch (alt206) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:975:47: ws
            	            {
            	            dbg.location(975,47);
            	            pushFollow(FOLLOW_ws_in_cp_expression_list5903);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(206);}

            	    dbg.location(975,51);
            	    pushFollow(FOLLOW_cp_expression_in_cp_expression_list5906);
            	    cp_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop207;
                }
            } while (true);
            } finally {dbg.exitSubRule(207);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(976, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression_list");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression_list"


    // $ANTLR start "cp_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:988:1: cp_expression : cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* ;
    public final void cp_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(988, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:989:5: ( cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:990:5: cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*
            {
            dbg.location(990,5);
            pushFollow(FOLLOW_cp_expression_atom_in_cp_expression5943);
            cp_expression_atom();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(991,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:5: ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*
            try { dbg.enterSubRule(211);

            loop211:
            do {
                int alt211=3;
                try { dbg.enterDecision(211, decisionCanBacktrack[211]);

                try {
                    isCyclicDecision = true;
                    alt211 = dfa211.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(211);}

                switch (alt211) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:992:9: ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom
            	    {
            	    dbg.location(992,39);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:992:39: ( ( ws )? cp_expression_operator ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:992:40: ( ws )? cp_expression_operator ( ws )?
            	    {
            	    dbg.location(992,40);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:992:40: ( ws )?
            	    int alt208=2;
            	    try { dbg.enterSubRule(208);
            	    try { dbg.enterDecision(208, decisionCanBacktrack[208]);

            	    int LA208_0 = input.LA(1);

            	    if ( ((LA208_0>=WS && LA208_0<=COMMENT)) ) {
            	        alt208=1;
            	    }
            	    } finally {dbg.exitDecision(208);}

            	    switch (alt208) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:992:40: ws
            	            {
            	            dbg.location(992,40);
            	            pushFollow(FOLLOW_ws_in_cp_expression5969);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(208);}

            	    dbg.location(992,44);
            	    pushFollow(FOLLOW_cp_expression_operator_in_cp_expression5972);
            	    cp_expression_operator();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(992,67);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:992:67: ( ws )?
            	    int alt209=2;
            	    try { dbg.enterSubRule(209);
            	    try { dbg.enterDecision(209, decisionCanBacktrack[209]);

            	    int LA209_0 = input.LA(1);

            	    if ( ((LA209_0>=WS && LA209_0<=COMMENT)) ) {
            	        alt209=1;
            	    }
            	    } finally {dbg.exitDecision(209);}

            	    switch (alt209) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:992:67: ws
            	            {
            	            dbg.location(992,67);
            	            pushFollow(FOLLOW_ws_in_cp_expression5974);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(209);}


            	    }

            	    dbg.location(992,72);
            	    pushFollow(FOLLOW_cp_expression_atom_in_cp_expression5978);
            	    cp_expression_atom();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:993:11: ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom
            	    {
            	    dbg.location(993,37);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:993:37: ( ws )?
            	    int alt210=2;
            	    try { dbg.enterSubRule(210);
            	    try { dbg.enterDecision(210, decisionCanBacktrack[210]);

            	    int LA210_0 = input.LA(1);

            	    if ( ((LA210_0>=WS && LA210_0<=COMMENT)) ) {
            	        alt210=1;
            	    }
            	    } finally {dbg.exitDecision(210);}

            	    switch (alt210) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:993:37: ws
            	            {
            	            dbg.location(993,37);
            	            pushFollow(FOLLOW_ws_in_cp_expression5998);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(210);}

            	    dbg.location(993,41);
            	    pushFollow(FOLLOW_cp_expression_atom_in_cp_expression6001);
            	    cp_expression_atom();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop211;
                }
            } while (true);
            } finally {dbg.exitSubRule(211);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(995, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression"


    // $ANTLR start "cp_expression_operator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:997:1: cp_expression_operator : ( OR | AND | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ );
    public final void cp_expression_operator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression_operator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(997, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:5: ( OR | AND | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(998,5);
            if ( input.LA(1)==AND||input.LA(1)==GREATER||(input.LA(1)>=OR && input.LA(1)<=GREATER_OR_EQ) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1000, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression_operator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression_operator"


    // $ANTLR start "cp_expression_atom"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1002:1: cp_expression_atom : ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN ) ;
    public final void cp_expression_atom() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression_atom");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1002, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1003:5: ( ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1004:9: ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN )
            {
            dbg.location(1004,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1004:9: ( NOT ( ws )? )?
            int alt213=2;
            try { dbg.enterSubRule(213);
            try { dbg.enterDecision(213, decisionCanBacktrack[213]);

            int LA213_0 = input.LA(1);

            if ( (LA213_0==NOT) ) {
                alt213=1;
            }
            } finally {dbg.exitDecision(213);}

            switch (alt213) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1004:10: NOT ( ws )?
                    {
                    dbg.location(1004,10);
                    match(input,NOT,FOLLOW_NOT_in_cp_expression_atom6092); if (state.failed) return ;
                    dbg.location(1004,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1004:14: ( ws )?
                    int alt212=2;
                    try { dbg.enterSubRule(212);
                    try { dbg.enterDecision(212, decisionCanBacktrack[212]);

                    int LA212_0 = input.LA(1);

                    if ( ((LA212_0>=WS && LA212_0<=COMMENT)) ) {
                        alt212=1;
                    }
                    } finally {dbg.exitDecision(212);}

                    switch (alt212) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1004:14: ws
                            {
                            dbg.location(1004,14);
                            pushFollow(FOLLOW_ws_in_cp_expression_atom6094);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(212);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(213);}

            dbg.location(1005,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1005:9: ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN )
            int alt216=2;
            try { dbg.enterSubRule(216);
            try { dbg.enterDecision(216, decisionCanBacktrack[216]);

            try {
                isCyclicDecision = true;
                alt216 = dfa216.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(216);}

            switch (alt216) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1006:13: ( cp_math_expression )=> cp_math_expression
                    {
                    dbg.location(1006,35);
                    pushFollow(FOLLOW_cp_math_expression_in_cp_expression_atom6126);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1007:15: LPAREN ( ws )? cp_expression_list ( ws )? RPAREN
                    {
                    dbg.location(1007,15);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_expression_atom6142); if (state.failed) return ;
                    dbg.location(1007,22);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1007:22: ( ws )?
                    int alt214=2;
                    try { dbg.enterSubRule(214);
                    try { dbg.enterDecision(214, decisionCanBacktrack[214]);

                    int LA214_0 = input.LA(1);

                    if ( ((LA214_0>=WS && LA214_0<=COMMENT)) ) {
                        alt214=1;
                    }
                    } finally {dbg.exitDecision(214);}

                    switch (alt214) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1007:22: ws
                            {
                            dbg.location(1007,22);
                            pushFollow(FOLLOW_ws_in_cp_expression_atom6144);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(214);}

                    dbg.location(1007,26);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_expression_atom6147);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1007,45);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1007:45: ( ws )?
                    int alt215=2;
                    try { dbg.enterSubRule(215);
                    try { dbg.enterDecision(215, decisionCanBacktrack[215]);

                    int LA215_0 = input.LA(1);

                    if ( ((LA215_0>=WS && LA215_0<=COMMENT)) ) {
                        alt215=1;
                    }
                    } finally {dbg.exitDecision(215);}

                    switch (alt215) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1007:45: ws
                            {
                            dbg.location(1007,45);
                            pushFollow(FOLLOW_ws_in_cp_expression_atom6149);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(215);}

                    dbg.location(1007,49);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_expression_atom6152); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(216);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1009, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression_atom");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression_atom"


    // $ANTLR start "cp_math_expressions"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1012:1: cp_math_expressions : cp_math_expression ( ws cp_math_expression )* ;
    public final void cp_math_expressions() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_math_expressions");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1012, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1013:5: ( cp_math_expression ( ws cp_math_expression )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:5: cp_math_expression ( ws cp_math_expression )*
            {
            dbg.location(1014,5);
            pushFollow(FOLLOW_cp_math_expression_in_cp_math_expressions6184);
            cp_math_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1015,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1015:5: ( ws cp_math_expression )*
            try { dbg.enterSubRule(217);

            loop217:
            do {
                int alt217=2;
                try { dbg.enterDecision(217, decisionCanBacktrack[217]);

                int LA217_0 = input.LA(1);

                if ( ((LA217_0>=WS && LA217_0<=COMMENT)) ) {
                    alt217=1;
                }


                } finally {dbg.exitDecision(217);}

                switch (alt217) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1015:6: ws cp_math_expression
            	    {
            	    dbg.location(1015,6);
            	    pushFollow(FOLLOW_ws_in_cp_math_expressions6191);
            	    ws();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(1015,9);
            	    pushFollow(FOLLOW_cp_math_expression_in_cp_math_expressions6193);
            	    cp_math_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop217;
                }
            } while (true);
            } finally {dbg.exitSubRule(217);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1016, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_math_expressions");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_math_expressions"


    // $ANTLR start "cp_math_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1030:1: cp_math_expression : cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )* ;
    public final void cp_math_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_math_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1030, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:5: ( cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:10: cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*
            {
            dbg.location(1031,10);
            pushFollow(FOLLOW_cp_math_expression_atom_in_cp_math_expression6227);
            cp_math_expression_atom();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1032,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:10: ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*
            try { dbg.enterSubRule(220);

            loop220:
            do {
                int alt220=2;
                try { dbg.enterDecision(220, decisionCanBacktrack[220]);

                try {
                    isCyclicDecision = true;
                    alt220 = dfa220.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(220);}

                switch (alt220) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1033:13: ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom
            	    {
            	    dbg.location(1033,48);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1033:48: ( ws )?
            	    int alt218=2;
            	    try { dbg.enterSubRule(218);
            	    try { dbg.enterDecision(218, decisionCanBacktrack[218]);

            	    int LA218_0 = input.LA(1);

            	    if ( ((LA218_0>=WS && LA218_0<=COMMENT)) ) {
            	        alt218=1;
            	    }
            	    } finally {dbg.exitDecision(218);}

            	    switch (alt218) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1033:48: ws
            	            {
            	            dbg.location(1033,48);
            	            pushFollow(FOLLOW_ws_in_cp_math_expression6270);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(218);}

            	    dbg.location(1033,52);
            	    if ( (input.LA(1)>=SOLIDUS && input.LA(1)<=PLUS)||input.LA(1)==STAR ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }

            	    dbg.location(1033,78);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1033:78: ( ws )?
            	    int alt219=2;
            	    try { dbg.enterSubRule(219);
            	    try { dbg.enterDecision(219, decisionCanBacktrack[219]);

            	    int LA219_0 = input.LA(1);

            	    if ( ((LA219_0>=WS && LA219_0<=COMMENT)) ) {
            	        alt219=1;
            	    }
            	    } finally {dbg.exitDecision(219);}

            	    switch (alt219) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1033:78: ws
            	            {
            	            dbg.location(1033,78);
            	            pushFollow(FOLLOW_ws_in_cp_math_expression6283);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(219);}

            	    dbg.location(1033,82);
            	    pushFollow(FOLLOW_cp_math_expression_atom_in_cp_math_expression6286);
            	    cp_math_expression_atom();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop220;
                }
            } while (true);
            } finally {dbg.exitSubRule(220);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1035, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_math_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_math_expression"


    // $ANTLR start "cp_math_expression_atom"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1037:1: cp_math_expression_atom : ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN );
    public final void cp_math_expression_atom() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_math_expression_atom");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1037, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1038:5: ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN )
            int alt225=3;
            try { dbg.enterDecision(225, decisionCanBacktrack[225]);

            try {
                isCyclicDecision = true;
                alt225 = dfa225.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(225);}

            switch (alt225) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:5: term
                    {
                    dbg.location(1039,5);
                    pushFollow(FOLLOW_term_in_cp_math_expression_atom6324);
                    term();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1040:7: IMPORTANT_SYM
                    {
                    dbg.location(1040,7);
                    match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_cp_math_expression_atom6332); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:7: ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN
                    {
                    dbg.location(1041,7);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:7: ( unaryOperator ( ws )? )?
                    int alt222=2;
                    try { dbg.enterSubRule(222);
                    try { dbg.enterDecision(222, decisionCanBacktrack[222]);

                    int LA222_0 = input.LA(1);

                    if ( ((LA222_0>=MINUS && LA222_0<=PLUS)) ) {
                        alt222=1;
                    }
                    } finally {dbg.exitDecision(222);}

                    switch (alt222) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:9: unaryOperator ( ws )?
                            {
                            dbg.location(1041,9);
                            pushFollow(FOLLOW_unaryOperator_in_cp_math_expression_atom6343);
                            unaryOperator();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(1041,23);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:23: ( ws )?
                            int alt221=2;
                            try { dbg.enterSubRule(221);
                            try { dbg.enterDecision(221, decisionCanBacktrack[221]);

                            int LA221_0 = input.LA(1);

                            if ( ((LA221_0>=WS && LA221_0<=COMMENT)) ) {
                                alt221=1;
                            }
                            } finally {dbg.exitDecision(221);}

                            switch (alt221) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:23: ws
                                    {
                                    dbg.location(1041,23);
                                    pushFollow(FOLLOW_ws_in_cp_math_expression_atom6345);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(221);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(222);}

                    dbg.location(1041,30);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_math_expression_atom6351); if (state.failed) return ;
                    dbg.location(1041,37);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:37: ( ws )?
                    int alt223=2;
                    try { dbg.enterSubRule(223);
                    try { dbg.enterDecision(223, decisionCanBacktrack[223]);

                    int LA223_0 = input.LA(1);

                    if ( ((LA223_0>=WS && LA223_0<=COMMENT)) ) {
                        alt223=1;
                    }
                    } finally {dbg.exitDecision(223);}

                    switch (alt223) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:37: ws
                            {
                            dbg.location(1041,37);
                            pushFollow(FOLLOW_ws_in_cp_math_expression_atom6353);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(223);}

                    dbg.location(1041,41);
                    pushFollow(FOLLOW_cp_math_expression_in_cp_math_expression_atom6356);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1041,60);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:60: ( ws )?
                    int alt224=2;
                    try { dbg.enterSubRule(224);
                    try { dbg.enterDecision(224, decisionCanBacktrack[224]);

                    int LA224_0 = input.LA(1);

                    if ( ((LA224_0>=WS && LA224_0<=COMMENT)) ) {
                        alt224=1;
                    }
                    } finally {dbg.exitDecision(224);}

                    switch (alt224) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:60: ws
                            {
                            dbg.location(1041,60);
                            pushFollow(FOLLOW_ws_in_cp_math_expression_atom6358);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(224);}

                    dbg.location(1041,64);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_math_expression_atom6361); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1042, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_math_expression_atom");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_math_expression_atom"


    // $ANTLR start "cp_mixin_declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1050:1: cp_mixin_declaration : ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block ;
    public final void cp_mixin_declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1050, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1051:5: ( ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1052:5: ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block
            {
            dbg.location(1052,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1052:5: ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? )
            int alt235=2;
            try { dbg.enterSubRule(235);
            try { dbg.enterDecision(235, decisionCanBacktrack[235]);

            int LA235_0 = input.LA(1);

            if ( (LA235_0==DOT) ) {
                alt235=1;
            }
            else if ( (LA235_0==SASS_MIXIN) ) {
                alt235=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 235, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(235);}

            switch (alt235) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:9: {...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )?
                    {
                    dbg.location(1053,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_declaration", "isLessSource()");
                    }
                    dbg.location(1053,27);
                    match(input,DOT,FOLLOW_DOT_in_cp_mixin_declaration6401); if (state.failed) return ;
                    dbg.location(1053,31);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration6403);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1053,45);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:45: ( ws )?
                    int alt226=2;
                    try { dbg.enterSubRule(226);
                    try { dbg.enterDecision(226, decisionCanBacktrack[226]);

                    int LA226_0 = input.LA(1);

                    if ( ((LA226_0>=WS && LA226_0<=COMMENT)) ) {
                        alt226=1;
                    }
                    } finally {dbg.exitDecision(226);}

                    switch (alt226) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:45: ws
                            {
                            dbg.location(1053,45);
                            pushFollow(FOLLOW_ws_in_cp_mixin_declaration6405);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(226);}

                    dbg.location(1053,49);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration6408); if (state.failed) return ;
                    dbg.location(1053,56);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:56: ( ws )?
                    int alt227=2;
                    try { dbg.enterSubRule(227);
                    try { dbg.enterDecision(227, decisionCanBacktrack[227]);

                    int LA227_0 = input.LA(1);

                    if ( ((LA227_0>=WS && LA227_0<=COMMENT)) ) {
                        alt227=1;
                    }
                    } finally {dbg.exitDecision(227);}

                    switch (alt227) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:56: ws
                            {
                            dbg.location(1053,56);
                            pushFollow(FOLLOW_ws_in_cp_mixin_declaration6410);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(227);}

                    dbg.location(1053,60);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:60: ( cp_args_list )?
                    int alt228=2;
                    try { dbg.enterSubRule(228);
                    try { dbg.enterDecision(228, decisionCanBacktrack[228]);

                    int LA228_0 = input.LA(1);

                    if ( (LA228_0==NAMESPACE_SYM||(LA228_0>=CHARSET_SYM && LA228_0<=IMPORT_SYM)||LA228_0==MEDIA_SYM||(LA228_0>=AT_IDENT && LA228_0<=MOZ_DOCUMENT_SYM)||LA228_0==WEBKIT_KEYFRAMES_SYM||(LA228_0>=PAGE_SYM && LA228_0<=RIGHTBOTTOM_SYM)||LA228_0==SASS_VAR||(LA228_0>=SASS_CONTENT && LA228_0<=SASS_WHILE)||(LA228_0>=CP_DOTS && LA228_0<=LESS_REST)) ) {
                        alt228=1;
                    }
                    } finally {dbg.exitDecision(228);}

                    switch (alt228) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:60: cp_args_list
                            {
                            dbg.location(1053,60);
                            pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration6413);
                            cp_args_list();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(228);}

                    dbg.location(1053,74);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration6416); if (state.failed) return ;
                    dbg.location(1053,81);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:81: ( ( ws )? less_mixin_guarded )?
                    int alt230=2;
                    try { dbg.enterSubRule(230);
                    try { dbg.enterDecision(230, decisionCanBacktrack[230]);

                    try {
                        isCyclicDecision = true;
                        alt230 = dfa230.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(230);}

                    switch (alt230) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:82: ( ws )? less_mixin_guarded
                            {
                            dbg.location(1053,82);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:82: ( ws )?
                            int alt229=2;
                            try { dbg.enterSubRule(229);
                            try { dbg.enterDecision(229, decisionCanBacktrack[229]);

                            int LA229_0 = input.LA(1);

                            if ( ((LA229_0>=WS && LA229_0<=COMMENT)) ) {
                                alt229=1;
                            }
                            } finally {dbg.exitDecision(229);}

                            switch (alt229) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:82: ws
                                    {
                                    dbg.location(1053,82);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6419);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(229);}

                            dbg.location(1053,86);
                            pushFollow(FOLLOW_less_mixin_guarded_in_cp_mixin_declaration6422);
                            less_mixin_guarded();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(230);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:9: {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?
                    {
                    dbg.location(1055,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_declaration", "isScssSource()");
                    }
                    dbg.location(1055,27);
                    match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_cp_mixin_declaration6446); if (state.failed) return ;
                    dbg.location(1055,38);
                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6448);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1055,41);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration6450);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1055,55);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:55: ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?
                    int alt234=2;
                    try { dbg.enterSubRule(234);
                    try { dbg.enterDecision(234, decisionCanBacktrack[234]);

                    try {
                        isCyclicDecision = true;
                        alt234 = dfa234.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(234);}

                    switch (alt234) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:56: ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN
                            {
                            dbg.location(1055,56);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:56: ( ws )?
                            int alt231=2;
                            try { dbg.enterSubRule(231);
                            try { dbg.enterDecision(231, decisionCanBacktrack[231]);

                            int LA231_0 = input.LA(1);

                            if ( ((LA231_0>=WS && LA231_0<=COMMENT)) ) {
                                alt231=1;
                            }
                            } finally {dbg.exitDecision(231);}

                            switch (alt231) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:56: ws
                                    {
                                    dbg.location(1055,56);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6453);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(231);}

                            dbg.location(1055,60);
                            match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration6456); if (state.failed) return ;
                            dbg.location(1055,67);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:67: ( ws )?
                            int alt232=2;
                            try { dbg.enterSubRule(232);
                            try { dbg.enterDecision(232, decisionCanBacktrack[232]);

                            int LA232_0 = input.LA(1);

                            if ( ((LA232_0>=WS && LA232_0<=COMMENT)) ) {
                                alt232=1;
                            }
                            } finally {dbg.exitDecision(232);}

                            switch (alt232) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:67: ws
                                    {
                                    dbg.location(1055,67);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6458);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(232);}

                            dbg.location(1055,71);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:71: ( cp_args_list )?
                            int alt233=2;
                            try { dbg.enterSubRule(233);
                            try { dbg.enterDecision(233, decisionCanBacktrack[233]);

                            int LA233_0 = input.LA(1);

                            if ( (LA233_0==NAMESPACE_SYM||(LA233_0>=CHARSET_SYM && LA233_0<=IMPORT_SYM)||LA233_0==MEDIA_SYM||(LA233_0>=AT_IDENT && LA233_0<=MOZ_DOCUMENT_SYM)||LA233_0==WEBKIT_KEYFRAMES_SYM||(LA233_0>=PAGE_SYM && LA233_0<=RIGHTBOTTOM_SYM)||LA233_0==SASS_VAR||(LA233_0>=SASS_CONTENT && LA233_0<=SASS_WHILE)||(LA233_0>=CP_DOTS && LA233_0<=LESS_REST)) ) {
                                alt233=1;
                            }
                            } finally {dbg.exitDecision(233);}

                            switch (alt233) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:71: cp_args_list
                                    {
                                    dbg.location(1055,71);
                                    pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration6461);
                                    cp_args_list();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(233);}

                            dbg.location(1055,85);
                            match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration6464); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(234);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(235);}

            dbg.location(1057,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1057:5: ( ws )?
            int alt236=2;
            try { dbg.enterSubRule(236);
            try { dbg.enterDecision(236, decisionCanBacktrack[236]);

            int LA236_0 = input.LA(1);

            if ( ((LA236_0>=WS && LA236_0<=COMMENT)) ) {
                alt236=1;
            }
            } finally {dbg.exitDecision(236);}

            switch (alt236) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1057:5: ws
                    {
                    dbg.location(1057,5);
                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6478);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(236);}

            dbg.location(1057,9);
            pushFollow(FOLLOW_cp_mixin_block_in_cp_mixin_declaration6481);
            cp_mixin_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1058, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_declaration"


    // $ANTLR start "cp_mixin_call"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1062:1: cp_mixin_call : ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? | {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? ) ;
    public final void cp_mixin_call() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1062, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1063:5: ( ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? | {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1064:5: ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? | {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? )
            {
            dbg.location(1064,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1064:5: ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? | {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? )
            int alt247=2;
            try { dbg.enterSubRule(247);
            try { dbg.enterDecision(247, decisionCanBacktrack[247]);

            int LA247_0 = input.LA(1);

            if ( (LA247_0==DOT) ) {
                alt247=1;
            }
            else if ( (LA247_0==SASS_INCLUDE) ) {
                alt247=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 247, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(247);}

            switch (alt247) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:9: {...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
                    {
                    dbg.location(1065,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_call", "isLessSource()");
                    }
                    dbg.location(1065,27);
                    match(input,DOT,FOLLOW_DOT_in_cp_mixin_call6521); if (state.failed) return ;
                    dbg.location(1065,31);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call6523);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1065,45);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:45: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
                    int alt240=2;
                    try { dbg.enterSubRule(240);
                    try { dbg.enterDecision(240, decisionCanBacktrack[240]);

                    try {
                        isCyclicDecision = true;
                        alt240 = dfa240.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(240);}

                    switch (alt240) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:46: ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN
                            {
                            dbg.location(1065,46);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:46: ( ws )?
                            int alt237=2;
                            try { dbg.enterSubRule(237);
                            try { dbg.enterDecision(237, decisionCanBacktrack[237]);

                            int LA237_0 = input.LA(1);

                            if ( ((LA237_0>=WS && LA237_0<=COMMENT)) ) {
                                alt237=1;
                            }
                            } finally {dbg.exitDecision(237);}

                            switch (alt237) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:46: ws
                                    {
                                    dbg.location(1065,46);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6526);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(237);}

                            dbg.location(1065,50);
                            match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_call6529); if (state.failed) return ;
                            dbg.location(1065,57);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:57: ( ws )?
                            int alt238=2;
                            try { dbg.enterSubRule(238);
                            try { dbg.enterDecision(238, decisionCanBacktrack[238]);

                            int LA238_0 = input.LA(1);

                            if ( ((LA238_0>=WS && LA238_0<=COMMENT)) ) {
                                alt238=1;
                            }
                            } finally {dbg.exitDecision(238);}

                            switch (alt238) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:57: ws
                                    {
                                    dbg.location(1065,57);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6531);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(238);}

                            dbg.location(1065,61);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:61: ( cp_mixin_call_args )?
                            int alt239=2;
                            try { dbg.enterSubRule(239);
                            try { dbg.enterDecision(239, decisionCanBacktrack[239]);

                            int LA239_0 = input.LA(1);

                            if ( (LA239_0==NAMESPACE_SYM||(LA239_0>=IDENT && LA239_0<=IMPORT_SYM)||LA239_0==MEDIA_SYM||(LA239_0>=NOT && LA239_0<=LPAREN)||(LA239_0>=AT_IDENT && LA239_0<=MOZ_DOCUMENT_SYM)||(LA239_0>=WEBKIT_KEYFRAMES_SYM && LA239_0<=RIGHTBOTTOM_SYM)||(LA239_0>=MINUS && LA239_0<=PLUS)||(LA239_0>=TILDE && LA239_0<=HASH)||(LA239_0>=SASS_VAR && LA239_0<=PERCENTAGE_SYMBOL)||(LA239_0>=SASS_CONTENT && LA239_0<=SASS_WHILE)) ) {
                                alt239=1;
                            }
                            } finally {dbg.exitDecision(239);}

                            switch (alt239) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:61: cp_mixin_call_args
                                    {
                                    dbg.location(1065,61);
                                    pushFollow(FOLLOW_cp_mixin_call_args_in_cp_mixin_call6534);
                                    cp_mixin_call_args();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(239);}

                            dbg.location(1065,81);
                            match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_call6537); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(240);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:9: {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )?
                    {
                    dbg.location(1067,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_call", "isScssSource()");
                    }
                    dbg.location(1067,27);
                    match(input,SASS_INCLUDE,FOLLOW_SASS_INCLUDE_in_cp_mixin_call6561); if (state.failed) return ;
                    dbg.location(1067,40);
                    pushFollow(FOLLOW_ws_in_cp_mixin_call6563);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1067,43);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call6565);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1067,57);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:57: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
                    int alt244=2;
                    try { dbg.enterSubRule(244);
                    try { dbg.enterDecision(244, decisionCanBacktrack[244]);

                    try {
                        isCyclicDecision = true;
                        alt244 = dfa244.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(244);}

                    switch (alt244) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:58: ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN
                            {
                            dbg.location(1067,58);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:58: ( ws )?
                            int alt241=2;
                            try { dbg.enterSubRule(241);
                            try { dbg.enterDecision(241, decisionCanBacktrack[241]);

                            int LA241_0 = input.LA(1);

                            if ( ((LA241_0>=WS && LA241_0<=COMMENT)) ) {
                                alt241=1;
                            }
                            } finally {dbg.exitDecision(241);}

                            switch (alt241) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:58: ws
                                    {
                                    dbg.location(1067,58);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6568);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(241);}

                            dbg.location(1067,62);
                            match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_call6571); if (state.failed) return ;
                            dbg.location(1067,69);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:69: ( ws )?
                            int alt242=2;
                            try { dbg.enterSubRule(242);
                            try { dbg.enterDecision(242, decisionCanBacktrack[242]);

                            int LA242_0 = input.LA(1);

                            if ( ((LA242_0>=WS && LA242_0<=COMMENT)) ) {
                                alt242=1;
                            }
                            } finally {dbg.exitDecision(242);}

                            switch (alt242) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:69: ws
                                    {
                                    dbg.location(1067,69);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6573);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(242);}

                            dbg.location(1067,73);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:73: ( cp_mixin_call_args )?
                            int alt243=2;
                            try { dbg.enterSubRule(243);
                            try { dbg.enterDecision(243, decisionCanBacktrack[243]);

                            int LA243_0 = input.LA(1);

                            if ( (LA243_0==NAMESPACE_SYM||(LA243_0>=IDENT && LA243_0<=IMPORT_SYM)||LA243_0==MEDIA_SYM||(LA243_0>=NOT && LA243_0<=LPAREN)||(LA243_0>=AT_IDENT && LA243_0<=MOZ_DOCUMENT_SYM)||(LA243_0>=WEBKIT_KEYFRAMES_SYM && LA243_0<=RIGHTBOTTOM_SYM)||(LA243_0>=MINUS && LA243_0<=PLUS)||(LA243_0>=TILDE && LA243_0<=HASH)||(LA243_0>=SASS_VAR && LA243_0<=PERCENTAGE_SYMBOL)||(LA243_0>=SASS_CONTENT && LA243_0<=SASS_WHILE)) ) {
                                alt243=1;
                            }
                            } finally {dbg.exitDecision(243);}

                            switch (alt243) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:73: cp_mixin_call_args
                                    {
                                    dbg.location(1067,73);
                                    pushFollow(FOLLOW_cp_mixin_call_args_in_cp_mixin_call6576);
                                    cp_mixin_call_args();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(243);}

                            dbg.location(1067,93);
                            match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_call6579); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(244);}

                    dbg.location(1067,102);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:102: ( ( ws )? cp_mixin_block )?
                    int alt246=2;
                    try { dbg.enterSubRule(246);
                    try { dbg.enterDecision(246, decisionCanBacktrack[246]);

                    try {
                        isCyclicDecision = true;
                        alt246 = dfa246.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(246);}

                    switch (alt246) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:103: ( ws )? cp_mixin_block
                            {
                            dbg.location(1067,103);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:103: ( ws )?
                            int alt245=2;
                            try { dbg.enterSubRule(245);
                            try { dbg.enterDecision(245, decisionCanBacktrack[245]);

                            int LA245_0 = input.LA(1);

                            if ( ((LA245_0>=WS && LA245_0<=COMMENT)) ) {
                                alt245=1;
                            }
                            } finally {dbg.exitDecision(245);}

                            switch (alt245) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:103: ws
                                    {
                                    dbg.location(1067,103);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6584);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(245);}

                            dbg.location(1067,107);
                            pushFollow(FOLLOW_cp_mixin_block_in_cp_mixin_call6587);
                            cp_mixin_block();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(246);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(247);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1069, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_call");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_call"


    // $ANTLR start "cp_mixin_block"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:1: cp_mixin_block : LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void cp_mixin_block() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_block");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1071, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1072:5: ( LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:5: LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(1073,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_cp_mixin_block6620); if (state.failed) return ;
            dbg.location(1073,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:12: ( ws )?
            int alt248=2;
            try { dbg.enterSubRule(248);
            try { dbg.enterDecision(248, decisionCanBacktrack[248]);

            int LA248_0 = input.LA(1);

            if ( ((LA248_0>=WS && LA248_0<=COMMENT)) ) {
                alt248=1;
            }
            } finally {dbg.exitDecision(248);}

            switch (alt248) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:12: ws
                    {
                    dbg.location(1073,12);
                    pushFollow(FOLLOW_ws_in_cp_mixin_block6622);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(248);}

            dbg.location(1073,16);
            pushFollow(FOLLOW_syncToFollow_in_cp_mixin_block6625);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1074,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1074:9: ( declarations )?
            int alt249=2;
            try { dbg.enterSubRule(249);
            try { dbg.enterDecision(249, decisionCanBacktrack[249]);

            int LA249_0 = input.LA(1);

            if ( ((LA249_0>=NAMESPACE_SYM && LA249_0<=IDENT)||(LA249_0>=CHARSET_SYM && LA249_0<=MEDIA_SYM)||LA249_0==GEN||(LA249_0>=COLON && LA249_0<=MOZ_DOCUMENT_SYM)||LA249_0==WEBKIT_KEYFRAMES_SYM||(LA249_0>=PAGE_SYM && LA249_0<=RIGHTBOTTOM_SYM)||(LA249_0>=MINUS && LA249_0<=PIPE)||LA249_0==LESS_AND||(LA249_0>=RBRACKET && LA249_0<=SASS_VAR)||(LA249_0>=SASS_CONTENT && LA249_0<=SASS_WHILE)||LA249_0==AT_SIGN) ) {
                alt249=1;
            }
            } finally {dbg.exitDecision(249);}

            switch (alt249) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1074:9: declarations
                    {
                    dbg.location(1074,9);
                    pushFollow(FOLLOW_declarations_in_cp_mixin_block6635);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(249);}

            dbg.location(1075,5);
            match(input,RBRACE,FOLLOW_RBRACE_in_cp_mixin_block6642); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1076, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_block");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_block"


    // $ANTLR start "cp_mixin_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1078:1: cp_mixin_name : IDENT ;
    public final void cp_mixin_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1078, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1079:5: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1080:5: IDENT
            {
            dbg.location(1080,5);
            match(input,IDENT,FOLLOW_IDENT_in_cp_mixin_name6671); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1081, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_name"


    // $ANTLR start "cp_mixin_call_args"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1083:1: cp_mixin_call_args : cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS )? ;
    public final void cp_mixin_call_args() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_args");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1083, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1084:5: ( cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1087:5: cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS )?
            {
            dbg.location(1087,5);
            pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6707);
            cp_mixin_call_arg();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1087,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1087:23: ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )*
            try { dbg.enterSubRule(251);

            loop251:
            do {
                int alt251=2;
                try { dbg.enterDecision(251, decisionCanBacktrack[251]);

                int LA251_0 = input.LA(1);

                if ( (LA251_0==SEMI||LA251_0==COMMA) ) {
                    alt251=1;
                }


                } finally {dbg.exitDecision(251);}

                switch (alt251) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1087:25: ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg
            	    {
            	    dbg.location(1087,25);
            	    if ( input.LA(1)==SEMI||input.LA(1)==COMMA ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }

            	    dbg.location(1087,40);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1087:40: ( ws )?
            	    int alt250=2;
            	    try { dbg.enterSubRule(250);
            	    try { dbg.enterDecision(250, decisionCanBacktrack[250]);

            	    int LA250_0 = input.LA(1);

            	    if ( ((LA250_0>=WS && LA250_0<=COMMENT)) ) {
            	        alt250=1;
            	    }
            	    } finally {dbg.exitDecision(250);}

            	    switch (alt250) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1087:40: ws
            	            {
            	            dbg.location(1087,40);
            	            pushFollow(FOLLOW_ws_in_cp_mixin_call_args6719);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(250);}

            	    dbg.location(1087,44);
            	    pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6722);
            	    cp_mixin_call_arg();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop251;
                }
            } while (true);
            } finally {dbg.exitSubRule(251);}

            dbg.location(1087,65);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1087:65: ( CP_DOTS )?
            int alt252=2;
            try { dbg.enterSubRule(252);
            try { dbg.enterDecision(252, decisionCanBacktrack[252]);

            int LA252_0 = input.LA(1);

            if ( (LA252_0==CP_DOTS) ) {
                alt252=1;
            }
            } finally {dbg.exitDecision(252);}

            switch (alt252) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1087:65: CP_DOTS
                    {
                    dbg.location(1087,65);
                    match(input,CP_DOTS,FOLLOW_CP_DOTS_in_cp_mixin_call_args6727); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(252);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1088, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_call_args");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_call_args"


    // $ANTLR start "cp_mixin_call_arg"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1090:1: cp_mixin_call_arg : ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? ;
    public final void cp_mixin_call_arg() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_arg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1090, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1091:5: ( ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )?
            {
            dbg.location(1092,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )
            int alt255=2;
            try { dbg.enterSubRule(255);
            try { dbg.enterDecision(255, decisionCanBacktrack[255]);

            try {
                isCyclicDecision = true;
                alt255 = dfa255.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(255);}

            switch (alt255) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:9: cp_variable ( ws )? COLON ( ws )? cp_expression
                    {
                    dbg.location(1093,9);
                    pushFollow(FOLLOW_cp_variable_in_cp_mixin_call_arg6766);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1093,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:21: ( ws )?
                    int alt253=2;
                    try { dbg.enterSubRule(253);
                    try { dbg.enterDecision(253, decisionCanBacktrack[253]);

                    int LA253_0 = input.LA(1);

                    if ( ((LA253_0>=WS && LA253_0<=COMMENT)) ) {
                        alt253=1;
                    }
                    } finally {dbg.exitDecision(253);}

                    switch (alt253) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:21: ws
                            {
                            dbg.location(1093,21);
                            pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6768);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(253);}

                    dbg.location(1093,25);
                    match(input,COLON,FOLLOW_COLON_in_cp_mixin_call_arg6771); if (state.failed) return ;
                    dbg.location(1093,31);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:31: ( ws )?
                    int alt254=2;
                    try { dbg.enterSubRule(254);
                    try { dbg.enterDecision(254, decisionCanBacktrack[254]);

                    int LA254_0 = input.LA(1);

                    if ( ((LA254_0>=WS && LA254_0<=COMMENT)) ) {
                        alt254=1;
                    }
                    } finally {dbg.exitDecision(254);}

                    switch (alt254) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:31: ws
                            {
                            dbg.location(1093,31);
                            pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6773);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(254);}

                    dbg.location(1093,35);
                    pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg6776);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:11: cp_expression
                    {
                    dbg.location(1094,11);
                    pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg6788);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(255);}

            dbg.location(1095,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1095:7: ( ws )?
            int alt256=2;
            try { dbg.enterSubRule(256);
            try { dbg.enterDecision(256, decisionCanBacktrack[256]);

            int LA256_0 = input.LA(1);

            if ( ((LA256_0>=WS && LA256_0<=COMMENT)) ) {
                alt256=1;
            }
            } finally {dbg.exitDecision(256);}

            switch (alt256) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1095:7: ws
                    {
                    dbg.location(1095,7);
                    pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6796);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(256);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1096, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_call_arg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_call_arg"


    // $ANTLR start "cp_args_list"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1099:1: cp_args_list : ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST ) )? ) | ( CP_DOTS | LESS_REST ) );
    public final void cp_args_list() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_args_list");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1099, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1100:5: ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST ) )? ) | ( CP_DOTS | LESS_REST ) )
            int alt262=2;
            try { dbg.enterDecision(262, decisionCanBacktrack[262]);

            int LA262_0 = input.LA(1);

            if ( (LA262_0==NAMESPACE_SYM||(LA262_0>=CHARSET_SYM && LA262_0<=IMPORT_SYM)||LA262_0==MEDIA_SYM||(LA262_0>=AT_IDENT && LA262_0<=MOZ_DOCUMENT_SYM)||LA262_0==WEBKIT_KEYFRAMES_SYM||(LA262_0>=PAGE_SYM && LA262_0<=RIGHTBOTTOM_SYM)||LA262_0==SASS_VAR||(LA262_0>=SASS_CONTENT && LA262_0<=SASS_WHILE)) ) {
                alt262=1;
            }
            else if ( ((LA262_0>=CP_DOTS && LA262_0<=LESS_REST)) ) {
                alt262=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 262, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(262);}

            switch (alt262) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1107:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST ) )? )
                    {
                    dbg.location(1107,5);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1107:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST ) )? )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1107:7: cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST ) )?
                    {
                    dbg.location(1107,7);
                    pushFollow(FOLLOW_cp_arg_in_cp_args_list6848);
                    cp_arg();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1107,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1107:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*
                    try { dbg.enterSubRule(258);

                    loop258:
                    do {
                        int alt258=2;
                        try { dbg.enterDecision(258, decisionCanBacktrack[258]);

                        try {
                            isCyclicDecision = true;
                            alt258 = dfa258.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(258);}

                        switch (alt258) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1107:16: ( COMMA | SEMI ) ( ws )? cp_arg
                    	    {
                    	    dbg.location(1107,16);
                    	    if ( input.LA(1)==SEMI||input.LA(1)==COMMA ) {
                    	        input.consume();
                    	        state.errorRecovery=false;state.failed=false;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return ;}
                    	        MismatchedSetException mse = new MismatchedSetException(null,input);
                    	        dbg.recognitionException(mse);
                    	        throw mse;
                    	    }

                    	    dbg.location(1107,33);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1107:33: ( ws )?
                    	    int alt257=2;
                    	    try { dbg.enterSubRule(257);
                    	    try { dbg.enterDecision(257, decisionCanBacktrack[257]);

                    	    int LA257_0 = input.LA(1);

                    	    if ( ((LA257_0>=WS && LA257_0<=COMMENT)) ) {
                    	        alt257=1;
                    	    }
                    	    } finally {dbg.exitDecision(257);}

                    	    switch (alt257) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1107:33: ws
                    	            {
                    	            dbg.location(1107,33);
                    	            pushFollow(FOLLOW_ws_in_cp_args_list6862);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(257);}

                    	    dbg.location(1107,37);
                    	    pushFollow(FOLLOW_cp_arg_in_cp_args_list6865);
                    	    cp_arg();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop258;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(258);}

                    dbg.location(1107,46);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1107:46: ( ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST ) )?
                    int alt261=2;
                    try { dbg.enterSubRule(261);
                    try { dbg.enterDecision(261, decisionCanBacktrack[261]);

                    int LA261_0 = input.LA(1);

                    if ( (LA261_0==SEMI||LA261_0==COMMA||(LA261_0>=CP_DOTS && LA261_0<=LESS_REST)) ) {
                        alt261=1;
                    }
                    } finally {dbg.exitDecision(261);}

                    switch (alt261) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1107:48: ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST )
                            {
                            dbg.location(1107,48);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1107:48: ( ( COMMA | SEMI ) ( ws )? )?
                            int alt260=2;
                            try { dbg.enterSubRule(260);
                            try { dbg.enterDecision(260, decisionCanBacktrack[260]);

                            int LA260_0 = input.LA(1);

                            if ( (LA260_0==SEMI||LA260_0==COMMA) ) {
                                alt260=1;
                            }
                            } finally {dbg.exitDecision(260);}

                            switch (alt260) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1107:50: ( COMMA | SEMI ) ( ws )?
                                    {
                                    dbg.location(1107,50);
                                    if ( input.LA(1)==SEMI||input.LA(1)==COMMA ) {
                                        input.consume();
                                        state.errorRecovery=false;state.failed=false;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return ;}
                                        MismatchedSetException mse = new MismatchedSetException(null,input);
                                        dbg.recognitionException(mse);
                                        throw mse;
                                    }

                                    dbg.location(1107,65);
                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1107:65: ( ws )?
                                    int alt259=2;
                                    try { dbg.enterSubRule(259);
                                    try { dbg.enterDecision(259, decisionCanBacktrack[259]);

                                    int LA259_0 = input.LA(1);

                                    if ( ((LA259_0>=WS && LA259_0<=COMMENT)) ) {
                                        alt259=1;
                                    }
                                    } finally {dbg.exitDecision(259);}

                                    switch (alt259) {
                                        case 1 :
                                            dbg.enterAlt(1);

                                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1107:65: ws
                                            {
                                            dbg.location(1107,65);
                                            pushFollow(FOLLOW_ws_in_cp_args_list6881);
                                            ws();

                                            state._fsp--;
                                            if (state.failed) return ;

                                            }
                                            break;

                                    }
                                    } finally {dbg.exitSubRule(259);}


                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(260);}

                            dbg.location(1107,72);
                            if ( (input.LA(1)>=CP_DOTS && input.LA(1)<=LESS_REST) ) {
                                input.consume();
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                dbg.recognitionException(mse);
                                throw mse;
                            }


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(261);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1109:5: ( CP_DOTS | LESS_REST )
                    {
                    dbg.location(1109,5);
                    if ( (input.LA(1)>=CP_DOTS && input.LA(1)<=LESS_REST) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1110, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_args_list");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_args_list"


    // $ANTLR start "cp_arg"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1113:1: cp_arg : cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? ;
    public final void cp_arg() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_arg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1113, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1114:5: ( cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:5: cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )?
            {
            dbg.location(1115,5);
            pushFollow(FOLLOW_cp_variable_in_cp_arg6941);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1115,17);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:17: ( ws )?
            int alt263=2;
            try { dbg.enterSubRule(263);
            try { dbg.enterDecision(263, decisionCanBacktrack[263]);

            int LA263_0 = input.LA(1);

            if ( ((LA263_0>=WS && LA263_0<=COMMENT)) ) {
                alt263=1;
            }
            } finally {dbg.exitDecision(263);}

            switch (alt263) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:17: ws
                    {
                    dbg.location(1115,17);
                    pushFollow(FOLLOW_ws_in_cp_arg6943);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(263);}

            dbg.location(1115,21);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:21: ( COLON ( ws )? cp_expression ( ws )? )?
            int alt266=2;
            try { dbg.enterSubRule(266);
            try { dbg.enterDecision(266, decisionCanBacktrack[266]);

            int LA266_0 = input.LA(1);

            if ( (LA266_0==COLON) ) {
                alt266=1;
            }
            } finally {dbg.exitDecision(266);}

            switch (alt266) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:23: COLON ( ws )? cp_expression ( ws )?
                    {
                    dbg.location(1115,23);
                    match(input,COLON,FOLLOW_COLON_in_cp_arg6948); if (state.failed) return ;
                    dbg.location(1115,29);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:29: ( ws )?
                    int alt264=2;
                    try { dbg.enterSubRule(264);
                    try { dbg.enterDecision(264, decisionCanBacktrack[264]);

                    int LA264_0 = input.LA(1);

                    if ( ((LA264_0>=WS && LA264_0<=COMMENT)) ) {
                        alt264=1;
                    }
                    } finally {dbg.exitDecision(264);}

                    switch (alt264) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:29: ws
                            {
                            dbg.location(1115,29);
                            pushFollow(FOLLOW_ws_in_cp_arg6950);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(264);}

                    dbg.location(1115,33);
                    pushFollow(FOLLOW_cp_expression_in_cp_arg6953);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1115,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:47: ( ws )?
                    int alt265=2;
                    try { dbg.enterSubRule(265);
                    try { dbg.enterDecision(265, decisionCanBacktrack[265]);

                    int LA265_0 = input.LA(1);

                    if ( ((LA265_0>=WS && LA265_0<=COMMENT)) ) {
                        alt265=1;
                    }
                    } finally {dbg.exitDecision(265);}

                    switch (alt265) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:47: ws
                            {
                            dbg.location(1115,47);
                            pushFollow(FOLLOW_ws_in_cp_arg6955);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(265);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(266);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1116, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_arg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_arg"


    // $ANTLR start "less_mixin_guarded"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1120:1: less_mixin_guarded : LESS_WHEN ( ws )? less_condition ( ( COMMA | AND ) ( ws )? less_condition )* ;
    public final void less_mixin_guarded() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_mixin_guarded");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1120, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1121:5: ( LESS_WHEN ( ws )? less_condition ( ( COMMA | AND ) ( ws )? less_condition )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1122:5: LESS_WHEN ( ws )? less_condition ( ( COMMA | AND ) ( ws )? less_condition )*
            {
            dbg.location(1122,5);
            match(input,LESS_WHEN,FOLLOW_LESS_WHEN_in_less_mixin_guarded6981); if (state.failed) return ;
            dbg.location(1122,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1122:15: ( ws )?
            int alt267=2;
            try { dbg.enterSubRule(267);
            try { dbg.enterDecision(267, decisionCanBacktrack[267]);

            int LA267_0 = input.LA(1);

            if ( ((LA267_0>=WS && LA267_0<=COMMENT)) ) {
                alt267=1;
            }
            } finally {dbg.exitDecision(267);}

            switch (alt267) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1122:15: ws
                    {
                    dbg.location(1122,15);
                    pushFollow(FOLLOW_ws_in_less_mixin_guarded6983);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(267);}

            dbg.location(1122,19);
            pushFollow(FOLLOW_less_condition_in_less_mixin_guarded6986);
            less_condition();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1122,34);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1122:34: ( ( COMMA | AND ) ( ws )? less_condition )*
            try { dbg.enterSubRule(269);

            loop269:
            do {
                int alt269=2;
                try { dbg.enterDecision(269, decisionCanBacktrack[269]);

                int LA269_0 = input.LA(1);

                if ( (LA269_0==COMMA||LA269_0==AND) ) {
                    alt269=1;
                }


                } finally {dbg.exitDecision(269);}

                switch (alt269) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1122:36: ( COMMA | AND ) ( ws )? less_condition
            	    {
            	    dbg.location(1122,36);
            	    if ( input.LA(1)==COMMA||input.LA(1)==AND ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }

            	    dbg.location(1122,50);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1122:50: ( ws )?
            	    int alt268=2;
            	    try { dbg.enterSubRule(268);
            	    try { dbg.enterDecision(268, decisionCanBacktrack[268]);

            	    int LA268_0 = input.LA(1);

            	    if ( ((LA268_0>=WS && LA268_0<=COMMENT)) ) {
            	        alt268=1;
            	    }
            	    } finally {dbg.exitDecision(268);}

            	    switch (alt268) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1122:50: ws
            	            {
            	            dbg.location(1122,50);
            	            pushFollow(FOLLOW_ws_in_less_mixin_guarded6998);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(268);}

            	    dbg.location(1122,54);
            	    pushFollow(FOLLOW_less_condition_in_less_mixin_guarded7001);
            	    less_condition();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop269;
                }
            } while (true);
            } finally {dbg.exitSubRule(269);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1123, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_mixin_guarded");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_mixin_guarded"


    // $ANTLR start "less_condition"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1127:1: less_condition : ( NOT ( ws )? )? LPAREN ( ws )? ( less_function_in_condition ( ws )? | ( cp_variable ( ( ws )? less_condition_operator ( ws )? cp_math_expression )? ) ) RPAREN ;
    public final void less_condition() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_condition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1127, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1128:5: ( ( NOT ( ws )? )? LPAREN ( ws )? ( less_function_in_condition ( ws )? | ( cp_variable ( ( ws )? less_condition_operator ( ws )? cp_math_expression )? ) ) RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1129:5: ( NOT ( ws )? )? LPAREN ( ws )? ( less_function_in_condition ( ws )? | ( cp_variable ( ( ws )? less_condition_operator ( ws )? cp_math_expression )? ) ) RPAREN
            {
            dbg.location(1129,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1129:5: ( NOT ( ws )? )?
            int alt271=2;
            try { dbg.enterSubRule(271);
            try { dbg.enterDecision(271, decisionCanBacktrack[271]);

            int LA271_0 = input.LA(1);

            if ( (LA271_0==NOT) ) {
                alt271=1;
            }
            } finally {dbg.exitDecision(271);}

            switch (alt271) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1129:6: NOT ( ws )?
                    {
                    dbg.location(1129,6);
                    match(input,NOT,FOLLOW_NOT_in_less_condition7031); if (state.failed) return ;
                    dbg.location(1129,10);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1129:10: ( ws )?
                    int alt270=2;
                    try { dbg.enterSubRule(270);
                    try { dbg.enterDecision(270, decisionCanBacktrack[270]);

                    int LA270_0 = input.LA(1);

                    if ( ((LA270_0>=WS && LA270_0<=COMMENT)) ) {
                        alt270=1;
                    }
                    } finally {dbg.exitDecision(270);}

                    switch (alt270) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1129:10: ws
                            {
                            dbg.location(1129,10);
                            pushFollow(FOLLOW_ws_in_less_condition7033);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(270);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(271);}

            dbg.location(1130,5);
            match(input,LPAREN,FOLLOW_LPAREN_in_less_condition7042); if (state.failed) return ;
            dbg.location(1130,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:12: ( ws )?
            int alt272=2;
            try { dbg.enterSubRule(272);
            try { dbg.enterDecision(272, decisionCanBacktrack[272]);

            int LA272_0 = input.LA(1);

            if ( ((LA272_0>=WS && LA272_0<=COMMENT)) ) {
                alt272=1;
            }
            } finally {dbg.exitDecision(272);}

            switch (alt272) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:12: ws
                    {
                    dbg.location(1130,12);
                    pushFollow(FOLLOW_ws_in_less_condition7044);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(272);}

            dbg.location(1131,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1131:9: ( less_function_in_condition ( ws )? | ( cp_variable ( ( ws )? less_condition_operator ( ws )? cp_math_expression )? ) )
            int alt277=2;
            try { dbg.enterSubRule(277);
            try { dbg.enterDecision(277, decisionCanBacktrack[277]);

            int LA277_0 = input.LA(1);

            if ( (LA277_0==IDENT) ) {
                alt277=1;
            }
            else if ( (LA277_0==NAMESPACE_SYM||(LA277_0>=CHARSET_SYM && LA277_0<=IMPORT_SYM)||LA277_0==MEDIA_SYM||(LA277_0>=AT_IDENT && LA277_0<=MOZ_DOCUMENT_SYM)||LA277_0==WEBKIT_KEYFRAMES_SYM||(LA277_0>=PAGE_SYM && LA277_0<=RIGHTBOTTOM_SYM)||LA277_0==SASS_VAR||(LA277_0>=SASS_CONTENT && LA277_0<=SASS_WHILE)) ) {
                alt277=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 277, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(277);}

            switch (alt277) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:13: less_function_in_condition ( ws )?
                    {
                    dbg.location(1132,13);
                    pushFollow(FOLLOW_less_function_in_condition_in_less_condition7070);
                    less_function_in_condition();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1132,40);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:40: ( ws )?
                    int alt273=2;
                    try { dbg.enterSubRule(273);
                    try { dbg.enterDecision(273, decisionCanBacktrack[273]);

                    int LA273_0 = input.LA(1);

                    if ( ((LA273_0>=WS && LA273_0<=COMMENT)) ) {
                        alt273=1;
                    }
                    } finally {dbg.exitDecision(273);}

                    switch (alt273) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:40: ws
                            {
                            dbg.location(1132,40);
                            pushFollow(FOLLOW_ws_in_less_condition7072);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(273);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:13: ( cp_variable ( ( ws )? less_condition_operator ( ws )? cp_math_expression )? )
                    {
                    dbg.location(1134,13);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:13: ( cp_variable ( ( ws )? less_condition_operator ( ws )? cp_math_expression )? )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:15: cp_variable ( ( ws )? less_condition_operator ( ws )? cp_math_expression )?
                    {
                    dbg.location(1134,15);
                    pushFollow(FOLLOW_cp_variable_in_less_condition7103);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1134,27);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:27: ( ( ws )? less_condition_operator ( ws )? cp_math_expression )?
                    int alt276=2;
                    try { dbg.enterSubRule(276);
                    try { dbg.enterDecision(276, decisionCanBacktrack[276]);

                    int LA276_0 = input.LA(1);

                    if ( (LA276_0==GREATER||LA276_0==OPEQ||(LA276_0>=WS && LA276_0<=COMMENT)||(LA276_0>=LESS && LA276_0<=GREATER_OR_EQ)) ) {
                        alt276=1;
                    }
                    } finally {dbg.exitDecision(276);}

                    switch (alt276) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:28: ( ws )? less_condition_operator ( ws )? cp_math_expression
                            {
                            dbg.location(1134,28);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:28: ( ws )?
                            int alt274=2;
                            try { dbg.enterSubRule(274);
                            try { dbg.enterDecision(274, decisionCanBacktrack[274]);

                            int LA274_0 = input.LA(1);

                            if ( ((LA274_0>=WS && LA274_0<=COMMENT)) ) {
                                alt274=1;
                            }
                            } finally {dbg.exitDecision(274);}

                            switch (alt274) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:28: ws
                                    {
                                    dbg.location(1134,28);
                                    pushFollow(FOLLOW_ws_in_less_condition7106);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(274);}

                            dbg.location(1134,32);
                            pushFollow(FOLLOW_less_condition_operator_in_less_condition7109);
                            less_condition_operator();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(1134,56);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:56: ( ws )?
                            int alt275=2;
                            try { dbg.enterSubRule(275);
                            try { dbg.enterDecision(275, decisionCanBacktrack[275]);

                            int LA275_0 = input.LA(1);

                            if ( ((LA275_0>=WS && LA275_0<=COMMENT)) ) {
                                alt275=1;
                            }
                            } finally {dbg.exitDecision(275);}

                            switch (alt275) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:56: ws
                                    {
                                    dbg.location(1134,56);
                                    pushFollow(FOLLOW_ws_in_less_condition7111);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(275);}

                            dbg.location(1134,60);
                            pushFollow(FOLLOW_cp_math_expression_in_less_condition7114);
                            cp_math_expression();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(276);}


                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(277);}

            dbg.location(1136,5);
            match(input,RPAREN,FOLLOW_RPAREN_in_less_condition7143); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1137, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_condition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_condition"


    // $ANTLR start "less_function_in_condition"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1140:1: less_function_in_condition : less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN ;
    public final void less_function_in_condition() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_function_in_condition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1140, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1141:5: ( less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:5: less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN
            {
            dbg.location(1142,5);
            pushFollow(FOLLOW_less_fn_name_in_less_function_in_condition7169);
            less_fn_name();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1142,18);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:18: ( ws )?
            int alt278=2;
            try { dbg.enterSubRule(278);
            try { dbg.enterDecision(278, decisionCanBacktrack[278]);

            int LA278_0 = input.LA(1);

            if ( ((LA278_0>=WS && LA278_0<=COMMENT)) ) {
                alt278=1;
            }
            } finally {dbg.exitDecision(278);}

            switch (alt278) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:18: ws
                    {
                    dbg.location(1142,18);
                    pushFollow(FOLLOW_ws_in_less_function_in_condition7171);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(278);}

            dbg.location(1142,22);
            match(input,LPAREN,FOLLOW_LPAREN_in_less_function_in_condition7174); if (state.failed) return ;
            dbg.location(1142,29);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:29: ( ws )?
            int alt279=2;
            try { dbg.enterSubRule(279);
            try { dbg.enterDecision(279, decisionCanBacktrack[279]);

            int LA279_0 = input.LA(1);

            if ( ((LA279_0>=WS && LA279_0<=COMMENT)) ) {
                alt279=1;
            }
            } finally {dbg.exitDecision(279);}

            switch (alt279) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:29: ws
                    {
                    dbg.location(1142,29);
                    pushFollow(FOLLOW_ws_in_less_function_in_condition7176);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(279);}

            dbg.location(1142,33);
            pushFollow(FOLLOW_cp_variable_in_less_function_in_condition7179);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1142,45);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:45: ( ws )?
            int alt280=2;
            try { dbg.enterSubRule(280);
            try { dbg.enterDecision(280, decisionCanBacktrack[280]);

            int LA280_0 = input.LA(1);

            if ( ((LA280_0>=WS && LA280_0<=COMMENT)) ) {
                alt280=1;
            }
            } finally {dbg.exitDecision(280);}

            switch (alt280) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:45: ws
                    {
                    dbg.location(1142,45);
                    pushFollow(FOLLOW_ws_in_less_function_in_condition7181);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(280);}

            dbg.location(1142,49);
            match(input,RPAREN,FOLLOW_RPAREN_in_less_function_in_condition7184); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1143, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_function_in_condition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_function_in_condition"


    // $ANTLR start "less_fn_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:1: less_fn_name : IDENT ;
    public final void less_fn_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_fn_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1146, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1147:5: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1148:5: IDENT
            {
            dbg.location(1148,5);
            match(input,IDENT,FOLLOW_IDENT_in_less_fn_name7206); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1149, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_fn_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_fn_name"


    // $ANTLR start "less_condition_operator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1151:1: less_condition_operator : ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ );
    public final void less_condition_operator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_condition_operator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1151, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1152:5: ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(1152,5);
            if ( input.LA(1)==GREATER||input.LA(1)==OPEQ||(input.LA(1)>=LESS && input.LA(1)<=GREATER_OR_EQ) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1154, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_condition_operator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_condition_operator"


    // $ANTLR start "less_selector_interpolation"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1156:1: less_selector_interpolation : AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE ;
    public final void less_selector_interpolation() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_selector_interpolation");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1156, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1157:5: ( AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1158:5: AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE
            {
            dbg.location(1158,5);
            match(input,AT_SIGN,FOLLOW_AT_SIGN_in_less_selector_interpolation7268); if (state.failed) return ;
            dbg.location(1158,13);
            match(input,LBRACE,FOLLOW_LBRACE_in_less_selector_interpolation7270); if (state.failed) return ;
            dbg.location(1158,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1158:20: ( ws )?
            int alt281=2;
            try { dbg.enterSubRule(281);
            try { dbg.enterDecision(281, decisionCanBacktrack[281]);

            int LA281_0 = input.LA(1);

            if ( ((LA281_0>=WS && LA281_0<=COMMENT)) ) {
                alt281=1;
            }
            } finally {dbg.exitDecision(281);}

            switch (alt281) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1158:20: ws
                    {
                    dbg.location(1158,20);
                    pushFollow(FOLLOW_ws_in_less_selector_interpolation7272);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(281);}

            dbg.location(1158,24);
            match(input,IDENT,FOLLOW_IDENT_in_less_selector_interpolation7275); if (state.failed) return ;
            dbg.location(1158,30);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1158:30: ( ws )?
            int alt282=2;
            try { dbg.enterSubRule(282);
            try { dbg.enterDecision(282, decisionCanBacktrack[282]);

            int LA282_0 = input.LA(1);

            if ( ((LA282_0>=WS && LA282_0<=COMMENT)) ) {
                alt282=1;
            }
            } finally {dbg.exitDecision(282);}

            switch (alt282) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1158:30: ws
                    {
                    dbg.location(1158,30);
                    pushFollow(FOLLOW_ws_in_less_selector_interpolation7277);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(282);}

            dbg.location(1158,34);
            match(input,RBRACE,FOLLOW_RBRACE_in_less_selector_interpolation7280); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1159, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_selector_interpolation");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_selector_interpolation"


    // $ANTLR start "sass_selector_interpolation_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1166:1: sass_selector_interpolation_expression : ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )* ;
    public final void sass_selector_interpolation_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_selector_interpolation_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1166, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1167:5: ( ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )*
            {
            dbg.location(1168,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) )
            int alt283=2;
            try { dbg.enterSubRule(283);
            try { dbg.enterDecision(283, decisionCanBacktrack[283]);

            int LA283_0 = input.LA(1);

            if ( (LA283_0==HASH_SYMBOL) ) {
                int LA283_1 = input.LA(2);

                if ( (synpred35_Css3()) ) {
                    alt283=1;
                }
                else if ( (true) ) {
                    alt283=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 283, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA283_0==IDENT||LA283_0==COMMA||LA283_0==COLON||LA283_0==MINUS||LA283_0==GREATER||(LA283_0>=HASH && LA283_0<=LBRACKET)||LA283_0==STAR||LA283_0==LESS_AND||LA283_0==RBRACKET) ) {
                alt283=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 283, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(283);}

            switch (alt283) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1169:13: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
                    {
                    dbg.location(1169,50);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7329);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:13: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET )
                    {
                    dbg.location(1171,13);
                    if ( input.LA(1)==IDENT||input.LA(1)==COMMA||input.LA(1)==COLON||input.LA(1)==MINUS||input.LA(1)==GREATER||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=LBRACKET)||input.LA(1)==STAR||input.LA(1)==LESS_AND||input.LA(1)==RBRACKET ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(283);}

            dbg.location(1173,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1173:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )*
            try { dbg.enterSubRule(286);

            loop286:
            do {
                int alt286=2;
                try { dbg.enterDecision(286, decisionCanBacktrack[286]);

                try {
                    isCyclicDecision = true;
                    alt286 = dfa286.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(286);}

                switch (alt286) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1174:13: ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) )
            	    {
            	    dbg.location(1174,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1174:13: ( ws )?
            	    int alt284=2;
            	    try { dbg.enterSubRule(284);
            	    try { dbg.enterDecision(284, decisionCanBacktrack[284]);

            	    int LA284_0 = input.LA(1);

            	    if ( ((LA284_0>=WS && LA284_0<=COMMENT)) ) {
            	        alt284=1;
            	    }
            	    } finally {dbg.exitDecision(284);}

            	    switch (alt284) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1174:13: ws
            	            {
            	            dbg.location(1174,13);
            	            pushFollow(FOLLOW_ws_in_sass_selector_interpolation_expression7439);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(284);}

            	    dbg.location(1175,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1175:13: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) )
            	    int alt285=2;
            	    try { dbg.enterSubRule(285);
            	    try { dbg.enterDecision(285, decisionCanBacktrack[285]);

            	    int LA285_0 = input.LA(1);

            	    if ( (LA285_0==HASH_SYMBOL) ) {
            	        int LA285_1 = input.LA(2);

            	        if ( (synpred36_Css3()) ) {
            	            alt285=1;
            	        }
            	        else if ( (true) ) {
            	            alt285=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return ;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 285, 1, input);

            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	    }
            	    else if ( (LA285_0==IDENT||LA285_0==COMMA||LA285_0==COLON||LA285_0==MINUS||LA285_0==GREATER||(LA285_0>=HASH && LA285_0<=LBRACKET)||LA285_0==STAR||LA285_0==LESS_AND||LA285_0==RBRACKET) ) {
            	        alt285=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 285, 0, input);

            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(285);}

            	    switch (alt285) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1176:17: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
            	            {
            	            dbg.location(1176,54);
            	            pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7476);
            	            sass_interpolation_expression_var();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1178:17: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET )
            	            {
            	            dbg.location(1178,17);
            	            if ( input.LA(1)==IDENT||input.LA(1)==COMMA||input.LA(1)==COLON||input.LA(1)==MINUS||input.LA(1)==GREATER||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=LBRACKET)||input.LA(1)==STAR||input.LA(1)==LESS_AND||input.LA(1)==RBRACKET ) {
            	                input.consume();
            	                state.errorRecovery=false;state.failed=false;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return ;}
            	                MismatchedSetException mse = new MismatchedSetException(null,input);
            	                dbg.recognitionException(mse);
            	                throw mse;
            	            }


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(285);}


            	    }
            	    break;

            	default :
            	    break loop286;
                }
            } while (true);
            } finally {dbg.exitSubRule(286);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1182, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_selector_interpolation_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_selector_interpolation_expression"


    // $ANTLR start "sass_declaration_interpolation_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1184:1: sass_declaration_interpolation_expression : ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )* ;
    public final void sass_declaration_interpolation_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_declaration_interpolation_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1184, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1185:5: ( ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1186:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*
            {
            dbg.location(1186,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1186:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
            int alt287=2;
            try { dbg.enterSubRule(287);
            try { dbg.enterDecision(287, decisionCanBacktrack[287]);

            int LA287_0 = input.LA(1);

            if ( (LA287_0==HASH_SYMBOL) ) {
                int LA287_1 = input.LA(2);

                if ( (LA287_1==LBRACE) && (synpred37_Css3())) {
                    alt287=1;
                }
                else if ( (LA287_1==IDENT||LA287_1==COLON||LA287_1==MINUS||(LA287_1>=HASH_SYMBOL && LA287_1<=DOT)||(LA287_1>=WS && LA287_1<=COMMENT)) ) {
                    alt287=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA287_0==IDENT||LA287_0==MINUS||(LA287_0>=HASH && LA287_0<=DOT)) ) {
                alt287=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 287, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(287);}

            switch (alt287) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1187:13: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
                    {
                    dbg.location(1187,50);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7632);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1189:13: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH )
                    {
                    dbg.location(1189,13);
                    if ( input.LA(1)==IDENT||input.LA(1)==MINUS||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=DOT) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(287);}

            dbg.location(1191,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1191:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*
            try { dbg.enterSubRule(290);

            loop290:
            do {
                int alt290=2;
                try { dbg.enterDecision(290, decisionCanBacktrack[290]);

                try {
                    isCyclicDecision = true;
                    alt290 = dfa290.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(290);}

                switch (alt290) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:13: ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
            	    {
            	    dbg.location(1192,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:13: ( ws )?
            	    int alt288=2;
            	    try { dbg.enterSubRule(288);
            	    try { dbg.enterDecision(288, decisionCanBacktrack[288]);

            	    int LA288_0 = input.LA(1);

            	    if ( ((LA288_0>=WS && LA288_0<=COMMENT)) ) {
            	        alt288=1;
            	    }
            	    } finally {dbg.exitDecision(288);}

            	    switch (alt288) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:13: ws
            	            {
            	            dbg.location(1192,13);
            	            pushFollow(FOLLOW_ws_in_sass_declaration_interpolation_expression7713);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(288);}

            	    dbg.location(1193,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1193:13: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
            	    int alt289=2;
            	    try { dbg.enterSubRule(289);
            	    try { dbg.enterDecision(289, decisionCanBacktrack[289]);

            	    int LA289_0 = input.LA(1);

            	    if ( (LA289_0==HASH_SYMBOL) ) {
            	        int LA289_1 = input.LA(2);

            	        if ( (LA289_1==LBRACE) && (synpred38_Css3())) {
            	            alt289=1;
            	        }
            	        else if ( (LA289_1==IDENT||LA289_1==COLON||LA289_1==MINUS||(LA289_1>=HASH_SYMBOL && LA289_1<=DOT)||(LA289_1>=WS && LA289_1<=COMMENT)) ) {
            	            alt289=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return ;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 289, 1, input);

            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	    }
            	    else if ( (LA289_0==IDENT||LA289_0==MINUS||(LA289_0>=HASH && LA289_0<=DOT)) ) {
            	        alt289=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 289, 0, input);

            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(289);}

            	    switch (alt289) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1194:17: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
            	            {
            	            dbg.location(1194,54);
            	            pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7750);
            	            sass_interpolation_expression_var();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1196:17: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH )
            	            {
            	            dbg.location(1196,17);
            	            if ( input.LA(1)==IDENT||input.LA(1)==MINUS||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=DOT) ) {
            	                input.consume();
            	                state.errorRecovery=false;state.failed=false;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return ;}
            	                MismatchedSetException mse = new MismatchedSetException(null,input);
            	                dbg.recognitionException(mse);
            	                throw mse;
            	            }


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(289);}


            	    }
            	    break;

            	default :
            	    break loop290;
                }
            } while (true);
            } finally {dbg.exitSubRule(290);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1200, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_declaration_interpolation_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_declaration_interpolation_expression"


    // $ANTLR start "sass_interpolation_expression_var"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1202:1: sass_interpolation_expression_var : HASH_SYMBOL LBRACE cp_expression RBRACE ;
    public final void sass_interpolation_expression_var() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_interpolation_expression_var");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1202, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1203:5: ( HASH_SYMBOL LBRACE cp_expression RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:9: HASH_SYMBOL LBRACE cp_expression RBRACE
            {
            dbg.location(1204,9);
            match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var7859); if (state.failed) return ;
            dbg.location(1204,21);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_interpolation_expression_var7861); if (state.failed) return ;
            dbg.location(1204,28);
            pushFollow(FOLLOW_cp_expression_in_sass_interpolation_expression_var7863);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1204,42);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_interpolation_expression_var7865); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1205, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_interpolation_expression_var");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_interpolation_expression_var"


    // $ANTLR start "sass_nested_properties"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1225:1: sass_nested_properties : property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void sass_nested_properties() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_nested_properties");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1225, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:5: ( property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:5: property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(1227,5);
            pushFollow(FOLLOW_property_in_sass_nested_properties7909);
            property();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1227,14);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:14: ( ws )?
            int alt291=2;
            try { dbg.enterSubRule(291);
            try { dbg.enterDecision(291, decisionCanBacktrack[291]);

            int LA291_0 = input.LA(1);

            if ( ((LA291_0>=WS && LA291_0<=COMMENT)) ) {
                alt291=1;
            }
            } finally {dbg.exitDecision(291);}

            switch (alt291) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:14: ws
                    {
                    dbg.location(1227,14);
                    pushFollow(FOLLOW_ws_in_sass_nested_properties7911);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(291);}

            dbg.location(1227,18);
            match(input,COLON,FOLLOW_COLON_in_sass_nested_properties7914); if (state.failed) return ;
            dbg.location(1227,24);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:24: ( ws )?
            int alt292=2;
            try { dbg.enterSubRule(292);
            try { dbg.enterDecision(292, decisionCanBacktrack[292]);

            int LA292_0 = input.LA(1);

            if ( ((LA292_0>=WS && LA292_0<=COMMENT)) ) {
                alt292=1;
            }
            } finally {dbg.exitDecision(292);}

            switch (alt292) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:24: ws
                    {
                    dbg.location(1227,24);
                    pushFollow(FOLLOW_ws_in_sass_nested_properties7916);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(292);}

            dbg.location(1227,28);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:28: ( propertyValue ( ws )? )?
            int alt294=2;
            try { dbg.enterSubRule(294);
            try { dbg.enterDecision(294, decisionCanBacktrack[294]);

            int LA294_0 = input.LA(1);

            if ( (LA294_0==NAMESPACE_SYM||(LA294_0>=IDENT && LA294_0<=IMPORT_SYM)||LA294_0==MEDIA_SYM||LA294_0==GEN||(LA294_0>=AT_IDENT && LA294_0<=MOZ_DOCUMENT_SYM)||(LA294_0>=WEBKIT_KEYFRAMES_SYM && LA294_0<=RIGHTBOTTOM_SYM)||(LA294_0>=MINUS && LA294_0<=PLUS)||(LA294_0>=TILDE && LA294_0<=HASH)||LA294_0==SASS_VAR||(LA294_0>=NUMBER && LA294_0<=PERCENTAGE_SYMBOL)||(LA294_0>=SASS_CONTENT && LA294_0<=SASS_WHILE)) ) {
                alt294=1;
            }
            } finally {dbg.exitDecision(294);}

            switch (alt294) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:29: propertyValue ( ws )?
                    {
                    dbg.location(1227,29);
                    pushFollow(FOLLOW_propertyValue_in_sass_nested_properties7920);
                    propertyValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1227,43);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:43: ( ws )?
                    int alt293=2;
                    try { dbg.enterSubRule(293);
                    try { dbg.enterDecision(293, decisionCanBacktrack[293]);

                    int LA293_0 = input.LA(1);

                    if ( ((LA293_0>=WS && LA293_0<=COMMENT)) ) {
                        alt293=1;
                    }
                    } finally {dbg.exitDecision(293);}

                    switch (alt293) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:43: ws
                            {
                            dbg.location(1227,43);
                            pushFollow(FOLLOW_ws_in_sass_nested_properties7922);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(293);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(294);}

            dbg.location(1227,49);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_nested_properties7927); if (state.failed) return ;
            dbg.location(1227,56);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:56: ( ws )?
            int alt295=2;
            try { dbg.enterSubRule(295);
            try { dbg.enterDecision(295, decisionCanBacktrack[295]);

            int LA295_0 = input.LA(1);

            if ( ((LA295_0>=WS && LA295_0<=COMMENT)) ) {
                alt295=1;
            }
            } finally {dbg.exitDecision(295);}

            switch (alt295) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:56: ws
                    {
                    dbg.location(1227,56);
                    pushFollow(FOLLOW_ws_in_sass_nested_properties7929);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(295);}

            dbg.location(1227,60);
            pushFollow(FOLLOW_syncToFollow_in_sass_nested_properties7932);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1227,73);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:73: ( declarations )?
            int alt296=2;
            try { dbg.enterSubRule(296);
            try { dbg.enterDecision(296, decisionCanBacktrack[296]);

            int LA296_0 = input.LA(1);

            if ( ((LA296_0>=NAMESPACE_SYM && LA296_0<=IDENT)||(LA296_0>=CHARSET_SYM && LA296_0<=MEDIA_SYM)||LA296_0==GEN||(LA296_0>=COLON && LA296_0<=MOZ_DOCUMENT_SYM)||LA296_0==WEBKIT_KEYFRAMES_SYM||(LA296_0>=PAGE_SYM && LA296_0<=RIGHTBOTTOM_SYM)||(LA296_0>=MINUS && LA296_0<=PIPE)||LA296_0==LESS_AND||(LA296_0>=RBRACKET && LA296_0<=SASS_VAR)||(LA296_0>=SASS_CONTENT && LA296_0<=SASS_WHILE)||LA296_0==AT_SIGN) ) {
                alt296=1;
            }
            } finally {dbg.exitDecision(296);}

            switch (alt296) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:73: declarations
                    {
                    dbg.location(1227,73);
                    pushFollow(FOLLOW_declarations_in_sass_nested_properties7934);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(296);}

            dbg.location(1227,87);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_nested_properties7937); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1228, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_nested_properties");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_nested_properties"


    // $ANTLR start "sass_extend"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:1: sass_extend : SASS_EXTEND ws simpleSelectorSequence ( ( ws )? SASS_OPTIONAL )? ;
    public final void sass_extend() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_extend");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1230, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1231:5: ( SASS_EXTEND ws simpleSelectorSequence ( ( ws )? SASS_OPTIONAL )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:5: SASS_EXTEND ws simpleSelectorSequence ( ( ws )? SASS_OPTIONAL )?
            {
            dbg.location(1232,5);
            match(input,SASS_EXTEND,FOLLOW_SASS_EXTEND_in_sass_extend7958); if (state.failed) return ;
            dbg.location(1232,17);
            pushFollow(FOLLOW_ws_in_sass_extend7960);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1232,20);
            pushFollow(FOLLOW_simpleSelectorSequence_in_sass_extend7962);
            simpleSelectorSequence();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1232,43);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:43: ( ( ws )? SASS_OPTIONAL )?
            int alt298=2;
            try { dbg.enterSubRule(298);
            try { dbg.enterDecision(298, decisionCanBacktrack[298]);

            try {
                isCyclicDecision = true;
                alt298 = dfa298.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(298);}

            switch (alt298) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:44: ( ws )? SASS_OPTIONAL
                    {
                    dbg.location(1232,44);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:44: ( ws )?
                    int alt297=2;
                    try { dbg.enterSubRule(297);
                    try { dbg.enterDecision(297, decisionCanBacktrack[297]);

                    int LA297_0 = input.LA(1);

                    if ( ((LA297_0>=WS && LA297_0<=COMMENT)) ) {
                        alt297=1;
                    }
                    } finally {dbg.exitDecision(297);}

                    switch (alt297) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:44: ws
                            {
                            dbg.location(1232,44);
                            pushFollow(FOLLOW_ws_in_sass_extend7965);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(297);}

                    dbg.location(1232,48);
                    match(input,SASS_OPTIONAL,FOLLOW_SASS_OPTIONAL_in_sass_extend7968); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(298);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1233, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_extend");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_extend"


    // $ANTLR start "sass_extend_only_selector"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:1: sass_extend_only_selector : SASS_EXTEND_ONLY_SELECTOR ;
    public final void sass_extend_only_selector() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_extend_only_selector");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1235, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1236:5: ( SASS_EXTEND_ONLY_SELECTOR )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1237:5: SASS_EXTEND_ONLY_SELECTOR
            {
            dbg.location(1237,5);
            match(input,SASS_EXTEND_ONLY_SELECTOR,FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector7995); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1238, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_extend_only_selector");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_extend_only_selector"


    // $ANTLR start "sass_debug"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:1: sass_debug : ( SASS_DEBUG | SASS_WARN ) ws cp_expression ;
    public final void sass_debug() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_debug");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1240, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1241:5: ( ( SASS_DEBUG | SASS_WARN ) ws cp_expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:5: ( SASS_DEBUG | SASS_WARN ) ws cp_expression
            {
            dbg.location(1242,5);
            if ( (input.LA(1)>=SASS_DEBUG && input.LA(1)<=SASS_WARN) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(1242,32);
            pushFollow(FOLLOW_ws_in_sass_debug8026);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1242,35);
            pushFollow(FOLLOW_cp_expression_in_sass_debug8028);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1243, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_debug");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_debug"


    // $ANTLR start "sass_control"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1245:1: sass_control : ( sass_if | sass_for | sass_each | sass_while );
    public final void sass_control() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_control");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1245, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1246:5: ( sass_if | sass_for | sass_each | sass_while )
            int alt299=4;
            try { dbg.enterDecision(299, decisionCanBacktrack[299]);

            switch ( input.LA(1) ) {
            case SASS_IF:
                {
                alt299=1;
                }
                break;
            case SASS_FOR:
                {
                alt299=2;
                }
                break;
            case SASS_EACH:
                {
                alt299=3;
                }
                break;
            case SASS_WHILE:
                {
                alt299=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 299, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(299);}

            switch (alt299) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:5: sass_if
                    {
                    dbg.location(1247,5);
                    pushFollow(FOLLOW_sass_if_in_sass_control8053);
                    sass_if();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:15: sass_for
                    {
                    dbg.location(1247,15);
                    pushFollow(FOLLOW_sass_for_in_sass_control8057);
                    sass_for();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:26: sass_each
                    {
                    dbg.location(1247,26);
                    pushFollow(FOLLOW_sass_each_in_sass_control8061);
                    sass_each();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:38: sass_while
                    {
                    dbg.location(1247,38);
                    pushFollow(FOLLOW_sass_while_in_sass_control8065);
                    sass_while();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1248, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_control");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_control"


    // $ANTLR start "sass_if"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1250:1: sass_if : SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? ;
    public final void sass_if() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_if");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1250, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1251:5: ( SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:5: SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
            {
            dbg.location(1252,5);
            match(input,SASS_IF,FOLLOW_SASS_IF_in_sass_if8086); if (state.failed) return ;
            dbg.location(1252,13);
            pushFollow(FOLLOW_ws_in_sass_if8088);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1252,16);
            pushFollow(FOLLOW_sass_control_expression_in_sass_if8090);
            sass_control_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1252,40);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:40: ( ws )?
            int alt300=2;
            try { dbg.enterSubRule(300);
            try { dbg.enterDecision(300, decisionCanBacktrack[300]);

            int LA300_0 = input.LA(1);

            if ( ((LA300_0>=WS && LA300_0<=COMMENT)) ) {
                alt300=1;
            }
            } finally {dbg.exitDecision(300);}

            switch (alt300) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:40: ws
                    {
                    dbg.location(1252,40);
                    pushFollow(FOLLOW_ws_in_sass_if8092);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(300);}

            dbg.location(1252,44);
            pushFollow(FOLLOW_sass_control_block_in_sass_if8095);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1252,63);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:63: ( ( ws )? sass_else )?
            int alt302=2;
            try { dbg.enterSubRule(302);
            try { dbg.enterDecision(302, decisionCanBacktrack[302]);

            try {
                isCyclicDecision = true;
                alt302 = dfa302.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(302);}

            switch (alt302) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:64: ( ws )? sass_else
                    {
                    dbg.location(1252,64);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:64: ( ws )?
                    int alt301=2;
                    try { dbg.enterSubRule(301);
                    try { dbg.enterDecision(301, decisionCanBacktrack[301]);

                    int LA301_0 = input.LA(1);

                    if ( ((LA301_0>=WS && LA301_0<=COMMENT)) ) {
                        alt301=1;
                    }
                    } finally {dbg.exitDecision(301);}

                    switch (alt301) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:64: ws
                            {
                            dbg.location(1252,64);
                            pushFollow(FOLLOW_ws_in_sass_if8098);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(301);}

                    dbg.location(1252,68);
                    pushFollow(FOLLOW_sass_else_in_sass_if8101);
                    sass_else();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(302);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1253, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_if");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_if"


    // $ANTLR start "sass_else"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1255:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );
    public final void sass_else() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_else");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1255, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1256:5: ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
            int alt309=2;
            try { dbg.enterDecision(309, decisionCanBacktrack[309]);

            try {
                isCyclicDecision = true;
                alt309 = dfa309.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(309);}

            switch (alt309) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1257:5: SASS_ELSE ( ws )? sass_control_block
                    {
                    dbg.location(1257,5);
                    match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else8128); if (state.failed) return ;
                    dbg.location(1257,15);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1257:15: ( ws )?
                    int alt303=2;
                    try { dbg.enterSubRule(303);
                    try { dbg.enterDecision(303, decisionCanBacktrack[303]);

                    int LA303_0 = input.LA(1);

                    if ( ((LA303_0>=WS && LA303_0<=COMMENT)) ) {
                        alt303=1;
                    }
                    } finally {dbg.exitDecision(303);}

                    switch (alt303) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1257:15: ws
                            {
                            dbg.location(1257,15);
                            pushFollow(FOLLOW_ws_in_sass_else8130);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(303);}

                    dbg.location(1257,19);
                    pushFollow(FOLLOW_sass_control_block_in_sass_else8133);
                    sass_control_block();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:5: SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
                    {
                    dbg.location(1259,5);
                    match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else8146); if (state.failed) return ;
                    dbg.location(1259,15);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:15: ( ws )?
                    int alt304=2;
                    try { dbg.enterSubRule(304);
                    try { dbg.enterDecision(304, decisionCanBacktrack[304]);

                    int LA304_0 = input.LA(1);

                    if ( ((LA304_0>=WS && LA304_0<=COMMENT)) ) {
                        alt304=1;
                    }
                    } finally {dbg.exitDecision(304);}

                    switch (alt304) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:15: ws
                            {
                            dbg.location(1259,15);
                            pushFollow(FOLLOW_ws_in_sass_else8148);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(304);}

                    dbg.location(1259,19);
                    if ( !(evalPredicate(tokenNameEquals("if"),"tokenNameEquals(\"if\")")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "sass_else", "tokenNameEquals(\"if\")");
                    }
                    dbg.location(1259,44);
                    match(input,IDENT,FOLLOW_IDENT_in_sass_else8153); if (state.failed) return ;
                    dbg.location(1259,59);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:59: ( ws )?
                    int alt305=2;
                    try { dbg.enterSubRule(305);
                    try { dbg.enterDecision(305, decisionCanBacktrack[305]);

                    int LA305_0 = input.LA(1);

                    if ( ((LA305_0>=WS && LA305_0<=COMMENT)) ) {
                        alt305=1;
                    }
                    } finally {dbg.exitDecision(305);}

                    switch (alt305) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:59: ws
                            {
                            dbg.location(1259,59);
                            pushFollow(FOLLOW_ws_in_sass_else8157);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(305);}

                    dbg.location(1259,63);
                    pushFollow(FOLLOW_sass_control_expression_in_sass_else8160);
                    sass_control_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1259,87);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:87: ( ws )?
                    int alt306=2;
                    try { dbg.enterSubRule(306);
                    try { dbg.enterDecision(306, decisionCanBacktrack[306]);

                    int LA306_0 = input.LA(1);

                    if ( ((LA306_0>=WS && LA306_0<=COMMENT)) ) {
                        alt306=1;
                    }
                    } finally {dbg.exitDecision(306);}

                    switch (alt306) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:87: ws
                            {
                            dbg.location(1259,87);
                            pushFollow(FOLLOW_ws_in_sass_else8162);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(306);}

                    dbg.location(1259,91);
                    pushFollow(FOLLOW_sass_control_block_in_sass_else8165);
                    sass_control_block();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1259,110);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:110: ( ( ws )? sass_else )?
                    int alt308=2;
                    try { dbg.enterSubRule(308);
                    try { dbg.enterDecision(308, decisionCanBacktrack[308]);

                    try {
                        isCyclicDecision = true;
                        alt308 = dfa308.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(308);}

                    switch (alt308) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:111: ( ws )? sass_else
                            {
                            dbg.location(1259,111);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:111: ( ws )?
                            int alt307=2;
                            try { dbg.enterSubRule(307);
                            try { dbg.enterDecision(307, decisionCanBacktrack[307]);

                            int LA307_0 = input.LA(1);

                            if ( ((LA307_0>=WS && LA307_0<=COMMENT)) ) {
                                alt307=1;
                            }
                            } finally {dbg.exitDecision(307);}

                            switch (alt307) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:111: ws
                                    {
                                    dbg.location(1259,111);
                                    pushFollow(FOLLOW_ws_in_sass_else8168);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(307);}

                            dbg.location(1259,115);
                            pushFollow(FOLLOW_sass_else_in_sass_else8171);
                            sass_else();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(308);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1260, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_else");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_else"


    // $ANTLR start "sass_control_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1262:1: sass_control_expression : cp_expression ;
    public final void sass_control_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_control_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1262, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:5: ( cp_expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:5: cp_expression
            {
            dbg.location(1264,5);
            pushFollow(FOLLOW_cp_expression_in_sass_control_expression8194);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1265, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_control_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_control_expression"


    // $ANTLR start "sass_for"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1267:1: sass_for : SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block ;
    public final void sass_for() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_for");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1267, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1268:5: ( SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1269:5: SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block
            {
            dbg.location(1269,5);
            match(input,SASS_FOR,FOLLOW_SASS_FOR_in_sass_for8219); if (state.failed) return ;
            dbg.location(1269,14);
            pushFollow(FOLLOW_ws_in_sass_for8221);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1269,17);
            pushFollow(FOLLOW_cp_variable_in_sass_for8223);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1269,29);
            pushFollow(FOLLOW_ws_in_sass_for8225);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1269,32);
            if ( !(evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "sass_for", "tokenNameEquals(\"from\")");
            }
            dbg.location(1269,59);
            match(input,IDENT,FOLLOW_IDENT_in_sass_for8229); if (state.failed) return ;
            dbg.location(1269,74);
            pushFollow(FOLLOW_ws_in_sass_for8233);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1269,77);
            pushFollow(FOLLOW_cp_math_expression_in_sass_for8235);
            cp_math_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1269,96);
            pushFollow(FOLLOW_ws_in_sass_for8237);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1269,99);
            if ( !(evalPredicate(tokenNameEquals("to")|tokenNameEquals("through"),"tokenNameEquals(\"to\")|tokenNameEquals(\"through\")")) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "sass_for", "tokenNameEquals(\"to\")|tokenNameEquals(\"through\")");
            }
            dbg.location(1269,151);
            match(input,IDENT,FOLLOW_IDENT_in_sass_for8241); if (state.failed) return ;
            dbg.location(1269,173);
            pushFollow(FOLLOW_ws_in_sass_for8245);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1269,176);
            pushFollow(FOLLOW_cp_math_expression_in_sass_for8247);
            cp_math_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1269,195);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1269:195: ( ws )?
            int alt310=2;
            try { dbg.enterSubRule(310);
            try { dbg.enterDecision(310, decisionCanBacktrack[310]);

            int LA310_0 = input.LA(1);

            if ( ((LA310_0>=WS && LA310_0<=COMMENT)) ) {
                alt310=1;
            }
            } finally {dbg.exitDecision(310);}

            switch (alt310) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1269:195: ws
                    {
                    dbg.location(1269,195);
                    pushFollow(FOLLOW_ws_in_sass_for8249);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(310);}

            dbg.location(1269,199);
            pushFollow(FOLLOW_sass_control_block_in_sass_for8252);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1270, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_for");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_for"


    // $ANTLR start "sass_each"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1272:1: sass_each : SASS_EACH ws cp_variable ws {...}? IDENT ws cp_expression_list ( ws )? sass_control_block ;
    public final void sass_each() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_each");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1272, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1273:5: ( SASS_EACH ws cp_variable ws {...}? IDENT ws cp_expression_list ( ws )? sass_control_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1274:5: SASS_EACH ws cp_variable ws {...}? IDENT ws cp_expression_list ( ws )? sass_control_block
            {
            dbg.location(1274,5);
            match(input,SASS_EACH,FOLLOW_SASS_EACH_in_sass_each8273); if (state.failed) return ;
            dbg.location(1274,15);
            pushFollow(FOLLOW_ws_in_sass_each8275);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1274,18);
            pushFollow(FOLLOW_cp_variable_in_sass_each8277);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1274,30);
            pushFollow(FOLLOW_ws_in_sass_each8279);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1274,33);
            if ( !(evalPredicate(tokenNameEquals("in"),"tokenNameEquals(\"in\")")) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "sass_each", "tokenNameEquals(\"in\")");
            }
            dbg.location(1274,58);
            match(input,IDENT,FOLLOW_IDENT_in_sass_each8283); if (state.failed) return ;
            dbg.location(1274,71);
            pushFollow(FOLLOW_ws_in_sass_each8287);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1274,74);
            pushFollow(FOLLOW_cp_expression_list_in_sass_each8289);
            cp_expression_list();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1274,93);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1274:93: ( ws )?
            int alt311=2;
            try { dbg.enterSubRule(311);
            try { dbg.enterDecision(311, decisionCanBacktrack[311]);

            int LA311_0 = input.LA(1);

            if ( ((LA311_0>=WS && LA311_0<=COMMENT)) ) {
                alt311=1;
            }
            } finally {dbg.exitDecision(311);}

            switch (alt311) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1274:93: ws
                    {
                    dbg.location(1274,93);
                    pushFollow(FOLLOW_ws_in_sass_each8291);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(311);}

            dbg.location(1274,97);
            pushFollow(FOLLOW_sass_control_block_in_sass_each8294);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1275, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_each");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_each"


    // $ANTLR start "sass_while"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1277:1: sass_while : SASS_WHILE ws sass_control_expression ( ws )? sass_control_block ;
    public final void sass_while() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_while");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1277, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1278:5: ( SASS_WHILE ws sass_control_expression ( ws )? sass_control_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1279:5: SASS_WHILE ws sass_control_expression ( ws )? sass_control_block
            {
            dbg.location(1279,5);
            match(input,SASS_WHILE,FOLLOW_SASS_WHILE_in_sass_while8319); if (state.failed) return ;
            dbg.location(1279,16);
            pushFollow(FOLLOW_ws_in_sass_while8321);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1279,19);
            pushFollow(FOLLOW_sass_control_expression_in_sass_while8323);
            sass_control_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1279,43);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1279:43: ( ws )?
            int alt312=2;
            try { dbg.enterSubRule(312);
            try { dbg.enterDecision(312, decisionCanBacktrack[312]);

            int LA312_0 = input.LA(1);

            if ( ((LA312_0>=WS && LA312_0<=COMMENT)) ) {
                alt312=1;
            }
            } finally {dbg.exitDecision(312);}

            switch (alt312) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1279:43: ws
                    {
                    dbg.location(1279,43);
                    pushFollow(FOLLOW_ws_in_sass_while8325);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(312);}

            dbg.location(1279,47);
            pushFollow(FOLLOW_sass_control_block_in_sass_while8328);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1280, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_while");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_while"


    // $ANTLR start "sass_control_block"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1282:1: sass_control_block : LBRACE ( ws )? ( declarations )? RBRACE ;
    public final void sass_control_block() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_control_block");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1282, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1283:5: ( LBRACE ( ws )? ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1284:5: LBRACE ( ws )? ( declarations )? RBRACE
            {
            dbg.location(1284,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_control_block8349); if (state.failed) return ;
            dbg.location(1284,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1284:12: ( ws )?
            int alt313=2;
            try { dbg.enterSubRule(313);
            try { dbg.enterDecision(313, decisionCanBacktrack[313]);

            int LA313_0 = input.LA(1);

            if ( ((LA313_0>=WS && LA313_0<=COMMENT)) ) {
                alt313=1;
            }
            } finally {dbg.exitDecision(313);}

            switch (alt313) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1284:12: ws
                    {
                    dbg.location(1284,12);
                    pushFollow(FOLLOW_ws_in_sass_control_block8351);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(313);}

            dbg.location(1284,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1284:16: ( declarations )?
            int alt314=2;
            try { dbg.enterSubRule(314);
            try { dbg.enterDecision(314, decisionCanBacktrack[314]);

            int LA314_0 = input.LA(1);

            if ( ((LA314_0>=NAMESPACE_SYM && LA314_0<=IDENT)||(LA314_0>=CHARSET_SYM && LA314_0<=MEDIA_SYM)||LA314_0==GEN||(LA314_0>=COLON && LA314_0<=MOZ_DOCUMENT_SYM)||LA314_0==WEBKIT_KEYFRAMES_SYM||(LA314_0>=PAGE_SYM && LA314_0<=RIGHTBOTTOM_SYM)||(LA314_0>=MINUS && LA314_0<=PIPE)||LA314_0==LESS_AND||(LA314_0>=RBRACKET && LA314_0<=SASS_VAR)||(LA314_0>=SASS_CONTENT && LA314_0<=SASS_WHILE)||LA314_0==AT_SIGN) ) {
                alt314=1;
            }
            } finally {dbg.exitDecision(314);}

            switch (alt314) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1284:16: declarations
                    {
                    dbg.location(1284,16);
                    pushFollow(FOLLOW_declarations_in_sass_control_block8354);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(314);}

            dbg.location(1284,30);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_control_block8357); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1285, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_control_block");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_control_block"


    // $ANTLR start "sass_function_declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1287:1: sass_function_declaration : SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE ;
    public final void sass_function_declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_function_declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1287, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1288:5: ( SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:5: SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE
            {
            dbg.location(1293,5);
            match(input,SASS_FUNCTION,FOLLOW_SASS_FUNCTION_in_sass_function_declaration8403); if (state.failed) return ;
            dbg.location(1293,19);
            pushFollow(FOLLOW_ws_in_sass_function_declaration8405);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1293,22);
            pushFollow(FOLLOW_sass_function_name_in_sass_function_declaration8407);
            sass_function_name();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1293,41);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:41: ( ws )?
            int alt315=2;
            try { dbg.enterSubRule(315);
            try { dbg.enterDecision(315, decisionCanBacktrack[315]);

            int LA315_0 = input.LA(1);

            if ( ((LA315_0>=WS && LA315_0<=COMMENT)) ) {
                alt315=1;
            }
            } finally {dbg.exitDecision(315);}

            switch (alt315) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:41: ws
                    {
                    dbg.location(1293,41);
                    pushFollow(FOLLOW_ws_in_sass_function_declaration8409);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(315);}

            dbg.location(1293,45);
            match(input,LPAREN,FOLLOW_LPAREN_in_sass_function_declaration8412); if (state.failed) return ;
            dbg.location(1293,52);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:52: ( cp_args_list )?
            int alt316=2;
            try { dbg.enterSubRule(316);
            try { dbg.enterDecision(316, decisionCanBacktrack[316]);

            int LA316_0 = input.LA(1);

            if ( (LA316_0==NAMESPACE_SYM||(LA316_0>=CHARSET_SYM && LA316_0<=IMPORT_SYM)||LA316_0==MEDIA_SYM||(LA316_0>=AT_IDENT && LA316_0<=MOZ_DOCUMENT_SYM)||LA316_0==WEBKIT_KEYFRAMES_SYM||(LA316_0>=PAGE_SYM && LA316_0<=RIGHTBOTTOM_SYM)||LA316_0==SASS_VAR||(LA316_0>=SASS_CONTENT && LA316_0<=SASS_WHILE)||(LA316_0>=CP_DOTS && LA316_0<=LESS_REST)) ) {
                alt316=1;
            }
            } finally {dbg.exitDecision(316);}

            switch (alt316) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:52: cp_args_list
                    {
                    dbg.location(1293,52);
                    pushFollow(FOLLOW_cp_args_list_in_sass_function_declaration8414);
                    cp_args_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(316);}

            dbg.location(1293,66);
            match(input,RPAREN,FOLLOW_RPAREN_in_sass_function_declaration8417); if (state.failed) return ;
            dbg.location(1293,73);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:73: ( ws )?
            int alt317=2;
            try { dbg.enterSubRule(317);
            try { dbg.enterDecision(317, decisionCanBacktrack[317]);

            int LA317_0 = input.LA(1);

            if ( ((LA317_0>=WS && LA317_0<=COMMENT)) ) {
                alt317=1;
            }
            } finally {dbg.exitDecision(317);}

            switch (alt317) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:73: ws
                    {
                    dbg.location(1293,73);
                    pushFollow(FOLLOW_ws_in_sass_function_declaration8419);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(317);}

            dbg.location(1293,77);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_function_declaration8422); if (state.failed) return ;
            dbg.location(1293,84);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:84: ( ws )?
            int alt318=2;
            try { dbg.enterSubRule(318);
            try { dbg.enterDecision(318, decisionCanBacktrack[318]);

            int LA318_0 = input.LA(1);

            if ( ((LA318_0>=WS && LA318_0<=COMMENT)) ) {
                alt318=1;
            }
            } finally {dbg.exitDecision(318);}

            switch (alt318) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:84: ws
                    {
                    dbg.location(1293,84);
                    pushFollow(FOLLOW_ws_in_sass_function_declaration8424);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(318);}

            dbg.location(1293,88);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:88: ( declarations )?
            int alt319=2;
            try { dbg.enterSubRule(319);
            try { dbg.enterDecision(319, decisionCanBacktrack[319]);

            int LA319_0 = input.LA(1);

            if ( ((LA319_0>=NAMESPACE_SYM && LA319_0<=IDENT)||(LA319_0>=CHARSET_SYM && LA319_0<=MEDIA_SYM)||LA319_0==GEN||(LA319_0>=COLON && LA319_0<=MOZ_DOCUMENT_SYM)||LA319_0==WEBKIT_KEYFRAMES_SYM||(LA319_0>=PAGE_SYM && LA319_0<=RIGHTBOTTOM_SYM)||(LA319_0>=MINUS && LA319_0<=PIPE)||LA319_0==LESS_AND||(LA319_0>=RBRACKET && LA319_0<=SASS_VAR)||(LA319_0>=SASS_CONTENT && LA319_0<=SASS_WHILE)||LA319_0==AT_SIGN) ) {
                alt319=1;
            }
            } finally {dbg.exitDecision(319);}

            switch (alt319) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:88: declarations
                    {
                    dbg.location(1293,88);
                    pushFollow(FOLLOW_declarations_in_sass_function_declaration8427);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(319);}

            dbg.location(1293,102);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_function_declaration8430); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1294, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_function_declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_function_declaration"


    // $ANTLR start "sass_function_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:1: sass_function_name : IDENT ;
    public final void sass_function_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_function_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1296, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:5: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1298:5: IDENT
            {
            dbg.location(1298,5);
            match(input,IDENT,FOLLOW_IDENT_in_sass_function_name8455); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1299, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_function_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_function_name"


    // $ANTLR start "sass_function_return"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:1: sass_function_return : SASS_RETURN ws cp_expression ;
    public final void sass_function_return() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_function_return");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1301, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1302:5: ( SASS_RETURN ws cp_expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1303:5: SASS_RETURN ws cp_expression
            {
            dbg.location(1303,5);
            match(input,SASS_RETURN,FOLLOW_SASS_RETURN_in_sass_function_return8476); if (state.failed) return ;
            dbg.location(1303,17);
            pushFollow(FOLLOW_ws_in_sass_function_return8478);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1303,20);
            pushFollow(FOLLOW_cp_expression_in_sass_function_return8480);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1304, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_function_return");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_function_return"


    // $ANTLR start "sass_content"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1306:1: sass_content : SASS_CONTENT ;
    public final void sass_content() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_content");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1306, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1307:5: ( SASS_CONTENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1308:5: SASS_CONTENT
            {
            dbg.location(1308,5);
            match(input,SASS_CONTENT,FOLLOW_SASS_CONTENT_in_sass_content8505); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1309, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_content");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_content"

    // $ANTLR start synpred1_Css3
    public final void synpred1_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:44: ( ( ws )? mediaQueryList )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:45: ( ws )? mediaQueryList
        {
        dbg.location(363,45);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:45: ( ws )?
        int alt320=2;
        try { dbg.enterSubRule(320);
        try { dbg.enterDecision(320, decisionCanBacktrack[320]);

        int LA320_0 = input.LA(1);

        if ( ((LA320_0>=WS && LA320_0<=COMMENT)) ) {
            alt320=1;
        }
        } finally {dbg.exitDecision(320);}

        switch (alt320) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:45: ws
                {
                dbg.location(363,45);
                pushFollow(FOLLOW_ws_in_synpred1_Css3370);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(320);}

        dbg.location(363,49);
        pushFollow(FOLLOW_mediaQueryList_in_synpred1_Css3373);
        mediaQueryList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_Css3

    // $ANTLR start synpred2_Css3
    public final void synpred2_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:98: ( ( ws )? mediaQueryList )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:99: ( ws )? mediaQueryList
        {
        dbg.location(366,99);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:99: ( ws )?
        int alt321=2;
        try { dbg.enterSubRule(321);
        try { dbg.enterDecision(321, decisionCanBacktrack[321]);

        int LA321_0 = input.LA(1);

        if ( ((LA321_0>=WS && LA321_0<=COMMENT)) ) {
            alt321=1;
        }
        } finally {dbg.exitDecision(321);}

        switch (alt321) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:99: ws
                {
                dbg.location(366,99);
                pushFollow(FOLLOW_ws_in_synpred2_Css3434);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(321);}

        dbg.location(366,103);
        pushFollow(FOLLOW_mediaQueryList_in_synpred2_Css3437);
        mediaQueryList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_Css3

    // $ANTLR start synpred3_Css3
    public final void synpred3_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:27: ( ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:28: ( ws )? SEMI
        {
        dbg.location(381,28);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:28: ( ws )?
        int alt322=2;
        try { dbg.enterSubRule(322);
        try { dbg.enterDecision(322, decisionCanBacktrack[322]);

        int LA322_0 = input.LA(1);

        if ( ((LA322_0>=WS && LA322_0<=COMMENT)) ) {
            alt322=1;
        }
        } finally {dbg.exitDecision(322);}

        switch (alt322) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:28: ws
                {
                dbg.location(381,28);
                pushFollow(FOLLOW_ws_in_synpred3_Css3561);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(322);}

        dbg.location(381,32);
        match(input,SEMI,FOLLOW_SEMI_in_synpred3_Css3564); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_Css3

    // $ANTLR start synpred4_Css3
    public final void synpred4_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:5: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )
        int alt326=2;
        try { dbg.enterDecision(326, decisionCanBacktrack[326]);

        int LA326_0 = input.LA(1);

        if ( (LA326_0==SASS_MIXIN) ) {
            alt326=1;
        }
        else if ( (LA326_0==DOT) ) {
            alt326=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 326, 0, input);

            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(326);}

        switch (alt326) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:6: SASS_MIXIN
                {
                dbg.location(389,6);
                match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred4_Css3635); if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:19: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE )
                {
                dbg.location(389,19);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:19: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:20: DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE
                {
                dbg.location(389,20);
                match(input,DOT,FOLLOW_DOT_in_synpred4_Css3640); if (state.failed) return ;
                dbg.location(389,24);
                match(input,IDENT,FOLLOW_IDENT_in_synpred4_Css3642); if (state.failed) return ;
                dbg.location(389,30);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:30: ( ws )?
                int alt323=2;
                try { dbg.enterSubRule(323);
                try { dbg.enterDecision(323, decisionCanBacktrack[323]);

                int LA323_0 = input.LA(1);

                if ( ((LA323_0>=WS && LA323_0<=COMMENT)) ) {
                    alt323=1;
                }
                } finally {dbg.exitDecision(323);}

                switch (alt323) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:30: ws
                        {
                        dbg.location(389,30);
                        pushFollow(FOLLOW_ws_in_synpred4_Css3644);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(323);}

                dbg.location(389,34);
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred4_Css3647); if (state.failed) return ;
                dbg.location(389,41);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:41: (~ RPAREN )*
                try { dbg.enterSubRule(324);

                loop324:
                do {
                    int alt324=2;
                    try { dbg.enterDecision(324, decisionCanBacktrack[324]);

                    int LA324_0 = input.LA(1);

                    if ( ((LA324_0>=NAMESPACE_SYM && LA324_0<=LPAREN)||(LA324_0>=COLON && LA324_0<=LINE_COMMENT)) ) {
                        alt324=1;
                    }


                    } finally {dbg.exitDecision(324);}

                    switch (alt324) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:42: ~ RPAREN
                	    {
                	    dbg.location(389,42);
                	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=LPAREN)||(input.LA(1)>=COLON && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop324;
                    }
                } while (true);
                } finally {dbg.exitSubRule(324);}

                dbg.location(389,52);
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred4_Css3655); if (state.failed) return ;
                dbg.location(389,59);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:59: (~ ( LBRACE | SEMI ) )*
                try { dbg.enterSubRule(325);

                loop325:
                do {
                    int alt325=2;
                    try { dbg.enterDecision(325, decisionCanBacktrack[325]);

                    int LA325_0 = input.LA(1);

                    if ( (LA325_0==NAMESPACE_SYM||(LA325_0>=IDENT && LA325_0<=MEDIA_SYM)||(LA325_0>=RBRACE && LA325_0<=LINE_COMMENT)) ) {
                        alt325=1;
                    }


                    } finally {dbg.exitDecision(325);}

                    switch (alt325) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:59: ~ ( LBRACE | SEMI )
                	    {
                	    dbg.location(389,59);
                	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=RBRACE && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop325;
                    }
                } while (true);
                } finally {dbg.exitSubRule(325);}

                dbg.location(389,75);
                match(input,LBRACE,FOLLOW_LBRACE_in_synpred4_Css3665); if (state.failed) return ;

                }


                }
                break;

        }}
    // $ANTLR end synpred4_Css3

    // $ANTLR start synpred5_Css3
    public final void synpred5_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:390:7: ( cp_mixin_call )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:390:8: cp_mixin_call
        {
        dbg.location(390,8);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred5_Css3679);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_Css3

    // $ANTLR start synpred6_Css3
    public final void synpred6_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:6: ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:8: (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI
        {
        dbg.location(391,8);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:8: (~ ( LBRACE | SEMI | RBRACE | COLON ) )+
        int cnt327=0;
        try { dbg.enterSubRule(327);

        loop327:
        do {
            int alt327=2;
            try { dbg.enterDecision(327, decisionCanBacktrack[327]);

            int LA327_0 = input.LA(1);

            if ( (LA327_0==NAMESPACE_SYM||(LA327_0>=IDENT && LA327_0<=MEDIA_SYM)||(LA327_0>=AND && LA327_0<=RPAREN)||(LA327_0>=AT_IDENT && LA327_0<=LINE_COMMENT)) ) {
                alt327=1;
            }


            } finally {dbg.exitDecision(327);}

            switch (alt327) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:8: ~ ( LBRACE | SEMI | RBRACE | COLON )
        	    {
        	    dbg.location(391,8);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=RPAREN)||(input.LA(1)>=AT_IDENT && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt327 >= 1 ) break loop327;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(327, input);
                    dbg.recognitionException(eee);

                    throw eee;
            }
            cnt327++;
        } while (true);
        } finally {dbg.exitSubRule(327);}

        dbg.location(391,37);
        match(input,COLON,FOLLOW_COLON_in_synpred6_Css3704); if (state.failed) return ;
        dbg.location(391,43);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:43: (~ ( SEMI | LBRACE | RBRACE ) )+
        int cnt328=0;
        try { dbg.enterSubRule(328);

        loop328:
        do {
            int alt328=2;
            try { dbg.enterDecision(328, decisionCanBacktrack[328]);

            int LA328_0 = input.LA(1);

            if ( (LA328_0==NAMESPACE_SYM||(LA328_0>=IDENT && LA328_0<=MEDIA_SYM)||(LA328_0>=AND && LA328_0<=LINE_COMMENT)) ) {
                alt328=1;
            }


            } finally {dbg.exitDecision(328);}

            switch (alt328) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:43: ~ ( SEMI | LBRACE | RBRACE )
        	    {
        	    dbg.location(391,43);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt328 >= 1 ) break loop328;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(328, input);
                    dbg.recognitionException(eee);

                    throw eee;
            }
            cnt328++;
        } while (true);
        } finally {dbg.exitSubRule(328);}

        dbg.location(391,66);
        match(input,SEMI,FOLLOW_SEMI_in_synpred6_Css3716); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_Css3

    // $ANTLR start synpred7_Css3
    public final void synpred7_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:6: ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:8: sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI
        {
        dbg.location(392,8);
        pushFollow(FOLLOW_sass_declaration_interpolation_expression_in_synpred7_Css3729);
        sass_declaration_interpolation_expression();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(392,50);
        match(input,COLON,FOLLOW_COLON_in_synpred7_Css3731); if (state.failed) return ;
        dbg.location(392,56);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:56: (~ ( SEMI | LBRACE | RBRACE ) )+
        int cnt329=0;
        try { dbg.enterSubRule(329);

        loop329:
        do {
            int alt329=2;
            try { dbg.enterDecision(329, decisionCanBacktrack[329]);

            int LA329_0 = input.LA(1);

            if ( (LA329_0==NAMESPACE_SYM||(LA329_0>=IDENT && LA329_0<=MEDIA_SYM)||(LA329_0>=AND && LA329_0<=LINE_COMMENT)) ) {
                alt329=1;
            }


            } finally {dbg.exitDecision(329);}

            switch (alt329) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:56: ~ ( SEMI | LBRACE | RBRACE )
        	    {
        	    dbg.location(392,56);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt329 >= 1 ) break loop329;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(329, input);
                    dbg.recognitionException(eee);

                    throw eee;
            }
            cnt329++;
        } while (true);
        } finally {dbg.exitSubRule(329);}

        dbg.location(392,79);
        match(input,SEMI,FOLLOW_SEMI_in_synpred7_Css3743); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_Css3

    // $ANTLR start synpred8_Css3
    public final void synpred8_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:17: ( ( ws )? COMMA )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:18: ( ws )? COMMA
        {
        dbg.location(406,18);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:18: ( ws )?
        int alt330=2;
        try { dbg.enterSubRule(330);
        try { dbg.enterDecision(330, decisionCanBacktrack[330]);

        int LA330_0 = input.LA(1);

        if ( ((LA330_0>=WS && LA330_0<=COMMENT)) ) {
            alt330=1;
        }
        } finally {dbg.exitDecision(330);}

        switch (alt330) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:18: ws
                {
                dbg.location(406,18);
                pushFollow(FOLLOW_ws_in_synpred8_Css3851);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(330);}

        dbg.location(406,22);
        match(input,COMMA,FOLLOW_COMMA_in_synpred8_Css3854); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_Css3

    // $ANTLR start synpred9_Css3
    public final void synpred9_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:22: ( ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:23: ( ws )? SEMI
        {
        dbg.location(444,23);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:23: ( ws )?
        int alt331=2;
        try { dbg.enterSubRule(331);
        try { dbg.enterDecision(331, decisionCanBacktrack[331]);

        int LA331_0 = input.LA(1);

        if ( ((LA331_0>=WS && LA331_0<=COMMENT)) ) {
            alt331=1;
        }
        } finally {dbg.exitDecision(331);}

        switch (alt331) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:23: ws
                {
                dbg.location(444,23);
                pushFollow(FOLLOW_ws_in_synpred9_Css31150);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(331);}

        dbg.location(444,27);
        match(input,SEMI,FOLLOW_SEMI_in_synpred9_Css31153); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_Css3

    // $ANTLR start synpred10_Css3
    public final void synpred10_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:452:9: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )
        int alt335=2;
        try { dbg.enterDecision(335, decisionCanBacktrack[335]);

        int LA335_0 = input.LA(1);

        if ( (LA335_0==SASS_MIXIN) ) {
            alt335=1;
        }
        else if ( (LA335_0==DOT) ) {
            alt335=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 335, 0, input);

            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(335);}

        switch (alt335) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:452:10: SASS_MIXIN
                {
                dbg.location(452,10);
                match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred10_Css31230); if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:452:23: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE )
                {
                dbg.location(452,23);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:452:23: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:452:24: DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE
                {
                dbg.location(452,24);
                match(input,DOT,FOLLOW_DOT_in_synpred10_Css31235); if (state.failed) return ;
                dbg.location(452,28);
                match(input,IDENT,FOLLOW_IDENT_in_synpred10_Css31237); if (state.failed) return ;
                dbg.location(452,34);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:452:34: ( ws )?
                int alt332=2;
                try { dbg.enterSubRule(332);
                try { dbg.enterDecision(332, decisionCanBacktrack[332]);

                int LA332_0 = input.LA(1);

                if ( ((LA332_0>=WS && LA332_0<=COMMENT)) ) {
                    alt332=1;
                }
                } finally {dbg.exitDecision(332);}

                switch (alt332) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:452:34: ws
                        {
                        dbg.location(452,34);
                        pushFollow(FOLLOW_ws_in_synpred10_Css31239);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(332);}

                dbg.location(452,38);
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred10_Css31242); if (state.failed) return ;
                dbg.location(452,45);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:452:45: (~ RPAREN )*
                try { dbg.enterSubRule(333);

                loop333:
                do {
                    int alt333=2;
                    try { dbg.enterDecision(333, decisionCanBacktrack[333]);

                    int LA333_0 = input.LA(1);

                    if ( ((LA333_0>=NAMESPACE_SYM && LA333_0<=LPAREN)||(LA333_0>=COLON && LA333_0<=LINE_COMMENT)) ) {
                        alt333=1;
                    }


                    } finally {dbg.exitDecision(333);}

                    switch (alt333) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:452:46: ~ RPAREN
                	    {
                	    dbg.location(452,46);
                	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=LPAREN)||(input.LA(1)>=COLON && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop333;
                    }
                } while (true);
                } finally {dbg.exitSubRule(333);}

                dbg.location(452,56);
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred10_Css31250); if (state.failed) return ;
                dbg.location(452,63);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:452:63: (~ ( LBRACE | RBRACE | SEMI ) )*
                try { dbg.enterSubRule(334);

                loop334:
                do {
                    int alt334=2;
                    try { dbg.enterDecision(334, decisionCanBacktrack[334]);

                    int LA334_0 = input.LA(1);

                    if ( (LA334_0==NAMESPACE_SYM||(LA334_0>=IDENT && LA334_0<=MEDIA_SYM)||(LA334_0>=AND && LA334_0<=LINE_COMMENT)) ) {
                        alt334=1;
                    }


                    } finally {dbg.exitDecision(334);}

                    switch (alt334) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:452:63: ~ ( LBRACE | RBRACE | SEMI )
                	    {
                	    dbg.location(452,63);
                	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop334;
                    }
                } while (true);
                } finally {dbg.exitSubRule(334);}

                dbg.location(452,86);
                match(input,LBRACE,FOLLOW_LBRACE_in_synpred10_Css31262); if (state.failed) return ;

                }


                }
                break;

        }}
    // $ANTLR end synpred10_Css3

    // $ANTLR start synpred13_Css3
    public final void synpred13_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:593:5: ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:593:6: (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE
        {
        dbg.location(593,6);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:593:6: (~ ( HASH_SYMBOL | COLON ) )*
        try { dbg.enterSubRule(337);

        loop337:
        do {
            int alt337=2;
            try { dbg.enterDecision(337, decisionCanBacktrack[337]);

            int LA337_0 = input.LA(1);

            if ( ((LA337_0>=NAMESPACE_SYM && LA337_0<=RPAREN)||(LA337_0>=AT_IDENT && LA337_0<=TILDE)||(LA337_0>=HASH && LA337_0<=LINE_COMMENT)) ) {
                alt337=1;
            }


            } finally {dbg.exitDecision(337);}

            switch (alt337) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:593:6: ~ ( HASH_SYMBOL | COLON )
        	    {
        	    dbg.location(593,6);
        	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=RPAREN)||(input.LA(1)>=AT_IDENT && input.LA(1)<=TILDE)||(input.LA(1)>=HASH && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop337;
            }
        } while (true);
        } finally {dbg.exitSubRule(337);}

        dbg.location(593,28);
        match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_synpred13_Css32408); if (state.failed) return ;
        dbg.location(593,40);
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred13_Css32410); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_Css3

    // $ANTLR start synpred14_Css3
    public final void synpred14_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:25: ( ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:26: ( ws )? SEMI
        {
        dbg.location(619,26);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:26: ( ws )?
        int alt338=2;
        try { dbg.enterSubRule(338);
        try { dbg.enterDecision(338, decisionCanBacktrack[338]);

        int LA338_0 = input.LA(1);

        if ( ((LA338_0>=WS && LA338_0<=COMMENT)) ) {
            alt338=1;
        }
        } finally {dbg.exitDecision(338);}

        switch (alt338) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:26: ws
                {
                dbg.location(619,26);
                pushFollow(FOLLOW_ws_in_synpred14_Css32564);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(338);}

        dbg.location(619,30);
        match(input,SEMI,FOLLOW_SEMI_in_synpred14_Css32567); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_Css3

    // $ANTLR start synpred15_Css3
    public final void synpred15_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:5: ( cp_variable_declaration )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:6: cp_variable_declaration
        {
        dbg.location(627,6);
        pushFollow(FOLLOW_cp_variable_declaration_in_synpred15_Css32638);
        cp_variable_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_Css3

    // $ANTLR start synpred16_Css3
    public final void synpred16_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:628:7: ( sass_nested_properties )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:628:8: sass_nested_properties
        {
        dbg.location(628,8);
        pushFollow(FOLLOW_sass_nested_properties_in_synpred16_Css32651);
        sass_nested_properties();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_Css3

    // $ANTLR start synpred17_Css3
    public final void synpred17_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:7: ( propertyDeclaration )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:8: propertyDeclaration
        {
        dbg.location(629,8);
        pushFollow(FOLLOW_propertyDeclaration_in_synpred17_Css32664);
        propertyDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_Css3

    // $ANTLR start synpred18_Css3
    public final void synpred18_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:631:7: ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:631:8: property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI )
        {
        dbg.location(631,8);
        pushFollow(FOLLOW_property_in_synpred18_Css32682);
        property();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(631,17);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:631:17: ( ws )?
        int alt339=2;
        try { dbg.enterSubRule(339);
        try { dbg.enterDecision(339, decisionCanBacktrack[339]);

        int LA339_0 = input.LA(1);

        if ( ((LA339_0>=WS && LA339_0<=COMMENT)) ) {
            alt339=1;
        }
        } finally {dbg.exitDecision(339);}

        switch (alt339) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:631:17: ws
                {
                dbg.location(631,17);
                pushFollow(FOLLOW_ws_in_synpred18_Css32684);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(339);}

        dbg.location(631,21);
        match(input,COLON,FOLLOW_COLON_in_synpred18_Css32687); if (state.failed) return ;
        dbg.location(631,27);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:631:27: (~ ( LBRACE | SEMI | RBRACE ) )*
        try { dbg.enterSubRule(340);

        loop340:
        do {
            int alt340=2;
            try { dbg.enterDecision(340, decisionCanBacktrack[340]);

            int LA340_0 = input.LA(1);

            if ( (LA340_0==NAMESPACE_SYM||(LA340_0>=IDENT && LA340_0<=MEDIA_SYM)||(LA340_0>=AND && LA340_0<=LINE_COMMENT)) ) {
                alt340=1;
            }


            } finally {dbg.exitDecision(340);}

            switch (alt340) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:631:27: ~ ( LBRACE | SEMI | RBRACE )
        	    {
        	    dbg.location(631,27);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop340;
            }
        } while (true);
        } finally {dbg.exitSubRule(340);}

        dbg.location(631,50);
        if ( input.LA(1)==SEMI||input.LA(1)==RBRACE ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            dbg.recognitionException(mse);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred18_Css3

    // $ANTLR start synpred19_Css3
    public final void synpred19_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:7: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )
        int alt344=2;
        try { dbg.enterDecision(344, decisionCanBacktrack[344]);

        int LA344_0 = input.LA(1);

        if ( (LA344_0==SASS_MIXIN) ) {
            alt344=1;
        }
        else if ( (LA344_0==DOT) ) {
            alt344=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 344, 0, input);

            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(344);}

        switch (alt344) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:8: SASS_MIXIN
                {
                dbg.location(632,8);
                match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred19_Css32717); if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:21: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE )
                {
                dbg.location(632,21);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:21: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:22: DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE
                {
                dbg.location(632,22);
                match(input,DOT,FOLLOW_DOT_in_synpred19_Css32722); if (state.failed) return ;
                dbg.location(632,26);
                match(input,IDENT,FOLLOW_IDENT_in_synpred19_Css32724); if (state.failed) return ;
                dbg.location(632,32);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:32: ( ws )?
                int alt341=2;
                try { dbg.enterSubRule(341);
                try { dbg.enterDecision(341, decisionCanBacktrack[341]);

                int LA341_0 = input.LA(1);

                if ( ((LA341_0>=WS && LA341_0<=COMMENT)) ) {
                    alt341=1;
                }
                } finally {dbg.exitDecision(341);}

                switch (alt341) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:32: ws
                        {
                        dbg.location(632,32);
                        pushFollow(FOLLOW_ws_in_synpred19_Css32726);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(341);}

                dbg.location(632,36);
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred19_Css32729); if (state.failed) return ;
                dbg.location(632,43);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:43: (~ RPAREN )*
                try { dbg.enterSubRule(342);

                loop342:
                do {
                    int alt342=2;
                    try { dbg.enterDecision(342, decisionCanBacktrack[342]);

                    int LA342_0 = input.LA(1);

                    if ( ((LA342_0>=NAMESPACE_SYM && LA342_0<=LPAREN)||(LA342_0>=COLON && LA342_0<=LINE_COMMENT)) ) {
                        alt342=1;
                    }


                    } finally {dbg.exitDecision(342);}

                    switch (alt342) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:44: ~ RPAREN
                	    {
                	    dbg.location(632,44);
                	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=LPAREN)||(input.LA(1)>=COLON && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop342;
                    }
                } while (true);
                } finally {dbg.exitSubRule(342);}

                dbg.location(632,54);
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred19_Css32737); if (state.failed) return ;
                dbg.location(632,61);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:61: (~ ( LBRACE | SEMI | RBRACE ) )*
                try { dbg.enterSubRule(343);

                loop343:
                do {
                    int alt343=2;
                    try { dbg.enterDecision(343, decisionCanBacktrack[343]);

                    int LA343_0 = input.LA(1);

                    if ( (LA343_0==NAMESPACE_SYM||(LA343_0>=IDENT && LA343_0<=MEDIA_SYM)||(LA343_0>=AND && LA343_0<=LINE_COMMENT)) ) {
                        alt343=1;
                    }


                    } finally {dbg.exitDecision(343);}

                    switch (alt343) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:61: ~ ( LBRACE | SEMI | RBRACE )
                	    {
                	    dbg.location(632,61);
                	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop343;
                    }
                } while (true);
                } finally {dbg.exitSubRule(343);}

                dbg.location(632,84);
                match(input,LBRACE,FOLLOW_LBRACE_in_synpred19_Css32749); if (state.failed) return ;

                }


                }
                break;

        }}
    // $ANTLR end synpred19_Css3

    // $ANTLR start synpred20_Css3
    public final void synpred20_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:633:7: ( cp_mixin_call )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:633:8: cp_mixin_call
        {
        dbg.location(633,8);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred20_Css32763);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_Css3

    // $ANTLR start synpred21_Css3
    public final void synpred21_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:634:7: ( selectorsGroup ( ws )? LBRACE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:634:8: selectorsGroup ( ws )? LBRACE
        {
        dbg.location(634,8);
        pushFollow(FOLLOW_selectorsGroup_in_synpred21_Css32776);
        selectorsGroup();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(634,23);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:634:23: ( ws )?
        int alt345=2;
        try { dbg.enterSubRule(345);
        try { dbg.enterDecision(345, decisionCanBacktrack[345]);

        int LA345_0 = input.LA(1);

        if ( ((LA345_0>=WS && LA345_0<=COMMENT)) ) {
            alt345=1;
        }
        } finally {dbg.exitDecision(345);}

        switch (alt345) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:634:23: ws
                {
                dbg.location(634,23);
                pushFollow(FOLLOW_ws_in_synpred21_Css32778);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(345);}

        dbg.location(634,27);
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred21_Css32781); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_Css3

    // $ANTLR start synpred22_Css3
    public final void synpred22_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:652:9: ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:652:11: (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE
        {
        dbg.location(652,11);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:652:11: (~ ( HASH_SYMBOL | LBRACE ) )*
        try { dbg.enterSubRule(346);

        loop346:
        do {
            int alt346=2;
            try { dbg.enterDecision(346, decisionCanBacktrack[346]);

            int LA346_0 = input.LA(1);

            if ( ((LA346_0>=NAMESPACE_SYM && LA346_0<=MEDIA_SYM)||(LA346_0>=RBRACE && LA346_0<=TILDE)||(LA346_0>=HASH && LA346_0<=LINE_COMMENT)) ) {
                alt346=1;
            }


            } finally {dbg.exitDecision(346);}

            switch (alt346) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:652:11: ~ ( HASH_SYMBOL | LBRACE )
        	    {
        	    dbg.location(652,11);
        	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=RBRACE && input.LA(1)<=TILDE)||(input.LA(1)>=HASH && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop346;
            }
        } while (true);
        } finally {dbg.exitSubRule(346);}

        dbg.location(652,38);
        match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_synpred22_Css32932); if (state.failed) return ;
        dbg.location(652,50);
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred22_Css32934); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_Css3

    // $ANTLR start synpred23_Css3
    public final void synpred23_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:18: ( ( ws )? esPred )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:19: ( ws )? esPred
        {
        dbg.location(668,19);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:19: ( ws )?
        int alt347=2;
        try { dbg.enterSubRule(347);
        try { dbg.enterDecision(347, decisionCanBacktrack[347]);

        int LA347_0 = input.LA(1);

        if ( ((LA347_0>=WS && LA347_0<=COMMENT)) ) {
            alt347=1;
        }
        } finally {dbg.exitDecision(347);}

        switch (alt347) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:19: ws
                {
                dbg.location(668,19);
                pushFollow(FOLLOW_ws_in_synpred23_Css33074);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(347);}

        dbg.location(668,23);
        pushFollow(FOLLOW_esPred_in_synpred23_Css33077);
        esPred();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_Css3

    // $ANTLR start synpred24_Css3
    public final void synpred24_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:21: ( ( ws )? esPred )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:22: ( ws )? esPred
        {
        dbg.location(670,22);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:22: ( ws )?
        int alt348=2;
        try { dbg.enterSubRule(348);
        try { dbg.enterDecision(348, decisionCanBacktrack[348]);

        int LA348_0 = input.LA(1);

        if ( ((LA348_0>=WS && LA348_0<=COMMENT)) ) {
            alt348=1;
        }
        } finally {dbg.exitDecision(348);}

        switch (alt348) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:22: ws
                {
                dbg.location(670,22);
                pushFollow(FOLLOW_ws_in_synpred24_Css33098);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(348);}

        dbg.location(670,26);
        pushFollow(FOLLOW_esPred_in_synpred24_Css33101);
        esPred();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred24_Css3

    // $ANTLR start synpred25_Css3
    public final void synpred25_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:684:7: ( ( IDENT | STAR )? PIPE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:684:8: ( IDENT | STAR )? PIPE
        {
        dbg.location(684,8);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:684:8: ( IDENT | STAR )?
        int alt349=2;
        try { dbg.enterSubRule(349);
        try { dbg.enterDecision(349, decisionCanBacktrack[349]);

        int LA349_0 = input.LA(1);

        if ( (LA349_0==IDENT||LA349_0==STAR) ) {
            alt349=1;
        }
        } finally {dbg.exitDecision(349);}

        switch (alt349) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
                {
                dbg.location(684,8);
                if ( input.LA(1)==IDENT||input.LA(1)==STAR ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    dbg.recognitionException(mse);
                    throw mse;
                }


                }
                break;

        }
        } finally {dbg.exitSubRule(349);}

        dbg.location(684,24);
        match(input,PIPE,FOLLOW_PIPE_in_synpred25_Css33217); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred25_Css3

    // $ANTLR start synpred26_Css3
    public final void synpred26_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:14: ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:15: ( ws | ( ( ws )? operator ( ws )? ) | ) term
        {
        dbg.location(859,15);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:15: ( ws | ( ( ws )? operator ( ws )? ) | )
        int alt352=3;
        try { dbg.enterSubRule(352);
        try { dbg.enterDecision(352, decisionCanBacktrack[352]);

        try {
            isCyclicDecision = true;
            alt352 = dfa352.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(352);}

        switch (alt352) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:17: ws
                {
                dbg.location(859,17);
                pushFollow(FOLLOW_ws_in_synpred26_Css34673);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:22: ( ( ws )? operator ( ws )? )
                {
                dbg.location(859,22);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:22: ( ( ws )? operator ( ws )? )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:23: ( ws )? operator ( ws )?
                {
                dbg.location(859,23);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:23: ( ws )?
                int alt350=2;
                try { dbg.enterSubRule(350);
                try { dbg.enterDecision(350, decisionCanBacktrack[350]);

                int LA350_0 = input.LA(1);

                if ( ((LA350_0>=WS && LA350_0<=COMMENT)) ) {
                    alt350=1;
                }
                } finally {dbg.exitDecision(350);}

                switch (alt350) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:23: ws
                        {
                        dbg.location(859,23);
                        pushFollow(FOLLOW_ws_in_synpred26_Css34678);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(350);}

                dbg.location(859,27);
                pushFollow(FOLLOW_operator_in_synpred26_Css34681);
                operator();

                state._fsp--;
                if (state.failed) return ;
                dbg.location(859,36);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:36: ( ws )?
                int alt351=2;
                try { dbg.enterSubRule(351);
                try { dbg.enterDecision(351, decisionCanBacktrack[351]);

                int LA351_0 = input.LA(1);

                if ( ((LA351_0>=WS && LA351_0<=COMMENT)) ) {
                    alt351=1;
                }
                } finally {dbg.exitDecision(351);}

                switch (alt351) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:36: ws
                        {
                        dbg.location(859,36);
                        pushFollow(FOLLOW_ws_in_synpred26_Css34683);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(351);}


                }


                }
                break;
            case 3 :
                dbg.enterAlt(3);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:56: 
                {
                }
                break;

        }
        } finally {dbg.exitSubRule(352);}

        dbg.location(859,58);
        pushFollow(FOLLOW_term_in_synpred26_Css34692);
        term();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred26_Css3

    // $ANTLR start synpred27_Css3
    public final void synpred27_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:866:9: ( functionName ( ws )? LPAREN )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:866:10: functionName ( ws )? LPAREN
        {
        dbg.location(866,10);
        pushFollow(FOLLOW_functionName_in_synpred27_Css34770);
        functionName();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(866,23);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:866:23: ( ws )?
        int alt353=2;
        try { dbg.enterSubRule(353);
        try { dbg.enterDecision(353, decisionCanBacktrack[353]);

        int LA353_0 = input.LA(1);

        if ( ((LA353_0>=WS && LA353_0<=COMMENT)) ) {
            alt353=1;
        }
        } finally {dbg.exitDecision(353);}

        switch (alt353) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:866:23: ws
                {
                dbg.location(866,23);
                pushFollow(FOLLOW_ws_in_synpred27_Css34772);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(353);}

        dbg.location(866,27);
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred27_Css34775); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_Css3

    // $ANTLR start synpred28_Css3
    public final void synpred28_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:927:9: ( fnAttributeName ( ws )? ( OPEQ | COLON ) )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:927:10: fnAttributeName ( ws )? ( OPEQ | COLON )
        {
        dbg.location(927,10);
        pushFollow(FOLLOW_fnAttributeName_in_synpred28_Css35291);
        fnAttributeName();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(927,26);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:927:26: ( ws )?
        int alt354=2;
        try { dbg.enterSubRule(354);
        try { dbg.enterDecision(354, decisionCanBacktrack[354]);

        int LA354_0 = input.LA(1);

        if ( ((LA354_0>=WS && LA354_0<=COMMENT)) ) {
            alt354=1;
        }
        } finally {dbg.exitDecision(354);}

        switch (alt354) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:927:26: ws
                {
                dbg.location(927,26);
                pushFollow(FOLLOW_ws_in_synpred28_Css35293);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(354);}

        dbg.location(927,30);
        if ( input.LA(1)==COLON||input.LA(1)==OPEQ ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            dbg.recognitionException(mse);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred28_Css3

    // $ANTLR start synpred29_Css3
    public final void synpred29_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:20: ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term
        {
        dbg.location(940,21);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )
        int alt357=3;
        try { dbg.enterSubRule(357);
        try { dbg.enterDecision(357, decisionCanBacktrack[357]);

        try {
            isCyclicDecision = true;
            alt357 = dfa357.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(357);}

        switch (alt357) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:23: ws
                {
                dbg.location(940,23);
                pushFollow(FOLLOW_ws_in_synpred29_Css35429);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:28: ( ( ws )? SOLIDUS ( ws )? )
                {
                dbg.location(940,28);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:28: ( ( ws )? SOLIDUS ( ws )? )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:29: ( ws )? SOLIDUS ( ws )?
                {
                dbg.location(940,29);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:29: ( ws )?
                int alt355=2;
                try { dbg.enterSubRule(355);
                try { dbg.enterDecision(355, decisionCanBacktrack[355]);

                int LA355_0 = input.LA(1);

                if ( ((LA355_0>=WS && LA355_0<=COMMENT)) ) {
                    alt355=1;
                }
                } finally {dbg.exitDecision(355);}

                switch (alt355) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:29: ws
                        {
                        dbg.location(940,29);
                        pushFollow(FOLLOW_ws_in_synpred29_Css35434);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(355);}

                dbg.location(940,33);
                match(input,SOLIDUS,FOLLOW_SOLIDUS_in_synpred29_Css35437); if (state.failed) return ;
                dbg.location(940,41);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:41: ( ws )?
                int alt356=2;
                try { dbg.enterSubRule(356);
                try { dbg.enterDecision(356, decisionCanBacktrack[356]);

                int LA356_0 = input.LA(1);

                if ( ((LA356_0>=WS && LA356_0<=COMMENT)) ) {
                    alt356=1;
                }
                } finally {dbg.exitDecision(356);}

                switch (alt356) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:41: ws
                        {
                        dbg.location(940,41);
                        pushFollow(FOLLOW_ws_in_synpred29_Css35439);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(356);}


                }


                }
                break;
            case 3 :
                dbg.enterAlt(3);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:61: 
                {
                }
                break;

        }
        } finally {dbg.exitSubRule(357);}

        dbg.location(940,63);
        pushFollow(FOLLOW_term_in_synpred29_Css35448);
        term();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_Css3

    // $ANTLR start synpred30_Css3
    public final void synpred30_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:975:6: ( ( ws )? COMMA ( ws )? cp_expression )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:975:7: ( ws )? COMMA ( ws )? cp_expression
        {
        dbg.location(975,7);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:975:7: ( ws )?
        int alt358=2;
        try { dbg.enterSubRule(358);
        try { dbg.enterDecision(358, decisionCanBacktrack[358]);

        int LA358_0 = input.LA(1);

        if ( ((LA358_0>=WS && LA358_0<=COMMENT)) ) {
            alt358=1;
        }
        } finally {dbg.exitDecision(358);}

        switch (alt358) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:975:7: ws
                {
                dbg.location(975,7);
                pushFollow(FOLLOW_ws_in_synpred30_Css35887);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(358);}

        dbg.location(975,11);
        match(input,COMMA,FOLLOW_COMMA_in_synpred30_Css35890); if (state.failed) return ;
        dbg.location(975,17);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:975:17: ( ws )?
        int alt359=2;
        try { dbg.enterSubRule(359);
        try { dbg.enterDecision(359, decisionCanBacktrack[359]);

        int LA359_0 = input.LA(1);

        if ( ((LA359_0>=WS && LA359_0<=COMMENT)) ) {
            alt359=1;
        }
        } finally {dbg.exitDecision(359);}

        switch (alt359) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:975:17: ws
                {
                dbg.location(975,17);
                pushFollow(FOLLOW_ws_in_synpred30_Css35892);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(359);}

        dbg.location(975,21);
        pushFollow(FOLLOW_cp_expression_in_synpred30_Css35895);
        cp_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_Css3

    // $ANTLR start synpred31_Css3
    public final void synpred31_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:992:9: ( ( ws )? cp_expression_operator )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:992:10: ( ws )? cp_expression_operator
        {
        dbg.location(992,10);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:992:10: ( ws )?
        int alt360=2;
        try { dbg.enterSubRule(360);
        try { dbg.enterDecision(360, decisionCanBacktrack[360]);

        int LA360_0 = input.LA(1);

        if ( ((LA360_0>=WS && LA360_0<=COMMENT)) ) {
            alt360=1;
        }
        } finally {dbg.exitDecision(360);}

        switch (alt360) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:992:10: ws
                {
                dbg.location(992,10);
                pushFollow(FOLLOW_ws_in_synpred31_Css35962);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(360);}

        dbg.location(992,14);
        pushFollow(FOLLOW_cp_expression_operator_in_synpred31_Css35965);
        cp_expression_operator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_Css3

    // $ANTLR start synpred32_Css3
    public final void synpred32_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:993:11: ( ( ws )? cp_expression_atom )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:993:12: ( ws )? cp_expression_atom
        {
        dbg.location(993,12);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:993:12: ( ws )?
        int alt361=2;
        try { dbg.enterSubRule(361);
        try { dbg.enterDecision(361, decisionCanBacktrack[361]);

        int LA361_0 = input.LA(1);

        if ( ((LA361_0>=WS && LA361_0<=COMMENT)) ) {
            alt361=1;
        }
        } finally {dbg.exitDecision(361);}

        switch (alt361) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:993:12: ws
                {
                dbg.location(993,12);
                pushFollow(FOLLOW_ws_in_synpred32_Css35992);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(361);}

        dbg.location(993,16);
        pushFollow(FOLLOW_cp_expression_atom_in_synpred32_Css35995);
        cp_expression_atom();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_Css3

    // $ANTLR start synpred33_Css3
    public final void synpred33_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1006:13: ( cp_math_expression )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1006:14: cp_math_expression
        {
        dbg.location(1006,14);
        pushFollow(FOLLOW_cp_math_expression_in_synpred33_Css36123);
        cp_math_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred33_Css3

    // $ANTLR start synpred34_Css3
    public final void synpred34_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1033:13: ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1033:14: ( ws )? ( PLUS | MINUS | STAR | SOLIDUS )
        {
        dbg.location(1033,14);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1033:14: ( ws )?
        int alt362=2;
        try { dbg.enterSubRule(362);
        try { dbg.enterDecision(362, decisionCanBacktrack[362]);

        int LA362_0 = input.LA(1);

        if ( ((LA362_0>=WS && LA362_0<=COMMENT)) ) {
            alt362=1;
        }
        } finally {dbg.exitDecision(362);}

        switch (alt362) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1033:14: ws
                {
                dbg.location(1033,14);
                pushFollow(FOLLOW_ws_in_synpred34_Css36254);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(362);}

        dbg.location(1033,18);
        if ( (input.LA(1)>=SOLIDUS && input.LA(1)<=PLUS)||input.LA(1)==STAR ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            dbg.recognitionException(mse);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred34_Css3

    // $ANTLR start synpred35_Css3
    public final void synpred35_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1169:13: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1169:14: sass_interpolation_expression_var
        {
        dbg.location(1169,14);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred35_Css37326);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_Css3

    // $ANTLR start synpred36_Css3
    public final void synpred36_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1176:17: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1176:18: sass_interpolation_expression_var
        {
        dbg.location(1176,18);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred36_Css37473);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_Css3

    // $ANTLR start synpred37_Css3
    public final void synpred37_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1187:13: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1187:14: sass_interpolation_expression_var
        {
        dbg.location(1187,14);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred37_Css37629);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred37_Css3

    // $ANTLR start synpred38_Css3
    public final void synpred38_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1194:17: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1194:18: sass_interpolation_expression_var
        {
        dbg.location(1194,18);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred38_Css37747);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred38_Css3

    // Delegated rules

    public final boolean synpred5_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred5_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred26_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred36_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred10_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred20_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred16_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred18_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred35_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred29_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred14_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred25_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred8_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred15_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred38_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred24_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred21_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred9_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred34_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred33_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred4_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred17_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred7_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred37_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred27_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred30_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred23_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred6_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred3_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred2_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred28_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred13_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred1_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred32_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred31_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred19_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred22_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA3 dfa3 = new DFA3(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA17 dfa17 = new DFA17(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA24 dfa24 = new DFA24(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA33 dfa33 = new DFA33(this);
    protected DFA37 dfa37 = new DFA37(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA60 dfa60 = new DFA60(this);
    protected DFA64 dfa64 = new DFA64(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA94 dfa94 = new DFA94(this);
    protected DFA98 dfa98 = new DFA98(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA136 dfa136 = new DFA136(this);
    protected DFA154 dfa154 = new DFA154(this);
    protected DFA167 dfa167 = new DFA167(this);
    protected DFA163 dfa163 = new DFA163(this);
    protected DFA168 dfa168 = new DFA168(this);
    protected DFA173 dfa173 = new DFA173(this);
    protected DFA172 dfa172 = new DFA172(this);
    protected DFA176 dfa176 = new DFA176(this);
    protected DFA184 dfa184 = new DFA184(this);
    protected DFA188 dfa188 = new DFA188(this);
    protected DFA195 dfa195 = new DFA195(this);
    protected DFA194 dfa194 = new DFA194(this);
    protected DFA193 dfa193 = new DFA193(this);
    protected DFA202 dfa202 = new DFA202(this);
    protected DFA207 dfa207 = new DFA207(this);
    protected DFA211 dfa211 = new DFA211(this);
    protected DFA216 dfa216 = new DFA216(this);
    protected DFA220 dfa220 = new DFA220(this);
    protected DFA225 dfa225 = new DFA225(this);
    protected DFA230 dfa230 = new DFA230(this);
    protected DFA234 dfa234 = new DFA234(this);
    protected DFA240 dfa240 = new DFA240(this);
    protected DFA244 dfa244 = new DFA244(this);
    protected DFA246 dfa246 = new DFA246(this);
    protected DFA255 dfa255 = new DFA255(this);
    protected DFA258 dfa258 = new DFA258(this);
    protected DFA286 dfa286 = new DFA286(this);
    protected DFA290 dfa290 = new DFA290(this);
    protected DFA298 dfa298 = new DFA298(this);
    protected DFA302 dfa302 = new DFA302(this);
    protected DFA309 dfa309 = new DFA309(this);
    protected DFA308 dfa308 = new DFA308(this);
    protected DFA352 dfa352 = new DFA352(this);
    protected DFA357 dfa357 = new DFA357(this);
    static final String DFA3_eotS =
        "\5\uffff";
    static final String DFA3_eofS =
        "\1\2\4\uffff";
    static final String DFA3_minS =
        "\1\4\1\7\1\uffff\1\7\1\uffff";
    static final String DFA3_maxS =
        "\1\156\1\126\1\uffff\1\126\1\uffff";
    static final String DFA3_acceptS =
        "\2\uffff\1\2\1\uffff\1\1";
    static final String DFA3_specialS =
        "\5\uffff}>";
    static final String[] DFA3_transitionS = {
            "\3\2\2\uffff\1\1\3\2\5\uffff\1\2\2\uffff\3\2\3\uffff\1\2\1\uffff"+
            "\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\21\uffff\15\2\11"+
            "\uffff\1\2",
            "\1\4\15\uffff\1\2\76\uffff\3\3",
            "",
            "\1\4\15\uffff\1\2\76\uffff\3\3",
            ""
    };

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "324:6: ( charSet ( ws )? )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA4_eotS =
        "\47\uffff";
    static final String DFA4_eofS =
        "\1\2\46\uffff";
    static final String DFA4_minS =
        "\1\4\1\0\45\uffff";
    static final String DFA4_maxS =
        "\1\156\1\0\45\uffff";
    static final String DFA4_acceptS =
        "\2\uffff\1\2\43\uffff\1\1";
    static final String DFA4_specialS =
        "\1\uffff\1\0\45\uffff}>";
    static final String[] DFA4_transitionS = {
            "\3\2\2\uffff\1\2\1\1\2\2\5\uffff\1\2\2\uffff\3\2\3\uffff\1\2"+
            "\1\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\21\uffff"+
            "\15\2\11\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "325:9: ( imports )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))),""))) ) {s = 38;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA5_eotS =
        "\5\uffff";
    static final String DFA5_eofS =
        "\1\2\4\uffff";
    static final String DFA5_minS =
        "\1\4\1\6\1\uffff\1\6\1\uffff";
    static final String DFA5_maxS =
        "\1\156\1\126\1\uffff\1\126\1\uffff";
    static final String DFA5_acceptS =
        "\2\uffff\1\2\1\uffff\1\1";
    static final String DFA5_specialS =
        "\5\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\1\2\2\2\uffff\4\2\5\uffff\1\2\2\uffff\3\2\3\uffff\1\2\1\uffff"+
            "\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\21\uffff\15\2\11"+
            "\uffff\1\2",
            "\3\4\14\uffff\1\2\76\uffff\3\3",
            "",
            "\3\4\14\uffff\1\2\76\uffff\3\3",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "326:9: ( namespaces )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA8_eotS =
        "\5\uffff";
    static final String DFA8_eofS =
        "\1\1\4\uffff";
    static final String DFA8_minS =
        "\1\4\1\uffff\2\6\1\uffff";
    static final String DFA8_maxS =
        "\1\156\1\uffff\2\126\1\uffff";
    static final String DFA8_acceptS =
        "\1\uffff\1\2\2\uffff\1\1";
    static final String DFA8_specialS =
        "\5\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\2\2\1\2\uffff\4\1\5\uffff\1\1\2\uffff\3\1\3\uffff\1\1\1\uffff"+
            "\23\1\1\uffff\14\1\1\uffff\1\1\6\uffff\2\1\21\uffff\15\1\11"+
            "\uffff\1\1",
            "",
            "\3\4\14\uffff\1\1\76\uffff\3\3",
            "\3\4\14\uffff\1\1\76\uffff\3\3",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "()+ loopback of 333:2: ( namespace ( ws )? )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA17_eotS =
        "\47\uffff";
    static final String DFA17_eofS =
        "\1\1\46\uffff";
    static final String DFA17_minS =
        "\1\4\32\uffff\1\0\13\uffff";
    static final String DFA17_maxS =
        "\1\156\32\uffff\1\0\13\uffff";
    static final String DFA17_acceptS =
        "\1\uffff\1\2\44\uffff\1\1";
    static final String DFA17_specialS =
        "\33\uffff\1\0\13\uffff}>";
    static final String[] DFA17_transitionS = {
            "\3\1\2\uffff\1\1\1\33\2\1\5\uffff\1\1\2\uffff\3\1\3\uffff\1"+
            "\1\1\uffff\23\1\1\uffff\14\1\1\uffff\1\1\6\uffff\2\1\21\uffff"+
            "\15\1\11\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA17_eot = DFA.unpackEncodedString(DFA17_eotS);
    static final short[] DFA17_eof = DFA.unpackEncodedString(DFA17_eofS);
    static final char[] DFA17_min = DFA.unpackEncodedStringToUnsignedChars(DFA17_minS);
    static final char[] DFA17_max = DFA.unpackEncodedStringToUnsignedChars(DFA17_maxS);
    static final short[] DFA17_accept = DFA.unpackEncodedString(DFA17_acceptS);
    static final short[] DFA17_special = DFA.unpackEncodedString(DFA17_specialS);
    static final short[][] DFA17_transition;

    static {
        int numStates = DFA17_transitionS.length;
        DFA17_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA17_transition[i] = DFA.unpackEncodedString(DFA17_transitionS[i]);
        }
    }

    class DFA17 extends DFA {

        public DFA17(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = DFA17_eot;
            this.eof = DFA17_eof;
            this.min = DFA17_min;
            this.max = DFA17_max;
            this.accept = DFA17_accept;
            this.special = DFA17_special;
            this.transition = DFA17_transition;
        }
        public String getDescription() {
            return "()+ loopback of 358:2: ( importItem ( ws )? SEMI ( ws )? )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA17_27 = input.LA(1);

                         
                        int index17_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate((((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")),""))) ) {s = 38;}

                        else if ( ((((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 1;}

                         
                        input.seek(index17_27);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 17, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA27_eotS =
        "\7\uffff";
    static final String DFA27_eofS =
        "\7\uffff";
    static final String DFA27_minS =
        "\1\12\2\7\2\0\2\uffff";
    static final String DFA27_maxS =
        "\1\12\2\126\2\0\2\uffff";
    static final String DFA27_acceptS =
        "\5\uffff\1\1\1\2";
    static final String DFA27_specialS =
        "\3\uffff\1\1\1\0\2\uffff}>";
    static final String[] DFA27_transitionS = {
            "\1\1",
            "\2\3\113\uffff\3\2",
            "\2\4\113\uffff\3\2",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA27_eot = DFA.unpackEncodedString(DFA27_eotS);
    static final short[] DFA27_eof = DFA.unpackEncodedString(DFA27_eofS);
    static final char[] DFA27_min = DFA.unpackEncodedStringToUnsignedChars(DFA27_minS);
    static final char[] DFA27_max = DFA.unpackEncodedStringToUnsignedChars(DFA27_maxS);
    static final short[] DFA27_accept = DFA.unpackEncodedString(DFA27_acceptS);
    static final short[] DFA27_special = DFA.unpackEncodedString(DFA27_specialS);
    static final short[][] DFA27_transition;

    static {
        int numStates = DFA27_transitionS.length;
        DFA27_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA27_transition[i] = DFA.unpackEncodedString(DFA27_transitionS[i]);
        }
    }

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = DFA27_eot;
            this.eof = DFA27_eof;
            this.min = DFA27_min;
            this.max = DFA27_max;
            this.accept = DFA27_accept;
            this.special = DFA27_special;
            this.transition = DFA27_transition;
        }
        public String getDescription() {
            return "361:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA27_4 = input.LA(1);

                         
                        int index27_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isScssSource(),"isScssSource()"),""))) ) {s = 5;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 6;}

                         
                        input.seek(index27_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA27_3 = input.LA(1);

                         
                        int index27_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isScssSource(),"isScssSource()"),""))) ) {s = 5;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 6;}

                         
                        input.seek(index27_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 27, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA20_eotS =
        "\55\uffff";
    static final String DFA20_eofS =
        "\1\7\54\uffff";
    static final String DFA20_minS =
        "\1\4\1\0\1\uffff\3\0\47\uffff";
    static final String DFA20_maxS =
        "\1\156\1\0\1\uffff\3\0\47\uffff";
    static final String DFA20_acceptS =
        "\2\uffff\1\1\3\uffff\1\1\1\2\45\uffff";
    static final String DFA20_specialS =
        "\1\0\1\1\1\uffff\1\2\1\3\1\4\47\uffff}>";
    static final String[] DFA20_transitionS = {
            "\2\7\1\3\2\uffff\4\7\1\uffff\1\7\1\uffff\2\2\1\4\1\6\1\uffff"+
            "\3\7\3\uffff\1\7\1\uffff\23\7\1\uffff\4\7\1\5\7\7\1\uffff\1"+
            "\7\6\uffff\2\7\15\uffff\3\1\1\uffff\15\7\11\uffff\1\7",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "363:43: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA20_0 = input.LA(1);

                         
                        int index20_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA20_0>=WS && LA20_0<=COMMENT)) ) {s = 1;}

                        else if ( ((LA20_0>=ONLY && LA20_0<=NOT)) && (synpred1_Css3())) {s = 2;}

                        else if ( (LA20_0==IDENT) ) {s = 3;}

                        else if ( (LA20_0==GEN) ) {s = 4;}

                        else if ( (LA20_0==HASH_SYMBOL) ) {s = 5;}

                        else if ( (LA20_0==LPAREN) && (synpred1_Css3())) {s = 6;}

                        else if ( (LA20_0==EOF||(LA20_0>=NAMESPACE_SYM && LA20_0<=SEMI)||(LA20_0>=CHARSET_SYM && LA20_0<=MEDIA_SYM)||LA20_0==RBRACE||(LA20_0>=COLON && LA20_0<=MOZ_DOCUMENT_SYM)||LA20_0==WEBKIT_KEYFRAMES_SYM||(LA20_0>=PAGE_SYM && LA20_0<=RIGHTBOTTOM_SYM)||(LA20_0>=MINUS && LA20_0<=TILDE)||(LA20_0>=HASH && LA20_0<=PIPE)||LA20_0==LESS_AND||(LA20_0>=RBRACKET && LA20_0<=SASS_VAR)||(LA20_0>=SASS_CONTENT && LA20_0<=SASS_WHILE)||LA20_0==AT_SIGN) ) {s = 7;}

                         
                        input.seek(index20_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA20_1 = input.LA(1);

                         
                        int index20_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA20_3 = input.LA(1);

                         
                        int index20_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA20_4 = input.LA(1);

                         
                        int index20_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA20_5 = input.LA(1);

                         
                        int index20_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred1_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA24_eotS =
        "\6\uffff";
    static final String DFA24_eofS =
        "\2\2\4\uffff";
    static final String DFA24_minS =
        "\2\4\1\uffff\2\6\1\uffff";
    static final String DFA24_maxS =
        "\2\156\1\uffff\2\126\1\uffff";
    static final String DFA24_acceptS =
        "\2\uffff\1\2\2\uffff\1\1";
    static final String DFA24_specialS =
        "\6\uffff}>";
    static final String[] DFA24_transitionS = {
            "\3\2\2\uffff\2\2\1\3\1\2\1\uffff\1\2\1\uffff\4\2\1\uffff\3\2"+
            "\3\uffff\1\2\1\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2"+
            "\2\15\uffff\3\1\1\uffff\15\2\11\uffff\1\2",
            "\3\2\2\uffff\2\2\1\3\1\2\1\uffff\1\2\1\uffff\4\2\1\uffff\3"+
            "\2\3\uffff\1\2\1\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff"+
            "\2\2\15\uffff\3\1\1\uffff\15\2\11\uffff\1\2",
            "",
            "\1\2\2\5\2\uffff\1\2\1\uffff\1\2\7\uffff\1\2\33\uffff\1\2\1"+
            "\uffff\1\2\1\uffff\4\2\2\uffff\1\2\2\uffff\1\2\6\uffff\1\2\16"+
            "\uffff\3\4",
            "\1\2\2\5\2\uffff\1\2\1\uffff\1\2\7\uffff\1\2\33\uffff\1\2\1"+
            "\uffff\1\2\1\uffff\4\2\2\uffff\1\2\2\uffff\1\2\6\uffff\1\2\16"+
            "\uffff\3\4",
            ""
    };

    static final short[] DFA24_eot = DFA.unpackEncodedString(DFA24_eotS);
    static final short[] DFA24_eof = DFA.unpackEncodedString(DFA24_eofS);
    static final char[] DFA24_min = DFA.unpackEncodedStringToUnsignedChars(DFA24_minS);
    static final char[] DFA24_max = DFA.unpackEncodedStringToUnsignedChars(DFA24_maxS);
    static final short[] DFA24_accept = DFA.unpackEncodedString(DFA24_acceptS);
    static final short[] DFA24_special = DFA.unpackEncodedString(DFA24_specialS);
    static final short[][] DFA24_transition;

    static {
        int numStates = DFA24_transitionS.length;
        DFA24_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA24_transition[i] = DFA.unpackEncodedString(DFA24_transitionS[i]);
        }
    }

    class DFA24 extends DFA {

        public DFA24(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 24;
            this.eot = DFA24_eot;
            this.eof = DFA24_eof;
            this.min = DFA24_min;
            this.max = DFA24_max;
            this.accept = DFA24_accept;
            this.special = DFA24_special;
            this.transition = DFA24_transition;
        }
        public String getDescription() {
            return "()* loopback of 366:61: ( ( ws )? COMMA ( ws )? resourceIdentifier )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA26_eotS =
        "\55\uffff";
    static final String DFA26_eofS =
        "\1\7\54\uffff";
    static final String DFA26_minS =
        "\1\4\1\0\1\uffff\3\0\47\uffff";
    static final String DFA26_maxS =
        "\1\156\1\0\1\uffff\3\0\47\uffff";
    static final String DFA26_acceptS =
        "\2\uffff\1\1\3\uffff\1\1\1\2\45\uffff";
    static final String DFA26_specialS =
        "\1\0\1\1\1\uffff\1\2\1\3\1\4\47\uffff}>";
    static final String[] DFA26_transitionS = {
            "\2\7\1\3\2\uffff\4\7\1\uffff\1\7\1\uffff\2\2\1\4\1\6\1\uffff"+
            "\3\7\3\uffff\1\7\1\uffff\23\7\1\uffff\4\7\1\5\7\7\1\uffff\1"+
            "\7\6\uffff\2\7\15\uffff\3\1\1\uffff\15\7\11\uffff\1\7",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "366:97: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_0 = input.LA(1);

                         
                        int index26_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA26_0>=WS && LA26_0<=COMMENT)) ) {s = 1;}

                        else if ( ((LA26_0>=ONLY && LA26_0<=NOT)) && (synpred2_Css3())) {s = 2;}

                        else if ( (LA26_0==IDENT) ) {s = 3;}

                        else if ( (LA26_0==GEN) ) {s = 4;}

                        else if ( (LA26_0==HASH_SYMBOL) ) {s = 5;}

                        else if ( (LA26_0==LPAREN) && (synpred2_Css3())) {s = 6;}

                        else if ( (LA26_0==EOF||(LA26_0>=NAMESPACE_SYM && LA26_0<=SEMI)||(LA26_0>=CHARSET_SYM && LA26_0<=MEDIA_SYM)||LA26_0==RBRACE||(LA26_0>=COLON && LA26_0<=MOZ_DOCUMENT_SYM)||LA26_0==WEBKIT_KEYFRAMES_SYM||(LA26_0>=PAGE_SYM && LA26_0<=RIGHTBOTTOM_SYM)||(LA26_0>=MINUS && LA26_0<=TILDE)||(LA26_0>=HASH && LA26_0<=PIPE)||LA26_0==LESS_AND||(LA26_0>=RBRACKET && LA26_0<=SASS_VAR)||(LA26_0>=SASS_CONTENT && LA26_0<=SASS_WHILE)||LA26_0==AT_SIGN) ) {s = 7;}

                         
                        input.seek(index26_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA26_1 = input.LA(1);

                         
                        int index26_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA26_3 = input.LA(1);

                         
                        int index26_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA26_4 = input.LA(1);

                         
                        int index26_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA26_5 = input.LA(1);

                         
                        int index26_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA33_eotS =
        "\5\uffff";
    static final String DFA33_eofS =
        "\5\uffff";
    static final String DFA33_minS =
        "\2\4\1\0\2\uffff";
    static final String DFA33_maxS =
        "\2\156\1\0\2\uffff";
    static final String DFA33_acceptS =
        "\3\uffff\1\2\1\1";
    static final String DFA33_specialS =
        "\2\uffff\1\0\2\uffff}>";
    static final String[] DFA33_transitionS = {
            "\1\3\1\2\1\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3"+
            "\3\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2"+
            "\3\15\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\3\1\2\1\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3"+
            "\3\3\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff"+
            "\2\3\15\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
    static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
    static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
    static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
    static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
    static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
    static final short[][] DFA33_transition;

    static {
        int numStates = DFA33_transitionS.length;
        DFA33_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
        }
    }

    class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = DFA33_eot;
            this.eof = DFA33_eof;
            this.min = DFA33_min;
            this.max = DFA33_max;
            this.accept = DFA33_accept;
            this.special = DFA33_special;
            this.transition = DFA33_transition;
        }
        public String getDescription() {
            return "381:26: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA33_2 = input.LA(1);

                         
                        int index33_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_Css3()) ) {s = 4;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index33_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 33, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA37_eotS =
        "\57\uffff";
    static final String DFA37_eofS =
        "\57\uffff";
    static final String DFA37_minS =
        "\1\4\21\0\7\uffff\1\0\3\uffff\6\0\14\uffff";
    static final String DFA37_maxS =
        "\1\156\21\0\7\uffff\1\0\3\uffff\6\0\14\uffff";
    static final String DFA37_acceptS =
        "\22\uffff\1\11\20\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\12\1"+
        "\13\1\14\1\15";
    static final String DFA37_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\7\uffff\1\21\3\uffff\1\22\1\23\1\24\1\25\1"+
        "\26\1\27\14\uffff}>";
    static final String[] DFA37_transitionS = {
            "\1\42\1\uffff\1\6\2\uffff\2\42\1\22\1\41\5\uffff\1\10\2\uffff"+
            "\1\22\1\40\1\36\3\uffff\1\37\1\uffff\1\21\1\42\1\35\20\42\1"+
            "\uffff\1\31\3\22\1\5\1\7\1\1\3\22\1\4\1\22\1\uffff\1\22\6\uffff"+
            "\1\22\1\12\21\uffff\1\20\1\2\1\3\1\11\2\13\1\14\1\42\1\15\2"+
            "\42\1\16\1\17\11\uffff\1\22",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA37_eot = DFA.unpackEncodedString(DFA37_eotS);
    static final short[] DFA37_eof = DFA.unpackEncodedString(DFA37_eofS);
    static final char[] DFA37_min = DFA.unpackEncodedStringToUnsignedChars(DFA37_minS);
    static final char[] DFA37_max = DFA.unpackEncodedStringToUnsignedChars(DFA37_maxS);
    static final short[] DFA37_accept = DFA.unpackEncodedString(DFA37_acceptS);
    static final short[] DFA37_special = DFA.unpackEncodedString(DFA37_specialS);
    static final short[][] DFA37_transition;

    static {
        int numStates = DFA37_transitionS.length;
        DFA37_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA37_transition[i] = DFA.unpackEncodedString(DFA37_transitionS[i]);
        }
    }

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = DFA37_eot;
            this.eof = DFA37_eof;
            this.min = DFA37_min;
            this.max = DFA37_max;
            this.accept = DFA37_accept;
            this.special = DFA37_special;
            this.transition = DFA37_transition;
        }
        public String getDescription() {
            return "387:1: mediaBodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | {...}? sass_extend | {...}? sass_debug | {...}? sass_control | {...}? sass_content | rule | page | fontFace | vendorAtRule | media );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA37_1 = input.LA(1);

                         
                        int index37_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred4_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 35;}

                        else if ( ((synpred5_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 36;}

                        else if ( (((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred6_Css3())) ) {s = 37;}

                        else if ( ((synpred7_Css3()||(synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 38;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index37_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA37_2 = input.LA(1);

                         
                        int index37_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred4_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 35;}

                        else if ( (((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( (((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                         
                        input.seek(index37_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA37_3 = input.LA(1);

                         
                        int index37_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 36;}

                        else if ( (((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( (((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                         
                        input.seek(index37_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA37_4 = input.LA(1);

                         
                        int index37_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred6_Css3())) ) {s = 37;}

                        else if ( ((synpred7_Css3()||(synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 38;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index37_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA37_5 = input.LA(1);

                         
                        int index37_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred6_Css3())) ) {s = 37;}

                        else if ( ((synpred7_Css3()||(synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 38;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index37_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA37_6 = input.LA(1);

                         
                        int index37_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred6_Css3())) ) {s = 37;}

                        else if ( ((synpred7_Css3()||(synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 38;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index37_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA37_7 = input.LA(1);

                         
                        int index37_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred6_Css3())) ) {s = 37;}

                        else if ( ((synpred7_Css3()||(synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 38;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index37_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA37_8 = input.LA(1);

                         
                        int index37_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred6_Css3())) ) {s = 37;}

                        else if ( ((synpred7_Css3()||(synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 38;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index37_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA37_9 = input.LA(1);

                         
                        int index37_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( (((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 39;}

                         
                        input.seek(index37_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA37_10 = input.LA(1);

                         
                        int index37_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||(((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 37;}

                        else if ( (((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 38;}

                         
                        input.seek(index37_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA37_11 = input.LA(1);

                         
                        int index37_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( (((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 40;}

                         
                        input.seek(index37_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA37_12 = input.LA(1);

                         
                        int index37_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( (((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 41;}

                         
                        input.seek(index37_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA37_13 = input.LA(1);

                         
                        int index37_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( (((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 41;}

                         
                        input.seek(index37_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA37_14 = input.LA(1);

                         
                        int index37_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( (((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 41;}

                         
                        input.seek(index37_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA37_15 = input.LA(1);

                         
                        int index37_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( (((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 41;}

                         
                        input.seek(index37_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA37_16 = input.LA(1);

                         
                        int index37_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( (((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 42;}

                         
                        input.seek(index37_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA37_17 = input.LA(1);

                         
                        int index37_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( (((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index37_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA37_25 = input.LA(1);

                         
                        int index37_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred6_Css3())) ) {s = 37;}

                        else if ( ((synpred7_Css3()||(synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 38;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index37_25);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA37_29 = input.LA(1);

                         
                        int index37_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( (((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (true) ) {s = 44;}

                         
                        input.seek(index37_29);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA37_30 = input.LA(1);

                         
                        int index37_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( (((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index37_30);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA37_31 = input.LA(1);

                         
                        int index37_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( (((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index37_31);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA37_32 = input.LA(1);

                         
                        int index37_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( (((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index37_32);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA37_33 = input.LA(1);

                         
                        int index37_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( (((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (true) ) {s = 46;}

                         
                        input.seek(index37_33);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA37_34 = input.LA(1);

                         
                        int index37_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( (((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                         
                        input.seek(index37_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 37, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA40_eotS =
        "\56\uffff";
    static final String DFA40_eofS =
        "\1\2\55\uffff";
    static final String DFA40_minS =
        "\1\4\1\0\45\uffff\1\0\6\uffff";
    static final String DFA40_maxS =
        "\1\156\1\0\45\uffff\1\0\6\uffff";
    static final String DFA40_acceptS =
        "\2\uffff\1\2\52\uffff\1\1";
    static final String DFA40_specialS =
        "\1\uffff\1\0\45\uffff\1\1\6\uffff}>";
    static final String[] DFA40_transitionS = {
            "\3\2\2\uffff\2\2\1\47\3\2\3\uffff\1\2\2\uffff\3\2\3\uffff\1"+
            "\2\1\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\15\uffff"+
            "\3\1\1\uffff\15\2\11\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "()* loopback of 406:15: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA40_1 = input.LA(1);

                         
                        int index40_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index40_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA40_39 = input.LA(1);

                         
                        int index40_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index40_39);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA45_eotS =
        "\4\uffff";
    static final String DFA45_eofS =
        "\2\2\2\uffff";
    static final String DFA45_minS =
        "\2\4\2\uffff";
    static final String DFA45_maxS =
        "\2\156\2\uffff";
    static final String DFA45_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA45_specialS =
        "\4\uffff}>";
    static final String[] DFA45_transitionS = {
            "\3\2\2\uffff\6\2\1\3\2\uffff\1\2\2\uffff\3\2\3\uffff\1\2\1\uffff"+
            "\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\15\uffff\3\1\1\uffff"+
            "\15\2\11\uffff\1\2",
            "\3\2\2\uffff\6\2\1\3\2\uffff\1\2\2\uffff\3\2\3\uffff\1\2\1"+
            "\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\15\uffff\3"+
            "\1\1\uffff\15\2\11\uffff\1\2",
            "",
            ""
    };

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "()* loopback of 410:42: ( ( ws )? AND ( ws )? mediaExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA48_eotS =
        "\4\uffff";
    static final String DFA48_eofS =
        "\2\2\2\uffff";
    static final String DFA48_minS =
        "\2\4\2\uffff";
    static final String DFA48_maxS =
        "\2\156\2\uffff";
    static final String DFA48_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA48_specialS =
        "\4\uffff}>";
    static final String[] DFA48_transitionS = {
            "\3\2\2\uffff\6\2\1\3\2\uffff\1\2\2\uffff\3\2\3\uffff\1\2\1\uffff"+
            "\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\15\uffff\3\1\1\uffff"+
            "\15\2\11\uffff\1\2",
            "\3\2\2\uffff\6\2\1\3\2\uffff\1\2\2\uffff\3\2\3\uffff\1\2\1"+
            "\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\15\uffff\3"+
            "\1\1\uffff\15\2\11\uffff\1\2",
            "",
            ""
    };

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "()* loopback of 411:20: ( ( ws )? AND ( ws )? mediaExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA52_eotS =
        "\4\uffff";
    static final String DFA52_eofS =
        "\4\uffff";
    static final String DFA52_minS =
        "\2\24\2\uffff";
    static final String DFA52_maxS =
        "\2\126\2\uffff";
    static final String DFA52_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA52_specialS =
        "\4\uffff}>";
    static final String[] DFA52_transitionS = {
            "\1\3\1\2\76\uffff\3\1",
            "\1\3\1\2\76\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "424:29: ( mediaFeatureValue )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA56_eotS =
        "\34\uffff";
    static final String DFA56_eofS =
        "\34\uffff";
    static final String DFA56_minS =
        "\1\4\1\uffff\27\0\3\uffff";
    static final String DFA56_maxS =
        "\1\144\1\uffff\27\0\3\uffff";
    static final String DFA56_acceptS =
        "\1\uffff\1\1\31\uffff\1\2";
    static final String DFA56_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\3\uffff}>";
    static final String[] DFA56_transitionS = {
            "\1\25\1\uffff\1\3\1\17\1\23\2\25\1\uffff\1\25\4\uffff\1\1\1"+
            "\22\1\1\2\uffff\2\25\3\uffff\1\25\1\5\23\25\1\uffff\2\2\1\uffff"+
            "\1\20\1\27\1\24\17\uffff\1\26\1\1\1\4\1\6\1\7\1\10\1\11\1\12"+
            "\1\13\1\14\1\15\1\16\1\21\1\30\4\uffff\15\25",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "430:5: ({...}? cp_expression | expression )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA56_2 = input.LA(1);

                         
                        int index56_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA56_3 = input.LA(1);

                         
                        int index56_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA56_4 = input.LA(1);

                         
                        int index56_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA56_5 = input.LA(1);

                         
                        int index56_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA56_6 = input.LA(1);

                         
                        int index56_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA56_7 = input.LA(1);

                         
                        int index56_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA56_8 = input.LA(1);

                         
                        int index56_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA56_9 = input.LA(1);

                         
                        int index56_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA56_10 = input.LA(1);

                         
                        int index56_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA56_11 = input.LA(1);

                         
                        int index56_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA56_12 = input.LA(1);

                         
                        int index56_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA56_13 = input.LA(1);

                         
                        int index56_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA56_14 = input.LA(1);

                         
                        int index56_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA56_15 = input.LA(1);

                         
                        int index56_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA56_16 = input.LA(1);

                         
                        int index56_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 1;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 27;}

                         
                        input.seek(index56_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA56_17 = input.LA(1);

                         
                        int index56_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 1;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 27;}

                         
                        input.seek(index56_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA56_18 = input.LA(1);

                         
                        int index56_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA56_19 = input.LA(1);

                         
                        int index56_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA56_20 = input.LA(1);

                         
                        int index56_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index56_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA56_21 = input.LA(1);

                         
                        int index56_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 1;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 27;}

                         
                        input.seek(index56_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA56_22 = input.LA(1);

                         
                        int index56_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 1;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 27;}

                         
                        input.seek(index56_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA56_23 = input.LA(1);

                         
                        int index56_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 27;}

                         
                        input.seek(index56_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA56_24 = input.LA(1);

                         
                        int index56_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 27;}

                         
                        input.seek(index56_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 56, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA60_eotS =
        "\5\uffff";
    static final String DFA60_eofS =
        "\2\3\3\uffff";
    static final String DFA60_minS =
        "\2\4\1\0\2\uffff";
    static final String DFA60_maxS =
        "\2\156\1\0\2\uffff";
    static final String DFA60_acceptS =
        "\3\uffff\1\2\1\1";
    static final String DFA60_specialS =
        "\2\uffff\1\0\2\uffff}>";
    static final String[] DFA60_transitionS = {
            "\1\3\1\2\1\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3"+
            "\3\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2"+
            "\3\15\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\3\1\2\1\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3"+
            "\3\3\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff"+
            "\2\3\15\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA60_eot = DFA.unpackEncodedString(DFA60_eotS);
    static final short[] DFA60_eof = DFA.unpackEncodedString(DFA60_eofS);
    static final char[] DFA60_min = DFA.unpackEncodedStringToUnsignedChars(DFA60_minS);
    static final char[] DFA60_max = DFA.unpackEncodedStringToUnsignedChars(DFA60_maxS);
    static final short[] DFA60_accept = DFA.unpackEncodedString(DFA60_acceptS);
    static final short[] DFA60_special = DFA.unpackEncodedString(DFA60_specialS);
    static final short[][] DFA60_transition;

    static {
        int numStates = DFA60_transitionS.length;
        DFA60_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA60_transition[i] = DFA.unpackEncodedString(DFA60_transitionS[i]);
        }
    }

    class DFA60 extends DFA {

        public DFA60(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 60;
            this.eot = DFA60_eot;
            this.eof = DFA60_eof;
            this.min = DFA60_min;
            this.max = DFA60_max;
            this.accept = DFA60_accept;
            this.special = DFA60_special;
            this.transition = DFA60_transition;
        }
        public String getDescription() {
            return "444:21: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA60_2 = input.LA(1);

                         
                        int index60_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_Css3()) ) {s = 4;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index60_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 60, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA64_eotS =
        "\63\uffff";
    static final String DFA64_eofS =
        "\56\uffff\1\15\3\uffff\1\15";
    static final String DFA64_minS =
        "\1\4\1\6\2\25\1\uffff\3\6\1\15\1\10\2\6\1\7\1\uffff\6\25\4\6\1\uffff"+
        "\1\6\1\4\1\6\1\15\1\10\2\6\1\7\1\uffff\5\4\2\6\4\uffff\1\0\1\4\3"+
        "\uffff\1\4";
    static final String DFA64_maxS =
        "\2\156\2\126\1\uffff\10\126\1\uffff\6\126\1\156\3\126\1\uffff\1"+
        "\126\1\144\6\126\1\uffff\5\144\1\126\1\156\4\uffff\1\0\1\156\3\uffff"+
        "\1\156";
    static final String DFA64_acceptS =
        "\4\uffff\1\4\10\uffff\1\6\12\uffff\1\5\10\uffff\1\7\7\uffff\1\1"+
        "\1\2\1\3\1\1\2\uffff\1\10\1\11\1\12\1\uffff";
    static final String DFA64_specialS =
        "\24\uffff\1\3\1\2\22\uffff\1\0\4\uffff\1\1\5\uffff}>";
    static final String[] DFA64_transitionS = {
            "\1\15\1\uffff\1\4\2\uffff\1\15\1\14\1\4\1\5\5\uffff\1\4\2\uffff"+
            "\1\4\1\13\1\11\3\uffff\1\12\1\uffff\1\6\1\7\1\10\20\15\1\uffff"+
            "\6\4\1\1\5\4\1\uffff\1\4\6\uffff\1\4\1\15\21\uffff\1\15\1\2"+
            "\1\3\1\15\2\16\1\17\1\15\1\20\1\23\1\15\1\21\1\22\11\uffff\1"+
            "\4",
            "\1\24\4\uffff\1\4\1\uffff\1\4\4\uffff\1\4\2\uffff\1\4\33\uffff"+
            "\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\2\uffff\1\4\6\uffff"+
            "\1\4\16\uffff\3\4\27\uffff\1\4",
            "\1\15\76\uffff\3\25",
            "\1\15\76\uffff\3\26",
            "",
            "\1\30\11\uffff\4\30\1\uffff\1\15\37\uffff\1\30\36\uffff\3\27",
            "\1\30\6\uffff\1\30\7\uffff\1\32\76\uffff\3\31",
            "\1\30\16\uffff\1\15\76\uffff\3\33",
            "\1\30\7\uffff\1\15\76\uffff\3\34",
            "\1\30\14\uffff\1\15\2\uffff\3\30\71\uffff\3\35",
            "\2\30\15\uffff\1\15\76\uffff\3\36",
            "\2\30\5\uffff\1\30\7\uffff\1\15\76\uffff\3\37",
            "\2\41\14\uffff\1\15\76\uffff\3\40",
            "",
            "\1\15\76\uffff\3\42",
            "\1\15\76\uffff\3\43",
            "\1\15\76\uffff\3\44",
            "\1\15\76\uffff\3\45",
            "\1\15\76\uffff\3\46",
            "\1\15\76\uffff\3\47",
            "\1\4\4\uffff\1\4\1\uffff\1\4\4\uffff\1\4\1\51\1\uffff\1\4\33"+
            "\uffff\14\4\1\uffff\1\4\6\uffff\1\4\16\uffff\3\50\27\uffff\1"+
            "\4",
            "\1\54\16\uffff\1\15\76\uffff\3\25",
            "\1\55\16\uffff\1\15\76\uffff\3\26",
            "\1\30\11\uffff\4\30\1\uffff\1\15\37\uffff\1\30\36\uffff\3\27",
            "",
            "\1\30\6\uffff\1\30\7\uffff\1\32\76\uffff\3\31",
            "\1\15\1\uffff\1\56\4\15\1\uffff\1\15\4\uffff\3\15\2\uffff\2"+
            "\15\3\uffff\25\15\1\uffff\2\15\1\uffff\3\15\17\uffff\21\15\1"+
            "\uffff\15\15",
            "\1\30\16\uffff\1\15\76\uffff\3\33",
            "\1\30\7\uffff\1\15\76\uffff\3\34",
            "\1\30\14\uffff\1\15\2\uffff\3\30\71\uffff\3\35",
            "\2\30\15\uffff\1\15\76\uffff\3\36",
            "\2\30\5\uffff\1\30\7\uffff\1\15\76\uffff\3\37",
            "\2\41\14\uffff\1\15\76\uffff\3\40",
            "",
            "\1\57\1\uffff\5\57\1\uffff\1\57\4\uffff\3\57\1\uffff\1\15\2"+
            "\57\3\uffff\25\57\1\uffff\2\57\1\uffff\3\57\17\uffff\16\57\3"+
            "\42\1\uffff\15\57",
            "\1\60\1\uffff\5\60\1\uffff\1\60\4\uffff\3\60\1\uffff\1\15\2"+
            "\60\3\uffff\25\60\1\uffff\2\60\1\uffff\3\60\17\uffff\16\60\3"+
            "\43\1\uffff\15\60",
            "\1\60\4\uffff\2\60\1\uffff\1\60\10\uffff\1\15\2\60\3\uffff"+
            "\1\60\1\uffff\23\60\26\uffff\1\60\15\uffff\3\44\1\uffff\15\60",
            "\1\60\4\uffff\2\60\1\uffff\1\60\10\uffff\1\15\2\60\3\uffff"+
            "\1\60\1\uffff\23\60\26\uffff\1\60\15\uffff\3\45\1\uffff\15\60",
            "\1\60\1\uffff\5\60\1\uffff\1\60\4\uffff\3\60\1\uffff\1\15\2"+
            "\60\3\uffff\25\60\1\uffff\2\60\1\uffff\3\60\17\uffff\16\60\3"+
            "\46\1\uffff\15\60",
            "\1\61\16\uffff\1\15\76\uffff\3\47",
            "\1\4\4\uffff\1\4\1\uffff\1\4\4\uffff\1\4\1\51\1\uffff\1\4\33"+
            "\uffff\14\4\1\uffff\1\4\6\uffff\1\4\16\uffff\3\50\27\uffff\1"+
            "\4",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\11\15\1\30\2\15\1\uffff\3\15\1\uffff\3\15\3\uffff\42\15\1"+
            "\uffff\1\15\6\uffff\17\15\3\62\24\15\3\uffff\1\15",
            "",
            "",
            "",
            "\11\15\1\30\2\15\1\uffff\3\15\1\uffff\3\15\3\uffff\42\15\1"+
            "\uffff\1\15\6\uffff\17\15\3\62\24\15\3\uffff\1\15"
    };

    static final short[] DFA64_eot = DFA.unpackEncodedString(DFA64_eotS);
    static final short[] DFA64_eof = DFA.unpackEncodedString(DFA64_eofS);
    static final char[] DFA64_min = DFA.unpackEncodedStringToUnsignedChars(DFA64_minS);
    static final char[] DFA64_max = DFA.unpackEncodedStringToUnsignedChars(DFA64_maxS);
    static final short[] DFA64_accept = DFA.unpackEncodedString(DFA64_acceptS);
    static final short[] DFA64_special = DFA.unpackEncodedString(DFA64_specialS);
    static final short[][] DFA64_transition;

    static {
        int numStates = DFA64_transitionS.length;
        DFA64_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA64_transition[i] = DFA.unpackEncodedString(DFA64_transitionS[i]);
        }
    }

    class DFA64 extends DFA {

        public DFA64(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = DFA64_eot;
            this.eof = DFA64_eof;
            this.min = DFA64_min;
            this.max = DFA64_max;
            this.accept = DFA64_accept;
            this.special = DFA64_special;
            this.transition = DFA64_transition;
        }
        public String getDescription() {
            return "450:1: bodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | {...}? ( cp_mixin_call ( ws )? SEMI )=> cp_mixin_call | {...}? ( cp_mixin_call )=> cp_mixin_call | rule | at_rule | {...}? cp_variable_declaration | {...}? importItem | {...}? sass_debug | {...}? sass_control | {...}? sass_function_declaration );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA64_40 = input.LA(1);

                         
                        int index64_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA64_40==LPAREN) && (synpred10_Css3())) {s = 41;}

                        else if ( ((LA64_40>=WS && LA64_40<=COMMENT)) ) {s = 40;}

                        else if ( (LA64_40==IDENT||LA64_40==COMMA||LA64_40==LBRACE||LA64_40==GEN||LA64_40==COLON||(LA64_40>=MINUS && LA64_40<=PIPE)||LA64_40==LESS_AND||LA64_40==RBRACKET||LA64_40==AT_SIGN) ) {s = 4;}

                         
                        input.seek(index64_40);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA64_45 = input.LA(1);

                         
                        int index64_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 42;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 43;}

                         
                        input.seek(index64_45);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA64_21 = input.LA(1);

                         
                        int index64_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA64_21==IDENT) && (synpred10_Css3())) {s = 44;}

                        else if ( ((LA64_21>=WS && LA64_21<=COMMENT)) ) {s = 21;}

                        else if ( (LA64_21==COLON) ) {s = 13;}

                         
                        input.seek(index64_21);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA64_20 = input.LA(1);

                         
                        int index64_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA64_20>=WS && LA64_20<=COMMENT)) ) {s = 40;}

                        else if ( (LA64_20==LPAREN) && (synpred10_Css3())) {s = 41;}

                        else if ( (LA64_20==IDENT||LA64_20==COMMA||LA64_20==LBRACE||LA64_20==GEN||LA64_20==COLON||(LA64_20>=MINUS && LA64_20<=PIPE)||LA64_20==LESS_AND||LA64_20==RBRACKET||LA64_20==AT_SIGN) ) {s = 4;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 42;}

                        else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 43;}

                         
                        input.seek(index64_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 64, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA87_eotS =
        "\4\uffff";
    static final String DFA87_eofS =
        "\4\uffff";
    static final String DFA87_minS =
        "\2\13\2\uffff";
    static final String DFA87_maxS =
        "\2\126\2\uffff";
    static final String DFA87_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA87_specialS =
        "\4\uffff}>";
    static final String[] DFA87_transitionS = {
            "\1\3\1\uffff\1\2\106\uffff\3\1",
            "\1\3\1\uffff\1\2\106\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "()* loopback of 524:25: ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA94_eotS =
        "\5\uffff";
    static final String DFA94_eofS =
        "\5\uffff";
    static final String DFA94_minS =
        "\1\4\1\uffff\2\15\1\uffff";
    static final String DFA94_maxS =
        "\1\144\1\uffff\2\126\1\uffff";
    static final String DFA94_acceptS =
        "\1\uffff\1\1\2\uffff\1\2";
    static final String DFA94_specialS =
        "\5\uffff}>";
    static final String[] DFA94_transitionS = {
            "\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\5\uffff\1\1\3\uffff"+
            "\2\1\3\uffff\1\1\1\uffff\3\1\20\2\1\uffff\1\1\3\uffff\3\1\3"+
            "\uffff\1\1\12\uffff\1\1\21\uffff\15\1",
            "",
            "\1\4\7\uffff\1\1\76\uffff\3\3",
            "\1\4\7\uffff\1\1\76\uffff\3\3",
            ""
    };

    static final short[] DFA94_eot = DFA.unpackEncodedString(DFA94_eotS);
    static final short[] DFA94_eof = DFA.unpackEncodedString(DFA94_eofS);
    static final char[] DFA94_min = DFA.unpackEncodedStringToUnsignedChars(DFA94_minS);
    static final char[] DFA94_max = DFA.unpackEncodedStringToUnsignedChars(DFA94_maxS);
    static final short[] DFA94_accept = DFA.unpackEncodedString(DFA94_acceptS);
    static final short[] DFA94_special = DFA.unpackEncodedString(DFA94_specialS);
    static final short[][] DFA94_transition;

    static {
        int numStates = DFA94_transitionS.length;
        DFA94_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA94_transition[i] = DFA.unpackEncodedString(DFA94_transitionS[i]);
        }
    }

    class DFA94 extends DFA {

        public DFA94(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = DFA94_eot;
            this.eof = DFA94_eof;
            this.min = DFA94_min;
            this.max = DFA94_max;
            this.accept = DFA94_accept;
            this.special = DFA94_special;
            this.transition = DFA94_transition;
        }
        public String getDescription() {
            return "532:14: ( propertyDeclaration | margin )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA98_eotS =
        "\5\uffff";
    static final String DFA98_eofS =
        "\5\uffff";
    static final String DFA98_minS =
        "\1\4\1\uffff\2\15\1\uffff";
    static final String DFA98_maxS =
        "\1\144\1\uffff\2\126\1\uffff";
    static final String DFA98_acceptS =
        "\1\uffff\1\1\2\uffff\1\2";
    static final String DFA98_specialS =
        "\5\uffff}>";
    static final String[] DFA98_transitionS = {
            "\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\5\uffff\1\1\3\uffff"+
            "\2\1\3\uffff\1\1\1\uffff\3\1\20\2\1\uffff\1\1\3\uffff\3\1\3"+
            "\uffff\1\1\12\uffff\1\1\21\uffff\15\1",
            "",
            "\1\4\7\uffff\1\1\76\uffff\3\3",
            "\1\4\7\uffff\1\1\76\uffff\3\3",
            ""
    };

    static final short[] DFA98_eot = DFA.unpackEncodedString(DFA98_eotS);
    static final short[] DFA98_eof = DFA.unpackEncodedString(DFA98_eofS);
    static final char[] DFA98_min = DFA.unpackEncodedStringToUnsignedChars(DFA98_minS);
    static final char[] DFA98_max = DFA.unpackEncodedStringToUnsignedChars(DFA98_maxS);
    static final short[] DFA98_accept = DFA.unpackEncodedString(DFA98_acceptS);
    static final short[] DFA98_special = DFA.unpackEncodedString(DFA98_specialS);
    static final short[][] DFA98_transition;

    static {
        int numStates = DFA98_transitionS.length;
        DFA98_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA98_transition[i] = DFA.unpackEncodedString(DFA98_transitionS[i]);
        }
    }

    class DFA98 extends DFA {

        public DFA98(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = DFA98_eot;
            this.eof = DFA98_eof;
            this.min = DFA98_min;
            this.max = DFA98_max;
            this.accept = DFA98_accept;
            this.special = DFA98_special;
            this.transition = DFA98_transition;
        }
        public String getDescription() {
            return "532:60: ( propertyDeclaration | margin )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA117_eotS =
        "\5\uffff";
    static final String DFA117_eofS =
        "\5\uffff";
    static final String DFA117_minS =
        "\2\4\1\0\2\uffff";
    static final String DFA117_maxS =
        "\2\156\1\0\2\uffff";
    static final String DFA117_acceptS =
        "\3\uffff\1\2\1\1";
    static final String DFA117_specialS =
        "\2\uffff\1\0\2\uffff}>";
    static final String[] DFA117_transitionS = {
            "\1\3\1\2\1\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3"+
            "\3\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2"+
            "\3\15\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\3\1\2\1\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3"+
            "\3\3\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff"+
            "\2\3\15\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "619:24: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA117_2 = input.LA(1);

                         
                        int index117_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_Css3()) ) {s = 4;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index117_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA121_eotS =
        "\64\uffff";
    static final String DFA121_eofS =
        "\64\uffff";
    static final String DFA121_minS =
        "\1\4\12\0\7\uffff\1\0\3\uffff\20\0\16\uffff";
    static final String DFA121_maxS =
        "\1\156\12\0\7\uffff\1\0\3\uffff\20\0\16\uffff";
    static final String DFA121_acceptS =
        "\13\uffff\7\7\1\uffff\3\7\20\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\17"+
        "\1\10\1\11\1\12\1\13\1\14\1\15\1\16";
    static final String DFA121_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\7\uffff\1\13\3\uffff"+
        "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\16\uffff}>";
    static final String[] DFA121_transitionS = {
            "\1\45\1\uffff\1\4\2\uffff\1\45\1\44\1\24\1\12\5\uffff\1\6\2"+
            "\uffff\1\23\1\33\1\31\3\uffff\1\32\1\uffff\1\26\1\27\1\30\20"+
            "\45\1\uffff\1\22\1\15\1\13\1\15\1\3\1\10\1\5\1\17\1\25\1\20"+
            "\1\7\1\16\1\uffff\1\14\6\uffff\1\24\1\2\21\uffff\1\42\1\1\1"+
            "\11\1\40\2\41\1\34\1\45\1\35\1\45\1\43\1\36\1\37\11\uffff\1"+
            "\21",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA121_eot = DFA.unpackEncodedString(DFA121_eotS);
    static final short[] DFA121_eof = DFA.unpackEncodedString(DFA121_eofS);
    static final char[] DFA121_min = DFA.unpackEncodedStringToUnsignedChars(DFA121_minS);
    static final char[] DFA121_max = DFA.unpackEncodedStringToUnsignedChars(DFA121_maxS);
    static final short[] DFA121_accept = DFA.unpackEncodedString(DFA121_acceptS);
    static final short[] DFA121_special = DFA.unpackEncodedString(DFA121_specialS);
    static final short[][] DFA121_transition;

    static {
        int numStates = DFA121_transitionS.length;
        DFA121_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA121_transition[i] = DFA.unpackEncodedString(DFA121_transitionS[i]);
        }
    }

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = DFA121_eot;
            this.eof = DFA121_eof;
            this.min = DFA121_min;
            this.max = DFA121_max;
            this.accept = DFA121_accept;
            this.special = DFA121_special;
            this.transition = DFA121_transition;
        }
        public String getDescription() {
            return "625:1: declaration : ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_nested_properties )=> sass_nested_properties | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call | ( selectorsGroup ( ws )? LBRACE )=> rule | {...}? at_rule | {...}? sass_control | {...}? sass_extend | {...}? sass_debug | {...}? sass_content | {...}? sass_function_return | {...}? importItem | GEN );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA121_0 = input.LA(1);

                         
                        int index121_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA121_0==SASS_MIXIN) ) {s = 1;}

                        else if ( (LA121_0==SASS_VAR) ) {s = 2;}

                        else if ( (LA121_0==HASH_SYMBOL) ) {s = 3;}

                        else if ( (LA121_0==IDENT) ) {s = 4;}

                        else if ( (LA121_0==DOT) ) {s = 5;}

                        else if ( (LA121_0==GEN) ) {s = 6;}

                        else if ( (LA121_0==STAR) ) {s = 7;}

                        else if ( (LA121_0==HASH) ) {s = 8;}

                        else if ( (LA121_0==SASS_INCLUDE) ) {s = 9;}

                        else if ( (LA121_0==MEDIA_SYM) ) {s = 10;}

                        else if ( (LA121_0==GREATER) && (synpred21_Css3())) {s = 11;}

                        else if ( (LA121_0==LESS_AND) && (synpred21_Css3())) {s = 12;}

                        else if ( (LA121_0==PLUS||LA121_0==TILDE) && (synpred21_Css3())) {s = 13;}

                        else if ( (LA121_0==PIPE) && (synpred21_Css3())) {s = 14;}

                        else if ( (LA121_0==LBRACKET) && (synpred21_Css3())) {s = 15;}

                        else if ( (LA121_0==SASS_EXTEND_ONLY_SELECTOR) && (synpred21_Css3())) {s = 16;}

                        else if ( (LA121_0==AT_SIGN) && (synpred21_Css3())) {s = 17;}

                        else if ( (LA121_0==MINUS) ) {s = 18;}

                        else if ( (LA121_0==COLON) && (synpred21_Css3())) {s = 19;}

                        else if ( (LA121_0==COMMA||LA121_0==RBRACKET) && (synpred21_Css3())) {s = 20;}

                        else if ( (LA121_0==DCOLON) && (synpred21_Css3())) {s = 21;}

                        else if ( (LA121_0==PAGE_SYM) ) {s = 22;}

                        else if ( (LA121_0==COUNTER_STYLE_SYM) ) {s = 23;}

                        else if ( (LA121_0==FONT_FACE_SYM) ) {s = 24;}

                        else if ( (LA121_0==MOZ_DOCUMENT_SYM) ) {s = 25;}

                        else if ( (LA121_0==WEBKIT_KEYFRAMES_SYM) ) {s = 26;}

                        else if ( (LA121_0==AT_IDENT) ) {s = 27;}

                        else if ( (LA121_0==SASS_IF) ) {s = 28;}

                        else if ( (LA121_0==SASS_FOR) ) {s = 29;}

                        else if ( (LA121_0==SASS_EACH) ) {s = 30;}

                        else if ( (LA121_0==SASS_WHILE) ) {s = 31;}

                        else if ( (LA121_0==SASS_EXTEND) ) {s = 32;}

                        else if ( ((LA121_0>=SASS_DEBUG && LA121_0<=SASS_WARN)) ) {s = 33;}

                        else if ( (LA121_0==SASS_CONTENT) ) {s = 34;}

                        else if ( (LA121_0==SASS_RETURN) ) {s = 35;}

                        else if ( (LA121_0==IMPORT_SYM) ) {s = 36;}

                        else if ( (LA121_0==NAMESPACE_SYM||LA121_0==CHARSET_SYM||(LA121_0>=TOPLEFTCORNER_SYM && LA121_0<=RIGHTBOTTOM_SYM)||LA121_0==SASS_ELSE||LA121_0==SASS_FUNCTION) ) {s = 37;}

                         
                        input.seek(index121_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA121_1 = input.LA(1);

                         
                        int index121_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( ((synpred19_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 42;}

                         
                        input.seek(index121_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA121_2 = input.LA(1);

                         
                        int index121_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 39;}

                        else if ( ((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||(((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 40;}

                        else if ( (((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 41;}

                         
                        input.seek(index121_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA121_3 = input.LA(1);

                         
                        int index121_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Css3()) ) {s = 39;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred17_Css3())) ) {s = 40;}

                        else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred18_Css3())) ) {s = 41;}

                        else if ( (synpred21_Css3()) ) {s = 21;}

                         
                        input.seek(index121_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA121_4 = input.LA(1);

                         
                        int index121_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Css3()) ) {s = 39;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred17_Css3())) ) {s = 40;}

                        else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred18_Css3())) ) {s = 41;}

                        else if ( (synpred21_Css3()) ) {s = 21;}

                         
                        input.seek(index121_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA121_5 = input.LA(1);

                         
                        int index121_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Css3()) ) {s = 39;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred17_Css3())) ) {s = 40;}

                        else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred18_Css3())) ) {s = 41;}

                        else if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 42;}

                        else if ( ((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 43;}

                        else if ( (synpred21_Css3()) ) {s = 21;}

                         
                        input.seek(index121_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA121_6 = input.LA(1);

                         
                        int index121_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Css3()) ) {s = 39;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred17_Css3())) ) {s = 40;}

                        else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred18_Css3())) ) {s = 41;}

                        else if ( (synpred21_Css3()) ) {s = 21;}

                        else if ( (true) ) {s = 44;}

                         
                        input.seek(index121_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA121_7 = input.LA(1);

                         
                        int index121_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred17_Css3())) ) {s = 40;}

                        else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred18_Css3())) ) {s = 41;}

                        else if ( (synpred21_Css3()) ) {s = 21;}

                         
                        input.seek(index121_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA121_8 = input.LA(1);

                         
                        int index121_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Css3()) ) {s = 39;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred17_Css3())) ) {s = 40;}

                        else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred18_Css3())) ) {s = 41;}

                        else if ( (synpred21_Css3()) ) {s = 21;}

                         
                        input.seek(index121_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA121_9 = input.LA(1);

                         
                        int index121_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( ((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 43;}

                         
                        input.seek(index121_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA121_10 = input.LA(1);

                         
                        int index121_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 45;}

                         
                        input.seek(index121_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA121_18 = input.LA(1);

                         
                        int index121_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Css3()) ) {s = 39;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred17_Css3())) ) {s = 40;}

                        else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred18_Css3())) ) {s = 41;}

                        else if ( (synpred21_Css3()) ) {s = 21;}

                         
                        input.seek(index121_18);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA121_22 = input.LA(1);

                         
                        int index121_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 45;}

                         
                        input.seek(index121_22);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA121_23 = input.LA(1);

                         
                        int index121_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 45;}

                         
                        input.seek(index121_23);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA121_24 = input.LA(1);

                         
                        int index121_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 45;}

                         
                        input.seek(index121_24);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA121_25 = input.LA(1);

                         
                        int index121_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 45;}

                         
                        input.seek(index121_25);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA121_26 = input.LA(1);

                         
                        int index121_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 45;}

                         
                        input.seek(index121_26);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA121_27 = input.LA(1);

                         
                        int index121_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 45;}

                         
                        input.seek(index121_27);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA121_28 = input.LA(1);

                         
                        int index121_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 46;}

                         
                        input.seek(index121_28);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA121_29 = input.LA(1);

                         
                        int index121_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 46;}

                         
                        input.seek(index121_29);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA121_30 = input.LA(1);

                         
                        int index121_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 46;}

                         
                        input.seek(index121_30);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA121_31 = input.LA(1);

                         
                        int index121_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 46;}

                         
                        input.seek(index121_31);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA121_32 = input.LA(1);

                         
                        int index121_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 47;}

                         
                        input.seek(index121_32);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA121_33 = input.LA(1);

                         
                        int index121_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 48;}

                         
                        input.seek(index121_33);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA121_34 = input.LA(1);

                         
                        int index121_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 49;}

                         
                        input.seek(index121_34);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA121_35 = input.LA(1);

                         
                        int index121_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 50;}

                         
                        input.seek(index121_35);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA121_36 = input.LA(1);

                         
                        int index121_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 51;}

                         
                        input.seek(index121_36);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA121_37 = input.LA(1);

                         
                        int index121_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                         
                        input.seek(index121_37);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 121, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA125_eotS =
        "\43\uffff";
    static final String DFA125_eofS =
        "\43\uffff";
    static final String DFA125_minS =
        "\3\6\1\0\1\uffff\3\0\3\6\5\uffff\2\6\1\0\1\uffff\3\0\3\6\1\0\3\6"+
        "\1\0\1\uffff\2\6\1\0";
    static final String DFA125_maxS =
        "\3\156\1\0\1\uffff\3\0\1\156\2\126\5\uffff\2\156\1\0\1\uffff\3\0"+
        "\1\156\2\126\1\0\3\126\1\0\1\uffff\2\126\1\0";
    static final String DFA125_acceptS =
        "\4\uffff\1\2\6\uffff\5\1\3\uffff\1\1\13\uffff\1\1\3\uffff";
    static final String DFA125_specialS =
        "\1\27\1\25\1\10\1\3\1\uffff\1\1\1\12\1\26\1\14\1\24\1\21\5\uffff"+
        "\1\32\1\20\1\7\1\uffff\1\15\1\16\1\5\1\4\1\30\1\11\1\23\1\22\1\2"+
        "\1\6\1\0\1\uffff\1\13\1\31\1\17}>";
    static final String[] DFA125_transitionS = {
            "\1\3\4\uffff\1\13\6\uffff\1\4\2\uffff\1\12\33\uffff\1\13\1\4"+
            "\1\2\1\4\1\1\1\7\1\10\1\11\2\4\1\5\1\4\1\uffff\1\6\6\uffff\1"+
            "\13\50\uffff\1\4",
            "\1\17\4\uffff\1\17\1\uffff\1\14\7\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\1\uffff\1\4\1\17"+
            "\6\uffff\1\17\16\uffff\3\15\27\uffff\1\4",
            "\1\22\4\uffff\1\17\1\uffff\1\23\4\uffff\1\4\2\uffff\1\31\33"+
            "\uffff\1\17\1\uffff\1\17\1\uffff\1\21\1\26\1\27\1\30\2\4\1\24"+
            "\1\4\1\uffff\1\25\6\uffff\1\17\16\uffff\3\20\27\uffff\1\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\32\4\uffff\1\17\1\uffff\1\23\4\uffff\1\4\2\uffff\1\17\33"+
            "\uffff\1\17\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff"+
            "\1\17\6\uffff\1\17\16\uffff\3\15\27\uffff\1\4",
            "\1\34\4\uffff\1\17\1\uffff\1\23\7\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\35\1\4\1\uffff\1\17"+
            "\6\uffff\1\17\16\uffff\3\33",
            "\1\36\4\uffff\1\17\1\uffff\1\23\3\uffff\2\4\2\uffff\1\17\33"+
            "\uffff\1\17\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff"+
            "\1\17\6\uffff\1\17\16\uffff\3\15",
            "",
            "",
            "",
            "",
            "",
            "\1\22\4\uffff\1\17\1\uffff\1\23\4\uffff\1\4\2\uffff\1\31\33"+
            "\uffff\1\17\1\uffff\1\17\1\uffff\1\21\1\26\1\27\1\30\2\4\1\24"+
            "\1\4\1\uffff\1\25\6\uffff\1\17\16\uffff\3\20\27\uffff\1\4",
            "\1\17\4\uffff\1\17\1\uffff\1\37\7\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\1\uffff\1\4\1\17"+
            "\6\uffff\1\17\16\uffff\3\15\27\uffff\1\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\32\4\uffff\1\17\1\uffff\1\23\4\uffff\1\4\2\uffff\1\17\33"+
            "\uffff\1\17\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff"+
            "\1\17\6\uffff\1\17\16\uffff\3\15\27\uffff\1\4",
            "\1\34\4\uffff\1\17\1\uffff\1\23\7\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\35\1\4\1\uffff\1\17"+
            "\6\uffff\1\17\16\uffff\3\33",
            "\1\36\4\uffff\1\17\1\uffff\1\23\3\uffff\2\4\2\uffff\1\17\33"+
            "\uffff\1\17\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff"+
            "\1\17\6\uffff\1\17\16\uffff\3\15",
            "\1\uffff",
            "\1\40\4\uffff\1\17\1\uffff\1\23\7\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff\1\17\6"+
            "\uffff\1\17\16\uffff\3\33",
            "\1\17\4\uffff\1\17\1\uffff\1\23\7\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\1\4\1\uffff\1\17"+
            "\6\4\1\42\16\uffff\3\41",
            "\1\17\4\uffff\1\17\1\uffff\1\23\7\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\1\4\1\uffff\1\17"+
            "\6\uffff\1\17\16\uffff\3\15",
            "\1\uffff",
            "",
            "\1\17\4\uffff\1\17\1\uffff\1\23\7\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff\1\17\6"+
            "\4\1\42\16\uffff\3\41",
            "\1\17\4\uffff\1\17\1\uffff\1\23\7\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff\1\17\6"+
            "\4\1\42\16\uffff\3\41",
            "\1\uffff"
    };

    static final short[] DFA125_eot = DFA.unpackEncodedString(DFA125_eotS);
    static final short[] DFA125_eof = DFA.unpackEncodedString(DFA125_eofS);
    static final char[] DFA125_min = DFA.unpackEncodedStringToUnsignedChars(DFA125_minS);
    static final char[] DFA125_max = DFA.unpackEncodedStringToUnsignedChars(DFA125_maxS);
    static final short[] DFA125_accept = DFA.unpackEncodedString(DFA125_acceptS);
    static final short[] DFA125_special = DFA.unpackEncodedString(DFA125_specialS);
    static final short[][] DFA125_transition;

    static {
        int numStates = DFA125_transitionS.length;
        DFA125_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA125_transition[i] = DFA.unpackEncodedString(DFA125_transitionS[i]);
        }
    }

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = DFA125_eot;
            this.eof = DFA125_eof;
            this.min = DFA125_min;
            this.max = DFA125_max;
            this.accept = DFA125_accept;
            this.special = DFA125_special;
            this.transition = DFA125_transition;
        }
        public String getDescription() {
            return "649:1: selectorsGroup : ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression | selector ( ( ws )? COMMA ( ws )? selector )* );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA125_30 = input.LA(1);

                         
                        int index125_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index125_30);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA125_5 = input.LA(1);

                         
                        int index125_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index125_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA125_28 = input.LA(1);

                         
                        int index125_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA125_28>=WS && LA125_28<=COMMENT)) ) {s = 33;}

                        else if ( (LA125_28==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( (LA125_28==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA125_28==RBRACKET) ) {s = 34;}

                        else if ( (LA125_28==PIPE||(LA125_28>=OPEQ && LA125_28<=CONTAINS)) ) {s = 4;}

                        else if ( (LA125_28==IDENT||LA125_28==COMMA||LA125_28==COLON||LA125_28==MINUS||LA125_28==GREATER||(LA125_28>=HASH && LA125_28<=LBRACKET)||LA125_28==STAR||LA125_28==LESS_AND) && (synpred22_Css3())) {s = 15;}

                         
                        input.seek(index125_28);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA125_3 = input.LA(1);

                         
                        int index125_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index125_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA125_23 = input.LA(1);

                         
                        int index125_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA125_23>=WS && LA125_23<=COMMENT)) && (synpred22_Css3())) {s = 13;}

                        else if ( (LA125_23==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( (LA125_23==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA125_23==IDENT) ) {s = 26;}

                        else if ( (LA125_23==COMMA||LA125_23==COLON||LA125_23==MINUS||LA125_23==GREATER||(LA125_23>=HASH && LA125_23<=LBRACKET)||LA125_23==STAR||LA125_23==LESS_AND||LA125_23==RBRACKET) && (synpred22_Css3())) {s = 15;}

                        else if ( (LA125_23==GEN||LA125_23==AT_SIGN) ) {s = 4;}

                         
                        input.seek(index125_23);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA125_22 = input.LA(1);

                         
                        int index125_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index125_22);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA125_29 = input.LA(1);

                         
                        int index125_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA125_29>=WS && LA125_29<=COMMENT)) && (synpred22_Css3())) {s = 13;}

                        else if ( (LA125_29==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( (LA125_29==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA125_29==IDENT||LA125_29==COMMA||LA125_29==COLON||LA125_29==MINUS||LA125_29==GREATER||(LA125_29>=HASH && LA125_29<=LBRACKET)||LA125_29==STAR||LA125_29==LESS_AND||LA125_29==RBRACKET) && (synpred22_Css3())) {s = 15;}

                        else if ( (LA125_29==PIPE) ) {s = 4;}

                         
                        input.seek(index125_29);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA125_18 = input.LA(1);

                         
                        int index125_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index125_18);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA125_2 = input.LA(1);

                         
                        int index125_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA125_2>=WS && LA125_2<=COMMENT)) ) {s = 16;}

                        else if ( (LA125_2==HASH_SYMBOL) ) {s = 17;}

                        else if ( (LA125_2==IDENT) ) {s = 18;}

                        else if ( (LA125_2==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( (LA125_2==STAR) ) {s = 20;}

                        else if ( (LA125_2==LESS_AND) ) {s = 21;}

                        else if ( (LA125_2==GEN||(LA125_2>=DCOLON && LA125_2<=SASS_EXTEND_ONLY_SELECTOR)||LA125_2==PIPE||LA125_2==AT_SIGN) ) {s = 4;}

                        else if ( (LA125_2==HASH) ) {s = 22;}

                        else if ( (LA125_2==DOT) ) {s = 23;}

                        else if ( (LA125_2==LBRACKET) ) {s = 24;}

                        else if ( (LA125_2==COLON) ) {s = 25;}

                        else if ( (LA125_2==COMMA||LA125_2==MINUS||LA125_2==GREATER||LA125_2==RBRACKET) && (synpred22_Css3())) {s = 15;}

                         
                        input.seek(index125_2);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA125_25 = input.LA(1);

                         
                        int index125_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA125_25>=WS && LA125_25<=COMMENT)) && (synpred22_Css3())) {s = 13;}

                        else if ( (LA125_25==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( (LA125_25==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA125_25==IDENT) ) {s = 30;}

                        else if ( (LA125_25==COMMA||LA125_25==COLON||LA125_25==MINUS||LA125_25==GREATER||(LA125_25>=HASH && LA125_25<=LBRACKET)||LA125_25==STAR||LA125_25==LESS_AND||LA125_25==RBRACKET) && (synpred22_Css3())) {s = 15;}

                        else if ( ((LA125_25>=NOT && LA125_25<=GEN)) ) {s = 4;}

                         
                        input.seek(index125_25);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA125_6 = input.LA(1);

                         
                        int index125_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index125_6);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA125_32 = input.LA(1);

                         
                        int index125_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA125_32>=WS && LA125_32<=COMMENT)) ) {s = 33;}

                        else if ( (LA125_32==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( (LA125_32==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA125_32==RBRACKET) ) {s = 34;}

                        else if ( ((LA125_32>=OPEQ && LA125_32<=CONTAINS)) ) {s = 4;}

                        else if ( (LA125_32==IDENT||LA125_32==COMMA||LA125_32==COLON||LA125_32==MINUS||LA125_32==GREATER||(LA125_32>=HASH && LA125_32<=LBRACKET)||LA125_32==STAR||LA125_32==LESS_AND) && (synpred22_Css3())) {s = 15;}

                         
                        input.seek(index125_32);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA125_8 = input.LA(1);

                         
                        int index125_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA125_8>=WS && LA125_8<=COMMENT)) && (synpred22_Css3())) {s = 13;}

                        else if ( (LA125_8==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA125_8==IDENT) ) {s = 26;}

                        else if ( (LA125_8==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( (LA125_8==COMMA||LA125_8==COLON||LA125_8==MINUS||LA125_8==GREATER||(LA125_8>=HASH && LA125_8<=LBRACKET)||LA125_8==STAR||LA125_8==LESS_AND||LA125_8==RBRACKET) && (synpred22_Css3())) {s = 15;}

                        else if ( (LA125_8==GEN||LA125_8==AT_SIGN) ) {s = 4;}

                         
                        input.seek(index125_8);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA125_20 = input.LA(1);

                         
                        int index125_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index125_20);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA125_21 = input.LA(1);

                         
                        int index125_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index125_21);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA125_34 = input.LA(1);

                         
                        int index125_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index125_34);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA125_17 = input.LA(1);

                         
                        int index125_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA125_17==LBRACE) && (synpred22_Css3())) {s = 31;}

                        else if ( ((LA125_17>=WS && LA125_17<=COMMENT)) && (synpred22_Css3())) {s = 13;}

                        else if ( (LA125_17==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA125_17==IDENT||LA125_17==COMMA||LA125_17==COLON||LA125_17==MINUS||LA125_17==GREATER||(LA125_17>=HASH && LA125_17<=LBRACKET)||LA125_17==STAR||LA125_17==LESS_AND||LA125_17==RBRACKET) && (synpred22_Css3())) {s = 15;}

                        else if ( (LA125_17==NAME||LA125_17==AT_SIGN) ) {s = 4;}

                         
                        input.seek(index125_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA125_10 = input.LA(1);

                         
                        int index125_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA125_10>=WS && LA125_10<=COMMENT)) && (synpred22_Css3())) {s = 13;}

                        else if ( (LA125_10==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA125_10==IDENT) ) {s = 30;}

                        else if ( (LA125_10==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( (LA125_10==COMMA||LA125_10==COLON||LA125_10==MINUS||LA125_10==GREATER||(LA125_10>=HASH && LA125_10<=LBRACKET)||LA125_10==STAR||LA125_10==LESS_AND||LA125_10==RBRACKET) && (synpred22_Css3())) {s = 15;}

                        else if ( ((LA125_10>=NOT && LA125_10<=GEN)) ) {s = 4;}

                         
                        input.seek(index125_10);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA125_27 = input.LA(1);

                         
                        int index125_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA125_27==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA125_27==IDENT) ) {s = 32;}

                        else if ( ((LA125_27>=WS && LA125_27<=COMMENT)) ) {s = 27;}

                        else if ( (LA125_27==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( (LA125_27==COMMA||LA125_27==COLON||LA125_27==MINUS||LA125_27==GREATER||(LA125_27>=HASH && LA125_27<=LBRACKET)||LA125_27==STAR||LA125_27==LESS_AND||LA125_27==RBRACKET) && (synpred22_Css3())) {s = 15;}

                         
                        input.seek(index125_27);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA125_26 = input.LA(1);

                         
                        int index125_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index125_26);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA125_9 = input.LA(1);

                         
                        int index125_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA125_9>=WS && LA125_9<=COMMENT)) ) {s = 27;}

                        else if ( (LA125_9==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA125_9==IDENT) ) {s = 28;}

                        else if ( (LA125_9==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( (LA125_9==STAR) ) {s = 29;}

                        else if ( (LA125_9==COMMA||LA125_9==COLON||LA125_9==MINUS||LA125_9==GREATER||(LA125_9>=HASH && LA125_9<=LBRACKET)||LA125_9==LESS_AND||LA125_9==RBRACKET) && (synpred22_Css3())) {s = 15;}

                        else if ( (LA125_9==PIPE) ) {s = 4;}

                         
                        input.seek(index125_9);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA125_1 = input.LA(1);

                         
                        int index125_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA125_1==LBRACE) && (synpred22_Css3())) {s = 12;}

                        else if ( ((LA125_1>=WS && LA125_1<=COMMENT)) && (synpred22_Css3())) {s = 13;}

                        else if ( (LA125_1==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA125_1==IDENT||LA125_1==COMMA||LA125_1==COLON||LA125_1==MINUS||LA125_1==GREATER||(LA125_1>=HASH && LA125_1<=LBRACKET)||LA125_1==STAR||LA125_1==LESS_AND||LA125_1==RBRACKET) && (synpred22_Css3())) {s = 15;}

                        else if ( (LA125_1==NAME||LA125_1==AT_SIGN) ) {s = 4;}

                         
                        input.seek(index125_1);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA125_7 = input.LA(1);

                         
                        int index125_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index125_7);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA125_0 = input.LA(1);

                         
                        int index125_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA125_0==HASH_SYMBOL) ) {s = 1;}

                        else if ( (LA125_0==GREATER) ) {s = 2;}

                        else if ( (LA125_0==IDENT) ) {s = 3;}

                        else if ( (LA125_0==GEN||LA125_0==PLUS||LA125_0==TILDE||(LA125_0>=DCOLON && LA125_0<=SASS_EXTEND_ONLY_SELECTOR)||LA125_0==PIPE||LA125_0==AT_SIGN) ) {s = 4;}

                        else if ( (LA125_0==STAR) ) {s = 5;}

                        else if ( (LA125_0==LESS_AND) ) {s = 6;}

                        else if ( (LA125_0==HASH) ) {s = 7;}

                        else if ( (LA125_0==DOT) ) {s = 8;}

                        else if ( (LA125_0==LBRACKET) ) {s = 9;}

                        else if ( (LA125_0==COLON) ) {s = 10;}

                        else if ( (LA125_0==COMMA||LA125_0==MINUS||LA125_0==RBRACKET) && (synpred22_Css3())) {s = 11;}

                         
                        input.seek(index125_0);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA125_24 = input.LA(1);

                         
                        int index125_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA125_24>=WS && LA125_24<=COMMENT)) ) {s = 27;}

                        else if ( (LA125_24==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( (LA125_24==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA125_24==IDENT) ) {s = 28;}

                        else if ( (LA125_24==STAR) ) {s = 29;}

                        else if ( (LA125_24==COMMA||LA125_24==COLON||LA125_24==MINUS||LA125_24==GREATER||(LA125_24>=HASH && LA125_24<=LBRACKET)||LA125_24==LESS_AND||LA125_24==RBRACKET) && (synpred22_Css3())) {s = 15;}

                        else if ( (LA125_24==PIPE) ) {s = 4;}

                         
                        input.seek(index125_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA125_33 = input.LA(1);

                         
                        int index125_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA125_33==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( ((LA125_33>=WS && LA125_33<=COMMENT)) ) {s = 33;}

                        else if ( (LA125_33==HASH_SYMBOL) && (synpred22_Css3())) {s = 14;}

                        else if ( (LA125_33==RBRACKET) ) {s = 34;}

                        else if ( ((LA125_33>=OPEQ && LA125_33<=CONTAINS)) ) {s = 4;}

                        else if ( (LA125_33==IDENT||LA125_33==COMMA||LA125_33==COLON||LA125_33==MINUS||LA125_33==GREATER||(LA125_33>=HASH && LA125_33<=LBRACKET)||LA125_33==STAR||LA125_33==LESS_AND) && (synpred22_Css3())) {s = 15;}

                         
                        input.seek(index125_33);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA125_16 = input.LA(1);

                         
                        int index125_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA125_16==HASH_SYMBOL) ) {s = 17;}

                        else if ( (LA125_16==IDENT) ) {s = 18;}

                        else if ( ((LA125_16>=WS && LA125_16<=COMMENT)) ) {s = 16;}

                        else if ( (LA125_16==LBRACE) && (synpred22_Css3())) {s = 19;}

                        else if ( (LA125_16==STAR) ) {s = 20;}

                        else if ( (LA125_16==LESS_AND) ) {s = 21;}

                        else if ( (LA125_16==GEN||(LA125_16>=DCOLON && LA125_16<=SASS_EXTEND_ONLY_SELECTOR)||LA125_16==PIPE||LA125_16==AT_SIGN) ) {s = 4;}

                        else if ( (LA125_16==HASH) ) {s = 22;}

                        else if ( (LA125_16==DOT) ) {s = 23;}

                        else if ( (LA125_16==LBRACKET) ) {s = 24;}

                        else if ( (LA125_16==COLON) ) {s = 25;}

                        else if ( (LA125_16==COMMA||LA125_16==MINUS||LA125_16==GREATER||LA125_16==RBRACKET) && (synpred22_Css3())) {s = 15;}

                         
                        input.seek(index125_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 125, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA124_eotS =
        "\4\uffff";
    static final String DFA124_eofS =
        "\4\uffff";
    static final String DFA124_minS =
        "\2\13\2\uffff";
    static final String DFA124_maxS =
        "\2\126\2\uffff";
    static final String DFA124_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA124_specialS =
        "\4\uffff}>";
    static final String[] DFA124_transitionS = {
            "\1\3\1\uffff\1\2\106\uffff\3\1",
            "\1\3\1\uffff\1\2\106\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "()* loopback of 654:18: ( ( ws )? COMMA ( ws )? selector )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA132_eotS =
        "\4\uffff";
    static final String DFA132_eofS =
        "\4\uffff";
    static final String DFA132_minS =
        "\2\6\2\uffff";
    static final String DFA132_maxS =
        "\2\156\2\uffff";
    static final String DFA132_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA132_specialS =
        "\4\uffff}>";
    static final String[] DFA132_transitionS = {
            "\1\3\4\uffff\1\2\1\uffff\1\2\4\uffff\1\3\2\uffff\1\3\34\uffff"+
            "\13\3\1\uffff\1\3\25\uffff\3\1\27\uffff\1\3",
            "\1\3\4\uffff\1\2\1\uffff\1\2\4\uffff\1\3\2\uffff\1\3\34\uffff"+
            "\13\3\1\uffff\1\3\25\uffff\3\1\27\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "()* loopback of 658:49: ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA131_eotS =
        "\4\uffff";
    static final String DFA131_eofS =
        "\4\uffff";
    static final String DFA131_minS =
        "\2\6\2\uffff";
    static final String DFA131_maxS =
        "\2\156\2\uffff";
    static final String DFA131_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA131_specialS =
        "\4\uffff}>";
    static final String[] DFA131_transitionS = {
            "\1\3\13\uffff\1\3\2\uffff\1\3\34\uffff\3\2\10\3\1\uffff\1\3"+
            "\25\uffff\3\1\27\uffff\1\3",
            "\1\3\13\uffff\1\3\2\uffff\1\3\34\uffff\3\2\10\3\1\uffff\1\3"+
            "\25\uffff\3\1\27\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "658:51: ( ( ( ws )? combinator ( ws )? ) | ( ws )? )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA134_eotS =
        "\56\uffff";
    static final String DFA134_eofS =
        "\56\uffff";
    static final String DFA134_minS =
        "\1\4\1\0\5\uffff\7\0\24\uffff\1\0\13\uffff";
    static final String DFA134_maxS =
        "\1\157\1\0\5\uffff\7\0\24\uffff\1\0\13\uffff";
    static final String DFA134_acceptS =
        "\2\uffff\1\2\52\uffff\1\1";
    static final String DFA134_specialS =
        "\1\uffff\1\0\5\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\24\uffff\1\10\13"+
        "\uffff}>";
    static final String[] DFA134_transitionS = {
            "\3\2\2\uffff\6\2\3\uffff\1\2\1\uffff\1\2\1\15\2\2\3\uffff\1"+
            "\2\1\uffff\23\2\1\uffff\4\2\1\12\1\11\1\13\1\14\1\42\1\7\2\2"+
            "\1\uffff\1\2\6\uffff\2\2\15\uffff\3\1\1\uffff\15\2\11\uffff"+
            "\1\10\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "()* loopback of 668:17: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA134_1 = input.LA(1);

                         
                        int index134_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index134_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA134_7 = input.LA(1);

                         
                        int index134_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred23_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 45;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 2;}

                         
                        input.seek(index134_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA134_8 = input.LA(1);

                         
                        int index134_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 45;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 2;}

                         
                        input.seek(index134_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA134_9 = input.LA(1);

                         
                        int index134_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index134_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA134_10 = input.LA(1);

                         
                        int index134_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index134_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA134_11 = input.LA(1);

                         
                        int index134_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index134_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA134_12 = input.LA(1);

                         
                        int index134_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index134_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA134_13 = input.LA(1);

                         
                        int index134_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index134_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA134_34 = input.LA(1);

                         
                        int index134_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index134_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 134, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA136_eotS =
        "\56\uffff";
    static final String DFA136_eofS =
        "\56\uffff";
    static final String DFA136_minS =
        "\1\4\1\0\5\uffff\7\0\24\uffff\1\0\13\uffff";
    static final String DFA136_maxS =
        "\1\157\1\0\5\uffff\7\0\24\uffff\1\0\13\uffff";
    static final String DFA136_acceptS =
        "\2\uffff\1\2\52\uffff\1\1";
    static final String DFA136_specialS =
        "\1\uffff\1\0\5\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\24\uffff\1\10\13"+
        "\uffff}>";
    static final String[] DFA136_transitionS = {
            "\3\2\2\uffff\6\2\3\uffff\1\2\1\uffff\1\2\1\15\2\2\3\uffff\1"+
            "\2\1\uffff\23\2\1\uffff\4\2\1\12\1\11\1\13\1\14\1\42\1\7\2\2"+
            "\1\uffff\1\2\6\uffff\2\2\15\uffff\3\1\1\uffff\15\2\11\uffff"+
            "\1\10\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA136_eot = DFA.unpackEncodedString(DFA136_eotS);
    static final short[] DFA136_eof = DFA.unpackEncodedString(DFA136_eofS);
    static final char[] DFA136_min = DFA.unpackEncodedStringToUnsignedChars(DFA136_minS);
    static final char[] DFA136_max = DFA.unpackEncodedStringToUnsignedChars(DFA136_maxS);
    static final short[] DFA136_accept = DFA.unpackEncodedString(DFA136_acceptS);
    static final short[] DFA136_special = DFA.unpackEncodedString(DFA136_specialS);
    static final short[][] DFA136_transition;

    static {
        int numStates = DFA136_transitionS.length;
        DFA136_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA136_transition[i] = DFA.unpackEncodedString(DFA136_transitionS[i]);
        }
    }

    class DFA136 extends DFA {

        public DFA136(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = DFA136_eot;
            this.eof = DFA136_eof;
            this.min = DFA136_min;
            this.max = DFA136_max;
            this.accept = DFA136_accept;
            this.special = DFA136_special;
            this.transition = DFA136_transition;
        }
        public String getDescription() {
            return "()* loopback of 670:20: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA136_1 = input.LA(1);

                         
                        int index136_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index136_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA136_7 = input.LA(1);

                         
                        int index136_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred24_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 45;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 2;}

                         
                        input.seek(index136_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA136_8 = input.LA(1);

                         
                        int index136_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred24_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 45;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 2;}

                         
                        input.seek(index136_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA136_9 = input.LA(1);

                         
                        int index136_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index136_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA136_10 = input.LA(1);

                         
                        int index136_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index136_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA136_11 = input.LA(1);

                         
                        int index136_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index136_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA136_12 = input.LA(1);

                         
                        int index136_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index136_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA136_13 = input.LA(1);

                         
                        int index136_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index136_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA136_34 = input.LA(1);

                         
                        int index136_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index136_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 136, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA154_eotS =
        "\4\uffff";
    static final String DFA154_eofS =
        "\4\uffff";
    static final String DFA154_minS =
        "\2\4\2\uffff";
    static final String DFA154_maxS =
        "\2\157\2\uffff";
    static final String DFA154_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA154_specialS =
        "\4\uffff}>";
    static final String[] DFA154_transitionS = {
            "\3\3\2\uffff\6\3\3\uffff\1\3\1\2\4\3\3\uffff\1\3\1\uffff\23"+
            "\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\15\uffff\3\1\1\uffff"+
            "\15\3\11\uffff\2\3",
            "\3\3\2\uffff\6\3\3\uffff\1\3\1\2\1\uffff\3\3\3\uffff\1\3\1"+
            "\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\15\uffff\3"+
            "\1\1\uffff\15\3\11\uffff\2\3",
            "",
            ""
    };

    static final short[] DFA154_eot = DFA.unpackEncodedString(DFA154_eotS);
    static final short[] DFA154_eof = DFA.unpackEncodedString(DFA154_eofS);
    static final char[] DFA154_min = DFA.unpackEncodedStringToUnsignedChars(DFA154_minS);
    static final char[] DFA154_max = DFA.unpackEncodedStringToUnsignedChars(DFA154_maxS);
    static final short[] DFA154_accept = DFA.unpackEncodedString(DFA154_acceptS);
    static final short[] DFA154_special = DFA.unpackEncodedString(DFA154_specialS);
    static final short[][] DFA154_transition;

    static {
        int numStates = DFA154_transitionS.length;
        DFA154_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA154_transition[i] = DFA.unpackEncodedString(DFA154_transitionS[i]);
        }
    }

    class DFA154 extends DFA {

        public DFA154(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 154;
            this.eot = DFA154_eot;
            this.eof = DFA154_eof;
            this.min = DFA154_min;
            this.max = DFA154_max;
            this.accept = DFA154_accept;
            this.special = DFA154_special;
            this.transition = DFA154_transition;
        }
        public String getDescription() {
            return "781:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA167_eotS =
        "\12\uffff";
    static final String DFA167_eofS =
        "\12\uffff";
    static final String DFA167_minS =
        "\1\4\7\0\2\uffff";
    static final String DFA167_maxS =
        "\1\144\7\0\2\uffff";
    static final String DFA167_acceptS =
        "\10\uffff\1\1\1\2";
    static final String DFA167_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\2\uffff}>";
    static final String[] DFA167_transitionS = {
            "\1\6\1\uffff\1\3\2\uffff\2\6\1\uffff\1\6\5\uffff\1\5\3\uffff"+
            "\2\6\3\uffff\1\6\1\uffff\23\6\1\uffff\1\4\3\uffff\1\2\2\4\3"+
            "\uffff\1\1\12\uffff\1\7\21\uffff\15\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA167_eot = DFA.unpackEncodedString(DFA167_eotS);
    static final short[] DFA167_eof = DFA.unpackEncodedString(DFA167_eofS);
    static final char[] DFA167_min = DFA.unpackEncodedStringToUnsignedChars(DFA167_minS);
    static final char[] DFA167_max = DFA.unpackEncodedStringToUnsignedChars(DFA167_maxS);
    static final short[] DFA167_accept = DFA.unpackEncodedString(DFA167_acceptS);
    static final short[] DFA167_special = DFA.unpackEncodedString(DFA167_specialS);
    static final short[][] DFA167_transition;

    static {
        int numStates = DFA167_transitionS.length;
        DFA167_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA167_transition[i] = DFA.unpackEncodedString(DFA167_transitionS[i]);
        }
    }

    class DFA167 extends DFA {

        public DFA167(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 167;
            this.eot = DFA167_eot;
            this.eof = DFA167_eof;
            this.min = DFA167_min;
            this.max = DFA167_max;
            this.accept = DFA167_accept;
            this.special = DFA167_special;
            this.transition = DFA167_transition;
        }
        public String getDescription() {
            return "790:1: propertyDeclaration : ( ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? | {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA167_1 = input.LA(1);

                         
                        int index167_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index167_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA167_2 = input.LA(1);

                         
                        int index167_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index167_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA167_3 = input.LA(1);

                         
                        int index167_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index167_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA167_4 = input.LA(1);

                         
                        int index167_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index167_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA167_5 = input.LA(1);

                         
                        int index167_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index167_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA167_6 = input.LA(1);

                         
                        int index167_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 8;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 9;}

                         
                        input.seek(index167_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA167_7 = input.LA(1);

                         
                        int index167_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 8;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 9;}

                         
                        input.seek(index167_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 167, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA163_eotS =
        "\4\uffff";
    static final String DFA163_eofS =
        "\1\3\3\uffff";
    static final String DFA163_minS =
        "\2\4\2\uffff";
    static final String DFA163_maxS =
        "\2\156\2\uffff";
    static final String DFA163_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA163_specialS =
        "\4\uffff}>";
    static final String[] DFA163_transitionS = {
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\1\2\14"+
            "\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\1\2\14"+
            "\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA163_eot = DFA.unpackEncodedString(DFA163_eotS);
    static final short[] DFA163_eof = DFA.unpackEncodedString(DFA163_eofS);
    static final char[] DFA163_min = DFA.unpackEncodedStringToUnsignedChars(DFA163_minS);
    static final char[] DFA163_max = DFA.unpackEncodedStringToUnsignedChars(DFA163_maxS);
    static final short[] DFA163_accept = DFA.unpackEncodedString(DFA163_acceptS);
    static final short[] DFA163_special = DFA.unpackEncodedString(DFA163_specialS);
    static final short[][] DFA163_transition;

    static {
        int numStates = DFA163_transitionS.length;
        DFA163_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA163_transition[i] = DFA.unpackEncodedString(DFA163_transitionS[i]);
        }
    }

    class DFA163 extends DFA {

        public DFA163(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 163;
            this.eot = DFA163_eot;
            this.eof = DFA163_eof;
            this.min = DFA163_min;
            this.max = DFA163_max;
            this.accept = DFA163_accept;
            this.special = DFA163_special;
            this.transition = DFA163_transition;
        }
        public String getDescription() {
            return "792:48: ( ( ws )? prio )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA168_eotS =
        "\34\uffff";
    static final String DFA168_eofS =
        "\34\uffff";
    static final String DFA168_minS =
        "\1\4\1\uffff\27\0\3\uffff";
    static final String DFA168_maxS =
        "\1\144\1\uffff\27\0\3\uffff";
    static final String DFA168_acceptS =
        "\1\uffff\1\1\31\uffff\1\2";
    static final String DFA168_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\3\uffff}>";
    static final String[] DFA168_transitionS = {
            "\1\25\1\uffff\1\3\1\17\1\23\2\25\1\uffff\1\25\4\uffff\1\1\1"+
            "\22\1\1\2\uffff\2\25\3\uffff\1\25\1\5\23\25\1\uffff\2\2\1\uffff"+
            "\1\20\1\27\1\24\17\uffff\1\26\1\1\1\4\1\6\1\7\1\10\1\11\1\12"+
            "\1\13\1\14\1\15\1\16\1\21\1\30\4\uffff\15\25",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA168_eot = DFA.unpackEncodedString(DFA168_eotS);
    static final short[] DFA168_eof = DFA.unpackEncodedString(DFA168_eofS);
    static final char[] DFA168_min = DFA.unpackEncodedStringToUnsignedChars(DFA168_minS);
    static final char[] DFA168_max = DFA.unpackEncodedStringToUnsignedChars(DFA168_maxS);
    static final short[] DFA168_accept = DFA.unpackEncodedString(DFA168_acceptS);
    static final short[] DFA168_special = DFA.unpackEncodedString(DFA168_specialS);
    static final short[][] DFA168_transition;

    static {
        int numStates = DFA168_transitionS.length;
        DFA168_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA168_transition[i] = DFA.unpackEncodedString(DFA168_transitionS[i]);
        }
    }

    class DFA168 extends DFA {

        public DFA168(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 168;
            this.eot = DFA168_eot;
            this.eof = DFA168_eof;
            this.min = DFA168_min;
            this.max = DFA168_max;
            this.accept = DFA168_accept;
            this.special = DFA168_special;
            this.transition = DFA168_transition;
        }
        public String getDescription() {
            return "803:1: cp_propertyValue : ({...}? cp_expression_list | propertyValue );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA168_2 = input.LA(1);

                         
                        int index168_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index168_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA168_3 = input.LA(1);

                         
                        int index168_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index168_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA168_4 = input.LA(1);

                         
                        int index168_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index168_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA168_5 = input.LA(1);

                         
                        int index168_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index168_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA168_6 = input.LA(1);

                         
                        int index168_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index168_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA168_7 = input.LA(1);

                         
                        int index168_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index168_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA168_8 = input.LA(1);

                         
                        int index168_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index168_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA168_9 = input.LA(1);

                         
                        int index168_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index168_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA168_10 = input.LA(1);

                         
                        int index168_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index168_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA168_11 = input.LA(1);

                         
                        int index168_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index168_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA168_12 = input.LA(1);

                         
                        int index168_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index168_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA168_13 = input.LA(1);

                         
                        int index168_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index168_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA168_14 = input.LA(1);

                         
                        int index168_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index168_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA168_15 = input.LA(1);

                         
                        int index168_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index168_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA168_16 = input.LA(1);

                         
                        int index168_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 1;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 27;}

                         
                        input.seek(index168_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA168_17 = input.LA(1);

                         
                        int index168_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 1;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 27;}

                         
                        input.seek(index168_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA168_18 = input.LA(1);

                         
                        int index168_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index168_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA168_19 = input.LA(1);

                         
                        int index168_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index168_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA168_20 = input.LA(1);

                         
                        int index168_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index168_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA168_21 = input.LA(1);

                         
                        int index168_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 1;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 27;}

                         
                        input.seek(index168_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA168_22 = input.LA(1);

                         
                        int index168_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 1;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 27;}

                         
                        input.seek(index168_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA168_23 = input.LA(1);

                         
                        int index168_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 27;}

                         
                        input.seek(index168_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA168_24 = input.LA(1);

                         
                        int index168_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 27;}

                         
                        input.seek(index168_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 168, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA173_eotS =
        "\77\uffff";
    static final String DFA173_eofS =
        "\1\2\76\uffff";
    static final String DFA173_minS =
        "\1\4\1\0\5\uffff\2\0\1\uffff\15\0\2\uffff\1\0\4\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\11\0\4\uffff\1\0\17\uffff";
    static final String DFA173_maxS =
        "\1\156\1\0\5\uffff\2\0\1\uffff\15\0\2\uffff\1\0\4\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\11\0\4\uffff\1\0\17\uffff";
    static final String DFA173_acceptS =
        "\2\uffff\1\2\53\uffff\1\1\1\uffff\17\1";
    static final String DFA173_specialS =
        "\1\0\1\1\5\uffff\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\2\uffff\1\21\4\uffff\1\22\1\uffff"+
        "\1\23\1\uffff\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\4\uffff"+
        "\1\35\17\uffff}>";
    static final String[] DFA173_transitionS = {
            "\1\52\1\2\1\13\1\73\1\75\1\52\1\51\1\40\1\46\2\2\3\uffff\1\15"+
            "\1\uffff\2\2\1\45\1\43\3\uffff\1\44\1\61\1\26\1\47\1\42\20\52"+
            "\1\56\1\36\1\31\1\2\1\57\1\12\1\14\6\2\1\uffff\1\2\6\uffff\1"+
            "\2\1\17\1\2\1\60\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
            "\1\74\1\76\3\1\1\uffff\1\25\1\7\1\10\1\16\2\20\1\21\1\52\1\22"+
            "\1\52\1\50\1\23\1\24\11\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA173_eot = DFA.unpackEncodedString(DFA173_eotS);
    static final short[] DFA173_eof = DFA.unpackEncodedString(DFA173_eofS);
    static final char[] DFA173_min = DFA.unpackEncodedStringToUnsignedChars(DFA173_minS);
    static final char[] DFA173_max = DFA.unpackEncodedStringToUnsignedChars(DFA173_maxS);
    static final short[] DFA173_accept = DFA.unpackEncodedString(DFA173_acceptS);
    static final short[] DFA173_special = DFA.unpackEncodedString(DFA173_specialS);
    static final short[][] DFA173_transition;

    static {
        int numStates = DFA173_transitionS.length;
        DFA173_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA173_transition[i] = DFA.unpackEncodedString(DFA173_transitionS[i]);
        }
    }

    class DFA173 extends DFA {

        public DFA173(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 173;
            this.eot = DFA173_eot;
            this.eof = DFA173_eof;
            this.min = DFA173_min;
            this.max = DFA173_max;
            this.accept = DFA173_accept;
            this.special = DFA173_special;
            this.transition = DFA173_transition;
        }
        public String getDescription() {
            return "()* loopback of 859:12: ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA173_0 = input.LA(1);

                         
                        int index173_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA173_0>=WS && LA173_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA173_0==EOF||LA173_0==SEMI||(LA173_0>=LBRACE && LA173_0<=RBRACE)||(LA173_0>=RPAREN && LA173_0<=COLON)||LA173_0==GREATER||(LA173_0>=DOT && LA173_0<=PIPE)||LA173_0==LESS_AND||LA173_0==RBRACKET||LA173_0==IMPORTANT_SYM||LA173_0==AT_SIGN) ) {s = 2;}

                        else if ( (LA173_0==SASS_MIXIN) ) {s = 7;}

                        else if ( (LA173_0==SASS_INCLUDE) ) {s = 8;}

                        else if ( (LA173_0==HASH_SYMBOL) ) {s = 10;}

                        else if ( (LA173_0==IDENT) ) {s = 11;}

                        else if ( (LA173_0==HASH) ) {s = 12;}

                        else if ( (LA173_0==GEN) ) {s = 13;}

                        else if ( (LA173_0==SASS_EXTEND) ) {s = 14;}

                        else if ( (LA173_0==SASS_VAR) ) {s = 15;}

                        else if ( ((LA173_0>=SASS_DEBUG && LA173_0<=SASS_WARN)) ) {s = 16;}

                        else if ( (LA173_0==SASS_IF) ) {s = 17;}

                        else if ( (LA173_0==SASS_FOR) ) {s = 18;}

                        else if ( (LA173_0==SASS_EACH) ) {s = 19;}

                        else if ( (LA173_0==SASS_WHILE) ) {s = 20;}

                        else if ( (LA173_0==SASS_CONTENT) ) {s = 21;}

                        else if ( (LA173_0==PAGE_SYM) ) {s = 22;}

                        else if ( (LA173_0==PLUS) ) {s = 25;}

                        else if ( (LA173_0==MINUS) ) {s = 30;}

                        else if ( (LA173_0==COMMA) ) {s = 32;}

                        else if ( (LA173_0==FONT_FACE_SYM) ) {s = 34;}

                        else if ( (LA173_0==MOZ_DOCUMENT_SYM) ) {s = 35;}

                        else if ( (LA173_0==WEBKIT_KEYFRAMES_SYM) ) {s = 36;}

                        else if ( (LA173_0==AT_IDENT) ) {s = 37;}

                        else if ( (LA173_0==MEDIA_SYM) ) {s = 38;}

                        else if ( (LA173_0==COUNTER_STYLE_SYM) ) {s = 39;}

                        else if ( (LA173_0==SASS_RETURN) ) {s = 40;}

                        else if ( (LA173_0==IMPORT_SYM) ) {s = 41;}

                        else if ( (LA173_0==NAMESPACE_SYM||LA173_0==CHARSET_SYM||(LA173_0>=TOPLEFTCORNER_SYM && LA173_0<=RIGHTBOTTOM_SYM)||LA173_0==SASS_ELSE||LA173_0==SASS_FUNCTION) ) {s = 42;}

                        else if ( (LA173_0==SOLIDUS) && (synpred26_Css3())) {s = 46;}

                        else if ( (LA173_0==TILDE) ) {s = 47;}

                        else if ( (LA173_0==NUMBER) && (synpred26_Css3())) {s = 48;}

                        else if ( (LA173_0==PERCENTAGE) && (synpred26_Css3())) {s = 49;}

                        else if ( (LA173_0==LENGTH) && (synpred26_Css3())) {s = 50;}

                        else if ( (LA173_0==EMS) && (synpred26_Css3())) {s = 51;}

                        else if ( (LA173_0==REM) && (synpred26_Css3())) {s = 52;}

                        else if ( (LA173_0==EXS) && (synpred26_Css3())) {s = 53;}

                        else if ( (LA173_0==ANGLE) && (synpred26_Css3())) {s = 54;}

                        else if ( (LA173_0==TIME) && (synpred26_Css3())) {s = 55;}

                        else if ( (LA173_0==FREQ) && (synpred26_Css3())) {s = 56;}

                        else if ( (LA173_0==RESOLUTION) && (synpred26_Css3())) {s = 57;}

                        else if ( (LA173_0==DIMENSION) && (synpred26_Css3())) {s = 58;}

                        else if ( (LA173_0==STRING) && (synpred26_Css3())) {s = 59;}

                        else if ( (LA173_0==LESS_JS_STRING) && (synpred26_Css3())) {s = 60;}

                        else if ( (LA173_0==URI) && (synpred26_Css3())) {s = 61;}

                        else if ( (LA173_0==PERCENTAGE_SYMBOL) && (synpred26_Css3())) {s = 62;}

                         
                        input.seek(index173_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA173_1 = input.LA(1);

                         
                        int index173_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index173_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA173_7 = input.LA(1);

                         
                        int index173_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index173_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA173_8 = input.LA(1);

                         
                        int index173_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index173_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA173_10 = input.LA(1);

                         
                        int index173_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index173_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA173_11 = input.LA(1);

                         
                        int index173_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index173_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA173_12 = input.LA(1);

                         
                        int index173_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index173_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA173_13 = input.LA(1);

                         
                        int index173_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index173_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA173_14 = input.LA(1);

                         
                        int index173_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index173_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA173_15 = input.LA(1);

                         
                        int index173_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}

                         
                        input.seek(index173_15);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA173_16 = input.LA(1);

                         
                        int index173_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index173_16);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA173_17 = input.LA(1);

                         
                        int index173_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index173_17);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA173_18 = input.LA(1);

                         
                        int index173_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index173_18);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA173_19 = input.LA(1);

                         
                        int index173_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index173_19);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA173_20 = input.LA(1);

                         
                        int index173_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index173_20);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA173_21 = input.LA(1);

                         
                        int index173_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index173_21);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA173_22 = input.LA(1);

                         
                        int index173_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index173_22);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA173_25 = input.LA(1);

                         
                        int index173_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index173_25);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA173_30 = input.LA(1);

                         
                        int index173_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index173_30);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA173_32 = input.LA(1);

                         
                        int index173_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index173_32);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA173_34 = input.LA(1);

                         
                        int index173_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index173_34);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA173_35 = input.LA(1);

                         
                        int index173_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index173_35);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA173_36 = input.LA(1);

                         
                        int index173_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index173_36);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA173_37 = input.LA(1);

                         
                        int index173_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index173_37);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA173_38 = input.LA(1);

                         
                        int index173_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index173_38);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA173_39 = input.LA(1);

                         
                        int index173_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index173_39);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA173_40 = input.LA(1);

                         
                        int index173_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index173_40);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA173_41 = input.LA(1);

                         
                        int index173_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index173_41);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA173_42 = input.LA(1);

                         
                        int index173_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index173_42);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA173_47 = input.LA(1);

                         
                        int index173_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index173_47);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 173, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA172_eotS =
        "\5\uffff";
    static final String DFA172_eofS =
        "\5\uffff";
    static final String DFA172_minS =
        "\2\4\3\uffff";
    static final String DFA172_maxS =
        "\2\144\3\uffff";
    static final String DFA172_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA172_specialS =
        "\5\uffff}>";
    static final String[] DFA172_transitionS = {
            "\1\3\1\uffff\5\3\1\2\1\3\5\uffff\1\3\3\uffff\2\3\3\uffff\25"+
            "\3\1\2\2\3\1\uffff\3\3\17\uffff\1\3\1\uffff\14\3\3\1\1\uffff"+
            "\15\3",
            "\1\4\1\uffff\5\4\1\2\1\4\5\uffff\1\4\3\uffff\2\4\3\uffff\25"+
            "\4\1\2\2\4\1\uffff\3\4\17\uffff\1\4\1\uffff\14\4\3\1\1\uffff"+
            "\15\4",
            "",
            "",
            ""
    };

    static final short[] DFA172_eot = DFA.unpackEncodedString(DFA172_eotS);
    static final short[] DFA172_eof = DFA.unpackEncodedString(DFA172_eofS);
    static final char[] DFA172_min = DFA.unpackEncodedStringToUnsignedChars(DFA172_minS);
    static final char[] DFA172_max = DFA.unpackEncodedStringToUnsignedChars(DFA172_maxS);
    static final short[] DFA172_accept = DFA.unpackEncodedString(DFA172_acceptS);
    static final short[] DFA172_special = DFA.unpackEncodedString(DFA172_specialS);
    static final short[][] DFA172_transition;

    static {
        int numStates = DFA172_transitionS.length;
        DFA172_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA172_transition[i] = DFA.unpackEncodedString(DFA172_transitionS[i]);
        }
    }

    class DFA172 extends DFA {

        public DFA172(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 172;
            this.eot = DFA172_eot;
            this.eof = DFA172_eof;
            this.min = DFA172_min;
            this.max = DFA172_max;
            this.accept = DFA172_accept;
            this.special = DFA172_special;
            this.transition = DFA172_transition;
        }
        public String getDescription() {
            return "859:66: ( ws | ( ( ws )? operator ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA176_eotS =
        "\31\uffff";
    static final String DFA176_eofS =
        "\31\uffff";
    static final String DFA176_minS =
        "\1\4\1\0\27\uffff";
    static final String DFA176_maxS =
        "\1\144\1\0\27\uffff";
    static final String DFA176_acceptS =
        "\2\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
        "\1\17\1\20\1\21\1\22\1\23\1\24\1\uffff\1\25\1\26\1\1\1\2";
    static final String DFA176_specialS =
        "\1\uffff\1\0\27\uffff}>";
    static final String[] DFA176_transitionS = {
            "\1\23\1\uffff\1\1\1\15\1\21\2\23\1\uffff\1\23\5\uffff\1\20\3"+
            "\uffff\2\23\3\uffff\1\23\1\3\23\23\4\uffff\1\16\1\25\1\22\17"+
            "\uffff\1\23\1\uffff\1\2\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
            "\1\14\1\17\1\26\4\uffff\15\23",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA176_eot = DFA.unpackEncodedString(DFA176_eotS);
    static final short[] DFA176_eof = DFA.unpackEncodedString(DFA176_eofS);
    static final char[] DFA176_min = DFA.unpackEncodedStringToUnsignedChars(DFA176_minS);
    static final char[] DFA176_max = DFA.unpackEncodedStringToUnsignedChars(DFA176_maxS);
    static final short[] DFA176_accept = DFA.unpackEncodedString(DFA176_acceptS);
    static final short[] DFA176_special = DFA.unpackEncodedString(DFA176_specialS);
    static final short[][] DFA176_transition;

    static {
        int numStates = DFA176_transitionS.length;
        DFA176_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA176_transition[i] = DFA.unpackEncodedString(DFA176_transitionS[i]);
        }
    }

    class DFA176 extends DFA {

        public DFA176(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 176;
            this.eot = DFA176_eot;
            this.eof = DFA176_eof;
            this.min = DFA176_min;
            this.max = DFA176_max;
            this.accept = DFA176_accept;
            this.special = DFA176_special;
            this.transition = DFA176_transition;
        }
        public String getDescription() {
            return "865:5: ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | {...}? TILDE STRING | {...}? LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA176_1 = input.LA(1);

                         
                        int index176_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_Css3()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index176_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 176, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA184_eotS =
        "\4\uffff";
    static final String DFA184_eofS =
        "\4\uffff";
    static final String DFA184_minS =
        "\2\13\2\uffff";
    static final String DFA184_maxS =
        "\2\126\2\uffff";
    static final String DFA184_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA184_specialS =
        "\4\uffff}>";
    static final String[] DFA184_transitionS = {
            "\1\3\10\uffff\1\2\77\uffff\3\1",
            "\1\3\10\uffff\1\2\77\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA184_eot = DFA.unpackEncodedString(DFA184_eotS);
    static final short[] DFA184_eof = DFA.unpackEncodedString(DFA184_eofS);
    static final char[] DFA184_min = DFA.unpackEncodedStringToUnsignedChars(DFA184_minS);
    static final char[] DFA184_max = DFA.unpackEncodedStringToUnsignedChars(DFA184_maxS);
    static final short[] DFA184_accept = DFA.unpackEncodedString(DFA184_acceptS);
    static final short[] DFA184_special = DFA.unpackEncodedString(DFA184_specialS);
    static final short[][] DFA184_transition;

    static {
        int numStates = DFA184_transitionS.length;
        DFA184_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA184_transition[i] = DFA.unpackEncodedString(DFA184_transitionS[i]);
        }
    }

    class DFA184 extends DFA {

        public DFA184(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 184;
            this.eot = DFA184_eot;
            this.eof = DFA184_eof;
            this.min = DFA184_min;
            this.max = DFA184_max;
            this.accept = DFA184_accept;
            this.special = DFA184_special;
            this.transition = DFA184_transition;
        }
        public String getDescription() {
            return "()* loopback of 922:17: ( ( ws )? COMMA ( ws )? fnAttribute )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA188_eotS =
        "\35\uffff";
    static final String DFA188_eofS =
        "\35\uffff";
    static final String DFA188_minS =
        "\1\4\3\0\1\uffff\24\0\4\uffff";
    static final String DFA188_maxS =
        "\1\144\3\0\1\uffff\24\0\4\uffff";
    static final String DFA188_acceptS =
        "\4\uffff\1\2\26\uffff\1\1\1\3";
    static final String DFA188_specialS =
        "\1\uffff\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\4\uffff}>";
    static final String[] DFA188_transitionS = {
            "\1\2\1\uffff\1\1\1\21\1\25\2\2\1\uffff\1\2\4\uffff\1\4\1\24"+
            "\1\4\2\uffff\2\2\3\uffff\1\2\1\7\23\2\1\uffff\2\5\1\uffff\1"+
            "\22\1\27\1\26\17\uffff\1\3\1\4\1\6\1\10\1\11\1\12\1\13\1\14"+
            "\1\15\1\16\1\17\1\20\1\23\1\30\4\uffff\15\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA188_eot = DFA.unpackEncodedString(DFA188_eotS);
    static final short[] DFA188_eof = DFA.unpackEncodedString(DFA188_eofS);
    static final char[] DFA188_min = DFA.unpackEncodedStringToUnsignedChars(DFA188_minS);
    static final char[] DFA188_max = DFA.unpackEncodedStringToUnsignedChars(DFA188_maxS);
    static final short[] DFA188_accept = DFA.unpackEncodedString(DFA188_acceptS);
    static final short[] DFA188_special = DFA.unpackEncodedString(DFA188_specialS);
    static final short[][] DFA188_transition;

    static {
        int numStates = DFA188_transitionS.length;
        DFA188_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA188_transition[i] = DFA.unpackEncodedString(DFA188_transitionS[i]);
        }
    }

    class DFA188 extends DFA {

        public DFA188(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 188;
            this.eot = DFA188_eot;
            this.eof = DFA188_eof;
            this.min = DFA188_min;
            this.max = DFA188_max;
            this.accept = DFA188_accept;
            this.special = DFA188_special;
            this.transition = DFA188_transition;
        }
        public String getDescription() {
            return "925:1: fnAttribute : ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | {...}? cp_expression | expression );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA188_1 = input.LA(1);

                         
                        int index188_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_Css3()) ) {s = 27;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index188_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA188_2 = input.LA(1);

                         
                        int index188_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 27;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 4;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 28;}

                         
                        input.seek(index188_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA188_3 = input.LA(1);

                         
                        int index188_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 27;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 4;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 28;}

                         
                        input.seek(index188_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA188_5 = input.LA(1);

                         
                        int index188_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index188_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA188_6 = input.LA(1);

                         
                        int index188_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index188_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA188_7 = input.LA(1);

                         
                        int index188_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index188_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA188_8 = input.LA(1);

                         
                        int index188_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index188_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA188_9 = input.LA(1);

                         
                        int index188_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index188_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA188_10 = input.LA(1);

                         
                        int index188_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index188_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA188_11 = input.LA(1);

                         
                        int index188_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index188_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA188_12 = input.LA(1);

                         
                        int index188_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index188_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA188_13 = input.LA(1);

                         
                        int index188_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index188_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA188_14 = input.LA(1);

                         
                        int index188_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index188_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA188_15 = input.LA(1);

                         
                        int index188_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index188_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA188_16 = input.LA(1);

                         
                        int index188_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index188_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA188_17 = input.LA(1);

                         
                        int index188_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index188_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA188_18 = input.LA(1);

                         
                        int index188_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 4;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 28;}

                         
                        input.seek(index188_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA188_19 = input.LA(1);

                         
                        int index188_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 4;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 28;}

                         
                        input.seek(index188_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA188_20 = input.LA(1);

                         
                        int index188_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index188_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA188_21 = input.LA(1);

                         
                        int index188_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index188_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA188_22 = input.LA(1);

                         
                        int index188_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index188_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA188_23 = input.LA(1);

                         
                        int index188_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 28;}

                         
                        input.seek(index188_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA188_24 = input.LA(1);

                         
                        int index188_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 28;}

                         
                        input.seek(index188_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 188, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA195_eotS =
        "\33\uffff";
    static final String DFA195_eofS =
        "\33\uffff";
    static final String DFA195_minS =
        "\1\4\27\0\3\uffff";
    static final String DFA195_maxS =
        "\1\144\27\0\3\uffff";
    static final String DFA195_acceptS =
        "\30\uffff\1\2\1\uffff\1\1";
    static final String DFA195_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\3\uffff}>";
    static final String[] DFA195_transitionS = {
            "\1\24\1\uffff\1\2\1\16\1\22\2\24\1\uffff\1\24\5\uffff\1\21\1"+
            "\30\2\uffff\2\24\3\uffff\1\24\1\4\23\24\1\uffff\2\1\1\uffff"+
            "\1\17\1\26\1\23\17\uffff\1\25\1\30\1\3\1\5\1\6\1\7\1\10\1\11"+
            "\1\12\1\13\1\14\1\15\1\20\1\27\4\uffff\15\24",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA195_eot = DFA.unpackEncodedString(DFA195_eotS);
    static final short[] DFA195_eof = DFA.unpackEncodedString(DFA195_eofS);
    static final char[] DFA195_min = DFA.unpackEncodedStringToUnsignedChars(DFA195_minS);
    static final char[] DFA195_max = DFA.unpackEncodedStringToUnsignedChars(DFA195_maxS);
    static final short[] DFA195_accept = DFA.unpackEncodedString(DFA195_acceptS);
    static final short[] DFA195_special = DFA.unpackEncodedString(DFA195_specialS);
    static final short[][] DFA195_transition;

    static {
        int numStates = DFA195_transitionS.length;
        DFA195_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA195_transition[i] = DFA.unpackEncodedString(DFA195_transitionS[i]);
        }
    }

    class DFA195 extends DFA {

        public DFA195(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 195;
            this.eot = DFA195_eot;
            this.eof = DFA195_eof;
            this.min = DFA195_min;
            this.max = DFA195_max;
            this.accept = DFA195_accept;
            this.special = DFA195_special;
            this.transition = DFA195_transition;
        }
        public String getDescription() {
            return "938:1: fnAttributeValue : ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )* | {...}? cp_math_expression );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA195_1 = input.LA(1);

                         
                        int index195_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index195_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA195_2 = input.LA(1);

                         
                        int index195_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index195_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA195_3 = input.LA(1);

                         
                        int index195_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index195_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA195_4 = input.LA(1);

                         
                        int index195_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index195_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA195_5 = input.LA(1);

                         
                        int index195_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index195_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA195_6 = input.LA(1);

                         
                        int index195_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index195_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA195_7 = input.LA(1);

                         
                        int index195_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index195_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA195_8 = input.LA(1);

                         
                        int index195_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index195_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA195_9 = input.LA(1);

                         
                        int index195_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index195_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA195_10 = input.LA(1);

                         
                        int index195_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index195_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA195_11 = input.LA(1);

                         
                        int index195_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index195_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA195_12 = input.LA(1);

                         
                        int index195_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index195_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA195_13 = input.LA(1);

                         
                        int index195_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index195_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA195_14 = input.LA(1);

                         
                        int index195_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index195_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA195_15 = input.LA(1);

                         
                        int index195_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 26;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 24;}

                         
                        input.seek(index195_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA195_16 = input.LA(1);

                         
                        int index195_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 26;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 24;}

                         
                        input.seek(index195_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA195_17 = input.LA(1);

                         
                        int index195_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index195_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA195_18 = input.LA(1);

                         
                        int index195_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index195_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA195_19 = input.LA(1);

                         
                        int index195_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index195_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA195_20 = input.LA(1);

                         
                        int index195_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 26;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 24;}

                         
                        input.seek(index195_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA195_21 = input.LA(1);

                         
                        int index195_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 26;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 24;}

                         
                        input.seek(index195_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA195_22 = input.LA(1);

                         
                        int index195_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index195_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA195_23 = input.LA(1);

                         
                        int index195_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index195_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 195, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA194_eotS =
        "\41\uffff";
    static final String DFA194_eofS =
        "\41\uffff";
    static final String DFA194_minS =
        "\2\4\37\uffff";
    static final String DFA194_maxS =
        "\2\144\37\uffff";
    static final String DFA194_acceptS =
        "\2\uffff\1\2\36\1";
    static final String DFA194_specialS =
        "\1\1\1\0\37\uffff}>";
    static final String[] DFA194_transitionS = {
            "\1\27\1\uffff\1\5\1\21\1\25\2\27\1\2\1\27\5\uffff\1\24\1\uffff"+
            "\1\2\1\uffff\2\27\3\uffff\1\27\1\7\23\27\1\3\2\4\1\uffff\1\22"+
            "\1\31\1\26\17\uffff\1\30\1\uffff\1\6\1\10\1\11\1\12\1\13\1\14"+
            "\1\15\1\16\1\17\1\20\1\23\1\32\3\1\1\uffff\15\27",
            "\1\35\1\uffff\1\5\1\21\1\25\2\35\1\2\1\35\5\uffff\1\24\1\uffff"+
            "\1\2\1\uffff\2\35\3\uffff\1\35\1\7\23\35\1\3\2\4\1\uffff\1\33"+
            "\1\37\1\26\17\uffff\1\36\1\uffff\1\6\1\10\1\11\1\12\1\13\1\14"+
            "\1\15\1\16\1\17\1\20\1\34\1\40\3\1\1\uffff\15\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA194_eot = DFA.unpackEncodedString(DFA194_eotS);
    static final short[] DFA194_eof = DFA.unpackEncodedString(DFA194_eofS);
    static final char[] DFA194_min = DFA.unpackEncodedStringToUnsignedChars(DFA194_minS);
    static final char[] DFA194_max = DFA.unpackEncodedStringToUnsignedChars(DFA194_maxS);
    static final short[] DFA194_accept = DFA.unpackEncodedString(DFA194_acceptS);
    static final short[] DFA194_special = DFA.unpackEncodedString(DFA194_specialS);
    static final short[][] DFA194_transition;

    static {
        int numStates = DFA194_transitionS.length;
        DFA194_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA194_transition[i] = DFA.unpackEncodedString(DFA194_transitionS[i]);
        }
    }

    class DFA194 extends DFA {

        public DFA194(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 194;
            this.eot = DFA194_eot;
            this.eof = DFA194_eof;
            this.min = DFA194_min;
            this.max = DFA194_max;
            this.accept = DFA194_accept;
            this.special = DFA194_special;
            this.transition = DFA194_transition;
        }
        public String getDescription() {
            return "()* loopback of 940:18: ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA194_1 = input.LA(1);

                         
                        int index194_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA194_1==COMMA||LA194_1==RPAREN) ) {s = 2;}

                        else if ( ((LA194_1>=WS && LA194_1<=COMMENT)) ) {s = 1;}

                        else if ( ((LA194_1>=MINUS && LA194_1<=PLUS)) && (synpred29_Css3())) {s = 4;}

                        else if ( (LA194_1==IDENT) && (synpred29_Css3())) {s = 5;}

                        else if ( (LA194_1==NUMBER) && (synpred29_Css3())) {s = 6;}

                        else if ( (LA194_1==PERCENTAGE) && (synpred29_Css3())) {s = 7;}

                        else if ( (LA194_1==LENGTH) && (synpred29_Css3())) {s = 8;}

                        else if ( (LA194_1==EMS) && (synpred29_Css3())) {s = 9;}

                        else if ( (LA194_1==REM) && (synpred29_Css3())) {s = 10;}

                        else if ( (LA194_1==EXS) && (synpred29_Css3())) {s = 11;}

                        else if ( (LA194_1==ANGLE) && (synpred29_Css3())) {s = 12;}

                        else if ( (LA194_1==TIME) && (synpred29_Css3())) {s = 13;}

                        else if ( (LA194_1==FREQ) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA194_1==RESOLUTION) && (synpred29_Css3())) {s = 15;}

                        else if ( (LA194_1==DIMENSION) && (synpred29_Css3())) {s = 16;}

                        else if ( (LA194_1==STRING) && (synpred29_Css3())) {s = 17;}

                        else if ( (LA194_1==TILDE) && (synpred29_Css3())) {s = 27;}

                        else if ( (LA194_1==LESS_JS_STRING) && (synpred29_Css3())) {s = 28;}

                        else if ( (LA194_1==GEN) && (synpred29_Css3())) {s = 20;}

                        else if ( (LA194_1==URI) && (synpred29_Css3())) {s = 21;}

                        else if ( (LA194_1==HASH) && (synpred29_Css3())) {s = 22;}

                        else if ( (LA194_1==NAMESPACE_SYM||(LA194_1>=CHARSET_SYM && LA194_1<=IMPORT_SYM)||LA194_1==MEDIA_SYM||(LA194_1>=AT_IDENT && LA194_1<=MOZ_DOCUMENT_SYM)||LA194_1==WEBKIT_KEYFRAMES_SYM||(LA194_1>=PAGE_SYM && LA194_1<=RIGHTBOTTOM_SYM)||(LA194_1>=SASS_CONTENT && LA194_1<=SASS_WHILE)) && (synpred29_Css3())) {s = 29;}

                        else if ( (LA194_1==SASS_VAR) && (synpred29_Css3())) {s = 30;}

                        else if ( (LA194_1==HASH_SYMBOL) && (synpred29_Css3())) {s = 31;}

                        else if ( (LA194_1==PERCENTAGE_SYMBOL) && (synpred29_Css3())) {s = 32;}

                        else if ( (LA194_1==SOLIDUS) && (synpred29_Css3())) {s = 3;}

                         
                        input.seek(index194_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA194_0 = input.LA(1);

                         
                        int index194_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA194_0>=WS && LA194_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA194_0==COMMA||LA194_0==RPAREN) ) {s = 2;}

                        else if ( (LA194_0==SOLIDUS) && (synpred29_Css3())) {s = 3;}

                        else if ( ((LA194_0>=MINUS && LA194_0<=PLUS)) && (synpred29_Css3())) {s = 4;}

                        else if ( (LA194_0==IDENT) && (synpred29_Css3())) {s = 5;}

                        else if ( (LA194_0==NUMBER) && (synpred29_Css3())) {s = 6;}

                        else if ( (LA194_0==PERCENTAGE) && (synpred29_Css3())) {s = 7;}

                        else if ( (LA194_0==LENGTH) && (synpred29_Css3())) {s = 8;}

                        else if ( (LA194_0==EMS) && (synpred29_Css3())) {s = 9;}

                        else if ( (LA194_0==REM) && (synpred29_Css3())) {s = 10;}

                        else if ( (LA194_0==EXS) && (synpred29_Css3())) {s = 11;}

                        else if ( (LA194_0==ANGLE) && (synpred29_Css3())) {s = 12;}

                        else if ( (LA194_0==TIME) && (synpred29_Css3())) {s = 13;}

                        else if ( (LA194_0==FREQ) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA194_0==RESOLUTION) && (synpred29_Css3())) {s = 15;}

                        else if ( (LA194_0==DIMENSION) && (synpred29_Css3())) {s = 16;}

                        else if ( (LA194_0==STRING) && (synpred29_Css3())) {s = 17;}

                        else if ( (LA194_0==TILDE) && (synpred29_Css3())) {s = 18;}

                        else if ( (LA194_0==LESS_JS_STRING) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA194_0==GEN) && (synpred29_Css3())) {s = 20;}

                        else if ( (LA194_0==URI) && (synpred29_Css3())) {s = 21;}

                        else if ( (LA194_0==HASH) && (synpred29_Css3())) {s = 22;}

                        else if ( (LA194_0==NAMESPACE_SYM||(LA194_0>=CHARSET_SYM && LA194_0<=IMPORT_SYM)||LA194_0==MEDIA_SYM||(LA194_0>=AT_IDENT && LA194_0<=MOZ_DOCUMENT_SYM)||LA194_0==WEBKIT_KEYFRAMES_SYM||(LA194_0>=PAGE_SYM && LA194_0<=RIGHTBOTTOM_SYM)||(LA194_0>=SASS_CONTENT && LA194_0<=SASS_WHILE)) && (synpred29_Css3())) {s = 23;}

                        else if ( (LA194_0==SASS_VAR) && (synpred29_Css3())) {s = 24;}

                        else if ( (LA194_0==HASH_SYMBOL) && (synpred29_Css3())) {s = 25;}

                        else if ( (LA194_0==PERCENTAGE_SYMBOL) && (synpred29_Css3())) {s = 26;}

                         
                        input.seek(index194_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 194, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA193_eotS =
        "\5\uffff";
    static final String DFA193_eofS =
        "\5\uffff";
    static final String DFA193_minS =
        "\2\4\3\uffff";
    static final String DFA193_maxS =
        "\2\144\3\uffff";
    static final String DFA193_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA193_specialS =
        "\5\uffff}>";
    static final String[] DFA193_transitionS = {
            "\1\3\1\uffff\5\3\1\uffff\1\3\5\uffff\1\3\3\uffff\2\3\3\uffff"+
            "\25\3\1\2\2\3\1\uffff\3\3\17\uffff\1\3\1\uffff\14\3\3\1\1\uffff"+
            "\15\3",
            "\1\4\1\uffff\5\4\1\uffff\1\4\5\uffff\1\4\3\uffff\2\4\3\uffff"+
            "\25\4\1\2\2\4\1\uffff\3\4\17\uffff\1\4\1\uffff\14\4\3\1\1\uffff"+
            "\15\4",
            "",
            "",
            ""
    };

    static final short[] DFA193_eot = DFA.unpackEncodedString(DFA193_eotS);
    static final short[] DFA193_eof = DFA.unpackEncodedString(DFA193_eofS);
    static final char[] DFA193_min = DFA.unpackEncodedStringToUnsignedChars(DFA193_minS);
    static final char[] DFA193_max = DFA.unpackEncodedStringToUnsignedChars(DFA193_maxS);
    static final short[] DFA193_accept = DFA.unpackEncodedString(DFA193_acceptS);
    static final short[] DFA193_special = DFA.unpackEncodedString(DFA193_specialS);
    static final short[][] DFA193_transition;

    static {
        int numStates = DFA193_transitionS.length;
        DFA193_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA193_transition[i] = DFA.unpackEncodedString(DFA193_transitionS[i]);
        }
    }

    class DFA193 extends DFA {

        public DFA193(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 193;
            this.eot = DFA193_eot;
            this.eof = DFA193_eof;
            this.min = DFA193_min;
            this.max = DFA193_max;
            this.accept = DFA193_accept;
            this.special = DFA193_special;
            this.transition = DFA193_transition;
        }
        public String getDescription() {
            return "940:71: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA202_eotS =
        "\4\uffff";
    static final String DFA202_eofS =
        "\2\3\2\uffff";
    static final String DFA202_minS =
        "\2\4\2\uffff";
    static final String DFA202_maxS =
        "\2\156\2\uffff";
    static final String DFA202_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA202_specialS =
        "\4\uffff}>";
    static final String[] DFA202_transitionS = {
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\15\uffff"+
            "\3\1\1\2\15\3\11\uffff\1\3",
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\15\uffff"+
            "\3\1\1\2\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA202_eot = DFA.unpackEncodedString(DFA202_eotS);
    static final short[] DFA202_eof = DFA.unpackEncodedString(DFA202_eofS);
    static final char[] DFA202_min = DFA.unpackEncodedStringToUnsignedChars(DFA202_minS);
    static final char[] DFA202_max = DFA.unpackEncodedStringToUnsignedChars(DFA202_maxS);
    static final short[] DFA202_accept = DFA.unpackEncodedString(DFA202_acceptS);
    static final short[] DFA202_special = DFA.unpackEncodedString(DFA202_specialS);
    static final short[][] DFA202_transition;

    static {
        int numStates = DFA202_transitionS.length;
        DFA202_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA202_transition[i] = DFA.unpackEncodedString(DFA202_transitionS[i]);
        }
    }

    class DFA202 extends DFA {

        public DFA202(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 202;
            this.eot = DFA202_eot;
            this.eof = DFA202_eof;
            this.min = DFA202_min;
            this.max = DFA202_max;
            this.accept = DFA202_accept;
            this.special = DFA202_special;
            this.transition = DFA202_transition;
        }
        public String getDescription() {
            return "959:72: ( ( ws )? SASS_DEFAULT )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA207_eotS =
        "\60\uffff";
    static final String DFA207_eofS =
        "\1\2\57\uffff";
    static final String DFA207_minS =
        "\1\4\1\0\34\uffff\1\0\21\uffff";
    static final String DFA207_maxS =
        "\1\156\1\0\34\uffff\1\0\21\uffff";
    static final String DFA207_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA207_specialS =
        "\1\uffff\1\0\34\uffff\1\1\21\uffff}>";
    static final String[] DFA207_transitionS = {
            "\3\2\2\uffff\2\2\1\36\3\2\3\uffff\1\2\1\uffff\4\2\3\uffff\1"+
            "\2\1\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\15\uffff"+
            "\3\1\16\2\11\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA207_eot = DFA.unpackEncodedString(DFA207_eotS);
    static final short[] DFA207_eof = DFA.unpackEncodedString(DFA207_eofS);
    static final char[] DFA207_min = DFA.unpackEncodedStringToUnsignedChars(DFA207_minS);
    static final char[] DFA207_max = DFA.unpackEncodedStringToUnsignedChars(DFA207_maxS);
    static final short[] DFA207_accept = DFA.unpackEncodedString(DFA207_acceptS);
    static final short[] DFA207_special = DFA.unpackEncodedString(DFA207_specialS);
    static final short[][] DFA207_transition;

    static {
        int numStates = DFA207_transitionS.length;
        DFA207_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA207_transition[i] = DFA.unpackEncodedString(DFA207_transitionS[i]);
        }
    }

    class DFA207 extends DFA {

        public DFA207(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 207;
            this.eot = DFA207_eot;
            this.eof = DFA207_eof;
            this.min = DFA207_min;
            this.max = DFA207_max;
            this.accept = DFA207_accept;
            this.special = DFA207_special;
            this.transition = DFA207_transition;
        }
        public String getDescription() {
            return "()* loopback of 975:5: ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA207_1 = input.LA(1);

                         
                        int index207_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_Css3()) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index207_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA207_30 = input.LA(1);

                         
                        int index207_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_Css3()) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index207_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 207, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA211_eotS =
        "\105\uffff";
    static final String DFA211_eofS =
        "\1\2\104\uffff";
    static final String DFA211_minS =
        "\1\4\1\0\5\uffff\2\0\1\uffff\16\0\1\uffff\1\0\4\uffff\1\0\3\uffff"+
        "\11\0\1\uffff\1\0\6\uffff\1\0\21\uffff";
    static final String DFA211_maxS =
        "\1\156\1\0\5\uffff\2\0\1\uffff\16\0\1\uffff\1\0\4\uffff\1\0\3\uffff"+
        "\11\0\1\uffff\1\0\6\uffff\1\0\21\uffff";
    static final String DFA211_acceptS =
        "\2\uffff\1\3\56\uffff\1\1\1\2\1\uffff\21\2";
    static final String DFA211_specialS =
        "\1\0\1\1\5\uffff\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\uffff\1\22\4\uffff\1\23\3"+
        "\uffff\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\uffff\1\35"+
        "\6\uffff\1\36\21\uffff}>";
    static final String[] DFA211_transitionS = {
            "\1\54\1\2\1\13\1\77\1\101\1\54\1\51\1\2\1\46\2\2\1\61\1\uffff"+
            "\1\62\1\15\1\104\2\2\1\45\1\43\3\uffff\1\44\1\65\1\26\1\47\1"+
            "\42\20\54\1\uffff\1\36\1\31\1\27\1\63\1\12\1\14\6\2\1\uffff"+
            "\1\2\6\uffff\1\2\1\17\1\103\1\64\1\66\1\67\1\70\1\71\1\72\1"+
            "\73\1\74\1\75\1\76\1\100\1\102\3\1\1\2\1\25\1\7\1\10\1\16\2"+
            "\20\1\21\1\54\1\22\1\52\1\50\1\23\1\24\6\61\2\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA211_eot = DFA.unpackEncodedString(DFA211_eotS);
    static final short[] DFA211_eof = DFA.unpackEncodedString(DFA211_eofS);
    static final char[] DFA211_min = DFA.unpackEncodedStringToUnsignedChars(DFA211_minS);
    static final char[] DFA211_max = DFA.unpackEncodedStringToUnsignedChars(DFA211_maxS);
    static final short[] DFA211_accept = DFA.unpackEncodedString(DFA211_acceptS);
    static final short[] DFA211_special = DFA.unpackEncodedString(DFA211_specialS);
    static final short[][] DFA211_transition;

    static {
        int numStates = DFA211_transitionS.length;
        DFA211_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA211_transition[i] = DFA.unpackEncodedString(DFA211_transitionS[i]);
        }
    }

    class DFA211 extends DFA {

        public DFA211(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 211;
            this.eot = DFA211_eot;
            this.eof = DFA211_eof;
            this.min = DFA211_min;
            this.max = DFA211_max;
            this.accept = DFA211_accept;
            this.special = DFA211_special;
            this.transition = DFA211_transition;
        }
        public String getDescription() {
            return "()* loopback of 991:5: ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA211_0 = input.LA(1);

                         
                        int index211_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA211_0>=WS && LA211_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA211_0==EOF||LA211_0==SEMI||LA211_0==COMMA||(LA211_0>=LBRACE && LA211_0<=RBRACE)||(LA211_0>=RPAREN && LA211_0<=COLON)||(LA211_0>=DOT && LA211_0<=PIPE)||LA211_0==LESS_AND||LA211_0==RBRACKET||LA211_0==SASS_DEFAULT||(LA211_0>=CP_DOTS && LA211_0<=LESS_REST)||LA211_0==AT_SIGN) ) {s = 2;}

                        else if ( (LA211_0==SASS_MIXIN) ) {s = 7;}

                        else if ( (LA211_0==SASS_INCLUDE) ) {s = 8;}

                        else if ( (LA211_0==HASH_SYMBOL) ) {s = 10;}

                        else if ( (LA211_0==IDENT) ) {s = 11;}

                        else if ( (LA211_0==HASH) ) {s = 12;}

                        else if ( (LA211_0==GEN) ) {s = 13;}

                        else if ( (LA211_0==SASS_EXTEND) ) {s = 14;}

                        else if ( (LA211_0==SASS_VAR) ) {s = 15;}

                        else if ( ((LA211_0>=SASS_DEBUG && LA211_0<=SASS_WARN)) ) {s = 16;}

                        else if ( (LA211_0==SASS_IF) ) {s = 17;}

                        else if ( (LA211_0==SASS_FOR) ) {s = 18;}

                        else if ( (LA211_0==SASS_EACH) ) {s = 19;}

                        else if ( (LA211_0==SASS_WHILE) ) {s = 20;}

                        else if ( (LA211_0==SASS_CONTENT) ) {s = 21;}

                        else if ( (LA211_0==PAGE_SYM) ) {s = 22;}

                        else if ( (LA211_0==GREATER) ) {s = 23;}

                        else if ( (LA211_0==PLUS) ) {s = 25;}

                        else if ( (LA211_0==MINUS) ) {s = 30;}

                        else if ( (LA211_0==FONT_FACE_SYM) ) {s = 34;}

                        else if ( (LA211_0==MOZ_DOCUMENT_SYM) ) {s = 35;}

                        else if ( (LA211_0==WEBKIT_KEYFRAMES_SYM) ) {s = 36;}

                        else if ( (LA211_0==AT_IDENT) ) {s = 37;}

                        else if ( (LA211_0==MEDIA_SYM) ) {s = 38;}

                        else if ( (LA211_0==COUNTER_STYLE_SYM) ) {s = 39;}

                        else if ( (LA211_0==SASS_RETURN) ) {s = 40;}

                        else if ( (LA211_0==IMPORT_SYM) ) {s = 41;}

                        else if ( (LA211_0==SASS_FUNCTION) ) {s = 42;}

                        else if ( (LA211_0==NAMESPACE_SYM||LA211_0==CHARSET_SYM||(LA211_0>=TOPLEFTCORNER_SYM && LA211_0<=RIGHTBOTTOM_SYM)||LA211_0==SASS_ELSE) ) {s = 44;}

                        else if ( (LA211_0==AND||(LA211_0>=OR && LA211_0<=GREATER_OR_EQ)) && (synpred31_Css3())) {s = 49;}

                        else if ( (LA211_0==NOT) && (synpred32_Css3())) {s = 50;}

                        else if ( (LA211_0==TILDE) ) {s = 51;}

                        else if ( (LA211_0==NUMBER) && (synpred32_Css3())) {s = 52;}

                        else if ( (LA211_0==PERCENTAGE) && (synpred32_Css3())) {s = 53;}

                        else if ( (LA211_0==LENGTH) && (synpred32_Css3())) {s = 54;}

                        else if ( (LA211_0==EMS) && (synpred32_Css3())) {s = 55;}

                        else if ( (LA211_0==REM) && (synpred32_Css3())) {s = 56;}

                        else if ( (LA211_0==EXS) && (synpred32_Css3())) {s = 57;}

                        else if ( (LA211_0==ANGLE) && (synpred32_Css3())) {s = 58;}

                        else if ( (LA211_0==TIME) && (synpred32_Css3())) {s = 59;}

                        else if ( (LA211_0==FREQ) && (synpred32_Css3())) {s = 60;}

                        else if ( (LA211_0==RESOLUTION) && (synpred32_Css3())) {s = 61;}

                        else if ( (LA211_0==DIMENSION) && (synpred32_Css3())) {s = 62;}

                        else if ( (LA211_0==STRING) && (synpred32_Css3())) {s = 63;}

                        else if ( (LA211_0==LESS_JS_STRING) && (synpred32_Css3())) {s = 64;}

                        else if ( (LA211_0==URI) && (synpred32_Css3())) {s = 65;}

                        else if ( (LA211_0==PERCENTAGE_SYMBOL) && (synpred32_Css3())) {s = 66;}

                        else if ( (LA211_0==IMPORTANT_SYM) && (synpred32_Css3())) {s = 67;}

                        else if ( (LA211_0==LPAREN) && (synpred32_Css3())) {s = 68;}

                         
                        input.seek(index211_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA211_1 = input.LA(1);

                         
                        int index211_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_Css3()) ) {s = 49;}

                        else if ( (synpred32_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index211_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA211_7 = input.LA(1);

                         
                        int index211_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index211_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA211_8 = input.LA(1);

                         
                        int index211_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}

                         
                        input.seek(index211_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA211_10 = input.LA(1);

                         
                        int index211_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index211_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA211_11 = input.LA(1);

                         
                        int index211_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index211_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA211_12 = input.LA(1);

                         
                        int index211_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index211_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA211_13 = input.LA(1);

                         
                        int index211_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index211_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA211_14 = input.LA(1);

                         
                        int index211_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index211_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA211_15 = input.LA(1);

                         
                        int index211_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}

                         
                        input.seek(index211_15);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA211_16 = input.LA(1);

                         
                        int index211_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index211_16);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA211_17 = input.LA(1);

                         
                        int index211_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index211_17);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA211_18 = input.LA(1);

                         
                        int index211_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index211_18);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA211_19 = input.LA(1);

                         
                        int index211_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index211_19);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA211_20 = input.LA(1);

                         
                        int index211_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index211_20);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA211_21 = input.LA(1);

                         
                        int index211_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index211_21);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA211_22 = input.LA(1);

                         
                        int index211_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index211_22);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA211_23 = input.LA(1);

                         
                        int index211_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_Css3()) ) {s = 49;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index211_23);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA211_25 = input.LA(1);

                         
                        int index211_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index211_25);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA211_30 = input.LA(1);

                         
                        int index211_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index211_30);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA211_34 = input.LA(1);

                         
                        int index211_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index211_34);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA211_35 = input.LA(1);

                         
                        int index211_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index211_35);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA211_36 = input.LA(1);

                         
                        int index211_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index211_36);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA211_37 = input.LA(1);

                         
                        int index211_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index211_37);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA211_38 = input.LA(1);

                         
                        int index211_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index211_38);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA211_39 = input.LA(1);

                         
                        int index211_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index211_39);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA211_40 = input.LA(1);

                         
                        int index211_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index211_40);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA211_41 = input.LA(1);

                         
                        int index211_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index211_41);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA211_42 = input.LA(1);

                         
                        int index211_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index211_42);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA211_44 = input.LA(1);

                         
                        int index211_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred32_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index211_44);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA211_51 = input.LA(1);

                         
                        int index211_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred32_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index211_51);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 211, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA216_eotS =
        "\33\uffff";
    static final String DFA216_eofS =
        "\33\uffff";
    static final String DFA216_minS =
        "\1\4\30\uffff\1\0\1\uffff";
    static final String DFA216_maxS =
        "\1\144\30\uffff\1\0\1\uffff";
    static final String DFA216_acceptS =
        "\1\uffff\30\1\1\uffff\1\2";
    static final String DFA216_specialS =
        "\1\0\30\uffff\1\1\1\uffff}>";
    static final String[] DFA216_transitionS = {
            "\1\24\1\uffff\1\2\1\16\1\22\2\24\1\uffff\1\24\5\uffff\1\21\1"+
            "\31\2\uffff\2\24\3\uffff\1\24\1\4\23\24\1\uffff\2\1\1\uffff"+
            "\1\17\1\26\1\23\17\uffff\1\25\1\30\1\3\1\5\1\6\1\7\1\10\1\11"+
            "\1\12\1\13\1\14\1\15\1\20\1\27\4\uffff\15\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA216_eot = DFA.unpackEncodedString(DFA216_eotS);
    static final short[] DFA216_eof = DFA.unpackEncodedString(DFA216_eofS);
    static final char[] DFA216_min = DFA.unpackEncodedStringToUnsignedChars(DFA216_minS);
    static final char[] DFA216_max = DFA.unpackEncodedStringToUnsignedChars(DFA216_maxS);
    static final short[] DFA216_accept = DFA.unpackEncodedString(DFA216_acceptS);
    static final short[] DFA216_special = DFA.unpackEncodedString(DFA216_specialS);
    static final short[][] DFA216_transition;

    static {
        int numStates = DFA216_transitionS.length;
        DFA216_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA216_transition[i] = DFA.unpackEncodedString(DFA216_transitionS[i]);
        }
    }

    class DFA216 extends DFA {

        public DFA216(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 216;
            this.eot = DFA216_eot;
            this.eof = DFA216_eof;
            this.min = DFA216_min;
            this.max = DFA216_max;
            this.accept = DFA216_accept;
            this.special = DFA216_special;
            this.transition = DFA216_transition;
        }
        public String getDescription() {
            return "1005:9: ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA216_0 = input.LA(1);

                         
                        int index216_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA216_0>=MINUS && LA216_0<=PLUS)) && (synpred33_Css3())) {s = 1;}

                        else if ( (LA216_0==IDENT) && (synpred33_Css3())) {s = 2;}

                        else if ( (LA216_0==NUMBER) && (synpred33_Css3())) {s = 3;}

                        else if ( (LA216_0==PERCENTAGE) && (synpred33_Css3())) {s = 4;}

                        else if ( (LA216_0==LENGTH) && (synpred33_Css3())) {s = 5;}

                        else if ( (LA216_0==EMS) && (synpred33_Css3())) {s = 6;}

                        else if ( (LA216_0==REM) && (synpred33_Css3())) {s = 7;}

                        else if ( (LA216_0==EXS) && (synpred33_Css3())) {s = 8;}

                        else if ( (LA216_0==ANGLE) && (synpred33_Css3())) {s = 9;}

                        else if ( (LA216_0==TIME) && (synpred33_Css3())) {s = 10;}

                        else if ( (LA216_0==FREQ) && (synpred33_Css3())) {s = 11;}

                        else if ( (LA216_0==RESOLUTION) && (synpred33_Css3())) {s = 12;}

                        else if ( (LA216_0==DIMENSION) && (synpred33_Css3())) {s = 13;}

                        else if ( (LA216_0==STRING) && (synpred33_Css3())) {s = 14;}

                        else if ( (LA216_0==TILDE) && (synpred33_Css3())) {s = 15;}

                        else if ( (LA216_0==LESS_JS_STRING) && (synpred33_Css3())) {s = 16;}

                        else if ( (LA216_0==GEN) && (synpred33_Css3())) {s = 17;}

                        else if ( (LA216_0==URI) && (synpred33_Css3())) {s = 18;}

                        else if ( (LA216_0==HASH) && (synpred33_Css3())) {s = 19;}

                        else if ( (LA216_0==NAMESPACE_SYM||(LA216_0>=CHARSET_SYM && LA216_0<=IMPORT_SYM)||LA216_0==MEDIA_SYM||(LA216_0>=AT_IDENT && LA216_0<=MOZ_DOCUMENT_SYM)||LA216_0==WEBKIT_KEYFRAMES_SYM||(LA216_0>=PAGE_SYM && LA216_0<=RIGHTBOTTOM_SYM)||(LA216_0>=SASS_CONTENT && LA216_0<=SASS_WHILE)) && (synpred33_Css3())) {s = 20;}

                        else if ( (LA216_0==SASS_VAR) && (synpred33_Css3())) {s = 21;}

                        else if ( (LA216_0==HASH_SYMBOL) && (synpred33_Css3())) {s = 22;}

                        else if ( (LA216_0==PERCENTAGE_SYMBOL) && (synpred33_Css3())) {s = 23;}

                        else if ( (LA216_0==IMPORTANT_SYM) && (synpred33_Css3())) {s = 24;}

                        else if ( (LA216_0==LPAREN) ) {s = 25;}

                         
                        input.seek(index216_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA216_25 = input.LA(1);

                         
                        int index216_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_Css3()) ) {s = 24;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index216_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 216, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA220_eotS =
        "\106\uffff";
    static final String DFA220_eofS =
        "\1\2\105\uffff";
    static final String DFA220_minS =
        "\1\4\1\0\4\uffff\1\0\35\uffff\2\0\40\uffff";
    static final String DFA220_maxS =
        "\1\156\1\0\4\uffff\1\0\35\uffff\2\0\40\uffff";
    static final String DFA220_acceptS =
        "\2\uffff\1\2\102\uffff\1\1";
    static final String DFA220_specialS =
        "\1\0\1\1\4\uffff\1\2\35\uffff\1\3\1\4\40\uffff}>";
    static final String[] DFA220_transitionS = {
            "\14\2\1\uffff\7\2\3\uffff\25\2\1\105\1\6\1\45\10\2\1\44\1\2"+
            "\1\uffff\1\2\6\uffff\17\2\3\1\26\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA220_eot = DFA.unpackEncodedString(DFA220_eotS);
    static final short[] DFA220_eof = DFA.unpackEncodedString(DFA220_eofS);
    static final char[] DFA220_min = DFA.unpackEncodedStringToUnsignedChars(DFA220_minS);
    static final char[] DFA220_max = DFA.unpackEncodedStringToUnsignedChars(DFA220_maxS);
    static final short[] DFA220_accept = DFA.unpackEncodedString(DFA220_acceptS);
    static final short[] DFA220_special = DFA.unpackEncodedString(DFA220_specialS);
    static final short[][] DFA220_transition;

    static {
        int numStates = DFA220_transitionS.length;
        DFA220_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA220_transition[i] = DFA.unpackEncodedString(DFA220_transitionS[i]);
        }
    }

    class DFA220 extends DFA {

        public DFA220(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 220;
            this.eot = DFA220_eot;
            this.eof = DFA220_eof;
            this.min = DFA220_min;
            this.max = DFA220_max;
            this.accept = DFA220_accept;
            this.special = DFA220_special;
            this.transition = DFA220_transition;
        }
        public String getDescription() {
            return "()* loopback of 1032:10: ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA220_0 = input.LA(1);

                         
                        int index220_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA220_0>=WS && LA220_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA220_0==EOF||(LA220_0>=NAMESPACE_SYM && LA220_0<=AND)||(LA220_0>=NOT && LA220_0<=MOZ_DOCUMENT_SYM)||(LA220_0>=WEBKIT_KEYFRAMES_SYM && LA220_0<=RIGHTBOTTOM_SYM)||(LA220_0>=GREATER && LA220_0<=SASS_EXTEND_ONLY_SELECTOR)||LA220_0==PIPE||LA220_0==LESS_AND||(LA220_0>=RBRACKET && LA220_0<=PERCENTAGE_SYMBOL)||(LA220_0>=SASS_DEFAULT && LA220_0<=LESS_REST)||LA220_0==AT_SIGN) ) {s = 2;}

                        else if ( (LA220_0==MINUS) ) {s = 6;}

                        else if ( (LA220_0==STAR) ) {s = 36;}

                        else if ( (LA220_0==PLUS) ) {s = 37;}

                        else if ( (LA220_0==SOLIDUS) && (synpred34_Css3())) {s = 69;}

                         
                        input.seek(index220_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA220_1 = input.LA(1);

                         
                        int index220_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_Css3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index220_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA220_6 = input.LA(1);

                         
                        int index220_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_Css3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index220_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA220_36 = input.LA(1);

                         
                        int index220_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_Css3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index220_36);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA220_37 = input.LA(1);

                         
                        int index220_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_Css3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index220_37);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 220, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA225_eotS =
        "\6\uffff";
    static final String DFA225_eofS =
        "\6\uffff";
    static final String DFA225_minS =
        "\2\4\3\uffff\1\4";
    static final String DFA225_maxS =
        "\2\144\3\uffff\1\144";
    static final String DFA225_acceptS =
        "\2\uffff\1\1\1\2\1\3\1\uffff";
    static final String DFA225_specialS =
        "\6\uffff}>";
    static final String[] DFA225_transitionS = {
            "\1\2\1\uffff\5\2\1\uffff\1\2\5\uffff\1\2\1\4\2\uffff\2\2\3\uffff"+
            "\25\2\1\uffff\2\1\1\uffff\3\2\17\uffff\1\2\1\3\14\2\4\uffff"+
            "\15\2",
            "\1\2\1\uffff\5\2\1\uffff\1\2\5\uffff\1\2\1\4\2\uffff\2\2\3"+
            "\uffff\25\2\4\uffff\3\2\17\uffff\1\2\1\uffff\14\2\3\5\1\uffff"+
            "\15\2",
            "",
            "",
            "",
            "\1\2\1\uffff\5\2\1\uffff\1\2\5\uffff\1\2\1\4\2\uffff\2\2\3"+
            "\uffff\25\2\4\uffff\3\2\17\uffff\1\2\1\uffff\14\2\3\5\1\uffff"+
            "\15\2"
    };

    static final short[] DFA225_eot = DFA.unpackEncodedString(DFA225_eotS);
    static final short[] DFA225_eof = DFA.unpackEncodedString(DFA225_eofS);
    static final char[] DFA225_min = DFA.unpackEncodedStringToUnsignedChars(DFA225_minS);
    static final char[] DFA225_max = DFA.unpackEncodedStringToUnsignedChars(DFA225_maxS);
    static final short[] DFA225_accept = DFA.unpackEncodedString(DFA225_acceptS);
    static final short[] DFA225_special = DFA.unpackEncodedString(DFA225_specialS);
    static final short[][] DFA225_transition;

    static {
        int numStates = DFA225_transitionS.length;
        DFA225_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA225_transition[i] = DFA.unpackEncodedString(DFA225_transitionS[i]);
        }
    }

    class DFA225 extends DFA {

        public DFA225(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 225;
            this.eot = DFA225_eot;
            this.eof = DFA225_eof;
            this.min = DFA225_min;
            this.max = DFA225_max;
            this.accept = DFA225_accept;
            this.special = DFA225_special;
            this.transition = DFA225_transition;
        }
        public String getDescription() {
            return "1037:1: cp_math_expression_atom : ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA230_eotS =
        "\4\uffff";
    static final String DFA230_eofS =
        "\4\uffff";
    static final String DFA230_minS =
        "\2\15\2\uffff";
    static final String DFA230_maxS =
        "\2\155\2\uffff";
    static final String DFA230_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA230_specialS =
        "\4\uffff}>";
    static final String[] DFA230_transitionS = {
            "\1\3\106\uffff\3\1\26\uffff\1\2",
            "\1\3\106\uffff\3\1\26\uffff\1\2",
            "",
            ""
    };

    static final short[] DFA230_eot = DFA.unpackEncodedString(DFA230_eotS);
    static final short[] DFA230_eof = DFA.unpackEncodedString(DFA230_eofS);
    static final char[] DFA230_min = DFA.unpackEncodedStringToUnsignedChars(DFA230_minS);
    static final char[] DFA230_max = DFA.unpackEncodedStringToUnsignedChars(DFA230_maxS);
    static final short[] DFA230_accept = DFA.unpackEncodedString(DFA230_acceptS);
    static final short[] DFA230_special = DFA.unpackEncodedString(DFA230_specialS);
    static final short[][] DFA230_transition;

    static {
        int numStates = DFA230_transitionS.length;
        DFA230_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA230_transition[i] = DFA.unpackEncodedString(DFA230_transitionS[i]);
        }
    }

    class DFA230 extends DFA {

        public DFA230(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 230;
            this.eot = DFA230_eot;
            this.eof = DFA230_eof;
            this.min = DFA230_min;
            this.max = DFA230_max;
            this.accept = DFA230_accept;
            this.special = DFA230_special;
            this.transition = DFA230_transition;
        }
        public String getDescription() {
            return "1053:81: ( ( ws )? less_mixin_guarded )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA234_eotS =
        "\4\uffff";
    static final String DFA234_eofS =
        "\4\uffff";
    static final String DFA234_minS =
        "\2\15\2\uffff";
    static final String DFA234_maxS =
        "\2\126\2\uffff";
    static final String DFA234_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA234_specialS =
        "\4\uffff}>";
    static final String[] DFA234_transitionS = {
            "\1\3\5\uffff\1\2\100\uffff\3\1",
            "\1\3\5\uffff\1\2\100\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA234_eot = DFA.unpackEncodedString(DFA234_eotS);
    static final short[] DFA234_eof = DFA.unpackEncodedString(DFA234_eofS);
    static final char[] DFA234_min = DFA.unpackEncodedStringToUnsignedChars(DFA234_minS);
    static final char[] DFA234_max = DFA.unpackEncodedStringToUnsignedChars(DFA234_maxS);
    static final short[] DFA234_accept = DFA.unpackEncodedString(DFA234_acceptS);
    static final short[] DFA234_special = DFA.unpackEncodedString(DFA234_specialS);
    static final short[][] DFA234_transition;

    static {
        int numStates = DFA234_transitionS.length;
        DFA234_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA234_transition[i] = DFA.unpackEncodedString(DFA234_transitionS[i]);
        }
    }

    class DFA234 extends DFA {

        public DFA234(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 234;
            this.eot = DFA234_eot;
            this.eof = DFA234_eof;
            this.min = DFA234_min;
            this.max = DFA234_max;
            this.accept = DFA234_accept;
            this.special = DFA234_special;
            this.transition = DFA234_transition;
        }
        public String getDescription() {
            return "1055:55: ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA240_eotS =
        "\4\uffff";
    static final String DFA240_eofS =
        "\2\3\2\uffff";
    static final String DFA240_minS =
        "\2\4\2\uffff";
    static final String DFA240_maxS =
        "\2\156\2\uffff";
    static final String DFA240_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA240_specialS =
        "\4\uffff}>";
    static final String[] DFA240_transitionS = {
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\1\2\1\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\15\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\1\2\1\uffff\3\3\3"+
            "\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3"+
            "\15\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA240_eot = DFA.unpackEncodedString(DFA240_eotS);
    static final short[] DFA240_eof = DFA.unpackEncodedString(DFA240_eofS);
    static final char[] DFA240_min = DFA.unpackEncodedStringToUnsignedChars(DFA240_minS);
    static final char[] DFA240_max = DFA.unpackEncodedStringToUnsignedChars(DFA240_maxS);
    static final short[] DFA240_accept = DFA.unpackEncodedString(DFA240_acceptS);
    static final short[] DFA240_special = DFA.unpackEncodedString(DFA240_specialS);
    static final short[][] DFA240_transition;

    static {
        int numStates = DFA240_transitionS.length;
        DFA240_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA240_transition[i] = DFA.unpackEncodedString(DFA240_transitionS[i]);
        }
    }

    class DFA240 extends DFA {

        public DFA240(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 240;
            this.eot = DFA240_eot;
            this.eof = DFA240_eof;
            this.min = DFA240_min;
            this.max = DFA240_max;
            this.accept = DFA240_accept;
            this.special = DFA240_special;
            this.transition = DFA240_transition;
        }
        public String getDescription() {
            return "1065:45: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA244_eotS =
        "\4\uffff";
    static final String DFA244_eofS =
        "\2\3\2\uffff";
    static final String DFA244_minS =
        "\2\4\2\uffff";
    static final String DFA244_maxS =
        "\2\156\2\uffff";
    static final String DFA244_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA244_specialS =
        "\4\uffff}>";
    static final String[] DFA244_transitionS = {
            "\3\3\2\uffff\6\3\3\uffff\1\3\1\2\1\uffff\3\3\3\uffff\1\3\1\uffff"+
            "\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\15\uffff\3\1\1\uffff"+
            "\15\3\11\uffff\1\3",
            "\3\3\2\uffff\6\3\3\uffff\1\3\1\2\1\uffff\3\3\3\uffff\1\3\1"+
            "\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\15\uffff\3"+
            "\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA244_eot = DFA.unpackEncodedString(DFA244_eotS);
    static final short[] DFA244_eof = DFA.unpackEncodedString(DFA244_eofS);
    static final char[] DFA244_min = DFA.unpackEncodedStringToUnsignedChars(DFA244_minS);
    static final char[] DFA244_max = DFA.unpackEncodedStringToUnsignedChars(DFA244_maxS);
    static final short[] DFA244_accept = DFA.unpackEncodedString(DFA244_acceptS);
    static final short[] DFA244_special = DFA.unpackEncodedString(DFA244_specialS);
    static final short[][] DFA244_transition;

    static {
        int numStates = DFA244_transitionS.length;
        DFA244_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA244_transition[i] = DFA.unpackEncodedString(DFA244_transitionS[i]);
        }
    }

    class DFA244 extends DFA {

        public DFA244(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 244;
            this.eot = DFA244_eot;
            this.eof = DFA244_eof;
            this.min = DFA244_min;
            this.max = DFA244_max;
            this.accept = DFA244_accept;
            this.special = DFA244_special;
            this.transition = DFA244_transition;
        }
        public String getDescription() {
            return "1067:57: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA246_eotS =
        "\4\uffff";
    static final String DFA246_eofS =
        "\2\3\2\uffff";
    static final String DFA246_minS =
        "\2\4\2\uffff";
    static final String DFA246_maxS =
        "\2\156\2\uffff";
    static final String DFA246_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA246_specialS =
        "\4\uffff}>";
    static final String[] DFA246_transitionS = {
            "\3\3\2\uffff\4\3\1\2\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff\1\3"+
            "\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\15\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\4\3\1\2\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff\1"+
            "\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\15\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA246_eot = DFA.unpackEncodedString(DFA246_eotS);
    static final short[] DFA246_eof = DFA.unpackEncodedString(DFA246_eofS);
    static final char[] DFA246_min = DFA.unpackEncodedStringToUnsignedChars(DFA246_minS);
    static final char[] DFA246_max = DFA.unpackEncodedStringToUnsignedChars(DFA246_maxS);
    static final short[] DFA246_accept = DFA.unpackEncodedString(DFA246_acceptS);
    static final short[] DFA246_special = DFA.unpackEncodedString(DFA246_specialS);
    static final short[][] DFA246_transition;

    static {
        int numStates = DFA246_transitionS.length;
        DFA246_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA246_transition[i] = DFA.unpackEncodedString(DFA246_transitionS[i]);
        }
    }

    class DFA246 extends DFA {

        public DFA246(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 246;
            this.eot = DFA246_eot;
            this.eof = DFA246_eof;
            this.min = DFA246_min;
            this.max = DFA246_max;
            this.accept = DFA246_accept;
            this.special = DFA246_special;
            this.transition = DFA246_transition;
        }
        public String getDescription() {
            return "1067:102: ( ( ws )? cp_mixin_block )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA255_eotS =
        "\7\uffff";
    static final String DFA255_eofS =
        "\7\uffff";
    static final String DFA255_minS =
        "\3\4\1\uffff\1\4\1\uffff\1\4";
    static final String DFA255_maxS =
        "\1\144\2\153\1\uffff\1\153\1\uffff\1\153";
    static final String DFA255_acceptS =
        "\3\uffff\1\2\1\uffff\1\1\1\uffff";
    static final String DFA255_specialS =
        "\7\uffff}>";
    static final String[] DFA255_transitionS = {
            "\1\1\1\uffff\3\3\2\1\1\uffff\1\1\4\uffff\3\3\2\uffff\2\1\3\uffff"+
            "\1\1\1\3\23\1\1\uffff\2\3\1\uffff\3\3\17\uffff\1\2\15\3\4\uffff"+
            "\15\1",
            "\11\3\2\uffff\1\3\1\uffff\4\3\1\5\2\3\3\uffff\34\3\4\uffff"+
            "\1\3\12\uffff\16\3\3\4\1\uffff\24\3",
            "\11\3\2\uffff\1\3\1\uffff\4\3\1\5\2\3\3\uffff\34\3\4\uffff"+
            "\1\3\12\uffff\16\3\3\6\1\uffff\24\3",
            "",
            "\11\3\2\uffff\1\3\1\uffff\4\3\1\5\2\3\3\uffff\34\3\4\uffff"+
            "\1\3\12\uffff\16\3\3\4\1\uffff\24\3",
            "",
            "\11\3\2\uffff\1\3\1\uffff\4\3\1\5\2\3\3\uffff\34\3\4\uffff"+
            "\1\3\12\uffff\16\3\3\6\1\uffff\24\3"
    };

    static final short[] DFA255_eot = DFA.unpackEncodedString(DFA255_eotS);
    static final short[] DFA255_eof = DFA.unpackEncodedString(DFA255_eofS);
    static final char[] DFA255_min = DFA.unpackEncodedStringToUnsignedChars(DFA255_minS);
    static final char[] DFA255_max = DFA.unpackEncodedStringToUnsignedChars(DFA255_maxS);
    static final short[] DFA255_accept = DFA.unpackEncodedString(DFA255_acceptS);
    static final short[] DFA255_special = DFA.unpackEncodedString(DFA255_specialS);
    static final short[][] DFA255_transition;

    static {
        int numStates = DFA255_transitionS.length;
        DFA255_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA255_transition[i] = DFA.unpackEncodedString(DFA255_transitionS[i]);
        }
    }

    class DFA255 extends DFA {

        public DFA255(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 255;
            this.eot = DFA255_eot;
            this.eof = DFA255_eof;
            this.min = DFA255_min;
            this.max = DFA255_max;
            this.accept = DFA255_accept;
            this.special = DFA255_special;
            this.transition = DFA255_transition;
        }
        public String getDescription() {
            return "1092:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA258_eotS =
        "\5\uffff";
    static final String DFA258_eofS =
        "\5\uffff";
    static final String DFA258_minS =
        "\1\5\1\4\1\uffff\1\4\1\uffff";
    static final String DFA258_maxS =
        "\2\154\1\uffff\1\154\1\uffff";
    static final String DFA258_acceptS =
        "\2\uffff\1\2\1\uffff\1\1";
    static final String DFA258_specialS =
        "\5\uffff}>";
    static final String[] DFA258_transitionS = {
            "\1\1\5\uffff\1\1\10\uffff\1\2\126\uffff\2\2",
            "\1\4\4\uffff\2\4\1\uffff\1\4\11\uffff\2\4\3\uffff\1\4\1\uffff"+
            "\23\4\26\uffff\1\4\15\uffff\3\3\1\uffff\15\4\6\uffff\2\2",
            "",
            "\1\4\4\uffff\2\4\1\uffff\1\4\11\uffff\2\4\3\uffff\1\4\1\uffff"+
            "\23\4\26\uffff\1\4\15\uffff\3\3\1\uffff\15\4\6\uffff\2\2",
            ""
    };

    static final short[] DFA258_eot = DFA.unpackEncodedString(DFA258_eotS);
    static final short[] DFA258_eof = DFA.unpackEncodedString(DFA258_eofS);
    static final char[] DFA258_min = DFA.unpackEncodedStringToUnsignedChars(DFA258_minS);
    static final char[] DFA258_max = DFA.unpackEncodedStringToUnsignedChars(DFA258_maxS);
    static final short[] DFA258_accept = DFA.unpackEncodedString(DFA258_acceptS);
    static final short[] DFA258_special = DFA.unpackEncodedString(DFA258_specialS);
    static final short[][] DFA258_transition;

    static {
        int numStates = DFA258_transitionS.length;
        DFA258_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA258_transition[i] = DFA.unpackEncodedString(DFA258_transitionS[i]);
        }
    }

    class DFA258 extends DFA {

        public DFA258(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 258;
            this.eot = DFA258_eot;
            this.eof = DFA258_eof;
            this.min = DFA258_min;
            this.max = DFA258_max;
            this.accept = DFA258_accept;
            this.special = DFA258_special;
            this.transition = DFA258_transition;
        }
        public String getDescription() {
            return "()* loopback of 1107:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA286_eotS =
        "\4\uffff";
    static final String DFA286_eofS =
        "\4\uffff";
    static final String DFA286_minS =
        "\2\6\2\uffff";
    static final String DFA286_maxS =
        "\2\126\2\uffff";
    static final String DFA286_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA286_specialS =
        "\4\uffff}>";
    static final String[] DFA286_transitionS = {
            "\1\3\4\uffff\1\3\1\uffff\1\2\7\uffff\1\3\33\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\4\3\2\uffff\1\3\2\uffff\1\3\6\uffff\1\3\16\uffff"+
            "\3\1",
            "\1\3\4\uffff\1\3\1\uffff\1\2\7\uffff\1\3\33\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\4\3\2\uffff\1\3\2\uffff\1\3\6\uffff\1\3\16\uffff"+
            "\3\1",
            "",
            ""
    };

    static final short[] DFA286_eot = DFA.unpackEncodedString(DFA286_eotS);
    static final short[] DFA286_eof = DFA.unpackEncodedString(DFA286_eofS);
    static final char[] DFA286_min = DFA.unpackEncodedStringToUnsignedChars(DFA286_minS);
    static final char[] DFA286_max = DFA.unpackEncodedStringToUnsignedChars(DFA286_maxS);
    static final short[] DFA286_accept = DFA.unpackEncodedString(DFA286_acceptS);
    static final short[] DFA286_special = DFA.unpackEncodedString(DFA286_specialS);
    static final short[][] DFA286_transition;

    static {
        int numStates = DFA286_transitionS.length;
        DFA286_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA286_transition[i] = DFA.unpackEncodedString(DFA286_transitionS[i]);
        }
    }

    class DFA286 extends DFA {

        public DFA286(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 286;
            this.eot = DFA286_eot;
            this.eof = DFA286_eof;
            this.min = DFA286_min;
            this.max = DFA286_max;
            this.accept = DFA286_accept;
            this.special = DFA286_special;
            this.transition = DFA286_transition;
        }
        public String getDescription() {
            return "()* loopback of 1173:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA290_eotS =
        "\4\uffff";
    static final String DFA290_eofS =
        "\4\uffff";
    static final String DFA290_minS =
        "\2\6\2\uffff";
    static final String DFA290_maxS =
        "\2\126\2\uffff";
    static final String DFA290_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA290_specialS =
        "\4\uffff}>";
    static final String[] DFA290_transitionS = {
            "\1\3\16\uffff\1\2\33\uffff\1\3\3\uffff\3\3\34\uffff\3\1",
            "\1\3\16\uffff\1\2\33\uffff\1\3\3\uffff\3\3\34\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA290_eot = DFA.unpackEncodedString(DFA290_eotS);
    static final short[] DFA290_eof = DFA.unpackEncodedString(DFA290_eofS);
    static final char[] DFA290_min = DFA.unpackEncodedStringToUnsignedChars(DFA290_minS);
    static final char[] DFA290_max = DFA.unpackEncodedStringToUnsignedChars(DFA290_maxS);
    static final short[] DFA290_accept = DFA.unpackEncodedString(DFA290_acceptS);
    static final short[] DFA290_special = DFA.unpackEncodedString(DFA290_specialS);
    static final short[][] DFA290_transition;

    static {
        int numStates = DFA290_transitionS.length;
        DFA290_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA290_transition[i] = DFA.unpackEncodedString(DFA290_transitionS[i]);
        }
    }

    class DFA290 extends DFA {

        public DFA290(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 290;
            this.eot = DFA290_eot;
            this.eof = DFA290_eof;
            this.min = DFA290_min;
            this.max = DFA290_max;
            this.accept = DFA290_accept;
            this.special = DFA290_special;
            this.transition = DFA290_transition;
        }
        public String getDescription() {
            return "()* loopback of 1191:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA298_eotS =
        "\4\uffff";
    static final String DFA298_eofS =
        "\4\uffff";
    static final String DFA298_minS =
        "\2\4\2\uffff";
    static final String DFA298_maxS =
        "\2\157\2\uffff";
    static final String DFA298_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA298_specialS =
        "\4\uffff}>";
    static final String[] DFA298_transitionS = {
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\15\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3\1\2",
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\15\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3\1\2",
            "",
            ""
    };

    static final short[] DFA298_eot = DFA.unpackEncodedString(DFA298_eotS);
    static final short[] DFA298_eof = DFA.unpackEncodedString(DFA298_eofS);
    static final char[] DFA298_min = DFA.unpackEncodedStringToUnsignedChars(DFA298_minS);
    static final char[] DFA298_max = DFA.unpackEncodedStringToUnsignedChars(DFA298_maxS);
    static final short[] DFA298_accept = DFA.unpackEncodedString(DFA298_acceptS);
    static final short[] DFA298_special = DFA.unpackEncodedString(DFA298_specialS);
    static final short[][] DFA298_transition;

    static {
        int numStates = DFA298_transitionS.length;
        DFA298_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA298_transition[i] = DFA.unpackEncodedString(DFA298_transitionS[i]);
        }
    }

    class DFA298 extends DFA {

        public DFA298(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 298;
            this.eot = DFA298_eot;
            this.eof = DFA298_eof;
            this.min = DFA298_min;
            this.max = DFA298_max;
            this.accept = DFA298_accept;
            this.special = DFA298_special;
            this.transition = DFA298_transition;
        }
        public String getDescription() {
            return "1232:43: ( ( ws )? SASS_OPTIONAL )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA302_eotS =
        "\10\uffff";
    static final String DFA302_eofS =
        "\2\3\6\uffff";
    static final String DFA302_minS =
        "\2\4\1\6\1\uffff\2\6\1\uffff\1\6";
    static final String DFA302_maxS =
        "\2\156\1\126\1\uffff\2\126\1\uffff\1\126";
    static final String DFA302_acceptS =
        "\3\uffff\1\2\2\uffff\1\1\1\uffff";
    static final String DFA302_specialS =
        "\10\uffff}>";
    static final String[] DFA302_transitionS = {
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\15\uffff"+
            "\3\1\1\uffff\7\3\1\2\5\3\11\uffff\1\3",
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\15\uffff"+
            "\3\1\1\uffff\7\3\1\4\5\3\11\uffff\1\3",
            "\1\6\6\uffff\1\6\7\uffff\1\3\76\uffff\3\5",
            "",
            "\1\6\6\uffff\1\6\7\uffff\1\3\76\uffff\3\7",
            "\1\6\6\uffff\1\6\7\uffff\1\3\76\uffff\3\5",
            "",
            "\1\6\6\uffff\1\6\7\uffff\1\3\76\uffff\3\7"
    };

    static final short[] DFA302_eot = DFA.unpackEncodedString(DFA302_eotS);
    static final short[] DFA302_eof = DFA.unpackEncodedString(DFA302_eofS);
    static final char[] DFA302_min = DFA.unpackEncodedStringToUnsignedChars(DFA302_minS);
    static final char[] DFA302_max = DFA.unpackEncodedStringToUnsignedChars(DFA302_maxS);
    static final short[] DFA302_accept = DFA.unpackEncodedString(DFA302_acceptS);
    static final short[] DFA302_special = DFA.unpackEncodedString(DFA302_specialS);
    static final short[][] DFA302_transition;

    static {
        int numStates = DFA302_transitionS.length;
        DFA302_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA302_transition[i] = DFA.unpackEncodedString(DFA302_transitionS[i]);
        }
    }

    class DFA302 extends DFA {

        public DFA302(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 302;
            this.eot = DFA302_eot;
            this.eof = DFA302_eof;
            this.min = DFA302_min;
            this.max = DFA302_max;
            this.accept = DFA302_accept;
            this.special = DFA302_special;
            this.transition = DFA302_transition;
        }
        public String getDescription() {
            return "1252:63: ( ( ws )? sass_else )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA309_eotS =
        "\5\uffff";
    static final String DFA309_eofS =
        "\5\uffff";
    static final String DFA309_minS =
        "\1\137\2\6\2\uffff";
    static final String DFA309_maxS =
        "\1\137\2\126\2\uffff";
    static final String DFA309_acceptS =
        "\3\uffff\1\1\1\2";
    static final String DFA309_specialS =
        "\5\uffff}>";
    static final String[] DFA309_transitionS = {
            "\1\1",
            "\1\4\6\uffff\1\3\106\uffff\3\2",
            "\1\4\6\uffff\1\3\106\uffff\3\2",
            "",
            ""
    };

    static final short[] DFA309_eot = DFA.unpackEncodedString(DFA309_eotS);
    static final short[] DFA309_eof = DFA.unpackEncodedString(DFA309_eofS);
    static final char[] DFA309_min = DFA.unpackEncodedStringToUnsignedChars(DFA309_minS);
    static final char[] DFA309_max = DFA.unpackEncodedStringToUnsignedChars(DFA309_maxS);
    static final short[] DFA309_accept = DFA.unpackEncodedString(DFA309_acceptS);
    static final short[] DFA309_special = DFA.unpackEncodedString(DFA309_specialS);
    static final short[][] DFA309_transition;

    static {
        int numStates = DFA309_transitionS.length;
        DFA309_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA309_transition[i] = DFA.unpackEncodedString(DFA309_transitionS[i]);
        }
    }

    class DFA309 extends DFA {

        public DFA309(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 309;
            this.eot = DFA309_eot;
            this.eof = DFA309_eof;
            this.min = DFA309_min;
            this.max = DFA309_max;
            this.accept = DFA309_accept;
            this.special = DFA309_special;
            this.transition = DFA309_transition;
        }
        public String getDescription() {
            return "1255:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA308_eotS =
        "\10\uffff";
    static final String DFA308_eofS =
        "\2\3\6\uffff";
    static final String DFA308_minS =
        "\2\4\1\6\1\uffff\2\6\1\uffff\1\6";
    static final String DFA308_maxS =
        "\2\156\1\126\1\uffff\2\126\1\uffff\1\126";
    static final String DFA308_acceptS =
        "\3\uffff\1\2\2\uffff\1\1\1\uffff";
    static final String DFA308_specialS =
        "\10\uffff}>";
    static final String[] DFA308_transitionS = {
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\15\uffff"+
            "\3\1\1\uffff\7\3\1\2\5\3\11\uffff\1\3",
            "\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\15\uffff"+
            "\3\1\1\uffff\7\3\1\4\5\3\11\uffff\1\3",
            "\1\6\6\uffff\1\6\7\uffff\1\3\76\uffff\3\5",
            "",
            "\1\6\6\uffff\1\6\7\uffff\1\3\76\uffff\3\7",
            "\1\6\6\uffff\1\6\7\uffff\1\3\76\uffff\3\5",
            "",
            "\1\6\6\uffff\1\6\7\uffff\1\3\76\uffff\3\7"
    };

    static final short[] DFA308_eot = DFA.unpackEncodedString(DFA308_eotS);
    static final short[] DFA308_eof = DFA.unpackEncodedString(DFA308_eofS);
    static final char[] DFA308_min = DFA.unpackEncodedStringToUnsignedChars(DFA308_minS);
    static final char[] DFA308_max = DFA.unpackEncodedStringToUnsignedChars(DFA308_maxS);
    static final short[] DFA308_accept = DFA.unpackEncodedString(DFA308_acceptS);
    static final short[] DFA308_special = DFA.unpackEncodedString(DFA308_specialS);
    static final short[][] DFA308_transition;

    static {
        int numStates = DFA308_transitionS.length;
        DFA308_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA308_transition[i] = DFA.unpackEncodedString(DFA308_transitionS[i]);
        }
    }

    class DFA308 extends DFA {

        public DFA308(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 308;
            this.eot = DFA308_eot;
            this.eof = DFA308_eof;
            this.min = DFA308_min;
            this.max = DFA308_max;
            this.accept = DFA308_accept;
            this.special = DFA308_special;
            this.transition = DFA308_transition;
        }
        public String getDescription() {
            return "1259:110: ( ( ws )? sass_else )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA352_eotS =
        "\5\uffff";
    static final String DFA352_eofS =
        "\5\uffff";
    static final String DFA352_minS =
        "\2\4\3\uffff";
    static final String DFA352_maxS =
        "\2\144\3\uffff";
    static final String DFA352_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA352_specialS =
        "\5\uffff}>";
    static final String[] DFA352_transitionS = {
            "\1\3\1\uffff\5\3\1\2\1\3\5\uffff\1\3\3\uffff\2\3\3\uffff\25"+
            "\3\1\2\2\3\1\uffff\3\3\17\uffff\1\3\1\uffff\14\3\3\1\1\uffff"+
            "\15\3",
            "\1\4\1\uffff\5\4\1\2\1\4\5\uffff\1\4\3\uffff\2\4\3\uffff\25"+
            "\4\1\2\2\4\1\uffff\3\4\17\uffff\1\4\1\uffff\14\4\3\1\1\uffff"+
            "\15\4",
            "",
            "",
            ""
    };

    static final short[] DFA352_eot = DFA.unpackEncodedString(DFA352_eotS);
    static final short[] DFA352_eof = DFA.unpackEncodedString(DFA352_eofS);
    static final char[] DFA352_min = DFA.unpackEncodedStringToUnsignedChars(DFA352_minS);
    static final char[] DFA352_max = DFA.unpackEncodedStringToUnsignedChars(DFA352_maxS);
    static final short[] DFA352_accept = DFA.unpackEncodedString(DFA352_acceptS);
    static final short[] DFA352_special = DFA.unpackEncodedString(DFA352_specialS);
    static final short[][] DFA352_transition;

    static {
        int numStates = DFA352_transitionS.length;
        DFA352_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA352_transition[i] = DFA.unpackEncodedString(DFA352_transitionS[i]);
        }
    }

    class DFA352 extends DFA {

        public DFA352(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 352;
            this.eot = DFA352_eot;
            this.eof = DFA352_eof;
            this.min = DFA352_min;
            this.max = DFA352_max;
            this.accept = DFA352_accept;
            this.special = DFA352_special;
            this.transition = DFA352_transition;
        }
        public String getDescription() {
            return "859:15: ( ws | ( ( ws )? operator ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA357_eotS =
        "\5\uffff";
    static final String DFA357_eofS =
        "\5\uffff";
    static final String DFA357_minS =
        "\2\4\3\uffff";
    static final String DFA357_maxS =
        "\2\144\3\uffff";
    static final String DFA357_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA357_specialS =
        "\5\uffff}>";
    static final String[] DFA357_transitionS = {
            "\1\3\1\uffff\5\3\1\uffff\1\3\5\uffff\1\3\3\uffff\2\3\3\uffff"+
            "\25\3\1\2\2\3\1\uffff\3\3\17\uffff\1\3\1\uffff\14\3\3\1\1\uffff"+
            "\15\3",
            "\1\4\1\uffff\5\4\1\uffff\1\4\5\uffff\1\4\3\uffff\2\4\3\uffff"+
            "\25\4\1\2\2\4\1\uffff\3\4\17\uffff\1\4\1\uffff\14\4\3\1\1\uffff"+
            "\15\4",
            "",
            "",
            ""
    };

    static final short[] DFA357_eot = DFA.unpackEncodedString(DFA357_eotS);
    static final short[] DFA357_eof = DFA.unpackEncodedString(DFA357_eofS);
    static final char[] DFA357_min = DFA.unpackEncodedStringToUnsignedChars(DFA357_minS);
    static final char[] DFA357_max = DFA.unpackEncodedStringToUnsignedChars(DFA357_maxS);
    static final short[] DFA357_accept = DFA.unpackEncodedString(DFA357_acceptS);
    static final short[] DFA357_special = DFA.unpackEncodedString(DFA357_specialS);
    static final short[][] DFA357_transition;

    static {
        int numStates = DFA357_transitionS.length;
        DFA357_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA357_transition[i] = DFA.unpackEncodedString(DFA357_transitionS[i]);
        }
    }

    class DFA357 extends DFA {

        public DFA357(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 357;
            this.eot = DFA357_eot;
            this.eof = DFA357_eof;
            this.min = DFA357_min;
            this.max = DFA357_max;
            this.accept = DFA357_accept;
            this.special = DFA357_special;
            this.transition = DFA357_transition;
        }
        public String getDescription() {
            return "940:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
 

    public static final BitSet FOLLOW_ws_in_styleSheet125 = new BitSet(new long[]{0x5FFEFFFFE8E41E70L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_charSet_in_styleSheet135 = new BitSet(new long[]{0x5FFEFFFFE8E41E70L,0x0000401FFF700060L});
    public static final BitSet FOLLOW_ws_in_styleSheet137 = new BitSet(new long[]{0x5FFEFFFFE8E41E70L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_imports_in_styleSheet151 = new BitSet(new long[]{0x5FFEFFFFE8E41E70L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_namespaces_in_styleSheet162 = new BitSet(new long[]{0x5FFEFFFFE8E41E70L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_body_in_styleSheet174 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_styleSheet182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespace_in_namespaces199 = new BitSet(new long[]{0x0000000000000012L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_namespaces201 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_NAMESPACE_SYM_in_namespace217 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_namespace219 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_namespacePrefixName_in_namespace223 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_namespace225 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_namespace230 = new BitSet(new long[]{0x0000000000000020L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_namespace232 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_namespace235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_namespacePrefixName248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_resourceIdentifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARSET_SYM_in_charSet286 = new BitSet(new long[]{0x0000000000000080L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_charSet288 = new BitSet(new long[]{0x0000000000000080L,0x0000000000700000L});
    public static final BitSet FOLLOW_charSetValue_in_charSet291 = new BitSet(new long[]{0x0000000000000020L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_charSet293 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_charSet296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_charSetValue310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_imports324 = new BitSet(new long[]{0x0000000000000020L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_imports326 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_imports329 = new BitSet(new long[]{0x0000000000000402L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_imports331 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_IMPORT_SYM_in_importItem361 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_importItem363 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem366 = new BitSet(new long[]{0x00200000000F0042L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_importItem376 = new BitSet(new long[]{0x00200000000F0040L,0x0000000000700000L});
    public static final BitSet FOLLOW_mediaQueryList_in_importItem379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_SYM_in_importItem412 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_importItem414 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem417 = new BitSet(new long[]{0x00200000000F0842L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_importItem420 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_importItem423 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_importItem425 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem428 = new BitSet(new long[]{0x00200000000F0842L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_importItem440 = new BitSet(new long[]{0x00200000000F0040L,0x0000000000700000L});
    public static final BitSet FOLLOW_mediaQueryList_in_importItem443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIA_SYM_in_media461 = new BitSet(new long[]{0x00200000000F0040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_media463 = new BitSet(new long[]{0x00200000000F0040L,0x0000000000700000L});
    public static final BitSet FOLLOW_mediaQueryList_in_media482 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_media490 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_media497 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF700060L});
    public static final BitSet FOLLOW_ws_in_media499 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_syncToFollow_in_media502 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_mediaBody_in_media512 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_media519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mediaBodyItem_in_mediaBody557 = new BitSet(new long[]{0x5FFEFFFFE8E41E72L,0x0000401FFF700060L});
    public static final BitSet FOLLOW_ws_in_mediaBody567 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_mediaBody570 = new BitSet(new long[]{0x5FFEFFFFE8E41E72L,0x0000401FFF700060L});
    public static final BitSet FOLLOW_ws_in_mediaBody574 = new BitSet(new long[]{0x5FFEFFFFE8E41E72L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_SEMI_in_mediaBody601 = new BitSet(new long[]{0x5FFEFFFFE8E41E72L,0x0000401FFF700060L});
    public static final BitSet FOLLOW_ws_in_mediaBody603 = new BitSet(new long[]{0x5FFEFFFFE8E41E72L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_cp_mixin_declaration_in_mediaBodyItem669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_mediaBodyItem682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_mediaBodyItem720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_mediaBodyItem747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_extend_in_mediaBodyItem757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_debug_in_mediaBodyItem767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_control_in_mediaBodyItem777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_content_in_mediaBodyItem787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_mediaBodyItem795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_page_in_mediaBodyItem803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fontFace_in_mediaBodyItem811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vendorAtRule_in_mediaBodyItem819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_media_in_mediaBodyItem832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList846 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_mediaQueryList858 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_mediaQueryList861 = new BitSet(new long[]{0x00200000000F0040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_mediaQueryList863 = new BitSet(new long[]{0x00200000000F0040L,0x0000000000700000L});
    public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList866 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_mediaQueryOperator_in_mediaQuery882 = new BitSet(new long[]{0x0020000000070040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery884 = new BitSet(new long[]{0x0020000000070040L});
    public static final BitSet FOLLOW_mediaType_in_mediaQuery891 = new BitSet(new long[]{0x0000000000008002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery895 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_AND_in_mediaQuery898 = new BitSet(new long[]{0x00200000000F0040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery900 = new BitSet(new long[]{0x00200000000F0040L,0x0000000000700000L});
    public static final BitSet FOLLOW_mediaExpression_in_mediaQuery903 = new BitSet(new long[]{0x0000000000008002L,0x0000000000700000L});
    public static final BitSet FOLLOW_mediaExpression_in_mediaQuery911 = new BitSet(new long[]{0x0000000000008002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery915 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_AND_in_mediaQuery918 = new BitSet(new long[]{0x00200000000F0040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery920 = new BitSet(new long[]{0x00200000000F0040L,0x0000000000700000L});
    public static final BitSet FOLLOW_mediaExpression_in_mediaQuery923 = new BitSet(new long[]{0x0000000000008002L,0x0000000000700000L});
    public static final BitSet FOLLOW_set_in_mediaQueryOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_mediaType959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_mediaType963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaType969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_mediaExpression989 = new BitSet(new long[]{0x0020FFFFE8C41650L,0x0000001FFF700040L});
    public static final BitSet FOLLOW_ws_in_mediaExpression991 = new BitSet(new long[]{0x0020FFFFE8C41650L,0x0000001FFF700040L});
    public static final BitSet FOLLOW_mediaFeature_in_mediaExpression994 = new BitSet(new long[]{0x0000000000300000L,0x0000000000700000L});
    public static final BitSet FOLLOW_mediaFeatureValue_in_mediaExpression996 = new BitSet(new long[]{0x0000000000100000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_mediaExpression999 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_mediaExpression1002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_mediaFeatureValue1027 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_mediaFeatureValue1030 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_mediaFeatureValue1032 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_cp_expression_in_mediaFeatureValue1052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_mediaFeatureValue1072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_mediaFeature1093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_mediaFeature1097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_mediaFeature1105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaFeature1109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bodyItem_in_body1146 = new BitSet(new long[]{0x5FFEFFFFE8E41E72L,0x0000401FFF700060L});
    public static final BitSet FOLLOW_ws_in_body1156 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_body1159 = new BitSet(new long[]{0x5FFEFFFFE8E41E72L,0x0000401FFF700060L});
    public static final BitSet FOLLOW_ws_in_body1163 = new BitSet(new long[]{0x5FFEFFFFE8E41E72L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_SEMI_in_body1190 = new BitSet(new long[]{0x5FFEFFFFE8E41E72L,0x0000401FFF700060L});
    public static final BitSet FOLLOW_ws_in_body1192 = new BitSet(new long[]{0x5FFEFFFFE8E41E72L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_cp_mixin_declaration_in_bodyItem1266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_bodyItem1298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_bodyItem1316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_bodyItem1325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_at_rule_in_bodyItem1337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_declaration_in_bodyItem1351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_bodyItem1374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_debug_in_bodyItem1388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_control_in_bodyItem1402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_function_declaration_in_bodyItem1416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_media_in_at_rule1446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_page_in_at_rule1454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_counterStyle_in_at_rule1462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fontFace_in_at_rule1470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vendorAtRule_in_at_rule1478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moz_document_in_vendorAtRule1495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_webkitKeyframes_in_vendorAtRule1499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_generic_at_rule_in_vendorAtRule1503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_atRuleId0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_IDENT_in_generic_at_rule1539 = new BitSet(new long[]{0x00000000000020C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_generic_at_rule1541 = new BitSet(new long[]{0x00000000000020C0L});
    public static final BitSet FOLLOW_atRuleId_in_generic_at_rule1546 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_generic_at_rule1548 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_generic_at_rule1563 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_syncTo_RBRACE_in_generic_at_rule1575 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_generic_at_rule1585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document1601 = new BitSet(new long[]{0x0000000007000100L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_moz_document1603 = new BitSet(new long[]{0x0000000007000100L,0x0000000000700000L});
    public static final BitSet FOLLOW_moz_document_function_in_moz_document1608 = new BitSet(new long[]{0x0000000000002800L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_moz_document1610 = new BitSet(new long[]{0x0000000000002800L});
    public static final BitSet FOLLOW_COMMA_in_moz_document1616 = new BitSet(new long[]{0x0000000007000100L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_moz_document1618 = new BitSet(new long[]{0x0000000007000100L,0x0000000000700000L});
    public static final BitSet FOLLOW_moz_document_function_in_moz_document1621 = new BitSet(new long[]{0x0000000000002800L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_moz_document1623 = new BitSet(new long[]{0x0000000000002800L});
    public static final BitSet FOLLOW_LBRACE_in_moz_document1630 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF700060L});
    public static final BitSet FOLLOW_ws_in_moz_document1632 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_body_in_moz_document1637 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_moz_document1642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_moz_document_function0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes1683 = new BitSet(new long[]{0x00000000000000C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1685 = new BitSet(new long[]{0x00000000000000C0L});
    public static final BitSet FOLLOW_atRuleId_in_webkitKeyframes1688 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1690 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_webkitKeyframes1695 = new BitSet(new long[]{0x0000000010004040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1697 = new BitSet(new long[]{0x0000000010004040L});
    public static final BitSet FOLLOW_webkitKeyframesBlock_in_webkitKeyframes1704 = new BitSet(new long[]{0x0000000010004040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1706 = new BitSet(new long[]{0x0000000010004040L});
    public static final BitSet FOLLOW_RBRACE_in_webkitKeyframes1713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock1726 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock1728 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_webkitKeyframesBlock1732 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF700060L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock1735 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_syncToFollow_in_webkitKeyframesBlock1738 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_declarations_in_webkitKeyframesBlock1742 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_webkitKeyframesBlock1746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_webkitKeyframeSelectors1761 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors1773 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_webkitKeyframeSelectors1776 = new BitSet(new long[]{0x0000000010000040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors1778 = new BitSet(new long[]{0x0000000010000040L});
    public static final BitSet FOLLOW_set_in_webkitKeyframeSelectors1781 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_PAGE_SYM_in_page1810 = new BitSet(new long[]{0x0000000000202040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_page1812 = new BitSet(new long[]{0x0000000000202040L});
    public static final BitSet FOLLOW_IDENT_in_page1817 = new BitSet(new long[]{0x0000000000202000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_page1819 = new BitSet(new long[]{0x0000000000202000L});
    public static final BitSet FOLLOW_pseudoPage_in_page1826 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_page1828 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_page1841 = new BitSet(new long[]{0x08E2FFFFE8C45670L,0x0000001FFF700040L});
    public static final BitSet FOLLOW_ws_in_page1843 = new BitSet(new long[]{0x08E2FFFFE8C45670L,0x0000001FFF000040L});
    public static final BitSet FOLLOW_propertyDeclaration_in_page1886 = new BitSet(new long[]{0x0000000000004020L,0x0000000000700000L});
    public static final BitSet FOLLOW_margin_in_page1888 = new BitSet(new long[]{0x0000000000004020L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_page1891 = new BitSet(new long[]{0x0000000000004020L});
    public static final BitSet FOLLOW_SEMI_in_page1897 = new BitSet(new long[]{0x08E2FFFFE8C45670L,0x0000001FFF700040L});
    public static final BitSet FOLLOW_ws_in_page1899 = new BitSet(new long[]{0x08E2FFFFE8C45670L,0x0000001FFF000040L});
    public static final BitSet FOLLOW_propertyDeclaration_in_page1904 = new BitSet(new long[]{0x0000000000004020L,0x0000000000700000L});
    public static final BitSet FOLLOW_margin_in_page1906 = new BitSet(new long[]{0x0000000000004020L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_page1909 = new BitSet(new long[]{0x0000000000004020L});
    public static final BitSet FOLLOW_RBRACE_in_page1924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNTER_STYLE_SYM_in_counterStyle1945 = new BitSet(new long[]{0x0000000000000040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_counterStyle1947 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_counterStyle1950 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_counterStyle1952 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_counterStyle1963 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF700060L});
    public static final BitSet FOLLOW_ws_in_counterStyle1965 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_syncToDeclarationsRule_in_counterStyle1968 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_declarations_in_counterStyle1972 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_counterStyle1983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FONT_FACE_SYM_in_fontFace2004 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_fontFace2006 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_fontFace2017 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF700060L});
    public static final BitSet FOLLOW_ws_in_fontFace2019 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_syncToDeclarationsRule_in_fontFace2022 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_declarations_in_fontFace2026 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_fontFace2037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_margin_sym_in_margin2052 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_margin2054 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_margin2057 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF700060L});
    public static final BitSet FOLLOW_ws_in_margin2059 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_syncToDeclarationsRule_in_margin2062 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_declarations_in_margin2064 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_margin2067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_margin_sym0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_pseudoPage2296 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_pseudoPage2298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_unaryOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_declaration_interpolation_expression_in_property2413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_property2421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_property2430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_property2441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectorsGroup_in_rule2480 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_rule2482 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_rule2489 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF700060L});
    public static final BitSet FOLLOW_ws_in_rule2491 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_syncToFollow_in_rule2494 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_declarations_in_rule2505 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_rule2512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_declarations2560 = new BitSet(new long[]{0x5FFEFFFFE8E41E72L,0x0000401FFF700060L});
    public static final BitSet FOLLOW_ws_in_declarations2570 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_declarations2573 = new BitSet(new long[]{0x5FFEFFFFE8E41E72L,0x0000401FFF700060L});
    public static final BitSet FOLLOW_ws_in_declarations2577 = new BitSet(new long[]{0x5FFEFFFFE8E41E72L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_SEMI_in_declarations2604 = new BitSet(new long[]{0x5FFEFFFFE8E41E72L,0x0000401FFF700060L});
    public static final BitSet FOLLOW_ws_in_declarations2606 = new BitSet(new long[]{0x5FFEFFFFE8E41E72L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_cp_variable_declaration_in_declaration2641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_nested_properties_in_declaration2654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_declaration2667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_declaration2707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_declaration_in_declaration2753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_declaration2766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_declaration2784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_at_rule_in_declaration2795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_control_in_declaration2806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_extend_in_declaration2817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_debug_in_declaration2828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_content_in_declaration2839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_function_return_in_declaration2850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_declaration2861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_declaration2870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_selector_interpolation_expression_in_selectorsGroup2938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_in_selectorsGroup2951 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_selectorsGroup2954 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_selectorsGroup2957 = new BitSet(new long[]{0x5FFE000000240840L,0x0000400000700020L});
    public static final BitSet FOLLOW_ws_in_selectorsGroup2959 = new BitSet(new long[]{0x5FFE000000240840L,0x0000400000000020L});
    public static final BitSet FOLLOW_selector_in_selectorsGroup2962 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_combinator_in_selector2991 = new BitSet(new long[]{0x5FFE000000240840L,0x0000400000700020L});
    public static final BitSet FOLLOW_ws_in_selector2993 = new BitSet(new long[]{0x5FFE000000240840L,0x0000400000000020L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_selector2998 = new BitSet(new long[]{0x5FFE000000240842L,0x0000400000700020L});
    public static final BitSet FOLLOW_ws_in_selector3004 = new BitSet(new long[]{0x001C000000000000L});
    public static final BitSet FOLLOW_combinator_in_selector3007 = new BitSet(new long[]{0x5FFE000000240840L,0x0000400000700020L});
    public static final BitSet FOLLOW_ws_in_selector3009 = new BitSet(new long[]{0x5FFE000000240840L,0x0000400000000020L});
    public static final BitSet FOLLOW_ws_in_selector3013 = new BitSet(new long[]{0x5FFE000000240840L,0x0000400000000020L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_selector3017 = new BitSet(new long[]{0x5FFE000000240842L,0x0000400000700020L});
    public static final BitSet FOLLOW_set_in_combinator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeSelector_in_simpleSelectorSequence3070 = new BitSet(new long[]{0x5FFE000000240842L,0x0000400000700020L});
    public static final BitSet FOLLOW_ws_in_simpleSelectorSequence3080 = new BitSet(new long[]{0x5FFE000000240840L,0x0000400000000020L});
    public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence3083 = new BitSet(new long[]{0x5FFE000000240842L,0x0000400000700020L});
    public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence3094 = new BitSet(new long[]{0x5FFE000000240842L,0x0000400000700020L});
    public static final BitSet FOLLOW_ws_in_simpleSelectorSequence3104 = new BitSet(new long[]{0x5FFE000000240840L,0x0000400000000020L});
    public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence3107 = new BitSet(new long[]{0x5FFE000000240842L,0x0000400000700020L});
    public static final BitSet FOLLOW_set_in_esPred0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespacePrefix_in_typeSelector3220 = new BitSet(new long[]{0x5800000000040040L});
    public static final BitSet FOLLOW_elementName_in_typeSelector3224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespacePrefixName_in_namespacePrefix3239 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_STAR_in_namespacePrefix3243 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_PIPE_in_namespacePrefix3247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_extend_only_selector_in_elementSubsequent3286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_less_selector_interpolation_in_elementSubsequent3300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cssId_in_elementSubsequent3310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cssClass_in_elementSubsequent3319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_slAttribute_in_elementSubsequent3331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pseudo_in_elementSubsequent3343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_in_cssId3371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_cssId3393 = new BitSet(new long[]{0x2000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_NAME_in_cssId3410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_less_selector_interpolation_in_cssId3431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_cssClass3483 = new BitSet(new long[]{0x0000000000040040L,0x0000400000000000L});
    public static final BitSet FOLLOW_IDENT_in_cssClass3509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_cssClass3526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_less_selector_interpolation_in_cssClass3546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_elementName0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_slAttribute3617 = new BitSet(new long[]{0x1800000000000040L,0x0000000000700000L});
    public static final BitSet FOLLOW_namespacePrefix_in_slAttribute3624 = new BitSet(new long[]{0x1800000000000040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_slAttribute3627 = new BitSet(new long[]{0x1800000000000040L,0x0000000000700000L});
    public static final BitSet FOLLOW_slAttributeName_in_slAttribute3638 = new BitSet(new long[]{0x8000000000000000L,0x000000000070003FL});
    public static final BitSet FOLLOW_ws_in_slAttribute3640 = new BitSet(new long[]{0x8000000000000000L,0x000000000000003FL});
    public static final BitSet FOLLOW_set_in_slAttribute3682 = new BitSet(new long[]{0x00000000000000C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_slAttribute3862 = new BitSet(new long[]{0x00000000000000C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_slAttributeValue_in_slAttribute3881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700020L});
    public static final BitSet FOLLOW_ws_in_slAttribute3899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACKET_in_slAttribute3928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_slAttributeName3944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_slAttributeValue3958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_pseudo4018 = new BitSet(new long[]{0x0000000000060040L});
    public static final BitSet FOLLOW_set_in_pseudo4082 = new BitSet(new long[]{0x0000000000080002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_pseudo4139 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_pseudo4142 = new BitSet(new long[]{0x0876FFFFF8DE17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_pseudo4144 = new BitSet(new long[]{0x0876FFFFF8DE17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_expression_in_pseudo4150 = new BitSet(new long[]{0x0000000000100000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_pseudo4152 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_STAR_in_pseudo4158 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_pseudo4163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_pseudo4242 = new BitSet(new long[]{0x0000000000080000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_pseudo4244 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_pseudo4247 = new BitSet(new long[]{0x5FFE000000340840L,0x0000400000700020L});
    public static final BitSet FOLLOW_ws_in_pseudo4249 = new BitSet(new long[]{0x5FFE000000340840L,0x0000400000000020L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_pseudo4252 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_pseudo4255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_propertyDeclaration4294 = new BitSet(new long[]{0x08E2FFFFE8C41650L,0x0000001FFF000040L});
    public static final BitSet FOLLOW_property_in_propertyDeclaration4297 = new BitSet(new long[]{0x0000000000200000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4299 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_propertyDeclaration4302 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4304 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_propertyValue_in_propertyDeclaration4307 = new BitSet(new long[]{0x0000000000000002L,0x0000000000700080L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700080L});
    public static final BitSet FOLLOW_prio_in_propertyDeclaration4313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_propertyDeclaration4325 = new BitSet(new long[]{0x08E2FFFFE8C41650L,0x0000001FFF000040L});
    public static final BitSet FOLLOW_property_in_propertyDeclaration4328 = new BitSet(new long[]{0x0000000000200000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4330 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_propertyDeclaration4333 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4335 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_cp_propertyValue_in_propertyDeclaration4338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_propertyValue4373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyValue_in_cp_propertyValue4381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertyValue4403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_expressionPredicate4439 = new BitSet(new long[]{0xF7FEFFFFFFBFDFF0L,0xFFFFFFFFFFFFFFBFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_expressionPredicate4472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_syncTo_SEMI4590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_prio4645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_in_expression4666 = new BitSet(new long[]{0x0077FFFFF8C41FD2L,0x0000001FFF7FFF40L});
    public static final BitSet FOLLOW_ws_in_expression4698 = new BitSet(new long[]{0x0076FFFFF8C417D0L,0x0000001FFF0FFF40L});
    public static final BitSet FOLLOW_ws_in_expression4703 = new BitSet(new long[]{0x0001000000000800L,0x0000000000700000L});
    public static final BitSet FOLLOW_operator_in_expression4706 = new BitSet(new long[]{0x0076FFFFF8C417D0L,0x0000001FFF7FFF40L});
    public static final BitSet FOLLOW_ws_in_expression4708 = new BitSet(new long[]{0x0076FFFFF8C417D0L,0x0000001FFF0FFF40L});
    public static final BitSet FOLLOW_term_in_expression4717 = new BitSet(new long[]{0x0077FFFFF8C41FD2L,0x0000001FFF7FFF40L});
    public static final BitSet FOLLOW_unaryOperator_in_term4747 = new BitSet(new long[]{0x0076FFFFF8C417D0L,0x0000001FFF7FFF40L});
    public static final BitSet FOLLOW_ws_in_term4749 = new BitSet(new long[]{0x0076FFFFF8C417D0L,0x0000001FFF0FFF40L});
    public static final BitSet FOLLOW_function_in_term4778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_term4791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_term4803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENTAGE_in_term4815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LENGTH_in_term4827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMS_in_term4839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REM_in_term4851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXS_in_term4863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANGLE_in_term4875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIME_in_term4887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FREQ_in_term4899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RESOLUTION_in_term4911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIMENSION_in_term4923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_term4940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_term4954 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_STRING_in_term4956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_JS_STRING_in_term4971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_term4983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_URI_in_term4995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hexColor_in_term5007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_term5021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_term5035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_term_symbol_in_term5049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENTAGE_SYMBOL_in_cp_term_symbol5076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionName_in_function5092 = new BitSet(new long[]{0x0000000000080000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_function5094 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_function5099 = new BitSet(new long[]{0x0076FFFFF8DE17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_function5101 = new BitSet(new long[]{0x0076FFFFF8DE17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_fnAttributes_in_function5128 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_function5159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_functionName5216 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_functionName5218 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_functionName5222 = new BitSet(new long[]{0x0080000000000002L});
    public static final BitSet FOLLOW_DOT_in_functionName5225 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_functionName5227 = new BitSet(new long[]{0x0080000000000002L});
    public static final BitSet FOLLOW_fnAttribute_in_fnAttributes5251 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_fnAttributes5254 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_fnAttributes5257 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_fnAttributes5259 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_fnAttribute_in_fnAttributes5262 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_fnAttributes5266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fnAttributeName_in_fnAttribute5304 = new BitSet(new long[]{0x8000000000200000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_fnAttribute5306 = new BitSet(new long[]{0x8000000000200000L});
    public static final BitSet FOLLOW_set_in_fnAttribute5309 = new BitSet(new long[]{0x0076FFFFF8CC17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_fnAttribute5315 = new BitSet(new long[]{0x0076FFFFF8CC17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_fnAttributeValue_in_fnAttribute5318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_in_fnAttribute5332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_fnAttribute5344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_fnAttributeName5372 = new BitSet(new long[]{0x0080000000000002L});
    public static final BitSet FOLLOW_DOT_in_fnAttributeName5375 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_fnAttributeName5377 = new BitSet(new long[]{0x0080000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_fnAttributeName5397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_in_fnAttributeValue5422 = new BitSet(new long[]{0x0077FFFFF8C417D2L,0x0000001FFF7FFF40L});
    public static final BitSet FOLLOW_ws_in_fnAttributeValue5454 = new BitSet(new long[]{0x0076FFFFF8C417D0L,0x0000001FFF0FFF40L});
    public static final BitSet FOLLOW_ws_in_fnAttributeValue5459 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_SOLIDUS_in_fnAttributeValue5462 = new BitSet(new long[]{0x0076FFFFF8C417D0L,0x0000001FFF7FFF40L});
    public static final BitSet FOLLOW_ws_in_fnAttributeValue5464 = new BitSet(new long[]{0x0076FFFFF8C417D0L,0x0000001FFF0FFF40L});
    public static final BitSet FOLLOW_term_in_fnAttributeValue5473 = new BitSet(new long[]{0x0077FFFFF8C417D2L,0x0000001FFF7FFF40L});
    public static final BitSet FOLLOW_cp_math_expression_in_fnAttributeValue5494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_in_hexColor5512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ws5533 = new BitSet(new long[]{0x0000000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration5581 = new BitSet(new long[]{0x0000000000200000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5583 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_cp_variable_declaration5586 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5588 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration5591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration5614 = new BitSet(new long[]{0x0000000000200000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5616 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_cp_variable_declaration5619 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5621 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration5624 = new BitSet(new long[]{0x0000000000000002L,0x0000000000F00000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_SASS_DEFAULT_in_cp_variable_declaration5630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_cp_variable5670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_VAR_in_cp_variable5851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_in_cp_expression_list5879 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_expression_list5898 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_cp_expression_list5901 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_cp_expression_list5903 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_cp_expression_in_cp_expression_list5906 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression5943 = new BitSet(new long[]{0x007EFFFFF8CE97D2L,0x000007FFFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_cp_expression5969 = new BitSet(new long[]{0x0008000000008000L,0x000007E000700000L});
    public static final BitSet FOLLOW_cp_expression_operator_in_cp_expression5972 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_cp_expression5974 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression5978 = new BitSet(new long[]{0x007EFFFFF8CE97D2L,0x000007FFFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_cp_expression5998 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression6001 = new BitSet(new long[]{0x007EFFFFF8CE97D2L,0x000007FFFF7FFFC0L});
    public static final BitSet FOLLOW_set_in_cp_expression_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_cp_expression_atom6092 = new BitSet(new long[]{0x0076FFFFF8CC17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_cp_expression_atom6094 = new BitSet(new long[]{0x0076FFFFF8CC17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_expression_atom6126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_cp_expression_atom6142 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_cp_expression_atom6144 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_expression_atom6147 = new BitSet(new long[]{0x0000000000100000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_expression_atom6149 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_expression_atom6152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expressions6184 = new BitSet(new long[]{0x0000000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expressions6191 = new BitSet(new long[]{0x0076FFFFF8CC17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expressions6193 = new BitSet(new long[]{0x0000000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_cp_math_expression_atom_in_cp_math_expression6227 = new BitSet(new long[]{0x0807000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression6270 = new BitSet(new long[]{0x0807000000000000L});
    public static final BitSet FOLLOW_set_in_cp_math_expression6273 = new BitSet(new long[]{0x0076FFFFF8CC17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression6283 = new BitSet(new long[]{0x0076FFFFF8CC17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_cp_math_expression_atom_in_cp_math_expression6286 = new BitSet(new long[]{0x0807000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_term_in_cp_math_expression_atom6324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_cp_math_expression_atom6332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryOperator_in_cp_math_expression_atom6343 = new BitSet(new long[]{0x0000000000080000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression_atom6345 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_math_expression_atom6351 = new BitSet(new long[]{0x0076FFFFF8CC17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression_atom6353 = new BitSet(new long[]{0x0076FFFFF8CC17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expression_atom6356 = new BitSet(new long[]{0x0000000000100000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression_atom6358 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_math_expression_atom6361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_cp_mixin_declaration6401 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration6403 = new BitSet(new long[]{0x0000000000080000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6405 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration6408 = new BitSet(new long[]{0x0000FFFFE8D01610L,0x0000181FFF700040L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6410 = new BitSet(new long[]{0x0000FFFFE8D01610L,0x0000181FFF000040L});
    public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration6413 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration6416 = new BitSet(new long[]{0x0000000000002000L,0x0000200000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6419 = new BitSet(new long[]{0x0000000000000000L,0x0000200000700000L});
    public static final BitSet FOLLOW_less_mixin_guarded_in_cp_mixin_declaration6422 = new BitSet(new long[]{0x0000000000002000L,0x0000200000700000L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_cp_mixin_declaration6446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6448 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration6450 = new BitSet(new long[]{0x0000000000082000L,0x0000200000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6453 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration6456 = new BitSet(new long[]{0x0000FFFFE8D01610L,0x0000181FFF700040L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6458 = new BitSet(new long[]{0x0000FFFFE8D01610L,0x0000181FFF000040L});
    public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration6461 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration6464 = new BitSet(new long[]{0x0000000000002000L,0x0000200000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6478 = new BitSet(new long[]{0x0000000000002000L,0x0000200000700000L});
    public static final BitSet FOLLOW_cp_mixin_block_in_cp_mixin_declaration6481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_cp_mixin_call6521 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call6523 = new BitSet(new long[]{0x0000000000080002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6526 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_call6529 = new BitSet(new long[]{0x0076FFFFF8DE17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6531 = new BitSet(new long[]{0x0076FFFFF8DE17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_cp_mixin_call_args_in_cp_mixin_call6534 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_call6537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_INCLUDE_in_cp_mixin_call6561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6563 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call6565 = new BitSet(new long[]{0x0000000000082002L,0x0000200000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6568 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_call6571 = new BitSet(new long[]{0x0076FFFFF8DE17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6573 = new BitSet(new long[]{0x0076FFFFF8DE17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_cp_mixin_call_args_in_cp_mixin_call6576 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_call6579 = new BitSet(new long[]{0x0000000000002002L,0x0000200000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6584 = new BitSet(new long[]{0x0000000000002000L,0x0000200000700000L});
    public static final BitSet FOLLOW_cp_mixin_block_in_cp_mixin_call6587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_cp_mixin_block6620 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF700060L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_block6622 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_syncToFollow_in_cp_mixin_block6625 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_declarations_in_cp_mixin_block6635 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_cp_mixin_block6642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_cp_mixin_name6671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6707 = new BitSet(new long[]{0x0000000000000822L,0x0000080000000000L});
    public static final BitSet FOLLOW_set_in_cp_mixin_call_args6711 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_args6719 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6722 = new BitSet(new long[]{0x0000000000000822L,0x0000080000000000L});
    public static final BitSet FOLLOW_CP_DOTS_in_cp_mixin_call_args6727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_cp_mixin_call_arg6766 = new BitSet(new long[]{0x0000000000200000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6768 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_cp_mixin_call_arg6771 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6773 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg6776 = new BitSet(new long[]{0x0000000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg6788 = new BitSet(new long[]{0x0000000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_arg_in_cp_args_list6848 = new BitSet(new long[]{0x0000000000000822L,0x0000180000000000L});
    public static final BitSet FOLLOW_set_in_cp_args_list6852 = new BitSet(new long[]{0x0000FFFFE8C01610L,0x0000001FFF700040L});
    public static final BitSet FOLLOW_ws_in_cp_args_list6862 = new BitSet(new long[]{0x0000FFFFE8C01610L,0x0000001FFF000040L});
    public static final BitSet FOLLOW_cp_arg_in_cp_args_list6865 = new BitSet(new long[]{0x0000000000000822L,0x0000180000000000L});
    public static final BitSet FOLLOW_set_in_cp_args_list6873 = new BitSet(new long[]{0x0000000000000000L,0x0000180000700000L});
    public static final BitSet FOLLOW_ws_in_cp_args_list6881 = new BitSet(new long[]{0x0000000000000000L,0x0000180000000000L});
    public static final BitSet FOLLOW_set_in_cp_args_list6887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_cp_args_list6909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_cp_arg6941 = new BitSet(new long[]{0x0000000000200002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_arg6943 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_COLON_in_cp_arg6948 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_cp_arg6950 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_cp_expression_in_cp_arg6953 = new BitSet(new long[]{0x0000000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_arg6955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_WHEN_in_less_mixin_guarded6981 = new BitSet(new long[]{0x00000000000A0000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_less_mixin_guarded6983 = new BitSet(new long[]{0x00000000000A0000L,0x0000000000700000L});
    public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded6986 = new BitSet(new long[]{0x0000000000008802L});
    public static final BitSet FOLLOW_set_in_less_mixin_guarded6990 = new BitSet(new long[]{0x00000000000A0000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_less_mixin_guarded6998 = new BitSet(new long[]{0x00000000000A0000L,0x0000000000700000L});
    public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded7001 = new BitSet(new long[]{0x0000000000008802L});
    public static final BitSet FOLLOW_NOT_in_less_condition7031 = new BitSet(new long[]{0x0000000000080000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_less_condition7033 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_less_condition7042 = new BitSet(new long[]{0x0000FFFFE8C01650L,0x0000001FFF700040L});
    public static final BitSet FOLLOW_ws_in_less_condition7044 = new BitSet(new long[]{0x0000FFFFE8C01650L,0x0000001FFF000040L});
    public static final BitSet FOLLOW_less_function_in_condition_in_less_condition7070 = new BitSet(new long[]{0x0000000000100000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_less_condition7072 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_cp_variable_in_less_condition7103 = new BitSet(new long[]{0x8008000000100000L,0x0000070000700000L});
    public static final BitSet FOLLOW_ws_in_less_condition7106 = new BitSet(new long[]{0x8008000000000000L,0x0000070000700000L});
    public static final BitSet FOLLOW_less_condition_operator_in_less_condition7109 = new BitSet(new long[]{0x0076FFFFF8CC17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_less_condition7111 = new BitSet(new long[]{0x0076FFFFF8CC17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_cp_math_expression_in_less_condition7114 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_less_condition7143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_less_fn_name_in_less_function_in_condition7169 = new BitSet(new long[]{0x0000000000080000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_less_function_in_condition7171 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_less_function_in_condition7174 = new BitSet(new long[]{0x0000FFFFE8C01610L,0x0000001FFF700040L});
    public static final BitSet FOLLOW_ws_in_less_function_in_condition7176 = new BitSet(new long[]{0x0000FFFFE8C01610L,0x0000001FFF000040L});
    public static final BitSet FOLLOW_cp_variable_in_less_function_in_condition7179 = new BitSet(new long[]{0x0000000000100000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_less_function_in_condition7181 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_less_function_in_condition7184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_less_fn_name7206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_less_condition_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_SIGN_in_less_selector_interpolation7268 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_less_selector_interpolation7270 = new BitSet(new long[]{0x0000000000000040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_less_selector_interpolation7272 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_less_selector_interpolation7275 = new BitSet(new long[]{0x0000000000004000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_less_selector_interpolation7277 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_less_selector_interpolation7280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7329 = new BitSet(new long[]{0x49EA000000200842L,0x0000000000700020L});
    public static final BitSet FOLLOW_set_in_sass_selector_interpolation_expression7357 = new BitSet(new long[]{0x49EA000000200842L,0x0000000000700020L});
    public static final BitSet FOLLOW_ws_in_sass_selector_interpolation_expression7439 = new BitSet(new long[]{0x49EA000000200840L,0x0000000000000020L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7476 = new BitSet(new long[]{0x49EA000000200842L,0x0000000000700020L});
    public static final BitSet FOLLOW_set_in_sass_selector_interpolation_expression7512 = new BitSet(new long[]{0x49EA000000200842L,0x0000000000700020L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7632 = new BitSet(new long[]{0x00E2000000000042L,0x0000000000700000L});
    public static final BitSet FOLLOW_set_in_sass_declaration_interpolation_expression7660 = new BitSet(new long[]{0x00E2000000000042L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_declaration_interpolation_expression7713 = new BitSet(new long[]{0x00E2000000000040L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7750 = new BitSet(new long[]{0x00E2000000000042L,0x0000000000700000L});
    public static final BitSet FOLLOW_set_in_sass_declaration_interpolation_expression7786 = new BitSet(new long[]{0x00E2000000000042L,0x0000000000700000L});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var7859 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_sass_interpolation_expression_var7861 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_cp_expression_in_sass_interpolation_expression_var7863 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_interpolation_expression_var7865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_sass_nested_properties7909 = new BitSet(new long[]{0x0000000000200000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties7911 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_sass_nested_properties7914 = new BitSet(new long[]{0x0076FFFFF8CE37D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties7916 = new BitSet(new long[]{0x0076FFFFF8CE37D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_propertyValue_in_sass_nested_properties7920 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties7922 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_sass_nested_properties7927 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF700060L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties7929 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_syncToFollow_in_sass_nested_properties7932 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_declarations_in_sass_nested_properties7934 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_nested_properties7937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_EXTEND_in_sass_extend7958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_extend7960 = new BitSet(new long[]{0x5FFE000000240840L,0x0000400000000020L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_sass_extend7962 = new BitSet(new long[]{0x0000000000000002L,0x0000800000700000L});
    public static final BitSet FOLLOW_ws_in_sass_extend7965 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_SASS_OPTIONAL_in_sass_extend7968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector7995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_sass_debug8016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_debug8026 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_cp_expression_in_sass_debug8028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_if_in_sass_control8053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_for_in_sass_control8057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_each_in_sass_control8061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_while_in_sass_control8065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_IF_in_sass_if8086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_if8088 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_sass_control_expression_in_sass_if8090 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_if8092 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_if8095 = new BitSet(new long[]{0x0000000000000002L,0x0000000080700000L});
    public static final BitSet FOLLOW_ws_in_sass_if8098 = new BitSet(new long[]{0x0000000000000000L,0x0000000080700000L});
    public static final BitSet FOLLOW_sass_else_in_sass_if8101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_ELSE_in_sass_else8128 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_else8130 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_else8133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_ELSE_in_sass_else8146 = new BitSet(new long[]{0x0000000000000040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_else8148 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_else8153 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_sass_else8157 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_sass_control_expression_in_sass_else8160 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_else8162 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_else8165 = new BitSet(new long[]{0x0000000000000002L,0x0000000080700000L});
    public static final BitSet FOLLOW_ws_in_sass_else8168 = new BitSet(new long[]{0x0000000000000000L,0x0000000080700000L});
    public static final BitSet FOLLOW_sass_else_in_sass_else8171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_in_sass_control_expression8194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_FOR_in_sass_for8219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_for8221 = new BitSet(new long[]{0x0000FFFFE8C01610L,0x0000001FFF000040L});
    public static final BitSet FOLLOW_cp_variable_in_sass_for8223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_for8225 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_for8229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_for8233 = new BitSet(new long[]{0x0076FFFFF8CC17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_cp_math_expression_in_sass_for8235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_for8237 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_for8241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_for8245 = new BitSet(new long[]{0x0076FFFFF8CC17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_cp_math_expression_in_sass_for8247 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_for8249 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_for8252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_EACH_in_sass_each8273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_each8275 = new BitSet(new long[]{0x0000FFFFE8C01610L,0x0000001FFF000040L});
    public static final BitSet FOLLOW_cp_variable_in_sass_each8277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_each8279 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_each8283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_each8287 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_cp_expression_list_in_sass_each8289 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_each8291 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_each8294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_WHILE_in_sass_while8319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_while8321 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_sass_control_expression_in_sass_while8323 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_while8325 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_while8328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_sass_control_block8349 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF700060L});
    public static final BitSet FOLLOW_ws_in_sass_control_block8351 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_declarations_in_sass_control_block8354 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_control_block8357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_FUNCTION_in_sass_function_declaration8403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration8405 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_sass_function_name_in_sass_function_declaration8407 = new BitSet(new long[]{0x0000000000080000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration8409 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_sass_function_declaration8412 = new BitSet(new long[]{0x0000FFFFE8D01610L,0x0000181FFF000040L});
    public static final BitSet FOLLOW_cp_args_list_in_sass_function_declaration8414 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_sass_function_declaration8417 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration8419 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_sass_function_declaration8422 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF700060L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration8424 = new BitSet(new long[]{0x5FFEFFFFE8E45E70L,0x0000401FFF000060L});
    public static final BitSet FOLLOW_declarations_in_sass_function_declaration8427 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_function_declaration8430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_sass_function_name8455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_RETURN_in_sass_function_return8476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_function_return8478 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_cp_expression_in_sass_function_return8480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_CONTENT_in_sass_content8505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred1_Css3370 = new BitSet(new long[]{0x00200000000F0040L,0x0000000000700000L});
    public static final BitSet FOLLOW_mediaQueryList_in_synpred1_Css3373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred2_Css3434 = new BitSet(new long[]{0x00200000000F0040L,0x0000000000700000L});
    public static final BitSet FOLLOW_mediaQueryList_in_synpred2_Css3437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred3_Css3561 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred3_Css3564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_synpred4_Css3635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred4_Css3640 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_synpred4_Css3642 = new BitSet(new long[]{0x0000000000080000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_synpred4_Css3644 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred4_Css3647 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred4_Css3650 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_RPAREN_in_synpred4_Css3655 = new BitSet(new long[]{0xFFFFFFFFFFFFFFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred4_Css3657 = new BitSet(new long[]{0xFFFFFFFFFFFFFFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_LBRACE_in_synpred4_Css3665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred5_Css3679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred6_Css3692 = new BitSet(new long[]{0xFFFFFFFFFFFF9FD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_COLON_in_synpred6_Css3704 = new BitSet(new long[]{0xFFFFFFFFFFFF9FD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred6_Css3706 = new BitSet(new long[]{0xFFFFFFFFFFFF9FF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_SEMI_in_synpred6_Css3716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_declaration_interpolation_expression_in_synpred7_Css3729 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_synpred7_Css3731 = new BitSet(new long[]{0xFFFFFFFFFFFF9FD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred7_Css3733 = new BitSet(new long[]{0xFFFFFFFFFFFF9FF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_SEMI_in_synpred7_Css3743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred8_Css3851 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred8_Css3854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred9_Css31150 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred9_Css31153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_synpred10_Css31230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred10_Css31235 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_synpred10_Css31237 = new BitSet(new long[]{0x0000000000080000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_synpred10_Css31239 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred10_Css31242 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred10_Css31245 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_RPAREN_in_synpred10_Css31250 = new BitSet(new long[]{0xFFFFFFFFFFFFBFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred10_Css31252 = new BitSet(new long[]{0xFFFFFFFFFFFFBFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_LBRACE_in_synpred10_Css31262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred13_Css32400 = new BitSet(new long[]{0xFFFFFFFFFFDFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_synpred13_Css32408 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred13_Css32410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred14_Css32564 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred14_Css32567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_declaration_in_synpred15_Css32638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_nested_properties_in_synpred16_Css32651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_synpred17_Css32664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_synpred18_Css32682 = new BitSet(new long[]{0x0000000000200000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_synpred18_Css32684 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_synpred18_Css32687 = new BitSet(new long[]{0xFFFFFFFFFFFFDFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred18_Css32689 = new BitSet(new long[]{0xFFFFFFFFFFFFDFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred18_Css32699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_synpred19_Css32717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred19_Css32722 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_synpred19_Css32724 = new BitSet(new long[]{0x0000000000080000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_synpred19_Css32726 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred19_Css32729 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred19_Css32732 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_RPAREN_in_synpred19_Css32737 = new BitSet(new long[]{0xFFFFFFFFFFFFBFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred19_Css32739 = new BitSet(new long[]{0xFFFFFFFFFFFFBFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_LBRACE_in_synpred19_Css32749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred20_Css32763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectorsGroup_in_synpred21_Css32776 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_synpred21_Css32778 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred21_Css32781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred22_Css32920 = new BitSet(new long[]{0xFFFFFFFFFFFFDFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_synpred22_Css32932 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred22_Css32934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred23_Css33074 = new BitSet(new long[]{0x07E0000000200000L});
    public static final BitSet FOLLOW_esPred_in_synpred23_Css33077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred24_Css33098 = new BitSet(new long[]{0x07E0000000200000L});
    public static final BitSet FOLLOW_esPred_in_synpred24_Css33101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred25_Css33208 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_PIPE_in_synpred25_Css33217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred26_Css34673 = new BitSet(new long[]{0x0076FFFFF8C417D0L,0x0000001FFF0FFF40L});
    public static final BitSet FOLLOW_ws_in_synpred26_Css34678 = new BitSet(new long[]{0x0001000000000800L,0x0000000000700000L});
    public static final BitSet FOLLOW_operator_in_synpred26_Css34681 = new BitSet(new long[]{0x0076FFFFF8C417D0L,0x0000001FFF7FFF40L});
    public static final BitSet FOLLOW_ws_in_synpred26_Css34683 = new BitSet(new long[]{0x0076FFFFF8C417D0L,0x0000001FFF0FFF40L});
    public static final BitSet FOLLOW_term_in_synpred26_Css34692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionName_in_synpred27_Css34770 = new BitSet(new long[]{0x0000000000080000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_synpred27_Css34772 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred27_Css34775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fnAttributeName_in_synpred28_Css35291 = new BitSet(new long[]{0x8000000000200000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_synpred28_Css35293 = new BitSet(new long[]{0x8000000000200000L});
    public static final BitSet FOLLOW_set_in_synpred28_Css35296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred29_Css35429 = new BitSet(new long[]{0x0076FFFFF8C417D0L,0x0000001FFF0FFF40L});
    public static final BitSet FOLLOW_ws_in_synpred29_Css35434 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_SOLIDUS_in_synpred29_Css35437 = new BitSet(new long[]{0x0076FFFFF8C417D0L,0x0000001FFF7FFF40L});
    public static final BitSet FOLLOW_ws_in_synpred29_Css35439 = new BitSet(new long[]{0x0076FFFFF8C417D0L,0x0000001FFF0FFF40L});
    public static final BitSet FOLLOW_term_in_synpred29_Css35448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred30_Css35887 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred30_Css35890 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF7FFFC0L});
    public static final BitSet FOLLOW_ws_in_synpred30_Css35892 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_cp_expression_in_synpred30_Css35895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred31_Css35962 = new BitSet(new long[]{0x0008000000008000L,0x000007E000700000L});
    public static final BitSet FOLLOW_cp_expression_operator_in_synpred31_Css35965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred32_Css35992 = new BitSet(new long[]{0x0076FFFFF8CE17D0L,0x0000001FFF0FFFC0L});
    public static final BitSet FOLLOW_cp_expression_atom_in_synpred32_Css35995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_math_expression_in_synpred33_Css36123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred34_Css36254 = new BitSet(new long[]{0x0807000000000000L});
    public static final BitSet FOLLOW_set_in_synpred34_Css36257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred35_Css37326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred36_Css37473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred37_Css37629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred38_Css37747 = new BitSet(new long[]{0x0000000000000002L});

}