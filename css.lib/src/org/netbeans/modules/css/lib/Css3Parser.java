// $ANTLR 3.3 Nov 30, 2010 12:50:56 /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g 2014-07-11 08:43:03

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2011 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2011 Sun Microsystems, Inc.
 */
package org.netbeans.modules.css.lib;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.debug.*;
import java.io.IOException;
public class Css3Parser extends DebugParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NAMESPACE_SYM", "SEMI", "IDENT", "STRING", "URI", "CHARSET_SYM", "IMPORT_SYM", "COMMA", "LPAREN", "LESS_IMPORT_TYPE", "RPAREN", "MEDIA_SYM", "LBRACE", "RBRACE", "IMPORTANT_SYM", "AND", "ONLY", "NOT", "GEN", "COLON", "AT_IDENT", "MOZ_DOCUMENT_SYM", "MOZ_URL_PREFIX", "MOZ_DOMAIN", "MOZ_REGEXP", "WEBKIT_KEYFRAMES_SYM", "PERCENTAGE", "PAGE_SYM", "COUNTER_STYLE_SYM", "FONT_FACE_SYM", "TOPLEFTCORNER_SYM", "TOPLEFT_SYM", "TOPCENTER_SYM", "TOPRIGHT_SYM", "TOPRIGHTCORNER_SYM", "BOTTOMLEFTCORNER_SYM", "BOTTOMLEFT_SYM", "BOTTOMCENTER_SYM", "BOTTOMRIGHT_SYM", "BOTTOMRIGHTCORNER_SYM", "LEFTTOP_SYM", "LEFTMIDDLE_SYM", "LEFTBOTTOM_SYM", "RIGHTTOP_SYM", "RIGHTMIDDLE_SYM", "RIGHTBOTTOM_SYM", "SOLIDUS", "MINUS", "PLUS", "GREATER", "TILDE", "HASH_SYMBOL", "HASH", "DOT", "LBRACKET", "DCOLON", "SASS_EXTEND_ONLY_SELECTOR", "STAR", "PIPE", "NAME", "LESS_AND", "OPEQ", "INCLUDES", "DASHMATCH", "BEGINS", "ENDS", "CONTAINS", "RBRACKET", "SASS_VAR", "NUMBER", "LENGTH", "EMS", "REM", "EXS", "ANGLE", "TIME", "FREQ", "RESOLUTION", "DIMENSION", "LESS_JS_STRING", "PERCENTAGE_SYMBOL", "WS", "NL", "COMMENT", "SASS_DEFAULT", "SASS_CONTENT", "SASS_MIXIN", "SASS_INCLUDE", "SASS_EXTEND", "SASS_DEBUG", "SASS_WARN", "SASS_IF", "SASS_ELSE", "SASS_FOR", "SASS_FUNCTION", "SASS_RETURN", "SASS_EACH", "SASS_WHILE", "OR", "CP_EQ", "CP_NOT_EQ", "LESS", "LESS_OR_EQ", "GREATER_OR_EQ", "CP_DOTS", "LESS_REST", "LESS_WHEN", "AT_SIGN", "SASS_OPTIONAL", "HEXCHAR", "NONASCII", "UNICODE", "ESCAPE", "NMSTART", "NMCHAR", "URL", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "CDO", "CDC", "EXCLAMATION_MARK", "INVALID", "LINE_COMMENT"
    };
    public static final int EOF=-1;
    public static final int NAMESPACE_SYM=4;
    public static final int SEMI=5;
    public static final int IDENT=6;
    public static final int STRING=7;
    public static final int URI=8;
    public static final int CHARSET_SYM=9;
    public static final int IMPORT_SYM=10;
    public static final int COMMA=11;
    public static final int LPAREN=12;
    public static final int LESS_IMPORT_TYPE=13;
    public static final int RPAREN=14;
    public static final int MEDIA_SYM=15;
    public static final int LBRACE=16;
    public static final int RBRACE=17;
    public static final int IMPORTANT_SYM=18;
    public static final int AND=19;
    public static final int ONLY=20;
    public static final int NOT=21;
    public static final int GEN=22;
    public static final int COLON=23;
    public static final int AT_IDENT=24;
    public static final int MOZ_DOCUMENT_SYM=25;
    public static final int MOZ_URL_PREFIX=26;
    public static final int MOZ_DOMAIN=27;
    public static final int MOZ_REGEXP=28;
    public static final int WEBKIT_KEYFRAMES_SYM=29;
    public static final int PERCENTAGE=30;
    public static final int PAGE_SYM=31;
    public static final int COUNTER_STYLE_SYM=32;
    public static final int FONT_FACE_SYM=33;
    public static final int TOPLEFTCORNER_SYM=34;
    public static final int TOPLEFT_SYM=35;
    public static final int TOPCENTER_SYM=36;
    public static final int TOPRIGHT_SYM=37;
    public static final int TOPRIGHTCORNER_SYM=38;
    public static final int BOTTOMLEFTCORNER_SYM=39;
    public static final int BOTTOMLEFT_SYM=40;
    public static final int BOTTOMCENTER_SYM=41;
    public static final int BOTTOMRIGHT_SYM=42;
    public static final int BOTTOMRIGHTCORNER_SYM=43;
    public static final int LEFTTOP_SYM=44;
    public static final int LEFTMIDDLE_SYM=45;
    public static final int LEFTBOTTOM_SYM=46;
    public static final int RIGHTTOP_SYM=47;
    public static final int RIGHTMIDDLE_SYM=48;
    public static final int RIGHTBOTTOM_SYM=49;
    public static final int SOLIDUS=50;
    public static final int MINUS=51;
    public static final int PLUS=52;
    public static final int GREATER=53;
    public static final int TILDE=54;
    public static final int HASH_SYMBOL=55;
    public static final int HASH=56;
    public static final int DOT=57;
    public static final int LBRACKET=58;
    public static final int DCOLON=59;
    public static final int SASS_EXTEND_ONLY_SELECTOR=60;
    public static final int STAR=61;
    public static final int PIPE=62;
    public static final int NAME=63;
    public static final int LESS_AND=64;
    public static final int OPEQ=65;
    public static final int INCLUDES=66;
    public static final int DASHMATCH=67;
    public static final int BEGINS=68;
    public static final int ENDS=69;
    public static final int CONTAINS=70;
    public static final int RBRACKET=71;
    public static final int SASS_VAR=72;
    public static final int NUMBER=73;
    public static final int LENGTH=74;
    public static final int EMS=75;
    public static final int REM=76;
    public static final int EXS=77;
    public static final int ANGLE=78;
    public static final int TIME=79;
    public static final int FREQ=80;
    public static final int RESOLUTION=81;
    public static final int DIMENSION=82;
    public static final int LESS_JS_STRING=83;
    public static final int PERCENTAGE_SYMBOL=84;
    public static final int WS=85;
    public static final int NL=86;
    public static final int COMMENT=87;
    public static final int SASS_DEFAULT=88;
    public static final int SASS_CONTENT=89;
    public static final int SASS_MIXIN=90;
    public static final int SASS_INCLUDE=91;
    public static final int SASS_EXTEND=92;
    public static final int SASS_DEBUG=93;
    public static final int SASS_WARN=94;
    public static final int SASS_IF=95;
    public static final int SASS_ELSE=96;
    public static final int SASS_FOR=97;
    public static final int SASS_FUNCTION=98;
    public static final int SASS_RETURN=99;
    public static final int SASS_EACH=100;
    public static final int SASS_WHILE=101;
    public static final int OR=102;
    public static final int CP_EQ=103;
    public static final int CP_NOT_EQ=104;
    public static final int LESS=105;
    public static final int LESS_OR_EQ=106;
    public static final int GREATER_OR_EQ=107;
    public static final int CP_DOTS=108;
    public static final int LESS_REST=109;
    public static final int LESS_WHEN=110;
    public static final int AT_SIGN=111;
    public static final int SASS_OPTIONAL=112;
    public static final int HEXCHAR=113;
    public static final int NONASCII=114;
    public static final int UNICODE=115;
    public static final int ESCAPE=116;
    public static final int NMSTART=117;
    public static final int NMCHAR=118;
    public static final int URL=119;
    public static final int A=120;
    public static final int B=121;
    public static final int C=122;
    public static final int D=123;
    public static final int E=124;
    public static final int F=125;
    public static final int G=126;
    public static final int H=127;
    public static final int I=128;
    public static final int J=129;
    public static final int K=130;
    public static final int L=131;
    public static final int M=132;
    public static final int N=133;
    public static final int O=134;
    public static final int P=135;
    public static final int Q=136;
    public static final int R=137;
    public static final int S=138;
    public static final int T=139;
    public static final int U=140;
    public static final int V=141;
    public static final int W=142;
    public static final int X=143;
    public static final int Y=144;
    public static final int Z=145;
    public static final int CDO=146;
    public static final int CDC=147;
    public static final int EXCLAMATION_MARK=148;
    public static final int INVALID=149;
    public static final int LINE_COMMENT=150;

    // delegates
    // delegators

    public static final String[] ruleNames = new String[] {
        "invalidRule", "body", "cp_variable_declaration", "cp_args_list", 
        "prio", "synpred26_Css3", "cp_math_expression", "synpred14_Css3", 
        "mediaFeature", "unaryOperator", "syncTo_RBRACE", "synpred1_Css3", 
        "synpred27_Css3", "mediaBody", "fontFace", "sass_each", "mediaType", 
        "cp_mixin_declaration", "synpred43_Css3", "generic_at_rule", "sass_extend_only_selector", 
        "less_mixin_guarded", "importItem", "cp_math_expression_atom", "syncTo_SEMI", 
        "elementName", "synpred41_Css3", "less_function_in_condition", "synpred45_Css3", 
        "sass_selector_interpolation_expression", "sass_extend", "selectorsGroup", 
        "resourceIdentifier", "synpred18_Css3", "propertyDeclaration", "sass_control_expression", 
        "sass_for", "sass_function_return", "property", "mediaQueryList", 
        "cp_math_expressions", "sass_map_name", "synpred37_Css3", "less_condition", 
        "at_rule", "synpred23_Css3", "sass_else", "cp_propertyValue", "cp_expression_list", 
        "less_fn_name", "charSet", "synpred6_Css3", "webkitKeyframeSelectors", 
        "bodyItem", "expressionPredicate", "synpred44_Css3", "cp_variable", 
        "cp_expression_operator", "term", "pseudo", "pseudoPage", "less_selector_interpolation", 
        "mediaQuery", "mediaBodyItem", "declarations", "less_condition_operator", 
        "sass_function_declaration", "synpred5_Css3", "page", "syncToFollow", 
        "synpred10_Css3", "slAttributeValue", "functionName", "rule", "selector", 
        "synpred11_Css3", "sass_content", "synpred25_Css3", "cp_term_symbol", 
        "cssClass", "sass_nested_properties", "synpred21_Css3", "fnAttribute", 
        "synpred39_Css3", "function", "synpred17_Css3", "sass_interpolation_expression_var", 
        "synpred34_Css3", "declaration", "sass_function_name", "margin_sym", 
        "propertyValue", "synpred28_Css3", "slAttributeName", "cssId", "fnAttributes", 
        "synpred13_Css3", "synpred29_Css3", "sass_control_block", "synpred33_Css3", 
        "sass_map_pairs", "sass_control", "synpred38_Css3", "cp_mixin_call", 
        "synpred16_Css3", "vendorAtRule", "moz_document", "sass_while", 
        "synpred32_Css3", "synpred20_Css3", "sass_map", "synpred8_Css3", 
        "mediaFeatureValue", "synpred30_Css3", "webkitKeyframes", "sass_if", 
        "fnAttributeName", "sass_debug", "synpred9_Css3", "synpred3_Css3", 
        "typeSelector", "mediaQueryOperator", "esPred", "synpred35_Css3", 
        "operator", "synpred15_Css3", "synpred36_Css3", "synpred24_Css3", 
        "elementSubsequent", "cp_mixin_call_args", "synpred2_Css3", "charSetValue", 
        "cp_mixin_name", "synpred42_Css3", "combinator", "cp_expression", 
        "fnAttributeValue", "moz_document_function", "cp_expression_atom", 
        "syncToDeclarationsRule", "ws", "margin", "cp_arg", "cp_mixin_block", 
        "synpred4_Css3", "namespacePrefixName", "slAttribute", "synpred19_Css3", 
        "media", "counterStyle", "synpred40_Css3", "atRuleId", "namespacePrefix", 
        "expression", "synpred12_Css3", "sass_declaration_interpolation_expression", 
        "styleSheet", "namespaces", "namespace", "sass_map_pair", "webkitKeyframesBlock", 
        "synpred31_Css3", "simpleSelectorSequence", "mediaExpression", "cp_mixin_call_arg", 
        "synpred7_Css3", "hexColor", "synpred22_Css3", "imports"
    };
    public static final boolean[] decisionCanBacktrack = new boolean[] {
        false, // invalid decision
        false, false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            true, false, false, false, false, false, true, false, false, 
            false, false, true, false, false, false, false, false, false, 
            true, false, false, false, false, false, false, false, true, 
            false, false, true, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, true, false, false, false, true, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, true, false, false, false, false, true, false, 
            false, false, false, false, false, false, false, false, false, 
            false, true, false, false, false, false, false, false, false, 
            true, false, false, false, true, false, false, false, false, 
            false, false, false, false, true, false, true, false, true, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, true, false, 
            false, true, false, false, false, false, false, false, false, 
            false, false, false, false, true, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, true, false, false, false, 
            true, false, false, false, false, false, true, false, false, 
            false, true, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, true, false, true, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false
    };

     
        public int ruleLevel = 0;
        public int getRuleLevel() { return ruleLevel; }
        public void incRuleLevel() { ruleLevel++; }
        public void decRuleLevel() { ruleLevel--; }
        public Css3Parser(TokenStream input) {
            this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT, new RecognizerSharedState());
        }
        public Css3Parser(TokenStream input, int port, RecognizerSharedState state) {
            super(input, state);
            DebugEventSocketProxy proxy =
                new DebugEventSocketProxy(this, port, null);
            setDebugListener(proxy);
            try {
                proxy.handshake();
            }
            catch (IOException ioe) {
                reportError(ioe);
            }
        }
    public Css3Parser(TokenStream input, DebugEventListener dbg) {
        super(input, dbg, new RecognizerSharedState());

    }
    protected boolean evalPredicate(boolean result, String predicate) {
        dbg.semanticPredicate(result, predicate);
        return result;
    }


    public String[] getTokenNames() { return Css3Parser.tokenNames; }
    public String getGrammarFileName() { return "/Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g"; }



        protected boolean isLessSource() {
            return false;
        }

        protected boolean isScssSource() {
            return false;
        }

        private boolean isCssPreprocessorSource() {
            return isLessSource() || isScssSource();
        }

        private boolean tokenNameEquals(String tokenImage) {
            return tokenImage.equalsIgnoreCase(input.LT(1).getText());
        }

    /**
         * Use the current stacked followset to work out the valid tokens that
         * can follow on from the current point in the parse, then recover by
         * eating tokens that are not a member of the follow set we compute.
         *
         * This method is used whenever we wish to force a sync, even though
         * the parser has not yet checked LA(1) for alt selection. This is useful
         * in situations where only a subset of tokens can begin a new construct
         * (such as the start of a new statement in a block) and we want to
         * proactively detect garbage so that the current rule does not exit on
         * on an exception.
         *
         * We could override recover() to make this the default behavior but that
         * is too much like using a sledge hammer to crack a nut. We want finer
         * grained control of the recovery and error mechanisms.
         */
        protected void syncToSet()
        {
            // Compute the followset that is in context wherever we are in the
            // rule chain/stack
            //
             BitSet follow = state.following[state._fsp]; //computeContextSensitiveRuleFOLLOW();

             syncToSet(follow);
        }

        protected void syncToSet(BitSet follow)
        {
            int mark = -1;

            //create error-recovery node
            dbg.enterRule(getGrammarFileName(), "recovery");

            try {

                mark = input.mark();

                // Consume all tokens in the stream until we find a member of the follow
                // set, which means the next production should be guaranteed to be happy.
                //
                while (! follow.member(input.LA(1)) ) {

                    if  (input.LA(1) == Token.EOF) {

                        // Looks like we didn't find anything at all that can help us here
                        // so we need to rewind to where we were and let normal error handling
                        // bail out.
                        //
                        input.rewind();
                        mark = -1;
                        return;
                    }
                    input.consume();

                    // Now here, because you are consuming some tokens, yu will probably want
                    // to raise an error message such as "Spurious elements after the class member were discarded"
                    // using whatever your override of displayRecognitionError() routine does to record
                    // error messages. The exact error my depend on context etc.
                    //
                }
            } catch (Exception e) {

              // Just ignore any errors here, we will just let the recognizer
              // try to resync as normal - something must be very screwed.
              //
            }
            finally {
                dbg.exitRule(getGrammarFileName(), "recovery");

                // Always release the mark we took
                //
                if  (mark != -1) {
                    input.release(mark);
                }
            }
        }

        /**
             * synces to next RBRACE "}" taking nesting into account
             */
            protected void syncToRBRACE(int nest)
                {

                    int mark = -1;
                    //create error-recovery node
                    //dbg.enterRule(getGrammarFileName(), "recovery");

                    try {
                        mark = input.mark();
                        for(;;) {
                            //read char
                            int c = input.LA(1);

                            switch(c) {
                                case Token.EOF:
                                    input.rewind();
                                    mark = -1;
                                    return ;
                                case Css3Lexer.LBRACE:
                                    nest++;
                                    break;
                                case Css3Lexer.RBRACE:
                                    nest--;
                                    if(nest == 0) {
                                        //do not eat the final RBRACE
                                        return ;
                                    }
                            }

                            input.consume();

                        }

                    } catch (Exception e) {

                      // Just ignore any errors here, we will just let the recognizer
                      // try to resync as normal - something must be very screwed.
                      //
                    }
                    finally {
                        if  (mark != -1) {
                            input.release(mark);
                        }
                        //dbg.exitRule(getGrammarFileName(), "recovery");
                    }
                }




    // $ANTLR start "styleSheet"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:321:1: styleSheet : ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF ;
    public final void styleSheet() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "styleSheet");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(321, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:322:5: ( ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:6: ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF
            {
            dbg.location(323,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:6: ( ws )?
            int alt1=2;
            try { dbg.enterSubRule(1);
            try { dbg.enterDecision(1, decisionCanBacktrack[1]);

            int LA1_0 = input.LA(1);

            if ( ((LA1_0>=WS && LA1_0<=COMMENT)) ) {
                alt1=1;
            }
            } finally {dbg.exitDecision(1);}

            switch (alt1) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:6: ws
                    {
                    dbg.location(323,6);
                    pushFollow(FOLLOW_ws_in_styleSheet120);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(1);}

            dbg.location(324,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:6: ( charSet ( ws )? )?
            int alt3=2;
            try { dbg.enterSubRule(3);
            try { dbg.enterDecision(3, decisionCanBacktrack[3]);

            try {
                isCyclicDecision = true;
                alt3 = dfa3.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(3);}

            switch (alt3) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:8: charSet ( ws )?
                    {
                    dbg.location(324,8);
                    pushFollow(FOLLOW_charSet_in_styleSheet130);
                    charSet();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(324,16);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:16: ( ws )?
                    int alt2=2;
                    try { dbg.enterSubRule(2);
                    try { dbg.enterDecision(2, decisionCanBacktrack[2]);

                    int LA2_0 = input.LA(1);

                    if ( ((LA2_0>=WS && LA2_0<=COMMENT)) ) {
                        alt2=1;
                    }
                    } finally {dbg.exitDecision(2);}

                    switch (alt2) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:16: ws
                            {
                            dbg.location(324,16);
                            pushFollow(FOLLOW_ws_in_styleSheet132);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(2);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(3);}

            dbg.location(325,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:9: ( imports )?
            int alt4=2;
            try { dbg.enterSubRule(4);
            try { dbg.enterDecision(4, decisionCanBacktrack[4]);

            try {
                isCyclicDecision = true;
                alt4 = dfa4.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(4);}

            switch (alt4) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:9: imports
                    {
                    dbg.location(325,9);
                    pushFollow(FOLLOW_imports_in_styleSheet146);
                    imports();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(4);}

            dbg.location(326,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:326:9: ( namespaces )?
            int alt5=2;
            try { dbg.enterSubRule(5);
            try { dbg.enterDecision(5, decisionCanBacktrack[5]);

            try {
                isCyclicDecision = true;
                alt5 = dfa5.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(5);}

            switch (alt5) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:326:9: namespaces
                    {
                    dbg.location(326,9);
                    pushFollow(FOLLOW_namespaces_in_styleSheet157);
                    namespaces();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(5);}

            dbg.location(327,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:9: ( body )?
            int alt6=2;
            try { dbg.enterSubRule(6);
            try { dbg.enterDecision(6, decisionCanBacktrack[6]);

            int LA6_0 = input.LA(1);

            if ( ((LA6_0>=NAMESPACE_SYM && LA6_0<=IDENT)||(LA6_0>=CHARSET_SYM && LA6_0<=COMMA)||LA6_0==MEDIA_SYM||(LA6_0>=GEN && LA6_0<=MOZ_DOCUMENT_SYM)||LA6_0==WEBKIT_KEYFRAMES_SYM||(LA6_0>=PAGE_SYM && LA6_0<=RIGHTBOTTOM_SYM)||(LA6_0>=MINUS && LA6_0<=PIPE)||LA6_0==LESS_AND||(LA6_0>=RBRACKET && LA6_0<=SASS_VAR)||(LA6_0>=SASS_CONTENT && LA6_0<=SASS_WHILE)||LA6_0==AT_SIGN) ) {
                alt6=1;
            }
            } finally {dbg.exitDecision(6);}

            switch (alt6) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:9: body
                    {
                    dbg.location(327,9);
                    pushFollow(FOLLOW_body_in_styleSheet168);
                    body();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(6);}

            dbg.location(328,6);
            match(input,EOF,FOLLOW_EOF_in_styleSheet176); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(329, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "styleSheet");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "styleSheet"


    // $ANTLR start "namespaces"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:331:1: namespaces : ( namespace ( ws )? )+ ;
    public final void namespaces() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespaces");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(331, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:332:2: ( ( namespace ( ws )? )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:2: ( namespace ( ws )? )+
            {
            dbg.location(333,2);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:2: ( namespace ( ws )? )+
            int cnt8=0;
            try { dbg.enterSubRule(8);

            loop8:
            do {
                int alt8=2;
                try { dbg.enterDecision(8, decisionCanBacktrack[8]);

                try {
                    isCyclicDecision = true;
                    alt8 = dfa8.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(8);}

                switch (alt8) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:4: namespace ( ws )?
            	    {
            	    dbg.location(333,4);
            	    pushFollow(FOLLOW_namespace_in_namespaces193);
            	    namespace();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(333,14);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:14: ( ws )?
            	    int alt7=2;
            	    try { dbg.enterSubRule(7);
            	    try { dbg.enterDecision(7, decisionCanBacktrack[7]);

            	    int LA7_0 = input.LA(1);

            	    if ( ((LA7_0>=WS && LA7_0<=COMMENT)) ) {
            	        alt7=1;
            	    }
            	    } finally {dbg.exitDecision(7);}

            	    switch (alt7) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:14: ws
            	            {
            	            dbg.location(333,14);
            	            pushFollow(FOLLOW_ws_in_namespaces195);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(7);}


            	    }
            	    break;

            	default :
            	    if ( cnt8 >= 1 ) break loop8;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(8, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt8++;
            } while (true);
            } finally {dbg.exitSubRule(8);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(334, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespaces");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespaces"


    // $ANTLR start "namespace"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:1: namespace : NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI ;
    public final void namespace() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespace");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(336, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:3: ( NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:5: NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI
            {
            dbg.location(337,5);
            match(input,NAMESPACE_SYM,FOLLOW_NAMESPACE_SYM_in_namespace211); if (state.failed) return ;
            dbg.location(337,19);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:19: ( ws )?
            int alt9=2;
            try { dbg.enterSubRule(9);
            try { dbg.enterDecision(9, decisionCanBacktrack[9]);

            int LA9_0 = input.LA(1);

            if ( ((LA9_0>=WS && LA9_0<=COMMENT)) ) {
                alt9=1;
            }
            } finally {dbg.exitDecision(9);}

            switch (alt9) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:19: ws
                    {
                    dbg.location(337,19);
                    pushFollow(FOLLOW_ws_in_namespace213);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(9);}

            dbg.location(337,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:23: ( namespacePrefixName ( ws )? )?
            int alt11=2;
            try { dbg.enterSubRule(11);
            try { dbg.enterDecision(11, decisionCanBacktrack[11]);

            int LA11_0 = input.LA(1);

            if ( (LA11_0==IDENT) ) {
                alt11=1;
            }
            } finally {dbg.exitDecision(11);}

            switch (alt11) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:24: namespacePrefixName ( ws )?
                    {
                    dbg.location(337,24);
                    pushFollow(FOLLOW_namespacePrefixName_in_namespace217);
                    namespacePrefixName();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(337,44);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:44: ( ws )?
                    int alt10=2;
                    try { dbg.enterSubRule(10);
                    try { dbg.enterDecision(10, decisionCanBacktrack[10]);

                    int LA10_0 = input.LA(1);

                    if ( ((LA10_0>=WS && LA10_0<=COMMENT)) ) {
                        alt10=1;
                    }
                    } finally {dbg.exitDecision(10);}

                    switch (alt10) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:44: ws
                            {
                            dbg.location(337,44);
                            pushFollow(FOLLOW_ws_in_namespace219);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(10);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(11);}

            dbg.location(337,50);
            pushFollow(FOLLOW_resourceIdentifier_in_namespace224);
            resourceIdentifier();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(337,69);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:69: ( ws )?
            int alt12=2;
            try { dbg.enterSubRule(12);
            try { dbg.enterDecision(12, decisionCanBacktrack[12]);

            int LA12_0 = input.LA(1);

            if ( ((LA12_0>=WS && LA12_0<=COMMENT)) ) {
                alt12=1;
            }
            } finally {dbg.exitDecision(12);}

            switch (alt12) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:69: ws
                    {
                    dbg.location(337,69);
                    pushFollow(FOLLOW_ws_in_namespace226);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(12);}

            dbg.location(337,73);
            match(input,SEMI,FOLLOW_SEMI_in_namespace229); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(338, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespace");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespace"


    // $ANTLR start "namespacePrefixName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:340:1: namespacePrefixName : IDENT ;
    public final void namespacePrefixName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespacePrefixName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(340, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:341:3: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:341:5: IDENT
            {
            dbg.location(341,5);
            match(input,IDENT,FOLLOW_IDENT_in_namespacePrefixName242); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(342, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespacePrefixName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespacePrefixName"


    // $ANTLR start "resourceIdentifier"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:344:1: resourceIdentifier : ( STRING | URI );
    public final void resourceIdentifier() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "resourceIdentifier");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(344, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:345:3: ( STRING | URI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(345,3);
            if ( (input.LA(1)>=STRING && input.LA(1)<=URI) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(346, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "resourceIdentifier");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "resourceIdentifier"


    // $ANTLR start "charSet"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:348:1: charSet : CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI ;
    public final void charSet() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "charSet");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(348, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:5: ( CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:9: CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI
            {
            dbg.location(349,9);
            match(input,CHARSET_SYM,FOLLOW_CHARSET_SYM_in_charSet276); if (state.failed) return ;
            dbg.location(349,21);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:21: ( ws )?
            int alt13=2;
            try { dbg.enterSubRule(13);
            try { dbg.enterDecision(13, decisionCanBacktrack[13]);

            int LA13_0 = input.LA(1);

            if ( ((LA13_0>=WS && LA13_0<=COMMENT)) ) {
                alt13=1;
            }
            } finally {dbg.exitDecision(13);}

            switch (alt13) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:21: ws
                    {
                    dbg.location(349,21);
                    pushFollow(FOLLOW_ws_in_charSet278);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(13);}

            dbg.location(349,25);
            pushFollow(FOLLOW_charSetValue_in_charSet281);
            charSetValue();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(349,38);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:38: ( ws )?
            int alt14=2;
            try { dbg.enterSubRule(14);
            try { dbg.enterDecision(14, decisionCanBacktrack[14]);

            int LA14_0 = input.LA(1);

            if ( ((LA14_0>=WS && LA14_0<=COMMENT)) ) {
                alt14=1;
            }
            } finally {dbg.exitDecision(14);}

            switch (alt14) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:38: ws
                    {
                    dbg.location(349,38);
                    pushFollow(FOLLOW_ws_in_charSet283);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(14);}

            dbg.location(349,42);
            match(input,SEMI,FOLLOW_SEMI_in_charSet286); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(350, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "charSet");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "charSet"


    // $ANTLR start "charSetValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:352:1: charSetValue : STRING ;
    public final void charSetValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "charSetValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(352, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:353:2: ( STRING )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:353:4: STRING
            {
            dbg.location(353,4);
            match(input,STRING,FOLLOW_STRING_in_charSetValue300); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(354, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "charSetValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "charSetValue"


    // $ANTLR start "imports"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:356:1: imports : ( importItem ( ws )? SEMI ( ws )? )+ ;
    public final void imports() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "imports");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(356, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:357:2: ( ( importItem ( ws )? SEMI ( ws )? )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:2: ( importItem ( ws )? SEMI ( ws )? )+
            {
            dbg.location(358,2);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:2: ( importItem ( ws )? SEMI ( ws )? )+
            int cnt17=0;
            try { dbg.enterSubRule(17);

            loop17:
            do {
                int alt17=2;
                try { dbg.enterDecision(17, decisionCanBacktrack[17]);

                try {
                    isCyclicDecision = true;
                    alt17 = dfa17.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(17);}

                switch (alt17) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:4: importItem ( ws )? SEMI ( ws )?
            	    {
            	    dbg.location(358,4);
            	    pushFollow(FOLLOW_importItem_in_imports314);
            	    importItem();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(358,15);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:15: ( ws )?
            	    int alt15=2;
            	    try { dbg.enterSubRule(15);
            	    try { dbg.enterDecision(15, decisionCanBacktrack[15]);

            	    int LA15_0 = input.LA(1);

            	    if ( ((LA15_0>=WS && LA15_0<=COMMENT)) ) {
            	        alt15=1;
            	    }
            	    } finally {dbg.exitDecision(15);}

            	    switch (alt15) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:15: ws
            	            {
            	            dbg.location(358,15);
            	            pushFollow(FOLLOW_ws_in_imports316);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(15);}

            	    dbg.location(358,19);
            	    match(input,SEMI,FOLLOW_SEMI_in_imports319); if (state.failed) return ;
            	    dbg.location(358,24);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:24: ( ws )?
            	    int alt16=2;
            	    try { dbg.enterSubRule(16);
            	    try { dbg.enterDecision(16, decisionCanBacktrack[16]);

            	    int LA16_0 = input.LA(1);

            	    if ( ((LA16_0>=WS && LA16_0<=COMMENT)) ) {
            	        alt16=1;
            	    }
            	    } finally {dbg.exitDecision(16);}

            	    switch (alt16) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:24: ws
            	            {
            	            dbg.location(358,24);
            	            pushFollow(FOLLOW_ws_in_imports321);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(16);}


            	    }
            	    break;

            	default :
            	    if ( cnt17 >= 1 ) break loop17;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(17, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt17++;
            } while (true);
            } finally {dbg.exitSubRule(17);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(359, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "imports");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "imports"


    // $ANTLR start "importItem"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:361:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? ( LPAREN LESS_IMPORT_TYPE RPAREN ( ws )? )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? );
    public final void importItem() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "importItem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(361, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:362:5: ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? ( LPAREN LESS_IMPORT_TYPE RPAREN ( ws )? )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? )
            int alt32=3;
            try { dbg.enterDecision(32, decisionCanBacktrack[32]);

            try {
                isCyclicDecision = true;
                alt32 = dfa32.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(32);}

            switch (alt32) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:9: IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    {
                    dbg.location(363,9);
                    match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem347); if (state.failed) return ;
                    dbg.location(363,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:20: ( ws )?
                    int alt18=2;
                    try { dbg.enterSubRule(18);
                    try { dbg.enterDecision(18, decisionCanBacktrack[18]);

                    int LA18_0 = input.LA(1);

                    if ( ((LA18_0>=WS && LA18_0<=COMMENT)) ) {
                        alt18=1;
                    }
                    } finally {dbg.exitDecision(18);}

                    switch (alt18) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:20: ws
                            {
                            dbg.location(363,20);
                            pushFollow(FOLLOW_ws_in_importItem349);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(18);}

                    dbg.location(363,24);
                    pushFollow(FOLLOW_resourceIdentifier_in_importItem352);
                    resourceIdentifier();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(363,43);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:43: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    int alt20=2;
                    try { dbg.enterSubRule(20);
                    try { dbg.enterDecision(20, decisionCanBacktrack[20]);

                    try {
                        isCyclicDecision = true;
                        alt20 = dfa20.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(20);}

                    switch (alt20) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:44: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
                            {
                            dbg.location(363,66);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:66: ( ws )?
                            int alt19=2;
                            try { dbg.enterSubRule(19);
                            try { dbg.enterDecision(19, decisionCanBacktrack[19]);

                            int LA19_0 = input.LA(1);

                            if ( ((LA19_0>=WS && LA19_0<=COMMENT)) ) {
                                alt19=1;
                            }
                            } finally {dbg.exitDecision(19);}

                            switch (alt19) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:66: ws
                                    {
                                    dbg.location(363,66);
                                    pushFollow(FOLLOW_ws_in_importItem362);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(19);}

                            dbg.location(363,70);
                            pushFollow(FOLLOW_mediaQueryList_in_importItem365);
                            mediaQueryList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(20);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:9: {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    {
                    dbg.location(366,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "importItem", "isScssSource()");
                    }
                    dbg.location(366,27);
                    match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem398); if (state.failed) return ;
                    dbg.location(366,38);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:38: ( ws )?
                    int alt21=2;
                    try { dbg.enterSubRule(21);
                    try { dbg.enterDecision(21, decisionCanBacktrack[21]);

                    int LA21_0 = input.LA(1);

                    if ( ((LA21_0>=WS && LA21_0<=COMMENT)) ) {
                        alt21=1;
                    }
                    } finally {dbg.exitDecision(21);}

                    switch (alt21) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:38: ws
                            {
                            dbg.location(366,38);
                            pushFollow(FOLLOW_ws_in_importItem400);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(21);}

                    dbg.location(366,42);
                    pushFollow(FOLLOW_resourceIdentifier_in_importItem403);
                    resourceIdentifier();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(366,61);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:61: ( ( ws )? COMMA ( ws )? resourceIdentifier )*
                    try { dbg.enterSubRule(24);

                    loop24:
                    do {
                        int alt24=2;
                        try { dbg.enterDecision(24, decisionCanBacktrack[24]);

                        try {
                            isCyclicDecision = true;
                            alt24 = dfa24.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(24);}

                        switch (alt24) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:62: ( ws )? COMMA ( ws )? resourceIdentifier
                    	    {
                    	    dbg.location(366,62);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:62: ( ws )?
                    	    int alt22=2;
                    	    try { dbg.enterSubRule(22);
                    	    try { dbg.enterDecision(22, decisionCanBacktrack[22]);

                    	    int LA22_0 = input.LA(1);

                    	    if ( ((LA22_0>=WS && LA22_0<=COMMENT)) ) {
                    	        alt22=1;
                    	    }
                    	    } finally {dbg.exitDecision(22);}

                    	    switch (alt22) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:62: ws
                    	            {
                    	            dbg.location(366,62);
                    	            pushFollow(FOLLOW_ws_in_importItem406);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(22);}

                    	    dbg.location(366,66);
                    	    match(input,COMMA,FOLLOW_COMMA_in_importItem409); if (state.failed) return ;
                    	    dbg.location(366,72);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:72: ( ws )?
                    	    int alt23=2;
                    	    try { dbg.enterSubRule(23);
                    	    try { dbg.enterDecision(23, decisionCanBacktrack[23]);

                    	    int LA23_0 = input.LA(1);

                    	    if ( ((LA23_0>=WS && LA23_0<=COMMENT)) ) {
                    	        alt23=1;
                    	    }
                    	    } finally {dbg.exitDecision(23);}

                    	    switch (alt23) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:72: ws
                    	            {
                    	            dbg.location(366,72);
                    	            pushFollow(FOLLOW_ws_in_importItem411);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(23);}

                    	    dbg.location(366,76);
                    	    pushFollow(FOLLOW_resourceIdentifier_in_importItem414);
                    	    resourceIdentifier();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop24;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(24);}

                    dbg.location(366,97);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:97: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    int alt26=2;
                    try { dbg.enterSubRule(26);
                    try { dbg.enterDecision(26, decisionCanBacktrack[26]);

                    try {
                        isCyclicDecision = true;
                        alt26 = dfa26.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(26);}

                    switch (alt26) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:98: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
                            {
                            dbg.location(366,120);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:120: ( ws )?
                            int alt25=2;
                            try { dbg.enterSubRule(25);
                            try { dbg.enterDecision(25, decisionCanBacktrack[25]);

                            int LA25_0 = input.LA(1);

                            if ( ((LA25_0>=WS && LA25_0<=COMMENT)) ) {
                                alt25=1;
                            }
                            } finally {dbg.exitDecision(25);}

                            switch (alt25) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:120: ws
                                    {
                                    dbg.location(366,120);
                                    pushFollow(FOLLOW_ws_in_importItem426);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(25);}

                            dbg.location(366,124);
                            pushFollow(FOLLOW_mediaQueryList_in_importItem429);
                            mediaQueryList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(26);}


                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:9: {...}? IMPORT_SYM ( ws )? ( LPAREN LESS_IMPORT_TYPE RPAREN ( ws )? )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    {
                    dbg.location(368,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "importItem", "isLessSource()");
                    }
                    dbg.location(368,27);
                    match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem453); if (state.failed) return ;
                    dbg.location(368,38);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:38: ( ws )?
                    int alt27=2;
                    try { dbg.enterSubRule(27);
                    try { dbg.enterDecision(27, decisionCanBacktrack[27]);

                    int LA27_0 = input.LA(1);

                    if ( ((LA27_0>=WS && LA27_0<=COMMENT)) ) {
                        alt27=1;
                    }
                    } finally {dbg.exitDecision(27);}

                    switch (alt27) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:38: ws
                            {
                            dbg.location(368,38);
                            pushFollow(FOLLOW_ws_in_importItem455);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(27);}

                    dbg.location(368,42);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:42: ( LPAREN LESS_IMPORT_TYPE RPAREN ( ws )? )?
                    int alt29=2;
                    try { dbg.enterSubRule(29);
                    try { dbg.enterDecision(29, decisionCanBacktrack[29]);

                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==LPAREN) ) {
                        alt29=1;
                    }
                    } finally {dbg.exitDecision(29);}

                    switch (alt29) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:43: LPAREN LESS_IMPORT_TYPE RPAREN ( ws )?
                            {
                            dbg.location(368,43);
                            match(input,LPAREN,FOLLOW_LPAREN_in_importItem459); if (state.failed) return ;
                            dbg.location(368,50);
                            match(input,LESS_IMPORT_TYPE,FOLLOW_LESS_IMPORT_TYPE_in_importItem461); if (state.failed) return ;
                            dbg.location(368,67);
                            match(input,RPAREN,FOLLOW_RPAREN_in_importItem463); if (state.failed) return ;
                            dbg.location(368,74);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:74: ( ws )?
                            int alt28=2;
                            try { dbg.enterSubRule(28);
                            try { dbg.enterDecision(28, decisionCanBacktrack[28]);

                            int LA28_0 = input.LA(1);

                            if ( ((LA28_0>=WS && LA28_0<=COMMENT)) ) {
                                alt28=1;
                            }
                            } finally {dbg.exitDecision(28);}

                            switch (alt28) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:74: ws
                                    {
                                    dbg.location(368,74);
                                    pushFollow(FOLLOW_ws_in_importItem465);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(28);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(29);}

                    dbg.location(368,80);
                    pushFollow(FOLLOW_resourceIdentifier_in_importItem470);
                    resourceIdentifier();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(368,99);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:99: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    int alt31=2;
                    try { dbg.enterSubRule(31);
                    try { dbg.enterDecision(31, decisionCanBacktrack[31]);

                    try {
                        isCyclicDecision = true;
                        alt31 = dfa31.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(31);}

                    switch (alt31) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:100: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
                            {
                            dbg.location(368,122);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:122: ( ws )?
                            int alt30=2;
                            try { dbg.enterSubRule(30);
                            try { dbg.enterDecision(30, decisionCanBacktrack[30]);

                            int LA30_0 = input.LA(1);

                            if ( ((LA30_0>=WS && LA30_0<=COMMENT)) ) {
                                alt30=1;
                            }
                            } finally {dbg.exitDecision(30);}

                            switch (alt30) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:122: ws
                                    {
                                    dbg.location(368,122);
                                    pushFollow(FOLLOW_ws_in_importItem480);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(30);}

                            dbg.location(368,126);
                            pushFollow(FOLLOW_mediaQueryList_in_importItem483);
                            mediaQueryList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(31);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(369, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "importItem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "importItem"


    // $ANTLR start "media"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:370:1: media : MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE ;
    public final void media() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "media");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(370, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:371:5: ( MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:371:7: MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE
            {
            dbg.location(371,7);
            match(input,MEDIA_SYM,FOLLOW_MEDIA_SYM_in_media501); if (state.failed) return ;
            dbg.location(371,17);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:371:17: ( ws )?
            int alt33=2;
            try { dbg.enterSubRule(33);
            try { dbg.enterDecision(33, decisionCanBacktrack[33]);

            int LA33_0 = input.LA(1);

            if ( ((LA33_0>=WS && LA33_0<=COMMENT)) ) {
                alt33=1;
            }
            } finally {dbg.exitDecision(33);}

            switch (alt33) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:371:17: ws
                    {
                    dbg.location(371,17);
                    pushFollow(FOLLOW_ws_in_media503);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(33);}

            dbg.location(372,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:5: ( mediaQueryList )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:10: mediaQueryList
            {
            dbg.location(373,10);
            pushFollow(FOLLOW_mediaQueryList_in_media521);
            mediaQueryList();

            state._fsp--;
            if (state.failed) return ;

            }

            dbg.location(374,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:374:7: ( ws )?
            int alt34=2;
            try { dbg.enterSubRule(34);
            try { dbg.enterDecision(34, decisionCanBacktrack[34]);

            int LA34_0 = input.LA(1);

            if ( ((LA34_0>=WS && LA34_0<=COMMENT)) ) {
                alt34=1;
            }
            } finally {dbg.exitDecision(34);}

            switch (alt34) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:374:7: ws
                    {
                    dbg.location(374,7);
                    pushFollow(FOLLOW_ws_in_media529);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(34);}

            dbg.location(375,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_media536); if (state.failed) return ;
            dbg.location(375,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:375:12: ( ws )?
            int alt35=2;
            try { dbg.enterSubRule(35);
            try { dbg.enterDecision(35, decisionCanBacktrack[35]);

            int LA35_0 = input.LA(1);

            if ( ((LA35_0>=WS && LA35_0<=COMMENT)) ) {
                alt35=1;
            }
            } finally {dbg.exitDecision(35);}

            switch (alt35) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:375:12: ws
                    {
                    dbg.location(375,12);
                    pushFollow(FOLLOW_ws_in_media538);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(35);}

            dbg.location(375,16);
            pushFollow(FOLLOW_syncToFollow_in_media541);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(376,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:376:9: ( mediaBody )?
            int alt36=2;
            try { dbg.enterSubRule(36);
            try { dbg.enterDecision(36, decisionCanBacktrack[36]);

            int LA36_0 = input.LA(1);

            if ( ((LA36_0>=NAMESPACE_SYM && LA36_0<=IDENT)||(LA36_0>=CHARSET_SYM && LA36_0<=COMMA)||LA36_0==MEDIA_SYM||(LA36_0>=GEN && LA36_0<=MOZ_DOCUMENT_SYM)||LA36_0==WEBKIT_KEYFRAMES_SYM||(LA36_0>=PAGE_SYM && LA36_0<=RIGHTBOTTOM_SYM)||(LA36_0>=MINUS && LA36_0<=PIPE)||LA36_0==LESS_AND||(LA36_0>=RBRACKET && LA36_0<=SASS_VAR)||(LA36_0>=SASS_CONTENT && LA36_0<=SASS_WHILE)||LA36_0==AT_SIGN) ) {
                alt36=1;
            }
            } finally {dbg.exitDecision(36);}

            switch (alt36) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:376:9: mediaBody
                    {
                    dbg.location(376,9);
                    pushFollow(FOLLOW_mediaBody_in_media551);
                    mediaBody();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(36);}

            dbg.location(377,5);
            match(input,RBRACE,FOLLOW_RBRACE_in_media558); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(378, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "media");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "media"


    // $ANTLR start "mediaBody"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:380:1: mediaBody : ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
    public final void mediaBody() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaBody");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(380, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:5: ( ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:382:5: ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            {
            dbg.location(382,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:382:5: ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            int cnt41=0;
            try { dbg.enterSubRule(41);

            loop41:
            do {
                int alt41=3;
                try { dbg.enterDecision(41, decisionCanBacktrack[41]);

                int LA41_0 = input.LA(1);

                if ( (LA41_0==NAMESPACE_SYM||LA41_0==IDENT||(LA41_0>=CHARSET_SYM && LA41_0<=COMMA)||LA41_0==MEDIA_SYM||(LA41_0>=GEN && LA41_0<=MOZ_DOCUMENT_SYM)||LA41_0==WEBKIT_KEYFRAMES_SYM||(LA41_0>=PAGE_SYM && LA41_0<=RIGHTBOTTOM_SYM)||(LA41_0>=MINUS && LA41_0<=PIPE)||LA41_0==LESS_AND||(LA41_0>=RBRACKET && LA41_0<=SASS_VAR)||(LA41_0>=SASS_CONTENT && LA41_0<=SASS_WHILE)||LA41_0==AT_SIGN) ) {
                    alt41=1;
                }
                else if ( (LA41_0==SEMI) ) {
                    alt41=2;
                }


                } finally {dbg.exitDecision(41);}

                switch (alt41) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:10: ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    {
            	    dbg.location(383,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:10: ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:12: mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
            	    {
            	    dbg.location(383,12);
            	    pushFollow(FOLLOW_mediaBodyItem_in_mediaBody592);
            	    mediaBodyItem();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(383,26);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:26: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
            	    int alt38=2;
            	    try { dbg.enterSubRule(38);
            	    try { dbg.enterDecision(38, decisionCanBacktrack[38]);

            	    try {
            	        isCyclicDecision = true;
            	        alt38 = dfa38.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(38);}

            	    switch (alt38) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:27: ( ( ws )? SEMI )=> ( ws )? SEMI
            	            {
            	            dbg.location(383,39);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:39: ( ws )?
            	            int alt37=2;
            	            try { dbg.enterSubRule(37);
            	            try { dbg.enterDecision(37, decisionCanBacktrack[37]);

            	            int LA37_0 = input.LA(1);

            	            if ( ((LA37_0>=WS && LA37_0<=COMMENT)) ) {
            	                alt37=1;
            	            }
            	            } finally {dbg.exitDecision(37);}

            	            switch (alt37) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:39: ws
            	                    {
            	                    dbg.location(383,39);
            	                    pushFollow(FOLLOW_ws_in_mediaBody602);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(37);}

            	            dbg.location(383,43);
            	            match(input,SEMI,FOLLOW_SEMI_in_mediaBody605); if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(38);}

            	    dbg.location(383,50);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:50: ( ws )?
            	    int alt39=2;
            	    try { dbg.enterSubRule(39);
            	    try { dbg.enterDecision(39, decisionCanBacktrack[39]);

            	    int LA39_0 = input.LA(1);

            	    if ( ((LA39_0>=WS && LA39_0<=COMMENT)) ) {
            	        alt39=1;
            	    }
            	    } finally {dbg.exitDecision(39);}

            	    switch (alt39) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:50: ws
            	            {
            	            dbg.location(383,50);
            	            pushFollow(FOLLOW_ws_in_mediaBody609);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(39);}


            	    }


            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:10: ( SEMI ( ws )? )
            	    {
            	    dbg.location(385,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:10: ( SEMI ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:12: SEMI ( ws )?
            	    {
            	    dbg.location(385,12);
            	    match(input,SEMI,FOLLOW_SEMI_in_mediaBody636); if (state.failed) return ;
            	    dbg.location(385,17);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:17: ( ws )?
            	    int alt40=2;
            	    try { dbg.enterSubRule(40);
            	    try { dbg.enterDecision(40, decisionCanBacktrack[40]);

            	    int LA40_0 = input.LA(1);

            	    if ( ((LA40_0>=WS && LA40_0<=COMMENT)) ) {
            	        alt40=1;
            	    }
            	    } finally {dbg.exitDecision(40);}

            	    switch (alt40) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:17: ws
            	            {
            	            dbg.location(385,17);
            	            pushFollow(FOLLOW_ws_in_mediaBody638);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(40);}


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt41 >= 1 ) break loop41;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(41, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt41++;
            } while (true);
            } finally {dbg.exitSubRule(41);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(387, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaBody");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaBody"


    // $ANTLR start "mediaBodyItem"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:1: mediaBodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | {...}? sass_extend | {...}? sass_debug | {...}? sass_control | {...}? sass_content | {...}? importItem | rule | page | fontFace | vendorAtRule | media );
    public final void mediaBodyItem() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaBodyItem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(389, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:390:5: ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | {...}? sass_extend | {...}? sass_debug | {...}? sass_control | {...}? sass_content | {...}? importItem | rule | page | fontFace | vendorAtRule | media )
            int alt46=15;
            try { dbg.enterDecision(46, decisionCanBacktrack[46]);

            try {
                isCyclicDecision = true;
                alt46 = dfa46.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(46);}

            switch (alt46) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:5: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration
                    {
                    dbg.location(391,85);
                    pushFollow(FOLLOW_cp_mixin_declaration_in_mediaBodyItem704);
                    cp_mixin_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:7: ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
                    {
                    dbg.location(393,55);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isLessSource()");
                    }
                    dbg.location(393,73);
                    pushFollow(FOLLOW_cp_mixin_call_in_mediaBodyItem737);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(393,87);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:87: ( ( ws )? IMPORTANT_SYM )?
                    int alt43=2;
                    try { dbg.enterSubRule(43);
                    try { dbg.enterDecision(43, decisionCanBacktrack[43]);

                    try {
                        isCyclicDecision = true;
                        alt43 = dfa43.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(43);}

                    switch (alt43) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:88: ( ws )? IMPORTANT_SYM
                            {
                            dbg.location(393,88);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:88: ( ws )?
                            int alt42=2;
                            try { dbg.enterSubRule(42);
                            try { dbg.enterDecision(42, decisionCanBacktrack[42]);

                            int LA42_0 = input.LA(1);

                            if ( ((LA42_0>=WS && LA42_0<=COMMENT)) ) {
                                alt42=1;
                            }
                            } finally {dbg.exitDecision(42);}

                            switch (alt42) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:88: ws
                                    {
                                    dbg.location(393,88);
                                    pushFollow(FOLLOW_ws_in_mediaBodyItem740);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(42);}

                            dbg.location(393,92);
                            match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_mediaBodyItem743); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(43);}


                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:7: ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
                    {
                    dbg.location(394,25);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(394,43);
                    pushFollow(FOLLOW_cp_mixin_call_in_mediaBodyItem760);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(394,57);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:57: ( ( ws )? IMPORTANT_SYM )?
                    int alt45=2;
                    try { dbg.enterSubRule(45);
                    try { dbg.enterDecision(45, decisionCanBacktrack[45]);

                    try {
                        isCyclicDecision = true;
                        alt45 = dfa45.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(45);}

                    switch (alt45) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:58: ( ws )? IMPORTANT_SYM
                            {
                            dbg.location(394,58);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:58: ( ws )?
                            int alt44=2;
                            try { dbg.enterSubRule(44);
                            try { dbg.enterDecision(44, decisionCanBacktrack[44]);

                            int LA44_0 = input.LA(1);

                            if ( ((LA44_0>=WS && LA44_0<=COMMENT)) ) {
                                alt44=1;
                            }
                            } finally {dbg.exitDecision(44);}

                            switch (alt44) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:58: ws
                                    {
                                    dbg.location(394,58);
                                    pushFollow(FOLLOW_ws_in_mediaBodyItem763);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(44);}

                            dbg.location(394,62);
                            match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_mediaBodyItem766); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(45);}


                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:6: ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration
                    {
                    dbg.location(395,74);
                    pushFollow(FOLLOW_propertyDeclaration_in_mediaBodyItem805);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:396:6: ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration
                    {
                    dbg.location(396,87);
                    pushFollow(FOLLOW_propertyDeclaration_in_mediaBodyItem832);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:397:7: {...}? sass_extend
                    {
                    dbg.location(397,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(397,25);
                    pushFollow(FOLLOW_sass_extend_in_mediaBodyItem842);
                    sass_extend();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:398:7: {...}? sass_debug
                    {
                    dbg.location(398,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(398,25);
                    pushFollow(FOLLOW_sass_debug_in_mediaBodyItem852);
                    sass_debug();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:399:7: {...}? sass_control
                    {
                    dbg.location(399,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(399,25);
                    pushFollow(FOLLOW_sass_control_in_mediaBodyItem862);
                    sass_control();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:400:7: {...}? sass_content
                    {
                    dbg.location(400,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(400,25);
                    pushFollow(FOLLOW_sass_content_in_mediaBodyItem872);
                    sass_content();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:401:7: {...}? importItem
                    {
                    dbg.location(401,7);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isCssPreprocessorSource()");
                    }
                    dbg.location(401,36);
                    pushFollow(FOLLOW_importItem_in_mediaBodyItem882);
                    importItem();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:7: rule
                    {
                    dbg.location(402,7);
                    pushFollow(FOLLOW_rule_in_mediaBodyItem890);
                    rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:403:7: page
                    {
                    dbg.location(403,7);
                    pushFollow(FOLLOW_page_in_mediaBodyItem898);
                    page();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:404:7: fontFace
                    {
                    dbg.location(404,7);
                    pushFollow(FOLLOW_fontFace_in_mediaBodyItem906);
                    fontFace();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:405:7: vendorAtRule
                    {
                    dbg.location(405,7);
                    pushFollow(FOLLOW_vendorAtRule_in_mediaBodyItem914);
                    vendorAtRule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:407:7: media
                    {
                    dbg.location(407,7);
                    pushFollow(FOLLOW_media_in_mediaBodyItem927);
                    media();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(408, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaBodyItem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaBodyItem"


    // $ANTLR start "mediaQueryList"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:1: mediaQueryList : mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )* ;
    public final void mediaQueryList() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaQueryList");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(410, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:2: ( mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:4: mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*
            {
            dbg.location(411,4);
            pushFollow(FOLLOW_mediaQuery_in_mediaQueryList941);
            mediaQuery();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(411,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:15: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*
            try { dbg.enterSubRule(49);

            loop49:
            do {
                int alt49=2;
                try { dbg.enterDecision(49, decisionCanBacktrack[49]);

                try {
                    isCyclicDecision = true;
                    alt49 = dfa49.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(49);}

                switch (alt49) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:17: ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery
            	    {
            	    dbg.location(411,31);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:31: ( ws )?
            	    int alt47=2;
            	    try { dbg.enterSubRule(47);
            	    try { dbg.enterDecision(47, decisionCanBacktrack[47]);

            	    int LA47_0 = input.LA(1);

            	    if ( ((LA47_0>=WS && LA47_0<=COMMENT)) ) {
            	        alt47=1;
            	    }
            	    } finally {dbg.exitDecision(47);}

            	    switch (alt47) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:31: ws
            	            {
            	            dbg.location(411,31);
            	            pushFollow(FOLLOW_ws_in_mediaQueryList953);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(47);}

            	    dbg.location(411,35);
            	    match(input,COMMA,FOLLOW_COMMA_in_mediaQueryList956); if (state.failed) return ;
            	    dbg.location(411,41);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:41: ( ws )?
            	    int alt48=2;
            	    try { dbg.enterSubRule(48);
            	    try { dbg.enterDecision(48, decisionCanBacktrack[48]);

            	    int LA48_0 = input.LA(1);

            	    if ( ((LA48_0>=WS && LA48_0<=COMMENT)) ) {
            	        alt48=1;
            	    }
            	    } finally {dbg.exitDecision(48);}

            	    switch (alt48) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:41: ws
            	            {
            	            dbg.location(411,41);
            	            pushFollow(FOLLOW_ws_in_mediaQueryList958);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(48);}

            	    dbg.location(411,45);
            	    pushFollow(FOLLOW_mediaQuery_in_mediaQueryList961);
            	    mediaQuery();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);
            } finally {dbg.exitSubRule(49);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(412, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaQueryList");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaQueryList"


    // $ANTLR start "mediaQuery"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:1: mediaQuery : ( ( mediaQueryOperator ( ws )? )? mediaType ( ( ws )? AND ( ws )? mediaExpression )* | mediaExpression ( ( ws )? AND ( ws )? mediaExpression )* | {...}? cp_variable );
    public final void mediaQuery() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaQuery");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(414, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:415:2: ( ( mediaQueryOperator ( ws )? )? mediaType ( ( ws )? AND ( ws )? mediaExpression )* | mediaExpression ( ( ws )? AND ( ws )? mediaExpression )* | {...}? cp_variable )
            int alt58=3;
            try { dbg.enterDecision(58, decisionCanBacktrack[58]);

            switch ( input.LA(1) ) {
            case IDENT:
            case ONLY:
            case NOT:
            case GEN:
            case HASH_SYMBOL:
                {
                alt58=1;
                }
                break;
            case LPAREN:
                {
                alt58=2;
                }
                break;
            case NAMESPACE_SYM:
            case CHARSET_SYM:
            case IMPORT_SYM:
            case MEDIA_SYM:
            case AT_IDENT:
            case MOZ_DOCUMENT_SYM:
            case WEBKIT_KEYFRAMES_SYM:
            case PAGE_SYM:
            case COUNTER_STYLE_SYM:
            case FONT_FACE_SYM:
            case TOPLEFTCORNER_SYM:
            case TOPLEFT_SYM:
            case TOPCENTER_SYM:
            case TOPRIGHT_SYM:
            case TOPRIGHTCORNER_SYM:
            case BOTTOMLEFTCORNER_SYM:
            case BOTTOMLEFT_SYM:
            case BOTTOMCENTER_SYM:
            case BOTTOMRIGHT_SYM:
            case BOTTOMRIGHTCORNER_SYM:
            case LEFTTOP_SYM:
            case LEFTMIDDLE_SYM:
            case LEFTBOTTOM_SYM:
            case RIGHTTOP_SYM:
            case RIGHTMIDDLE_SYM:
            case RIGHTBOTTOM_SYM:
            case SASS_VAR:
            case SASS_CONTENT:
            case SASS_MIXIN:
            case SASS_INCLUDE:
            case SASS_EXTEND:
            case SASS_DEBUG:
            case SASS_WARN:
            case SASS_IF:
            case SASS_ELSE:
            case SASS_FOR:
            case SASS_FUNCTION:
            case SASS_RETURN:
            case SASS_EACH:
            case SASS_WHILE:
                {
                alt58=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(58);}

            switch (alt58) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:5: ( mediaQueryOperator ( ws )? )? mediaType ( ( ws )? AND ( ws )? mediaExpression )*
                    {
                    dbg.location(416,5);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:5: ( mediaQueryOperator ( ws )? )?
                    int alt51=2;
                    try { dbg.enterSubRule(51);
                    try { dbg.enterDecision(51, decisionCanBacktrack[51]);

                    int LA51_0 = input.LA(1);

                    if ( ((LA51_0>=ONLY && LA51_0<=NOT)) ) {
                        alt51=1;
                    }
                    } finally {dbg.exitDecision(51);}

                    switch (alt51) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:6: mediaQueryOperator ( ws )?
                            {
                            dbg.location(416,6);
                            pushFollow(FOLLOW_mediaQueryOperator_in_mediaQuery980);
                            mediaQueryOperator();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(416,25);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:25: ( ws )?
                            int alt50=2;
                            try { dbg.enterSubRule(50);
                            try { dbg.enterDecision(50, decisionCanBacktrack[50]);

                            int LA50_0 = input.LA(1);

                            if ( ((LA50_0>=WS && LA50_0<=COMMENT)) ) {
                                alt50=1;
                            }
                            } finally {dbg.exitDecision(50);}

                            switch (alt50) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:25: ws
                                    {
                                    dbg.location(416,25);
                                    pushFollow(FOLLOW_ws_in_mediaQuery982);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(50);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(51);}

                    dbg.location(416,33);
                    pushFollow(FOLLOW_mediaType_in_mediaQuery989);
                    mediaType();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(416,43);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:43: ( ( ws )? AND ( ws )? mediaExpression )*
                    try { dbg.enterSubRule(54);

                    loop54:
                    do {
                        int alt54=2;
                        try { dbg.enterDecision(54, decisionCanBacktrack[54]);

                        try {
                            isCyclicDecision = true;
                            alt54 = dfa54.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(54);}

                        switch (alt54) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:45: ( ws )? AND ( ws )? mediaExpression
                    	    {
                    	    dbg.location(416,45);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:45: ( ws )?
                    	    int alt52=2;
                    	    try { dbg.enterSubRule(52);
                    	    try { dbg.enterDecision(52, decisionCanBacktrack[52]);

                    	    int LA52_0 = input.LA(1);

                    	    if ( ((LA52_0>=WS && LA52_0<=COMMENT)) ) {
                    	        alt52=1;
                    	    }
                    	    } finally {dbg.exitDecision(52);}

                    	    switch (alt52) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:45: ws
                    	            {
                    	            dbg.location(416,45);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery993);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(52);}

                    	    dbg.location(416,49);
                    	    match(input,AND,FOLLOW_AND_in_mediaQuery996); if (state.failed) return ;
                    	    dbg.location(416,53);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:53: ( ws )?
                    	    int alt53=2;
                    	    try { dbg.enterSubRule(53);
                    	    try { dbg.enterDecision(53, decisionCanBacktrack[53]);

                    	    int LA53_0 = input.LA(1);

                    	    if ( ((LA53_0>=WS && LA53_0<=COMMENT)) ) {
                    	        alt53=1;
                    	    }
                    	    } finally {dbg.exitDecision(53);}

                    	    switch (alt53) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:53: ws
                    	            {
                    	            dbg.location(416,53);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery998);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(53);}

                    	    dbg.location(416,57);
                    	    pushFollow(FOLLOW_mediaExpression_in_mediaQuery1001);
                    	    mediaExpression();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop54;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(54);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:7: mediaExpression ( ( ws )? AND ( ws )? mediaExpression )*
                    {
                    dbg.location(417,7);
                    pushFollow(FOLLOW_mediaExpression_in_mediaQuery1012);
                    mediaExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(417,23);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:23: ( ( ws )? AND ( ws )? mediaExpression )*
                    try { dbg.enterSubRule(57);

                    loop57:
                    do {
                        int alt57=2;
                        try { dbg.enterDecision(57, decisionCanBacktrack[57]);

                        try {
                            isCyclicDecision = true;
                            alt57 = dfa57.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(57);}

                        switch (alt57) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:25: ( ws )? AND ( ws )? mediaExpression
                    	    {
                    	    dbg.location(417,25);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:25: ( ws )?
                    	    int alt55=2;
                    	    try { dbg.enterSubRule(55);
                    	    try { dbg.enterDecision(55, decisionCanBacktrack[55]);

                    	    int LA55_0 = input.LA(1);

                    	    if ( ((LA55_0>=WS && LA55_0<=COMMENT)) ) {
                    	        alt55=1;
                    	    }
                    	    } finally {dbg.exitDecision(55);}

                    	    switch (alt55) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:25: ws
                    	            {
                    	            dbg.location(417,25);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery1016);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(55);}

                    	    dbg.location(417,29);
                    	    match(input,AND,FOLLOW_AND_in_mediaQuery1019); if (state.failed) return ;
                    	    dbg.location(417,33);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:33: ( ws )?
                    	    int alt56=2;
                    	    try { dbg.enterSubRule(56);
                    	    try { dbg.enterDecision(56, decisionCanBacktrack[56]);

                    	    int LA56_0 = input.LA(1);

                    	    if ( ((LA56_0>=WS && LA56_0<=COMMENT)) ) {
                    	        alt56=1;
                    	    }
                    	    } finally {dbg.exitDecision(56);}

                    	    switch (alt56) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:33: ws
                    	            {
                    	            dbg.location(417,33);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery1021);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(56);}

                    	    dbg.location(417,37);
                    	    pushFollow(FOLLOW_mediaExpression_in_mediaQuery1024);
                    	    mediaExpression();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop57;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(57);}


                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:418:7: {...}? cp_variable
                    {
                    dbg.location(418,7);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaQuery", "isLessSource()");
                    }
                    dbg.location(418,25);
                    pushFollow(FOLLOW_cp_variable_in_mediaQuery1037);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(419, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaQuery");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaQuery"


    // $ANTLR start "mediaQueryOperator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:1: mediaQueryOperator : ( ONLY | NOT );
    public final void mediaQueryOperator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaQueryOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(421, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:3: ( ONLY | NOT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(422,3);
            if ( (input.LA(1)>=ONLY && input.LA(1)<=NOT) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(423, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaQueryOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaQueryOperator"


    // $ANTLR start "mediaType"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:425:1: mediaType : ( IDENT | GEN | {...}? sass_interpolation_expression_var );
    public final void mediaType() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaType");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(425, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:2: ( IDENT | GEN | {...}? sass_interpolation_expression_var )
            int alt59=3;
            try { dbg.enterDecision(59, decisionCanBacktrack[59]);

            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt59=1;
                }
                break;
            case GEN:
                {
                alt59=2;
                }
                break;
            case HASH_SYMBOL:
                {
                alt59=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(59);}

            switch (alt59) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:4: IDENT
                    {
                    dbg.location(426,4);
                    match(input,IDENT,FOLLOW_IDENT_in_mediaType1065); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:12: GEN
                    {
                    dbg.location(426,12);
                    match(input,GEN,FOLLOW_GEN_in_mediaType1069); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:18: {...}? sass_interpolation_expression_var
                    {
                    dbg.location(426,18);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaType", "isCssPreprocessorSource()");
                    }
                    dbg.location(426,47);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaType1075);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(427, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaType");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaType"


    // $ANTLR start "mediaExpression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:429:1: mediaExpression : LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN ;
    public final void mediaExpression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(429, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:430:5: ( LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:5: LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN
            {
            dbg.location(431,5);
            match(input,LPAREN,FOLLOW_LPAREN_in_mediaExpression1093); if (state.failed) return ;
            dbg.location(431,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:12: ( ws )?
            int alt60=2;
            try { dbg.enterSubRule(60);
            try { dbg.enterDecision(60, decisionCanBacktrack[60]);

            int LA60_0 = input.LA(1);

            if ( ((LA60_0>=WS && LA60_0<=COMMENT)) ) {
                alt60=1;
            }
            } finally {dbg.exitDecision(60);}

            switch (alt60) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:12: ws
                    {
                    dbg.location(431,12);
                    pushFollow(FOLLOW_ws_in_mediaExpression1095);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(60);}

            dbg.location(431,16);
            pushFollow(FOLLOW_mediaFeature_in_mediaExpression1098);
            mediaFeature();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(431,29);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:29: ( mediaFeatureValue )?
            int alt61=2;
            try { dbg.enterSubRule(61);
            try { dbg.enterDecision(61, decisionCanBacktrack[61]);

            try {
                isCyclicDecision = true;
                alt61 = dfa61.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(61);}

            switch (alt61) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:29: mediaFeatureValue
                    {
                    dbg.location(431,29);
                    pushFollow(FOLLOW_mediaFeatureValue_in_mediaExpression1100);
                    mediaFeatureValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(61);}

            dbg.location(431,48);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:48: ( ws )?
            int alt62=2;
            try { dbg.enterSubRule(62);
            try { dbg.enterDecision(62, decisionCanBacktrack[62]);

            int LA62_0 = input.LA(1);

            if ( ((LA62_0>=WS && LA62_0<=COMMENT)) ) {
                alt62=1;
            }
            } finally {dbg.exitDecision(62);}

            switch (alt62) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:48: ws
                    {
                    dbg.location(431,48);
                    pushFollow(FOLLOW_ws_in_mediaExpression1103);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(62);}

            dbg.location(431,52);
            match(input,RPAREN,FOLLOW_RPAREN_in_mediaExpression1106); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(432, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaExpression"


    // $ANTLR start "mediaFeatureValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:434:1: mediaFeatureValue : ( ws )? COLON ( ws )? ({...}? cp_expression | expression ) ;
    public final void mediaFeatureValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaFeatureValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(434, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:435:5: ( ( ws )? COLON ( ws )? ({...}? cp_expression | expression ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:436:5: ( ws )? COLON ( ws )? ({...}? cp_expression | expression )
            {
            dbg.location(436,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:436:5: ( ws )?
            int alt63=2;
            try { dbg.enterSubRule(63);
            try { dbg.enterDecision(63, decisionCanBacktrack[63]);

            int LA63_0 = input.LA(1);

            if ( ((LA63_0>=WS && LA63_0<=COMMENT)) ) {
                alt63=1;
            }
            } finally {dbg.exitDecision(63);}

            switch (alt63) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:436:5: ws
                    {
                    dbg.location(436,5);
                    pushFollow(FOLLOW_ws_in_mediaFeatureValue1127);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(63);}

            dbg.location(436,9);
            match(input,COLON,FOLLOW_COLON_in_mediaFeatureValue1130); if (state.failed) return ;
            dbg.location(436,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:436:15: ( ws )?
            int alt64=2;
            try { dbg.enterSubRule(64);
            try { dbg.enterDecision(64, decisionCanBacktrack[64]);

            int LA64_0 = input.LA(1);

            if ( ((LA64_0>=WS && LA64_0<=COMMENT)) ) {
                alt64=1;
            }
            } finally {dbg.exitDecision(64);}

            switch (alt64) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:436:15: ws
                    {
                    dbg.location(436,15);
                    pushFollow(FOLLOW_ws_in_mediaFeatureValue1132);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(64);}

            dbg.location(437,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:437:5: ({...}? cp_expression | expression )
            int alt65=2;
            try { dbg.enterSubRule(65);
            try { dbg.enterDecision(65, decisionCanBacktrack[65]);

            try {
                isCyclicDecision = true;
                alt65 = dfa65.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(65);}

            switch (alt65) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:9: {...}? cp_expression
                    {
                    dbg.location(438,9);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaFeatureValue", "isCssPreprocessorSource()");
                    }
                    dbg.location(438,38);
                    pushFollow(FOLLOW_cp_expression_in_mediaFeatureValue1151);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:440:9: expression
                    {
                    dbg.location(440,9);
                    pushFollow(FOLLOW_expression_in_mediaFeatureValue1171);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(65);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(442, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaFeatureValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaFeatureValue"


    // $ANTLR start "mediaFeature"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:1: mediaFeature : ( IDENT | GEN | {...}? ( cp_variable | sass_interpolation_expression_var ) );
    public final void mediaFeature() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaFeature");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(444, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:2: ( IDENT | GEN | {...}? ( cp_variable | sass_interpolation_expression_var ) )
            int alt67=3;
            try { dbg.enterDecision(67, decisionCanBacktrack[67]);

            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt67=1;
                }
                break;
            case GEN:
                {
                alt67=2;
                }
                break;
            case NAMESPACE_SYM:
            case CHARSET_SYM:
            case IMPORT_SYM:
            case MEDIA_SYM:
            case AT_IDENT:
            case MOZ_DOCUMENT_SYM:
            case WEBKIT_KEYFRAMES_SYM:
            case PAGE_SYM:
            case COUNTER_STYLE_SYM:
            case FONT_FACE_SYM:
            case TOPLEFTCORNER_SYM:
            case TOPLEFT_SYM:
            case TOPCENTER_SYM:
            case TOPRIGHT_SYM:
            case TOPRIGHTCORNER_SYM:
            case BOTTOMLEFTCORNER_SYM:
            case BOTTOMLEFT_SYM:
            case BOTTOMCENTER_SYM:
            case BOTTOMRIGHT_SYM:
            case BOTTOMRIGHTCORNER_SYM:
            case LEFTTOP_SYM:
            case LEFTMIDDLE_SYM:
            case LEFTBOTTOM_SYM:
            case RIGHTTOP_SYM:
            case RIGHTMIDDLE_SYM:
            case RIGHTBOTTOM_SYM:
            case HASH_SYMBOL:
            case SASS_VAR:
            case SASS_CONTENT:
            case SASS_MIXIN:
            case SASS_INCLUDE:
            case SASS_EXTEND:
            case SASS_DEBUG:
            case SASS_WARN:
            case SASS_IF:
            case SASS_ELSE:
            case SASS_FOR:
            case SASS_FUNCTION:
            case SASS_RETURN:
            case SASS_EACH:
            case SASS_WHILE:
                {
                alt67=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(67);}

            switch (alt67) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:4: IDENT
                    {
                    dbg.location(445,4);
                    match(input,IDENT,FOLLOW_IDENT_in_mediaFeature1191); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:12: GEN
                    {
                    dbg.location(445,12);
                    match(input,GEN,FOLLOW_GEN_in_mediaFeature1195); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:18: {...}? ( cp_variable | sass_interpolation_expression_var )
                    {
                    dbg.location(445,18);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaFeature", "isCssPreprocessorSource()");
                    }
                    dbg.location(445,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:47: ( cp_variable | sass_interpolation_expression_var )
                    int alt66=2;
                    try { dbg.enterSubRule(66);
                    try { dbg.enterDecision(66, decisionCanBacktrack[66]);

                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==NAMESPACE_SYM||(LA66_0>=CHARSET_SYM && LA66_0<=IMPORT_SYM)||LA66_0==MEDIA_SYM||(LA66_0>=AT_IDENT && LA66_0<=MOZ_DOCUMENT_SYM)||LA66_0==WEBKIT_KEYFRAMES_SYM||(LA66_0>=PAGE_SYM && LA66_0<=RIGHTBOTTOM_SYM)||LA66_0==SASS_VAR||(LA66_0>=SASS_CONTENT && LA66_0<=SASS_WHILE)) ) {
                        alt66=1;
                    }
                    else if ( (LA66_0==HASH_SYMBOL) ) {
                        alt66=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 66, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(66);}

                    switch (alt66) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:49: cp_variable
                            {
                            dbg.location(445,49);
                            pushFollow(FOLLOW_cp_variable_in_mediaFeature1203);
                            cp_variable();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:63: sass_interpolation_expression_var
                            {
                            dbg.location(445,63);
                            pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaFeature1207);
                            sass_interpolation_expression_var();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(66);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(446, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaFeature");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaFeature"


    // $ANTLR start "body"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:2: body : ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
    public final void body() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "body");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(448, 2);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:449:5: ( ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:450:5: ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            {
            dbg.location(450,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:450:5: ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            int cnt72=0;
            try { dbg.enterSubRule(72);

            loop72:
            do {
                int alt72=3;
                try { dbg.enterDecision(72, decisionCanBacktrack[72]);

                int LA72_0 = input.LA(1);

                if ( (LA72_0==NAMESPACE_SYM||LA72_0==IDENT||(LA72_0>=CHARSET_SYM && LA72_0<=COMMA)||LA72_0==MEDIA_SYM||(LA72_0>=GEN && LA72_0<=MOZ_DOCUMENT_SYM)||LA72_0==WEBKIT_KEYFRAMES_SYM||(LA72_0>=PAGE_SYM && LA72_0<=RIGHTBOTTOM_SYM)||(LA72_0>=MINUS && LA72_0<=PIPE)||LA72_0==LESS_AND||(LA72_0>=RBRACKET && LA72_0<=SASS_VAR)||(LA72_0>=SASS_CONTENT && LA72_0<=SASS_WHILE)||LA72_0==AT_SIGN) ) {
                    alt72=1;
                }
                else if ( (LA72_0==SEMI) ) {
                    alt72=2;
                }


                } finally {dbg.exitDecision(72);}

                switch (alt72) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:10: ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    {
            	    dbg.location(451,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:10: ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:12: bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
            	    {
            	    dbg.location(451,12);
            	    pushFollow(FOLLOW_bodyItem_in_body1241);
            	    bodyItem();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(451,21);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:21: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
            	    int alt69=2;
            	    try { dbg.enterSubRule(69);
            	    try { dbg.enterDecision(69, decisionCanBacktrack[69]);

            	    try {
            	        isCyclicDecision = true;
            	        alt69 = dfa69.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(69);}

            	    switch (alt69) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:22: ( ( ws )? SEMI )=> ( ws )? SEMI
            	            {
            	            dbg.location(451,34);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:34: ( ws )?
            	            int alt68=2;
            	            try { dbg.enterSubRule(68);
            	            try { dbg.enterDecision(68, decisionCanBacktrack[68]);

            	            int LA68_0 = input.LA(1);

            	            if ( ((LA68_0>=WS && LA68_0<=COMMENT)) ) {
            	                alt68=1;
            	            }
            	            } finally {dbg.exitDecision(68);}

            	            switch (alt68) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:34: ws
            	                    {
            	                    dbg.location(451,34);
            	                    pushFollow(FOLLOW_ws_in_body1251);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(68);}

            	            dbg.location(451,38);
            	            match(input,SEMI,FOLLOW_SEMI_in_body1254); if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(69);}

            	    dbg.location(451,45);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:45: ( ws )?
            	    int alt70=2;
            	    try { dbg.enterSubRule(70);
            	    try { dbg.enterDecision(70, decisionCanBacktrack[70]);

            	    int LA70_0 = input.LA(1);

            	    if ( ((LA70_0>=WS && LA70_0<=COMMENT)) ) {
            	        alt70=1;
            	    }
            	    } finally {dbg.exitDecision(70);}

            	    switch (alt70) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:45: ws
            	            {
            	            dbg.location(451,45);
            	            pushFollow(FOLLOW_ws_in_body1258);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(70);}


            	    }


            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:10: ( SEMI ( ws )? )
            	    {
            	    dbg.location(453,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:10: ( SEMI ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:12: SEMI ( ws )?
            	    {
            	    dbg.location(453,12);
            	    match(input,SEMI,FOLLOW_SEMI_in_body1285); if (state.failed) return ;
            	    dbg.location(453,17);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:17: ( ws )?
            	    int alt71=2;
            	    try { dbg.enterSubRule(71);
            	    try { dbg.enterDecision(71, decisionCanBacktrack[71]);

            	    int LA71_0 = input.LA(1);

            	    if ( ((LA71_0>=WS && LA71_0<=COMMENT)) ) {
            	        alt71=1;
            	    }
            	    } finally {dbg.exitDecision(71);}

            	    switch (alt71) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:17: ws
            	            {
            	            dbg.location(453,17);
            	            pushFollow(FOLLOW_ws_in_body1287);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(71);}


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt72 >= 1 ) break loop72;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(72, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt72++;
            } while (true);
            } finally {dbg.exitSubRule(72);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(455, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "body");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "body"


    // $ANTLR start "bodyItem"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:457:1: bodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call | ( cp_mixin_call )=>{...}? cp_mixin_call | rule | ( sass_map )=> sass_map | ( cp_variable ( ws )? COLON )=> cp_variable_declaration | at_rule | {...}? importItem | {...}? sass_debug | {...}? sass_control | {...}? sass_function_declaration );
    public final void bodyItem() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "bodyItem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(457, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:458:5: ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call | ( cp_mixin_call )=>{...}? cp_mixin_call | rule | ( sass_map )=> sass_map | ( cp_variable ( ws )? COLON )=> cp_variable_declaration | at_rule | {...}? importItem | {...}? sass_debug | {...}? sass_control | {...}? sass_function_declaration )
            int alt73=11;
            try { dbg.enterDecision(73, decisionCanBacktrack[73]);

            try {
                isCyclicDecision = true;
                alt73 = dfa73.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(73);}

            switch (alt73) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:9: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration
                    {
                    dbg.location(459,96);
                    pushFollow(FOLLOW_cp_mixin_declaration_in_bodyItem1359);
                    cp_mixin_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:461:11: ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call
                    {
                    dbg.location(461,38);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isLessSource()");
                    }
                    dbg.location(461,56);
                    pushFollow(FOLLOW_cp_mixin_call_in_bodyItem1392);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:11: ( cp_mixin_call )=>{...}? cp_mixin_call
                    {
                    dbg.location(462,29);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(462,47);
                    pushFollow(FOLLOW_cp_mixin_call_in_bodyItem1411);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:463:8: rule
                    {
                    dbg.location(463,8);
                    pushFollow(FOLLOW_rule_in_bodyItem1420);
                    rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:464:11: ( sass_map )=> sass_map
                    {
                    dbg.location(464,24);
                    pushFollow(FOLLOW_sass_map_in_bodyItem1437);
                    sass_map();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:465:11: ( cp_variable ( ws )? COLON )=> cp_variable_declaration
                    {
                    dbg.location(465,37);
                    pushFollow(FOLLOW_cp_variable_declaration_in_bodyItem1459);
                    cp_variable_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:466:11: at_rule
                    {
                    dbg.location(466,11);
                    pushFollow(FOLLOW_at_rule_in_bodyItem1471);
                    at_rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:468:11: {...}? importItem
                    {
                    dbg.location(468,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isCssPreprocessorSource()");
                    }
                    dbg.location(468,40);
                    pushFollow(FOLLOW_importItem_in_bodyItem1494);
                    importItem();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:469:11: {...}? sass_debug
                    {
                    dbg.location(469,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(469,29);
                    pushFollow(FOLLOW_sass_debug_in_bodyItem1508);
                    sass_debug();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:470:11: {...}? sass_control
                    {
                    dbg.location(470,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(470,29);
                    pushFollow(FOLLOW_sass_control_in_bodyItem1522);
                    sass_control();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:471:11: {...}? sass_function_declaration
                    {
                    dbg.location(471,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(471,29);
                    pushFollow(FOLLOW_sass_function_declaration_in_bodyItem1536);
                    sass_function_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(NL));
                
        }
        finally {
        }
        dbg.location(472, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bodyItem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "bodyItem"


    // $ANTLR start "at_rule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:477:1: at_rule : ( media | page | counterStyle | fontFace | vendorAtRule );
    public final void at_rule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "at_rule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(477, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:478:5: ( media | page | counterStyle | fontFace | vendorAtRule )
            int alt74=5;
            try { dbg.enterDecision(74, decisionCanBacktrack[74]);

            switch ( input.LA(1) ) {
            case MEDIA_SYM:
                {
                alt74=1;
                }
                break;
            case PAGE_SYM:
                {
                alt74=2;
                }
                break;
            case COUNTER_STYLE_SYM:
                {
                alt74=3;
                }
                break;
            case FONT_FACE_SYM:
                {
                alt74=4;
                }
                break;
            case AT_IDENT:
            case MOZ_DOCUMENT_SYM:
            case WEBKIT_KEYFRAMES_SYM:
                {
                alt74=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(74);}

            switch (alt74) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:479:5: media
                    {
                    dbg.location(479,5);
                    pushFollow(FOLLOW_media_in_at_rule1562);
                    media();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:7: page
                    {
                    dbg.location(480,7);
                    pushFollow(FOLLOW_page_in_at_rule1570);
                    page();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:481:7: counterStyle
                    {
                    dbg.location(481,7);
                    pushFollow(FOLLOW_counterStyle_in_at_rule1578);
                    counterStyle();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:7: fontFace
                    {
                    dbg.location(482,7);
                    pushFollow(FOLLOW_fontFace_in_at_rule1586);
                    fontFace();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:483:7: vendorAtRule
                    {
                    dbg.location(483,7);
                    pushFollow(FOLLOW_vendorAtRule_in_at_rule1594);
                    vendorAtRule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(484, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "at_rule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "at_rule"


    // $ANTLR start "vendorAtRule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:1: vendorAtRule : ( moz_document | webkitKeyframes | generic_at_rule );
    public final void vendorAtRule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "vendorAtRule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(486, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:1: ( moz_document | webkitKeyframes | generic_at_rule )
            int alt75=3;
            try { dbg.enterDecision(75, decisionCanBacktrack[75]);

            switch ( input.LA(1) ) {
            case MOZ_DOCUMENT_SYM:
                {
                alt75=1;
                }
                break;
            case WEBKIT_KEYFRAMES_SYM:
                {
                alt75=2;
                }
                break;
            case AT_IDENT:
                {
                alt75=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(75);}

            switch (alt75) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:3: moz_document
                    {
                    dbg.location(487,3);
                    pushFollow(FOLLOW_moz_document_in_vendorAtRule1607);
                    moz_document();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:18: webkitKeyframes
                    {
                    dbg.location(487,18);
                    pushFollow(FOLLOW_webkitKeyframes_in_vendorAtRule1611);
                    webkitKeyframes();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:36: generic_at_rule
                    {
                    dbg.location(487,36);
                    pushFollow(FOLLOW_generic_at_rule_in_vendorAtRule1615);
                    generic_at_rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(487, 51);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vendorAtRule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "vendorAtRule"


    // $ANTLR start "atRuleId"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:489:1: atRuleId : ( IDENT | STRING );
    public final void atRuleId() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "atRuleId");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(489, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:490:2: ( IDENT | STRING )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(490,2);
            if ( (input.LA(1)>=IDENT && input.LA(1)<=STRING) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(492, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "atRuleId");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "atRuleId"


    // $ANTLR start "generic_at_rule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:1: generic_at_rule : AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE ;
    public final void generic_at_rule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "generic_at_rule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(494, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:495:5: ( AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:495:7: AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE
            {
            dbg.location(495,7);
            match(input,AT_IDENT,FOLLOW_AT_IDENT_in_generic_at_rule1643); if (state.failed) return ;
            dbg.location(495,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:495:16: ( ws )?
            int alt76=2;
            try { dbg.enterSubRule(76);
            try { dbg.enterDecision(76, decisionCanBacktrack[76]);

            int LA76_0 = input.LA(1);

            if ( ((LA76_0>=WS && LA76_0<=COMMENT)) ) {
                alt76=1;
            }
            } finally {dbg.exitDecision(76);}

            switch (alt76) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:495:16: ws
                    {
                    dbg.location(495,16);
                    pushFollow(FOLLOW_ws_in_generic_at_rule1645);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(76);}

            dbg.location(495,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:495:20: ( atRuleId ( ws )? )?
            int alt78=2;
            try { dbg.enterSubRule(78);
            try { dbg.enterDecision(78, decisionCanBacktrack[78]);

            int LA78_0 = input.LA(1);

            if ( ((LA78_0>=IDENT && LA78_0<=STRING)) ) {
                alt78=1;
            }
            } finally {dbg.exitDecision(78);}

            switch (alt78) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:495:22: atRuleId ( ws )?
                    {
                    dbg.location(495,22);
                    pushFollow(FOLLOW_atRuleId_in_generic_at_rule1650);
                    atRuleId();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(495,31);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:495:31: ( ws )?
                    int alt77=2;
                    try { dbg.enterSubRule(77);
                    try { dbg.enterDecision(77, decisionCanBacktrack[77]);

                    int LA77_0 = input.LA(1);

                    if ( ((LA77_0>=WS && LA77_0<=COMMENT)) ) {
                        alt77=1;
                    }
                    } finally {dbg.exitDecision(77);}

                    switch (alt77) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:495:31: ws
                            {
                            dbg.location(495,31);
                            pushFollow(FOLLOW_ws_in_generic_at_rule1652);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(77);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(78);}

            dbg.location(496,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_generic_at_rule1666); if (state.failed) return ;
            dbg.location(497,10);
            pushFollow(FOLLOW_syncTo_RBRACE_in_generic_at_rule1677);
            syncTo_RBRACE();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(498,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_generic_at_rule1687); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(499, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "generic_at_rule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "generic_at_rule"


    // $ANTLR start "moz_document"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:500:1: moz_document : MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE ;
    public final void moz_document() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "moz_document");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(500, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:501:2: ( MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:2: MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE
            {
            dbg.location(502,2);
            match(input,MOZ_DOCUMENT_SYM,FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document1698); if (state.failed) return ;
            dbg.location(502,19);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:19: ( ws )?
            int alt79=2;
            try { dbg.enterSubRule(79);
            try { dbg.enterDecision(79, decisionCanBacktrack[79]);

            int LA79_0 = input.LA(1);

            if ( ((LA79_0>=WS && LA79_0<=COMMENT)) ) {
                alt79=1;
            }
            } finally {dbg.exitDecision(79);}

            switch (alt79) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:19: ws
                    {
                    dbg.location(502,19);
                    pushFollow(FOLLOW_ws_in_moz_document1700);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(79);}

            dbg.location(502,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:23: ( moz_document_function ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:25: moz_document_function ( ws )?
            {
            dbg.location(502,25);
            pushFollow(FOLLOW_moz_document_function_in_moz_document1705);
            moz_document_function();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(502,47);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:47: ( ws )?
            int alt80=2;
            try { dbg.enterSubRule(80);
            try { dbg.enterDecision(80, decisionCanBacktrack[80]);

            int LA80_0 = input.LA(1);

            if ( ((LA80_0>=WS && LA80_0<=COMMENT)) ) {
                alt80=1;
            }
            } finally {dbg.exitDecision(80);}

            switch (alt80) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:47: ws
                    {
                    dbg.location(502,47);
                    pushFollow(FOLLOW_ws_in_moz_document1707);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(80);}


            }

            dbg.location(502,52);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:52: ( COMMA ( ws )? moz_document_function ( ws )? )*
            try { dbg.enterSubRule(83);

            loop83:
            do {
                int alt83=2;
                try { dbg.enterDecision(83, decisionCanBacktrack[83]);

                int LA83_0 = input.LA(1);

                if ( (LA83_0==COMMA) ) {
                    alt83=1;
                }


                } finally {dbg.exitDecision(83);}

                switch (alt83) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:54: COMMA ( ws )? moz_document_function ( ws )?
            	    {
            	    dbg.location(502,54);
            	    match(input,COMMA,FOLLOW_COMMA_in_moz_document1713); if (state.failed) return ;
            	    dbg.location(502,60);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:60: ( ws )?
            	    int alt81=2;
            	    try { dbg.enterSubRule(81);
            	    try { dbg.enterDecision(81, decisionCanBacktrack[81]);

            	    int LA81_0 = input.LA(1);

            	    if ( ((LA81_0>=WS && LA81_0<=COMMENT)) ) {
            	        alt81=1;
            	    }
            	    } finally {dbg.exitDecision(81);}

            	    switch (alt81) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:60: ws
            	            {
            	            dbg.location(502,60);
            	            pushFollow(FOLLOW_ws_in_moz_document1715);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(81);}

            	    dbg.location(502,64);
            	    pushFollow(FOLLOW_moz_document_function_in_moz_document1718);
            	    moz_document_function();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(502,86);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:86: ( ws )?
            	    int alt82=2;
            	    try { dbg.enterSubRule(82);
            	    try { dbg.enterDecision(82, decisionCanBacktrack[82]);

            	    int LA82_0 = input.LA(1);

            	    if ( ((LA82_0>=WS && LA82_0<=COMMENT)) ) {
            	        alt82=1;
            	    }
            	    } finally {dbg.exitDecision(82);}

            	    switch (alt82) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:86: ws
            	            {
            	            dbg.location(502,86);
            	            pushFollow(FOLLOW_ws_in_moz_document1720);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(82);}


            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);
            } finally {dbg.exitSubRule(83);}

            dbg.location(503,2);
            match(input,LBRACE,FOLLOW_LBRACE_in_moz_document1727); if (state.failed) return ;
            dbg.location(503,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:503:9: ( ws )?
            int alt84=2;
            try { dbg.enterSubRule(84);
            try { dbg.enterDecision(84, decisionCanBacktrack[84]);

            int LA84_0 = input.LA(1);

            if ( ((LA84_0>=WS && LA84_0<=COMMENT)) ) {
                alt84=1;
            }
            } finally {dbg.exitDecision(84);}

            switch (alt84) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:503:9: ws
                    {
                    dbg.location(503,9);
                    pushFollow(FOLLOW_ws_in_moz_document1729);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(84);}

            dbg.location(504,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:504:3: ( body )?
            int alt85=2;
            try { dbg.enterSubRule(85);
            try { dbg.enterDecision(85, decisionCanBacktrack[85]);

            int LA85_0 = input.LA(1);

            if ( ((LA85_0>=NAMESPACE_SYM && LA85_0<=IDENT)||(LA85_0>=CHARSET_SYM && LA85_0<=COMMA)||LA85_0==MEDIA_SYM||(LA85_0>=GEN && LA85_0<=MOZ_DOCUMENT_SYM)||LA85_0==WEBKIT_KEYFRAMES_SYM||(LA85_0>=PAGE_SYM && LA85_0<=RIGHTBOTTOM_SYM)||(LA85_0>=MINUS && LA85_0<=PIPE)||LA85_0==LESS_AND||(LA85_0>=RBRACKET && LA85_0<=SASS_VAR)||(LA85_0>=SASS_CONTENT && LA85_0<=SASS_WHILE)||LA85_0==AT_SIGN) ) {
                alt85=1;
            }
            } finally {dbg.exitDecision(85);}

            switch (alt85) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:504:3: body
                    {
                    dbg.location(504,3);
                    pushFollow(FOLLOW_body_in_moz_document1734);
                    body();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(85);}

            dbg.location(505,2);
            match(input,RBRACE,FOLLOW_RBRACE_in_moz_document1739); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(506, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moz_document");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "moz_document"


    // $ANTLR start "moz_document_function"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:1: moz_document_function : ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP );
    public final void moz_document_function() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "moz_document_function");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(508, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:509:2: ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(509,2);
            if ( input.LA(1)==URI||(input.LA(1)>=MOZ_URL_PREFIX && input.LA(1)<=MOZ_REGEXP) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(511, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moz_document_function");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "moz_document_function"


    // $ANTLR start "webkitKeyframes"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:514:1: webkitKeyframes : WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE ;
    public final void webkitKeyframes() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "webkitKeyframes");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(514, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:515:2: ( WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:2: WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE
            {
            dbg.location(516,2);
            match(input,WEBKIT_KEYFRAMES_SYM,FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes1776); if (state.failed) return ;
            dbg.location(516,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:23: ( ws )?
            int alt86=2;
            try { dbg.enterSubRule(86);
            try { dbg.enterDecision(86, decisionCanBacktrack[86]);

            int LA86_0 = input.LA(1);

            if ( ((LA86_0>=WS && LA86_0<=COMMENT)) ) {
                alt86=1;
            }
            } finally {dbg.exitDecision(86);}

            switch (alt86) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:23: ws
                    {
                    dbg.location(516,23);
                    pushFollow(FOLLOW_ws_in_webkitKeyframes1778);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(86);}

            dbg.location(516,27);
            pushFollow(FOLLOW_atRuleId_in_webkitKeyframes1781);
            atRuleId();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(516,36);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:36: ( ws )?
            int alt87=2;
            try { dbg.enterSubRule(87);
            try { dbg.enterDecision(87, decisionCanBacktrack[87]);

            int LA87_0 = input.LA(1);

            if ( ((LA87_0>=WS && LA87_0<=COMMENT)) ) {
                alt87=1;
            }
            } finally {dbg.exitDecision(87);}

            switch (alt87) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:36: ws
                    {
                    dbg.location(516,36);
                    pushFollow(FOLLOW_ws_in_webkitKeyframes1783);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(87);}

            dbg.location(517,2);
            match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframes1787); if (state.failed) return ;
            dbg.location(517,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:517:9: ( ws )?
            int alt88=2;
            try { dbg.enterSubRule(88);
            try { dbg.enterDecision(88, decisionCanBacktrack[88]);

            int LA88_0 = input.LA(1);

            if ( ((LA88_0>=WS && LA88_0<=COMMENT)) ) {
                alt88=1;
            }
            } finally {dbg.exitDecision(88);}

            switch (alt88) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:517:9: ws
                    {
                    dbg.location(517,9);
                    pushFollow(FOLLOW_ws_in_webkitKeyframes1789);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(88);}

            dbg.location(518,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:518:3: ( webkitKeyframesBlock ( ws )? )*
            try { dbg.enterSubRule(90);

            loop90:
            do {
                int alt90=2;
                try { dbg.enterDecision(90, decisionCanBacktrack[90]);

                int LA90_0 = input.LA(1);

                if ( (LA90_0==IDENT||LA90_0==PERCENTAGE) ) {
                    alt90=1;
                }


                } finally {dbg.exitDecision(90);}

                switch (alt90) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:518:5: webkitKeyframesBlock ( ws )?
            	    {
            	    dbg.location(518,5);
            	    pushFollow(FOLLOW_webkitKeyframesBlock_in_webkitKeyframes1796);
            	    webkitKeyframesBlock();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(518,26);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:518:26: ( ws )?
            	    int alt89=2;
            	    try { dbg.enterSubRule(89);
            	    try { dbg.enterDecision(89, decisionCanBacktrack[89]);

            	    int LA89_0 = input.LA(1);

            	    if ( ((LA89_0>=WS && LA89_0<=COMMENT)) ) {
            	        alt89=1;
            	    }
            	    } finally {dbg.exitDecision(89);}

            	    switch (alt89) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:518:26: ws
            	            {
            	            dbg.location(518,26);
            	            pushFollow(FOLLOW_ws_in_webkitKeyframes1798);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(89);}


            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);
            } finally {dbg.exitSubRule(90);}

            dbg.location(519,2);
            match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframes1805); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(520, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "webkitKeyframes");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "webkitKeyframes"


    // $ANTLR start "webkitKeyframesBlock"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:522:1: webkitKeyframesBlock : webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void webkitKeyframesBlock() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "webkitKeyframesBlock");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(522, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:523:2: ( webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:2: webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(524,2);
            pushFollow(FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock1817);
            webkitKeyframeSelectors();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(524,26);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:26: ( ws )?
            int alt91=2;
            try { dbg.enterSubRule(91);
            try { dbg.enterDecision(91, decisionCanBacktrack[91]);

            int LA91_0 = input.LA(1);

            if ( ((LA91_0>=WS && LA91_0<=COMMENT)) ) {
                alt91=1;
            }
            } finally {dbg.exitDecision(91);}

            switch (alt91) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:26: ws
                    {
                    dbg.location(524,26);
                    pushFollow(FOLLOW_ws_in_webkitKeyframesBlock1819);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(91);}

            dbg.location(525,2);
            match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframesBlock1823); if (state.failed) return ;
            dbg.location(525,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:525:10: ( ws )?
            int alt92=2;
            try { dbg.enterSubRule(92);
            try { dbg.enterDecision(92, decisionCanBacktrack[92]);

            int LA92_0 = input.LA(1);

            if ( ((LA92_0>=WS && LA92_0<=COMMENT)) ) {
                alt92=1;
            }
            } finally {dbg.exitDecision(92);}

            switch (alt92) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:525:10: ws
                    {
                    dbg.location(525,10);
                    pushFollow(FOLLOW_ws_in_webkitKeyframesBlock1826);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(92);}

            dbg.location(525,14);
            pushFollow(FOLLOW_syncToFollow_in_webkitKeyframesBlock1829);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(526,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:526:3: ( declarations )?
            int alt93=2;
            try { dbg.enterSubRule(93);
            try { dbg.enterDecision(93, decisionCanBacktrack[93]);

            int LA93_0 = input.LA(1);

            if ( ((LA93_0>=NAMESPACE_SYM && LA93_0<=IDENT)||(LA93_0>=CHARSET_SYM && LA93_0<=COMMA)||LA93_0==MEDIA_SYM||(LA93_0>=GEN && LA93_0<=MOZ_DOCUMENT_SYM)||LA93_0==WEBKIT_KEYFRAMES_SYM||(LA93_0>=PAGE_SYM && LA93_0<=RIGHTBOTTOM_SYM)||(LA93_0>=MINUS && LA93_0<=PIPE)||LA93_0==LESS_AND||(LA93_0>=RBRACKET && LA93_0<=SASS_VAR)||(LA93_0>=SASS_CONTENT && LA93_0<=SASS_WHILE)||LA93_0==AT_SIGN) ) {
                alt93=1;
            }
            } finally {dbg.exitDecision(93);}

            switch (alt93) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:526:3: declarations
                    {
                    dbg.location(526,3);
                    pushFollow(FOLLOW_declarations_in_webkitKeyframesBlock1833);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(93);}

            dbg.location(527,2);
            match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframesBlock1837); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(528, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "webkitKeyframesBlock");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "webkitKeyframesBlock"


    // $ANTLR start "webkitKeyframeSelectors"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:1: webkitKeyframeSelectors : ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )* ;
    public final void webkitKeyframeSelectors() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "webkitKeyframeSelectors");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(530, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:531:2: ( ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:2: ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*
            {
            dbg.location(532,2);
            if ( input.LA(1)==IDENT||input.LA(1)==PERCENTAGE ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(532,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:25: ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*
            try { dbg.enterSubRule(96);

            loop96:
            do {
                int alt96=2;
                try { dbg.enterDecision(96, decisionCanBacktrack[96]);

                try {
                    isCyclicDecision = true;
                    alt96 = dfa96.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(96);}

                switch (alt96) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:27: ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE )
            	    {
            	    dbg.location(532,27);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:27: ( ws )?
            	    int alt94=2;
            	    try { dbg.enterSubRule(94);
            	    try { dbg.enterDecision(94, decisionCanBacktrack[94]);

            	    int LA94_0 = input.LA(1);

            	    if ( ((LA94_0>=WS && LA94_0<=COMMENT)) ) {
            	        alt94=1;
            	    }
            	    } finally {dbg.exitDecision(94);}

            	    switch (alt94) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:27: ws
            	            {
            	            dbg.location(532,27);
            	            pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors1861);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(94);}

            	    dbg.location(532,31);
            	    match(input,COMMA,FOLLOW_COMMA_in_webkitKeyframeSelectors1864); if (state.failed) return ;
            	    dbg.location(532,37);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:37: ( ws )?
            	    int alt95=2;
            	    try { dbg.enterSubRule(95);
            	    try { dbg.enterDecision(95, decisionCanBacktrack[95]);

            	    int LA95_0 = input.LA(1);

            	    if ( ((LA95_0>=WS && LA95_0<=COMMENT)) ) {
            	        alt95=1;
            	    }
            	    } finally {dbg.exitDecision(95);}

            	    switch (alt95) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:37: ws
            	            {
            	            dbg.location(532,37);
            	            pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors1866);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(95);}

            	    dbg.location(532,41);
            	    if ( input.LA(1)==IDENT||input.LA(1)==PERCENTAGE ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);
            } finally {dbg.exitSubRule(96);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(533, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "webkitKeyframeSelectors");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "webkitKeyframeSelectors"


    // $ANTLR start "page"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:535:1: page : PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )* RBRACE ;
    public final void page() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "page");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(535, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:5: ( PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )* RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:7: PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )* RBRACE
            {
            dbg.location(536,7);
            match(input,PAGE_SYM,FOLLOW_PAGE_SYM_in_page1894); if (state.failed) return ;
            dbg.location(536,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:16: ( ws )?
            int alt97=2;
            try { dbg.enterSubRule(97);
            try { dbg.enterDecision(97, decisionCanBacktrack[97]);

            int LA97_0 = input.LA(1);

            if ( ((LA97_0>=WS && LA97_0<=COMMENT)) ) {
                alt97=1;
            }
            } finally {dbg.exitDecision(97);}

            switch (alt97) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:16: ws
                    {
                    dbg.location(536,16);
                    pushFollow(FOLLOW_ws_in_page1896);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(97);}

            dbg.location(536,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:20: ( IDENT ( ws )? )?
            int alt99=2;
            try { dbg.enterSubRule(99);
            try { dbg.enterDecision(99, decisionCanBacktrack[99]);

            int LA99_0 = input.LA(1);

            if ( (LA99_0==IDENT) ) {
                alt99=1;
            }
            } finally {dbg.exitDecision(99);}

            switch (alt99) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:22: IDENT ( ws )?
                    {
                    dbg.location(536,22);
                    match(input,IDENT,FOLLOW_IDENT_in_page1901); if (state.failed) return ;
                    dbg.location(536,28);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:28: ( ws )?
                    int alt98=2;
                    try { dbg.enterSubRule(98);
                    try { dbg.enterDecision(98, decisionCanBacktrack[98]);

                    int LA98_0 = input.LA(1);

                    if ( ((LA98_0>=WS && LA98_0<=COMMENT)) ) {
                        alt98=1;
                    }
                    } finally {dbg.exitDecision(98);}

                    switch (alt98) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:28: ws
                            {
                            dbg.location(536,28);
                            pushFollow(FOLLOW_ws_in_page1903);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(98);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(99);}

            dbg.location(536,35);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:35: ( pseudoPage ( ws )? )?
            int alt101=2;
            try { dbg.enterSubRule(101);
            try { dbg.enterDecision(101, decisionCanBacktrack[101]);

            int LA101_0 = input.LA(1);

            if ( (LA101_0==COLON) ) {
                alt101=1;
            }
            } finally {dbg.exitDecision(101);}

            switch (alt101) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:36: pseudoPage ( ws )?
                    {
                    dbg.location(536,36);
                    pushFollow(FOLLOW_pseudoPage_in_page1910);
                    pseudoPage();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(536,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:47: ( ws )?
                    int alt100=2;
                    try { dbg.enterSubRule(100);
                    try { dbg.enterDecision(100, decisionCanBacktrack[100]);

                    int LA100_0 = input.LA(1);

                    if ( ((LA100_0>=WS && LA100_0<=COMMENT)) ) {
                        alt100=1;
                    }
                    } finally {dbg.exitDecision(100);}

                    switch (alt100) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:47: ws
                            {
                            dbg.location(536,47);
                            pushFollow(FOLLOW_ws_in_page1912);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(100);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(101);}

            dbg.location(537,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_page1925); if (state.failed) return ;
            dbg.location(537,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:537:16: ( ws )?
            int alt102=2;
            try { dbg.enterSubRule(102);
            try { dbg.enterDecision(102, decisionCanBacktrack[102]);

            int LA102_0 = input.LA(1);

            if ( ((LA102_0>=WS && LA102_0<=COMMENT)) ) {
                alt102=1;
            }
            } finally {dbg.exitDecision(102);}

            switch (alt102) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:537:16: ws
                    {
                    dbg.location(537,16);
                    pushFollow(FOLLOW_ws_in_page1927);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(102);}

            dbg.location(540,13);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:13: ( ( propertyDeclaration | margin ) ( ws )? )?
            int alt105=2;
            try { dbg.enterSubRule(105);
            try { dbg.enterDecision(105, decisionCanBacktrack[105]);

            int LA105_0 = input.LA(1);

            if ( (LA105_0==NAMESPACE_SYM||LA105_0==IDENT||(LA105_0>=CHARSET_SYM && LA105_0<=IMPORT_SYM)||LA105_0==MEDIA_SYM||LA105_0==GEN||(LA105_0>=AT_IDENT && LA105_0<=MOZ_DOCUMENT_SYM)||LA105_0==WEBKIT_KEYFRAMES_SYM||(LA105_0>=PAGE_SYM && LA105_0<=RIGHTBOTTOM_SYM)||LA105_0==MINUS||(LA105_0>=HASH_SYMBOL && LA105_0<=DOT)||LA105_0==STAR||LA105_0==SASS_VAR||(LA105_0>=SASS_CONTENT && LA105_0<=SASS_WHILE)) ) {
                alt105=1;
            }
            } finally {dbg.exitDecision(105);}

            switch (alt105) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:14: ( propertyDeclaration | margin ) ( ws )?
                    {
                    dbg.location(540,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:14: ( propertyDeclaration | margin )
                    int alt103=2;
                    try { dbg.enterSubRule(103);
                    try { dbg.enterDecision(103, decisionCanBacktrack[103]);

                    try {
                        isCyclicDecision = true;
                        alt103 = dfa103.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(103);}

                    switch (alt103) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:15: propertyDeclaration
                            {
                            dbg.location(540,15);
                            pushFollow(FOLLOW_propertyDeclaration_in_page1970);
                            propertyDeclaration();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:35: margin
                            {
                            dbg.location(540,35);
                            pushFollow(FOLLOW_margin_in_page1972);
                            margin();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(103);}

                    dbg.location(540,43);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:43: ( ws )?
                    int alt104=2;
                    try { dbg.enterSubRule(104);
                    try { dbg.enterDecision(104, decisionCanBacktrack[104]);

                    int LA104_0 = input.LA(1);

                    if ( ((LA104_0>=WS && LA104_0<=COMMENT)) ) {
                        alt104=1;
                    }
                    } finally {dbg.exitDecision(104);}

                    switch (alt104) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:43: ws
                            {
                            dbg.location(540,43);
                            pushFollow(FOLLOW_ws_in_page1975);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(104);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(105);}

            dbg.location(540,49);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:49: ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )*
            try { dbg.enterSubRule(110);

            loop110:
            do {
                int alt110=2;
                try { dbg.enterDecision(110, decisionCanBacktrack[110]);

                int LA110_0 = input.LA(1);

                if ( (LA110_0==SEMI) ) {
                    alt110=1;
                }


                } finally {dbg.exitDecision(110);}

                switch (alt110) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:50: SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )?
            	    {
            	    dbg.location(540,50);
            	    match(input,SEMI,FOLLOW_SEMI_in_page1981); if (state.failed) return ;
            	    dbg.location(540,55);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:55: ( ws )?
            	    int alt106=2;
            	    try { dbg.enterSubRule(106);
            	    try { dbg.enterDecision(106, decisionCanBacktrack[106]);

            	    int LA106_0 = input.LA(1);

            	    if ( ((LA106_0>=WS && LA106_0<=COMMENT)) ) {
            	        alt106=1;
            	    }
            	    } finally {dbg.exitDecision(106);}

            	    switch (alt106) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:55: ws
            	            {
            	            dbg.location(540,55);
            	            pushFollow(FOLLOW_ws_in_page1983);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(106);}

            	    dbg.location(540,59);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:59: ( ( propertyDeclaration | margin ) ( ws )? )?
            	    int alt109=2;
            	    try { dbg.enterSubRule(109);
            	    try { dbg.enterDecision(109, decisionCanBacktrack[109]);

            	    int LA109_0 = input.LA(1);

            	    if ( (LA109_0==NAMESPACE_SYM||LA109_0==IDENT||(LA109_0>=CHARSET_SYM && LA109_0<=IMPORT_SYM)||LA109_0==MEDIA_SYM||LA109_0==GEN||(LA109_0>=AT_IDENT && LA109_0<=MOZ_DOCUMENT_SYM)||LA109_0==WEBKIT_KEYFRAMES_SYM||(LA109_0>=PAGE_SYM && LA109_0<=RIGHTBOTTOM_SYM)||LA109_0==MINUS||(LA109_0>=HASH_SYMBOL && LA109_0<=DOT)||LA109_0==STAR||LA109_0==SASS_VAR||(LA109_0>=SASS_CONTENT && LA109_0<=SASS_WHILE)) ) {
            	        alt109=1;
            	    }
            	    } finally {dbg.exitDecision(109);}

            	    switch (alt109) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:60: ( propertyDeclaration | margin ) ( ws )?
            	            {
            	            dbg.location(540,60);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:60: ( propertyDeclaration | margin )
            	            int alt107=2;
            	            try { dbg.enterSubRule(107);
            	            try { dbg.enterDecision(107, decisionCanBacktrack[107]);

            	            try {
            	                isCyclicDecision = true;
            	                alt107 = dfa107.predict(input);
            	            }
            	            catch (NoViableAltException nvae) {
            	                dbg.recognitionException(nvae);
            	                throw nvae;
            	            }
            	            } finally {dbg.exitDecision(107);}

            	            switch (alt107) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:61: propertyDeclaration
            	                    {
            	                    dbg.location(540,61);
            	                    pushFollow(FOLLOW_propertyDeclaration_in_page1988);
            	                    propertyDeclaration();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;
            	                case 2 :
            	                    dbg.enterAlt(2);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:81: margin
            	                    {
            	                    dbg.location(540,81);
            	                    pushFollow(FOLLOW_margin_in_page1990);
            	                    margin();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(107);}

            	            dbg.location(540,89);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:89: ( ws )?
            	            int alt108=2;
            	            try { dbg.enterSubRule(108);
            	            try { dbg.enterDecision(108, decisionCanBacktrack[108]);

            	            int LA108_0 = input.LA(1);

            	            if ( ((LA108_0>=WS && LA108_0<=COMMENT)) ) {
            	                alt108=1;
            	            }
            	            } finally {dbg.exitDecision(108);}

            	            switch (alt108) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:89: ws
            	                    {
            	                    dbg.location(540,89);
            	                    pushFollow(FOLLOW_ws_in_page1993);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(108);}


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(109);}


            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);
            } finally {dbg.exitSubRule(110);}

            dbg.location(541,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_page2008); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(542, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "page");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "page"


    // $ANTLR start "counterStyle"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:544:1: counterStyle : COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
    public final void counterStyle() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "counterStyle");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(544, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:545:5: ( COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:545:7: COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
            {
            dbg.location(545,7);
            match(input,COUNTER_STYLE_SYM,FOLLOW_COUNTER_STYLE_SYM_in_counterStyle2025); if (state.failed) return ;
            dbg.location(545,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:545:25: ( ws )?
            int alt111=2;
            try { dbg.enterSubRule(111);
            try { dbg.enterDecision(111, decisionCanBacktrack[111]);

            int LA111_0 = input.LA(1);

            if ( ((LA111_0>=WS && LA111_0<=COMMENT)) ) {
                alt111=1;
            }
            } finally {dbg.exitDecision(111);}

            switch (alt111) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:545:25: ws
                    {
                    dbg.location(545,25);
                    pushFollow(FOLLOW_ws_in_counterStyle2027);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(111);}

            dbg.location(545,29);
            match(input,IDENT,FOLLOW_IDENT_in_counterStyle2030); if (state.failed) return ;
            dbg.location(545,35);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:545:35: ( ws )?
            int alt112=2;
            try { dbg.enterSubRule(112);
            try { dbg.enterDecision(112, decisionCanBacktrack[112]);

            int LA112_0 = input.LA(1);

            if ( ((LA112_0>=WS && LA112_0<=COMMENT)) ) {
                alt112=1;
            }
            } finally {dbg.exitDecision(112);}

            switch (alt112) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:545:35: ws
                    {
                    dbg.location(545,35);
                    pushFollow(FOLLOW_ws_in_counterStyle2032);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(112);}

            dbg.location(546,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_counterStyle2043); if (state.failed) return ;
            dbg.location(546,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:546:16: ( ws )?
            int alt113=2;
            try { dbg.enterSubRule(113);
            try { dbg.enterDecision(113, decisionCanBacktrack[113]);

            int LA113_0 = input.LA(1);

            if ( ((LA113_0>=WS && LA113_0<=COMMENT)) ) {
                alt113=1;
            }
            } finally {dbg.exitDecision(113);}

            switch (alt113) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:546:16: ws
                    {
                    dbg.location(546,16);
                    pushFollow(FOLLOW_ws_in_counterStyle2045);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(113);}

            dbg.location(546,20);
            pushFollow(FOLLOW_syncToDeclarationsRule_in_counterStyle2048);
            syncToDeclarationsRule();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(547,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:547:3: ( declarations )?
            int alt114=2;
            try { dbg.enterSubRule(114);
            try { dbg.enterDecision(114, decisionCanBacktrack[114]);

            int LA114_0 = input.LA(1);

            if ( ((LA114_0>=NAMESPACE_SYM && LA114_0<=IDENT)||(LA114_0>=CHARSET_SYM && LA114_0<=COMMA)||LA114_0==MEDIA_SYM||(LA114_0>=GEN && LA114_0<=MOZ_DOCUMENT_SYM)||LA114_0==WEBKIT_KEYFRAMES_SYM||(LA114_0>=PAGE_SYM && LA114_0<=RIGHTBOTTOM_SYM)||(LA114_0>=MINUS && LA114_0<=PIPE)||LA114_0==LESS_AND||(LA114_0>=RBRACKET && LA114_0<=SASS_VAR)||(LA114_0>=SASS_CONTENT && LA114_0<=SASS_WHILE)||LA114_0==AT_SIGN) ) {
                alt114=1;
            }
            } finally {dbg.exitDecision(114);}

            switch (alt114) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:547:3: declarations
                    {
                    dbg.location(547,3);
                    pushFollow(FOLLOW_declarations_in_counterStyle2052);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(114);}

            dbg.location(548,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_counterStyle2063); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(549, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "counterStyle");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "counterStyle"


    // $ANTLR start "fontFace"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:551:1: fontFace : FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
    public final void fontFace() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fontFace");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(551, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:552:5: ( FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:552:7: FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
            {
            dbg.location(552,7);
            match(input,FONT_FACE_SYM,FOLLOW_FONT_FACE_SYM_in_fontFace2080); if (state.failed) return ;
            dbg.location(552,21);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:552:21: ( ws )?
            int alt115=2;
            try { dbg.enterSubRule(115);
            try { dbg.enterDecision(115, decisionCanBacktrack[115]);

            int LA115_0 = input.LA(1);

            if ( ((LA115_0>=WS && LA115_0<=COMMENT)) ) {
                alt115=1;
            }
            } finally {dbg.exitDecision(115);}

            switch (alt115) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:552:21: ws
                    {
                    dbg.location(552,21);
                    pushFollow(FOLLOW_ws_in_fontFace2082);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(115);}

            dbg.location(553,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_fontFace2093); if (state.failed) return ;
            dbg.location(553,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:553:16: ( ws )?
            int alt116=2;
            try { dbg.enterSubRule(116);
            try { dbg.enterDecision(116, decisionCanBacktrack[116]);

            int LA116_0 = input.LA(1);

            if ( ((LA116_0>=WS && LA116_0<=COMMENT)) ) {
                alt116=1;
            }
            } finally {dbg.exitDecision(116);}

            switch (alt116) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:553:16: ws
                    {
                    dbg.location(553,16);
                    pushFollow(FOLLOW_ws_in_fontFace2095);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(116);}

            dbg.location(553,20);
            pushFollow(FOLLOW_syncToDeclarationsRule_in_fontFace2098);
            syncToDeclarationsRule();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(554,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:554:3: ( declarations )?
            int alt117=2;
            try { dbg.enterSubRule(117);
            try { dbg.enterDecision(117, decisionCanBacktrack[117]);

            int LA117_0 = input.LA(1);

            if ( ((LA117_0>=NAMESPACE_SYM && LA117_0<=IDENT)||(LA117_0>=CHARSET_SYM && LA117_0<=COMMA)||LA117_0==MEDIA_SYM||(LA117_0>=GEN && LA117_0<=MOZ_DOCUMENT_SYM)||LA117_0==WEBKIT_KEYFRAMES_SYM||(LA117_0>=PAGE_SYM && LA117_0<=RIGHTBOTTOM_SYM)||(LA117_0>=MINUS && LA117_0<=PIPE)||LA117_0==LESS_AND||(LA117_0>=RBRACKET && LA117_0<=SASS_VAR)||(LA117_0>=SASS_CONTENT && LA117_0<=SASS_WHILE)||LA117_0==AT_SIGN) ) {
                alt117=1;
            }
            } finally {dbg.exitDecision(117);}

            switch (alt117) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:554:3: declarations
                    {
                    dbg.location(554,3);
                    pushFollow(FOLLOW_declarations_in_fontFace2102);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(117);}

            dbg.location(555,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_fontFace2113); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(556, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fontFace");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fontFace"


    // $ANTLR start "margin"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:558:1: margin : margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
    public final void margin() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "margin");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(558, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:559:2: ( margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:559:4: margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
            {
            dbg.location(559,4);
            pushFollow(FOLLOW_margin_sym_in_margin2127);
            margin_sym();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(559,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:559:15: ( ws )?
            int alt118=2;
            try { dbg.enterSubRule(118);
            try { dbg.enterDecision(118, decisionCanBacktrack[118]);

            int LA118_0 = input.LA(1);

            if ( ((LA118_0>=WS && LA118_0<=COMMENT)) ) {
                alt118=1;
            }
            } finally {dbg.exitDecision(118);}

            switch (alt118) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:559:15: ws
                    {
                    dbg.location(559,15);
                    pushFollow(FOLLOW_ws_in_margin2129);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(118);}

            dbg.location(559,19);
            match(input,LBRACE,FOLLOW_LBRACE_in_margin2132); if (state.failed) return ;
            dbg.location(559,26);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:559:26: ( ws )?
            int alt119=2;
            try { dbg.enterSubRule(119);
            try { dbg.enterDecision(119, decisionCanBacktrack[119]);

            int LA119_0 = input.LA(1);

            if ( ((LA119_0>=WS && LA119_0<=COMMENT)) ) {
                alt119=1;
            }
            } finally {dbg.exitDecision(119);}

            switch (alt119) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:559:26: ws
                    {
                    dbg.location(559,26);
                    pushFollow(FOLLOW_ws_in_margin2134);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(119);}

            dbg.location(559,30);
            pushFollow(FOLLOW_syncToDeclarationsRule_in_margin2137);
            syncToDeclarationsRule();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(559,53);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:559:53: ( declarations )?
            int alt120=2;
            try { dbg.enterSubRule(120);
            try { dbg.enterDecision(120, decisionCanBacktrack[120]);

            int LA120_0 = input.LA(1);

            if ( ((LA120_0>=NAMESPACE_SYM && LA120_0<=IDENT)||(LA120_0>=CHARSET_SYM && LA120_0<=COMMA)||LA120_0==MEDIA_SYM||(LA120_0>=GEN && LA120_0<=MOZ_DOCUMENT_SYM)||LA120_0==WEBKIT_KEYFRAMES_SYM||(LA120_0>=PAGE_SYM && LA120_0<=RIGHTBOTTOM_SYM)||(LA120_0>=MINUS && LA120_0<=PIPE)||LA120_0==LESS_AND||(LA120_0>=RBRACKET && LA120_0<=SASS_VAR)||(LA120_0>=SASS_CONTENT && LA120_0<=SASS_WHILE)||LA120_0==AT_SIGN) ) {
                alt120=1;
            }
            } finally {dbg.exitDecision(120);}

            switch (alt120) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:559:53: declarations
                    {
                    dbg.location(559,53);
                    pushFollow(FOLLOW_declarations_in_margin2139);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(120);}

            dbg.location(559,67);
            match(input,RBRACE,FOLLOW_RBRACE_in_margin2142); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(560, 8);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "margin");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "margin"


    // $ANTLR start "margin_sym"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:562:1: margin_sym : ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM );
    public final void margin_sym() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "margin_sym");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(562, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:563:2: ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(563,2);
            if ( (input.LA(1)>=TOPLEFTCORNER_SYM && input.LA(1)<=RIGHTBOTTOM_SYM) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(580, 8);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "margin_sym");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "margin_sym"


    // $ANTLR start "pseudoPage"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:582:1: pseudoPage : COLON IDENT ;
    public final void pseudoPage() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "pseudoPage");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(582, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:583:5: ( COLON IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:583:7: COLON IDENT
            {
            dbg.location(583,7);
            match(input,COLON,FOLLOW_COLON_in_pseudoPage2351); if (state.failed) return ;
            dbg.location(583,13);
            match(input,IDENT,FOLLOW_IDENT_in_pseudoPage2353); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(584, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pseudoPage");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "pseudoPage"


    // $ANTLR start "operator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:586:1: operator : ( SOLIDUS | COMMA );
    public final void operator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "operator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(586, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:587:5: ( SOLIDUS | COMMA )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(587,5);
            if ( input.LA(1)==COMMA||input.LA(1)==SOLIDUS ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(589, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "operator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "operator"


    // $ANTLR start "unaryOperator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:591:1: unaryOperator : ( MINUS | PLUS );
    public final void unaryOperator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "unaryOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(591, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:592:5: ( MINUS | PLUS )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(592,5);
            if ( (input.LA(1)>=MINUS && input.LA(1)<=PLUS) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(594, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unaryOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "unaryOperator"


    // $ANTLR start "property"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:596:1: property : ( ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression | IDENT | GEN | {...}? cp_variable );
    public final void property() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "property");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(596, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:597:5: ( ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression | IDENT | GEN | {...}? cp_variable )
            int alt121=4;
            try { dbg.enterDecision(121, decisionCanBacktrack[121]);

            int LA121_0 = input.LA(1);

            if ( (LA121_0==HASH_SYMBOL) && (synpred17_Css3())) {
                alt121=1;
            }
            else if ( (LA121_0==IDENT) ) {
                int LA121_2 = input.LA(2);

                if ( (synpred17_Css3()) ) {
                    alt121=1;
                }
                else if ( (true) ) {
                    alt121=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 121, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA121_0==MINUS||(LA121_0>=HASH && LA121_0<=DOT)) && (synpred17_Css3())) {
                alt121=1;
            }
            else if ( (LA121_0==GEN) ) {
                alt121=3;
            }
            else if ( (LA121_0==NAMESPACE_SYM||(LA121_0>=CHARSET_SYM && LA121_0<=IMPORT_SYM)||LA121_0==MEDIA_SYM||(LA121_0>=AT_IDENT && LA121_0<=MOZ_DOCUMENT_SYM)||LA121_0==WEBKIT_KEYFRAMES_SYM||(LA121_0>=PAGE_SYM && LA121_0<=RIGHTBOTTOM_SYM)||LA121_0==SASS_VAR||(LA121_0>=SASS_CONTENT && LA121_0<=SASS_WHILE)) ) {
                alt121=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(121);}

            switch (alt121) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:5: ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression
                    {
                    dbg.location(601,49);
                    pushFollow(FOLLOW_sass_declaration_interpolation_expression_in_property2449);
                    sass_declaration_interpolation_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:602:7: IDENT
                    {
                    dbg.location(602,7);
                    match(input,IDENT,FOLLOW_IDENT_in_property2457); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:603:7: GEN
                    {
                    dbg.location(603,7);
                    match(input,GEN,FOLLOW_GEN_in_property2465); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:604:7: {...}? cp_variable
                    {
                    dbg.location(604,7);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "property", "isCssPreprocessorSource()");
                    }
                    dbg.location(604,36);
                    pushFollow(FOLLOW_cp_variable_in_property2475);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(COLON));
                
        }
        finally {
        }
        dbg.location(606, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "property");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "property"


    // $ANTLR start "sass_map"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:611:1: sass_map : sass_map_name COLON ( ws )? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN ;
    public final void sass_map() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_map");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(611, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:612:5: ( sass_map_name COLON ( ws )? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:5: sass_map_name COLON ( ws )? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN
            {
            dbg.location(613,5);
            pushFollow(FOLLOW_sass_map_name_in_sass_map2502);
            sass_map_name();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(613,19);
            match(input,COLON,FOLLOW_COLON_in_sass_map2504); if (state.failed) return ;
            dbg.location(613,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:25: ( ws )?
            int alt122=2;
            try { dbg.enterSubRule(122);
            try { dbg.enterDecision(122, decisionCanBacktrack[122]);

            int LA122_0 = input.LA(1);

            if ( ((LA122_0>=WS && LA122_0<=COMMENT)) ) {
                alt122=1;
            }
            } finally {dbg.exitDecision(122);}

            switch (alt122) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:25: ws
                    {
                    dbg.location(613,25);
                    pushFollow(FOLLOW_ws_in_sass_map2506);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(122);}

            dbg.location(613,29);
            match(input,LPAREN,FOLLOW_LPAREN_in_sass_map2509); if (state.failed) return ;
            dbg.location(613,36);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:36: ( ws )?
            int alt123=2;
            try { dbg.enterSubRule(123);
            try { dbg.enterDecision(123, decisionCanBacktrack[123]);

            int LA123_0 = input.LA(1);

            if ( ((LA123_0>=WS && LA123_0<=COMMENT)) ) {
                alt123=1;
            }
            } finally {dbg.exitDecision(123);}

            switch (alt123) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:36: ws
                    {
                    dbg.location(613,36);
                    pushFollow(FOLLOW_ws_in_sass_map2511);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(123);}

            dbg.location(613,40);
            pushFollow(FOLLOW_syncToFollow_in_sass_map2514);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(615,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:615:9: ( sass_map_pairs )?
            int alt124=2;
            try { dbg.enterSubRule(124);
            try { dbg.enterDecision(124, decisionCanBacktrack[124]);

            int LA124_0 = input.LA(1);

            if ( (LA124_0==NAMESPACE_SYM||LA124_0==IDENT||(LA124_0>=CHARSET_SYM && LA124_0<=COMMA)||LA124_0==MEDIA_SYM||LA124_0==GEN||(LA124_0>=AT_IDENT && LA124_0<=MOZ_DOCUMENT_SYM)||LA124_0==WEBKIT_KEYFRAMES_SYM||(LA124_0>=PAGE_SYM && LA124_0<=RIGHTBOTTOM_SYM)||LA124_0==MINUS||(LA124_0>=HASH_SYMBOL && LA124_0<=DOT)||LA124_0==SASS_VAR||(LA124_0>=SASS_CONTENT && LA124_0<=SASS_WHILE)) ) {
                alt124=1;
            }
            } finally {dbg.exitDecision(124);}

            switch (alt124) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:615:9: sass_map_pairs
                    {
                    dbg.location(615,9);
                    pushFollow(FOLLOW_sass_map_pairs_in_sass_map2533);
                    sass_map_pairs();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(124);}

            dbg.location(616,5);
            match(input,RPAREN,FOLLOW_RPAREN_in_sass_map2540); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(617, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_map");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_map"


    // $ANTLR start "sass_map_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:1: sass_map_name : cp_variable ;
    public final void sass_map_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_map_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(619, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:620:5: ( cp_variable )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:5: cp_variable
            {
            dbg.location(621,5);
            pushFollow(FOLLOW_cp_variable_in_sass_map_name2561);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(622, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_map_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_map_name"


    // $ANTLR start "sass_map_pairs"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:624:1: sass_map_pairs : ( ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? ) | ( COMMA ( ws )? ) )+ ;
    public final void sass_map_pairs() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_map_pairs");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(624, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:625:5: ( ( ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? ) | ( COMMA ( ws )? ) )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:626:5: ( ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? ) | ( COMMA ( ws )? ) )+
            {
            dbg.location(626,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:626:5: ( ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? ) | ( COMMA ( ws )? ) )+
            int cnt129=0;
            try { dbg.enterSubRule(129);

            loop129:
            do {
                int alt129=3;
                try { dbg.enterDecision(129, decisionCanBacktrack[129]);

                int LA129_0 = input.LA(1);

                if ( (LA129_0==NAMESPACE_SYM||LA129_0==IDENT||(LA129_0>=CHARSET_SYM && LA129_0<=IMPORT_SYM)||LA129_0==MEDIA_SYM||LA129_0==GEN||(LA129_0>=AT_IDENT && LA129_0<=MOZ_DOCUMENT_SYM)||LA129_0==WEBKIT_KEYFRAMES_SYM||(LA129_0>=PAGE_SYM && LA129_0<=RIGHTBOTTOM_SYM)||LA129_0==MINUS||(LA129_0>=HASH_SYMBOL && LA129_0<=DOT)||LA129_0==SASS_VAR||(LA129_0>=SASS_CONTENT && LA129_0<=SASS_WHILE)) ) {
                    alt129=1;
                }
                else if ( (LA129_0==COMMA) ) {
                    alt129=2;
                }


                } finally {dbg.exitDecision(129);}

                switch (alt129) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:10: ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? )
            	    {
            	    dbg.location(627,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:10: ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:12: sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )?
            	    {
            	    dbg.location(627,12);
            	    pushFollow(FOLLOW_sass_map_pair_in_sass_map_pairs2595);
            	    sass_map_pair();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(627,26);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:26: ( ( ( ws )? COMMA )=> ( ws )? COMMA )?
            	    int alt126=2;
            	    try { dbg.enterSubRule(126);
            	    try { dbg.enterDecision(126, decisionCanBacktrack[126]);

            	    try {
            	        isCyclicDecision = true;
            	        alt126 = dfa126.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(126);}

            	    switch (alt126) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:27: ( ( ws )? COMMA )=> ( ws )? COMMA
            	            {
            	            dbg.location(627,40);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:40: ( ws )?
            	            int alt125=2;
            	            try { dbg.enterSubRule(125);
            	            try { dbg.enterDecision(125, decisionCanBacktrack[125]);

            	            int LA125_0 = input.LA(1);

            	            if ( ((LA125_0>=WS && LA125_0<=COMMENT)) ) {
            	                alt125=1;
            	            }
            	            } finally {dbg.exitDecision(125);}

            	            switch (alt125) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:40: ws
            	                    {
            	                    dbg.location(627,40);
            	                    pushFollow(FOLLOW_ws_in_sass_map_pairs2605);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(125);}

            	            dbg.location(627,44);
            	            match(input,COMMA,FOLLOW_COMMA_in_sass_map_pairs2608); if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(126);}

            	    dbg.location(627,52);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:52: ( ws )?
            	    int alt127=2;
            	    try { dbg.enterSubRule(127);
            	    try { dbg.enterDecision(127, decisionCanBacktrack[127]);

            	    int LA127_0 = input.LA(1);

            	    if ( ((LA127_0>=WS && LA127_0<=COMMENT)) ) {
            	        alt127=1;
            	    }
            	    } finally {dbg.exitDecision(127);}

            	    switch (alt127) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:52: ws
            	            {
            	            dbg.location(627,52);
            	            pushFollow(FOLLOW_ws_in_sass_map_pairs2612);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(127);}


            	    }


            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:10: ( COMMA ( ws )? )
            	    {
            	    dbg.location(629,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:10: ( COMMA ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:12: COMMA ( ws )?
            	    {
            	    dbg.location(629,12);
            	    match(input,COMMA,FOLLOW_COMMA_in_sass_map_pairs2639); if (state.failed) return ;
            	    dbg.location(629,18);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:18: ( ws )?
            	    int alt128=2;
            	    try { dbg.enterSubRule(128);
            	    try { dbg.enterDecision(128, decisionCanBacktrack[128]);

            	    int LA128_0 = input.LA(1);

            	    if ( ((LA128_0>=WS && LA128_0<=COMMENT)) ) {
            	        alt128=1;
            	    }
            	    } finally {dbg.exitDecision(128);}

            	    switch (alt128) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:18: ws
            	            {
            	            dbg.location(629,18);
            	            pushFollow(FOLLOW_ws_in_sass_map_pairs2641);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(128);}


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt129 >= 1 ) break loop129;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(129, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt129++;
            } while (true);
            } finally {dbg.exitSubRule(129);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(631, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_map_pairs");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_map_pairs"


    // $ANTLR start "sass_map_pair"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:633:1: sass_map_pair : property ( ws )? COLON ( ws )? cp_expression ( ( ws )? prio )? ;
    public final void sass_map_pair() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_map_pair");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(633, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:634:5: ( property ( ws )? COLON ( ws )? cp_expression ( ( ws )? prio )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:9: property ( ws )? COLON ( ws )? cp_expression ( ( ws )? prio )?
            {
            dbg.location(635,9);
            pushFollow(FOLLOW_property_in_sass_map_pair2676);
            property();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(635,18);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:18: ( ws )?
            int alt130=2;
            try { dbg.enterSubRule(130);
            try { dbg.enterDecision(130, decisionCanBacktrack[130]);

            int LA130_0 = input.LA(1);

            if ( ((LA130_0>=WS && LA130_0<=COMMENT)) ) {
                alt130=1;
            }
            } finally {dbg.exitDecision(130);}

            switch (alt130) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:18: ws
                    {
                    dbg.location(635,18);
                    pushFollow(FOLLOW_ws_in_sass_map_pair2678);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(130);}

            dbg.location(635,22);
            match(input,COLON,FOLLOW_COLON_in_sass_map_pair2681); if (state.failed) return ;
            dbg.location(635,28);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:28: ( ws )?
            int alt131=2;
            try { dbg.enterSubRule(131);
            try { dbg.enterDecision(131, decisionCanBacktrack[131]);

            int LA131_0 = input.LA(1);

            if ( ((LA131_0>=WS && LA131_0<=COMMENT)) ) {
                alt131=1;
            }
            } finally {dbg.exitDecision(131);}

            switch (alt131) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:28: ws
                    {
                    dbg.location(635,28);
                    pushFollow(FOLLOW_ws_in_sass_map_pair2683);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(131);}

            dbg.location(635,32);
            pushFollow(FOLLOW_cp_expression_in_sass_map_pair2686);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(635,46);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:46: ( ( ws )? prio )?
            int alt133=2;
            try { dbg.enterSubRule(133);
            try { dbg.enterDecision(133, decisionCanBacktrack[133]);

            try {
                isCyclicDecision = true;
                alt133 = dfa133.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(133);}

            switch (alt133) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:47: ( ws )? prio
                    {
                    dbg.location(635,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:47: ( ws )?
                    int alt132=2;
                    try { dbg.enterSubRule(132);
                    try { dbg.enterDecision(132, decisionCanBacktrack[132]);

                    int LA132_0 = input.LA(1);

                    if ( ((LA132_0>=WS && LA132_0<=COMMENT)) ) {
                        alt132=1;
                    }
                    } finally {dbg.exitDecision(132);}

                    switch (alt132) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:47: ws
                            {
                            dbg.location(635,47);
                            pushFollow(FOLLOW_ws_in_sass_map_pair2689);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(132);}

                    dbg.location(635,51);
                    pushFollow(FOLLOW_prio_in_sass_map_pair2692);
                    prio();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(133);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(636, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_map_pair");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_map_pair"


    // $ANTLR start "rule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:638:1: rule : selectorsGroup ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void rule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "rule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(638, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:5: ( selectorsGroup ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:640:5: selectorsGroup ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(640,5);
            pushFollow(FOLLOW_selectorsGroup_in_rule2715);
            selectorsGroup();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(640,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:640:20: ( ws )?
            int alt134=2;
            try { dbg.enterSubRule(134);
            try { dbg.enterDecision(134, decisionCanBacktrack[134]);

            int LA134_0 = input.LA(1);

            if ( ((LA134_0>=WS && LA134_0<=COMMENT)) ) {
                alt134=1;
            }
            } finally {dbg.exitDecision(134);}

            switch (alt134) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:640:20: ws
                    {
                    dbg.location(640,20);
                    pushFollow(FOLLOW_ws_in_rule2717);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(134);}

            dbg.location(641,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_rule2724); if (state.failed) return ;
            dbg.location(641,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:641:12: ( ws )?
            int alt135=2;
            try { dbg.enterSubRule(135);
            try { dbg.enterDecision(135, decisionCanBacktrack[135]);

            int LA135_0 = input.LA(1);

            if ( ((LA135_0>=WS && LA135_0<=COMMENT)) ) {
                alt135=1;
            }
            } finally {dbg.exitDecision(135);}

            switch (alt135) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:641:12: ws
                    {
                    dbg.location(641,12);
                    pushFollow(FOLLOW_ws_in_rule2726);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(135);}

            dbg.location(641,16);
            pushFollow(FOLLOW_syncToFollow_in_rule2729);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(642,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:642:9: ( declarations )?
            int alt136=2;
            try { dbg.enterSubRule(136);
            try { dbg.enterDecision(136, decisionCanBacktrack[136]);

            int LA136_0 = input.LA(1);

            if ( ((LA136_0>=NAMESPACE_SYM && LA136_0<=IDENT)||(LA136_0>=CHARSET_SYM && LA136_0<=COMMA)||LA136_0==MEDIA_SYM||(LA136_0>=GEN && LA136_0<=MOZ_DOCUMENT_SYM)||LA136_0==WEBKIT_KEYFRAMES_SYM||(LA136_0>=PAGE_SYM && LA136_0<=RIGHTBOTTOM_SYM)||(LA136_0>=MINUS && LA136_0<=PIPE)||LA136_0==LESS_AND||(LA136_0>=RBRACKET && LA136_0<=SASS_VAR)||(LA136_0>=SASS_CONTENT && LA136_0<=SASS_WHILE)||LA136_0==AT_SIGN) ) {
                alt136=1;
            }
            } finally {dbg.exitDecision(136);}

            switch (alt136) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:642:9: declarations
                    {
                    dbg.location(642,9);
                    pushFollow(FOLLOW_declarations_in_rule2739);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(136);}

            dbg.location(643,5);
            match(input,RBRACE,FOLLOW_RBRACE_in_rule2746); if (state.failed) return ;

            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(RBRACE));
                    input.consume(); //consume the RBRACE as well
                
        }
        finally {
        }
        dbg.location(644, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "rule"


    // $ANTLR start "declarations"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:651:1: declarations : ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
    public final void declarations() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "declarations");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(651, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:652:5: ( ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:653:5: ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            {
            dbg.location(653,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:653:5: ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            int cnt141=0;
            try { dbg.enterSubRule(141);

            loop141:
            do {
                int alt141=3;
                try { dbg.enterDecision(141, decisionCanBacktrack[141]);

                int LA141_0 = input.LA(1);

                if ( (LA141_0==NAMESPACE_SYM||LA141_0==IDENT||(LA141_0>=CHARSET_SYM && LA141_0<=COMMA)||LA141_0==MEDIA_SYM||(LA141_0>=GEN && LA141_0<=MOZ_DOCUMENT_SYM)||LA141_0==WEBKIT_KEYFRAMES_SYM||(LA141_0>=PAGE_SYM && LA141_0<=RIGHTBOTTOM_SYM)||(LA141_0>=MINUS && LA141_0<=PIPE)||LA141_0==LESS_AND||(LA141_0>=RBRACKET && LA141_0<=SASS_VAR)||(LA141_0>=SASS_CONTENT && LA141_0<=SASS_WHILE)||LA141_0==AT_SIGN) ) {
                    alt141=1;
                }
                else if ( (LA141_0==SEMI) ) {
                    alt141=2;
                }


                } finally {dbg.exitDecision(141);}

                switch (alt141) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:10: ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    {
            	    dbg.location(654,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:10: ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:12: declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
            	    {
            	    dbg.location(654,12);
            	    pushFollow(FOLLOW_declaration_in_declarations2789);
            	    declaration();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(654,24);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:24: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
            	    int alt138=2;
            	    try { dbg.enterSubRule(138);
            	    try { dbg.enterDecision(138, decisionCanBacktrack[138]);

            	    try {
            	        isCyclicDecision = true;
            	        alt138 = dfa138.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(138);}

            	    switch (alt138) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:25: ( ( ws )? SEMI )=> ( ws )? SEMI
            	            {
            	            dbg.location(654,37);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:37: ( ws )?
            	            int alt137=2;
            	            try { dbg.enterSubRule(137);
            	            try { dbg.enterDecision(137, decisionCanBacktrack[137]);

            	            int LA137_0 = input.LA(1);

            	            if ( ((LA137_0>=WS && LA137_0<=COMMENT)) ) {
            	                alt137=1;
            	            }
            	            } finally {dbg.exitDecision(137);}

            	            switch (alt137) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:37: ws
            	                    {
            	                    dbg.location(654,37);
            	                    pushFollow(FOLLOW_ws_in_declarations2799);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(137);}

            	            dbg.location(654,41);
            	            match(input,SEMI,FOLLOW_SEMI_in_declarations2802); if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(138);}

            	    dbg.location(654,48);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:48: ( ws )?
            	    int alt139=2;
            	    try { dbg.enterSubRule(139);
            	    try { dbg.enterDecision(139, decisionCanBacktrack[139]);

            	    int LA139_0 = input.LA(1);

            	    if ( ((LA139_0>=WS && LA139_0<=COMMENT)) ) {
            	        alt139=1;
            	    }
            	    } finally {dbg.exitDecision(139);}

            	    switch (alt139) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:48: ws
            	            {
            	            dbg.location(654,48);
            	            pushFollow(FOLLOW_ws_in_declarations2806);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(139);}


            	    }


            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:10: ( SEMI ( ws )? )
            	    {
            	    dbg.location(656,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:10: ( SEMI ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:12: SEMI ( ws )?
            	    {
            	    dbg.location(656,12);
            	    match(input,SEMI,FOLLOW_SEMI_in_declarations2833); if (state.failed) return ;
            	    dbg.location(656,17);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:17: ( ws )?
            	    int alt140=2;
            	    try { dbg.enterSubRule(140);
            	    try { dbg.enterDecision(140, decisionCanBacktrack[140]);

            	    int LA140_0 = input.LA(1);

            	    if ( ((LA140_0>=WS && LA140_0<=COMMENT)) ) {
            	        alt140=1;
            	    }
            	    } finally {dbg.exitDecision(140);}

            	    switch (alt140) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:17: ws
            	            {
            	            dbg.location(656,17);
            	            pushFollow(FOLLOW_ws_in_declarations2835);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(140);}


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt141 >= 1 ) break loop141;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(141, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt141++;
            } while (true);
            } finally {dbg.exitSubRule(141);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(658, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "declarations");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "declarations"


    // $ANTLR start "declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:1: declaration : ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_map )=> sass_map | ( sass_nested_properties )=> sass_nested_properties | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( selectorsGroup ( ws )? LBRACE )=> rule | {...}? at_rule | {...}? sass_control | {...}? sass_extend | {...}? sass_debug | {...}? sass_content | {...}? sass_function_return | {...}? importItem | GEN );
    public final void declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(660, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:661:5: ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_map )=> sass_map | ( sass_nested_properties )=> sass_nested_properties | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( selectorsGroup ( ws )? LBRACE )=> rule | {...}? at_rule | {...}? sass_control | {...}? sass_extend | {...}? sass_debug | {...}? sass_content | {...}? sass_function_return | {...}? importItem | GEN )
            int alt146=17;
            try { dbg.enterDecision(146, decisionCanBacktrack[146]);

            try {
                isCyclicDecision = true;
                alt146 = dfa146.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(146);}

            switch (alt146) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:662:5: ( cp_variable_declaration )=> cp_variable_declaration
                    {
                    dbg.location(662,32);
                    pushFollow(FOLLOW_cp_variable_declaration_in_declaration2870);
                    cp_variable_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:663:7: ( sass_map )=> sass_map
                    {
                    dbg.location(663,20);
                    pushFollow(FOLLOW_sass_map_in_declaration2883);
                    sass_map();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:7: ( sass_nested_properties )=> sass_nested_properties
                    {
                    dbg.location(664,33);
                    pushFollow(FOLLOW_sass_nested_properties_in_declaration2895);
                    sass_nested_properties();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:665:7: ( propertyDeclaration )=> propertyDeclaration
                    {
                    dbg.location(665,30);
                    pushFollow(FOLLOW_propertyDeclaration_in_declaration2907);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:7: ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration
                    {
                    dbg.location(667,67);
                    pushFollow(FOLLOW_propertyDeclaration_in_declaration2946);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:7: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )=> cp_mixin_declaration
                    {
                    dbg.location(668,94);
                    pushFollow(FOLLOW_cp_mixin_declaration_in_declaration2991);
                    cp_mixin_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:7: ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
                    {
                    dbg.location(670,55);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isLessSource()");
                    }
                    dbg.location(670,73);
                    pushFollow(FOLLOW_cp_mixin_call_in_declaration3024);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(670,87);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:87: ( ( ws )? IMPORTANT_SYM )?
                    int alt143=2;
                    try { dbg.enterSubRule(143);
                    try { dbg.enterDecision(143, decisionCanBacktrack[143]);

                    try {
                        isCyclicDecision = true;
                        alt143 = dfa143.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(143);}

                    switch (alt143) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:88: ( ws )? IMPORTANT_SYM
                            {
                            dbg.location(670,88);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:88: ( ws )?
                            int alt142=2;
                            try { dbg.enterSubRule(142);
                            try { dbg.enterDecision(142, decisionCanBacktrack[142]);

                            int LA142_0 = input.LA(1);

                            if ( ((LA142_0>=WS && LA142_0<=COMMENT)) ) {
                                alt142=1;
                            }
                            } finally {dbg.exitDecision(142);}

                            switch (alt142) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:88: ws
                                    {
                                    dbg.location(670,88);
                                    pushFollow(FOLLOW_ws_in_declaration3027);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(142);}

                            dbg.location(670,92);
                            match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_declaration3030); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(143);}


                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:671:7: ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
                    {
                    dbg.location(671,25);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(671,43);
                    pushFollow(FOLLOW_cp_mixin_call_in_declaration3047);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(671,57);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:671:57: ( ( ws )? IMPORTANT_SYM )?
                    int alt145=2;
                    try { dbg.enterSubRule(145);
                    try { dbg.enterDecision(145, decisionCanBacktrack[145]);

                    try {
                        isCyclicDecision = true;
                        alt145 = dfa145.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(145);}

                    switch (alt145) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:671:58: ( ws )? IMPORTANT_SYM
                            {
                            dbg.location(671,58);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:671:58: ( ws )?
                            int alt144=2;
                            try { dbg.enterSubRule(144);
                            try { dbg.enterDecision(144, decisionCanBacktrack[144]);

                            int LA144_0 = input.LA(1);

                            if ( ((LA144_0>=WS && LA144_0<=COMMENT)) ) {
                                alt144=1;
                            }
                            } finally {dbg.exitDecision(144);}

                            switch (alt144) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:671:58: ws
                                    {
                                    dbg.location(671,58);
                                    pushFollow(FOLLOW_ws_in_declaration3050);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(144);}

                            dbg.location(671,62);
                            match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_declaration3053); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(145);}


                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:7: ( selectorsGroup ( ws )? LBRACE )=> rule
                    {
                    dbg.location(672,36);
                    pushFollow(FOLLOW_rule_in_declaration3072);
                    rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:673:7: {...}? at_rule
                    {
                    dbg.location(673,7);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isCssPreprocessorSource()");
                    }
                    dbg.location(673,36);
                    pushFollow(FOLLOW_at_rule_in_declaration3082);
                    at_rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:674:7: {...}? sass_control
                    {
                    dbg.location(674,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(674,25);
                    pushFollow(FOLLOW_sass_control_in_declaration3092);
                    sass_control();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:675:7: {...}? sass_extend
                    {
                    dbg.location(675,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(675,25);
                    pushFollow(FOLLOW_sass_extend_in_declaration3102);
                    sass_extend();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:676:7: {...}? sass_debug
                    {
                    dbg.location(676,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(676,25);
                    pushFollow(FOLLOW_sass_debug_in_declaration3112);
                    sass_debug();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:677:7: {...}? sass_content
                    {
                    dbg.location(677,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(677,25);
                    pushFollow(FOLLOW_sass_content_in_declaration3122);
                    sass_content();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:678:7: {...}? sass_function_return
                    {
                    dbg.location(678,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(678,25);
                    pushFollow(FOLLOW_sass_function_return_in_declaration3132);
                    sass_function_return();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:679:7: {...}? importItem
                    {
                    dbg.location(679,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(679,25);
                    pushFollow(FOLLOW_importItem_in_declaration3142);
                    importItem();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:680:7: GEN
                    {
                    dbg.location(680,7);
                    match(input,GEN,FOLLOW_GEN_in_declaration3150); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(SEMI));
                
        }
        finally {
        }
        dbg.location(681, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "declaration"


    // $ANTLR start "selectorsGroup"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:687:1: selectorsGroup : ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression | selector ( ( ws )? COMMA ( ws )? selector )* );
    public final void selectorsGroup() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "selectorsGroup");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(687, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:688:5: ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression | selector ( ( ws )? COMMA ( ws )? selector )* )
            int alt150=2;
            try { dbg.enterDecision(150, decisionCanBacktrack[150]);

            try {
                isCyclicDecision = true;
                alt150 = dfa150.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(150);}

            switch (alt150) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:690:9: ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression
                    {
                    dbg.location(690,60);
                    pushFollow(FOLLOW_sass_selector_interpolation_expression_in_selectorsGroup3213);
                    sass_selector_interpolation_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:692:9: selector ( ( ws )? COMMA ( ws )? selector )*
                    {
                    dbg.location(692,9);
                    pushFollow(FOLLOW_selector_in_selectorsGroup3226);
                    selector();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(692,18);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:692:18: ( ( ws )? COMMA ( ws )? selector )*
                    try { dbg.enterSubRule(149);

                    loop149:
                    do {
                        int alt149=2;
                        try { dbg.enterDecision(149, decisionCanBacktrack[149]);

                        try {
                            isCyclicDecision = true;
                            alt149 = dfa149.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(149);}

                        switch (alt149) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:692:19: ( ws )? COMMA ( ws )? selector
                    	    {
                    	    dbg.location(692,19);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:692:19: ( ws )?
                    	    int alt147=2;
                    	    try { dbg.enterSubRule(147);
                    	    try { dbg.enterDecision(147, decisionCanBacktrack[147]);

                    	    int LA147_0 = input.LA(1);

                    	    if ( ((LA147_0>=WS && LA147_0<=COMMENT)) ) {
                    	        alt147=1;
                    	    }
                    	    } finally {dbg.exitDecision(147);}

                    	    switch (alt147) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:692:19: ws
                    	            {
                    	            dbg.location(692,19);
                    	            pushFollow(FOLLOW_ws_in_selectorsGroup3229);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(147);}

                    	    dbg.location(692,23);
                    	    match(input,COMMA,FOLLOW_COMMA_in_selectorsGroup3232); if (state.failed) return ;
                    	    dbg.location(692,29);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:692:29: ( ws )?
                    	    int alt148=2;
                    	    try { dbg.enterSubRule(148);
                    	    try { dbg.enterDecision(148, decisionCanBacktrack[148]);

                    	    int LA148_0 = input.LA(1);

                    	    if ( ((LA148_0>=WS && LA148_0<=COMMENT)) ) {
                    	        alt148=1;
                    	    }
                    	    } finally {dbg.exitDecision(148);}

                    	    switch (alt148) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:692:29: ws
                    	            {
                    	            dbg.location(692,29);
                    	            pushFollow(FOLLOW_ws_in_selectorsGroup3234);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(148);}

                    	    dbg.location(692,33);
                    	    pushFollow(FOLLOW_selector_in_selectorsGroup3237);
                    	    selector();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop149;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(149);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(693, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "selectorsGroup");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "selectorsGroup"


    // $ANTLR start "selector"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:695:1: selector : ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )* ;
    public final void selector() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "selector");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(695, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:5: ( ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:8: ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )*
            {
            dbg.location(696,8);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:8: ( combinator ( ws )? )?
            int alt152=2;
            try { dbg.enterSubRule(152);
            try { dbg.enterDecision(152, decisionCanBacktrack[152]);

            int LA152_0 = input.LA(1);

            if ( ((LA152_0>=PLUS && LA152_0<=TILDE)) ) {
                alt152=1;
            }
            } finally {dbg.exitDecision(152);}

            switch (alt152) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:9: combinator ( ws )?
                    {
                    dbg.location(696,9);
                    pushFollow(FOLLOW_combinator_in_selector3258);
                    combinator();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(696,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:20: ( ws )?
                    int alt151=2;
                    try { dbg.enterSubRule(151);
                    try { dbg.enterDecision(151, decisionCanBacktrack[151]);

                    int LA151_0 = input.LA(1);

                    if ( ((LA151_0>=WS && LA151_0<=COMMENT)) ) {
                        alt151=1;
                    }
                    } finally {dbg.exitDecision(151);}

                    switch (alt151) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:20: ws
                            {
                            dbg.location(696,20);
                            pushFollow(FOLLOW_ws_in_selector3260);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(151);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(152);}

            dbg.location(696,26);
            pushFollow(FOLLOW_simpleSelectorSequence_in_selector3265);
            simpleSelectorSequence();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(696,49);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:49: ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )*
            try { dbg.enterSubRule(157);

            loop157:
            do {
                int alt157=2;
                try { dbg.enterDecision(157, decisionCanBacktrack[157]);

                try {
                    isCyclicDecision = true;
                    alt157 = dfa157.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(157);}

                switch (alt157) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:51: ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence
            	    {
            	    dbg.location(696,51);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:51: ( ( ( ws )? combinator ( ws )? ) | ( ws )? )
            	    int alt156=2;
            	    try { dbg.enterSubRule(156);
            	    try { dbg.enterDecision(156, decisionCanBacktrack[156]);

            	    try {
            	        isCyclicDecision = true;
            	        alt156 = dfa156.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(156);}

            	    switch (alt156) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:52: ( ( ws )? combinator ( ws )? )
            	            {
            	            dbg.location(696,52);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:52: ( ( ws )? combinator ( ws )? )
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:53: ( ws )? combinator ( ws )?
            	            {
            	            dbg.location(696,53);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:53: ( ws )?
            	            int alt153=2;
            	            try { dbg.enterSubRule(153);
            	            try { dbg.enterDecision(153, decisionCanBacktrack[153]);

            	            int LA153_0 = input.LA(1);

            	            if ( ((LA153_0>=WS && LA153_0<=COMMENT)) ) {
            	                alt153=1;
            	            }
            	            } finally {dbg.exitDecision(153);}

            	            switch (alt153) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:53: ws
            	                    {
            	                    dbg.location(696,53);
            	                    pushFollow(FOLLOW_ws_in_selector3271);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(153);}

            	            dbg.location(696,57);
            	            pushFollow(FOLLOW_combinator_in_selector3274);
            	            combinator();

            	            state._fsp--;
            	            if (state.failed) return ;
            	            dbg.location(696,68);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:68: ( ws )?
            	            int alt154=2;
            	            try { dbg.enterSubRule(154);
            	            try { dbg.enterDecision(154, decisionCanBacktrack[154]);

            	            int LA154_0 = input.LA(1);

            	            if ( ((LA154_0>=WS && LA154_0<=COMMENT)) ) {
            	                alt154=1;
            	            }
            	            } finally {dbg.exitDecision(154);}

            	            switch (alt154) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:68: ws
            	                    {
            	                    dbg.location(696,68);
            	                    pushFollow(FOLLOW_ws_in_selector3276);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(154);}


            	            }


            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:73: ( ws )?
            	            {
            	            dbg.location(696,73);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:73: ( ws )?
            	            int alt155=2;
            	            try { dbg.enterSubRule(155);
            	            try { dbg.enterDecision(155, decisionCanBacktrack[155]);

            	            int LA155_0 = input.LA(1);

            	            if ( ((LA155_0>=WS && LA155_0<=COMMENT)) ) {
            	                alt155=1;
            	            }
            	            } finally {dbg.exitDecision(155);}

            	            switch (alt155) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:73: ws
            	                    {
            	                    dbg.location(696,73);
            	                    pushFollow(FOLLOW_ws_in_selector3280);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(155);}


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(156);}

            	    dbg.location(696,78);
            	    pushFollow(FOLLOW_simpleSelectorSequence_in_selector3284);
            	    simpleSelectorSequence();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop157;
                }
            } while (true);
            } finally {dbg.exitSubRule(157);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(697, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "selector");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "selector"


    // $ANTLR start "combinator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:699:1: combinator : ( PLUS | GREATER | TILDE );
    public final void combinator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "combinator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(699, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:700:5: ( PLUS | GREATER | TILDE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(700,5);
            if ( (input.LA(1)>=PLUS && input.LA(1)<=TILDE) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(702, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "combinator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "combinator"


    // $ANTLR start "simpleSelectorSequence"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:704:1: simpleSelectorSequence : ( ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* ) | elementSubsequent ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* );
    public final void simpleSelectorSequence() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "simpleSelectorSequence");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(704, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:705:2: ( ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* ) | elementSubsequent ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* )
            int alt162=2;
            try { dbg.enterDecision(162, decisionCanBacktrack[162]);

            int LA162_0 = input.LA(1);

            if ( (LA162_0==IDENT||LA162_0==GEN||(LA162_0>=STAR && LA162_0<=PIPE)||LA162_0==LESS_AND) ) {
                alt162=1;
            }
            else if ( (LA162_0==COLON||(LA162_0>=HASH_SYMBOL && LA162_0<=SASS_EXTEND_ONLY_SELECTOR)||LA162_0==AT_SIGN) ) {
                alt162=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(162);}

            switch (alt162) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:2: ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* )
                    {
                    dbg.location(706,2);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:2: ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:4: typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    {
                    dbg.location(706,4);
                    pushFollow(FOLLOW_typeSelector_in_simpleSelectorSequence3332);
                    typeSelector();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(706,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:17: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    try { dbg.enterSubRule(159);

                    loop159:
                    do {
                        int alt159=2;
                        try { dbg.enterDecision(159, decisionCanBacktrack[159]);

                        try {
                            isCyclicDecision = true;
                            alt159 = dfa159.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(159);}

                        switch (alt159) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:18: ( ( ws )? esPred )=> ( ws )? elementSubsequent
                    	    {
                    	    dbg.location(706,32);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:32: ( ws )?
                    	    int alt158=2;
                    	    try { dbg.enterSubRule(158);
                    	    try { dbg.enterDecision(158, decisionCanBacktrack[158]);

                    	    int LA158_0 = input.LA(1);

                    	    if ( ((LA158_0>=WS && LA158_0<=COMMENT)) ) {
                    	        alt158=1;
                    	    }
                    	    } finally {dbg.exitDecision(158);}

                    	    switch (alt158) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:32: ws
                    	            {
                    	            dbg.location(706,32);
                    	            pushFollow(FOLLOW_ws_in_simpleSelectorSequence3342);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(158);}

                    	    dbg.location(706,36);
                    	    pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence3345);
                    	    elementSubsequent();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop159;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(159);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:2: elementSubsequent ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    {
                    dbg.location(708,2);
                    pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence3355);
                    elementSubsequent();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(708,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:20: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    try { dbg.enterSubRule(161);

                    loop161:
                    do {
                        int alt161=2;
                        try { dbg.enterDecision(161, decisionCanBacktrack[161]);

                        try {
                            isCyclicDecision = true;
                            alt161 = dfa161.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(161);}

                        switch (alt161) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:21: ( ( ws )? esPred )=> ( ws )? elementSubsequent
                    	    {
                    	    dbg.location(708,35);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:35: ( ws )?
                    	    int alt160=2;
                    	    try { dbg.enterSubRule(160);
                    	    try { dbg.enterDecision(160, decisionCanBacktrack[160]);

                    	    int LA160_0 = input.LA(1);

                    	    if ( ((LA160_0>=WS && LA160_0<=COMMENT)) ) {
                    	        alt160=1;
                    	    }
                    	    } finally {dbg.exitDecision(160);}

                    	    switch (alt160) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:35: ws
                    	            {
                    	            dbg.location(708,35);
                    	            pushFollow(FOLLOW_ws_in_simpleSelectorSequence3365);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(160);}

                    	    dbg.location(708,39);
                    	    pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence3368);
                    	    elementSubsequent();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop161;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(161);}


                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                        reportError(rce);
                        consumeUntil(input, BitSet.of(LBRACE));
                    
        }
        finally {
        }
        dbg.location(709, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "simpleSelectorSequence");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "simpleSelectorSequence"


    // $ANTLR start "esPred"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:716:1: esPred : ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR );
    public final void esPred() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "esPred");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(716, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:717:5: ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(717,5);
            if ( input.LA(1)==COLON||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=SASS_EXTEND_ONLY_SELECTOR) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(718, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "esPred");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "esPred"


    // $ANTLR start "typeSelector"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:720:1: typeSelector options {k=2; } : ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName ;
    public final void typeSelector() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "typeSelector");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(720, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:722:3: ( ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:722:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName
            {
            dbg.location(722,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:722:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )?
            int alt163=2;
            try { dbg.enterSubRule(163);
            try { dbg.enterDecision(163, decisionCanBacktrack[163]);

            int LA163_0 = input.LA(1);

            if ( (LA163_0==IDENT) ) {
                int LA163_1 = input.LA(2);

                if ( (synpred32_Css3()) ) {
                    alt163=1;
                }
            }
            else if ( (LA163_0==STAR) ) {
                int LA163_2 = input.LA(2);

                if ( (synpred32_Css3()) ) {
                    alt163=1;
                }
            }
            else if ( (LA163_0==PIPE) && (synpred32_Css3())) {
                alt163=1;
            }
            } finally {dbg.exitDecision(163);}

            switch (alt163) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:722:7: ( ( IDENT | STAR )? PIPE )=> namespacePrefix
                    {
                    dbg.location(722,31);
                    pushFollow(FOLLOW_namespacePrefix_in_typeSelector3457);
                    namespacePrefix();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(163);}

            dbg.location(722,49);
            pushFollow(FOLLOW_elementName_in_typeSelector3461);
            elementName();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(723, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "typeSelector");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "typeSelector"


    // $ANTLR start "namespacePrefix"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:725:1: namespacePrefix : ( namespacePrefixName | STAR )? PIPE ;
    public final void namespacePrefix() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespacePrefix");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(725, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:726:3: ( ( namespacePrefixName | STAR )? PIPE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:726:5: ( namespacePrefixName | STAR )? PIPE
            {
            dbg.location(726,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:726:5: ( namespacePrefixName | STAR )?
            int alt164=3;
            try { dbg.enterSubRule(164);
            try { dbg.enterDecision(164, decisionCanBacktrack[164]);

            int LA164_0 = input.LA(1);

            if ( (LA164_0==IDENT) ) {
                alt164=1;
            }
            else if ( (LA164_0==STAR) ) {
                alt164=2;
            }
            } finally {dbg.exitDecision(164);}

            switch (alt164) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:726:7: namespacePrefixName
                    {
                    dbg.location(726,7);
                    pushFollow(FOLLOW_namespacePrefixName_in_namespacePrefix3476);
                    namespacePrefixName();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:726:29: STAR
                    {
                    dbg.location(726,29);
                    match(input,STAR,FOLLOW_STAR_in_namespacePrefix3480); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(164);}

            dbg.location(726,36);
            match(input,PIPE,FOLLOW_PIPE_in_namespacePrefix3484); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(727, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespacePrefix");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespacePrefix"


    // $ANTLR start "elementSubsequent"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:1: elementSubsequent : ({...}? sass_extend_only_selector | {...}? less_selector_interpolation | cssId | cssClass | slAttribute | pseudo ) ;
    public final void elementSubsequent() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "elementSubsequent");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(730, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:731:5: ( ({...}? sass_extend_only_selector | {...}? less_selector_interpolation | cssId | cssClass | slAttribute | pseudo ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:732:5: ({...}? sass_extend_only_selector | {...}? less_selector_interpolation | cssId | cssClass | slAttribute | pseudo )
            {
            dbg.location(732,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:732:5: ({...}? sass_extend_only_selector | {...}? less_selector_interpolation | cssId | cssClass | slAttribute | pseudo )
            int alt165=6;
            try { dbg.enterSubRule(165);
            try { dbg.enterDecision(165, decisionCanBacktrack[165]);

            switch ( input.LA(1) ) {
            case SASS_EXTEND_ONLY_SELECTOR:
                {
                alt165=1;
                }
                break;
            case AT_SIGN:
                {
                alt165=2;
                }
                break;
            case HASH_SYMBOL:
            case HASH:
                {
                alt165=3;
                }
                break;
            case DOT:
                {
                alt165=4;
                }
                break;
            case LBRACKET:
                {
                alt165=5;
                }
                break;
            case COLON:
            case DCOLON:
                {
                alt165=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(165);}

            switch (alt165) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:733:9: {...}? sass_extend_only_selector
                    {
                    dbg.location(733,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "elementSubsequent", "isScssSource()");
                    }
                    dbg.location(733,27);
                    pushFollow(FOLLOW_sass_extend_only_selector_in_elementSubsequent3516);
                    sass_extend_only_selector();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:734:11: {...}? less_selector_interpolation
                    {
                    dbg.location(734,11);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "elementSubsequent", "isLessSource()");
                    }
                    dbg.location(734,29);
                    pushFollow(FOLLOW_less_selector_interpolation_in_elementSubsequent3530);
                    less_selector_interpolation();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:735:8: cssId
                    {
                    dbg.location(735,8);
                    pushFollow(FOLLOW_cssId_in_elementSubsequent3540);
                    cssId();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:736:8: cssClass
                    {
                    dbg.location(736,8);
                    pushFollow(FOLLOW_cssClass_in_elementSubsequent3549);
                    cssClass();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:737:11: slAttribute
                    {
                    dbg.location(737,11);
                    pushFollow(FOLLOW_slAttribute_in_elementSubsequent3561);
                    slAttribute();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:738:11: pseudo
                    {
                    dbg.location(738,11);
                    pushFollow(FOLLOW_pseudo_in_elementSubsequent3573);
                    pseudo();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(165);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(740, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "elementSubsequent");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "elementSubsequent"


    // $ANTLR start "cssId"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:743:1: cssId : ( HASH | ( HASH_SYMBOL ( NAME | {...}? less_selector_interpolation ) ) );
    public final void cssId() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cssId");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(743, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:744:5: ( HASH | ( HASH_SYMBOL ( NAME | {...}? less_selector_interpolation ) ) )
            int alt167=2;
            try { dbg.enterDecision(167, decisionCanBacktrack[167]);

            int LA167_0 = input.LA(1);

            if ( (LA167_0==HASH) ) {
                alt167=1;
            }
            else if ( (LA167_0==HASH_SYMBOL) ) {
                alt167=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(167);}

            switch (alt167) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:744:7: HASH
                    {
                    dbg.location(744,7);
                    match(input,HASH,FOLLOW_HASH_in_cssId3597); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:9: ( HASH_SYMBOL ( NAME | {...}? less_selector_interpolation ) )
                    {
                    dbg.location(746,9);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:9: ( HASH_SYMBOL ( NAME | {...}? less_selector_interpolation ) )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:11: HASH_SYMBOL ( NAME | {...}? less_selector_interpolation )
                    {
                    dbg.location(746,11);
                    match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_cssId3617); if (state.failed) return ;
                    dbg.location(747,13);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:747:13: ( NAME | {...}? less_selector_interpolation )
                    int alt166=2;
                    try { dbg.enterSubRule(166);
                    try { dbg.enterDecision(166, decisionCanBacktrack[166]);

                    int LA166_0 = input.LA(1);

                    if ( (LA166_0==NAME) ) {
                        alt166=1;
                    }
                    else if ( (LA166_0==AT_SIGN) ) {
                        alt166=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 166, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(166);}

                    switch (alt166) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:747:15: NAME
                            {
                            dbg.location(747,15);
                            match(input,NAME,FOLLOW_NAME_in_cssId3633); if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:748:17: {...}? less_selector_interpolation
                            {
                            dbg.location(748,17);
                            if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                throw new FailedPredicateException(input, "cssId", "isLessSource()");
                            }
                            dbg.location(748,35);
                            pushFollow(FOLLOW_less_selector_interpolation_in_cssId3653);
                            less_selector_interpolation();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(166);}


                    }


                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(WS, IDENT, LBRACE));
                
        }
        finally {
        }
        dbg.location(751, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cssId");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cssId"


    // $ANTLR start "cssClass"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:757:1: cssClass : DOT ( IDENT | LESS_IMPORT_TYPE | GEN | {...}? less_selector_interpolation ) ;
    public final void cssClass() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cssClass");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(757, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:758:5: ( DOT ( IDENT | LESS_IMPORT_TYPE | GEN | {...}? less_selector_interpolation ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:758:7: DOT ( IDENT | LESS_IMPORT_TYPE | GEN | {...}? less_selector_interpolation )
            {
            dbg.location(758,7);
            match(input,DOT,FOLLOW_DOT_in_cssClass3704); if (state.failed) return ;
            dbg.location(759,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:759:9: ( IDENT | LESS_IMPORT_TYPE | GEN | {...}? less_selector_interpolation )
            int alt168=4;
            try { dbg.enterSubRule(168);
            try { dbg.enterDecision(168, decisionCanBacktrack[168]);

            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt168=1;
                }
                break;
            case LESS_IMPORT_TYPE:
                {
                alt168=2;
                }
                break;
            case GEN:
                {
                alt168=3;
                }
                break;
            case AT_SIGN:
                {
                alt168=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(168);}

            switch (alt168) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:760:13: IDENT
                    {
                    dbg.location(760,13);
                    match(input,IDENT,FOLLOW_IDENT_in_cssClass3728); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:761:15: LESS_IMPORT_TYPE
                    {
                    dbg.location(761,15);
                    match(input,LESS_IMPORT_TYPE,FOLLOW_LESS_IMPORT_TYPE_in_cssClass3744); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:762:15: GEN
                    {
                    dbg.location(762,15);
                    match(input,GEN,FOLLOW_GEN_in_cssClass3760); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:15: {...}? less_selector_interpolation
                    {
                    dbg.location(763,15);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cssClass", "isLessSource()");
                    }
                    dbg.location(763,33);
                    pushFollow(FOLLOW_less_selector_interpolation_in_cssClass3778);
                    less_selector_interpolation();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(168);}


            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(WS, IDENT, LBRACE));
                
        }
        finally {
        }
        dbg.location(765, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cssClass");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cssClass"


    // $ANTLR start "elementName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:772:1: elementName : ( IDENT | GEN | LESS_AND | STAR );
    public final void elementName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "elementName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(772, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:5: ( IDENT | GEN | LESS_AND | STAR )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(773,5);
            if ( input.LA(1)==IDENT||input.LA(1)==GEN||input.LA(1)==STAR||input.LA(1)==LESS_AND ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(774, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "elementName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "elementName"


    // $ANTLR start "slAttribute"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:776:1: slAttribute : LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET ;
    public final void slAttribute() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "slAttribute");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(776, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:5: ( LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:777:7: LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET
            {
            dbg.location(777,7);
            match(input,LBRACKET,FOLLOW_LBRACKET_in_slAttribute3845); if (state.failed) return ;
            dbg.location(778,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:6: ( namespacePrefix )?
            int alt169=2;
            try { dbg.enterSubRule(169);
            try { dbg.enterDecision(169, decisionCanBacktrack[169]);

            int LA169_0 = input.LA(1);

            if ( (LA169_0==IDENT) ) {
                int LA169_1 = input.LA(2);

                if ( (LA169_1==PIPE) ) {
                    alt169=1;
                }
            }
            else if ( ((LA169_0>=STAR && LA169_0<=PIPE)) ) {
                alt169=1;
            }
            } finally {dbg.exitDecision(169);}

            switch (alt169) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:6: namespacePrefix
                    {
                    dbg.location(778,6);
                    pushFollow(FOLLOW_namespacePrefix_in_slAttribute3852);
                    namespacePrefix();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(169);}

            dbg.location(778,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:23: ( ws )?
            int alt170=2;
            try { dbg.enterSubRule(170);
            try { dbg.enterDecision(170, decisionCanBacktrack[170]);

            int LA170_0 = input.LA(1);

            if ( ((LA170_0>=WS && LA170_0<=COMMENT)) ) {
                alt170=1;
            }
            } finally {dbg.exitDecision(170);}

            switch (alt170) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:23: ws
                    {
                    dbg.location(778,23);
                    pushFollow(FOLLOW_ws_in_slAttribute3855);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(170);}

            dbg.location(779,9);
            pushFollow(FOLLOW_slAttributeName_in_slAttribute3866);
            slAttributeName();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(779,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:25: ( ws )?
            int alt171=2;
            try { dbg.enterSubRule(171);
            try { dbg.enterDecision(171, decisionCanBacktrack[171]);

            int LA171_0 = input.LA(1);

            if ( ((LA171_0>=WS && LA171_0<=COMMENT)) ) {
                alt171=1;
            }
            } finally {dbg.exitDecision(171);}

            switch (alt171) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:25: ws
                    {
                    dbg.location(779,25);
                    pushFollow(FOLLOW_ws_in_slAttribute3868);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(171);}

            dbg.location(781,13);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:781:13: ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )?
            int alt174=2;
            try { dbg.enterSubRule(174);
            try { dbg.enterDecision(174, decisionCanBacktrack[174]);

            int LA174_0 = input.LA(1);

            if ( ((LA174_0>=OPEQ && LA174_0<=CONTAINS)) ) {
                alt174=1;
            }
            } finally {dbg.exitDecision(174);}

            switch (alt174) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:17: ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )?
                    {
                    dbg.location(782,17);
                    if ( (input.LA(1)>=OPEQ && input.LA(1)<=CONTAINS) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(790,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:790:17: ( ws )?
                    int alt172=2;
                    try { dbg.enterSubRule(172);
                    try { dbg.enterDecision(172, decisionCanBacktrack[172]);

                    int LA172_0 = input.LA(1);

                    if ( ((LA172_0>=WS && LA172_0<=COMMENT)) ) {
                        alt172=1;
                    }
                    } finally {dbg.exitDecision(172);}

                    switch (alt172) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:790:17: ws
                            {
                            dbg.location(790,17);
                            pushFollow(FOLLOW_ws_in_slAttribute4082);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(172);}

                    dbg.location(791,17);
                    pushFollow(FOLLOW_slAttributeValue_in_slAttribute4101);
                    slAttributeValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(792,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:17: ( ws )?
                    int alt173=2;
                    try { dbg.enterSubRule(173);
                    try { dbg.enterDecision(173, decisionCanBacktrack[173]);

                    int LA173_0 = input.LA(1);

                    if ( ((LA173_0>=WS && LA173_0<=COMMENT)) ) {
                        alt173=1;
                    }
                    } finally {dbg.exitDecision(173);}

                    switch (alt173) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:17: ws
                            {
                            dbg.location(792,17);
                            pushFollow(FOLLOW_ws_in_slAttribute4119);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(173);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(174);}

            dbg.location(795,7);
            match(input,RBRACKET,FOLLOW_RBRACKET_in_slAttribute4144); if (state.failed) return ;

            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(IDENT, LBRACE));
                
        }
        finally {
        }
        dbg.location(796, 1);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "slAttribute");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "slAttribute"


    // $ANTLR start "slAttributeName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:803:1: slAttributeName : IDENT ;
    public final void slAttributeName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "slAttributeName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(803, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:804:2: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:804:4: IDENT
            {
            dbg.location(804,4);
            match(input,IDENT,FOLLOW_IDENT_in_slAttributeName4160); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(805, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "slAttributeName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "slAttributeName"


    // $ANTLR start "slAttributeValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:807:1: slAttributeValue : ( IDENT | STRING ) ;
    public final void slAttributeValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "slAttributeValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(807, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:808:2: ( ( IDENT | STRING ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:809:2: ( IDENT | STRING )
            {
            dbg.location(809,2);
            if ( (input.LA(1)>=IDENT && input.LA(1)<=STRING) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(813, 9);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "slAttributeValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "slAttributeValue"


    // $ANTLR start "pseudo"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:815:1: pseudo : ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) ) ;
    public final void pseudo() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "pseudo");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(815, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:816:5: ( ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:816:7: ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) )
            {
            dbg.location(816,7);
            if ( input.LA(1)==COLON||input.LA(1)==DCOLON ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(817,14);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:14: ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) )
            int alt183=2;
            try { dbg.enterSubRule(183);
            try { dbg.enterDecision(183, decisionCanBacktrack[183]);

            int LA183_0 = input.LA(1);

            if ( (LA183_0==IDENT||LA183_0==GEN) ) {
                alt183=1;
            }
            else if ( (LA183_0==NOT) ) {
                alt183=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 183, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(183);}

            switch (alt183) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:818:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
                    {
                    dbg.location(818,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:818:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:819:21: ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
                    {
                    dbg.location(819,21);
                    if ( input.LA(1)==IDENT||input.LA(1)==GEN ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(820,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:820:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
                    int alt179=2;
                    try { dbg.enterSubRule(179);
                    try { dbg.enterDecision(179, decisionCanBacktrack[179]);

                    try {
                        isCyclicDecision = true;
                        alt179 = dfa179.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(179);}

                    switch (alt179) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:25: ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN
                            {
                            dbg.location(821,25);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:25: ( ws )?
                            int alt175=2;
                            try { dbg.enterSubRule(175);
                            try { dbg.enterDecision(175, decisionCanBacktrack[175]);

                            int LA175_0 = input.LA(1);

                            if ( ((LA175_0>=WS && LA175_0<=COMMENT)) ) {
                                alt175=1;
                            }
                            } finally {dbg.exitDecision(175);}

                            switch (alt175) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:25: ws
                                    {
                                    dbg.location(821,25);
                                    pushFollow(FOLLOW_ws_in_pseudo4352);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(175);}

                            dbg.location(821,29);
                            match(input,LPAREN,FOLLOW_LPAREN_in_pseudo4355); if (state.failed) return ;
                            dbg.location(821,36);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:36: ( ws )?
                            int alt176=2;
                            try { dbg.enterSubRule(176);
                            try { dbg.enterDecision(176, decisionCanBacktrack[176]);

                            int LA176_0 = input.LA(1);

                            if ( ((LA176_0>=WS && LA176_0<=COMMENT)) ) {
                                alt176=1;
                            }
                            } finally {dbg.exitDecision(176);}

                            switch (alt176) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:36: ws
                                    {
                                    dbg.location(821,36);
                                    pushFollow(FOLLOW_ws_in_pseudo4357);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(176);}

                            dbg.location(821,40);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:40: ( ( expression ( ws )? ) | STAR )?
                            int alt178=3;
                            try { dbg.enterSubRule(178);
                            try { dbg.enterDecision(178, decisionCanBacktrack[178]);

                            int LA178_0 = input.LA(1);

                            if ( (LA178_0==NAMESPACE_SYM||(LA178_0>=IDENT && LA178_0<=IMPORT_SYM)||LA178_0==MEDIA_SYM||LA178_0==GEN||(LA178_0>=AT_IDENT && LA178_0<=MOZ_DOCUMENT_SYM)||(LA178_0>=WEBKIT_KEYFRAMES_SYM && LA178_0<=RIGHTBOTTOM_SYM)||(LA178_0>=MINUS && LA178_0<=PLUS)||(LA178_0>=TILDE && LA178_0<=HASH)||(LA178_0>=SASS_VAR && LA178_0<=PERCENTAGE_SYMBOL)||(LA178_0>=SASS_CONTENT && LA178_0<=SASS_WHILE)) ) {
                                alt178=1;
                            }
                            else if ( (LA178_0==STAR) ) {
                                alt178=2;
                            }
                            } finally {dbg.exitDecision(178);}

                            switch (alt178) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:42: ( expression ( ws )? )
                                    {
                                    dbg.location(821,42);
                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:42: ( expression ( ws )? )
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:43: expression ( ws )?
                                    {
                                    dbg.location(821,43);
                                    pushFollow(FOLLOW_expression_in_pseudo4363);
                                    expression();

                                    state._fsp--;
                                    if (state.failed) return ;
                                    dbg.location(821,54);
                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:54: ( ws )?
                                    int alt177=2;
                                    try { dbg.enterSubRule(177);
                                    try { dbg.enterDecision(177, decisionCanBacktrack[177]);

                                    int LA177_0 = input.LA(1);

                                    if ( ((LA177_0>=WS && LA177_0<=COMMENT)) ) {
                                        alt177=1;
                                    }
                                    } finally {dbg.exitDecision(177);}

                                    switch (alt177) {
                                        case 1 :
                                            dbg.enterAlt(1);

                                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:54: ws
                                            {
                                            dbg.location(821,54);
                                            pushFollow(FOLLOW_ws_in_pseudo4365);
                                            ws();

                                            state._fsp--;
                                            if (state.failed) return ;

                                            }
                                            break;

                                    }
                                    } finally {dbg.exitSubRule(177);}


                                    }


                                    }
                                    break;
                                case 2 :
                                    dbg.enterAlt(2);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:61: STAR
                                    {
                                    dbg.location(821,61);
                                    match(input,STAR,FOLLOW_STAR_in_pseudo4371); if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(178);}

                            dbg.location(821,69);
                            match(input,RPAREN,FOLLOW_RPAREN_in_pseudo4376); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(179);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:825:17: ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN )
                    {
                    dbg.location(825,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:825:17: ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:825:19: NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN
                    {
                    dbg.location(825,19);
                    match(input,NOT,FOLLOW_NOT_in_pseudo4455); if (state.failed) return ;
                    dbg.location(825,23);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:825:23: ( ws )?
                    int alt180=2;
                    try { dbg.enterSubRule(180);
                    try { dbg.enterDecision(180, decisionCanBacktrack[180]);

                    int LA180_0 = input.LA(1);

                    if ( ((LA180_0>=WS && LA180_0<=COMMENT)) ) {
                        alt180=1;
                    }
                    } finally {dbg.exitDecision(180);}

                    switch (alt180) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:825:23: ws
                            {
                            dbg.location(825,23);
                            pushFollow(FOLLOW_ws_in_pseudo4457);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(180);}

                    dbg.location(825,27);
                    match(input,LPAREN,FOLLOW_LPAREN_in_pseudo4460); if (state.failed) return ;
                    dbg.location(825,34);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:825:34: ( ws )?
                    int alt181=2;
                    try { dbg.enterSubRule(181);
                    try { dbg.enterDecision(181, decisionCanBacktrack[181]);

                    int LA181_0 = input.LA(1);

                    if ( ((LA181_0>=WS && LA181_0<=COMMENT)) ) {
                        alt181=1;
                    }
                    } finally {dbg.exitDecision(181);}

                    switch (alt181) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:825:34: ws
                            {
                            dbg.location(825,34);
                            pushFollow(FOLLOW_ws_in_pseudo4462);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(181);}

                    dbg.location(825,38);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:825:38: ( simpleSelectorSequence )?
                    int alt182=2;
                    try { dbg.enterSubRule(182);
                    try { dbg.enterDecision(182, decisionCanBacktrack[182]);

                    int LA182_0 = input.LA(1);

                    if ( (LA182_0==IDENT||(LA182_0>=GEN && LA182_0<=COLON)||(LA182_0>=HASH_SYMBOL && LA182_0<=PIPE)||LA182_0==LESS_AND||LA182_0==AT_SIGN) ) {
                        alt182=1;
                    }
                    } finally {dbg.exitDecision(182);}

                    switch (alt182) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:825:38: simpleSelectorSequence
                            {
                            dbg.location(825,38);
                            pushFollow(FOLLOW_simpleSelectorSequence_in_pseudo4465);
                            simpleSelectorSequence();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(182);}

                    dbg.location(825,62);
                    match(input,RPAREN,FOLLOW_RPAREN_in_pseudo4468); if (state.failed) return ;

                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(183);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(827, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pseudo");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "pseudo"


    // $ANTLR start "propertyDeclaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:829:1: propertyDeclaration : ( ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? | {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue );
    public final void propertyDeclaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "propertyDeclaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(829, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:830:5: ( ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? | {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue )
            int alt192=2;
            try { dbg.enterDecision(192, decisionCanBacktrack[192]);

            try {
                isCyclicDecision = true;
                alt192 = dfa192.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(192);}

            switch (alt192) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:5: ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )?
                    {
                    dbg.location(831,5);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:5: ( STAR )?
                    int alt184=2;
                    try { dbg.enterSubRule(184);
                    try { dbg.enterDecision(184, decisionCanBacktrack[184]);

                    int LA184_0 = input.LA(1);

                    if ( (LA184_0==STAR) ) {
                        alt184=1;
                    }
                    } finally {dbg.exitDecision(184);}

                    switch (alt184) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:5: STAR
                            {
                            dbg.location(831,5);
                            match(input,STAR,FOLLOW_STAR_in_propertyDeclaration4506); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(184);}

                    dbg.location(831,11);
                    pushFollow(FOLLOW_property_in_propertyDeclaration4509);
                    property();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(831,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:20: ( ws )?
                    int alt185=2;
                    try { dbg.enterSubRule(185);
                    try { dbg.enterDecision(185, decisionCanBacktrack[185]);

                    int LA185_0 = input.LA(1);

                    if ( ((LA185_0>=WS && LA185_0<=COMMENT)) ) {
                        alt185=1;
                    }
                    } finally {dbg.exitDecision(185);}

                    switch (alt185) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:20: ws
                            {
                            dbg.location(831,20);
                            pushFollow(FOLLOW_ws_in_propertyDeclaration4511);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(185);}

                    dbg.location(831,24);
                    match(input,COLON,FOLLOW_COLON_in_propertyDeclaration4514); if (state.failed) return ;
                    dbg.location(831,30);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:30: ( ws )?
                    int alt186=2;
                    try { dbg.enterSubRule(186);
                    try { dbg.enterDecision(186, decisionCanBacktrack[186]);

                    int LA186_0 = input.LA(1);

                    if ( ((LA186_0>=WS && LA186_0<=COMMENT)) ) {
                        alt186=1;
                    }
                    } finally {dbg.exitDecision(186);}

                    switch (alt186) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:30: ws
                            {
                            dbg.location(831,30);
                            pushFollow(FOLLOW_ws_in_propertyDeclaration4516);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(186);}

                    dbg.location(831,34);
                    pushFollow(FOLLOW_propertyValue_in_propertyDeclaration4519);
                    propertyValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(831,48);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:48: ( ( ws )? prio )?
                    int alt188=2;
                    try { dbg.enterSubRule(188);
                    try { dbg.enterDecision(188, decisionCanBacktrack[188]);

                    try {
                        isCyclicDecision = true;
                        alt188 = dfa188.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(188);}

                    switch (alt188) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:49: ( ws )? prio
                            {
                            dbg.location(831,49);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:49: ( ws )?
                            int alt187=2;
                            try { dbg.enterSubRule(187);
                            try { dbg.enterDecision(187, decisionCanBacktrack[187]);

                            int LA187_0 = input.LA(1);

                            if ( ((LA187_0>=WS && LA187_0<=COMMENT)) ) {
                                alt187=1;
                            }
                            } finally {dbg.exitDecision(187);}

                            switch (alt187) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:49: ws
                                    {
                                    dbg.location(831,49);
                                    pushFollow(FOLLOW_ws_in_propertyDeclaration4522);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(187);}

                            dbg.location(831,53);
                            pushFollow(FOLLOW_prio_in_propertyDeclaration4525);
                            prio();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(188);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:7: {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue
                    {
                    dbg.location(832,7);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "propertyDeclaration", "isCssPreprocessorSource()");
                    }
                    dbg.location(832,36);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:36: ( STAR )?
                    int alt189=2;
                    try { dbg.enterSubRule(189);
                    try { dbg.enterDecision(189, decisionCanBacktrack[189]);

                    int LA189_0 = input.LA(1);

                    if ( (LA189_0==STAR) ) {
                        alt189=1;
                    }
                    } finally {dbg.exitDecision(189);}

                    switch (alt189) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:36: STAR
                            {
                            dbg.location(832,36);
                            match(input,STAR,FOLLOW_STAR_in_propertyDeclaration4537); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(189);}

                    dbg.location(832,42);
                    pushFollow(FOLLOW_property_in_propertyDeclaration4540);
                    property();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(832,51);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:51: ( ws )?
                    int alt190=2;
                    try { dbg.enterSubRule(190);
                    try { dbg.enterDecision(190, decisionCanBacktrack[190]);

                    int LA190_0 = input.LA(1);

                    if ( ((LA190_0>=WS && LA190_0<=COMMENT)) ) {
                        alt190=1;
                    }
                    } finally {dbg.exitDecision(190);}

                    switch (alt190) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:51: ws
                            {
                            dbg.location(832,51);
                            pushFollow(FOLLOW_ws_in_propertyDeclaration4542);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(190);}

                    dbg.location(832,55);
                    match(input,COLON,FOLLOW_COLON_in_propertyDeclaration4545); if (state.failed) return ;
                    dbg.location(832,61);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:61: ( ws )?
                    int alt191=2;
                    try { dbg.enterSubRule(191);
                    try { dbg.enterDecision(191, decisionCanBacktrack[191]);

                    int LA191_0 = input.LA(1);

                    if ( ((LA191_0>=WS && LA191_0<=COMMENT)) ) {
                        alt191=1;
                    }
                    } finally {dbg.exitDecision(191);}

                    switch (alt191) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:61: ws
                            {
                            dbg.location(832,61);
                            pushFollow(FOLLOW_ws_in_propertyDeclaration4547);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(191);}

                    dbg.location(832,65);
                    pushFollow(FOLLOW_cp_propertyValue_in_propertyDeclaration4550);
                    cp_propertyValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    //recovery: if an mismatched token occures inside a declaration is found,
                    //then skip all tokens until an end of the rule is found represented by right curly brace
                    consumeUntil(input, BitSet.of(SEMI, RBRACE));
                
        }
        finally {
        }
        dbg.location(833, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "propertyDeclaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "propertyDeclaration"


    // $ANTLR start "cp_propertyValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:842:1: cp_propertyValue : ({...}? cp_expression_list | propertyValue );
    public final void cp_propertyValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_propertyValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(842, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:843:5: ({...}? cp_expression_list | propertyValue )
            int alt193=2;
            try { dbg.enterDecision(193, decisionCanBacktrack[193]);

            try {
                isCyclicDecision = true;
                alt193 = dfa193.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(193);}

            switch (alt193) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:844:5: {...}? cp_expression_list
                    {
                    dbg.location(844,5);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_propertyValue", "isCssPreprocessorSource()");
                    }
                    dbg.location(844,34);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_propertyValue4584);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:845:7: propertyValue
                    {
                    dbg.location(845,7);
                    pushFollow(FOLLOW_propertyValue_in_cp_propertyValue4592);
                    propertyValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(846, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_propertyValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_propertyValue"


    // $ANTLR start "propertyValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:848:1: propertyValue : expression ;
    public final void propertyValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "propertyValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(848, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:849:2: ( expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:850:9: expression
            {
            dbg.location(850,9);
            pushFollow(FOLLOW_expression_in_propertyValue4614);
            expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(851, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "propertyValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "propertyValue"


    // $ANTLR start "expressionPredicate"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:854:1: expressionPredicate options {k=1; } : (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) ;
    public final void expressionPredicate() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "expressionPredicate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(854, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:856:5: ( (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:857:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE )
            {
            dbg.location(857,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:857:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+
            int cnt194=0;
            try { dbg.enterSubRule(194);

            loop194:
            do {
                int alt194=2;
                try { dbg.enterDecision(194, decisionCanBacktrack[194]);

                int LA194_0 = input.LA(1);

                if ( (LA194_0==NAMESPACE_SYM||(LA194_0>=IDENT && LA194_0<=MEDIA_SYM)||(LA194_0>=IMPORTANT_SYM && LA194_0<=COLON)||(LA194_0>=MOZ_DOCUMENT_SYM && LA194_0<=RIGHTBOTTOM_SYM)||(LA194_0>=MINUS && LA194_0<=SASS_EXTEND_ONLY_SELECTOR)||(LA194_0>=PIPE && LA194_0<=RBRACKET)||(LA194_0>=NUMBER && LA194_0<=LINE_COMMENT)) ) {
                    alt194=1;
                }


                } finally {dbg.exitDecision(194);}

                switch (alt194) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:857:7: ~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR )
            	    {
            	    dbg.location(857,7);
            	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=COLON)||(input.LA(1)>=MOZ_DOCUMENT_SYM && input.LA(1)<=RIGHTBOTTOM_SYM)||(input.LA(1)>=MINUS && input.LA(1)<=SASS_EXTEND_ONLY_SELECTOR)||(input.LA(1)>=PIPE && input.LA(1)<=RBRACKET)||(input.LA(1)>=NUMBER && input.LA(1)<=LINE_COMMENT) ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt194 >= 1 ) break loop194;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(194, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt194++;
            } while (true);
            } finally {dbg.exitSubRule(194);}

            dbg.location(857,76);
            if ( input.LA(1)==SEMI||input.LA(1)==RBRACE ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(858, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "expressionPredicate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "expressionPredicate"


    // $ANTLR start "syncToDeclarationsRule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:862:1: syncToDeclarationsRule : ;
    public final void syncToDeclarationsRule() throws RecognitionException {

                //why sync to DOT? - LESS allows class rules nested
                syncToSet(BitSet.of(IDENT, RBRACE, STAR, DOT));
            
        try { dbg.enterRule(getGrammarFileName(), "syncToDeclarationsRule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(862, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:867:6: ()
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:868:6: 
            {
            }

        }
        finally {
        }
        dbg.location(868, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncToDeclarationsRule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncToDeclarationsRule"


    // $ANTLR start "syncTo_RBRACE"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:870:1: syncTo_RBRACE : ;
    public final void syncTo_RBRACE() throws RecognitionException {

                syncToRBRACE(1); //initial nest == 1
            
        try { dbg.enterRule(getGrammarFileName(), "syncTo_RBRACE");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(870, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:874:6: ()
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:875:6: 
            {
            }

        }
        finally {
        }
        dbg.location(875, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncTo_RBRACE");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncTo_RBRACE"


    // $ANTLR start "syncTo_SEMI"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:877:1: syncTo_SEMI : SEMI ;
    public final void syncTo_SEMI() throws RecognitionException {

                syncToSet(BitSet.of(SEMI));
            
        try { dbg.enterRule(getGrammarFileName(), "syncTo_SEMI");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(877, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:881:6: ( SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:882:13: SEMI
            {
            dbg.location(882,13);
            match(input,SEMI,FOLLOW_SEMI_in_syncTo_SEMI4784); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(883, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncTo_SEMI");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncTo_SEMI"


    // $ANTLR start "syncToFollow"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:886:1: syncToFollow : ;
    public final void syncToFollow() throws RecognitionException {

                syncToSet();
            
        try { dbg.enterRule(getGrammarFileName(), "syncToFollow");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(886, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:890:6: ()
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:891:6: 
            {
            }

        }
        finally {
        }
        dbg.location(891, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncToFollow");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncToFollow"


    // $ANTLR start "prio"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:893:1: prio : IMPORTANT_SYM ;
    public final void prio() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "prio");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(893, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:894:5: ( IMPORTANT_SYM )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:894:7: IMPORTANT_SYM
            {
            dbg.location(894,7);
            match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_prio4829); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(895, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prio");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "prio"


    // $ANTLR start "expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:897:1: expression : term ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )* ;
    public final void expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(897, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:5: ( term ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:7: term ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )*
            {
            dbg.location(898,7);
            pushFollow(FOLLOW_term_in_expression4846);
            term();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(898,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:12: ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )*
            try { dbg.enterSubRule(198);

            loop198:
            do {
                int alt198=2;
                try { dbg.enterDecision(198, decisionCanBacktrack[198]);

                try {
                    isCyclicDecision = true;
                    alt198 = dfa198.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(198);}

                switch (alt198) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:14: ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term
            	    {
            	    dbg.location(898,66);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:66: ( ws | ( ( ws )? operator ( ws )? ) | )
            	    int alt197=3;
            	    try { dbg.enterSubRule(197);
            	    try { dbg.enterDecision(197, decisionCanBacktrack[197]);

            	    try {
            	        isCyclicDecision = true;
            	        alt197 = dfa197.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(197);}

            	    switch (alt197) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:68: ws
            	            {
            	            dbg.location(898,68);
            	            pushFollow(FOLLOW_ws_in_expression4878);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:73: ( ( ws )? operator ( ws )? )
            	            {
            	            dbg.location(898,73);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:73: ( ( ws )? operator ( ws )? )
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:74: ( ws )? operator ( ws )?
            	            {
            	            dbg.location(898,74);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:74: ( ws )?
            	            int alt195=2;
            	            try { dbg.enterSubRule(195);
            	            try { dbg.enterDecision(195, decisionCanBacktrack[195]);

            	            int LA195_0 = input.LA(1);

            	            if ( ((LA195_0>=WS && LA195_0<=COMMENT)) ) {
            	                alt195=1;
            	            }
            	            } finally {dbg.exitDecision(195);}

            	            switch (alt195) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:74: ws
            	                    {
            	                    dbg.location(898,74);
            	                    pushFollow(FOLLOW_ws_in_expression4883);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(195);}

            	            dbg.location(898,78);
            	            pushFollow(FOLLOW_operator_in_expression4886);
            	            operator();

            	            state._fsp--;
            	            if (state.failed) return ;
            	            dbg.location(898,87);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:87: ( ws )?
            	            int alt196=2;
            	            try { dbg.enterSubRule(196);
            	            try { dbg.enterDecision(196, decisionCanBacktrack[196]);

            	            int LA196_0 = input.LA(1);

            	            if ( ((LA196_0>=WS && LA196_0<=COMMENT)) ) {
            	                alt196=1;
            	            }
            	            } finally {dbg.exitDecision(196);}

            	            switch (alt196) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:87: ws
            	                    {
            	                    dbg.location(898,87);
            	                    pushFollow(FOLLOW_ws_in_expression4888);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(196);}


            	            }


            	            }
            	            break;
            	        case 3 :
            	            dbg.enterAlt(3);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:107: 
            	            {
            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(197);}

            	    dbg.location(898,109);
            	    pushFollow(FOLLOW_term_in_expression4897);
            	    term();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop198;
                }
            } while (true);
            } finally {dbg.exitSubRule(198);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(899, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "expression"


    // $ANTLR start "term"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:901:1: term : ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol ) ;
    public final void term() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "term");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(901, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:902:5: ( ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:903:5: ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol )
            {
            dbg.location(903,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:903:5: ( unaryOperator ( ws )? )?
            int alt200=2;
            try { dbg.enterSubRule(200);
            try { dbg.enterDecision(200, decisionCanBacktrack[200]);

            int LA200_0 = input.LA(1);

            if ( ((LA200_0>=MINUS && LA200_0<=PLUS)) ) {
                alt200=1;
            }
            } finally {dbg.exitDecision(200);}

            switch (alt200) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:903:7: unaryOperator ( ws )?
                    {
                    dbg.location(903,7);
                    pushFollow(FOLLOW_unaryOperator_in_term4922);
                    unaryOperator();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(903,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:903:21: ( ws )?
                    int alt199=2;
                    try { dbg.enterSubRule(199);
                    try { dbg.enterDecision(199, decisionCanBacktrack[199]);

                    int LA199_0 = input.LA(1);

                    if ( ((LA199_0>=WS && LA199_0<=COMMENT)) ) {
                        alt199=1;
                    }
                    } finally {dbg.exitDecision(199);}

                    switch (alt199) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:903:21: ws
                            {
                            dbg.location(903,21);
                            pushFollow(FOLLOW_ws_in_term4924);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(199);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(200);}

            dbg.location(904,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:904:5: ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol )
            int alt201=22;
            try { dbg.enterSubRule(201);
            try { dbg.enterDecision(201, decisionCanBacktrack[201]);

            try {
                isCyclicDecision = true;
                alt201 = dfa201.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(201);}

            switch (alt201) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:9: ( functionName ( ws )? LPAREN )=> function
                    {
                    dbg.location(905,36);
                    pushFollow(FOLLOW_function_in_term4953);
                    function();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:906:11: IDENT
                    {
                    dbg.location(906,11);
                    match(input,IDENT,FOLLOW_IDENT_in_term4966); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:907:11: NUMBER
                    {
                    dbg.location(907,11);
                    match(input,NUMBER,FOLLOW_NUMBER_in_term4978); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:908:11: PERCENTAGE
                    {
                    dbg.location(908,11);
                    match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_term4990); if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:11: LENGTH
                    {
                    dbg.location(909,11);
                    match(input,LENGTH,FOLLOW_LENGTH_in_term5002); if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:910:11: EMS
                    {
                    dbg.location(910,11);
                    match(input,EMS,FOLLOW_EMS_in_term5014); if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:911:11: REM
                    {
                    dbg.location(911,11);
                    match(input,REM,FOLLOW_REM_in_term5026); if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:912:11: EXS
                    {
                    dbg.location(912,11);
                    match(input,EXS,FOLLOW_EXS_in_term5038); if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:913:11: ANGLE
                    {
                    dbg.location(913,11);
                    match(input,ANGLE,FOLLOW_ANGLE_in_term5050); if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:914:11: TIME
                    {
                    dbg.location(914,11);
                    match(input,TIME,FOLLOW_TIME_in_term5062); if (state.failed) return ;

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:915:11: FREQ
                    {
                    dbg.location(915,11);
                    match(input,FREQ,FOLLOW_FREQ_in_term5074); if (state.failed) return ;

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:916:11: RESOLUTION
                    {
                    dbg.location(916,11);
                    match(input,RESOLUTION,FOLLOW_RESOLUTION_in_term5086); if (state.failed) return ;

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:917:11: DIMENSION
                    {
                    dbg.location(917,11);
                    match(input,DIMENSION,FOLLOW_DIMENSION_in_term5098); if (state.failed) return ;

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:11: STRING
                    {
                    dbg.location(918,11);
                    match(input,STRING,FOLLOW_STRING_in_term5115); if (state.failed) return ;

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:919:11: TILDE ( STRING | LESS_JS_STRING )
                    {
                    dbg.location(919,11);
                    match(input,TILDE,FOLLOW_TILDE_in_term5127); if (state.failed) return ;
                    dbg.location(919,17);
                    if ( input.LA(1)==STRING||input.LA(1)==LESS_JS_STRING ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:920:11: LESS_JS_STRING
                    {
                    dbg.location(920,11);
                    match(input,LESS_JS_STRING,FOLLOW_LESS_JS_STRING_in_term5150); if (state.failed) return ;

                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:921:11: GEN
                    {
                    dbg.location(921,11);
                    match(input,GEN,FOLLOW_GEN_in_term5165); if (state.failed) return ;

                    }
                    break;
                case 18 :
                    dbg.enterAlt(18);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:922:11: URI
                    {
                    dbg.location(922,11);
                    match(input,URI,FOLLOW_URI_in_term5177); if (state.failed) return ;

                    }
                    break;
                case 19 :
                    dbg.enterAlt(19);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:923:11: hexColor
                    {
                    dbg.location(923,11);
                    pushFollow(FOLLOW_hexColor_in_term5189);
                    hexColor();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 20 :
                    dbg.enterAlt(20);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:924:11: {...}? cp_variable
                    {
                    dbg.location(924,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
                    }
                    dbg.location(924,40);
                    pushFollow(FOLLOW_cp_variable_in_term5203);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 21 :
                    dbg.enterAlt(21);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:925:11: {...}? sass_interpolation_expression_var
                    {
                    dbg.location(925,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
                    }
                    dbg.location(925,40);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_term5217);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 22 :
                    dbg.enterAlt(22);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:926:11: {...}? cp_term_symbol
                    {
                    dbg.location(926,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
                    }
                    dbg.location(926,40);
                    pushFollow(FOLLOW_cp_term_symbol_in_term5231);
                    cp_term_symbol();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(201);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(928, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "term");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "term"


    // $ANTLR start "cp_term_symbol"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:933:1: cp_term_symbol : PERCENTAGE_SYMBOL ;
    public final void cp_term_symbol() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_term_symbol");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(933, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:5: ( PERCENTAGE_SYMBOL )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:7: PERCENTAGE_SYMBOL
            {
            dbg.location(934,7);
            match(input,PERCENTAGE_SYMBOL,FOLLOW_PERCENTAGE_SYMBOL_in_cp_term_symbol5258); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(935, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_term_symbol");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_term_symbol"


    // $ANTLR start "function"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:937:1: function : functionName ( ws )? LPAREN ( ws )? ( fnAttributes | ) RPAREN ;
    public final void function() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "function");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(937, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:938:2: ( functionName ( ws )? LPAREN ( ws )? ( fnAttributes | ) RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:938:5: functionName ( ws )? LPAREN ( ws )? ( fnAttributes | ) RPAREN
            {
            dbg.location(938,5);
            pushFollow(FOLLOW_functionName_in_function5274);
            functionName();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(938,18);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:938:18: ( ws )?
            int alt202=2;
            try { dbg.enterSubRule(202);
            try { dbg.enterDecision(202, decisionCanBacktrack[202]);

            int LA202_0 = input.LA(1);

            if ( ((LA202_0>=WS && LA202_0<=COMMENT)) ) {
                alt202=1;
            }
            } finally {dbg.exitDecision(202);}

            switch (alt202) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:938:18: ws
                    {
                    dbg.location(938,18);
                    pushFollow(FOLLOW_ws_in_function5276);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(202);}

            dbg.location(939,3);
            match(input,LPAREN,FOLLOW_LPAREN_in_function5281); if (state.failed) return ;
            dbg.location(939,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:939:10: ( ws )?
            int alt203=2;
            try { dbg.enterSubRule(203);
            try { dbg.enterDecision(203, decisionCanBacktrack[203]);

            int LA203_0 = input.LA(1);

            if ( ((LA203_0>=WS && LA203_0<=COMMENT)) ) {
                alt203=1;
            }
            } finally {dbg.exitDecision(203);}

            switch (alt203) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:939:10: ws
                    {
                    dbg.location(939,10);
                    pushFollow(FOLLOW_ws_in_function5283);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(203);}

            dbg.location(940,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:3: ( fnAttributes | )
            int alt204=2;
            try { dbg.enterSubRule(204);
            try { dbg.enterDecision(204, decisionCanBacktrack[204]);

            int LA204_0 = input.LA(1);

            if ( (LA204_0==NAMESPACE_SYM||(LA204_0>=IDENT && LA204_0<=IMPORT_SYM)||LA204_0==LPAREN||LA204_0==MEDIA_SYM||LA204_0==IMPORTANT_SYM||(LA204_0>=NOT && LA204_0<=GEN)||(LA204_0>=AT_IDENT && LA204_0<=MOZ_DOCUMENT_SYM)||(LA204_0>=WEBKIT_KEYFRAMES_SYM && LA204_0<=RIGHTBOTTOM_SYM)||(LA204_0>=MINUS && LA204_0<=PLUS)||(LA204_0>=TILDE && LA204_0<=HASH)||(LA204_0>=SASS_VAR && LA204_0<=PERCENTAGE_SYMBOL)||(LA204_0>=SASS_CONTENT && LA204_0<=SASS_WHILE)) ) {
                alt204=1;
            }
            else if ( (LA204_0==RPAREN) ) {
                alt204=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 204, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(204);}

            switch (alt204) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:941:21: fnAttributes
                    {
                    dbg.location(941,21);
                    pushFollow(FOLLOW_fnAttributes_in_function5310);
                    fnAttributes();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:3: 
                    {
                    }
                    break;

            }
            } finally {dbg.exitSubRule(204);}

            dbg.location(944,3);
            match(input,RPAREN,FOLLOW_RPAREN_in_function5341); if (state.failed) return ;

            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(RPAREN, SEMI, RBRACE));

        }
        finally {
        }
        dbg.location(945, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "function");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "function"


    // $ANTLR start "functionName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:1: functionName : ( IDENT COLON )? IDENT ( DOT IDENT )* ;
    public final void functionName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "functionName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(951, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:955:2: ( ( IDENT COLON )? IDENT ( DOT IDENT )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:956:9: ( IDENT COLON )? IDENT ( DOT IDENT )*
            {
            dbg.location(956,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:956:9: ( IDENT COLON )?
            int alt205=2;
            try { dbg.enterSubRule(205);
            try { dbg.enterDecision(205, decisionCanBacktrack[205]);

            int LA205_0 = input.LA(1);

            if ( (LA205_0==IDENT) ) {
                int LA205_1 = input.LA(2);

                if ( (LA205_1==COLON) ) {
                    alt205=1;
                }
            }
            } finally {dbg.exitDecision(205);}

            switch (alt205) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:956:10: IDENT COLON
                    {
                    dbg.location(956,10);
                    match(input,IDENT,FOLLOW_IDENT_in_functionName5393); if (state.failed) return ;
                    dbg.location(956,16);
                    match(input,COLON,FOLLOW_COLON_in_functionName5395); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(205);}

            dbg.location(956,24);
            match(input,IDENT,FOLLOW_IDENT_in_functionName5399); if (state.failed) return ;
            dbg.location(956,30);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:956:30: ( DOT IDENT )*
            try { dbg.enterSubRule(206);

            loop206:
            do {
                int alt206=2;
                try { dbg.enterDecision(206, decisionCanBacktrack[206]);

                int LA206_0 = input.LA(1);

                if ( (LA206_0==DOT) ) {
                    alt206=1;
                }


                } finally {dbg.exitDecision(206);}

                switch (alt206) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:956:31: DOT IDENT
            	    {
            	    dbg.location(956,31);
            	    match(input,DOT,FOLLOW_DOT_in_functionName5402); if (state.failed) return ;
            	    dbg.location(956,35);
            	    match(input,IDENT,FOLLOW_IDENT_in_functionName5404); if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop206;
                }
            } while (true);
            } finally {dbg.exitSubRule(206);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(957, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "functionName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "functionName"


    // $ANTLR start "fnAttributes"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:959:1: fnAttributes : fnAttribute ( ( ws )? COMMA ( ws )? fnAttribute )* ( ws )? ;
    public final void fnAttributes() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttributes");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(959, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:960:5: ( fnAttribute ( ( ws )? COMMA ( ws )? fnAttribute )* ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:5: fnAttribute ( ( ws )? COMMA ( ws )? fnAttribute )* ( ws )?
            {
            dbg.location(961,5);
            pushFollow(FOLLOW_fnAttribute_in_fnAttributes5428);
            fnAttribute();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(961,17);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:17: ( ( ws )? COMMA ( ws )? fnAttribute )*
            try { dbg.enterSubRule(209);

            loop209:
            do {
                int alt209=2;
                try { dbg.enterDecision(209, decisionCanBacktrack[209]);

                try {
                    isCyclicDecision = true;
                    alt209 = dfa209.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(209);}

                switch (alt209) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:18: ( ws )? COMMA ( ws )? fnAttribute
            	    {
            	    dbg.location(961,18);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:18: ( ws )?
            	    int alt207=2;
            	    try { dbg.enterSubRule(207);
            	    try { dbg.enterDecision(207, decisionCanBacktrack[207]);

            	    int LA207_0 = input.LA(1);

            	    if ( ((LA207_0>=WS && LA207_0<=COMMENT)) ) {
            	        alt207=1;
            	    }
            	    } finally {dbg.exitDecision(207);}

            	    switch (alt207) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:18: ws
            	            {
            	            dbg.location(961,18);
            	            pushFollow(FOLLOW_ws_in_fnAttributes5431);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(207);}

            	    dbg.location(961,22);
            	    match(input,COMMA,FOLLOW_COMMA_in_fnAttributes5434); if (state.failed) return ;
            	    dbg.location(961,28);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:28: ( ws )?
            	    int alt208=2;
            	    try { dbg.enterSubRule(208);
            	    try { dbg.enterDecision(208, decisionCanBacktrack[208]);

            	    int LA208_0 = input.LA(1);

            	    if ( ((LA208_0>=WS && LA208_0<=COMMENT)) ) {
            	        alt208=1;
            	    }
            	    } finally {dbg.exitDecision(208);}

            	    switch (alt208) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:28: ws
            	            {
            	            dbg.location(961,28);
            	            pushFollow(FOLLOW_ws_in_fnAttributes5436);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(208);}

            	    dbg.location(961,32);
            	    pushFollow(FOLLOW_fnAttribute_in_fnAttributes5439);
            	    fnAttribute();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop209;
                }
            } while (true);
            } finally {dbg.exitSubRule(209);}

            dbg.location(961,46);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:46: ( ws )?
            int alt210=2;
            try { dbg.enterSubRule(210);
            try { dbg.enterDecision(210, decisionCanBacktrack[210]);

            int LA210_0 = input.LA(1);

            if ( ((LA210_0>=WS && LA210_0<=COMMENT)) ) {
                alt210=1;
            }
            } finally {dbg.exitDecision(210);}

            switch (alt210) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:46: ws
                    {
                    dbg.location(961,46);
                    pushFollow(FOLLOW_ws_in_fnAttributes5443);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(210);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(962, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttributes");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttributes"


    // $ANTLR start "fnAttribute"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:964:1: fnAttribute : ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | {...}? cp_expression | expression );
    public final void fnAttribute() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttribute");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(964, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:965:2: ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | {...}? cp_expression | expression )
            int alt213=3;
            try { dbg.enterDecision(213, decisionCanBacktrack[213]);

            try {
                isCyclicDecision = true;
                alt213 = dfa213.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(213);}

            switch (alt213) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:966:9: ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue
                    {
                    dbg.location(966,46);
                    pushFollow(FOLLOW_fnAttributeName_in_fnAttribute5480);
                    fnAttributeName();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(966,62);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:966:62: ( ws )?
                    int alt211=2;
                    try { dbg.enterSubRule(211);
                    try { dbg.enterDecision(211, decisionCanBacktrack[211]);

                    int LA211_0 = input.LA(1);

                    if ( ((LA211_0>=WS && LA211_0<=COMMENT)) ) {
                        alt211=1;
                    }
                    } finally {dbg.exitDecision(211);}

                    switch (alt211) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:966:62: ws
                            {
                            dbg.location(966,62);
                            pushFollow(FOLLOW_ws_in_fnAttribute5482);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(211);}

                    dbg.location(966,66);
                    if ( input.LA(1)==COLON||input.LA(1)==OPEQ ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(966,79);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:966:79: ( ws )?
                    int alt212=2;
                    try { dbg.enterSubRule(212);
                    try { dbg.enterDecision(212, decisionCanBacktrack[212]);

                    int LA212_0 = input.LA(1);

                    if ( ((LA212_0>=WS && LA212_0<=COMMENT)) ) {
                        alt212=1;
                    }
                    } finally {dbg.exitDecision(212);}

                    switch (alt212) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:966:79: ws
                            {
                            dbg.location(966,79);
                            pushFollow(FOLLOW_ws_in_fnAttribute5491);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(212);}

                    dbg.location(966,83);
                    pushFollow(FOLLOW_fnAttributeValue_in_fnAttribute5494);
                    fnAttributeValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:967:11: {...}? cp_expression
                    {
                    dbg.location(967,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "fnAttribute", "isCssPreprocessorSource()");
                    }
                    dbg.location(967,40);
                    pushFollow(FOLLOW_cp_expression_in_fnAttribute5508);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:968:11: expression
                    {
                    dbg.location(968,11);
                    pushFollow(FOLLOW_expression_in_fnAttribute5520);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(969, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttribute");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttribute"


    // $ANTLR start "fnAttributeName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:971:1: fnAttributeName : ( IDENT ( DOT IDENT )* | {...}? cp_variable );
    public final void fnAttributeName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttributeName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(971, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:972:2: ( IDENT ( DOT IDENT )* | {...}? cp_variable )
            int alt215=2;
            try { dbg.enterDecision(215, decisionCanBacktrack[215]);

            int LA215_0 = input.LA(1);

            if ( (LA215_0==IDENT) ) {
                alt215=1;
            }
            else if ( (LA215_0==NAMESPACE_SYM||(LA215_0>=CHARSET_SYM && LA215_0<=IMPORT_SYM)||LA215_0==MEDIA_SYM||(LA215_0>=AT_IDENT && LA215_0<=MOZ_DOCUMENT_SYM)||LA215_0==WEBKIT_KEYFRAMES_SYM||(LA215_0>=PAGE_SYM && LA215_0<=RIGHTBOTTOM_SYM)||LA215_0==SASS_VAR||(LA215_0>=SASS_CONTENT && LA215_0<=SASS_WHILE)) ) {
                alt215=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 215, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(215);}

            switch (alt215) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:973:13: IDENT ( DOT IDENT )*
                    {
                    dbg.location(973,13);
                    match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName5543); if (state.failed) return ;
                    dbg.location(973,19);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:973:19: ( DOT IDENT )*
                    try { dbg.enterSubRule(214);

                    loop214:
                    do {
                        int alt214=2;
                        try { dbg.enterDecision(214, decisionCanBacktrack[214]);

                        int LA214_0 = input.LA(1);

                        if ( (LA214_0==DOT) ) {
                            alt214=1;
                        }


                        } finally {dbg.exitDecision(214);}

                        switch (alt214) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:973:20: DOT IDENT
                    	    {
                    	    dbg.location(973,20);
                    	    match(input,DOT,FOLLOW_DOT_in_fnAttributeName5546); if (state.failed) return ;
                    	    dbg.location(973,24);
                    	    match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName5548); if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop214;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(214);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:974:15: {...}? cp_variable
                    {
                    dbg.location(974,15);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "fnAttributeName", "isCssPreprocessorSource()");
                    }
                    dbg.location(974,44);
                    pushFollow(FOLLOW_cp_variable_in_fnAttributeName5568);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(975, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttributeName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttributeName"


    // $ANTLR start "fnAttributeValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:977:1: fnAttributeValue : ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )* | {...}? cp_math_expression );
    public final void fnAttributeValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttributeValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(977, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:978:2: ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )* | {...}? cp_math_expression )
            int alt220=2;
            try { dbg.enterDecision(220, decisionCanBacktrack[220]);

            try {
                isCyclicDecision = true;
                alt220 = dfa220.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(220);}

            switch (alt220) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:13: term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )*
                    {
                    dbg.location(979,13);
                    pushFollow(FOLLOW_term_in_fnAttributeValue5591);
                    term();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(979,18);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:18: ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )*
                    try { dbg.enterSubRule(219);

                    loop219:
                    do {
                        int alt219=2;
                        try { dbg.enterDecision(219, decisionCanBacktrack[219]);

                        try {
                            isCyclicDecision = true;
                            alt219 = dfa219.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(219);}

                        switch (alt219) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:20: ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term
                    	    {
                    	    dbg.location(979,71);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:71: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )
                    	    int alt218=3;
                    	    try { dbg.enterSubRule(218);
                    	    try { dbg.enterDecision(218, decisionCanBacktrack[218]);

                    	    try {
                    	        isCyclicDecision = true;
                    	        alt218 = dfa218.predict(input);
                    	    }
                    	    catch (NoViableAltException nvae) {
                    	        dbg.recognitionException(nvae);
                    	        throw nvae;
                    	    }
                    	    } finally {dbg.exitDecision(218);}

                    	    switch (alt218) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:73: ws
                    	            {
                    	            dbg.location(979,73);
                    	            pushFollow(FOLLOW_ws_in_fnAttributeValue5623);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;
                    	        case 2 :
                    	            dbg.enterAlt(2);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:78: ( ( ws )? SOLIDUS ( ws )? )
                    	            {
                    	            dbg.location(979,78);
                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:78: ( ( ws )? SOLIDUS ( ws )? )
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:79: ( ws )? SOLIDUS ( ws )?
                    	            {
                    	            dbg.location(979,79);
                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:79: ( ws )?
                    	            int alt216=2;
                    	            try { dbg.enterSubRule(216);
                    	            try { dbg.enterDecision(216, decisionCanBacktrack[216]);

                    	            int LA216_0 = input.LA(1);

                    	            if ( ((LA216_0>=WS && LA216_0<=COMMENT)) ) {
                    	                alt216=1;
                    	            }
                    	            } finally {dbg.exitDecision(216);}

                    	            switch (alt216) {
                    	                case 1 :
                    	                    dbg.enterAlt(1);

                    	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:79: ws
                    	                    {
                    	                    dbg.location(979,79);
                    	                    pushFollow(FOLLOW_ws_in_fnAttributeValue5628);
                    	                    ws();

                    	                    state._fsp--;
                    	                    if (state.failed) return ;

                    	                    }
                    	                    break;

                    	            }
                    	            } finally {dbg.exitSubRule(216);}

                    	            dbg.location(979,83);
                    	            match(input,SOLIDUS,FOLLOW_SOLIDUS_in_fnAttributeValue5631); if (state.failed) return ;
                    	            dbg.location(979,91);
                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:91: ( ws )?
                    	            int alt217=2;
                    	            try { dbg.enterSubRule(217);
                    	            try { dbg.enterDecision(217, decisionCanBacktrack[217]);

                    	            int LA217_0 = input.LA(1);

                    	            if ( ((LA217_0>=WS && LA217_0<=COMMENT)) ) {
                    	                alt217=1;
                    	            }
                    	            } finally {dbg.exitDecision(217);}

                    	            switch (alt217) {
                    	                case 1 :
                    	                    dbg.enterAlt(1);

                    	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:91: ws
                    	                    {
                    	                    dbg.location(979,91);
                    	                    pushFollow(FOLLOW_ws_in_fnAttributeValue5633);
                    	                    ws();

                    	                    state._fsp--;
                    	                    if (state.failed) return ;

                    	                    }
                    	                    break;

                    	            }
                    	            } finally {dbg.exitSubRule(217);}


                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            dbg.enterAlt(3);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:111: 
                    	            {
                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(218);}

                    	    dbg.location(979,113);
                    	    pushFollow(FOLLOW_term_in_fnAttributeValue5642);
                    	    term();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop219;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(219);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:980:15: {...}? cp_math_expression
                    {
                    dbg.location(980,15);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "fnAttributeValue", "isCssPreprocessorSource()");
                    }
                    dbg.location(980,44);
                    pushFollow(FOLLOW_cp_math_expression_in_fnAttributeValue5663);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(981, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttributeValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttributeValue"


    // $ANTLR start "hexColor"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:983:1: hexColor : HASH ;
    public final void hexColor() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "hexColor");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(983, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:984:5: ( HASH )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:984:7: HASH
            {
            dbg.location(984,7);
            match(input,HASH,FOLLOW_HASH_in_hexColor5677); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(985, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hexColor");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "hexColor"


    // $ANTLR start "ws"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:987:1: ws : ( WS | NL | COMMENT )+ ;
    public final void ws() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "ws");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(987, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:988:5: ( ( WS | NL | COMMENT )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:988:7: ( WS | NL | COMMENT )+
            {
            dbg.location(988,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:988:7: ( WS | NL | COMMENT )+
            int cnt221=0;
            try { dbg.enterSubRule(221);

            loop221:
            do {
                int alt221=2;
                try { dbg.enterDecision(221, decisionCanBacktrack[221]);

                int LA221_0 = input.LA(1);

                if ( ((LA221_0>=WS && LA221_0<=COMMENT)) ) {
                    alt221=1;
                }


                } finally {dbg.exitDecision(221);}

                switch (alt221) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            	    {
            	    dbg.location(988,7);
            	    if ( (input.LA(1)>=WS && input.LA(1)<=COMMENT) ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt221 >= 1 ) break loop221;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(221, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt221++;
            } while (true);
            } finally {dbg.exitSubRule(221);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(989, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ws");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "ws"


    // $ANTLR start "cp_variable_declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:994:1: cp_variable_declaration : ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list | {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ws )? SASS_DEFAULT )? );
    public final void cp_variable_declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_variable_declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(994, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:995:5: ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list | {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ws )? SASS_DEFAULT )? )
            int alt228=2;
            try { dbg.enterDecision(228, decisionCanBacktrack[228]);

            int LA228_0 = input.LA(1);

            if ( (LA228_0==NAMESPACE_SYM||(LA228_0>=CHARSET_SYM && LA228_0<=IMPORT_SYM)||LA228_0==MEDIA_SYM||(LA228_0>=AT_IDENT && LA228_0<=MOZ_DOCUMENT_SYM)||LA228_0==WEBKIT_KEYFRAMES_SYM||(LA228_0>=PAGE_SYM && LA228_0<=RIGHTBOTTOM_SYM)||(LA228_0>=SASS_CONTENT && LA228_0<=SASS_WHILE)) ) {
                int LA228_1 = input.LA(2);

                if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
                    alt228=1;
                }
                else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
                    alt228=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 228, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA228_0==SASS_VAR) ) {
                int LA228_2 = input.LA(2);

                if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
                    alt228=1;
                }
                else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
                    alt228=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 228, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 228, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(228);}

            switch (alt228) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:996:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list
                    {
                    dbg.location(996,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable_declaration", "isLessSource()");
                    }
                    dbg.location(996,27);
                    pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration5737);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(996,39);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:996:39: ( ws )?
                    int alt222=2;
                    try { dbg.enterSubRule(222);
                    try { dbg.enterDecision(222, decisionCanBacktrack[222]);

                    int LA222_0 = input.LA(1);

                    if ( ((LA222_0>=WS && LA222_0<=COMMENT)) ) {
                        alt222=1;
                    }
                    } finally {dbg.exitDecision(222);}

                    switch (alt222) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:996:39: ws
                            {
                            dbg.location(996,39);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5739);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(222);}

                    dbg.location(996,43);
                    match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration5742); if (state.failed) return ;
                    dbg.location(996,49);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:996:49: ( ws )?
                    int alt223=2;
                    try { dbg.enterSubRule(223);
                    try { dbg.enterDecision(223, decisionCanBacktrack[223]);

                    int LA223_0 = input.LA(1);

                    if ( ((LA223_0>=WS && LA223_0<=COMMENT)) ) {
                        alt223=1;
                    }
                    } finally {dbg.exitDecision(223);}

                    switch (alt223) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:996:49: ws
                            {
                            dbg.location(996,49);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5744);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(223);}

                    dbg.location(996,53);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration5747);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ws )? SASS_DEFAULT )?
                    {
                    dbg.location(998,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable_declaration", "isScssSource()");
                    }
                    dbg.location(998,27);
                    pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration5769);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(998,39);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:39: ( ws )?
                    int alt224=2;
                    try { dbg.enterSubRule(224);
                    try { dbg.enterDecision(224, decisionCanBacktrack[224]);

                    int LA224_0 = input.LA(1);

                    if ( ((LA224_0>=WS && LA224_0<=COMMENT)) ) {
                        alt224=1;
                    }
                    } finally {dbg.exitDecision(224);}

                    switch (alt224) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:39: ws
                            {
                            dbg.location(998,39);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5771);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(224);}

                    dbg.location(998,43);
                    match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration5774); if (state.failed) return ;
                    dbg.location(998,49);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:49: ( ws )?
                    int alt225=2;
                    try { dbg.enterSubRule(225);
                    try { dbg.enterDecision(225, decisionCanBacktrack[225]);

                    int LA225_0 = input.LA(1);

                    if ( ((LA225_0>=WS && LA225_0<=COMMENT)) ) {
                        alt225=1;
                    }
                    } finally {dbg.exitDecision(225);}

                    switch (alt225) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:49: ws
                            {
                            dbg.location(998,49);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5776);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(225);}

                    dbg.location(998,53);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration5779);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(998,72);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:72: ( ( ws )? SASS_DEFAULT )?
                    int alt227=2;
                    try { dbg.enterSubRule(227);
                    try { dbg.enterDecision(227, decisionCanBacktrack[227]);

                    try {
                        isCyclicDecision = true;
                        alt227 = dfa227.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(227);}

                    switch (alt227) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:73: ( ws )? SASS_DEFAULT
                            {
                            dbg.location(998,73);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:73: ( ws )?
                            int alt226=2;
                            try { dbg.enterSubRule(226);
                            try { dbg.enterDecision(226, decisionCanBacktrack[226]);

                            int LA226_0 = input.LA(1);

                            if ( ((LA226_0>=WS && LA226_0<=COMMENT)) ) {
                                alt226=1;
                            }
                            } finally {dbg.exitDecision(226);}

                            switch (alt226) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:73: ws
                                    {
                                    dbg.location(998,73);
                                    pushFollow(FOLLOW_ws_in_cp_variable_declaration5782);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(226);}

                            dbg.location(998,77);
                            match(input,SASS_DEFAULT,FOLLOW_SASS_DEFAULT_in_cp_variable_declaration5785); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(227);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(999, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_variable_declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_variable_declaration"


    // $ANTLR start "cp_variable"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1002:1: cp_variable : ({...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE ) | {...}? ( SASS_VAR ) );
    public final void cp_variable() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_variable");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1002, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1003:5: ({...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE ) | {...}? ( SASS_VAR ) )
            int alt229=2;
            try { dbg.enterDecision(229, decisionCanBacktrack[229]);

            int LA229_0 = input.LA(1);

            if ( (LA229_0==NAMESPACE_SYM||(LA229_0>=CHARSET_SYM && LA229_0<=IMPORT_SYM)||LA229_0==MEDIA_SYM||(LA229_0>=AT_IDENT && LA229_0<=MOZ_DOCUMENT_SYM)||LA229_0==WEBKIT_KEYFRAMES_SYM||(LA229_0>=PAGE_SYM && LA229_0<=RIGHTBOTTOM_SYM)||(LA229_0>=SASS_CONTENT && LA229_0<=SASS_WHILE)) ) {
                alt229=1;
            }
            else if ( (LA229_0==SASS_VAR) ) {
                alt229=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 229, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(229);}

            switch (alt229) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1005:9: {...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE )
                    {
                    dbg.location(1005,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable", "isLessSource()");
                    }
                    dbg.location(1005,27);
                    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=CHARSET_SYM && input.LA(1)<=IMPORT_SYM)||input.LA(1)==MEDIA_SYM||(input.LA(1)>=AT_IDENT && input.LA(1)<=MOZ_DOCUMENT_SYM)||input.LA(1)==WEBKIT_KEYFRAMES_SYM||(input.LA(1)>=PAGE_SYM && input.LA(1)<=RIGHTBOTTOM_SYM)||(input.LA(1)>=SASS_CONTENT && input.LA(1)<=SASS_WHILE) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1007:9: {...}? ( SASS_VAR )
                    {
                    dbg.location(1007,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable", "isScssSource()");
                    }
                    dbg.location(1007,27);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1007:27: ( SASS_VAR )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1007:29: SASS_VAR
                    {
                    dbg.location(1007,29);
                    match(input,SASS_VAR,FOLLOW_SASS_VAR_in_cp_variable6005); if (state.failed) return ;

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1008, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_variable");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_variable"


    // $ANTLR start "cp_expression_list"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1011:1: cp_expression_list : cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )* ;
    public final void cp_expression_list() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression_list");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1011, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1012:5: ( cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1013:5: cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*
            {
            dbg.location(1013,5);
            pushFollow(FOLLOW_cp_expression_in_cp_expression_list6029);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1014,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:5: ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*
            try { dbg.enterSubRule(232);

            loop232:
            do {
                int alt232=2;
                try { dbg.enterDecision(232, decisionCanBacktrack[232]);

                try {
                    isCyclicDecision = true;
                    alt232 = dfa232.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(232);}

                switch (alt232) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:6: ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression
            	    {
            	    dbg.location(1014,37);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:37: ( ws )?
            	    int alt230=2;
            	    try { dbg.enterSubRule(230);
            	    try { dbg.enterDecision(230, decisionCanBacktrack[230]);

            	    int LA230_0 = input.LA(1);

            	    if ( ((LA230_0>=WS && LA230_0<=COMMENT)) ) {
            	        alt230=1;
            	    }
            	    } finally {dbg.exitDecision(230);}

            	    switch (alt230) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:37: ws
            	            {
            	            dbg.location(1014,37);
            	            pushFollow(FOLLOW_ws_in_cp_expression_list6048);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(230);}

            	    dbg.location(1014,41);
            	    match(input,COMMA,FOLLOW_COMMA_in_cp_expression_list6051); if (state.failed) return ;
            	    dbg.location(1014,47);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:47: ( ws )?
            	    int alt231=2;
            	    try { dbg.enterSubRule(231);
            	    try { dbg.enterDecision(231, decisionCanBacktrack[231]);

            	    int LA231_0 = input.LA(1);

            	    if ( ((LA231_0>=WS && LA231_0<=COMMENT)) ) {
            	        alt231=1;
            	    }
            	    } finally {dbg.exitDecision(231);}

            	    switch (alt231) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:47: ws
            	            {
            	            dbg.location(1014,47);
            	            pushFollow(FOLLOW_ws_in_cp_expression_list6053);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(231);}

            	    dbg.location(1014,51);
            	    pushFollow(FOLLOW_cp_expression_in_cp_expression_list6056);
            	    cp_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop232;
                }
            } while (true);
            } finally {dbg.exitSubRule(232);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1015, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression_list");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression_list"


    // $ANTLR start "cp_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1027:1: cp_expression : cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* ;
    public final void cp_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1027, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1028:5: ( cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1029:5: cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*
            {
            dbg.location(1029,5);
            pushFollow(FOLLOW_cp_expression_atom_in_cp_expression6089);
            cp_expression_atom();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1030,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1030:5: ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*
            try { dbg.enterSubRule(236);

            loop236:
            do {
                int alt236=3;
                try { dbg.enterDecision(236, decisionCanBacktrack[236]);

                try {
                    isCyclicDecision = true;
                    alt236 = dfa236.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(236);}

                switch (alt236) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:9: ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom
            	    {
            	    dbg.location(1031,39);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:39: ( ( ws )? cp_expression_operator ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:40: ( ws )? cp_expression_operator ( ws )?
            	    {
            	    dbg.location(1031,40);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:40: ( ws )?
            	    int alt233=2;
            	    try { dbg.enterSubRule(233);
            	    try { dbg.enterDecision(233, decisionCanBacktrack[233]);

            	    int LA233_0 = input.LA(1);

            	    if ( ((LA233_0>=WS && LA233_0<=COMMENT)) ) {
            	        alt233=1;
            	    }
            	    } finally {dbg.exitDecision(233);}

            	    switch (alt233) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:40: ws
            	            {
            	            dbg.location(1031,40);
            	            pushFollow(FOLLOW_ws_in_cp_expression6113);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(233);}

            	    dbg.location(1031,44);
            	    pushFollow(FOLLOW_cp_expression_operator_in_cp_expression6116);
            	    cp_expression_operator();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(1031,67);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:67: ( ws )?
            	    int alt234=2;
            	    try { dbg.enterSubRule(234);
            	    try { dbg.enterDecision(234, decisionCanBacktrack[234]);

            	    int LA234_0 = input.LA(1);

            	    if ( ((LA234_0>=WS && LA234_0<=COMMENT)) ) {
            	        alt234=1;
            	    }
            	    } finally {dbg.exitDecision(234);}

            	    switch (alt234) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:67: ws
            	            {
            	            dbg.location(1031,67);
            	            pushFollow(FOLLOW_ws_in_cp_expression6118);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(234);}


            	    }

            	    dbg.location(1031,72);
            	    pushFollow(FOLLOW_cp_expression_atom_in_cp_expression6122);
            	    cp_expression_atom();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:11: ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom
            	    {
            	    dbg.location(1032,37);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:37: ( ws )?
            	    int alt235=2;
            	    try { dbg.enterSubRule(235);
            	    try { dbg.enterDecision(235, decisionCanBacktrack[235]);

            	    int LA235_0 = input.LA(1);

            	    if ( ((LA235_0>=WS && LA235_0<=COMMENT)) ) {
            	        alt235=1;
            	    }
            	    } finally {dbg.exitDecision(235);}

            	    switch (alt235) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:37: ws
            	            {
            	            dbg.location(1032,37);
            	            pushFollow(FOLLOW_ws_in_cp_expression6141);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(235);}

            	    dbg.location(1032,41);
            	    pushFollow(FOLLOW_cp_expression_atom_in_cp_expression6144);
            	    cp_expression_atom();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop236;
                }
            } while (true);
            } finally {dbg.exitSubRule(236);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1034, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression"


    // $ANTLR start "cp_expression_operator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1036:1: cp_expression_operator : ( OR | AND | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ );
    public final void cp_expression_operator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression_operator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1036, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1037:5: ( OR | AND | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(1037,5);
            if ( input.LA(1)==AND||input.LA(1)==GREATER||(input.LA(1)>=OR && input.LA(1)<=GREATER_OR_EQ) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1039, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression_operator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression_operator"


    // $ANTLR start "cp_expression_atom"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:1: cp_expression_atom : ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN ) ;
    public final void cp_expression_atom() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression_atom");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1041, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1042:5: ( ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:9: ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN )
            {
            dbg.location(1043,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:9: ( NOT ( ws )? )?
            int alt238=2;
            try { dbg.enterSubRule(238);
            try { dbg.enterDecision(238, decisionCanBacktrack[238]);

            int LA238_0 = input.LA(1);

            if ( (LA238_0==NOT) ) {
                alt238=1;
            }
            } finally {dbg.exitDecision(238);}

            switch (alt238) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:10: NOT ( ws )?
                    {
                    dbg.location(1043,10);
                    match(input,NOT,FOLLOW_NOT_in_cp_expression_atom6226); if (state.failed) return ;
                    dbg.location(1043,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:14: ( ws )?
                    int alt237=2;
                    try { dbg.enterSubRule(237);
                    try { dbg.enterDecision(237, decisionCanBacktrack[237]);

                    int LA237_0 = input.LA(1);

                    if ( ((LA237_0>=WS && LA237_0<=COMMENT)) ) {
                        alt237=1;
                    }
                    } finally {dbg.exitDecision(237);}

                    switch (alt237) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:14: ws
                            {
                            dbg.location(1043,14);
                            pushFollow(FOLLOW_ws_in_cp_expression_atom6228);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(237);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(238);}

            dbg.location(1044,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1044:9: ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN )
            int alt242=2;
            try { dbg.enterSubRule(242);
            try { dbg.enterDecision(242, decisionCanBacktrack[242]);

            try {
                isCyclicDecision = true;
                alt242 = dfa242.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(242);}

            switch (alt242) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1045:13: ( cp_math_expression )=> cp_math_expression
                    {
                    dbg.location(1045,35);
                    pushFollow(FOLLOW_cp_math_expression_in_cp_expression_atom6259);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:15: LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN
                    {
                    dbg.location(1046,15);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_expression_atom6275); if (state.failed) return ;
                    dbg.location(1046,22);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:22: ( ws )?
                    int alt239=2;
                    try { dbg.enterSubRule(239);
                    try { dbg.enterDecision(239, decisionCanBacktrack[239]);

                    int LA239_0 = input.LA(1);

                    if ( ((LA239_0>=WS && LA239_0<=COMMENT)) ) {
                        alt239=1;
                    }
                    } finally {dbg.exitDecision(239);}

                    switch (alt239) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:22: ws
                            {
                            dbg.location(1046,22);
                            pushFollow(FOLLOW_ws_in_cp_expression_atom6277);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(239);}

                    dbg.location(1046,26);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:26: ( cp_expression_list ( ws )? )?
                    int alt241=2;
                    try { dbg.enterSubRule(241);
                    try { dbg.enterDecision(241, decisionCanBacktrack[241]);

                    int LA241_0 = input.LA(1);

                    if ( (LA241_0==NAMESPACE_SYM||(LA241_0>=IDENT && LA241_0<=IMPORT_SYM)||LA241_0==LPAREN||LA241_0==MEDIA_SYM||LA241_0==IMPORTANT_SYM||(LA241_0>=NOT && LA241_0<=GEN)||(LA241_0>=AT_IDENT && LA241_0<=MOZ_DOCUMENT_SYM)||(LA241_0>=WEBKIT_KEYFRAMES_SYM && LA241_0<=RIGHTBOTTOM_SYM)||(LA241_0>=MINUS && LA241_0<=PLUS)||(LA241_0>=TILDE && LA241_0<=HASH)||(LA241_0>=SASS_VAR && LA241_0<=PERCENTAGE_SYMBOL)||(LA241_0>=SASS_CONTENT && LA241_0<=SASS_WHILE)) ) {
                        alt241=1;
                    }
                    } finally {dbg.exitDecision(241);}

                    switch (alt241) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:27: cp_expression_list ( ws )?
                            {
                            dbg.location(1046,27);
                            pushFollow(FOLLOW_cp_expression_list_in_cp_expression_atom6281);
                            cp_expression_list();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(1046,46);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:46: ( ws )?
                            int alt240=2;
                            try { dbg.enterSubRule(240);
                            try { dbg.enterDecision(240, decisionCanBacktrack[240]);

                            int LA240_0 = input.LA(1);

                            if ( ((LA240_0>=WS && LA240_0<=COMMENT)) ) {
                                alt240=1;
                            }
                            } finally {dbg.exitDecision(240);}

                            switch (alt240) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:46: ws
                                    {
                                    dbg.location(1046,46);
                                    pushFollow(FOLLOW_ws_in_cp_expression_atom6283);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(240);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(241);}

                    dbg.location(1046,52);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_expression_atom6288); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(242);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1048, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression_atom");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression_atom"


    // $ANTLR start "cp_math_expressions"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1051:1: cp_math_expressions : cp_math_expression ( ws cp_math_expression )* ;
    public final void cp_math_expressions() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_math_expressions");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1051, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1052:5: ( cp_math_expression ( ws cp_math_expression )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:5: cp_math_expression ( ws cp_math_expression )*
            {
            dbg.location(1053,5);
            pushFollow(FOLLOW_cp_math_expression_in_cp_math_expressions6320);
            cp_math_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1054,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1054:5: ( ws cp_math_expression )*
            try { dbg.enterSubRule(243);

            loop243:
            do {
                int alt243=2;
                try { dbg.enterDecision(243, decisionCanBacktrack[243]);

                int LA243_0 = input.LA(1);

                if ( ((LA243_0>=WS && LA243_0<=COMMENT)) ) {
                    alt243=1;
                }


                } finally {dbg.exitDecision(243);}

                switch (alt243) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1054:6: ws cp_math_expression
            	    {
            	    dbg.location(1054,6);
            	    pushFollow(FOLLOW_ws_in_cp_math_expressions6327);
            	    ws();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(1054,9);
            	    pushFollow(FOLLOW_cp_math_expression_in_cp_math_expressions6329);
            	    cp_math_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop243;
                }
            } while (true);
            } finally {dbg.exitSubRule(243);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1055, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_math_expressions");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_math_expressions"


    // $ANTLR start "cp_math_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1069:1: cp_math_expression : cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )* ;
    public final void cp_math_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_math_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1069, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1070:5: ( cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1070:10: cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*
            {
            dbg.location(1070,10);
            pushFollow(FOLLOW_cp_math_expression_atom_in_cp_math_expression6363);
            cp_math_expression_atom();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1071,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:10: ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*
            try { dbg.enterSubRule(246);

            loop246:
            do {
                int alt246=2;
                try { dbg.enterDecision(246, decisionCanBacktrack[246]);

                try {
                    isCyclicDecision = true;
                    alt246 = dfa246.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(246);}

                switch (alt246) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1072:13: ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom
            	    {
            	    dbg.location(1072,48);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1072:48: ( ws )?
            	    int alt244=2;
            	    try { dbg.enterSubRule(244);
            	    try { dbg.enterDecision(244, decisionCanBacktrack[244]);

            	    int LA244_0 = input.LA(1);

            	    if ( ((LA244_0>=WS && LA244_0<=COMMENT)) ) {
            	        alt244=1;
            	    }
            	    } finally {dbg.exitDecision(244);}

            	    switch (alt244) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1072:48: ws
            	            {
            	            dbg.location(1072,48);
            	            pushFollow(FOLLOW_ws_in_cp_math_expression6405);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(244);}

            	    dbg.location(1072,52);
            	    if ( (input.LA(1)>=SOLIDUS && input.LA(1)<=PLUS)||input.LA(1)==STAR ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }

            	    dbg.location(1072,78);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1072:78: ( ws )?
            	    int alt245=2;
            	    try { dbg.enterSubRule(245);
            	    try { dbg.enterDecision(245, decisionCanBacktrack[245]);

            	    int LA245_0 = input.LA(1);

            	    if ( ((LA245_0>=WS && LA245_0<=COMMENT)) ) {
            	        alt245=1;
            	    }
            	    } finally {dbg.exitDecision(245);}

            	    switch (alt245) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1072:78: ws
            	            {
            	            dbg.location(1072,78);
            	            pushFollow(FOLLOW_ws_in_cp_math_expression6418);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(245);}

            	    dbg.location(1072,82);
            	    pushFollow(FOLLOW_cp_math_expression_atom_in_cp_math_expression6421);
            	    cp_math_expression_atom();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop246;
                }
            } while (true);
            } finally {dbg.exitSubRule(246);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1074, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_math_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_math_expression"


    // $ANTLR start "cp_math_expression_atom"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1076:1: cp_math_expression_atom : ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN );
    public final void cp_math_expression_atom() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_math_expression_atom");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1076, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:5: ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN )
            int alt251=3;
            try { dbg.enterDecision(251, decisionCanBacktrack[251]);

            try {
                isCyclicDecision = true;
                alt251 = dfa251.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(251);}

            switch (alt251) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1078:5: term
                    {
                    dbg.location(1078,5);
                    pushFollow(FOLLOW_term_in_cp_math_expression_atom6454);
                    term();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1079:7: IMPORTANT_SYM
                    {
                    dbg.location(1079,7);
                    match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_cp_math_expression_atom6462); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1080:7: ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN
                    {
                    dbg.location(1080,7);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1080:7: ( unaryOperator ( ws )? )?
                    int alt248=2;
                    try { dbg.enterSubRule(248);
                    try { dbg.enterDecision(248, decisionCanBacktrack[248]);

                    int LA248_0 = input.LA(1);

                    if ( ((LA248_0>=MINUS && LA248_0<=PLUS)) ) {
                        alt248=1;
                    }
                    } finally {dbg.exitDecision(248);}

                    switch (alt248) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1080:9: unaryOperator ( ws )?
                            {
                            dbg.location(1080,9);
                            pushFollow(FOLLOW_unaryOperator_in_cp_math_expression_atom6473);
                            unaryOperator();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(1080,23);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1080:23: ( ws )?
                            int alt247=2;
                            try { dbg.enterSubRule(247);
                            try { dbg.enterDecision(247, decisionCanBacktrack[247]);

                            int LA247_0 = input.LA(1);

                            if ( ((LA247_0>=WS && LA247_0<=COMMENT)) ) {
                                alt247=1;
                            }
                            } finally {dbg.exitDecision(247);}

                            switch (alt247) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1080:23: ws
                                    {
                                    dbg.location(1080,23);
                                    pushFollow(FOLLOW_ws_in_cp_math_expression_atom6475);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(247);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(248);}

                    dbg.location(1080,30);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_math_expression_atom6481); if (state.failed) return ;
                    dbg.location(1080,37);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1080:37: ( ws )?
                    int alt249=2;
                    try { dbg.enterSubRule(249);
                    try { dbg.enterDecision(249, decisionCanBacktrack[249]);

                    int LA249_0 = input.LA(1);

                    if ( ((LA249_0>=WS && LA249_0<=COMMENT)) ) {
                        alt249=1;
                    }
                    } finally {dbg.exitDecision(249);}

                    switch (alt249) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1080:37: ws
                            {
                            dbg.location(1080,37);
                            pushFollow(FOLLOW_ws_in_cp_math_expression_atom6483);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(249);}

                    dbg.location(1080,41);
                    pushFollow(FOLLOW_cp_math_expression_in_cp_math_expression_atom6486);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1080,60);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1080:60: ( ws )?
                    int alt250=2;
                    try { dbg.enterSubRule(250);
                    try { dbg.enterDecision(250, decisionCanBacktrack[250]);

                    int LA250_0 = input.LA(1);

                    if ( ((LA250_0>=WS && LA250_0<=COMMENT)) ) {
                        alt250=1;
                    }
                    } finally {dbg.exitDecision(250);}

                    switch (alt250) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1080:60: ws
                            {
                            dbg.location(1080,60);
                            pushFollow(FOLLOW_ws_in_cp_math_expression_atom6488);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(250);}

                    dbg.location(1080,64);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_math_expression_atom6491); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1081, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_math_expression_atom");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_math_expression_atom"


    // $ANTLR start "cp_mixin_declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1089:1: cp_mixin_declaration : ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block ;
    public final void cp_mixin_declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1089, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1090:5: ( ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1091:5: ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block
            {
            dbg.location(1091,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1091:5: ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? )
            int alt261=2;
            try { dbg.enterSubRule(261);
            try { dbg.enterDecision(261, decisionCanBacktrack[261]);

            int LA261_0 = input.LA(1);

            if ( (LA261_0==DOT) ) {
                alt261=1;
            }
            else if ( (LA261_0==SASS_MIXIN) ) {
                alt261=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(261);}

            switch (alt261) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:9: {...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )?
                    {
                    dbg.location(1092,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_declaration", "isLessSource()");
                    }
                    dbg.location(1092,27);
                    match(input,DOT,FOLLOW_DOT_in_cp_mixin_declaration6530); if (state.failed) return ;
                    dbg.location(1092,31);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration6532);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1092,45);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:45: ( ws )?
                    int alt252=2;
                    try { dbg.enterSubRule(252);
                    try { dbg.enterDecision(252, decisionCanBacktrack[252]);

                    int LA252_0 = input.LA(1);

                    if ( ((LA252_0>=WS && LA252_0<=COMMENT)) ) {
                        alt252=1;
                    }
                    } finally {dbg.exitDecision(252);}

                    switch (alt252) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:45: ws
                            {
                            dbg.location(1092,45);
                            pushFollow(FOLLOW_ws_in_cp_mixin_declaration6534);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(252);}

                    dbg.location(1092,49);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration6537); if (state.failed) return ;
                    dbg.location(1092,56);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:56: ( ws )?
                    int alt253=2;
                    try { dbg.enterSubRule(253);
                    try { dbg.enterDecision(253, decisionCanBacktrack[253]);

                    int LA253_0 = input.LA(1);

                    if ( ((LA253_0>=WS && LA253_0<=COMMENT)) ) {
                        alt253=1;
                    }
                    } finally {dbg.exitDecision(253);}

                    switch (alt253) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:56: ws
                            {
                            dbg.location(1092,56);
                            pushFollow(FOLLOW_ws_in_cp_mixin_declaration6539);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(253);}

                    dbg.location(1092,60);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:60: ( cp_args_list )?
                    int alt254=2;
                    try { dbg.enterSubRule(254);
                    try { dbg.enterDecision(254, decisionCanBacktrack[254]);

                    int LA254_0 = input.LA(1);

                    if ( (LA254_0==NAMESPACE_SYM||(LA254_0>=CHARSET_SYM && LA254_0<=IMPORT_SYM)||LA254_0==MEDIA_SYM||(LA254_0>=AT_IDENT && LA254_0<=MOZ_DOCUMENT_SYM)||LA254_0==WEBKIT_KEYFRAMES_SYM||(LA254_0>=PAGE_SYM && LA254_0<=RIGHTBOTTOM_SYM)||LA254_0==SASS_VAR||(LA254_0>=SASS_CONTENT && LA254_0<=SASS_WHILE)||(LA254_0>=CP_DOTS && LA254_0<=LESS_REST)) ) {
                        alt254=1;
                    }
                    } finally {dbg.exitDecision(254);}

                    switch (alt254) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:60: cp_args_list
                            {
                            dbg.location(1092,60);
                            pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration6542);
                            cp_args_list();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(254);}

                    dbg.location(1092,74);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration6545); if (state.failed) return ;
                    dbg.location(1092,81);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:81: ( ( ws )? less_mixin_guarded )?
                    int alt256=2;
                    try { dbg.enterSubRule(256);
                    try { dbg.enterDecision(256, decisionCanBacktrack[256]);

                    try {
                        isCyclicDecision = true;
                        alt256 = dfa256.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(256);}

                    switch (alt256) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:82: ( ws )? less_mixin_guarded
                            {
                            dbg.location(1092,82);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:82: ( ws )?
                            int alt255=2;
                            try { dbg.enterSubRule(255);
                            try { dbg.enterDecision(255, decisionCanBacktrack[255]);

                            int LA255_0 = input.LA(1);

                            if ( ((LA255_0>=WS && LA255_0<=COMMENT)) ) {
                                alt255=1;
                            }
                            } finally {dbg.exitDecision(255);}

                            switch (alt255) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1092:82: ws
                                    {
                                    dbg.location(1092,82);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6548);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(255);}

                            dbg.location(1092,86);
                            pushFollow(FOLLOW_less_mixin_guarded_in_cp_mixin_declaration6551);
                            less_mixin_guarded();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(256);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:9: {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?
                    {
                    dbg.location(1094,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_declaration", "isScssSource()");
                    }
                    dbg.location(1094,27);
                    match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_cp_mixin_declaration6575); if (state.failed) return ;
                    dbg.location(1094,38);
                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6577);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1094,41);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration6579);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1094,55);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:55: ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?
                    int alt260=2;
                    try { dbg.enterSubRule(260);
                    try { dbg.enterDecision(260, decisionCanBacktrack[260]);

                    try {
                        isCyclicDecision = true;
                        alt260 = dfa260.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(260);}

                    switch (alt260) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:56: ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN
                            {
                            dbg.location(1094,56);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:56: ( ws )?
                            int alt257=2;
                            try { dbg.enterSubRule(257);
                            try { dbg.enterDecision(257, decisionCanBacktrack[257]);

                            int LA257_0 = input.LA(1);

                            if ( ((LA257_0>=WS && LA257_0<=COMMENT)) ) {
                                alt257=1;
                            }
                            } finally {dbg.exitDecision(257);}

                            switch (alt257) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:56: ws
                                    {
                                    dbg.location(1094,56);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6582);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(257);}

                            dbg.location(1094,60);
                            match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration6585); if (state.failed) return ;
                            dbg.location(1094,67);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:67: ( ws )?
                            int alt258=2;
                            try { dbg.enterSubRule(258);
                            try { dbg.enterDecision(258, decisionCanBacktrack[258]);

                            int LA258_0 = input.LA(1);

                            if ( ((LA258_0>=WS && LA258_0<=COMMENT)) ) {
                                alt258=1;
                            }
                            } finally {dbg.exitDecision(258);}

                            switch (alt258) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:67: ws
                                    {
                                    dbg.location(1094,67);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6587);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(258);}

                            dbg.location(1094,71);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:71: ( cp_args_list )?
                            int alt259=2;
                            try { dbg.enterSubRule(259);
                            try { dbg.enterDecision(259, decisionCanBacktrack[259]);

                            int LA259_0 = input.LA(1);

                            if ( (LA259_0==NAMESPACE_SYM||(LA259_0>=CHARSET_SYM && LA259_0<=IMPORT_SYM)||LA259_0==MEDIA_SYM||(LA259_0>=AT_IDENT && LA259_0<=MOZ_DOCUMENT_SYM)||LA259_0==WEBKIT_KEYFRAMES_SYM||(LA259_0>=PAGE_SYM && LA259_0<=RIGHTBOTTOM_SYM)||LA259_0==SASS_VAR||(LA259_0>=SASS_CONTENT && LA259_0<=SASS_WHILE)||(LA259_0>=CP_DOTS && LA259_0<=LESS_REST)) ) {
                                alt259=1;
                            }
                            } finally {dbg.exitDecision(259);}

                            switch (alt259) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:71: cp_args_list
                                    {
                                    dbg.location(1094,71);
                                    pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration6590);
                                    cp_args_list();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(259);}

                            dbg.location(1094,85);
                            match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration6593); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(260);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(261);}

            dbg.location(1096,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:5: ( ws )?
            int alt262=2;
            try { dbg.enterSubRule(262);
            try { dbg.enterDecision(262, decisionCanBacktrack[262]);

            int LA262_0 = input.LA(1);

            if ( ((LA262_0>=WS && LA262_0<=COMMENT)) ) {
                alt262=1;
            }
            } finally {dbg.exitDecision(262);}

            switch (alt262) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:5: ws
                    {
                    dbg.location(1096,5);
                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6607);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(262);}

            dbg.location(1096,9);
            pushFollow(FOLLOW_cp_mixin_block_in_cp_mixin_declaration6610);
            cp_mixin_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1097, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_declaration"


    // $ANTLR start "cp_mixin_call"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1101:1: cp_mixin_call : ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? | {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? ) ;
    public final void cp_mixin_call() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1101, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1102:5: ( ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? | {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1103:5: ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? | {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? )
            {
            dbg.location(1103,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1103:5: ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? | {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? )
            int alt273=2;
            try { dbg.enterSubRule(273);
            try { dbg.enterDecision(273, decisionCanBacktrack[273]);

            int LA273_0 = input.LA(1);

            if ( (LA273_0==DOT) ) {
                alt273=1;
            }
            else if ( (LA273_0==SASS_INCLUDE) ) {
                alt273=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 273, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(273);}

            switch (alt273) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1104:9: {...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
                    {
                    dbg.location(1104,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_call", "isLessSource()");
                    }
                    dbg.location(1104,27);
                    match(input,DOT,FOLLOW_DOT_in_cp_mixin_call6645); if (state.failed) return ;
                    dbg.location(1104,31);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call6647);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1104,45);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1104:45: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
                    int alt266=2;
                    try { dbg.enterSubRule(266);
                    try { dbg.enterDecision(266, decisionCanBacktrack[266]);

                    try {
                        isCyclicDecision = true;
                        alt266 = dfa266.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(266);}

                    switch (alt266) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1104:46: ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN
                            {
                            dbg.location(1104,46);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1104:46: ( ws )?
                            int alt263=2;
                            try { dbg.enterSubRule(263);
                            try { dbg.enterDecision(263, decisionCanBacktrack[263]);

                            int LA263_0 = input.LA(1);

                            if ( ((LA263_0>=WS && LA263_0<=COMMENT)) ) {
                                alt263=1;
                            }
                            } finally {dbg.exitDecision(263);}

                            switch (alt263) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1104:46: ws
                                    {
                                    dbg.location(1104,46);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6650);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(263);}

                            dbg.location(1104,50);
                            match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_call6653); if (state.failed) return ;
                            dbg.location(1104,57);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1104:57: ( ws )?
                            int alt264=2;
                            try { dbg.enterSubRule(264);
                            try { dbg.enterDecision(264, decisionCanBacktrack[264]);

                            int LA264_0 = input.LA(1);

                            if ( ((LA264_0>=WS && LA264_0<=COMMENT)) ) {
                                alt264=1;
                            }
                            } finally {dbg.exitDecision(264);}

                            switch (alt264) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1104:57: ws
                                    {
                                    dbg.location(1104,57);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6655);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(264);}

                            dbg.location(1104,61);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1104:61: ( cp_mixin_call_args )?
                            int alt265=2;
                            try { dbg.enterSubRule(265);
                            try { dbg.enterDecision(265, decisionCanBacktrack[265]);

                            int LA265_0 = input.LA(1);

                            if ( (LA265_0==NAMESPACE_SYM||(LA265_0>=IDENT && LA265_0<=IMPORT_SYM)||LA265_0==LPAREN||LA265_0==MEDIA_SYM||LA265_0==IMPORTANT_SYM||(LA265_0>=NOT && LA265_0<=GEN)||(LA265_0>=AT_IDENT && LA265_0<=MOZ_DOCUMENT_SYM)||(LA265_0>=WEBKIT_KEYFRAMES_SYM && LA265_0<=RIGHTBOTTOM_SYM)||(LA265_0>=MINUS && LA265_0<=PLUS)||(LA265_0>=TILDE && LA265_0<=HASH)||(LA265_0>=SASS_VAR && LA265_0<=PERCENTAGE_SYMBOL)||(LA265_0>=SASS_CONTENT && LA265_0<=SASS_WHILE)) ) {
                                alt265=1;
                            }
                            } finally {dbg.exitDecision(265);}

                            switch (alt265) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1104:61: cp_mixin_call_args
                                    {
                                    dbg.location(1104,61);
                                    pushFollow(FOLLOW_cp_mixin_call_args_in_cp_mixin_call6658);
                                    cp_mixin_call_args();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(265);}

                            dbg.location(1104,81);
                            match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_call6661); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(266);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:9: {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )?
                    {
                    dbg.location(1106,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_call", "isScssSource()");
                    }
                    dbg.location(1106,27);
                    match(input,SASS_INCLUDE,FOLLOW_SASS_INCLUDE_in_cp_mixin_call6685); if (state.failed) return ;
                    dbg.location(1106,40);
                    pushFollow(FOLLOW_ws_in_cp_mixin_call6687);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1106,43);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call6689);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1106,57);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:57: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
                    int alt270=2;
                    try { dbg.enterSubRule(270);
                    try { dbg.enterDecision(270, decisionCanBacktrack[270]);

                    try {
                        isCyclicDecision = true;
                        alt270 = dfa270.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(270);}

                    switch (alt270) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:58: ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN
                            {
                            dbg.location(1106,58);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:58: ( ws )?
                            int alt267=2;
                            try { dbg.enterSubRule(267);
                            try { dbg.enterDecision(267, decisionCanBacktrack[267]);

                            int LA267_0 = input.LA(1);

                            if ( ((LA267_0>=WS && LA267_0<=COMMENT)) ) {
                                alt267=1;
                            }
                            } finally {dbg.exitDecision(267);}

                            switch (alt267) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:58: ws
                                    {
                                    dbg.location(1106,58);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6692);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(267);}

                            dbg.location(1106,62);
                            match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_call6695); if (state.failed) return ;
                            dbg.location(1106,69);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:69: ( ws )?
                            int alt268=2;
                            try { dbg.enterSubRule(268);
                            try { dbg.enterDecision(268, decisionCanBacktrack[268]);

                            int LA268_0 = input.LA(1);

                            if ( ((LA268_0>=WS && LA268_0<=COMMENT)) ) {
                                alt268=1;
                            }
                            } finally {dbg.exitDecision(268);}

                            switch (alt268) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:69: ws
                                    {
                                    dbg.location(1106,69);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6697);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(268);}

                            dbg.location(1106,73);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:73: ( cp_mixin_call_args )?
                            int alt269=2;
                            try { dbg.enterSubRule(269);
                            try { dbg.enterDecision(269, decisionCanBacktrack[269]);

                            int LA269_0 = input.LA(1);

                            if ( (LA269_0==NAMESPACE_SYM||(LA269_0>=IDENT && LA269_0<=IMPORT_SYM)||LA269_0==LPAREN||LA269_0==MEDIA_SYM||LA269_0==IMPORTANT_SYM||(LA269_0>=NOT && LA269_0<=GEN)||(LA269_0>=AT_IDENT && LA269_0<=MOZ_DOCUMENT_SYM)||(LA269_0>=WEBKIT_KEYFRAMES_SYM && LA269_0<=RIGHTBOTTOM_SYM)||(LA269_0>=MINUS && LA269_0<=PLUS)||(LA269_0>=TILDE && LA269_0<=HASH)||(LA269_0>=SASS_VAR && LA269_0<=PERCENTAGE_SYMBOL)||(LA269_0>=SASS_CONTENT && LA269_0<=SASS_WHILE)) ) {
                                alt269=1;
                            }
                            } finally {dbg.exitDecision(269);}

                            switch (alt269) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:73: cp_mixin_call_args
                                    {
                                    dbg.location(1106,73);
                                    pushFollow(FOLLOW_cp_mixin_call_args_in_cp_mixin_call6700);
                                    cp_mixin_call_args();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(269);}

                            dbg.location(1106,93);
                            match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_call6703); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(270);}

                    dbg.location(1106,102);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:102: ( ( ws )? cp_mixin_block )?
                    int alt272=2;
                    try { dbg.enterSubRule(272);
                    try { dbg.enterDecision(272, decisionCanBacktrack[272]);

                    try {
                        isCyclicDecision = true;
                        alt272 = dfa272.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(272);}

                    switch (alt272) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:103: ( ws )? cp_mixin_block
                            {
                            dbg.location(1106,103);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:103: ( ws )?
                            int alt271=2;
                            try { dbg.enterSubRule(271);
                            try { dbg.enterDecision(271, decisionCanBacktrack[271]);

                            int LA271_0 = input.LA(1);

                            if ( ((LA271_0>=WS && LA271_0<=COMMENT)) ) {
                                alt271=1;
                            }
                            } finally {dbg.exitDecision(271);}

                            switch (alt271) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:103: ws
                                    {
                                    dbg.location(1106,103);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6708);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(271);}

                            dbg.location(1106,107);
                            pushFollow(FOLLOW_cp_mixin_block_in_cp_mixin_call6711);
                            cp_mixin_block();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(272);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(273);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1108, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_call");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_call"


    // $ANTLR start "cp_mixin_block"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1110:1: cp_mixin_block : LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void cp_mixin_block() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_block");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1110, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1111:5: ( LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1112:5: LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(1112,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_cp_mixin_block6740); if (state.failed) return ;
            dbg.location(1112,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1112:12: ( ws )?
            int alt274=2;
            try { dbg.enterSubRule(274);
            try { dbg.enterDecision(274, decisionCanBacktrack[274]);

            int LA274_0 = input.LA(1);

            if ( ((LA274_0>=WS && LA274_0<=COMMENT)) ) {
                alt274=1;
            }
            } finally {dbg.exitDecision(274);}

            switch (alt274) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1112:12: ws
                    {
                    dbg.location(1112,12);
                    pushFollow(FOLLOW_ws_in_cp_mixin_block6742);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(274);}

            dbg.location(1112,16);
            pushFollow(FOLLOW_syncToFollow_in_cp_mixin_block6745);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1113,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1113:9: ( declarations )?
            int alt275=2;
            try { dbg.enterSubRule(275);
            try { dbg.enterDecision(275, decisionCanBacktrack[275]);

            int LA275_0 = input.LA(1);

            if ( ((LA275_0>=NAMESPACE_SYM && LA275_0<=IDENT)||(LA275_0>=CHARSET_SYM && LA275_0<=COMMA)||LA275_0==MEDIA_SYM||(LA275_0>=GEN && LA275_0<=MOZ_DOCUMENT_SYM)||LA275_0==WEBKIT_KEYFRAMES_SYM||(LA275_0>=PAGE_SYM && LA275_0<=RIGHTBOTTOM_SYM)||(LA275_0>=MINUS && LA275_0<=PIPE)||LA275_0==LESS_AND||(LA275_0>=RBRACKET && LA275_0<=SASS_VAR)||(LA275_0>=SASS_CONTENT && LA275_0<=SASS_WHILE)||LA275_0==AT_SIGN) ) {
                alt275=1;
            }
            } finally {dbg.exitDecision(275);}

            switch (alt275) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1113:9: declarations
                    {
                    dbg.location(1113,9);
                    pushFollow(FOLLOW_declarations_in_cp_mixin_block6755);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(275);}

            dbg.location(1114,5);
            match(input,RBRACE,FOLLOW_RBRACE_in_cp_mixin_block6762); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1115, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_block");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_block"


    // $ANTLR start "cp_mixin_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:1: cp_mixin_name : IDENT ;
    public final void cp_mixin_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1117, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1118:5: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1119:5: IDENT
            {
            dbg.location(1119,5);
            match(input,IDENT,FOLLOW_IDENT_in_cp_mixin_name6783); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1120, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_name"


    // $ANTLR start "cp_mixin_call_args"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1122:1: cp_mixin_call_args : cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS ( ws )? )? ;
    public final void cp_mixin_call_args() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_args");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1122, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1123:5: ( cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS ( ws )? )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1126:5: cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS ( ws )? )?
            {
            dbg.location(1126,5);
            pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6814);
            cp_mixin_call_arg();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1126,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1126:23: ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )*
            try { dbg.enterSubRule(277);

            loop277:
            do {
                int alt277=2;
                try { dbg.enterDecision(277, decisionCanBacktrack[277]);

                int LA277_0 = input.LA(1);

                if ( (LA277_0==SEMI||LA277_0==COMMA) ) {
                    alt277=1;
                }


                } finally {dbg.exitDecision(277);}

                switch (alt277) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1126:25: ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg
            	    {
            	    dbg.location(1126,25);
            	    if ( input.LA(1)==SEMI||input.LA(1)==COMMA ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }

            	    dbg.location(1126,40);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1126:40: ( ws )?
            	    int alt276=2;
            	    try { dbg.enterSubRule(276);
            	    try { dbg.enterDecision(276, decisionCanBacktrack[276]);

            	    int LA276_0 = input.LA(1);

            	    if ( ((LA276_0>=WS && LA276_0<=COMMENT)) ) {
            	        alt276=1;
            	    }
            	    } finally {dbg.exitDecision(276);}

            	    switch (alt276) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1126:40: ws
            	            {
            	            dbg.location(1126,40);
            	            pushFollow(FOLLOW_ws_in_cp_mixin_call_args6826);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(276);}

            	    dbg.location(1126,44);
            	    pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6829);
            	    cp_mixin_call_arg();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop277;
                }
            } while (true);
            } finally {dbg.exitSubRule(277);}

            dbg.location(1126,65);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1126:65: ( CP_DOTS ( ws )? )?
            int alt279=2;
            try { dbg.enterSubRule(279);
            try { dbg.enterDecision(279, decisionCanBacktrack[279]);

            int LA279_0 = input.LA(1);

            if ( (LA279_0==CP_DOTS) ) {
                alt279=1;
            }
            } finally {dbg.exitDecision(279);}

            switch (alt279) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1126:66: CP_DOTS ( ws )?
                    {
                    dbg.location(1126,66);
                    match(input,CP_DOTS,FOLLOW_CP_DOTS_in_cp_mixin_call_args6835); if (state.failed) return ;
                    dbg.location(1126,74);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1126:74: ( ws )?
                    int alt278=2;
                    try { dbg.enterSubRule(278);
                    try { dbg.enterDecision(278, decisionCanBacktrack[278]);

                    int LA278_0 = input.LA(1);

                    if ( ((LA278_0>=WS && LA278_0<=COMMENT)) ) {
                        alt278=1;
                    }
                    } finally {dbg.exitDecision(278);}

                    switch (alt278) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1126:74: ws
                            {
                            dbg.location(1126,74);
                            pushFollow(FOLLOW_ws_in_cp_mixin_call_args6837);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(278);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(279);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1127, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_call_args");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_call_args"


    // $ANTLR start "cp_mixin_call_arg"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1129:1: cp_mixin_call_arg : ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? ;
    public final void cp_mixin_call_arg() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_arg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1129, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:5: ( ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1131:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )?
            {
            dbg.location(1131,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1131:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )
            int alt282=2;
            try { dbg.enterSubRule(282);
            try { dbg.enterDecision(282, decisionCanBacktrack[282]);

            try {
                isCyclicDecision = true;
                alt282 = dfa282.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(282);}

            switch (alt282) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:9: cp_variable ( ws )? COLON ( ws )? cp_expression
                    {
                    dbg.location(1132,9);
                    pushFollow(FOLLOW_cp_variable_in_cp_mixin_call_arg6871);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1132,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:21: ( ws )?
                    int alt280=2;
                    try { dbg.enterSubRule(280);
                    try { dbg.enterDecision(280, decisionCanBacktrack[280]);

                    int LA280_0 = input.LA(1);

                    if ( ((LA280_0>=WS && LA280_0<=COMMENT)) ) {
                        alt280=1;
                    }
                    } finally {dbg.exitDecision(280);}

                    switch (alt280) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:21: ws
                            {
                            dbg.location(1132,21);
                            pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6873);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(280);}

                    dbg.location(1132,25);
                    match(input,COLON,FOLLOW_COLON_in_cp_mixin_call_arg6876); if (state.failed) return ;
                    dbg.location(1132,31);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:31: ( ws )?
                    int alt281=2;
                    try { dbg.enterSubRule(281);
                    try { dbg.enterDecision(281, decisionCanBacktrack[281]);

                    int LA281_0 = input.LA(1);

                    if ( ((LA281_0>=WS && LA281_0<=COMMENT)) ) {
                        alt281=1;
                    }
                    } finally {dbg.exitDecision(281);}

                    switch (alt281) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:31: ws
                            {
                            dbg.location(1132,31);
                            pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6878);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(281);}

                    dbg.location(1132,35);
                    pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg6881);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1133:11: cp_expression
                    {
                    dbg.location(1133,11);
                    pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg6893);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(282);}

            dbg.location(1134,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:7: ( ws )?
            int alt283=2;
            try { dbg.enterSubRule(283);
            try { dbg.enterDecision(283, decisionCanBacktrack[283]);

            int LA283_0 = input.LA(1);

            if ( ((LA283_0>=WS && LA283_0<=COMMENT)) ) {
                alt283=1;
            }
            } finally {dbg.exitDecision(283);}

            switch (alt283) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:7: ws
                    {
                    dbg.location(1134,7);
                    pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6901);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(283);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1135, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_call_arg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_call_arg"


    // $ANTLR start "cp_args_list"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:1: cp_args_list : ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? ) | ( CP_DOTS | LESS_REST ) ( ws )? );
    public final void cp_args_list() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_args_list");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1138, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1139:5: ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? ) | ( CP_DOTS | LESS_REST ) ( ws )? )
            int alt291=2;
            try { dbg.enterDecision(291, decisionCanBacktrack[291]);

            int LA291_0 = input.LA(1);

            if ( (LA291_0==NAMESPACE_SYM||(LA291_0>=CHARSET_SYM && LA291_0<=IMPORT_SYM)||LA291_0==MEDIA_SYM||(LA291_0>=AT_IDENT && LA291_0<=MOZ_DOCUMENT_SYM)||LA291_0==WEBKIT_KEYFRAMES_SYM||(LA291_0>=PAGE_SYM && LA291_0<=RIGHTBOTTOM_SYM)||LA291_0==SASS_VAR||(LA291_0>=SASS_CONTENT && LA291_0<=SASS_WHILE)) ) {
                alt291=1;
            }
            else if ( ((LA291_0>=CP_DOTS && LA291_0<=LESS_REST)) ) {
                alt291=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 291, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(291);}

            switch (alt291) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? )
                    {
                    dbg.location(1146,5);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:7: cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )?
                    {
                    dbg.location(1146,7);
                    pushFollow(FOLLOW_cp_arg_in_cp_args_list6948);
                    cp_arg();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1146,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*
                    try { dbg.enterSubRule(285);

                    loop285:
                    do {
                        int alt285=2;
                        try { dbg.enterDecision(285, decisionCanBacktrack[285]);

                        try {
                            isCyclicDecision = true;
                            alt285 = dfa285.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(285);}

                        switch (alt285) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:16: ( COMMA | SEMI ) ( ws )? cp_arg
                    	    {
                    	    dbg.location(1146,16);
                    	    if ( input.LA(1)==SEMI||input.LA(1)==COMMA ) {
                    	        input.consume();
                    	        state.errorRecovery=false;state.failed=false;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return ;}
                    	        MismatchedSetException mse = new MismatchedSetException(null,input);
                    	        dbg.recognitionException(mse);
                    	        throw mse;
                    	    }

                    	    dbg.location(1146,33);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:33: ( ws )?
                    	    int alt284=2;
                    	    try { dbg.enterSubRule(284);
                    	    try { dbg.enterDecision(284, decisionCanBacktrack[284]);

                    	    int LA284_0 = input.LA(1);

                    	    if ( ((LA284_0>=WS && LA284_0<=COMMENT)) ) {
                    	        alt284=1;
                    	    }
                    	    } finally {dbg.exitDecision(284);}

                    	    switch (alt284) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:33: ws
                    	            {
                    	            dbg.location(1146,33);
                    	            pushFollow(FOLLOW_ws_in_cp_args_list6962);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(284);}

                    	    dbg.location(1146,37);
                    	    pushFollow(FOLLOW_cp_arg_in_cp_args_list6965);
                    	    cp_arg();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop285;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(285);}

                    dbg.location(1146,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:47: ( ( COMMA | SEMI ) ( ws )? )?
                    int alt287=2;
                    try { dbg.enterSubRule(287);
                    try { dbg.enterDecision(287, decisionCanBacktrack[287]);

                    int LA287_0 = input.LA(1);

                    if ( (LA287_0==SEMI||LA287_0==COMMA) ) {
                        alt287=1;
                    }
                    } finally {dbg.exitDecision(287);}

                    switch (alt287) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:49: ( COMMA | SEMI ) ( ws )?
                            {
                            dbg.location(1146,49);
                            if ( input.LA(1)==SEMI||input.LA(1)==COMMA ) {
                                input.consume();
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                dbg.recognitionException(mse);
                                throw mse;
                            }

                            dbg.location(1146,64);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:64: ( ws )?
                            int alt286=2;
                            try { dbg.enterSubRule(286);
                            try { dbg.enterDecision(286, decisionCanBacktrack[286]);

                            int LA286_0 = input.LA(1);

                            if ( ((LA286_0>=WS && LA286_0<=COMMENT)) ) {
                                alt286=1;
                            }
                            } finally {dbg.exitDecision(286);}

                            switch (alt286) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:64: ws
                                    {
                                    dbg.location(1146,64);
                                    pushFollow(FOLLOW_ws_in_cp_args_list6980);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(286);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(287);}

                    dbg.location(1146,71);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:71: ( ( CP_DOTS | LESS_REST ) ( ws )? )?
                    int alt289=2;
                    try { dbg.enterSubRule(289);
                    try { dbg.enterDecision(289, decisionCanBacktrack[289]);

                    int LA289_0 = input.LA(1);

                    if ( ((LA289_0>=CP_DOTS && LA289_0<=LESS_REST)) ) {
                        alt289=1;
                    }
                    } finally {dbg.exitDecision(289);}

                    switch (alt289) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:73: ( CP_DOTS | LESS_REST ) ( ws )?
                            {
                            dbg.location(1146,73);
                            if ( (input.LA(1)>=CP_DOTS && input.LA(1)<=LESS_REST) ) {
                                input.consume();
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                dbg.recognitionException(mse);
                                throw mse;
                            }

                            dbg.location(1146,95);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:95: ( ws )?
                            int alt288=2;
                            try { dbg.enterSubRule(288);
                            try { dbg.enterDecision(288, decisionCanBacktrack[288]);

                            int LA288_0 = input.LA(1);

                            if ( ((LA288_0>=WS && LA288_0<=COMMENT)) ) {
                                alt288=1;
                            }
                            } finally {dbg.exitDecision(288);}

                            switch (alt288) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:95: ws
                                    {
                                    dbg.location(1146,95);
                                    pushFollow(FOLLOW_ws_in_cp_args_list6996);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(288);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(289);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1148:5: ( CP_DOTS | LESS_REST ) ( ws )?
                    {
                    dbg.location(1148,5);
                    if ( (input.LA(1)>=CP_DOTS && input.LA(1)<=LESS_REST) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(1148,27);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1148:27: ( ws )?
                    int alt290=2;
                    try { dbg.enterSubRule(290);
                    try { dbg.enterDecision(290, decisionCanBacktrack[290]);

                    int LA290_0 = input.LA(1);

                    if ( ((LA290_0>=WS && LA290_0<=COMMENT)) ) {
                        alt290=1;
                    }
                    } finally {dbg.exitDecision(290);}

                    switch (alt290) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1148:27: ws
                            {
                            dbg.location(1148,27);
                            pushFollow(FOLLOW_ws_in_cp_args_list7021);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(290);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1149, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_args_list");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_args_list"


    // $ANTLR start "cp_arg"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1152:1: cp_arg : cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? ;
    public final void cp_arg() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_arg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1152, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1153:5: ( cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1154:5: cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )?
            {
            dbg.location(1154,5);
            pushFollow(FOLLOW_cp_variable_in_cp_arg7044);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1154,17);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1154:17: ( ws )?
            int alt292=2;
            try { dbg.enterSubRule(292);
            try { dbg.enterDecision(292, decisionCanBacktrack[292]);

            int LA292_0 = input.LA(1);

            if ( ((LA292_0>=WS && LA292_0<=COMMENT)) ) {
                alt292=1;
            }
            } finally {dbg.exitDecision(292);}

            switch (alt292) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1154:17: ws
                    {
                    dbg.location(1154,17);
                    pushFollow(FOLLOW_ws_in_cp_arg7046);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(292);}

            dbg.location(1154,21);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1154:21: ( COLON ( ws )? cp_expression ( ws )? )?
            int alt295=2;
            try { dbg.enterSubRule(295);
            try { dbg.enterDecision(295, decisionCanBacktrack[295]);

            int LA295_0 = input.LA(1);

            if ( (LA295_0==COLON) ) {
                alt295=1;
            }
            } finally {dbg.exitDecision(295);}

            switch (alt295) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1154:23: COLON ( ws )? cp_expression ( ws )?
                    {
                    dbg.location(1154,23);
                    match(input,COLON,FOLLOW_COLON_in_cp_arg7051); if (state.failed) return ;
                    dbg.location(1154,29);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1154:29: ( ws )?
                    int alt293=2;
                    try { dbg.enterSubRule(293);
                    try { dbg.enterDecision(293, decisionCanBacktrack[293]);

                    int LA293_0 = input.LA(1);

                    if ( ((LA293_0>=WS && LA293_0<=COMMENT)) ) {
                        alt293=1;
                    }
                    } finally {dbg.exitDecision(293);}

                    switch (alt293) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1154:29: ws
                            {
                            dbg.location(1154,29);
                            pushFollow(FOLLOW_ws_in_cp_arg7053);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(293);}

                    dbg.location(1154,33);
                    pushFollow(FOLLOW_cp_expression_in_cp_arg7056);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1154,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1154:47: ( ws )?
                    int alt294=2;
                    try { dbg.enterSubRule(294);
                    try { dbg.enterDecision(294, decisionCanBacktrack[294]);

                    int LA294_0 = input.LA(1);

                    if ( ((LA294_0>=WS && LA294_0<=COMMENT)) ) {
                        alt294=1;
                    }
                    } finally {dbg.exitDecision(294);}

                    switch (alt294) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1154:47: ws
                            {
                            dbg.location(1154,47);
                            pushFollow(FOLLOW_ws_in_cp_arg7058);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(294);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(295);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1155, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_arg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_arg"


    // $ANTLR start "less_mixin_guarded"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1159:1: less_mixin_guarded : LESS_WHEN ( ws )? less_condition ( ( ws )? ( COMMA | AND ) ( ws )? less_condition )* ;
    public final void less_mixin_guarded() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_mixin_guarded");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1159, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1160:5: ( LESS_WHEN ( ws )? less_condition ( ( ws )? ( COMMA | AND ) ( ws )? less_condition )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:5: LESS_WHEN ( ws )? less_condition ( ( ws )? ( COMMA | AND ) ( ws )? less_condition )*
            {
            dbg.location(1161,5);
            match(input,LESS_WHEN,FOLLOW_LESS_WHEN_in_less_mixin_guarded7084); if (state.failed) return ;
            dbg.location(1161,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:15: ( ws )?
            int alt296=2;
            try { dbg.enterSubRule(296);
            try { dbg.enterDecision(296, decisionCanBacktrack[296]);

            int LA296_0 = input.LA(1);

            if ( ((LA296_0>=WS && LA296_0<=COMMENT)) ) {
                alt296=1;
            }
            } finally {dbg.exitDecision(296);}

            switch (alt296) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:15: ws
                    {
                    dbg.location(1161,15);
                    pushFollow(FOLLOW_ws_in_less_mixin_guarded7086);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(296);}

            dbg.location(1161,19);
            pushFollow(FOLLOW_less_condition_in_less_mixin_guarded7089);
            less_condition();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1161,34);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:34: ( ( ws )? ( COMMA | AND ) ( ws )? less_condition )*
            try { dbg.enterSubRule(299);

            loop299:
            do {
                int alt299=2;
                try { dbg.enterDecision(299, decisionCanBacktrack[299]);

                try {
                    isCyclicDecision = true;
                    alt299 = dfa299.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(299);}

                switch (alt299) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:35: ( ws )? ( COMMA | AND ) ( ws )? less_condition
            	    {
            	    dbg.location(1161,35);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:35: ( ws )?
            	    int alt297=2;
            	    try { dbg.enterSubRule(297);
            	    try { dbg.enterDecision(297, decisionCanBacktrack[297]);

            	    int LA297_0 = input.LA(1);

            	    if ( ((LA297_0>=WS && LA297_0<=COMMENT)) ) {
            	        alt297=1;
            	    }
            	    } finally {dbg.exitDecision(297);}

            	    switch (alt297) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:35: ws
            	            {
            	            dbg.location(1161,35);
            	            pushFollow(FOLLOW_ws_in_less_mixin_guarded7092);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(297);}

            	    dbg.location(1161,39);
            	    if ( input.LA(1)==COMMA||input.LA(1)==AND ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }

            	    dbg.location(1161,53);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:53: ( ws )?
            	    int alt298=2;
            	    try { dbg.enterSubRule(298);
            	    try { dbg.enterDecision(298, decisionCanBacktrack[298]);

            	    int LA298_0 = input.LA(1);

            	    if ( ((LA298_0>=WS && LA298_0<=COMMENT)) ) {
            	        alt298=1;
            	    }
            	    } finally {dbg.exitDecision(298);}

            	    switch (alt298) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:53: ws
            	            {
            	            dbg.location(1161,53);
            	            pushFollow(FOLLOW_ws_in_less_mixin_guarded7103);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(298);}

            	    dbg.location(1161,57);
            	    pushFollow(FOLLOW_less_condition_in_less_mixin_guarded7106);
            	    less_condition();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop299;
                }
            } while (true);
            } finally {dbg.exitSubRule(299);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1162, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_mixin_guarded");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_mixin_guarded"


    // $ANTLR start "less_condition"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1166:1: less_condition : ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN ;
    public final void less_condition() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_condition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1166, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1167:5: ( ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:5: ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN
            {
            dbg.location(1168,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:5: ( NOT ( ws )? )?
            int alt301=2;
            try { dbg.enterSubRule(301);
            try { dbg.enterDecision(301, decisionCanBacktrack[301]);

            int LA301_0 = input.LA(1);

            if ( (LA301_0==NOT) ) {
                alt301=1;
            }
            } finally {dbg.exitDecision(301);}

            switch (alt301) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:6: NOT ( ws )?
                    {
                    dbg.location(1168,6);
                    match(input,NOT,FOLLOW_NOT_in_less_condition7132); if (state.failed) return ;
                    dbg.location(1168,10);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:10: ( ws )?
                    int alt300=2;
                    try { dbg.enterSubRule(300);
                    try { dbg.enterDecision(300, decisionCanBacktrack[300]);

                    int LA300_0 = input.LA(1);

                    if ( ((LA300_0>=WS && LA300_0<=COMMENT)) ) {
                        alt300=1;
                    }
                    } finally {dbg.exitDecision(300);}

                    switch (alt300) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1168:10: ws
                            {
                            dbg.location(1168,10);
                            pushFollow(FOLLOW_ws_in_less_condition7134);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(300);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(301);}

            dbg.location(1169,5);
            match(input,LPAREN,FOLLOW_LPAREN_in_less_condition7143); if (state.failed) return ;
            dbg.location(1169,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1169:12: ( ws )?
            int alt302=2;
            try { dbg.enterSubRule(302);
            try { dbg.enterDecision(302, decisionCanBacktrack[302]);

            int LA302_0 = input.LA(1);

            if ( ((LA302_0>=WS && LA302_0<=COMMENT)) ) {
                alt302=1;
            }
            } finally {dbg.exitDecision(302);}

            switch (alt302) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1169:12: ws
                    {
                    dbg.location(1169,12);
                    pushFollow(FOLLOW_ws_in_less_condition7145);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(302);}

            dbg.location(1170,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1170:9: ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:14: ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )?
            {
            dbg.location(1171,14);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:14: ( cp_variable | less_function_in_condition )
            int alt303=2;
            try { dbg.enterSubRule(303);
            try { dbg.enterDecision(303, decisionCanBacktrack[303]);

            int LA303_0 = input.LA(1);

            if ( (LA303_0==NAMESPACE_SYM||(LA303_0>=CHARSET_SYM && LA303_0<=IMPORT_SYM)||LA303_0==MEDIA_SYM||(LA303_0>=AT_IDENT && LA303_0<=MOZ_DOCUMENT_SYM)||LA303_0==WEBKIT_KEYFRAMES_SYM||(LA303_0>=PAGE_SYM && LA303_0<=RIGHTBOTTOM_SYM)||LA303_0==SASS_VAR||(LA303_0>=SASS_CONTENT && LA303_0<=SASS_WHILE)) ) {
                alt303=1;
            }
            else if ( (LA303_0==IDENT) ) {
                alt303=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 303, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(303);}

            switch (alt303) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:15: cp_variable
                    {
                    dbg.location(1171,15);
                    pushFollow(FOLLOW_cp_variable_in_less_condition7172);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:29: less_function_in_condition
                    {
                    dbg.location(1171,29);
                    pushFollow(FOLLOW_less_function_in_condition_in_less_condition7176);
                    less_function_in_condition();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(303);}

            dbg.location(1171,57);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:57: ( ws )?
            int alt304=2;
            try { dbg.enterSubRule(304);
            try { dbg.enterDecision(304, decisionCanBacktrack[304]);

            int LA304_0 = input.LA(1);

            if ( ((LA304_0>=WS && LA304_0<=COMMENT)) ) {
                alt304=1;
            }
            } finally {dbg.exitDecision(304);}

            switch (alt304) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:57: ws
                    {
                    dbg.location(1171,57);
                    pushFollow(FOLLOW_ws_in_less_condition7179);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(304);}

            dbg.location(1171,61);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:61: ( less_condition_operator ( ws )? cp_math_expression )?
            int alt306=2;
            try { dbg.enterSubRule(306);
            try { dbg.enterDecision(306, decisionCanBacktrack[306]);

            int LA306_0 = input.LA(1);

            if ( (LA306_0==GREATER||LA306_0==OPEQ||(LA306_0>=LESS && LA306_0<=GREATER_OR_EQ)) ) {
                alt306=1;
            }
            } finally {dbg.exitDecision(306);}

            switch (alt306) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:62: less_condition_operator ( ws )? cp_math_expression
                    {
                    dbg.location(1171,62);
                    pushFollow(FOLLOW_less_condition_operator_in_less_condition7183);
                    less_condition_operator();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1171,86);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:86: ( ws )?
                    int alt305=2;
                    try { dbg.enterSubRule(305);
                    try { dbg.enterDecision(305, decisionCanBacktrack[305]);

                    int LA305_0 = input.LA(1);

                    if ( ((LA305_0>=WS && LA305_0<=COMMENT)) ) {
                        alt305=1;
                    }
                    } finally {dbg.exitDecision(305);}

                    switch (alt305) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:86: ws
                            {
                            dbg.location(1171,86);
                            pushFollow(FOLLOW_ws_in_less_condition7185);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(305);}

                    dbg.location(1171,90);
                    pushFollow(FOLLOW_cp_math_expression_in_less_condition7188);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(306);}


            }

            dbg.location(1173,5);
            match(input,RPAREN,FOLLOW_RPAREN_in_less_condition7206); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1174, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_condition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_condition"


    // $ANTLR start "less_function_in_condition"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1177:1: less_function_in_condition : less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN ;
    public final void less_function_in_condition() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_function_in_condition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1177, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1178:5: ( less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1179:5: less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN
            {
            dbg.location(1179,5);
            pushFollow(FOLLOW_less_fn_name_in_less_function_in_condition7228);
            less_fn_name();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1179,18);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1179:18: ( ws )?
            int alt307=2;
            try { dbg.enterSubRule(307);
            try { dbg.enterDecision(307, decisionCanBacktrack[307]);

            int LA307_0 = input.LA(1);

            if ( ((LA307_0>=WS && LA307_0<=COMMENT)) ) {
                alt307=1;
            }
            } finally {dbg.exitDecision(307);}

            switch (alt307) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1179:18: ws
                    {
                    dbg.location(1179,18);
                    pushFollow(FOLLOW_ws_in_less_function_in_condition7230);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(307);}

            dbg.location(1179,22);
            match(input,LPAREN,FOLLOW_LPAREN_in_less_function_in_condition7233); if (state.failed) return ;
            dbg.location(1179,29);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1179:29: ( ws )?
            int alt308=2;
            try { dbg.enterSubRule(308);
            try { dbg.enterDecision(308, decisionCanBacktrack[308]);

            int LA308_0 = input.LA(1);

            if ( ((LA308_0>=WS && LA308_0<=COMMENT)) ) {
                alt308=1;
            }
            } finally {dbg.exitDecision(308);}

            switch (alt308) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1179:29: ws
                    {
                    dbg.location(1179,29);
                    pushFollow(FOLLOW_ws_in_less_function_in_condition7235);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(308);}

            dbg.location(1179,33);
            pushFollow(FOLLOW_cp_variable_in_less_function_in_condition7238);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1179,45);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1179:45: ( ws )?
            int alt309=2;
            try { dbg.enterSubRule(309);
            try { dbg.enterDecision(309, decisionCanBacktrack[309]);

            int LA309_0 = input.LA(1);

            if ( ((LA309_0>=WS && LA309_0<=COMMENT)) ) {
                alt309=1;
            }
            } finally {dbg.exitDecision(309);}

            switch (alt309) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1179:45: ws
                    {
                    dbg.location(1179,45);
                    pushFollow(FOLLOW_ws_in_less_function_in_condition7240);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(309);}

            dbg.location(1179,49);
            match(input,RPAREN,FOLLOW_RPAREN_in_less_function_in_condition7243); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1180, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_function_in_condition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_function_in_condition"


    // $ANTLR start "less_fn_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1183:1: less_fn_name : IDENT ;
    public final void less_fn_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_fn_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1183, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1184:5: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1185:5: IDENT
            {
            dbg.location(1185,5);
            match(input,IDENT,FOLLOW_IDENT_in_less_fn_name7265); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1186, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_fn_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_fn_name"


    // $ANTLR start "less_condition_operator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1188:1: less_condition_operator : ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ );
    public final void less_condition_operator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_condition_operator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1188, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1189:5: ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(1189,5);
            if ( input.LA(1)==GREATER||input.LA(1)==OPEQ||(input.LA(1)>=LESS && input.LA(1)<=GREATER_OR_EQ) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1191, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_condition_operator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_condition_operator"


    // $ANTLR start "less_selector_interpolation"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1193:1: less_selector_interpolation : AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE ;
    public final void less_selector_interpolation() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_selector_interpolation");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1193, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1194:5: ( AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1195:5: AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE
            {
            dbg.location(1195,5);
            match(input,AT_SIGN,FOLLOW_AT_SIGN_in_less_selector_interpolation7323); if (state.failed) return ;
            dbg.location(1195,13);
            match(input,LBRACE,FOLLOW_LBRACE_in_less_selector_interpolation7325); if (state.failed) return ;
            dbg.location(1195,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1195:20: ( ws )?
            int alt310=2;
            try { dbg.enterSubRule(310);
            try { dbg.enterDecision(310, decisionCanBacktrack[310]);

            int LA310_0 = input.LA(1);

            if ( ((LA310_0>=WS && LA310_0<=COMMENT)) ) {
                alt310=1;
            }
            } finally {dbg.exitDecision(310);}

            switch (alt310) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1195:20: ws
                    {
                    dbg.location(1195,20);
                    pushFollow(FOLLOW_ws_in_less_selector_interpolation7327);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(310);}

            dbg.location(1195,24);
            match(input,IDENT,FOLLOW_IDENT_in_less_selector_interpolation7330); if (state.failed) return ;
            dbg.location(1195,30);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1195:30: ( ws )?
            int alt311=2;
            try { dbg.enterSubRule(311);
            try { dbg.enterDecision(311, decisionCanBacktrack[311]);

            int LA311_0 = input.LA(1);

            if ( ((LA311_0>=WS && LA311_0<=COMMENT)) ) {
                alt311=1;
            }
            } finally {dbg.exitDecision(311);}

            switch (alt311) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1195:30: ws
                    {
                    dbg.location(1195,30);
                    pushFollow(FOLLOW_ws_in_less_selector_interpolation7332);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(311);}

            dbg.location(1195,34);
            match(input,RBRACE,FOLLOW_RBRACE_in_less_selector_interpolation7335); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1196, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_selector_interpolation");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_selector_interpolation"


    // $ANTLR start "sass_selector_interpolation_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1203:1: sass_selector_interpolation_expression : ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )* ;
    public final void sass_selector_interpolation_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_selector_interpolation_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1203, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:5: ( ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1205:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )*
            {
            dbg.location(1205,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1205:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) )
            int alt312=2;
            try { dbg.enterSubRule(312);
            try { dbg.enterDecision(312, decisionCanBacktrack[312]);

            int LA312_0 = input.LA(1);

            if ( (LA312_0==HASH_SYMBOL) ) {
                int LA312_1 = input.LA(2);

                if ( (synpred42_Css3()) ) {
                    alt312=1;
                }
                else if ( (true) ) {
                    alt312=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 312, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA312_0==IDENT||LA312_0==COMMA||LA312_0==COLON||LA312_0==MINUS||LA312_0==GREATER||(LA312_0>=HASH && LA312_0<=LBRACKET)||LA312_0==STAR||LA312_0==LESS_AND||LA312_0==RBRACKET) ) {
                alt312=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 312, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(312);}

            switch (alt312) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:13: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
                    {
                    dbg.location(1206,50);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7383);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1208:13: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET )
                    {
                    dbg.location(1208,13);
                    if ( input.LA(1)==IDENT||input.LA(1)==COMMA||input.LA(1)==COLON||input.LA(1)==MINUS||input.LA(1)==GREATER||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=LBRACKET)||input.LA(1)==STAR||input.LA(1)==LESS_AND||input.LA(1)==RBRACKET ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(312);}

            dbg.location(1210,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )*
            try { dbg.enterSubRule(315);

            loop315:
            do {
                int alt315=2;
                try { dbg.enterDecision(315, decisionCanBacktrack[315]);

                try {
                    isCyclicDecision = true;
                    alt315 = dfa315.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(315);}

                switch (alt315) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1211:13: ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) )
            	    {
            	    dbg.location(1211,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1211:13: ( ws )?
            	    int alt313=2;
            	    try { dbg.enterSubRule(313);
            	    try { dbg.enterDecision(313, decisionCanBacktrack[313]);

            	    int LA313_0 = input.LA(1);

            	    if ( ((LA313_0>=WS && LA313_0<=COMMENT)) ) {
            	        alt313=1;
            	    }
            	    } finally {dbg.exitDecision(313);}

            	    switch (alt313) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1211:13: ws
            	            {
            	            dbg.location(1211,13);
            	            pushFollow(FOLLOW_ws_in_sass_selector_interpolation_expression7492);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(313);}

            	    dbg.location(1212,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1212:13: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) )
            	    int alt314=2;
            	    try { dbg.enterSubRule(314);
            	    try { dbg.enterDecision(314, decisionCanBacktrack[314]);

            	    int LA314_0 = input.LA(1);

            	    if ( (LA314_0==HASH_SYMBOL) ) {
            	        int LA314_1 = input.LA(2);

            	        if ( (synpred43_Css3()) ) {
            	            alt314=1;
            	        }
            	        else if ( (true) ) {
            	            alt314=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return ;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 314, 1, input);

            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	    }
            	    else if ( (LA314_0==IDENT||LA314_0==COMMA||LA314_0==COLON||LA314_0==MINUS||LA314_0==GREATER||(LA314_0>=HASH && LA314_0<=LBRACKET)||LA314_0==STAR||LA314_0==LESS_AND||LA314_0==RBRACKET) ) {
            	        alt314=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 314, 0, input);

            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(314);}

            	    switch (alt314) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1213:17: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
            	            {
            	            dbg.location(1213,54);
            	            pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7529);
            	            sass_interpolation_expression_var();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1215:17: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET )
            	            {
            	            dbg.location(1215,17);
            	            if ( input.LA(1)==IDENT||input.LA(1)==COMMA||input.LA(1)==COLON||input.LA(1)==MINUS||input.LA(1)==GREATER||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=LBRACKET)||input.LA(1)==STAR||input.LA(1)==LESS_AND||input.LA(1)==RBRACKET ) {
            	                input.consume();
            	                state.errorRecovery=false;state.failed=false;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return ;}
            	                MismatchedSetException mse = new MismatchedSetException(null,input);
            	                dbg.recognitionException(mse);
            	                throw mse;
            	            }


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(314);}


            	    }
            	    break;

            	default :
            	    break loop315;
                }
            } while (true);
            } finally {dbg.exitSubRule(315);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1219, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_selector_interpolation_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_selector_interpolation_expression"


    // $ANTLR start "sass_declaration_interpolation_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1221:1: sass_declaration_interpolation_expression : ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )* ;
    public final void sass_declaration_interpolation_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_declaration_interpolation_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1221, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1222:5: ( ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1223:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*
            {
            dbg.location(1223,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1223:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
            int alt316=2;
            try { dbg.enterSubRule(316);
            try { dbg.enterDecision(316, decisionCanBacktrack[316]);

            int LA316_0 = input.LA(1);

            if ( (LA316_0==HASH_SYMBOL) ) {
                int LA316_1 = input.LA(2);

                if ( (LA316_1==LBRACE) && (synpred44_Css3())) {
                    alt316=1;
                }
                else if ( (LA316_1==IDENT||LA316_1==COLON||LA316_1==MINUS||(LA316_1>=HASH_SYMBOL && LA316_1<=DOT)||(LA316_1>=WS && LA316_1<=COMMENT)) ) {
                    alt316=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 316, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA316_0==IDENT||LA316_0==MINUS||(LA316_0>=HASH && LA316_0<=DOT)) ) {
                alt316=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 316, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(316);}

            switch (alt316) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1224:13: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
                    {
                    dbg.location(1224,50);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7680);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:13: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH )
                    {
                    dbg.location(1226,13);
                    if ( input.LA(1)==IDENT||input.LA(1)==MINUS||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=DOT) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(316);}

            dbg.location(1228,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1228:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*
            try { dbg.enterSubRule(319);

            loop319:
            do {
                int alt319=2;
                try { dbg.enterDecision(319, decisionCanBacktrack[319]);

                try {
                    isCyclicDecision = true;
                    alt319 = dfa319.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(319);}

                switch (alt319) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1229:13: ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
            	    {
            	    dbg.location(1229,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1229:13: ( ws )?
            	    int alt317=2;
            	    try { dbg.enterSubRule(317);
            	    try { dbg.enterDecision(317, decisionCanBacktrack[317]);

            	    int LA317_0 = input.LA(1);

            	    if ( ((LA317_0>=WS && LA317_0<=COMMENT)) ) {
            	        alt317=1;
            	    }
            	    } finally {dbg.exitDecision(317);}

            	    switch (alt317) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1229:13: ws
            	            {
            	            dbg.location(1229,13);
            	            pushFollow(FOLLOW_ws_in_sass_declaration_interpolation_expression7760);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(317);}

            	    dbg.location(1230,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:13: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
            	    int alt318=2;
            	    try { dbg.enterSubRule(318);
            	    try { dbg.enterDecision(318, decisionCanBacktrack[318]);

            	    int LA318_0 = input.LA(1);

            	    if ( (LA318_0==HASH_SYMBOL) ) {
            	        int LA318_1 = input.LA(2);

            	        if ( (LA318_1==LBRACE) && (synpred45_Css3())) {
            	            alt318=1;
            	        }
            	        else if ( (LA318_1==IDENT||LA318_1==COLON||LA318_1==MINUS||(LA318_1>=HASH_SYMBOL && LA318_1<=DOT)||(LA318_1>=WS && LA318_1<=COMMENT)) ) {
            	            alt318=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return ;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 318, 1, input);

            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	    }
            	    else if ( (LA318_0==IDENT||LA318_0==MINUS||(LA318_0>=HASH && LA318_0<=DOT)) ) {
            	        alt318=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 318, 0, input);

            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(318);}

            	    switch (alt318) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1231:17: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
            	            {
            	            dbg.location(1231,54);
            	            pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7797);
            	            sass_interpolation_expression_var();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1233:17: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH )
            	            {
            	            dbg.location(1233,17);
            	            if ( input.LA(1)==IDENT||input.LA(1)==MINUS||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=DOT) ) {
            	                input.consume();
            	                state.errorRecovery=false;state.failed=false;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return ;}
            	                MismatchedSetException mse = new MismatchedSetException(null,input);
            	                dbg.recognitionException(mse);
            	                throw mse;
            	            }


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(318);}


            	    }
            	    break;

            	default :
            	    break loop319;
                }
            } while (true);
            } finally {dbg.exitSubRule(319);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1237, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_declaration_interpolation_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_declaration_interpolation_expression"


    // $ANTLR start "sass_interpolation_expression_var"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1239:1: sass_interpolation_expression_var : HASH_SYMBOL LBRACE cp_expression RBRACE ;
    public final void sass_interpolation_expression_var() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_interpolation_expression_var");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1239, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:5: ( HASH_SYMBOL LBRACE cp_expression RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1241:9: HASH_SYMBOL LBRACE cp_expression RBRACE
            {
            dbg.location(1241,9);
            match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var7902); if (state.failed) return ;
            dbg.location(1241,21);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_interpolation_expression_var7904); if (state.failed) return ;
            dbg.location(1241,28);
            pushFollow(FOLLOW_cp_expression_in_sass_interpolation_expression_var7906);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1241,42);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_interpolation_expression_var7908); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1242, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_interpolation_expression_var");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_interpolation_expression_var"


    // $ANTLR start "sass_nested_properties"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1262:1: sass_nested_properties : property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void sass_nested_properties() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_nested_properties");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1262, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:5: ( property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:5: property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(1264,5);
            pushFollow(FOLLOW_property_in_sass_nested_properties7948);
            property();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1264,14);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:14: ( ws )?
            int alt320=2;
            try { dbg.enterSubRule(320);
            try { dbg.enterDecision(320, decisionCanBacktrack[320]);

            int LA320_0 = input.LA(1);

            if ( ((LA320_0>=WS && LA320_0<=COMMENT)) ) {
                alt320=1;
            }
            } finally {dbg.exitDecision(320);}

            switch (alt320) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:14: ws
                    {
                    dbg.location(1264,14);
                    pushFollow(FOLLOW_ws_in_sass_nested_properties7950);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(320);}

            dbg.location(1264,18);
            match(input,COLON,FOLLOW_COLON_in_sass_nested_properties7953); if (state.failed) return ;
            dbg.location(1264,24);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:24: ( ws )?
            int alt321=2;
            try { dbg.enterSubRule(321);
            try { dbg.enterDecision(321, decisionCanBacktrack[321]);

            int LA321_0 = input.LA(1);

            if ( ((LA321_0>=WS && LA321_0<=COMMENT)) ) {
                alt321=1;
            }
            } finally {dbg.exitDecision(321);}

            switch (alt321) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:24: ws
                    {
                    dbg.location(1264,24);
                    pushFollow(FOLLOW_ws_in_sass_nested_properties7955);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(321);}

            dbg.location(1264,28);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:28: ( propertyValue ( ws )? )?
            int alt323=2;
            try { dbg.enterSubRule(323);
            try { dbg.enterDecision(323, decisionCanBacktrack[323]);

            int LA323_0 = input.LA(1);

            if ( (LA323_0==NAMESPACE_SYM||(LA323_0>=IDENT && LA323_0<=IMPORT_SYM)||LA323_0==MEDIA_SYM||LA323_0==GEN||(LA323_0>=AT_IDENT && LA323_0<=MOZ_DOCUMENT_SYM)||(LA323_0>=WEBKIT_KEYFRAMES_SYM && LA323_0<=RIGHTBOTTOM_SYM)||(LA323_0>=MINUS && LA323_0<=PLUS)||(LA323_0>=TILDE && LA323_0<=HASH)||(LA323_0>=SASS_VAR && LA323_0<=PERCENTAGE_SYMBOL)||(LA323_0>=SASS_CONTENT && LA323_0<=SASS_WHILE)) ) {
                alt323=1;
            }
            } finally {dbg.exitDecision(323);}

            switch (alt323) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:29: propertyValue ( ws )?
                    {
                    dbg.location(1264,29);
                    pushFollow(FOLLOW_propertyValue_in_sass_nested_properties7959);
                    propertyValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1264,43);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:43: ( ws )?
                    int alt322=2;
                    try { dbg.enterSubRule(322);
                    try { dbg.enterDecision(322, decisionCanBacktrack[322]);

                    int LA322_0 = input.LA(1);

                    if ( ((LA322_0>=WS && LA322_0<=COMMENT)) ) {
                        alt322=1;
                    }
                    } finally {dbg.exitDecision(322);}

                    switch (alt322) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:43: ws
                            {
                            dbg.location(1264,43);
                            pushFollow(FOLLOW_ws_in_sass_nested_properties7961);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(322);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(323);}

            dbg.location(1264,49);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_nested_properties7966); if (state.failed) return ;
            dbg.location(1264,56);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:56: ( ws )?
            int alt324=2;
            try { dbg.enterSubRule(324);
            try { dbg.enterDecision(324, decisionCanBacktrack[324]);

            int LA324_0 = input.LA(1);

            if ( ((LA324_0>=WS && LA324_0<=COMMENT)) ) {
                alt324=1;
            }
            } finally {dbg.exitDecision(324);}

            switch (alt324) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:56: ws
                    {
                    dbg.location(1264,56);
                    pushFollow(FOLLOW_ws_in_sass_nested_properties7968);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(324);}

            dbg.location(1264,60);
            pushFollow(FOLLOW_syncToFollow_in_sass_nested_properties7971);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1264,73);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:73: ( declarations )?
            int alt325=2;
            try { dbg.enterSubRule(325);
            try { dbg.enterDecision(325, decisionCanBacktrack[325]);

            int LA325_0 = input.LA(1);

            if ( ((LA325_0>=NAMESPACE_SYM && LA325_0<=IDENT)||(LA325_0>=CHARSET_SYM && LA325_0<=COMMA)||LA325_0==MEDIA_SYM||(LA325_0>=GEN && LA325_0<=MOZ_DOCUMENT_SYM)||LA325_0==WEBKIT_KEYFRAMES_SYM||(LA325_0>=PAGE_SYM && LA325_0<=RIGHTBOTTOM_SYM)||(LA325_0>=MINUS && LA325_0<=PIPE)||LA325_0==LESS_AND||(LA325_0>=RBRACKET && LA325_0<=SASS_VAR)||(LA325_0>=SASS_CONTENT && LA325_0<=SASS_WHILE)||LA325_0==AT_SIGN) ) {
                alt325=1;
            }
            } finally {dbg.exitDecision(325);}

            switch (alt325) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:73: declarations
                    {
                    dbg.location(1264,73);
                    pushFollow(FOLLOW_declarations_in_sass_nested_properties7973);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(325);}

            dbg.location(1264,87);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_nested_properties7976); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1265, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_nested_properties");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_nested_properties"


    // $ANTLR start "sass_extend"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1267:1: sass_extend : SASS_EXTEND ws simpleSelectorSequence ( ( ws )? SASS_OPTIONAL )? ;
    public final void sass_extend() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_extend");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1267, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1268:5: ( SASS_EXTEND ws simpleSelectorSequence ( ( ws )? SASS_OPTIONAL )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1269:5: SASS_EXTEND ws simpleSelectorSequence ( ( ws )? SASS_OPTIONAL )?
            {
            dbg.location(1269,5);
            match(input,SASS_EXTEND,FOLLOW_SASS_EXTEND_in_sass_extend7997); if (state.failed) return ;
            dbg.location(1269,17);
            pushFollow(FOLLOW_ws_in_sass_extend7999);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1269,20);
            pushFollow(FOLLOW_simpleSelectorSequence_in_sass_extend8001);
            simpleSelectorSequence();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1269,43);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1269:43: ( ( ws )? SASS_OPTIONAL )?
            int alt327=2;
            try { dbg.enterSubRule(327);
            try { dbg.enterDecision(327, decisionCanBacktrack[327]);

            try {
                isCyclicDecision = true;
                alt327 = dfa327.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(327);}

            switch (alt327) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1269:44: ( ws )? SASS_OPTIONAL
                    {
                    dbg.location(1269,44);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1269:44: ( ws )?
                    int alt326=2;
                    try { dbg.enterSubRule(326);
                    try { dbg.enterDecision(326, decisionCanBacktrack[326]);

                    int LA326_0 = input.LA(1);

                    if ( ((LA326_0>=WS && LA326_0<=COMMENT)) ) {
                        alt326=1;
                    }
                    } finally {dbg.exitDecision(326);}

                    switch (alt326) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1269:44: ws
                            {
                            dbg.location(1269,44);
                            pushFollow(FOLLOW_ws_in_sass_extend8004);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(326);}

                    dbg.location(1269,48);
                    match(input,SASS_OPTIONAL,FOLLOW_SASS_OPTIONAL_in_sass_extend8007); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(327);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1270, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_extend");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_extend"


    // $ANTLR start "sass_extend_only_selector"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1272:1: sass_extend_only_selector : SASS_EXTEND_ONLY_SELECTOR ;
    public final void sass_extend_only_selector() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_extend_only_selector");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1272, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1273:5: ( SASS_EXTEND_ONLY_SELECTOR )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1274:5: SASS_EXTEND_ONLY_SELECTOR
            {
            dbg.location(1274,5);
            match(input,SASS_EXTEND_ONLY_SELECTOR,FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector8030); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1275, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_extend_only_selector");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_extend_only_selector"


    // $ANTLR start "sass_debug"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1277:1: sass_debug : ( SASS_DEBUG | SASS_WARN ) ws cp_expression ;
    public final void sass_debug() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_debug");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1277, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1278:5: ( ( SASS_DEBUG | SASS_WARN ) ws cp_expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1279:5: ( SASS_DEBUG | SASS_WARN ) ws cp_expression
            {
            dbg.location(1279,5);
            if ( (input.LA(1)>=SASS_DEBUG && input.LA(1)<=SASS_WARN) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(1279,32);
            pushFollow(FOLLOW_ws_in_sass_debug8061);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1279,35);
            pushFollow(FOLLOW_cp_expression_in_sass_debug8063);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1280, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_debug");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_debug"


    // $ANTLR start "sass_control"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1282:1: sass_control : ( sass_if | sass_for | sass_each | sass_while );
    public final void sass_control() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_control");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1282, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1283:5: ( sass_if | sass_for | sass_each | sass_while )
            int alt328=4;
            try { dbg.enterDecision(328, decisionCanBacktrack[328]);

            switch ( input.LA(1) ) {
            case SASS_IF:
                {
                alt328=1;
                }
                break;
            case SASS_FOR:
                {
                alt328=2;
                }
                break;
            case SASS_EACH:
                {
                alt328=3;
                }
                break;
            case SASS_WHILE:
                {
                alt328=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 328, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(328);}

            switch (alt328) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1284:5: sass_if
                    {
                    dbg.location(1284,5);
                    pushFollow(FOLLOW_sass_if_in_sass_control8084);
                    sass_if();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1284:15: sass_for
                    {
                    dbg.location(1284,15);
                    pushFollow(FOLLOW_sass_for_in_sass_control8088);
                    sass_for();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1284:26: sass_each
                    {
                    dbg.location(1284,26);
                    pushFollow(FOLLOW_sass_each_in_sass_control8092);
                    sass_each();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1284:38: sass_while
                    {
                    dbg.location(1284,38);
                    pushFollow(FOLLOW_sass_while_in_sass_control8096);
                    sass_while();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1285, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_control");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_control"


    // $ANTLR start "sass_if"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1287:1: sass_if : SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? ;
    public final void sass_if() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_if");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1287, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1288:5: ( SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:5: SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
            {
            dbg.location(1289,5);
            match(input,SASS_IF,FOLLOW_SASS_IF_in_sass_if8117); if (state.failed) return ;
            dbg.location(1289,13);
            pushFollow(FOLLOW_ws_in_sass_if8119);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1289,16);
            pushFollow(FOLLOW_sass_control_expression_in_sass_if8121);
            sass_control_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1289,40);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:40: ( ws )?
            int alt329=2;
            try { dbg.enterSubRule(329);
            try { dbg.enterDecision(329, decisionCanBacktrack[329]);

            int LA329_0 = input.LA(1);

            if ( ((LA329_0>=WS && LA329_0<=COMMENT)) ) {
                alt329=1;
            }
            } finally {dbg.exitDecision(329);}

            switch (alt329) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:40: ws
                    {
                    dbg.location(1289,40);
                    pushFollow(FOLLOW_ws_in_sass_if8123);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(329);}

            dbg.location(1289,44);
            pushFollow(FOLLOW_sass_control_block_in_sass_if8126);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1289,63);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:63: ( ( ws )? sass_else )?
            int alt331=2;
            try { dbg.enterSubRule(331);
            try { dbg.enterDecision(331, decisionCanBacktrack[331]);

            try {
                isCyclicDecision = true;
                alt331 = dfa331.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(331);}

            switch (alt331) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:64: ( ws )? sass_else
                    {
                    dbg.location(1289,64);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:64: ( ws )?
                    int alt330=2;
                    try { dbg.enterSubRule(330);
                    try { dbg.enterDecision(330, decisionCanBacktrack[330]);

                    int LA330_0 = input.LA(1);

                    if ( ((LA330_0>=WS && LA330_0<=COMMENT)) ) {
                        alt330=1;
                    }
                    } finally {dbg.exitDecision(330);}

                    switch (alt330) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:64: ws
                            {
                            dbg.location(1289,64);
                            pushFollow(FOLLOW_ws_in_sass_if8129);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(330);}

                    dbg.location(1289,68);
                    pushFollow(FOLLOW_sass_else_in_sass_if8132);
                    sass_else();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(331);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1290, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_if");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_if"


    // $ANTLR start "sass_else"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1292:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );
    public final void sass_else() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_else");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1292, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1293:5: ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
            int alt338=2;
            try { dbg.enterDecision(338, decisionCanBacktrack[338]);

            try {
                isCyclicDecision = true;
                alt338 = dfa338.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(338);}

            switch (alt338) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1294:5: SASS_ELSE ( ws )? sass_control_block
                    {
                    dbg.location(1294,5);
                    match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else8155); if (state.failed) return ;
                    dbg.location(1294,15);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1294:15: ( ws )?
                    int alt332=2;
                    try { dbg.enterSubRule(332);
                    try { dbg.enterDecision(332, decisionCanBacktrack[332]);

                    int LA332_0 = input.LA(1);

                    if ( ((LA332_0>=WS && LA332_0<=COMMENT)) ) {
                        alt332=1;
                    }
                    } finally {dbg.exitDecision(332);}

                    switch (alt332) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1294:15: ws
                            {
                            dbg.location(1294,15);
                            pushFollow(FOLLOW_ws_in_sass_else8157);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(332);}

                    dbg.location(1294,19);
                    pushFollow(FOLLOW_sass_control_block_in_sass_else8160);
                    sass_control_block();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:5: SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
                    {
                    dbg.location(1296,5);
                    match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else8172); if (state.failed) return ;
                    dbg.location(1296,15);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:15: ( ws )?
                    int alt333=2;
                    try { dbg.enterSubRule(333);
                    try { dbg.enterDecision(333, decisionCanBacktrack[333]);

                    int LA333_0 = input.LA(1);

                    if ( ((LA333_0>=WS && LA333_0<=COMMENT)) ) {
                        alt333=1;
                    }
                    } finally {dbg.exitDecision(333);}

                    switch (alt333) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:15: ws
                            {
                            dbg.location(1296,15);
                            pushFollow(FOLLOW_ws_in_sass_else8174);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(333);}

                    dbg.location(1296,19);
                    if ( !(evalPredicate(tokenNameEquals("if"),"tokenNameEquals(\"if\")")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "sass_else", "tokenNameEquals(\"if\")");
                    }
                    dbg.location(1296,44);
                    match(input,IDENT,FOLLOW_IDENT_in_sass_else8179); if (state.failed) return ;
                    dbg.location(1296,59);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:59: ( ws )?
                    int alt334=2;
                    try { dbg.enterSubRule(334);
                    try { dbg.enterDecision(334, decisionCanBacktrack[334]);

                    int LA334_0 = input.LA(1);

                    if ( ((LA334_0>=WS && LA334_0<=COMMENT)) ) {
                        alt334=1;
                    }
                    } finally {dbg.exitDecision(334);}

                    switch (alt334) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:59: ws
                            {
                            dbg.location(1296,59);
                            pushFollow(FOLLOW_ws_in_sass_else8183);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(334);}

                    dbg.location(1296,63);
                    pushFollow(FOLLOW_sass_control_expression_in_sass_else8186);
                    sass_control_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1296,87);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:87: ( ws )?
                    int alt335=2;
                    try { dbg.enterSubRule(335);
                    try { dbg.enterDecision(335, decisionCanBacktrack[335]);

                    int LA335_0 = input.LA(1);

                    if ( ((LA335_0>=WS && LA335_0<=COMMENT)) ) {
                        alt335=1;
                    }
                    } finally {dbg.exitDecision(335);}

                    switch (alt335) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:87: ws
                            {
                            dbg.location(1296,87);
                            pushFollow(FOLLOW_ws_in_sass_else8188);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(335);}

                    dbg.location(1296,91);
                    pushFollow(FOLLOW_sass_control_block_in_sass_else8191);
                    sass_control_block();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1296,110);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:110: ( ( ws )? sass_else )?
                    int alt337=2;
                    try { dbg.enterSubRule(337);
                    try { dbg.enterDecision(337, decisionCanBacktrack[337]);

                    try {
                        isCyclicDecision = true;
                        alt337 = dfa337.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(337);}

                    switch (alt337) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:111: ( ws )? sass_else
                            {
                            dbg.location(1296,111);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:111: ( ws )?
                            int alt336=2;
                            try { dbg.enterSubRule(336);
                            try { dbg.enterDecision(336, decisionCanBacktrack[336]);

                            int LA336_0 = input.LA(1);

                            if ( ((LA336_0>=WS && LA336_0<=COMMENT)) ) {
                                alt336=1;
                            }
                            } finally {dbg.exitDecision(336);}

                            switch (alt336) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:111: ws
                                    {
                                    dbg.location(1296,111);
                                    pushFollow(FOLLOW_ws_in_sass_else8194);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(336);}

                            dbg.location(1296,115);
                            pushFollow(FOLLOW_sass_else_in_sass_else8197);
                            sass_else();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(337);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1297, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_else");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_else"


    // $ANTLR start "sass_control_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1299:1: sass_control_expression : cp_expression ;
    public final void sass_control_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_control_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1299, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:5: ( cp_expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:5: cp_expression
            {
            dbg.location(1301,5);
            pushFollow(FOLLOW_cp_expression_in_sass_control_expression8220);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1302, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_control_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_control_expression"


    // $ANTLR start "sass_for"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1304:1: sass_for : SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block ;
    public final void sass_for() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_for");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1304, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1305:5: ( SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1306:5: SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block
            {
            dbg.location(1306,5);
            match(input,SASS_FOR,FOLLOW_SASS_FOR_in_sass_for8241); if (state.failed) return ;
            dbg.location(1306,14);
            pushFollow(FOLLOW_ws_in_sass_for8243);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1306,17);
            pushFollow(FOLLOW_cp_variable_in_sass_for8245);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1306,29);
            pushFollow(FOLLOW_ws_in_sass_for8247);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1306,32);
            if ( !(evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "sass_for", "tokenNameEquals(\"from\")");
            }
            dbg.location(1306,59);
            match(input,IDENT,FOLLOW_IDENT_in_sass_for8251); if (state.failed) return ;
            dbg.location(1306,74);
            pushFollow(FOLLOW_ws_in_sass_for8255);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1306,77);
            pushFollow(FOLLOW_cp_math_expression_in_sass_for8257);
            cp_math_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1306,96);
            pushFollow(FOLLOW_ws_in_sass_for8259);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1306,99);
            if ( !(evalPredicate(tokenNameEquals("to")|tokenNameEquals("through"),"tokenNameEquals(\"to\")|tokenNameEquals(\"through\")")) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "sass_for", "tokenNameEquals(\"to\")|tokenNameEquals(\"through\")");
            }
            dbg.location(1306,151);
            match(input,IDENT,FOLLOW_IDENT_in_sass_for8263); if (state.failed) return ;
            dbg.location(1306,173);
            pushFollow(FOLLOW_ws_in_sass_for8267);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1306,176);
            pushFollow(FOLLOW_cp_math_expression_in_sass_for8269);
            cp_math_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1306,195);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1306:195: ( ws )?
            int alt339=2;
            try { dbg.enterSubRule(339);
            try { dbg.enterDecision(339, decisionCanBacktrack[339]);

            int LA339_0 = input.LA(1);

            if ( ((LA339_0>=WS && LA339_0<=COMMENT)) ) {
                alt339=1;
            }
            } finally {dbg.exitDecision(339);}

            switch (alt339) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1306:195: ws
                    {
                    dbg.location(1306,195);
                    pushFollow(FOLLOW_ws_in_sass_for8271);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(339);}

            dbg.location(1306,199);
            pushFollow(FOLLOW_sass_control_block_in_sass_for8274);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1307, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_for");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_for"


    // $ANTLR start "sass_each"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1309:1: sass_each : SASS_EACH ws cp_variable ws {...}? IDENT ws cp_expression_list ( ws )? sass_control_block ;
    public final void sass_each() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_each");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1309, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1310:5: ( SASS_EACH ws cp_variable ws {...}? IDENT ws cp_expression_list ( ws )? sass_control_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1311:5: SASS_EACH ws cp_variable ws {...}? IDENT ws cp_expression_list ( ws )? sass_control_block
            {
            dbg.location(1311,5);
            match(input,SASS_EACH,FOLLOW_SASS_EACH_in_sass_each8295); if (state.failed) return ;
            dbg.location(1311,15);
            pushFollow(FOLLOW_ws_in_sass_each8297);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1311,18);
            pushFollow(FOLLOW_cp_variable_in_sass_each8299);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1311,30);
            pushFollow(FOLLOW_ws_in_sass_each8301);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1311,33);
            if ( !(evalPredicate(tokenNameEquals("in"),"tokenNameEquals(\"in\")")) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "sass_each", "tokenNameEquals(\"in\")");
            }
            dbg.location(1311,58);
            match(input,IDENT,FOLLOW_IDENT_in_sass_each8305); if (state.failed) return ;
            dbg.location(1311,71);
            pushFollow(FOLLOW_ws_in_sass_each8309);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1311,74);
            pushFollow(FOLLOW_cp_expression_list_in_sass_each8311);
            cp_expression_list();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1311,93);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1311:93: ( ws )?
            int alt340=2;
            try { dbg.enterSubRule(340);
            try { dbg.enterDecision(340, decisionCanBacktrack[340]);

            int LA340_0 = input.LA(1);

            if ( ((LA340_0>=WS && LA340_0<=COMMENT)) ) {
                alt340=1;
            }
            } finally {dbg.exitDecision(340);}

            switch (alt340) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1311:93: ws
                    {
                    dbg.location(1311,93);
                    pushFollow(FOLLOW_ws_in_sass_each8313);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(340);}

            dbg.location(1311,97);
            pushFollow(FOLLOW_sass_control_block_in_sass_each8316);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1312, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_each");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_each"


    // $ANTLR start "sass_while"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1314:1: sass_while : SASS_WHILE ws sass_control_expression ( ws )? sass_control_block ;
    public final void sass_while() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_while");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1314, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1315:5: ( SASS_WHILE ws sass_control_expression ( ws )? sass_control_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1316:5: SASS_WHILE ws sass_control_expression ( ws )? sass_control_block
            {
            dbg.location(1316,5);
            match(input,SASS_WHILE,FOLLOW_SASS_WHILE_in_sass_while8337); if (state.failed) return ;
            dbg.location(1316,16);
            pushFollow(FOLLOW_ws_in_sass_while8339);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1316,19);
            pushFollow(FOLLOW_sass_control_expression_in_sass_while8341);
            sass_control_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1316,43);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1316:43: ( ws )?
            int alt341=2;
            try { dbg.enterSubRule(341);
            try { dbg.enterDecision(341, decisionCanBacktrack[341]);

            int LA341_0 = input.LA(1);

            if ( ((LA341_0>=WS && LA341_0<=COMMENT)) ) {
                alt341=1;
            }
            } finally {dbg.exitDecision(341);}

            switch (alt341) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1316:43: ws
                    {
                    dbg.location(1316,43);
                    pushFollow(FOLLOW_ws_in_sass_while8343);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(341);}

            dbg.location(1316,47);
            pushFollow(FOLLOW_sass_control_block_in_sass_while8346);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1317, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_while");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_while"


    // $ANTLR start "sass_control_block"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1319:1: sass_control_block : LBRACE ( ws )? ( declarations )? RBRACE ;
    public final void sass_control_block() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_control_block");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1319, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1320:5: ( LBRACE ( ws )? ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1321:5: LBRACE ( ws )? ( declarations )? RBRACE
            {
            dbg.location(1321,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_control_block8367); if (state.failed) return ;
            dbg.location(1321,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1321:12: ( ws )?
            int alt342=2;
            try { dbg.enterSubRule(342);
            try { dbg.enterDecision(342, decisionCanBacktrack[342]);

            int LA342_0 = input.LA(1);

            if ( ((LA342_0>=WS && LA342_0<=COMMENT)) ) {
                alt342=1;
            }
            } finally {dbg.exitDecision(342);}

            switch (alt342) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1321:12: ws
                    {
                    dbg.location(1321,12);
                    pushFollow(FOLLOW_ws_in_sass_control_block8369);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(342);}

            dbg.location(1321,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1321:16: ( declarations )?
            int alt343=2;
            try { dbg.enterSubRule(343);
            try { dbg.enterDecision(343, decisionCanBacktrack[343]);

            int LA343_0 = input.LA(1);

            if ( ((LA343_0>=NAMESPACE_SYM && LA343_0<=IDENT)||(LA343_0>=CHARSET_SYM && LA343_0<=COMMA)||LA343_0==MEDIA_SYM||(LA343_0>=GEN && LA343_0<=MOZ_DOCUMENT_SYM)||LA343_0==WEBKIT_KEYFRAMES_SYM||(LA343_0>=PAGE_SYM && LA343_0<=RIGHTBOTTOM_SYM)||(LA343_0>=MINUS && LA343_0<=PIPE)||LA343_0==LESS_AND||(LA343_0>=RBRACKET && LA343_0<=SASS_VAR)||(LA343_0>=SASS_CONTENT && LA343_0<=SASS_WHILE)||LA343_0==AT_SIGN) ) {
                alt343=1;
            }
            } finally {dbg.exitDecision(343);}

            switch (alt343) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1321:16: declarations
                    {
                    dbg.location(1321,16);
                    pushFollow(FOLLOW_declarations_in_sass_control_block8372);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(343);}

            dbg.location(1321,30);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_control_block8375); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1322, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_control_block");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_control_block"


    // $ANTLR start "sass_function_declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1324:1: sass_function_declaration : SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE ;
    public final void sass_function_declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_function_declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1324, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1325:5: ( SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:5: SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE
            {
            dbg.location(1330,5);
            match(input,SASS_FUNCTION,FOLLOW_SASS_FUNCTION_in_sass_function_declaration8417); if (state.failed) return ;
            dbg.location(1330,19);
            pushFollow(FOLLOW_ws_in_sass_function_declaration8419);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1330,22);
            pushFollow(FOLLOW_sass_function_name_in_sass_function_declaration8421);
            sass_function_name();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1330,41);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:41: ( ws )?
            int alt344=2;
            try { dbg.enterSubRule(344);
            try { dbg.enterDecision(344, decisionCanBacktrack[344]);

            int LA344_0 = input.LA(1);

            if ( ((LA344_0>=WS && LA344_0<=COMMENT)) ) {
                alt344=1;
            }
            } finally {dbg.exitDecision(344);}

            switch (alt344) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:41: ws
                    {
                    dbg.location(1330,41);
                    pushFollow(FOLLOW_ws_in_sass_function_declaration8423);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(344);}

            dbg.location(1330,45);
            match(input,LPAREN,FOLLOW_LPAREN_in_sass_function_declaration8426); if (state.failed) return ;
            dbg.location(1330,52);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:52: ( cp_args_list )?
            int alt345=2;
            try { dbg.enterSubRule(345);
            try { dbg.enterDecision(345, decisionCanBacktrack[345]);

            int LA345_0 = input.LA(1);

            if ( (LA345_0==NAMESPACE_SYM||(LA345_0>=CHARSET_SYM && LA345_0<=IMPORT_SYM)||LA345_0==MEDIA_SYM||(LA345_0>=AT_IDENT && LA345_0<=MOZ_DOCUMENT_SYM)||LA345_0==WEBKIT_KEYFRAMES_SYM||(LA345_0>=PAGE_SYM && LA345_0<=RIGHTBOTTOM_SYM)||LA345_0==SASS_VAR||(LA345_0>=SASS_CONTENT && LA345_0<=SASS_WHILE)||(LA345_0>=CP_DOTS && LA345_0<=LESS_REST)) ) {
                alt345=1;
            }
            } finally {dbg.exitDecision(345);}

            switch (alt345) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:52: cp_args_list
                    {
                    dbg.location(1330,52);
                    pushFollow(FOLLOW_cp_args_list_in_sass_function_declaration8428);
                    cp_args_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(345);}

            dbg.location(1330,66);
            match(input,RPAREN,FOLLOW_RPAREN_in_sass_function_declaration8431); if (state.failed) return ;
            dbg.location(1330,73);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:73: ( ws )?
            int alt346=2;
            try { dbg.enterSubRule(346);
            try { dbg.enterDecision(346, decisionCanBacktrack[346]);

            int LA346_0 = input.LA(1);

            if ( ((LA346_0>=WS && LA346_0<=COMMENT)) ) {
                alt346=1;
            }
            } finally {dbg.exitDecision(346);}

            switch (alt346) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:73: ws
                    {
                    dbg.location(1330,73);
                    pushFollow(FOLLOW_ws_in_sass_function_declaration8433);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(346);}

            dbg.location(1330,77);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_function_declaration8436); if (state.failed) return ;
            dbg.location(1330,84);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:84: ( ws )?
            int alt347=2;
            try { dbg.enterSubRule(347);
            try { dbg.enterDecision(347, decisionCanBacktrack[347]);

            int LA347_0 = input.LA(1);

            if ( ((LA347_0>=WS && LA347_0<=COMMENT)) ) {
                alt347=1;
            }
            } finally {dbg.exitDecision(347);}

            switch (alt347) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:84: ws
                    {
                    dbg.location(1330,84);
                    pushFollow(FOLLOW_ws_in_sass_function_declaration8438);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(347);}

            dbg.location(1330,88);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:88: ( declarations )?
            int alt348=2;
            try { dbg.enterSubRule(348);
            try { dbg.enterDecision(348, decisionCanBacktrack[348]);

            int LA348_0 = input.LA(1);

            if ( ((LA348_0>=NAMESPACE_SYM && LA348_0<=IDENT)||(LA348_0>=CHARSET_SYM && LA348_0<=COMMA)||LA348_0==MEDIA_SYM||(LA348_0>=GEN && LA348_0<=MOZ_DOCUMENT_SYM)||LA348_0==WEBKIT_KEYFRAMES_SYM||(LA348_0>=PAGE_SYM && LA348_0<=RIGHTBOTTOM_SYM)||(LA348_0>=MINUS && LA348_0<=PIPE)||LA348_0==LESS_AND||(LA348_0>=RBRACKET && LA348_0<=SASS_VAR)||(LA348_0>=SASS_CONTENT && LA348_0<=SASS_WHILE)||LA348_0==AT_SIGN) ) {
                alt348=1;
            }
            } finally {dbg.exitDecision(348);}

            switch (alt348) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1330:88: declarations
                    {
                    dbg.location(1330,88);
                    pushFollow(FOLLOW_declarations_in_sass_function_declaration8441);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(348);}

            dbg.location(1330,102);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_function_declaration8444); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1331, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_function_declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_function_declaration"


    // $ANTLR start "sass_function_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1333:1: sass_function_name : IDENT ;
    public final void sass_function_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_function_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1333, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1334:5: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1335:5: IDENT
            {
            dbg.location(1335,5);
            match(input,IDENT,FOLLOW_IDENT_in_sass_function_name8465); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1336, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_function_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_function_name"


    // $ANTLR start "sass_function_return"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1338:1: sass_function_return : SASS_RETURN ws cp_expression ;
    public final void sass_function_return() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_function_return");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1338, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1339:5: ( SASS_RETURN ws cp_expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1340:5: SASS_RETURN ws cp_expression
            {
            dbg.location(1340,5);
            match(input,SASS_RETURN,FOLLOW_SASS_RETURN_in_sass_function_return8486); if (state.failed) return ;
            dbg.location(1340,17);
            pushFollow(FOLLOW_ws_in_sass_function_return8488);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1340,20);
            pushFollow(FOLLOW_cp_expression_in_sass_function_return8490);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1341, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_function_return");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_function_return"


    // $ANTLR start "sass_content"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1343:1: sass_content : SASS_CONTENT ;
    public final void sass_content() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_content");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1343, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1344:5: ( SASS_CONTENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1345:5: SASS_CONTENT
            {
            dbg.location(1345,5);
            match(input,SASS_CONTENT,FOLLOW_SASS_CONTENT_in_sass_content8511); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1346, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_content");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_content"

    // $ANTLR start synpred1_Css3
    public final void synpred1_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:44: ( ( ws )? mediaQueryList )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:45: ( ws )? mediaQueryList
        {
        dbg.location(363,45);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:45: ( ws )?
        int alt349=2;
        try { dbg.enterSubRule(349);
        try { dbg.enterDecision(349, decisionCanBacktrack[349]);

        int LA349_0 = input.LA(1);

        if ( ((LA349_0>=WS && LA349_0<=COMMENT)) ) {
            alt349=1;
        }
        } finally {dbg.exitDecision(349);}

        switch (alt349) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:45: ws
                {
                dbg.location(363,45);
                pushFollow(FOLLOW_ws_in_synpred1_Css3356);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(349);}

        dbg.location(363,49);
        pushFollow(FOLLOW_mediaQueryList_in_synpred1_Css3359);
        mediaQueryList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_Css3

    // $ANTLR start synpred2_Css3
    public final void synpred2_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:98: ( ( ws )? mediaQueryList )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:99: ( ws )? mediaQueryList
        {
        dbg.location(366,99);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:99: ( ws )?
        int alt350=2;
        try { dbg.enterSubRule(350);
        try { dbg.enterDecision(350, decisionCanBacktrack[350]);

        int LA350_0 = input.LA(1);

        if ( ((LA350_0>=WS && LA350_0<=COMMENT)) ) {
            alt350=1;
        }
        } finally {dbg.exitDecision(350);}

        switch (alt350) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:99: ws
                {
                dbg.location(366,99);
                pushFollow(FOLLOW_ws_in_synpred2_Css3420);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(350);}

        dbg.location(366,103);
        pushFollow(FOLLOW_mediaQueryList_in_synpred2_Css3423);
        mediaQueryList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_Css3

    // $ANTLR start synpred3_Css3
    public final void synpred3_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:100: ( ( ws )? mediaQueryList )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:101: ( ws )? mediaQueryList
        {
        dbg.location(368,101);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:101: ( ws )?
        int alt351=2;
        try { dbg.enterSubRule(351);
        try { dbg.enterDecision(351, decisionCanBacktrack[351]);

        int LA351_0 = input.LA(1);

        if ( ((LA351_0>=WS && LA351_0<=COMMENT)) ) {
            alt351=1;
        }
        } finally {dbg.exitDecision(351);}

        switch (alt351) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:101: ws
                {
                dbg.location(368,101);
                pushFollow(FOLLOW_ws_in_synpred3_Css3474);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(351);}

        dbg.location(368,105);
        pushFollow(FOLLOW_mediaQueryList_in_synpred3_Css3477);
        mediaQueryList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_Css3

    // $ANTLR start synpred4_Css3
    public final void synpred4_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:27: ( ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:28: ( ws )? SEMI
        {
        dbg.location(383,28);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:28: ( ws )?
        int alt352=2;
        try { dbg.enterSubRule(352);
        try { dbg.enterDecision(352, decisionCanBacktrack[352]);

        int LA352_0 = input.LA(1);

        if ( ((LA352_0>=WS && LA352_0<=COMMENT)) ) {
            alt352=1;
        }
        } finally {dbg.exitDecision(352);}

        switch (alt352) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:28: ws
                {
                dbg.location(383,28);
                pushFollow(FOLLOW_ws_in_synpred4_Css3596);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(352);}

        dbg.location(383,32);
        match(input,SEMI,FOLLOW_SEMI_in_synpred4_Css3599); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_Css3

    // $ANTLR start synpred5_Css3
    public final void synpred5_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:5: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )
        int alt356=2;
        try { dbg.enterDecision(356, decisionCanBacktrack[356]);

        int LA356_0 = input.LA(1);

        if ( (LA356_0==SASS_MIXIN) ) {
            alt356=1;
        }
        else if ( (LA356_0==DOT) ) {
            alt356=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 356, 0, input);

            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(356);}

        switch (alt356) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:6: SASS_MIXIN
                {
                dbg.location(391,6);
                match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred5_Css3670); if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:19: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE )
                {
                dbg.location(391,19);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:19: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:20: DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE
                {
                dbg.location(391,20);
                match(input,DOT,FOLLOW_DOT_in_synpred5_Css3675); if (state.failed) return ;
                dbg.location(391,24);
                match(input,IDENT,FOLLOW_IDENT_in_synpred5_Css3677); if (state.failed) return ;
                dbg.location(391,30);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:30: ( ws )?
                int alt353=2;
                try { dbg.enterSubRule(353);
                try { dbg.enterDecision(353, decisionCanBacktrack[353]);

                int LA353_0 = input.LA(1);

                if ( ((LA353_0>=WS && LA353_0<=COMMENT)) ) {
                    alt353=1;
                }
                } finally {dbg.exitDecision(353);}

                switch (alt353) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:30: ws
                        {
                        dbg.location(391,30);
                        pushFollow(FOLLOW_ws_in_synpred5_Css3679);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(353);}

                dbg.location(391,34);
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred5_Css3682); if (state.failed) return ;
                dbg.location(391,41);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:41: (~ RPAREN )*
                try { dbg.enterSubRule(354);

                loop354:
                do {
                    int alt354=2;
                    try { dbg.enterDecision(354, decisionCanBacktrack[354]);

                    int LA354_0 = input.LA(1);

                    if ( ((LA354_0>=NAMESPACE_SYM && LA354_0<=LESS_IMPORT_TYPE)||(LA354_0>=MEDIA_SYM && LA354_0<=LINE_COMMENT)) ) {
                        alt354=1;
                    }


                    } finally {dbg.exitDecision(354);}

                    switch (alt354) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:42: ~ RPAREN
                	    {
                	    dbg.location(391,42);
                	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=LESS_IMPORT_TYPE)||(input.LA(1)>=MEDIA_SYM && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop354;
                    }
                } while (true);
                } finally {dbg.exitSubRule(354);}

                dbg.location(391,52);
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred5_Css3690); if (state.failed) return ;
                dbg.location(391,59);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:59: (~ ( LBRACE | SEMI ) )*
                try { dbg.enterSubRule(355);

                loop355:
                do {
                    int alt355=2;
                    try { dbg.enterDecision(355, decisionCanBacktrack[355]);

                    int LA355_0 = input.LA(1);

                    if ( (LA355_0==NAMESPACE_SYM||(LA355_0>=IDENT && LA355_0<=MEDIA_SYM)||(LA355_0>=RBRACE && LA355_0<=LINE_COMMENT)) ) {
                        alt355=1;
                    }


                    } finally {dbg.exitDecision(355);}

                    switch (alt355) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:59: ~ ( LBRACE | SEMI )
                	    {
                	    dbg.location(391,59);
                	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=RBRACE && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop355;
                    }
                } while (true);
                } finally {dbg.exitSubRule(355);}

                dbg.location(391,75);
                match(input,LBRACE,FOLLOW_LBRACE_in_synpred5_Css3700); if (state.failed) return ;

                }


                }
                break;

        }}
    // $ANTLR end synpred5_Css3

    // $ANTLR start synpred6_Css3
    public final void synpred6_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:7: ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:8: cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI
        {
        dbg.location(393,8);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred6_Css3718);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(393,22);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:22: ( ( ws )? IMPORTANT_SYM )?
        int alt358=2;
        try { dbg.enterSubRule(358);
        try { dbg.enterDecision(358, decisionCanBacktrack[358]);

        try {
            isCyclicDecision = true;
            alt358 = dfa358.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(358);}

        switch (alt358) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:23: ( ws )? IMPORTANT_SYM
                {
                dbg.location(393,23);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:23: ( ws )?
                int alt357=2;
                try { dbg.enterSubRule(357);
                try { dbg.enterDecision(357, decisionCanBacktrack[357]);

                int LA357_0 = input.LA(1);

                if ( ((LA357_0>=WS && LA357_0<=COMMENT)) ) {
                    alt357=1;
                }
                } finally {dbg.exitDecision(357);}

                switch (alt357) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:23: ws
                        {
                        dbg.location(393,23);
                        pushFollow(FOLLOW_ws_in_synpred6_Css3721);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(357);}

                dbg.location(393,27);
                match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_synpred6_Css3724); if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(358);}

        dbg.location(393,43);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:43: ( ws )?
        int alt359=2;
        try { dbg.enterSubRule(359);
        try { dbg.enterDecision(359, decisionCanBacktrack[359]);

        int LA359_0 = input.LA(1);

        if ( ((LA359_0>=WS && LA359_0<=COMMENT)) ) {
            alt359=1;
        }
        } finally {dbg.exitDecision(359);}

        switch (alt359) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:43: ws
                {
                dbg.location(393,43);
                pushFollow(FOLLOW_ws_in_synpred6_Css3728);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(359);}

        dbg.location(393,47);
        match(input,SEMI,FOLLOW_SEMI_in_synpred6_Css3731); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_Css3

    // $ANTLR start synpred7_Css3
    public final void synpred7_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:7: ( cp_mixin_call )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:8: cp_mixin_call
        {
        dbg.location(394,8);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred7_Css3754);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_Css3

    // $ANTLR start synpred8_Css3
    public final void synpred8_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:6: ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:8: (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI
        {
        dbg.location(395,8);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:8: (~ ( LBRACE | SEMI | RBRACE | COLON ) )+
        int cnt360=0;
        try { dbg.enterSubRule(360);

        loop360:
        do {
            int alt360=2;
            try { dbg.enterDecision(360, decisionCanBacktrack[360]);

            int LA360_0 = input.LA(1);

            if ( (LA360_0==NAMESPACE_SYM||(LA360_0>=IDENT && LA360_0<=MEDIA_SYM)||(LA360_0>=IMPORTANT_SYM && LA360_0<=GEN)||(LA360_0>=AT_IDENT && LA360_0<=LINE_COMMENT)) ) {
                alt360=1;
            }


            } finally {dbg.exitDecision(360);}

            switch (alt360) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:8: ~ ( LBRACE | SEMI | RBRACE | COLON )
        	    {
        	    dbg.location(395,8);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=GEN)||(input.LA(1)>=AT_IDENT && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt360 >= 1 ) break loop360;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(360, input);
                    dbg.recognitionException(eee);

                    throw eee;
            }
            cnt360++;
        } while (true);
        } finally {dbg.exitSubRule(360);}

        dbg.location(395,37);
        match(input,COLON,FOLLOW_COLON_in_synpred8_Css3789); if (state.failed) return ;
        dbg.location(395,43);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:43: (~ ( SEMI | LBRACE | RBRACE ) )+
        int cnt361=0;
        try { dbg.enterSubRule(361);

        loop361:
        do {
            int alt361=2;
            try { dbg.enterDecision(361, decisionCanBacktrack[361]);

            int LA361_0 = input.LA(1);

            if ( (LA361_0==NAMESPACE_SYM||(LA361_0>=IDENT && LA361_0<=MEDIA_SYM)||(LA361_0>=IMPORTANT_SYM && LA361_0<=LINE_COMMENT)) ) {
                alt361=1;
            }


            } finally {dbg.exitDecision(361);}

            switch (alt361) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:43: ~ ( SEMI | LBRACE | RBRACE )
        	    {
        	    dbg.location(395,43);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt361 >= 1 ) break loop361;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(361, input);
                    dbg.recognitionException(eee);

                    throw eee;
            }
            cnt361++;
        } while (true);
        } finally {dbg.exitSubRule(361);}

        dbg.location(395,66);
        match(input,SEMI,FOLLOW_SEMI_in_synpred8_Css3801); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_Css3

    // $ANTLR start synpred9_Css3
    public final void synpred9_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:396:6: ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:396:8: sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI
        {
        dbg.location(396,8);
        pushFollow(FOLLOW_sass_declaration_interpolation_expression_in_synpred9_Css3814);
        sass_declaration_interpolation_expression();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(396,50);
        match(input,COLON,FOLLOW_COLON_in_synpred9_Css3816); if (state.failed) return ;
        dbg.location(396,56);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:396:56: (~ ( SEMI | LBRACE | RBRACE ) )+
        int cnt362=0;
        try { dbg.enterSubRule(362);

        loop362:
        do {
            int alt362=2;
            try { dbg.enterDecision(362, decisionCanBacktrack[362]);

            int LA362_0 = input.LA(1);

            if ( (LA362_0==NAMESPACE_SYM||(LA362_0>=IDENT && LA362_0<=MEDIA_SYM)||(LA362_0>=IMPORTANT_SYM && LA362_0<=LINE_COMMENT)) ) {
                alt362=1;
            }


            } finally {dbg.exitDecision(362);}

            switch (alt362) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:396:56: ~ ( SEMI | LBRACE | RBRACE )
        	    {
        	    dbg.location(396,56);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt362 >= 1 ) break loop362;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(362, input);
                    dbg.recognitionException(eee);

                    throw eee;
            }
            cnt362++;
        } while (true);
        } finally {dbg.exitSubRule(362);}

        dbg.location(396,79);
        match(input,SEMI,FOLLOW_SEMI_in_synpred9_Css3828); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_Css3

    // $ANTLR start synpred10_Css3
    public final void synpred10_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:17: ( ( ws )? COMMA )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:18: ( ws )? COMMA
        {
        dbg.location(411,18);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:18: ( ws )?
        int alt363=2;
        try { dbg.enterSubRule(363);
        try { dbg.enterDecision(363, decisionCanBacktrack[363]);

        int LA363_0 = input.LA(1);

        if ( ((LA363_0>=WS && LA363_0<=COMMENT)) ) {
            alt363=1;
        }
        } finally {dbg.exitDecision(363);}

        switch (alt363) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:18: ws
                {
                dbg.location(411,18);
                pushFollow(FOLLOW_ws_in_synpred10_Css3946);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(363);}

        dbg.location(411,22);
        match(input,COMMA,FOLLOW_COMMA_in_synpred10_Css3949); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_Css3

    // $ANTLR start synpred11_Css3
    public final void synpred11_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:22: ( ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:23: ( ws )? SEMI
        {
        dbg.location(451,23);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:23: ( ws )?
        int alt364=2;
        try { dbg.enterSubRule(364);
        try { dbg.enterDecision(364, decisionCanBacktrack[364]);

        int LA364_0 = input.LA(1);

        if ( ((LA364_0>=WS && LA364_0<=COMMENT)) ) {
            alt364=1;
        }
        } finally {dbg.exitDecision(364);}

        switch (alt364) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:23: ws
                {
                dbg.location(451,23);
                pushFollow(FOLLOW_ws_in_synpred11_Css31245);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(364);}

        dbg.location(451,27);
        match(input,SEMI,FOLLOW_SEMI_in_synpred11_Css31248); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_Css3

    // $ANTLR start synpred12_Css3
    public final void synpred12_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:9: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )
        int alt368=2;
        try { dbg.enterDecision(368, decisionCanBacktrack[368]);

        int LA368_0 = input.LA(1);

        if ( (LA368_0==SASS_MIXIN) ) {
            alt368=1;
        }
        else if ( (LA368_0==DOT) ) {
            alt368=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 368, 0, input);

            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(368);}

        switch (alt368) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:10: SASS_MIXIN
                {
                dbg.location(459,10);
                match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred12_Css31323); if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:23: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE )
                {
                dbg.location(459,23);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:23: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:24: DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE
                {
                dbg.location(459,24);
                match(input,DOT,FOLLOW_DOT_in_synpred12_Css31328); if (state.failed) return ;
                dbg.location(459,28);
                match(input,IDENT,FOLLOW_IDENT_in_synpred12_Css31330); if (state.failed) return ;
                dbg.location(459,34);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:34: ( ws )?
                int alt365=2;
                try { dbg.enterSubRule(365);
                try { dbg.enterDecision(365, decisionCanBacktrack[365]);

                int LA365_0 = input.LA(1);

                if ( ((LA365_0>=WS && LA365_0<=COMMENT)) ) {
                    alt365=1;
                }
                } finally {dbg.exitDecision(365);}

                switch (alt365) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:34: ws
                        {
                        dbg.location(459,34);
                        pushFollow(FOLLOW_ws_in_synpred12_Css31332);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(365);}

                dbg.location(459,38);
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred12_Css31335); if (state.failed) return ;
                dbg.location(459,45);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:45: (~ RPAREN )*
                try { dbg.enterSubRule(366);

                loop366:
                do {
                    int alt366=2;
                    try { dbg.enterDecision(366, decisionCanBacktrack[366]);

                    int LA366_0 = input.LA(1);

                    if ( ((LA366_0>=NAMESPACE_SYM && LA366_0<=LESS_IMPORT_TYPE)||(LA366_0>=MEDIA_SYM && LA366_0<=LINE_COMMENT)) ) {
                        alt366=1;
                    }


                    } finally {dbg.exitDecision(366);}

                    switch (alt366) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:46: ~ RPAREN
                	    {
                	    dbg.location(459,46);
                	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=LESS_IMPORT_TYPE)||(input.LA(1)>=MEDIA_SYM && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop366;
                    }
                } while (true);
                } finally {dbg.exitSubRule(366);}

                dbg.location(459,56);
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred12_Css31343); if (state.failed) return ;
                dbg.location(459,63);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:63: (~ ( LBRACE | RBRACE | SEMI ) )*
                try { dbg.enterSubRule(367);

                loop367:
                do {
                    int alt367=2;
                    try { dbg.enterDecision(367, decisionCanBacktrack[367]);

                    int LA367_0 = input.LA(1);

                    if ( (LA367_0==NAMESPACE_SYM||(LA367_0>=IDENT && LA367_0<=MEDIA_SYM)||(LA367_0>=IMPORTANT_SYM && LA367_0<=LINE_COMMENT)) ) {
                        alt367=1;
                    }


                    } finally {dbg.exitDecision(367);}

                    switch (alt367) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:63: ~ ( LBRACE | RBRACE | SEMI )
                	    {
                	    dbg.location(459,63);
                	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop367;
                    }
                } while (true);
                } finally {dbg.exitSubRule(367);}

                dbg.location(459,86);
                match(input,LBRACE,FOLLOW_LBRACE_in_synpred12_Css31355); if (state.failed) return ;

                }


                }
                break;

        }}
    // $ANTLR end synpred12_Css3

    // $ANTLR start synpred13_Css3
    public final void synpred13_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:461:11: ( cp_mixin_call ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:461:12: cp_mixin_call ( ws )? SEMI
        {
        dbg.location(461,12);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred13_Css31381);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(461,26);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:461:26: ( ws )?
        int alt369=2;
        try { dbg.enterSubRule(369);
        try { dbg.enterDecision(369, decisionCanBacktrack[369]);

        int LA369_0 = input.LA(1);

        if ( ((LA369_0>=WS && LA369_0<=COMMENT)) ) {
            alt369=1;
        }
        } finally {dbg.exitDecision(369);}

        switch (alt369) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:461:26: ws
                {
                dbg.location(461,26);
                pushFollow(FOLLOW_ws_in_synpred13_Css31383);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(369);}

        dbg.location(461,30);
        match(input,SEMI,FOLLOW_SEMI_in_synpred13_Css31386); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_Css3

    // $ANTLR start synpred14_Css3
    public final void synpred14_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:11: ( cp_mixin_call )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:12: cp_mixin_call
        {
        dbg.location(462,12);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred14_Css31405);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_Css3

    // $ANTLR start synpred15_Css3
    public final void synpred15_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:464:11: ( sass_map )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:464:12: sass_map
        {
        dbg.location(464,12);
        pushFollow(FOLLOW_sass_map_in_synpred15_Css31433);
        sass_map();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_Css3

    // $ANTLR start synpred16_Css3
    public final void synpred16_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:465:11: ( cp_variable ( ws )? COLON )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:465:12: cp_variable ( ws )? COLON
        {
        dbg.location(465,12);
        pushFollow(FOLLOW_cp_variable_in_synpred16_Css31450);
        cp_variable();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(465,24);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:465:24: ( ws )?
        int alt370=2;
        try { dbg.enterSubRule(370);
        try { dbg.enterDecision(370, decisionCanBacktrack[370]);

        int LA370_0 = input.LA(1);

        if ( ((LA370_0>=WS && LA370_0<=COMMENT)) ) {
            alt370=1;
        }
        } finally {dbg.exitDecision(370);}

        switch (alt370) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:465:24: ws
                {
                dbg.location(465,24);
                pushFollow(FOLLOW_ws_in_synpred16_Css31452);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(370);}

        dbg.location(465,28);
        match(input,COLON,FOLLOW_COLON_in_synpred16_Css31455); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_Css3

    // $ANTLR start synpred17_Css3
    public final void synpred17_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:5: ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:6: (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE
        {
        dbg.location(601,6);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:6: (~ ( HASH_SYMBOL | COLON ) )*
        try { dbg.enterSubRule(371);

        loop371:
        do {
            int alt371=2;
            try { dbg.enterDecision(371, decisionCanBacktrack[371]);

            int LA371_0 = input.LA(1);

            if ( ((LA371_0>=NAMESPACE_SYM && LA371_0<=GEN)||(LA371_0>=AT_IDENT && LA371_0<=TILDE)||(LA371_0>=HASH && LA371_0<=LINE_COMMENT)) ) {
                alt371=1;
            }


            } finally {dbg.exitDecision(371);}

            switch (alt371) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:6: ~ ( HASH_SYMBOL | COLON )
        	    {
        	    dbg.location(601,6);
        	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=GEN)||(input.LA(1)>=AT_IDENT && input.LA(1)<=TILDE)||(input.LA(1)>=HASH && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop371;
            }
        } while (true);
        } finally {dbg.exitSubRule(371);}

        dbg.location(601,28);
        match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_synpred17_Css32444); if (state.failed) return ;
        dbg.location(601,40);
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred17_Css32446); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_Css3

    // $ANTLR start synpred18_Css3
    public final void synpred18_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:27: ( ( ws )? COMMA )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:28: ( ws )? COMMA
        {
        dbg.location(627,28);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:28: ( ws )?
        int alt372=2;
        try { dbg.enterSubRule(372);
        try { dbg.enterDecision(372, decisionCanBacktrack[372]);

        int LA372_0 = input.LA(1);

        if ( ((LA372_0>=WS && LA372_0<=COMMENT)) ) {
            alt372=1;
        }
        } finally {dbg.exitDecision(372);}

        switch (alt372) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:28: ws
                {
                dbg.location(627,28);
                pushFollow(FOLLOW_ws_in_synpred18_Css32599);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(372);}

        dbg.location(627,32);
        match(input,COMMA,FOLLOW_COMMA_in_synpred18_Css32602); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_Css3

    // $ANTLR start synpred19_Css3
    public final void synpred19_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:25: ( ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:26: ( ws )? SEMI
        {
        dbg.location(654,26);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:26: ( ws )?
        int alt373=2;
        try { dbg.enterSubRule(373);
        try { dbg.enterDecision(373, decisionCanBacktrack[373]);

        int LA373_0 = input.LA(1);

        if ( ((LA373_0>=WS && LA373_0<=COMMENT)) ) {
            alt373=1;
        }
        } finally {dbg.exitDecision(373);}

        switch (alt373) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:654:26: ws
                {
                dbg.location(654,26);
                pushFollow(FOLLOW_ws_in_synpred19_Css32793);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(373);}

        dbg.location(654,30);
        match(input,SEMI,FOLLOW_SEMI_in_synpred19_Css32796); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_Css3

    // $ANTLR start synpred20_Css3
    public final void synpred20_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:662:5: ( cp_variable_declaration )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:662:6: cp_variable_declaration
        {
        dbg.location(662,6);
        pushFollow(FOLLOW_cp_variable_declaration_in_synpred20_Css32867);
        cp_variable_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_Css3

    // $ANTLR start synpred21_Css3
    public final void synpred21_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:663:7: ( sass_map )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:663:8: sass_map
        {
        dbg.location(663,8);
        pushFollow(FOLLOW_sass_map_in_synpred21_Css32879);
        sass_map();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_Css3

    // $ANTLR start synpred22_Css3
    public final void synpred22_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:7: ( sass_nested_properties )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:8: sass_nested_properties
        {
        dbg.location(664,8);
        pushFollow(FOLLOW_sass_nested_properties_in_synpred22_Css32892);
        sass_nested_properties();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_Css3

    // $ANTLR start synpred23_Css3
    public final void synpred23_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:665:7: ( propertyDeclaration )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:665:8: propertyDeclaration
        {
        dbg.location(665,8);
        pushFollow(FOLLOW_propertyDeclaration_in_synpred23_Css32904);
        propertyDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_Css3

    // $ANTLR start synpred24_Css3
    public final void synpred24_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:7: ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:8: property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI )
        {
        dbg.location(667,8);
        pushFollow(FOLLOW_property_in_synpred24_Css32921);
        property();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(667,17);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:17: ( ws )?
        int alt374=2;
        try { dbg.enterSubRule(374);
        try { dbg.enterDecision(374, decisionCanBacktrack[374]);

        int LA374_0 = input.LA(1);

        if ( ((LA374_0>=WS && LA374_0<=COMMENT)) ) {
            alt374=1;
        }
        } finally {dbg.exitDecision(374);}

        switch (alt374) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:17: ws
                {
                dbg.location(667,17);
                pushFollow(FOLLOW_ws_in_synpred24_Css32923);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(374);}

        dbg.location(667,21);
        match(input,COLON,FOLLOW_COLON_in_synpred24_Css32926); if (state.failed) return ;
        dbg.location(667,27);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:27: (~ ( LBRACE | SEMI | RBRACE ) )*
        try { dbg.enterSubRule(375);

        loop375:
        do {
            int alt375=2;
            try { dbg.enterDecision(375, decisionCanBacktrack[375]);

            int LA375_0 = input.LA(1);

            if ( (LA375_0==NAMESPACE_SYM||(LA375_0>=IDENT && LA375_0<=MEDIA_SYM)||(LA375_0>=IMPORTANT_SYM && LA375_0<=LINE_COMMENT)) ) {
                alt375=1;
            }


            } finally {dbg.exitDecision(375);}

            switch (alt375) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:27: ~ ( LBRACE | SEMI | RBRACE )
        	    {
        	    dbg.location(667,27);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop375;
            }
        } while (true);
        } finally {dbg.exitSubRule(375);}

        dbg.location(667,50);
        if ( input.LA(1)==SEMI||input.LA(1)==RBRACE ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            dbg.recognitionException(mse);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred24_Css3

    // $ANTLR start synpred25_Css3
    public final void synpred25_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:7: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )
        int alt379=2;
        try { dbg.enterDecision(379, decisionCanBacktrack[379]);

        int LA379_0 = input.LA(1);

        if ( (LA379_0==SASS_MIXIN) ) {
            alt379=1;
        }
        else if ( (LA379_0==DOT) ) {
            alt379=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 379, 0, input);

            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(379);}

        switch (alt379) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:8: SASS_MIXIN
                {
                dbg.location(668,8);
                match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred25_Css32955); if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:21: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE )
                {
                dbg.location(668,21);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:21: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:22: DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE
                {
                dbg.location(668,22);
                match(input,DOT,FOLLOW_DOT_in_synpred25_Css32960); if (state.failed) return ;
                dbg.location(668,26);
                match(input,IDENT,FOLLOW_IDENT_in_synpred25_Css32962); if (state.failed) return ;
                dbg.location(668,32);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:32: ( ws )?
                int alt376=2;
                try { dbg.enterSubRule(376);
                try { dbg.enterDecision(376, decisionCanBacktrack[376]);

                int LA376_0 = input.LA(1);

                if ( ((LA376_0>=WS && LA376_0<=COMMENT)) ) {
                    alt376=1;
                }
                } finally {dbg.exitDecision(376);}

                switch (alt376) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:32: ws
                        {
                        dbg.location(668,32);
                        pushFollow(FOLLOW_ws_in_synpred25_Css32964);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(376);}

                dbg.location(668,36);
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred25_Css32967); if (state.failed) return ;
                dbg.location(668,43);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:43: (~ RPAREN )*
                try { dbg.enterSubRule(377);

                loop377:
                do {
                    int alt377=2;
                    try { dbg.enterDecision(377, decisionCanBacktrack[377]);

                    int LA377_0 = input.LA(1);

                    if ( ((LA377_0>=NAMESPACE_SYM && LA377_0<=LESS_IMPORT_TYPE)||(LA377_0>=MEDIA_SYM && LA377_0<=LINE_COMMENT)) ) {
                        alt377=1;
                    }


                    } finally {dbg.exitDecision(377);}

                    switch (alt377) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:44: ~ RPAREN
                	    {
                	    dbg.location(668,44);
                	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=LESS_IMPORT_TYPE)||(input.LA(1)>=MEDIA_SYM && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop377;
                    }
                } while (true);
                } finally {dbg.exitSubRule(377);}

                dbg.location(668,54);
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred25_Css32975); if (state.failed) return ;
                dbg.location(668,61);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:61: (~ ( LBRACE | SEMI | RBRACE ) )*
                try { dbg.enterSubRule(378);

                loop378:
                do {
                    int alt378=2;
                    try { dbg.enterDecision(378, decisionCanBacktrack[378]);

                    int LA378_0 = input.LA(1);

                    if ( (LA378_0==NAMESPACE_SYM||(LA378_0>=IDENT && LA378_0<=MEDIA_SYM)||(LA378_0>=IMPORTANT_SYM && LA378_0<=LINE_COMMENT)) ) {
                        alt378=1;
                    }


                    } finally {dbg.exitDecision(378);}

                    switch (alt378) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:61: ~ ( LBRACE | SEMI | RBRACE )
                	    {
                	    dbg.location(668,61);
                	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop378;
                    }
                } while (true);
                } finally {dbg.exitSubRule(378);}

                dbg.location(668,84);
                match(input,LBRACE,FOLLOW_LBRACE_in_synpred25_Css32987); if (state.failed) return ;

                }


                }
                break;

        }}
    // $ANTLR end synpred25_Css3

    // $ANTLR start synpred26_Css3
    public final void synpred26_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:7: ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:8: cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI
        {
        dbg.location(670,8);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred26_Css33005);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(670,22);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:22: ( ( ws )? IMPORTANT_SYM )?
        int alt381=2;
        try { dbg.enterSubRule(381);
        try { dbg.enterDecision(381, decisionCanBacktrack[381]);

        try {
            isCyclicDecision = true;
            alt381 = dfa381.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(381);}

        switch (alt381) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:23: ( ws )? IMPORTANT_SYM
                {
                dbg.location(670,23);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:23: ( ws )?
                int alt380=2;
                try { dbg.enterSubRule(380);
                try { dbg.enterDecision(380, decisionCanBacktrack[380]);

                int LA380_0 = input.LA(1);

                if ( ((LA380_0>=WS && LA380_0<=COMMENT)) ) {
                    alt380=1;
                }
                } finally {dbg.exitDecision(380);}

                switch (alt380) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:23: ws
                        {
                        dbg.location(670,23);
                        pushFollow(FOLLOW_ws_in_synpred26_Css33008);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(380);}

                dbg.location(670,27);
                match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_synpred26_Css33011); if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(381);}

        dbg.location(670,43);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:43: ( ws )?
        int alt382=2;
        try { dbg.enterSubRule(382);
        try { dbg.enterDecision(382, decisionCanBacktrack[382]);

        int LA382_0 = input.LA(1);

        if ( ((LA382_0>=WS && LA382_0<=COMMENT)) ) {
            alt382=1;
        }
        } finally {dbg.exitDecision(382);}

        switch (alt382) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:43: ws
                {
                dbg.location(670,43);
                pushFollow(FOLLOW_ws_in_synpred26_Css33015);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(382);}

        dbg.location(670,47);
        match(input,SEMI,FOLLOW_SEMI_in_synpred26_Css33018); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred26_Css3

    // $ANTLR start synpred27_Css3
    public final void synpred27_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:671:7: ( cp_mixin_call )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:671:8: cp_mixin_call
        {
        dbg.location(671,8);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred27_Css33041);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_Css3

    // $ANTLR start synpred28_Css3
    public final void synpred28_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:7: ( selectorsGroup ( ws )? LBRACE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:8: selectorsGroup ( ws )? LBRACE
        {
        dbg.location(672,8);
        pushFollow(FOLLOW_selectorsGroup_in_synpred28_Css33064);
        selectorsGroup();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(672,23);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:23: ( ws )?
        int alt383=2;
        try { dbg.enterSubRule(383);
        try { dbg.enterDecision(383, decisionCanBacktrack[383]);

        int LA383_0 = input.LA(1);

        if ( ((LA383_0>=WS && LA383_0<=COMMENT)) ) {
            alt383=1;
        }
        } finally {dbg.exitDecision(383);}

        switch (alt383) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:23: ws
                {
                dbg.location(672,23);
                pushFollow(FOLLOW_ws_in_synpred28_Css33066);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(383);}

        dbg.location(672,27);
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred28_Css33069); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred28_Css3

    // $ANTLR start synpred29_Css3
    public final void synpred29_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:690:9: ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:690:11: (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE
        {
        dbg.location(690,11);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:690:11: (~ ( HASH_SYMBOL | LBRACE ) )*
        try { dbg.enterSubRule(384);

        loop384:
        do {
            int alt384=2;
            try { dbg.enterDecision(384, decisionCanBacktrack[384]);

            int LA384_0 = input.LA(1);

            if ( ((LA384_0>=NAMESPACE_SYM && LA384_0<=MEDIA_SYM)||(LA384_0>=RBRACE && LA384_0<=TILDE)||(LA384_0>=HASH && LA384_0<=LINE_COMMENT)) ) {
                alt384=1;
            }


            } finally {dbg.exitDecision(384);}

            switch (alt384) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:690:11: ~ ( HASH_SYMBOL | LBRACE )
        	    {
        	    dbg.location(690,11);
        	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=RBRACE && input.LA(1)<=TILDE)||(input.LA(1)>=HASH && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop384;
            }
        } while (true);
        } finally {dbg.exitSubRule(384);}

        dbg.location(690,38);
        match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_synpred29_Css33207); if (state.failed) return ;
        dbg.location(690,50);
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred29_Css33209); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_Css3

    // $ANTLR start synpred30_Css3
    public final void synpred30_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:18: ( ( ws )? esPred )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:19: ( ws )? esPred
        {
        dbg.location(706,19);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:19: ( ws )?
        int alt385=2;
        try { dbg.enterSubRule(385);
        try { dbg.enterDecision(385, decisionCanBacktrack[385]);

        int LA385_0 = input.LA(1);

        if ( ((LA385_0>=WS && LA385_0<=COMMENT)) ) {
            alt385=1;
        }
        } finally {dbg.exitDecision(385);}

        switch (alt385) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:19: ws
                {
                dbg.location(706,19);
                pushFollow(FOLLOW_ws_in_synpred30_Css33336);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(385);}

        dbg.location(706,23);
        pushFollow(FOLLOW_esPred_in_synpred30_Css33339);
        esPred();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_Css3

    // $ANTLR start synpred31_Css3
    public final void synpred31_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:21: ( ( ws )? esPred )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:22: ( ws )? esPred
        {
        dbg.location(708,22);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:22: ( ws )?
        int alt386=2;
        try { dbg.enterSubRule(386);
        try { dbg.enterDecision(386, decisionCanBacktrack[386]);

        int LA386_0 = input.LA(1);

        if ( ((LA386_0>=WS && LA386_0<=COMMENT)) ) {
            alt386=1;
        }
        } finally {dbg.exitDecision(386);}

        switch (alt386) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:22: ws
                {
                dbg.location(708,22);
                pushFollow(FOLLOW_ws_in_synpred31_Css33359);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(386);}

        dbg.location(708,26);
        pushFollow(FOLLOW_esPred_in_synpred31_Css33362);
        esPred();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_Css3

    // $ANTLR start synpred32_Css3
    public final void synpred32_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:722:7: ( ( IDENT | STAR )? PIPE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:722:8: ( IDENT | STAR )? PIPE
        {
        dbg.location(722,8);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:722:8: ( IDENT | STAR )?
        int alt387=2;
        try { dbg.enterSubRule(387);
        try { dbg.enterDecision(387, decisionCanBacktrack[387]);

        int LA387_0 = input.LA(1);

        if ( (LA387_0==IDENT||LA387_0==STAR) ) {
            alt387=1;
        }
        } finally {dbg.exitDecision(387);}

        switch (alt387) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
                {
                dbg.location(722,8);
                if ( input.LA(1)==IDENT||input.LA(1)==STAR ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    dbg.recognitionException(mse);
                    throw mse;
                }


                }
                break;

        }
        } finally {dbg.exitSubRule(387);}

        dbg.location(722,24);
        match(input,PIPE,FOLLOW_PIPE_in_synpred32_Css33454); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_Css3

    // $ANTLR start synpred33_Css3
    public final void synpred33_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:14: ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:15: ( ws | ( ( ws )? operator ( ws )? ) | ) term
        {
        dbg.location(898,15);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:15: ( ws | ( ( ws )? operator ( ws )? ) | )
        int alt390=3;
        try { dbg.enterSubRule(390);
        try { dbg.enterDecision(390, decisionCanBacktrack[390]);

        try {
            isCyclicDecision = true;
            alt390 = dfa390.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(390);}

        switch (alt390) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:17: ws
                {
                dbg.location(898,17);
                pushFollow(FOLLOW_ws_in_synpred33_Css34853);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:22: ( ( ws )? operator ( ws )? )
                {
                dbg.location(898,22);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:22: ( ( ws )? operator ( ws )? )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:23: ( ws )? operator ( ws )?
                {
                dbg.location(898,23);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:23: ( ws )?
                int alt388=2;
                try { dbg.enterSubRule(388);
                try { dbg.enterDecision(388, decisionCanBacktrack[388]);

                int LA388_0 = input.LA(1);

                if ( ((LA388_0>=WS && LA388_0<=COMMENT)) ) {
                    alt388=1;
                }
                } finally {dbg.exitDecision(388);}

                switch (alt388) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:23: ws
                        {
                        dbg.location(898,23);
                        pushFollow(FOLLOW_ws_in_synpred33_Css34858);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(388);}

                dbg.location(898,27);
                pushFollow(FOLLOW_operator_in_synpred33_Css34861);
                operator();

                state._fsp--;
                if (state.failed) return ;
                dbg.location(898,36);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:36: ( ws )?
                int alt389=2;
                try { dbg.enterSubRule(389);
                try { dbg.enterDecision(389, decisionCanBacktrack[389]);

                int LA389_0 = input.LA(1);

                if ( ((LA389_0>=WS && LA389_0<=COMMENT)) ) {
                    alt389=1;
                }
                } finally {dbg.exitDecision(389);}

                switch (alt389) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:36: ws
                        {
                        dbg.location(898,36);
                        pushFollow(FOLLOW_ws_in_synpred33_Css34863);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(389);}


                }


                }
                break;
            case 3 :
                dbg.enterAlt(3);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:56: 
                {
                }
                break;

        }
        } finally {dbg.exitSubRule(390);}

        dbg.location(898,58);
        pushFollow(FOLLOW_term_in_synpred33_Css34872);
        term();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred33_Css3

    // $ANTLR start synpred34_Css3
    public final void synpred34_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:9: ( functionName ( ws )? LPAREN )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:10: functionName ( ws )? LPAREN
        {
        dbg.location(905,10);
        pushFollow(FOLLOW_functionName_in_synpred34_Css34945);
        functionName();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(905,23);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:23: ( ws )?
        int alt391=2;
        try { dbg.enterSubRule(391);
        try { dbg.enterDecision(391, decisionCanBacktrack[391]);

        int LA391_0 = input.LA(1);

        if ( ((LA391_0>=WS && LA391_0<=COMMENT)) ) {
            alt391=1;
        }
        } finally {dbg.exitDecision(391);}

        switch (alt391) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:23: ws
                {
                dbg.location(905,23);
                pushFollow(FOLLOW_ws_in_synpred34_Css34947);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(391);}

        dbg.location(905,27);
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred34_Css34950); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred34_Css3

    // $ANTLR start synpred35_Css3
    public final void synpred35_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:966:9: ( fnAttributeName ( ws )? ( OPEQ | COLON ) )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:966:10: fnAttributeName ( ws )? ( OPEQ | COLON )
        {
        dbg.location(966,10);
        pushFollow(FOLLOW_fnAttributeName_in_synpred35_Css35467);
        fnAttributeName();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(966,26);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:966:26: ( ws )?
        int alt392=2;
        try { dbg.enterSubRule(392);
        try { dbg.enterDecision(392, decisionCanBacktrack[392]);

        int LA392_0 = input.LA(1);

        if ( ((LA392_0>=WS && LA392_0<=COMMENT)) ) {
            alt392=1;
        }
        } finally {dbg.exitDecision(392);}

        switch (alt392) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:966:26: ws
                {
                dbg.location(966,26);
                pushFollow(FOLLOW_ws_in_synpred35_Css35469);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(392);}

        dbg.location(966,30);
        if ( input.LA(1)==COLON||input.LA(1)==OPEQ ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            dbg.recognitionException(mse);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred35_Css3

    // $ANTLR start synpred36_Css3
    public final void synpred36_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:20: ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term
        {
        dbg.location(979,21);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )
        int alt395=3;
        try { dbg.enterSubRule(395);
        try { dbg.enterDecision(395, decisionCanBacktrack[395]);

        try {
            isCyclicDecision = true;
            alt395 = dfa395.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(395);}

        switch (alt395) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:23: ws
                {
                dbg.location(979,23);
                pushFollow(FOLLOW_ws_in_synpred36_Css35598);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:28: ( ( ws )? SOLIDUS ( ws )? )
                {
                dbg.location(979,28);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:28: ( ( ws )? SOLIDUS ( ws )? )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:29: ( ws )? SOLIDUS ( ws )?
                {
                dbg.location(979,29);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:29: ( ws )?
                int alt393=2;
                try { dbg.enterSubRule(393);
                try { dbg.enterDecision(393, decisionCanBacktrack[393]);

                int LA393_0 = input.LA(1);

                if ( ((LA393_0>=WS && LA393_0<=COMMENT)) ) {
                    alt393=1;
                }
                } finally {dbg.exitDecision(393);}

                switch (alt393) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:29: ws
                        {
                        dbg.location(979,29);
                        pushFollow(FOLLOW_ws_in_synpred36_Css35603);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(393);}

                dbg.location(979,33);
                match(input,SOLIDUS,FOLLOW_SOLIDUS_in_synpred36_Css35606); if (state.failed) return ;
                dbg.location(979,41);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:41: ( ws )?
                int alt394=2;
                try { dbg.enterSubRule(394);
                try { dbg.enterDecision(394, decisionCanBacktrack[394]);

                int LA394_0 = input.LA(1);

                if ( ((LA394_0>=WS && LA394_0<=COMMENT)) ) {
                    alt394=1;
                }
                } finally {dbg.exitDecision(394);}

                switch (alt394) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:41: ws
                        {
                        dbg.location(979,41);
                        pushFollow(FOLLOW_ws_in_synpred36_Css35608);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(394);}


                }


                }
                break;
            case 3 :
                dbg.enterAlt(3);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:61: 
                {
                }
                break;

        }
        } finally {dbg.exitSubRule(395);}

        dbg.location(979,63);
        pushFollow(FOLLOW_term_in_synpred36_Css35617);
        term();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_Css3

    // $ANTLR start synpred37_Css3
    public final void synpred37_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:6: ( ( ws )? COMMA ( ws )? cp_expression )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:7: ( ws )? COMMA ( ws )? cp_expression
        {
        dbg.location(1014,7);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:7: ( ws )?
        int alt396=2;
        try { dbg.enterSubRule(396);
        try { dbg.enterDecision(396, decisionCanBacktrack[396]);

        int LA396_0 = input.LA(1);

        if ( ((LA396_0>=WS && LA396_0<=COMMENT)) ) {
            alt396=1;
        }
        } finally {dbg.exitDecision(396);}

        switch (alt396) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:7: ws
                {
                dbg.location(1014,7);
                pushFollow(FOLLOW_ws_in_synpred37_Css36037);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(396);}

        dbg.location(1014,11);
        match(input,COMMA,FOLLOW_COMMA_in_synpred37_Css36040); if (state.failed) return ;
        dbg.location(1014,17);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:17: ( ws )?
        int alt397=2;
        try { dbg.enterSubRule(397);
        try { dbg.enterDecision(397, decisionCanBacktrack[397]);

        int LA397_0 = input.LA(1);

        if ( ((LA397_0>=WS && LA397_0<=COMMENT)) ) {
            alt397=1;
        }
        } finally {dbg.exitDecision(397);}

        switch (alt397) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:17: ws
                {
                dbg.location(1014,17);
                pushFollow(FOLLOW_ws_in_synpred37_Css36042);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(397);}

        dbg.location(1014,21);
        pushFollow(FOLLOW_cp_expression_in_synpred37_Css36045);
        cp_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred37_Css3

    // $ANTLR start synpred38_Css3
    public final void synpred38_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:9: ( ( ws )? cp_expression_operator )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:10: ( ws )? cp_expression_operator
        {
        dbg.location(1031,10);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:10: ( ws )?
        int alt398=2;
        try { dbg.enterSubRule(398);
        try { dbg.enterDecision(398, decisionCanBacktrack[398]);

        int LA398_0 = input.LA(1);

        if ( ((LA398_0>=WS && LA398_0<=COMMENT)) ) {
            alt398=1;
        }
        } finally {dbg.exitDecision(398);}

        switch (alt398) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:10: ws
                {
                dbg.location(1031,10);
                pushFollow(FOLLOW_ws_in_synpred38_Css36106);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(398);}

        dbg.location(1031,14);
        pushFollow(FOLLOW_cp_expression_operator_in_synpred38_Css36109);
        cp_expression_operator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred38_Css3

    // $ANTLR start synpred39_Css3
    public final void synpred39_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:11: ( ( ws )? cp_expression_atom )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:12: ( ws )? cp_expression_atom
        {
        dbg.location(1032,12);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:12: ( ws )?
        int alt399=2;
        try { dbg.enterSubRule(399);
        try { dbg.enterDecision(399, decisionCanBacktrack[399]);

        int LA399_0 = input.LA(1);

        if ( ((LA399_0>=WS && LA399_0<=COMMENT)) ) {
            alt399=1;
        }
        } finally {dbg.exitDecision(399);}

        switch (alt399) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:12: ws
                {
                dbg.location(1032,12);
                pushFollow(FOLLOW_ws_in_synpred39_Css36135);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(399);}

        dbg.location(1032,16);
        pushFollow(FOLLOW_cp_expression_atom_in_synpred39_Css36138);
        cp_expression_atom();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred39_Css3

    // $ANTLR start synpred40_Css3
    public final void synpred40_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1045:13: ( cp_math_expression )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1045:14: cp_math_expression
        {
        dbg.location(1045,14);
        pushFollow(FOLLOW_cp_math_expression_in_synpred40_Css36256);
        cp_math_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred40_Css3

    // $ANTLR start synpred41_Css3
    public final void synpred41_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1072:13: ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1072:14: ( ws )? ( PLUS | MINUS | STAR | SOLIDUS )
        {
        dbg.location(1072,14);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1072:14: ( ws )?
        int alt400=2;
        try { dbg.enterSubRule(400);
        try { dbg.enterDecision(400, decisionCanBacktrack[400]);

        int LA400_0 = input.LA(1);

        if ( ((LA400_0>=WS && LA400_0<=COMMENT)) ) {
            alt400=1;
        }
        } finally {dbg.exitDecision(400);}

        switch (alt400) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1072:14: ws
                {
                dbg.location(1072,14);
                pushFollow(FOLLOW_ws_in_synpred41_Css36389);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(400);}

        dbg.location(1072,18);
        if ( (input.LA(1)>=SOLIDUS && input.LA(1)<=PLUS)||input.LA(1)==STAR ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            dbg.recognitionException(mse);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred41_Css3

    // $ANTLR start synpred42_Css3
    public final void synpred42_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:13: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:14: sass_interpolation_expression_var
        {
        dbg.location(1206,14);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred42_Css37380);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred42_Css3

    // $ANTLR start synpred43_Css3
    public final void synpred43_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1213:17: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1213:18: sass_interpolation_expression_var
        {
        dbg.location(1213,18);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred43_Css37526);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred43_Css3

    // $ANTLR start synpred44_Css3
    public final void synpred44_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1224:13: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1224:14: sass_interpolation_expression_var
        {
        dbg.location(1224,14);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred44_Css37677);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred44_Css3

    // $ANTLR start synpred45_Css3
    public final void synpred45_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1231:17: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1231:18: sass_interpolation_expression_var
        {
        dbg.location(1231,18);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred45_Css37794);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred45_Css3

    // Delegated rules

    public final boolean synpred11_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred11_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred17_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred42_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred14_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred22_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred9_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred45_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred4_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred37_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred7_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred19_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred23_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred34_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred1_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred26_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred31_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred15_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred12_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred20_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred32_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred8_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred35_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred2_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred38_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred43_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred5_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred18_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred27_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred21_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred29_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred40_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred16_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred24_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred41_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred44_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred13_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred30_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred10_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred36_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred39_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred33_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred6_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred25_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred28_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred3_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA3 dfa3 = new DFA3(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA17 dfa17 = new DFA17(this);
    protected DFA32 dfa32 = new DFA32(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA24 dfa24 = new DFA24(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA43 dfa43 = new DFA43(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA61 dfa61 = new DFA61(this);
    protected DFA65 dfa65 = new DFA65(this);
    protected DFA69 dfa69 = new DFA69(this);
    protected DFA73 dfa73 = new DFA73(this);
    protected DFA96 dfa96 = new DFA96(this);
    protected DFA103 dfa103 = new DFA103(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA126 dfa126 = new DFA126(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA150 dfa150 = new DFA150(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA156 dfa156 = new DFA156(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA179 dfa179 = new DFA179(this);
    protected DFA192 dfa192 = new DFA192(this);
    protected DFA188 dfa188 = new DFA188(this);
    protected DFA193 dfa193 = new DFA193(this);
    protected DFA198 dfa198 = new DFA198(this);
    protected DFA197 dfa197 = new DFA197(this);
    protected DFA201 dfa201 = new DFA201(this);
    protected DFA209 dfa209 = new DFA209(this);
    protected DFA213 dfa213 = new DFA213(this);
    protected DFA220 dfa220 = new DFA220(this);
    protected DFA219 dfa219 = new DFA219(this);
    protected DFA218 dfa218 = new DFA218(this);
    protected DFA227 dfa227 = new DFA227(this);
    protected DFA232 dfa232 = new DFA232(this);
    protected DFA236 dfa236 = new DFA236(this);
    protected DFA242 dfa242 = new DFA242(this);
    protected DFA246 dfa246 = new DFA246(this);
    protected DFA251 dfa251 = new DFA251(this);
    protected DFA256 dfa256 = new DFA256(this);
    protected DFA260 dfa260 = new DFA260(this);
    protected DFA266 dfa266 = new DFA266(this);
    protected DFA270 dfa270 = new DFA270(this);
    protected DFA272 dfa272 = new DFA272(this);
    protected DFA282 dfa282 = new DFA282(this);
    protected DFA285 dfa285 = new DFA285(this);
    protected DFA299 dfa299 = new DFA299(this);
    protected DFA315 dfa315 = new DFA315(this);
    protected DFA319 dfa319 = new DFA319(this);
    protected DFA327 dfa327 = new DFA327(this);
    protected DFA331 dfa331 = new DFA331(this);
    protected DFA338 dfa338 = new DFA338(this);
    protected DFA337 dfa337 = new DFA337(this);
    protected DFA358 dfa358 = new DFA358(this);
    protected DFA381 dfa381 = new DFA381(this);
    protected DFA390 dfa390 = new DFA390(this);
    protected DFA395 dfa395 = new DFA395(this);
    static final String DFA3_eotS =
        "\5\uffff";
    static final String DFA3_eofS =
        "\1\2\4\uffff";
    static final String DFA3_minS =
        "\1\4\1\7\1\uffff\1\7\1\uffff";
    static final String DFA3_maxS =
        "\1\157\1\127\1\uffff\1\127\1\uffff";
    static final String DFA3_acceptS =
        "\2\uffff\1\2\1\uffff\1\1";
    static final String DFA3_specialS =
        "\5\uffff}>";
    static final String[] DFA3_transitionS = {
            "\3\2\2\uffff\1\1\2\2\3\uffff\1\2\6\uffff\4\2\3\uffff\1\2\1\uffff"+
            "\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\20\uffff\15\2\11"+
            "\uffff\1\2",
            "\1\4\17\uffff\1\2\75\uffff\3\3",
            "",
            "\1\4\17\uffff\1\2\75\uffff\3\3",
            ""
    };

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "324:6: ( charSet ( ws )? )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA4_eotS =
        "\47\uffff";
    static final String DFA4_eofS =
        "\1\2\46\uffff";
    static final String DFA4_minS =
        "\1\4\1\0\45\uffff";
    static final String DFA4_maxS =
        "\1\157\1\0\45\uffff";
    static final String DFA4_acceptS =
        "\2\uffff\1\2\43\uffff\1\1";
    static final String DFA4_specialS =
        "\1\uffff\1\0\45\uffff}>";
    static final String[] DFA4_transitionS = {
            "\3\2\2\uffff\1\2\1\1\1\2\3\uffff\1\2\6\uffff\4\2\3\uffff\1\2"+
            "\1\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\20\uffff"+
            "\15\2\11\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "325:9: ( imports )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(((evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))),""))) ) {s = 38;}

                        else if ( (((evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA5_eotS =
        "\5\uffff";
    static final String DFA5_eofS =
        "\1\2\4\uffff";
    static final String DFA5_minS =
        "\1\4\1\6\1\uffff\1\6\1\uffff";
    static final String DFA5_maxS =
        "\1\157\1\127\1\uffff\1\127\1\uffff";
    static final String DFA5_acceptS =
        "\2\uffff\1\2\1\uffff\1\1";
    static final String DFA5_specialS =
        "\5\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\1\2\2\2\uffff\3\2\3\uffff\1\2\6\uffff\4\2\3\uffff\1\2\1\uffff"+
            "\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\20\uffff\15\2\11"+
            "\uffff\1\2",
            "\3\4\16\uffff\1\2\75\uffff\3\3",
            "",
            "\3\4\16\uffff\1\2\75\uffff\3\3",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "326:9: ( namespaces )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA8_eotS =
        "\5\uffff";
    static final String DFA8_eofS =
        "\1\1\4\uffff";
    static final String DFA8_minS =
        "\1\4\1\uffff\2\6\1\uffff";
    static final String DFA8_maxS =
        "\1\157\1\uffff\2\127\1\uffff";
    static final String DFA8_acceptS =
        "\1\uffff\1\2\2\uffff\1\1";
    static final String DFA8_specialS =
        "\5\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\2\2\1\2\uffff\3\1\3\uffff\1\1\6\uffff\4\1\3\uffff\1\1\1\uffff"+
            "\23\1\1\uffff\14\1\1\uffff\1\1\6\uffff\2\1\20\uffff\15\1\11"+
            "\uffff\1\1",
            "",
            "\3\4\16\uffff\1\1\75\uffff\3\3",
            "\3\4\16\uffff\1\1\75\uffff\3\3",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "()+ loopback of 333:2: ( namespace ( ws )? )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA17_eotS =
        "\47\uffff";
    static final String DFA17_eofS =
        "\1\1\46\uffff";
    static final String DFA17_minS =
        "\1\4\33\uffff\1\0\12\uffff";
    static final String DFA17_maxS =
        "\1\157\33\uffff\1\0\12\uffff";
    static final String DFA17_acceptS =
        "\1\uffff\1\2\44\uffff\1\1";
    static final String DFA17_specialS =
        "\34\uffff\1\0\12\uffff}>";
    static final String[] DFA17_transitionS = {
            "\3\1\2\uffff\1\1\1\34\1\1\3\uffff\1\1\6\uffff\4\1\3\uffff\1"+
            "\1\1\uffff\23\1\1\uffff\14\1\1\uffff\1\1\6\uffff\2\1\20\uffff"+
            "\15\1\11\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA17_eot = DFA.unpackEncodedString(DFA17_eotS);
    static final short[] DFA17_eof = DFA.unpackEncodedString(DFA17_eofS);
    static final char[] DFA17_min = DFA.unpackEncodedStringToUnsignedChars(DFA17_minS);
    static final char[] DFA17_max = DFA.unpackEncodedStringToUnsignedChars(DFA17_maxS);
    static final short[] DFA17_accept = DFA.unpackEncodedString(DFA17_acceptS);
    static final short[] DFA17_special = DFA.unpackEncodedString(DFA17_specialS);
    static final short[][] DFA17_transition;

    static {
        int numStates = DFA17_transitionS.length;
        DFA17_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA17_transition[i] = DFA.unpackEncodedString(DFA17_transitionS[i]);
        }
    }

    class DFA17 extends DFA {

        public DFA17(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = DFA17_eot;
            this.eof = DFA17_eof;
            this.min = DFA17_min;
            this.max = DFA17_max;
            this.accept = DFA17_accept;
            this.special = DFA17_special;
            this.transition = DFA17_transition;
        }
        public String getDescription() {
            return "()+ loopback of 358:2: ( importItem ( ws )? SEMI ( ws )? )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA17_28 = input.LA(1);

                         
                        int index17_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))),""))) ) {s = 38;}

                        else if ( ((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 1;}

                         
                        input.seek(index17_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 17, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA32_eotS =
        "\10\uffff";
    static final String DFA32_eofS =
        "\10\uffff";
    static final String DFA32_minS =
        "\1\12\2\7\1\0\1\uffff\1\0\2\uffff";
    static final String DFA32_maxS =
        "\1\12\2\127\1\0\1\uffff\1\0\2\uffff";
    static final String DFA32_acceptS =
        "\4\uffff\1\3\1\uffff\1\1\1\2";
    static final String DFA32_specialS =
        "\3\uffff\1\0\1\uffff\1\1\2\uffff}>";
    static final String[] DFA32_transitionS = {
            "\1\1",
            "\2\3\3\uffff\1\4\110\uffff\3\2",
            "\2\5\3\uffff\1\4\110\uffff\3\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_eotS);
    static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_eofS);
    static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_minS);
    static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_maxS);
    static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_acceptS);
    static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_specialS);
    static final short[][] DFA32_transition;

    static {
        int numStates = DFA32_transitionS.length;
        DFA32_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA32_transition[i] = DFA.unpackEncodedString(DFA32_transitionS[i]);
        }
    }

    class DFA32 extends DFA {

        public DFA32(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 32;
            this.eot = DFA32_eot;
            this.eof = DFA32_eof;
            this.min = DFA32_min;
            this.max = DFA32_max;
            this.accept = DFA32_accept;
            this.special = DFA32_special;
            this.transition = DFA32_transition;
        }
        public String getDescription() {
            return "361:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? ( LPAREN LESS_IMPORT_TYPE RPAREN ( ws )? )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA32_3 = input.LA(1);

                         
                        int index32_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")),""))) ) {s = 6;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 7;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 4;}

                         
                        input.seek(index32_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA32_5 = input.LA(1);

                         
                        int index32_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")),""))) ) {s = 6;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 7;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 4;}

                         
                        input.seek(index32_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 32, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA20_eotS =
        "\55\uffff";
    static final String DFA20_eofS =
        "\1\11\54\uffff";
    static final String DFA20_minS =
        "\1\4\1\0\1\uffff\3\0\1\uffff\2\0\3\uffff\2\0\2\uffff\10\0\13\uffff"+
        "\6\0\1\uffff\3\0";
    static final String DFA20_maxS =
        "\1\157\1\0\1\uffff\3\0\1\uffff\2\0\3\uffff\2\0\2\uffff\10\0\13\uffff"+
        "\6\0\1\uffff\3\0";
    static final String DFA20_acceptS =
        "\2\uffff\1\1\3\uffff\1\1\2\uffff\1\2\43\uffff";
    static final String DFA20_specialS =
        "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\uffff\1\5\1\6\3\uffff\1\7\1\10\2"+
        "\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\13\uffff\1\21\1\22"+
        "\1\23\1\24\1\25\1\26\1\uffff\1\27\1\30\1\31}>";
    static final String[] DFA20_transitionS = {
            "\1\54\1\11\1\3\2\uffff\1\54\1\26\1\11\1\6\2\uffff\1\47\1\uffff"+
            "\1\11\2\uffff\2\2\1\4\1\11\1\46\1\44\3\uffff\1\45\1\uffff\1"+
            "\27\1\50\1\43\20\54\1\uffff\4\11\1\5\7\11\1\uffff\1\11\6\uffff"+
            "\1\11\1\10\14\uffff\3\1\1\uffff\1\25\1\7\1\14\1\15\2\20\1\21"+
            "\1\54\1\22\1\52\1\53\1\23\1\24\11\uffff\1\11",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "363:43: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA20_0 = input.LA(1);

                         
                        int index20_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA20_0>=WS && LA20_0<=COMMENT)) ) {s = 1;}

                        else if ( ((LA20_0>=ONLY && LA20_0<=NOT)) && (synpred1_Css3())) {s = 2;}

                        else if ( (LA20_0==IDENT) ) {s = 3;}

                        else if ( (LA20_0==GEN) ) {s = 4;}

                        else if ( (LA20_0==HASH_SYMBOL) ) {s = 5;}

                        else if ( (LA20_0==LPAREN) && (synpred1_Css3())) {s = 6;}

                        else if ( (LA20_0==SASS_MIXIN) ) {s = 7;}

                        else if ( (LA20_0==SASS_VAR) ) {s = 8;}

                        else if ( (LA20_0==EOF||LA20_0==SEMI||LA20_0==COMMA||LA20_0==RBRACE||LA20_0==COLON||(LA20_0>=MINUS && LA20_0<=TILDE)||(LA20_0>=HASH && LA20_0<=PIPE)||LA20_0==LESS_AND||LA20_0==RBRACKET||LA20_0==AT_SIGN) ) {s = 9;}

                        else if ( (LA20_0==SASS_INCLUDE) ) {s = 12;}

                        else if ( (LA20_0==SASS_EXTEND) ) {s = 13;}

                        else if ( ((LA20_0>=SASS_DEBUG && LA20_0<=SASS_WARN)) ) {s = 16;}

                        else if ( (LA20_0==SASS_IF) ) {s = 17;}

                        else if ( (LA20_0==SASS_FOR) ) {s = 18;}

                        else if ( (LA20_0==SASS_EACH) ) {s = 19;}

                        else if ( (LA20_0==SASS_WHILE) ) {s = 20;}

                        else if ( (LA20_0==SASS_CONTENT) ) {s = 21;}

                        else if ( (LA20_0==IMPORT_SYM) ) {s = 22;}

                        else if ( (LA20_0==PAGE_SYM) ) {s = 23;}

                        else if ( (LA20_0==FONT_FACE_SYM) ) {s = 35;}

                        else if ( (LA20_0==MOZ_DOCUMENT_SYM) ) {s = 36;}

                        else if ( (LA20_0==WEBKIT_KEYFRAMES_SYM) ) {s = 37;}

                        else if ( (LA20_0==AT_IDENT) ) {s = 38;}

                        else if ( (LA20_0==MEDIA_SYM) ) {s = 39;}

                        else if ( (LA20_0==COUNTER_STYLE_SYM) ) {s = 40;}

                        else if ( (LA20_0==SASS_FUNCTION) ) {s = 42;}

                        else if ( (LA20_0==SASS_RETURN) ) {s = 43;}

                        else if ( (LA20_0==NAMESPACE_SYM||LA20_0==CHARSET_SYM||(LA20_0>=TOPLEFTCORNER_SYM && LA20_0<=RIGHTBOTTOM_SYM)||LA20_0==SASS_ELSE) ) {s = 44;}

                         
                        input.seek(index20_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA20_1 = input.LA(1);

                         
                        int index20_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA20_3 = input.LA(1);

                         
                        int index20_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA20_4 = input.LA(1);

                         
                        int index20_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA20_5 = input.LA(1);

                         
                        int index20_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred1_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA20_7 = input.LA(1);

                         
                        int index20_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA20_8 = input.LA(1);

                         
                        int index20_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 9;}

                         
                        input.seek(index20_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA20_12 = input.LA(1);

                         
                        int index20_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_12);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA20_13 = input.LA(1);

                         
                        int index20_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_13);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA20_16 = input.LA(1);

                         
                        int index20_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_16);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA20_17 = input.LA(1);

                         
                        int index20_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_17);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA20_18 = input.LA(1);

                         
                        int index20_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_18);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA20_19 = input.LA(1);

                         
                        int index20_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_19);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA20_20 = input.LA(1);

                         
                        int index20_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_20);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA20_21 = input.LA(1);

                         
                        int index20_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_21);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA20_22 = input.LA(1);

                         
                        int index20_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_22);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA20_23 = input.LA(1);

                         
                        int index20_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_23);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA20_35 = input.LA(1);

                         
                        int index20_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_35);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA20_36 = input.LA(1);

                         
                        int index20_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_36);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA20_37 = input.LA(1);

                         
                        int index20_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_37);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA20_38 = input.LA(1);

                         
                        int index20_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_38);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA20_39 = input.LA(1);

                         
                        int index20_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_39);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA20_40 = input.LA(1);

                         
                        int index20_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_40);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA20_42 = input.LA(1);

                         
                        int index20_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_42);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA20_43 = input.LA(1);

                         
                        int index20_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_43);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA20_44 = input.LA(1);

                         
                        int index20_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index20_44);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA24_eotS =
        "\6\uffff";
    static final String DFA24_eofS =
        "\2\2\4\uffff";
    static final String DFA24_minS =
        "\2\4\1\uffff\2\6\1\uffff";
    static final String DFA24_maxS =
        "\2\157\1\uffff\2\127\1\uffff";
    static final String DFA24_acceptS =
        "\2\uffff\1\2\2\uffff\1\1";
    static final String DFA24_specialS =
        "\6\uffff}>";
    static final String[] DFA24_transitionS = {
            "\3\2\2\uffff\2\2\1\3\1\2\2\uffff\1\2\1\uffff\1\2\2\uffff\6\2"+
            "\3\uffff\1\2\1\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2"+
            "\2\14\uffff\3\1\1\uffff\15\2\11\uffff\1\2",
            "\3\2\2\uffff\2\2\1\3\1\2\2\uffff\1\2\1\uffff\1\2\2\uffff\6"+
            "\2\3\uffff\1\2\1\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff"+
            "\2\2\14\uffff\3\1\1\uffff\15\2\11\uffff\1\2",
            "",
            "\1\2\2\5\2\uffff\1\2\4\uffff\1\2\6\uffff\1\2\33\uffff\1\2\1"+
            "\uffff\1\2\1\uffff\4\2\2\uffff\1\2\2\uffff\1\2\6\uffff\1\2\15"+
            "\uffff\3\4",
            "\1\2\2\5\2\uffff\1\2\4\uffff\1\2\6\uffff\1\2\33\uffff\1\2\1"+
            "\uffff\1\2\1\uffff\4\2\2\uffff\1\2\2\uffff\1\2\6\uffff\1\2\15"+
            "\uffff\3\4",
            ""
    };

    static final short[] DFA24_eot = DFA.unpackEncodedString(DFA24_eotS);
    static final short[] DFA24_eof = DFA.unpackEncodedString(DFA24_eofS);
    static final char[] DFA24_min = DFA.unpackEncodedStringToUnsignedChars(DFA24_minS);
    static final char[] DFA24_max = DFA.unpackEncodedStringToUnsignedChars(DFA24_maxS);
    static final short[] DFA24_accept = DFA.unpackEncodedString(DFA24_acceptS);
    static final short[] DFA24_special = DFA.unpackEncodedString(DFA24_specialS);
    static final short[][] DFA24_transition;

    static {
        int numStates = DFA24_transitionS.length;
        DFA24_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA24_transition[i] = DFA.unpackEncodedString(DFA24_transitionS[i]);
        }
    }

    class DFA24 extends DFA {

        public DFA24(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 24;
            this.eot = DFA24_eot;
            this.eof = DFA24_eof;
            this.min = DFA24_min;
            this.max = DFA24_max;
            this.accept = DFA24_accept;
            this.special = DFA24_special;
            this.transition = DFA24_transition;
        }
        public String getDescription() {
            return "()* loopback of 366:61: ( ( ws )? COMMA ( ws )? resourceIdentifier )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA26_eotS =
        "\55\uffff";
    static final String DFA26_eofS =
        "\1\11\54\uffff";
    static final String DFA26_minS =
        "\1\4\1\0\1\uffff\3\0\1\uffff\2\0\3\uffff\2\0\2\uffff\10\0\13\uffff"+
        "\6\0\1\uffff\3\0";
    static final String DFA26_maxS =
        "\1\157\1\0\1\uffff\3\0\1\uffff\2\0\3\uffff\2\0\2\uffff\10\0\13\uffff"+
        "\6\0\1\uffff\3\0";
    static final String DFA26_acceptS =
        "\2\uffff\1\1\3\uffff\1\1\2\uffff\1\2\43\uffff";
    static final String DFA26_specialS =
        "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\uffff\1\5\1\6\3\uffff\1\7\1\10\2"+
        "\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\13\uffff\1\21\1\22"+
        "\1\23\1\24\1\25\1\26\1\uffff\1\27\1\30\1\31}>";
    static final String[] DFA26_transitionS = {
            "\1\54\1\11\1\3\2\uffff\1\54\1\26\1\11\1\6\2\uffff\1\47\1\uffff"+
            "\1\11\2\uffff\2\2\1\4\1\11\1\46\1\44\3\uffff\1\45\1\uffff\1"+
            "\27\1\50\1\43\20\54\1\uffff\4\11\1\5\7\11\1\uffff\1\11\6\uffff"+
            "\1\11\1\10\14\uffff\3\1\1\uffff\1\25\1\7\1\14\1\15\2\20\1\21"+
            "\1\54\1\22\1\52\1\53\1\23\1\24\11\uffff\1\11",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "366:97: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_0 = input.LA(1);

                         
                        int index26_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA26_0>=WS && LA26_0<=COMMENT)) ) {s = 1;}

                        else if ( ((LA26_0>=ONLY && LA26_0<=NOT)) && (synpred2_Css3())) {s = 2;}

                        else if ( (LA26_0==IDENT) ) {s = 3;}

                        else if ( (LA26_0==GEN) ) {s = 4;}

                        else if ( (LA26_0==HASH_SYMBOL) ) {s = 5;}

                        else if ( (LA26_0==LPAREN) && (synpred2_Css3())) {s = 6;}

                        else if ( (LA26_0==SASS_MIXIN) ) {s = 7;}

                        else if ( (LA26_0==SASS_VAR) ) {s = 8;}

                        else if ( (LA26_0==EOF||LA26_0==SEMI||LA26_0==COMMA||LA26_0==RBRACE||LA26_0==COLON||(LA26_0>=MINUS && LA26_0<=TILDE)||(LA26_0>=HASH && LA26_0<=PIPE)||LA26_0==LESS_AND||LA26_0==RBRACKET||LA26_0==AT_SIGN) ) {s = 9;}

                        else if ( (LA26_0==SASS_INCLUDE) ) {s = 12;}

                        else if ( (LA26_0==SASS_EXTEND) ) {s = 13;}

                        else if ( ((LA26_0>=SASS_DEBUG && LA26_0<=SASS_WARN)) ) {s = 16;}

                        else if ( (LA26_0==SASS_IF) ) {s = 17;}

                        else if ( (LA26_0==SASS_FOR) ) {s = 18;}

                        else if ( (LA26_0==SASS_EACH) ) {s = 19;}

                        else if ( (LA26_0==SASS_WHILE) ) {s = 20;}

                        else if ( (LA26_0==SASS_CONTENT) ) {s = 21;}

                        else if ( (LA26_0==IMPORT_SYM) ) {s = 22;}

                        else if ( (LA26_0==PAGE_SYM) ) {s = 23;}

                        else if ( (LA26_0==FONT_FACE_SYM) ) {s = 35;}

                        else if ( (LA26_0==MOZ_DOCUMENT_SYM) ) {s = 36;}

                        else if ( (LA26_0==WEBKIT_KEYFRAMES_SYM) ) {s = 37;}

                        else if ( (LA26_0==AT_IDENT) ) {s = 38;}

                        else if ( (LA26_0==MEDIA_SYM) ) {s = 39;}

                        else if ( (LA26_0==COUNTER_STYLE_SYM) ) {s = 40;}

                        else if ( (LA26_0==SASS_FUNCTION) ) {s = 42;}

                        else if ( (LA26_0==SASS_RETURN) ) {s = 43;}

                        else if ( (LA26_0==NAMESPACE_SYM||LA26_0==CHARSET_SYM||(LA26_0>=TOPLEFTCORNER_SYM && LA26_0<=RIGHTBOTTOM_SYM)||LA26_0==SASS_ELSE) ) {s = 44;}

                         
                        input.seek(index26_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA26_1 = input.LA(1);

                         
                        int index26_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA26_3 = input.LA(1);

                         
                        int index26_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA26_4 = input.LA(1);

                         
                        int index26_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA26_5 = input.LA(1);

                         
                        int index26_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA26_7 = input.LA(1);

                         
                        int index26_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA26_8 = input.LA(1);

                         
                        int index26_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 9;}

                         
                        input.seek(index26_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA26_12 = input.LA(1);

                         
                        int index26_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_12);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA26_13 = input.LA(1);

                         
                        int index26_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_13);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA26_16 = input.LA(1);

                         
                        int index26_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_16);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA26_17 = input.LA(1);

                         
                        int index26_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_17);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA26_18 = input.LA(1);

                         
                        int index26_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_18);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA26_19 = input.LA(1);

                         
                        int index26_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_19);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA26_20 = input.LA(1);

                         
                        int index26_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_20);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA26_21 = input.LA(1);

                         
                        int index26_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_21);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA26_22 = input.LA(1);

                         
                        int index26_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_22);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA26_23 = input.LA(1);

                         
                        int index26_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_23);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA26_35 = input.LA(1);

                         
                        int index26_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_35);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA26_36 = input.LA(1);

                         
                        int index26_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_36);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA26_37 = input.LA(1);

                         
                        int index26_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_37);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA26_38 = input.LA(1);

                         
                        int index26_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_38);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA26_39 = input.LA(1);

                         
                        int index26_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_39);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA26_40 = input.LA(1);

                         
                        int index26_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_40);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA26_42 = input.LA(1);

                         
                        int index26_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_42);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA26_43 = input.LA(1);

                         
                        int index26_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_43);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA26_44 = input.LA(1);

                         
                        int index26_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_44);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA31_eotS =
        "\55\uffff";
    static final String DFA31_eofS =
        "\1\11\54\uffff";
    static final String DFA31_minS =
        "\1\4\1\0\1\uffff\3\0\1\uffff\2\0\3\uffff\2\0\2\uffff\10\0\13\uffff"+
        "\6\0\1\uffff\3\0";
    static final String DFA31_maxS =
        "\1\157\1\0\1\uffff\3\0\1\uffff\2\0\3\uffff\2\0\2\uffff\10\0\13\uffff"+
        "\6\0\1\uffff\3\0";
    static final String DFA31_acceptS =
        "\2\uffff\1\1\3\uffff\1\1\2\uffff\1\2\43\uffff";
    static final String DFA31_specialS =
        "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\uffff\1\5\1\6\3\uffff\1\7\1\10\2"+
        "\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\13\uffff\1\21\1\22"+
        "\1\23\1\24\1\25\1\26\1\uffff\1\27\1\30\1\31}>";
    static final String[] DFA31_transitionS = {
            "\1\54\1\11\1\3\2\uffff\1\54\1\26\1\11\1\6\2\uffff\1\47\1\uffff"+
            "\1\11\2\uffff\2\2\1\4\1\11\1\46\1\44\3\uffff\1\45\1\uffff\1"+
            "\27\1\50\1\43\20\54\1\uffff\4\11\1\5\7\11\1\uffff\1\11\6\uffff"+
            "\1\11\1\10\14\uffff\3\1\1\uffff\1\25\1\7\1\14\1\15\2\20\1\21"+
            "\1\54\1\22\1\52\1\53\1\23\1\24\11\uffff\1\11",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA31_eot = DFA.unpackEncodedString(DFA31_eotS);
    static final short[] DFA31_eof = DFA.unpackEncodedString(DFA31_eofS);
    static final char[] DFA31_min = DFA.unpackEncodedStringToUnsignedChars(DFA31_minS);
    static final char[] DFA31_max = DFA.unpackEncodedStringToUnsignedChars(DFA31_maxS);
    static final short[] DFA31_accept = DFA.unpackEncodedString(DFA31_acceptS);
    static final short[] DFA31_special = DFA.unpackEncodedString(DFA31_specialS);
    static final short[][] DFA31_transition;

    static {
        int numStates = DFA31_transitionS.length;
        DFA31_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA31_transition[i] = DFA.unpackEncodedString(DFA31_transitionS[i]);
        }
    }

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = DFA31_eot;
            this.eof = DFA31_eof;
            this.min = DFA31_min;
            this.max = DFA31_max;
            this.accept = DFA31_accept;
            this.special = DFA31_special;
            this.transition = DFA31_transition;
        }
        public String getDescription() {
            return "368:99: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA31_0 = input.LA(1);

                         
                        int index31_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA31_0>=WS && LA31_0<=COMMENT)) ) {s = 1;}

                        else if ( ((LA31_0>=ONLY && LA31_0<=NOT)) && (synpred3_Css3())) {s = 2;}

                        else if ( (LA31_0==IDENT) ) {s = 3;}

                        else if ( (LA31_0==GEN) ) {s = 4;}

                        else if ( (LA31_0==HASH_SYMBOL) ) {s = 5;}

                        else if ( (LA31_0==LPAREN) && (synpred3_Css3())) {s = 6;}

                        else if ( (LA31_0==SASS_MIXIN) ) {s = 7;}

                        else if ( (LA31_0==SASS_VAR) ) {s = 8;}

                        else if ( (LA31_0==EOF||LA31_0==SEMI||LA31_0==COMMA||LA31_0==RBRACE||LA31_0==COLON||(LA31_0>=MINUS && LA31_0<=TILDE)||(LA31_0>=HASH && LA31_0<=PIPE)||LA31_0==LESS_AND||LA31_0==RBRACKET||LA31_0==AT_SIGN) ) {s = 9;}

                        else if ( (LA31_0==SASS_INCLUDE) ) {s = 12;}

                        else if ( (LA31_0==SASS_EXTEND) ) {s = 13;}

                        else if ( ((LA31_0>=SASS_DEBUG && LA31_0<=SASS_WARN)) ) {s = 16;}

                        else if ( (LA31_0==SASS_IF) ) {s = 17;}

                        else if ( (LA31_0==SASS_FOR) ) {s = 18;}

                        else if ( (LA31_0==SASS_EACH) ) {s = 19;}

                        else if ( (LA31_0==SASS_WHILE) ) {s = 20;}

                        else if ( (LA31_0==SASS_CONTENT) ) {s = 21;}

                        else if ( (LA31_0==IMPORT_SYM) ) {s = 22;}

                        else if ( (LA31_0==PAGE_SYM) ) {s = 23;}

                        else if ( (LA31_0==FONT_FACE_SYM) ) {s = 35;}

                        else if ( (LA31_0==MOZ_DOCUMENT_SYM) ) {s = 36;}

                        else if ( (LA31_0==WEBKIT_KEYFRAMES_SYM) ) {s = 37;}

                        else if ( (LA31_0==AT_IDENT) ) {s = 38;}

                        else if ( (LA31_0==MEDIA_SYM) ) {s = 39;}

                        else if ( (LA31_0==COUNTER_STYLE_SYM) ) {s = 40;}

                        else if ( (LA31_0==SASS_FUNCTION) ) {s = 42;}

                        else if ( (LA31_0==SASS_RETURN) ) {s = 43;}

                        else if ( (LA31_0==NAMESPACE_SYM||LA31_0==CHARSET_SYM||(LA31_0>=TOPLEFTCORNER_SYM && LA31_0<=RIGHTBOTTOM_SYM)||LA31_0==SASS_ELSE) ) {s = 44;}

                         
                        input.seek(index31_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA31_1 = input.LA(1);

                         
                        int index31_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index31_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA31_3 = input.LA(1);

                         
                        int index31_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index31_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA31_4 = input.LA(1);

                         
                        int index31_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index31_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA31_5 = input.LA(1);

                         
                        int index31_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred3_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index31_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA31_7 = input.LA(1);

                         
                        int index31_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index31_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA31_8 = input.LA(1);

                         
                        int index31_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 9;}

                         
                        input.seek(index31_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA31_12 = input.LA(1);

                         
                        int index31_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index31_12);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA31_13 = input.LA(1);

                         
                        int index31_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index31_13);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA31_16 = input.LA(1);

                         
                        int index31_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index31_16);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA31_17 = input.LA(1);

                         
                        int index31_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index31_17);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA31_18 = input.LA(1);

                         
                        int index31_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index31_18);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA31_19 = input.LA(1);

                         
                        int index31_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index31_19);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA31_20 = input.LA(1);

                         
                        int index31_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index31_20);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA31_21 = input.LA(1);

                         
                        int index31_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index31_21);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA31_22 = input.LA(1);

                         
                        int index31_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index31_22);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA31_23 = input.LA(1);

                         
                        int index31_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index31_23);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA31_35 = input.LA(1);

                         
                        int index31_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index31_35);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA31_36 = input.LA(1);

                         
                        int index31_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index31_36);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA31_37 = input.LA(1);

                         
                        int index31_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index31_37);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA31_38 = input.LA(1);

                         
                        int index31_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index31_38);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA31_39 = input.LA(1);

                         
                        int index31_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index31_39);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA31_40 = input.LA(1);

                         
                        int index31_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index31_40);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA31_42 = input.LA(1);

                         
                        int index31_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index31_42);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA31_43 = input.LA(1);

                         
                        int index31_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index31_43);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA31_44 = input.LA(1);

                         
                        int index31_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index31_44);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 31, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA38_eotS =
        "\5\uffff";
    static final String DFA38_eofS =
        "\5\uffff";
    static final String DFA38_minS =
        "\2\4\1\0\2\uffff";
    static final String DFA38_maxS =
        "\2\157\1\0\2\uffff";
    static final String DFA38_acceptS =
        "\3\uffff\1\2\1\1";
    static final String DFA38_specialS =
        "\2\uffff\1\0\2\uffff}>";
    static final String[] DFA38_transitionS = {
            "\1\3\1\2\1\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4\3"+
            "\3\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2"+
            "\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\3\1\2\1\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4"+
            "\3\3\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff"+
            "\2\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA38_eot = DFA.unpackEncodedString(DFA38_eotS);
    static final short[] DFA38_eof = DFA.unpackEncodedString(DFA38_eofS);
    static final char[] DFA38_min = DFA.unpackEncodedStringToUnsignedChars(DFA38_minS);
    static final char[] DFA38_max = DFA.unpackEncodedStringToUnsignedChars(DFA38_maxS);
    static final short[] DFA38_accept = DFA.unpackEncodedString(DFA38_acceptS);
    static final short[] DFA38_special = DFA.unpackEncodedString(DFA38_specialS);
    static final short[][] DFA38_transition;

    static {
        int numStates = DFA38_transitionS.length;
        DFA38_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA38_transition[i] = DFA.unpackEncodedString(DFA38_transitionS[i]);
        }
    }

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = DFA38_eot;
            this.eof = DFA38_eof;
            this.min = DFA38_min;
            this.max = DFA38_max;
            this.accept = DFA38_accept;
            this.special = DFA38_special;
            this.transition = DFA38_transition;
        }
        public String getDescription() {
            return "383:26: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA38_2 = input.LA(1);

                         
                        int index38_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Css3()) ) {s = 4;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index38_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 38, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA46_eotS =
        "\62\uffff";
    static final String DFA46_eofS =
        "\62\uffff";
    static final String DFA46_minS =
        "\1\4\22\0\7\uffff\1\0\3\uffff\6\0\16\uffff";
    static final String DFA46_maxS =
        "\1\157\22\0\7\uffff\1\0\3\uffff\6\0\16\uffff";
    static final String DFA46_acceptS =
        "\23\uffff\1\13\20\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1"+
        "\12\1\14\1\15\1\16\1\17";
    static final String DFA46_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\7\uffff\1\22\3\uffff\1\23\1\24\1\25\1"+
        "\26\1\27\1\30\16\uffff}>";
    static final String[] DFA46_transitionS = {
            "\1\43\1\uffff\1\6\2\uffff\1\43\1\21\1\23\3\uffff\1\42\6\uffff"+
            "\1\10\1\23\1\41\1\37\3\uffff\1\40\1\uffff\1\22\1\43\1\36\20"+
            "\43\1\uffff\1\32\3\23\1\5\1\7\1\1\3\23\1\4\1\23\1\uffff\1\23"+
            "\6\uffff\1\23\1\12\20\uffff\1\20\1\2\1\3\1\11\2\13\1\14\1\43"+
            "\1\15\2\43\1\16\1\17\11\uffff\1\23",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "389:1: mediaBodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | {...}? sass_extend | {...}? sass_debug | {...}? sass_control | {...}? sass_content | {...}? importItem | rule | page | fontFace | vendorAtRule | media );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA46_1 = input.LA(1);

                         
                        int index46_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 36;}

                        else if ( (((synpred6_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 37;}

                        else if ( (((synpred7_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 38;}

                        else if ( ((synpred8_Css3()||(synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 39;}

                        else if ( ((synpred9_Css3()||(synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 40;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index46_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA46_2 = input.LA(1);

                         
                        int index46_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 36;}

                        else if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                         
                        input.seek(index46_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA46_3 = input.LA(1);

                         
                        int index46_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred6_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 37;}

                        else if ( (((synpred7_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 38;}

                        else if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                         
                        input.seek(index46_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA46_4 = input.LA(1);

                         
                        int index46_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred8_Css3()||(synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 39;}

                        else if ( ((synpred9_Css3()||(synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 40;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index46_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA46_5 = input.LA(1);

                         
                        int index46_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred8_Css3()||(synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 39;}

                        else if ( ((synpred9_Css3()||(synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 40;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index46_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA46_6 = input.LA(1);

                         
                        int index46_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred8_Css3()||(synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 39;}

                        else if ( ((synpred9_Css3()||(synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 40;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index46_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA46_7 = input.LA(1);

                         
                        int index46_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred8_Css3()||(synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 39;}

                        else if ( ((synpred9_Css3()||(synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 40;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index46_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA46_8 = input.LA(1);

                         
                        int index46_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred8_Css3()||(synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 39;}

                        else if ( ((synpred9_Css3()||(synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 40;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index46_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA46_9 = input.LA(1);

                         
                        int index46_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 41;}

                         
                        input.seek(index46_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA46_10 = input.LA(1);

                         
                        int index46_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||(((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 39;}

                        else if ( (((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 40;}

                         
                        input.seek(index46_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA46_11 = input.LA(1);

                         
                        int index46_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 42;}

                         
                        input.seek(index46_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA46_12 = input.LA(1);

                         
                        int index46_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 43;}

                         
                        input.seek(index46_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA46_13 = input.LA(1);

                         
                        int index46_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 43;}

                         
                        input.seek(index46_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA46_14 = input.LA(1);

                         
                        int index46_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 43;}

                         
                        input.seek(index46_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA46_15 = input.LA(1);

                         
                        int index46_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 43;}

                         
                        input.seek(index46_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA46_16 = input.LA(1);

                         
                        int index46_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 44;}

                         
                        input.seek(index46_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA46_17 = input.LA(1);

                         
                        int index46_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 45;}

                         
                        input.seek(index46_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA46_18 = input.LA(1);

                         
                        int index46_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (true) ) {s = 46;}

                         
                        input.seek(index46_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA46_26 = input.LA(1);

                         
                        int index46_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred8_Css3()||(synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 39;}

                        else if ( ((synpred9_Css3()||(synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 40;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index46_26);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA46_30 = input.LA(1);

                         
                        int index46_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (true) ) {s = 47;}

                         
                        input.seek(index46_30);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA46_31 = input.LA(1);

                         
                        int index46_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index46_31);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA46_32 = input.LA(1);

                         
                        int index46_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index46_32);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA46_33 = input.LA(1);

                         
                        int index46_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index46_33);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA46_34 = input.LA(1);

                         
                        int index46_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (true) ) {s = 49;}

                         
                        input.seek(index46_34);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA46_35 = input.LA(1);

                         
                        int index46_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (((((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred9_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                         
                        input.seek(index46_35);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 46, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA43_eotS =
        "\4\uffff";
    static final String DFA43_eofS =
        "\4\uffff";
    static final String DFA43_minS =
        "\2\4\2\uffff";
    static final String DFA43_maxS =
        "\2\157\2\uffff";
    static final String DFA43_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA43_specialS =
        "\4\uffff}>";
    static final String[] DFA43_transitionS = {
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\1\2\3\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\1\2\3\uffff\4\3\3"+
            "\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3"+
            "\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA43_eot = DFA.unpackEncodedString(DFA43_eotS);
    static final short[] DFA43_eof = DFA.unpackEncodedString(DFA43_eofS);
    static final char[] DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_minS);
    static final char[] DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_maxS);
    static final short[] DFA43_accept = DFA.unpackEncodedString(DFA43_acceptS);
    static final short[] DFA43_special = DFA.unpackEncodedString(DFA43_specialS);
    static final short[][] DFA43_transition;

    static {
        int numStates = DFA43_transitionS.length;
        DFA43_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA43_transition[i] = DFA.unpackEncodedString(DFA43_transitionS[i]);
        }
    }

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = DFA43_eot;
            this.eof = DFA43_eof;
            this.min = DFA43_min;
            this.max = DFA43_max;
            this.accept = DFA43_accept;
            this.special = DFA43_special;
            this.transition = DFA43_transition;
        }
        public String getDescription() {
            return "393:87: ( ( ws )? IMPORTANT_SYM )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA45_eotS =
        "\4\uffff";
    static final String DFA45_eofS =
        "\4\uffff";
    static final String DFA45_minS =
        "\2\4\2\uffff";
    static final String DFA45_maxS =
        "\2\157\2\uffff";
    static final String DFA45_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA45_specialS =
        "\4\uffff}>";
    static final String[] DFA45_transitionS = {
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\1\2\3\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\1\2\3\uffff\4\3\3"+
            "\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3"+
            "\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "394:57: ( ( ws )? IMPORTANT_SYM )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA49_eotS =
        "\56\uffff";
    static final String DFA49_eofS =
        "\1\2\55\uffff";
    static final String DFA49_minS =
        "\1\4\1\0\35\uffff\1\0\16\uffff";
    static final String DFA49_maxS =
        "\1\157\1\0\35\uffff\1\0\16\uffff";
    static final String DFA49_acceptS =
        "\2\uffff\1\2\52\uffff\1\1";
    static final String DFA49_specialS =
        "\1\uffff\1\0\35\uffff\1\1\16\uffff}>";
    static final String[] DFA49_transitionS = {
            "\3\2\2\uffff\2\2\1\37\3\uffff\3\2\4\uffff\4\2\3\uffff\1\2\1"+
            "\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\14\uffff\3"+
            "\1\1\uffff\15\2\11\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "()* loopback of 411:15: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA49_1 = input.LA(1);

                         
                        int index49_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA49_31 = input.LA(1);

                         
                        int index49_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA54_eotS =
        "\4\uffff";
    static final String DFA54_eofS =
        "\2\2\2\uffff";
    static final String DFA54_minS =
        "\2\4\2\uffff";
    static final String DFA54_maxS =
        "\2\157\2\uffff";
    static final String DFA54_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA54_specialS =
        "\4\uffff}>";
    static final String[] DFA54_transitionS = {
            "\3\2\2\uffff\3\2\3\uffff\3\2\1\uffff\1\3\2\uffff\4\2\3\uffff"+
            "\1\2\1\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\14\uffff"+
            "\3\1\1\uffff\15\2\11\uffff\1\2",
            "\3\2\2\uffff\3\2\3\uffff\3\2\1\uffff\1\3\2\uffff\4\2\3\uffff"+
            "\1\2\1\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\14\uffff"+
            "\3\1\1\uffff\15\2\11\uffff\1\2",
            "",
            ""
    };

    static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_eotS);
    static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_eofS);
    static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_minS);
    static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_maxS);
    static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_acceptS);
    static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_specialS);
    static final short[][] DFA54_transition;

    static {
        int numStates = DFA54_transitionS.length;
        DFA54_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA54_transition[i] = DFA.unpackEncodedString(DFA54_transitionS[i]);
        }
    }

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;
        }
        public String getDescription() {
            return "()* loopback of 416:43: ( ( ws )? AND ( ws )? mediaExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA57_eotS =
        "\4\uffff";
    static final String DFA57_eofS =
        "\2\2\2\uffff";
    static final String DFA57_minS =
        "\2\4\2\uffff";
    static final String DFA57_maxS =
        "\2\157\2\uffff";
    static final String DFA57_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA57_specialS =
        "\4\uffff}>";
    static final String[] DFA57_transitionS = {
            "\3\2\2\uffff\3\2\3\uffff\3\2\1\uffff\1\3\2\uffff\4\2\3\uffff"+
            "\1\2\1\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\14\uffff"+
            "\3\1\1\uffff\15\2\11\uffff\1\2",
            "\3\2\2\uffff\3\2\3\uffff\3\2\1\uffff\1\3\2\uffff\4\2\3\uffff"+
            "\1\2\1\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\14\uffff"+
            "\3\1\1\uffff\15\2\11\uffff\1\2",
            "",
            ""
    };

    static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_eotS);
    static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_eofS);
    static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_minS);
    static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_maxS);
    static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_acceptS);
    static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_specialS);
    static final short[][] DFA57_transition;

    static {
        int numStates = DFA57_transitionS.length;
        DFA57_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA57_transition[i] = DFA.unpackEncodedString(DFA57_transitionS[i]);
        }
    }

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = DFA57_eot;
            this.eof = DFA57_eof;
            this.min = DFA57_min;
            this.max = DFA57_max;
            this.accept = DFA57_accept;
            this.special = DFA57_special;
            this.transition = DFA57_transition;
        }
        public String getDescription() {
            return "()* loopback of 417:23: ( ( ws )? AND ( ws )? mediaExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA61_eotS =
        "\4\uffff";
    static final String DFA61_eofS =
        "\4\uffff";
    static final String DFA61_minS =
        "\2\16\2\uffff";
    static final String DFA61_maxS =
        "\2\127\2\uffff";
    static final String DFA61_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA61_specialS =
        "\4\uffff}>";
    static final String[] DFA61_transitionS = {
            "\1\3\10\uffff\1\2\75\uffff\3\1",
            "\1\3\10\uffff\1\2\75\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_eotS);
    static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_eofS);
    static final char[] DFA61_min = DFA.unpackEncodedStringToUnsignedChars(DFA61_minS);
    static final char[] DFA61_max = DFA.unpackEncodedStringToUnsignedChars(DFA61_maxS);
    static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_acceptS);
    static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_specialS);
    static final short[][] DFA61_transition;

    static {
        int numStates = DFA61_transitionS.length;
        DFA61_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA61_transition[i] = DFA.unpackEncodedString(DFA61_transitionS[i]);
        }
    }

    class DFA61 extends DFA {

        public DFA61(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 61;
            this.eot = DFA61_eot;
            this.eof = DFA61_eof;
            this.min = DFA61_min;
            this.max = DFA61_max;
            this.accept = DFA61_accept;
            this.special = DFA61_special;
            this.transition = DFA61_transition;
        }
        public String getDescription() {
            return "431:29: ( mediaFeatureValue )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA65_eotS =
        "\34\uffff";
    static final String DFA65_eofS =
        "\34\uffff";
    static final String DFA65_minS =
        "\1\4\1\uffff\27\0\3\uffff";
    static final String DFA65_maxS =
        "\1\145\1\uffff\27\0\3\uffff";
    static final String DFA65_acceptS =
        "\1\uffff\1\1\31\uffff\1\2";
    static final String DFA65_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\3\uffff}>";
    static final String[] DFA65_transitionS = {
            "\1\25\1\uffff\1\3\1\17\1\23\2\25\1\uffff\1\1\2\uffff\1\25\2"+
            "\uffff\1\1\2\uffff\1\1\1\22\1\uffff\2\25\3\uffff\1\25\1\5\23"+
            "\25\1\uffff\2\2\1\uffff\1\20\1\27\1\24\17\uffff\1\26\1\4\1\6"+
            "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\21\1\30\4\uffff\15"+
            "\25",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA65_eot = DFA.unpackEncodedString(DFA65_eotS);
    static final short[] DFA65_eof = DFA.unpackEncodedString(DFA65_eofS);
    static final char[] DFA65_min = DFA.unpackEncodedStringToUnsignedChars(DFA65_minS);
    static final char[] DFA65_max = DFA.unpackEncodedStringToUnsignedChars(DFA65_maxS);
    static final short[] DFA65_accept = DFA.unpackEncodedString(DFA65_acceptS);
    static final short[] DFA65_special = DFA.unpackEncodedString(DFA65_specialS);
    static final short[][] DFA65_transition;

    static {
        int numStates = DFA65_transitionS.length;
        DFA65_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA65_transition[i] = DFA.unpackEncodedString(DFA65_transitionS[i]);
        }
    }

    class DFA65 extends DFA {

        public DFA65(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 65;
            this.eot = DFA65_eot;
            this.eof = DFA65_eof;
            this.min = DFA65_min;
            this.max = DFA65_max;
            this.accept = DFA65_accept;
            this.special = DFA65_special;
            this.transition = DFA65_transition;
        }
        public String getDescription() {
            return "437:5: ({...}? cp_expression | expression )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA65_2 = input.LA(1);

                         
                        int index65_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA65_3 = input.LA(1);

                         
                        int index65_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA65_4 = input.LA(1);

                         
                        int index65_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA65_5 = input.LA(1);

                         
                        int index65_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA65_6 = input.LA(1);

                         
                        int index65_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA65_7 = input.LA(1);

                         
                        int index65_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA65_8 = input.LA(1);

                         
                        int index65_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA65_9 = input.LA(1);

                         
                        int index65_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA65_10 = input.LA(1);

                         
                        int index65_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA65_11 = input.LA(1);

                         
                        int index65_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA65_12 = input.LA(1);

                         
                        int index65_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA65_13 = input.LA(1);

                         
                        int index65_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA65_14 = input.LA(1);

                         
                        int index65_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA65_15 = input.LA(1);

                         
                        int index65_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA65_16 = input.LA(1);

                         
                        int index65_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA65_17 = input.LA(1);

                         
                        int index65_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA65_18 = input.LA(1);

                         
                        int index65_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA65_19 = input.LA(1);

                         
                        int index65_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA65_20 = input.LA(1);

                         
                        int index65_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index65_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA65_21 = input.LA(1);

                         
                        int index65_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 1;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 27;}

                         
                        input.seek(index65_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA65_22 = input.LA(1);

                         
                        int index65_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 1;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 27;}

                         
                        input.seek(index65_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA65_23 = input.LA(1);

                         
                        int index65_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 27;}

                         
                        input.seek(index65_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA65_24 = input.LA(1);

                         
                        int index65_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 27;}

                         
                        input.seek(index65_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 65, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA69_eotS =
        "\5\uffff";
    static final String DFA69_eofS =
        "\2\3\3\uffff";
    static final String DFA69_minS =
        "\2\4\1\0\2\uffff";
    static final String DFA69_maxS =
        "\2\157\1\0\2\uffff";
    static final String DFA69_acceptS =
        "\3\uffff\1\2\1\1";
    static final String DFA69_specialS =
        "\2\uffff\1\0\2\uffff}>";
    static final String[] DFA69_transitionS = {
            "\1\3\1\2\1\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4\3"+
            "\3\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2"+
            "\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\3\1\2\1\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4"+
            "\3\3\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff"+
            "\2\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA69_eot = DFA.unpackEncodedString(DFA69_eotS);
    static final short[] DFA69_eof = DFA.unpackEncodedString(DFA69_eofS);
    static final char[] DFA69_min = DFA.unpackEncodedStringToUnsignedChars(DFA69_minS);
    static final char[] DFA69_max = DFA.unpackEncodedStringToUnsignedChars(DFA69_maxS);
    static final short[] DFA69_accept = DFA.unpackEncodedString(DFA69_acceptS);
    static final short[] DFA69_special = DFA.unpackEncodedString(DFA69_specialS);
    static final short[][] DFA69_transition;

    static {
        int numStates = DFA69_transitionS.length;
        DFA69_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA69_transition[i] = DFA.unpackEncodedString(DFA69_transitionS[i]);
        }
    }

    class DFA69 extends DFA {

        public DFA69(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 69;
            this.eot = DFA69_eot;
            this.eof = DFA69_eof;
            this.min = DFA69_min;
            this.max = DFA69_max;
            this.accept = DFA69_accept;
            this.special = DFA69_special;
            this.transition = DFA69_transition;
        }
        public String getDescription() {
            return "451:21: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA69_2 = input.LA(1);

                         
                        int index69_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_Css3()) ) {s = 4;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index69_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 69, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA73_eotS =
        "\55\uffff";
    static final String DFA73_eofS =
        "\55\uffff";
    static final String DFA73_minS =
        "\1\4\3\0\17\uffff\20\0\12\uffff";
    static final String DFA73_maxS =
        "\1\157\3\0\17\uffff\20\0\12\uffff";
    static final String DFA73_acceptS =
        "\4\uffff\1\4\36\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13";
    static final String DFA73_specialS =
        "\1\uffff\1\0\1\1\1\2\17\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\12\uffff}>";
    static final String[] DFA73_transitionS = {
            "\1\42\1\uffff\1\4\2\uffff\1\42\1\33\1\4\3\uffff\1\23\6\uffff"+
            "\2\4\1\32\1\30\3\uffff\1\31\1\uffff\1\25\1\26\1\27\20\42\1\uffff"+
            "\6\4\1\1\5\4\1\uffff\1\4\6\uffff\1\4\1\24\20\uffff\1\42\1\2"+
            "\1\3\1\42\2\34\1\35\1\42\1\36\1\41\1\42\1\37\1\40\11\uffff\1"+
            "\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA73_eot = DFA.unpackEncodedString(DFA73_eotS);
    static final short[] DFA73_eof = DFA.unpackEncodedString(DFA73_eofS);
    static final char[] DFA73_min = DFA.unpackEncodedStringToUnsignedChars(DFA73_minS);
    static final char[] DFA73_max = DFA.unpackEncodedStringToUnsignedChars(DFA73_maxS);
    static final short[] DFA73_accept = DFA.unpackEncodedString(DFA73_acceptS);
    static final short[] DFA73_special = DFA.unpackEncodedString(DFA73_specialS);
    static final short[][] DFA73_transition;

    static {
        int numStates = DFA73_transitionS.length;
        DFA73_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA73_transition[i] = DFA.unpackEncodedString(DFA73_transitionS[i]);
        }
    }

    class DFA73 extends DFA {

        public DFA73(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 73;
            this.eot = DFA73_eot;
            this.eof = DFA73_eof;
            this.min = DFA73_min;
            this.max = DFA73_max;
            this.accept = DFA73_accept;
            this.special = DFA73_special;
            this.transition = DFA73_transition;
        }
        public String getDescription() {
            return "457:1: bodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call | ( cp_mixin_call )=>{...}? cp_mixin_call | rule | ( sass_map )=> sass_map | ( cp_variable ( ws )? COLON )=> cp_variable_declaration | at_rule | {...}? importItem | {...}? sass_debug | {...}? sass_control | {...}? sass_function_declaration );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA73_1 = input.LA(1);

                         
                        int index73_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred12_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 35;}

                        else if ( (((synpred13_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 36;}

                        else if ( (((synpred14_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 37;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index73_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA73_2 = input.LA(1);

                         
                        int index73_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred12_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 35;}

                        else if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 38;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                         
                        input.seek(index73_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA73_3 = input.LA(1);

                         
                        int index73_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred13_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 36;}

                        else if ( (((synpred14_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 37;}

                        else if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 38;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                         
                        input.seek(index73_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA73_19 = input.LA(1);

                         
                        int index73_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 38;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (true) ) {s = 40;}

                         
                        input.seek(index73_19);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA73_20 = input.LA(1);

                         
                        int index73_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 38;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 39;}

                         
                        input.seek(index73_20);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA73_21 = input.LA(1);

                         
                        int index73_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 38;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (true) ) {s = 40;}

                         
                        input.seek(index73_21);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA73_22 = input.LA(1);

                         
                        int index73_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 38;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (true) ) {s = 40;}

                         
                        input.seek(index73_22);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA73_23 = input.LA(1);

                         
                        int index73_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 38;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (true) ) {s = 40;}

                         
                        input.seek(index73_23);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA73_24 = input.LA(1);

                         
                        int index73_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 38;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (true) ) {s = 40;}

                         
                        input.seek(index73_24);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA73_25 = input.LA(1);

                         
                        int index73_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 38;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (true) ) {s = 40;}

                         
                        input.seek(index73_25);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA73_26 = input.LA(1);

                         
                        int index73_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 38;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (true) ) {s = 40;}

                         
                        input.seek(index73_26);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA73_27 = input.LA(1);

                         
                        int index73_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 38;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                         
                        input.seek(index73_27);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA73_28 = input.LA(1);

                         
                        int index73_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 38;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 42;}

                         
                        input.seek(index73_28);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA73_29 = input.LA(1);

                         
                        int index73_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 38;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 43;}

                         
                        input.seek(index73_29);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA73_30 = input.LA(1);

                         
                        int index73_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 38;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 43;}

                         
                        input.seek(index73_30);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA73_31 = input.LA(1);

                         
                        int index73_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 38;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 43;}

                         
                        input.seek(index73_31);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA73_32 = input.LA(1);

                         
                        int index73_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 38;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 43;}

                         
                        input.seek(index73_32);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA73_33 = input.LA(1);

                         
                        int index73_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 38;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 44;}

                         
                        input.seek(index73_33);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA73_34 = input.LA(1);

                         
                        int index73_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 38;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                         
                        input.seek(index73_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 73, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA96_eotS =
        "\4\uffff";
    static final String DFA96_eofS =
        "\4\uffff";
    static final String DFA96_minS =
        "\2\13\2\uffff";
    static final String DFA96_maxS =
        "\2\127\2\uffff";
    static final String DFA96_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA96_specialS =
        "\4\uffff}>";
    static final String[] DFA96_transitionS = {
            "\1\3\4\uffff\1\2\104\uffff\3\1",
            "\1\3\4\uffff\1\2\104\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA96_eot = DFA.unpackEncodedString(DFA96_eotS);
    static final short[] DFA96_eof = DFA.unpackEncodedString(DFA96_eofS);
    static final char[] DFA96_min = DFA.unpackEncodedStringToUnsignedChars(DFA96_minS);
    static final char[] DFA96_max = DFA.unpackEncodedStringToUnsignedChars(DFA96_maxS);
    static final short[] DFA96_accept = DFA.unpackEncodedString(DFA96_acceptS);
    static final short[] DFA96_special = DFA.unpackEncodedString(DFA96_specialS);
    static final short[][] DFA96_transition;

    static {
        int numStates = DFA96_transitionS.length;
        DFA96_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA96_transition[i] = DFA.unpackEncodedString(DFA96_transitionS[i]);
        }
    }

    class DFA96 extends DFA {

        public DFA96(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = DFA96_eot;
            this.eof = DFA96_eof;
            this.min = DFA96_min;
            this.max = DFA96_max;
            this.accept = DFA96_accept;
            this.special = DFA96_special;
            this.transition = DFA96_transition;
        }
        public String getDescription() {
            return "()* loopback of 532:25: ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA103_eotS =
        "\5\uffff";
    static final String DFA103_eofS =
        "\5\uffff";
    static final String DFA103_minS =
        "\1\4\1\uffff\2\20\1\uffff";
    static final String DFA103_maxS =
        "\1\145\1\uffff\2\127\1\uffff";
    static final String DFA103_acceptS =
        "\1\uffff\1\1\2\uffff\1\2";
    static final String DFA103_specialS =
        "\5\uffff}>";
    static final String[] DFA103_transitionS = {
            "\1\1\1\uffff\1\1\2\uffff\2\1\4\uffff\1\1\6\uffff\1\1\1\uffff"+
            "\2\1\3\uffff\1\1\1\uffff\3\1\20\2\1\uffff\1\1\3\uffff\3\1\3"+
            "\uffff\1\1\12\uffff\1\1\20\uffff\15\1",
            "",
            "\1\4\6\uffff\1\1\75\uffff\3\3",
            "\1\4\6\uffff\1\1\75\uffff\3\3",
            ""
    };

    static final short[] DFA103_eot = DFA.unpackEncodedString(DFA103_eotS);
    static final short[] DFA103_eof = DFA.unpackEncodedString(DFA103_eofS);
    static final char[] DFA103_min = DFA.unpackEncodedStringToUnsignedChars(DFA103_minS);
    static final char[] DFA103_max = DFA.unpackEncodedStringToUnsignedChars(DFA103_maxS);
    static final short[] DFA103_accept = DFA.unpackEncodedString(DFA103_acceptS);
    static final short[] DFA103_special = DFA.unpackEncodedString(DFA103_specialS);
    static final short[][] DFA103_transition;

    static {
        int numStates = DFA103_transitionS.length;
        DFA103_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA103_transition[i] = DFA.unpackEncodedString(DFA103_transitionS[i]);
        }
    }

    class DFA103 extends DFA {

        public DFA103(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 103;
            this.eot = DFA103_eot;
            this.eof = DFA103_eof;
            this.min = DFA103_min;
            this.max = DFA103_max;
            this.accept = DFA103_accept;
            this.special = DFA103_special;
            this.transition = DFA103_transition;
        }
        public String getDescription() {
            return "540:14: ( propertyDeclaration | margin )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA107_eotS =
        "\5\uffff";
    static final String DFA107_eofS =
        "\5\uffff";
    static final String DFA107_minS =
        "\1\4\1\uffff\2\20\1\uffff";
    static final String DFA107_maxS =
        "\1\145\1\uffff\2\127\1\uffff";
    static final String DFA107_acceptS =
        "\1\uffff\1\1\2\uffff\1\2";
    static final String DFA107_specialS =
        "\5\uffff}>";
    static final String[] DFA107_transitionS = {
            "\1\1\1\uffff\1\1\2\uffff\2\1\4\uffff\1\1\6\uffff\1\1\1\uffff"+
            "\2\1\3\uffff\1\1\1\uffff\3\1\20\2\1\uffff\1\1\3\uffff\3\1\3"+
            "\uffff\1\1\12\uffff\1\1\20\uffff\15\1",
            "",
            "\1\4\6\uffff\1\1\75\uffff\3\3",
            "\1\4\6\uffff\1\1\75\uffff\3\3",
            ""
    };

    static final short[] DFA107_eot = DFA.unpackEncodedString(DFA107_eotS);
    static final short[] DFA107_eof = DFA.unpackEncodedString(DFA107_eofS);
    static final char[] DFA107_min = DFA.unpackEncodedStringToUnsignedChars(DFA107_minS);
    static final char[] DFA107_max = DFA.unpackEncodedStringToUnsignedChars(DFA107_maxS);
    static final short[] DFA107_accept = DFA.unpackEncodedString(DFA107_acceptS);
    static final short[] DFA107_special = DFA.unpackEncodedString(DFA107_specialS);
    static final short[][] DFA107_transition;

    static {
        int numStates = DFA107_transitionS.length;
        DFA107_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA107_transition[i] = DFA.unpackEncodedString(DFA107_transitionS[i]);
        }
    }

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = DFA107_eot;
            this.eof = DFA107_eof;
            this.min = DFA107_min;
            this.max = DFA107_max;
            this.accept = DFA107_accept;
            this.special = DFA107_special;
            this.transition = DFA107_transition;
        }
        public String getDescription() {
            return "540:60: ( propertyDeclaration | margin )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA126_eotS =
        "\5\uffff";
    static final String DFA126_eofS =
        "\5\uffff";
    static final String DFA126_minS =
        "\2\4\1\0\2\uffff";
    static final String DFA126_maxS =
        "\2\145\1\0\2\uffff";
    static final String DFA126_acceptS =
        "\3\uffff\1\2\1\1";
    static final String DFA126_specialS =
        "\2\uffff\1\0\2\uffff}>";
    static final String[] DFA126_transitionS = {
            "\1\3\1\uffff\1\3\2\uffff\2\3\1\2\2\uffff\2\3\6\uffff\1\3\1\uffff"+
            "\2\3\3\uffff\1\3\1\uffff\23\3\1\uffff\1\3\3\uffff\3\3\16\uffff"+
            "\1\3\14\uffff\3\1\1\uffff\15\3",
            "\1\3\1\uffff\1\3\2\uffff\2\3\1\2\2\uffff\2\3\6\uffff\1\3\1"+
            "\uffff\2\3\3\uffff\1\3\1\uffff\23\3\1\uffff\1\3\3\uffff\3\3"+
            "\16\uffff\1\3\14\uffff\3\1\1\uffff\15\3",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA126_eot = DFA.unpackEncodedString(DFA126_eotS);
    static final short[] DFA126_eof = DFA.unpackEncodedString(DFA126_eofS);
    static final char[] DFA126_min = DFA.unpackEncodedStringToUnsignedChars(DFA126_minS);
    static final char[] DFA126_max = DFA.unpackEncodedStringToUnsignedChars(DFA126_maxS);
    static final short[] DFA126_accept = DFA.unpackEncodedString(DFA126_acceptS);
    static final short[] DFA126_special = DFA.unpackEncodedString(DFA126_specialS);
    static final short[][] DFA126_transition;

    static {
        int numStates = DFA126_transitionS.length;
        DFA126_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA126_transition[i] = DFA.unpackEncodedString(DFA126_transitionS[i]);
        }
    }

    class DFA126 extends DFA {

        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = DFA126_eot;
            this.eof = DFA126_eof;
            this.min = DFA126_min;
            this.max = DFA126_max;
            this.accept = DFA126_accept;
            this.special = DFA126_special;
            this.transition = DFA126_transition;
        }
        public String getDescription() {
            return "627:26: ( ( ( ws )? COMMA )=> ( ws )? COMMA )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA126_2 = input.LA(1);

                         
                        int index126_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_Css3()) ) {s = 4;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index126_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 126, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA133_eotS =
        "\4\uffff";
    static final String DFA133_eofS =
        "\4\uffff";
    static final String DFA133_minS =
        "\2\4\2\uffff";
    static final String DFA133_maxS =
        "\2\145\2\uffff";
    static final String DFA133_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA133_specialS =
        "\4\uffff}>";
    static final String[] DFA133_transitionS = {
            "\1\3\1\uffff\1\3\2\uffff\3\3\2\uffff\2\3\2\uffff\1\2\3\uffff"+
            "\1\3\1\uffff\2\3\3\uffff\1\3\1\uffff\23\3\1\uffff\1\3\3\uffff"+
            "\3\3\16\uffff\1\3\14\uffff\3\1\1\uffff\15\3",
            "\1\3\1\uffff\1\3\2\uffff\3\3\2\uffff\2\3\2\uffff\1\2\3\uffff"+
            "\1\3\1\uffff\2\3\3\uffff\1\3\1\uffff\23\3\1\uffff\1\3\3\uffff"+
            "\3\3\16\uffff\1\3\14\uffff\3\1\1\uffff\15\3",
            "",
            ""
    };

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "635:46: ( ( ws )? prio )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA138_eotS =
        "\5\uffff";
    static final String DFA138_eofS =
        "\5\uffff";
    static final String DFA138_minS =
        "\2\4\1\0\2\uffff";
    static final String DFA138_maxS =
        "\2\157\1\0\2\uffff";
    static final String DFA138_acceptS =
        "\3\uffff\1\2\1\1";
    static final String DFA138_specialS =
        "\2\uffff\1\0\2\uffff}>";
    static final String[] DFA138_transitionS = {
            "\1\3\1\2\1\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4\3"+
            "\3\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2"+
            "\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\3\1\2\1\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4"+
            "\3\3\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff"+
            "\2\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA138_eot = DFA.unpackEncodedString(DFA138_eotS);
    static final short[] DFA138_eof = DFA.unpackEncodedString(DFA138_eofS);
    static final char[] DFA138_min = DFA.unpackEncodedStringToUnsignedChars(DFA138_minS);
    static final char[] DFA138_max = DFA.unpackEncodedStringToUnsignedChars(DFA138_maxS);
    static final short[] DFA138_accept = DFA.unpackEncodedString(DFA138_acceptS);
    static final short[] DFA138_special = DFA.unpackEncodedString(DFA138_specialS);
    static final short[][] DFA138_transition;

    static {
        int numStates = DFA138_transitionS.length;
        DFA138_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA138_transition[i] = DFA.unpackEncodedString(DFA138_transitionS[i]);
        }
    }

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = DFA138_eot;
            this.eof = DFA138_eof;
            this.min = DFA138_min;
            this.max = DFA138_max;
            this.accept = DFA138_accept;
            this.special = DFA138_special;
            this.transition = DFA138_transition;
        }
        public String getDescription() {
            return "654:24: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA138_2 = input.LA(1);

                         
                        int index138_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_Css3()) ) {s = 4;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index138_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 138, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA146_eotS =
        "\66\uffff";
    static final String DFA146_eofS =
        "\66\uffff";
    static final String DFA146_minS =
        "\1\4\12\0\7\uffff\1\0\3\uffff\20\0\20\uffff";
    static final String DFA146_maxS =
        "\1\157\12\0\7\uffff\1\0\3\uffff\20\0\20\uffff";
    static final String DFA146_acceptS =
        "\13\uffff\7\11\1\uffff\3\11\20\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
        "\1\10\1\21\1\12\1\13\1\14\1\15\1\16\1\17\1\20";
    static final String DFA146_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\7\uffff\1\13\3\uffff"+
        "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\20\uffff}>";
    static final String[] DFA146_transitionS = {
            "\1\45\1\uffff\1\4\2\uffff\1\45\1\44\1\24\3\uffff\1\12\6\uffff"+
            "\1\6\1\23\1\33\1\31\3\uffff\1\32\1\uffff\1\26\1\27\1\30\20\45"+
            "\1\uffff\1\22\1\15\1\13\1\15\1\3\1\10\1\5\1\17\1\25\1\20\1\7"+
            "\1\16\1\uffff\1\14\6\uffff\1\24\1\2\20\uffff\1\42\1\1\1\11\1"+
            "\40\2\41\1\34\1\45\1\35\1\45\1\43\1\36\1\37\11\uffff\1\21",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "660:1: declaration : ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_map )=> sass_map | ( sass_nested_properties )=> sass_nested_properties | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( selectorsGroup ( ws )? LBRACE )=> rule | {...}? at_rule | {...}? sass_control | {...}? sass_extend | {...}? sass_debug | {...}? sass_content | {...}? sass_function_return | {...}? importItem | GEN );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA146_0 = input.LA(1);

                         
                        int index146_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_0==SASS_MIXIN) ) {s = 1;}

                        else if ( (LA146_0==SASS_VAR) ) {s = 2;}

                        else if ( (LA146_0==HASH_SYMBOL) ) {s = 3;}

                        else if ( (LA146_0==IDENT) ) {s = 4;}

                        else if ( (LA146_0==DOT) ) {s = 5;}

                        else if ( (LA146_0==GEN) ) {s = 6;}

                        else if ( (LA146_0==STAR) ) {s = 7;}

                        else if ( (LA146_0==HASH) ) {s = 8;}

                        else if ( (LA146_0==SASS_INCLUDE) ) {s = 9;}

                        else if ( (LA146_0==MEDIA_SYM) ) {s = 10;}

                        else if ( (LA146_0==GREATER) && (synpred28_Css3())) {s = 11;}

                        else if ( (LA146_0==LESS_AND) && (synpred28_Css3())) {s = 12;}

                        else if ( (LA146_0==PLUS||LA146_0==TILDE) && (synpred28_Css3())) {s = 13;}

                        else if ( (LA146_0==PIPE) && (synpred28_Css3())) {s = 14;}

                        else if ( (LA146_0==LBRACKET) && (synpred28_Css3())) {s = 15;}

                        else if ( (LA146_0==SASS_EXTEND_ONLY_SELECTOR) && (synpred28_Css3())) {s = 16;}

                        else if ( (LA146_0==AT_SIGN) && (synpred28_Css3())) {s = 17;}

                        else if ( (LA146_0==MINUS) ) {s = 18;}

                        else if ( (LA146_0==COLON) && (synpred28_Css3())) {s = 19;}

                        else if ( (LA146_0==COMMA||LA146_0==RBRACKET) && (synpred28_Css3())) {s = 20;}

                        else if ( (LA146_0==DCOLON) && (synpred28_Css3())) {s = 21;}

                        else if ( (LA146_0==PAGE_SYM) ) {s = 22;}

                        else if ( (LA146_0==COUNTER_STYLE_SYM) ) {s = 23;}

                        else if ( (LA146_0==FONT_FACE_SYM) ) {s = 24;}

                        else if ( (LA146_0==MOZ_DOCUMENT_SYM) ) {s = 25;}

                        else if ( (LA146_0==WEBKIT_KEYFRAMES_SYM) ) {s = 26;}

                        else if ( (LA146_0==AT_IDENT) ) {s = 27;}

                        else if ( (LA146_0==SASS_IF) ) {s = 28;}

                        else if ( (LA146_0==SASS_FOR) ) {s = 29;}

                        else if ( (LA146_0==SASS_EACH) ) {s = 30;}

                        else if ( (LA146_0==SASS_WHILE) ) {s = 31;}

                        else if ( (LA146_0==SASS_EXTEND) ) {s = 32;}

                        else if ( ((LA146_0>=SASS_DEBUG && LA146_0<=SASS_WARN)) ) {s = 33;}

                        else if ( (LA146_0==SASS_CONTENT) ) {s = 34;}

                        else if ( (LA146_0==SASS_RETURN) ) {s = 35;}

                        else if ( (LA146_0==IMPORT_SYM) ) {s = 36;}

                        else if ( (LA146_0==NAMESPACE_SYM||LA146_0==CHARSET_SYM||(LA146_0>=TOPLEFTCORNER_SYM && LA146_0<=RIGHTBOTTOM_SYM)||LA146_0==SASS_ELSE||LA146_0==SASS_FUNCTION) ) {s = 37;}

                         
                        input.seek(index146_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA146_1 = input.LA(1);

                         
                        int index146_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( ((synpred25_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 43;}

                         
                        input.seek(index146_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA146_2 = input.LA(1);

                         
                        int index146_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 38;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 39;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 40;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 41;}

                        else if ( ((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||(((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 42;}

                         
                        input.seek(index146_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA146_3 = input.LA(1);

                         
                        int index146_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 40;}

                        else if ( ((synpred23_Css3()||(synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 41;}

                        else if ( ((synpred24_Css3()||(synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 42;}

                        else if ( (synpred28_Css3()) ) {s = 21;}

                         
                        input.seek(index146_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA146_4 = input.LA(1);

                         
                        int index146_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 40;}

                        else if ( ((synpred23_Css3()||(synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 41;}

                        else if ( ((synpred24_Css3()||(synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 42;}

                        else if ( (synpred28_Css3()) ) {s = 21;}

                         
                        input.seek(index146_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA146_5 = input.LA(1);

                         
                        int index146_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 40;}

                        else if ( ((synpred23_Css3()||(synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 41;}

                        else if ( ((synpred24_Css3()||(synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 42;}

                        else if ( ((synpred25_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 43;}

                        else if ( (((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 44;}

                        else if ( (((synpred27_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 45;}

                        else if ( (synpred28_Css3()) ) {s = 21;}

                         
                        input.seek(index146_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA146_6 = input.LA(1);

                         
                        int index146_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 40;}

                        else if ( ((synpred23_Css3()||(synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 41;}

                        else if ( ((synpred24_Css3()||(synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 42;}

                        else if ( (synpred28_Css3()) ) {s = 21;}

                        else if ( (true) ) {s = 46;}

                         
                        input.seek(index146_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA146_7 = input.LA(1);

                         
                        int index146_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred23_Css3()||(synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 41;}

                        else if ( ((synpred24_Css3()||(synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 42;}

                        else if ( (synpred28_Css3()) ) {s = 21;}

                         
                        input.seek(index146_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA146_8 = input.LA(1);

                         
                        int index146_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 40;}

                        else if ( ((synpred23_Css3()||(synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 41;}

                        else if ( ((synpred24_Css3()||(synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 42;}

                        else if ( (synpred28_Css3()) ) {s = 21;}

                         
                        input.seek(index146_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA146_9 = input.LA(1);

                         
                        int index146_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( (((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 44;}

                        else if ( (((synpred27_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 45;}

                         
                        input.seek(index146_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA146_10 = input.LA(1);

                         
                        int index146_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 47;}

                         
                        input.seek(index146_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA146_18 = input.LA(1);

                         
                        int index146_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 40;}

                        else if ( ((synpred23_Css3()||(synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 41;}

                        else if ( ((synpred24_Css3()||(synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 42;}

                        else if ( (synpred28_Css3()) ) {s = 21;}

                         
                        input.seek(index146_18);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA146_22 = input.LA(1);

                         
                        int index146_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 47;}

                         
                        input.seek(index146_22);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA146_23 = input.LA(1);

                         
                        int index146_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 47;}

                         
                        input.seek(index146_23);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA146_24 = input.LA(1);

                         
                        int index146_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 47;}

                         
                        input.seek(index146_24);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA146_25 = input.LA(1);

                         
                        int index146_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 47;}

                         
                        input.seek(index146_25);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA146_26 = input.LA(1);

                         
                        int index146_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 47;}

                         
                        input.seek(index146_26);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA146_27 = input.LA(1);

                         
                        int index146_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 47;}

                         
                        input.seek(index146_27);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA146_28 = input.LA(1);

                         
                        int index146_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 48;}

                         
                        input.seek(index146_28);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA146_29 = input.LA(1);

                         
                        int index146_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 48;}

                         
                        input.seek(index146_29);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA146_30 = input.LA(1);

                         
                        int index146_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 48;}

                         
                        input.seek(index146_30);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA146_31 = input.LA(1);

                         
                        int index146_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 48;}

                         
                        input.seek(index146_31);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA146_32 = input.LA(1);

                         
                        int index146_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 49;}

                         
                        input.seek(index146_32);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA146_33 = input.LA(1);

                         
                        int index146_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 50;}

                         
                        input.seek(index146_33);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA146_34 = input.LA(1);

                         
                        int index146_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 51;}

                         
                        input.seek(index146_34);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA146_35 = input.LA(1);

                         
                        int index146_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 52;}

                         
                        input.seek(index146_35);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA146_36 = input.LA(1);

                         
                        int index146_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                        else if ( ((evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 53;}

                         
                        input.seek(index146_36);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA146_37 = input.LA(1);

                         
                        int index146_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 40;}

                        else if ( ((((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred23_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (((((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 42;}

                         
                        input.seek(index146_37);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 146, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA143_eotS =
        "\4\uffff";
    static final String DFA143_eofS =
        "\4\uffff";
    static final String DFA143_minS =
        "\2\4\2\uffff";
    static final String DFA143_maxS =
        "\2\157\2\uffff";
    static final String DFA143_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA143_specialS =
        "\4\uffff}>";
    static final String[] DFA143_transitionS = {
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\1\2\3\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\1\2\3\uffff\4\3\3"+
            "\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3"+
            "\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "670:87: ( ( ws )? IMPORTANT_SYM )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA145_eotS =
        "\4\uffff";
    static final String DFA145_eofS =
        "\4\uffff";
    static final String DFA145_minS =
        "\2\4\2\uffff";
    static final String DFA145_maxS =
        "\2\157\2\uffff";
    static final String DFA145_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA145_specialS =
        "\4\uffff}>";
    static final String[] DFA145_transitionS = {
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\1\2\3\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\1\2\3\uffff\4\3\3"+
            "\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3"+
            "\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA145_eot = DFA.unpackEncodedString(DFA145_eotS);
    static final short[] DFA145_eof = DFA.unpackEncodedString(DFA145_eofS);
    static final char[] DFA145_min = DFA.unpackEncodedStringToUnsignedChars(DFA145_minS);
    static final char[] DFA145_max = DFA.unpackEncodedStringToUnsignedChars(DFA145_maxS);
    static final short[] DFA145_accept = DFA.unpackEncodedString(DFA145_acceptS);
    static final short[] DFA145_special = DFA.unpackEncodedString(DFA145_specialS);
    static final short[][] DFA145_transition;

    static {
        int numStates = DFA145_transitionS.length;
        DFA145_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA145_transition[i] = DFA.unpackEncodedString(DFA145_transitionS[i]);
        }
    }

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = DFA145_eot;
            this.eof = DFA145_eof;
            this.min = DFA145_min;
            this.max = DFA145_max;
            this.accept = DFA145_accept;
            this.special = DFA145_special;
            this.transition = DFA145_transition;
        }
        public String getDescription() {
            return "671:57: ( ( ws )? IMPORTANT_SYM )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA150_eotS =
        "\43\uffff";
    static final String DFA150_eofS =
        "\43\uffff";
    static final String DFA150_minS =
        "\3\6\1\0\1\uffff\3\0\3\6\5\uffff\2\6\1\0\1\uffff\3\0\3\6\1\0\3\6"+
        "\1\0\1\uffff\2\6\1\0";
    static final String DFA150_maxS =
        "\3\157\1\0\1\uffff\3\0\1\157\2\127\5\uffff\2\157\1\0\1\uffff\3\0"+
        "\1\157\2\127\1\0\3\127\1\0\1\uffff\2\127\1\0";
    static final String DFA150_acceptS =
        "\4\uffff\1\2\6\uffff\5\1\3\uffff\1\1\13\uffff\1\1\3\uffff";
    static final String DFA150_specialS =
        "\1\10\1\6\1\21\1\27\1\uffff\1\2\1\24\1\0\1\20\1\1\1\22\5\uffff\1"+
        "\15\1\30\1\13\1\uffff\1\25\1\14\1\26\1\4\1\23\1\7\1\11\1\17\1\31"+
        "\1\16\1\3\1\uffff\1\32\1\12\1\5}>";
    static final String[] DFA150_transitionS = {
            "\1\3\4\uffff\1\13\12\uffff\1\4\1\12\33\uffff\1\13\1\4\1\2\1"+
            "\4\1\1\1\7\1\10\1\11\2\4\1\5\1\4\1\uffff\1\6\6\uffff\1\13\47"+
            "\uffff\1\4",
            "\1\17\4\uffff\1\17\4\uffff\1\14\6\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\1\uffff\1\4\1\17"+
            "\6\uffff\1\17\15\uffff\3\15\27\uffff\1\4",
            "\1\22\4\uffff\1\17\4\uffff\1\23\5\uffff\1\4\1\31\33\uffff\1"+
            "\17\1\uffff\1\17\1\uffff\1\21\1\26\1\27\1\30\2\4\1\24\1\4\1"+
            "\uffff\1\25\6\uffff\1\17\15\uffff\3\20\27\uffff\1\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\32\4\uffff\1\17\1\uffff\1\4\2\uffff\1\23\5\uffff\1\4\1\17"+
            "\33\uffff\1\17\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2"+
            "\uffff\1\17\6\uffff\1\17\15\uffff\3\15\27\uffff\1\4",
            "\1\34\4\uffff\1\17\4\uffff\1\23\6\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\35\1\4\1\uffff\1\17"+
            "\6\uffff\1\17\15\uffff\3\33",
            "\1\36\4\uffff\1\17\4\uffff\1\23\4\uffff\2\4\1\17\33\uffff\1"+
            "\17\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff\1\17"+
            "\6\uffff\1\17\15\uffff\3\15",
            "",
            "",
            "",
            "",
            "",
            "\1\22\4\uffff\1\17\4\uffff\1\23\5\uffff\1\4\1\31\33\uffff\1"+
            "\17\1\uffff\1\17\1\uffff\1\21\1\26\1\27\1\30\2\4\1\24\1\4\1"+
            "\uffff\1\25\6\uffff\1\17\15\uffff\3\20\27\uffff\1\4",
            "\1\17\4\uffff\1\17\4\uffff\1\37\6\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\1\uffff\1\4\1\17"+
            "\6\uffff\1\17\15\uffff\3\15\27\uffff\1\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\32\4\uffff\1\17\1\uffff\1\4\2\uffff\1\23\5\uffff\1\4\1\17"+
            "\33\uffff\1\17\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2"+
            "\uffff\1\17\6\uffff\1\17\15\uffff\3\15\27\uffff\1\4",
            "\1\34\4\uffff\1\17\4\uffff\1\23\6\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\35\1\4\1\uffff\1\17"+
            "\6\uffff\1\17\15\uffff\3\33",
            "\1\36\4\uffff\1\17\4\uffff\1\23\4\uffff\2\4\1\17\33\uffff\1"+
            "\17\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff\1\17"+
            "\6\uffff\1\17\15\uffff\3\15",
            "\1\uffff",
            "\1\40\4\uffff\1\17\4\uffff\1\23\6\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff\1\17\6"+
            "\uffff\1\17\15\uffff\3\33",
            "\1\17\4\uffff\1\17\4\uffff\1\23\6\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\1\4\1\uffff\1\17"+
            "\6\4\1\42\15\uffff\3\41",
            "\1\17\4\uffff\1\17\4\uffff\1\23\6\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\1\4\1\uffff\1\17"+
            "\6\uffff\1\17\15\uffff\3\15",
            "\1\uffff",
            "",
            "\1\17\4\uffff\1\17\4\uffff\1\23\6\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff\1\17\6"+
            "\4\1\42\15\uffff\3\41",
            "\1\17\4\uffff\1\17\4\uffff\1\23\6\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff\1\17\6"+
            "\4\1\42\15\uffff\3\41",
            "\1\uffff"
    };

    static final short[] DFA150_eot = DFA.unpackEncodedString(DFA150_eotS);
    static final short[] DFA150_eof = DFA.unpackEncodedString(DFA150_eofS);
    static final char[] DFA150_min = DFA.unpackEncodedStringToUnsignedChars(DFA150_minS);
    static final char[] DFA150_max = DFA.unpackEncodedStringToUnsignedChars(DFA150_maxS);
    static final short[] DFA150_accept = DFA.unpackEncodedString(DFA150_acceptS);
    static final short[] DFA150_special = DFA.unpackEncodedString(DFA150_specialS);
    static final short[][] DFA150_transition;

    static {
        int numStates = DFA150_transitionS.length;
        DFA150_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA150_transition[i] = DFA.unpackEncodedString(DFA150_transitionS[i]);
        }
    }

    class DFA150 extends DFA {

        public DFA150(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 150;
            this.eot = DFA150_eot;
            this.eof = DFA150_eof;
            this.min = DFA150_min;
            this.max = DFA150_max;
            this.accept = DFA150_accept;
            this.special = DFA150_special;
            this.transition = DFA150_transition;
        }
        public String getDescription() {
            return "687:1: selectorsGroup : ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression | selector ( ( ws )? COMMA ( ws )? selector )* );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA150_7 = input.LA(1);

                         
                        int index150_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index150_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA150_9 = input.LA(1);

                         
                        int index150_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA150_9>=WS && LA150_9<=COMMENT)) ) {s = 27;}

                        else if ( (LA150_9==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA150_9==IDENT) ) {s = 28;}

                        else if ( (LA150_9==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA150_9==STAR) ) {s = 29;}

                        else if ( (LA150_9==COMMA||LA150_9==COLON||LA150_9==MINUS||LA150_9==GREATER||(LA150_9>=HASH && LA150_9<=LBRACKET)||LA150_9==LESS_AND||LA150_9==RBRACKET) && (synpred29_Css3())) {s = 15;}

                        else if ( (LA150_9==PIPE) ) {s = 4;}

                         
                        input.seek(index150_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA150_5 = input.LA(1);

                         
                        int index150_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index150_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA150_30 = input.LA(1);

                         
                        int index150_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index150_30);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA150_23 = input.LA(1);

                         
                        int index150_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA150_23>=WS && LA150_23<=COMMENT)) && (synpred29_Css3())) {s = 13;}

                        else if ( (LA150_23==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA150_23==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA150_23==IDENT) ) {s = 26;}

                        else if ( (LA150_23==COMMA||LA150_23==COLON||LA150_23==MINUS||LA150_23==GREATER||(LA150_23>=HASH && LA150_23<=LBRACKET)||LA150_23==STAR||LA150_23==LESS_AND||LA150_23==RBRACKET) && (synpred29_Css3())) {s = 15;}

                        else if ( (LA150_23==LESS_IMPORT_TYPE||LA150_23==GEN||LA150_23==AT_SIGN) ) {s = 4;}

                         
                        input.seek(index150_23);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA150_34 = input.LA(1);

                         
                        int index150_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index150_34);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA150_1 = input.LA(1);

                         
                        int index150_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA150_1==LBRACE) && (synpred29_Css3())) {s = 12;}

                        else if ( ((LA150_1>=WS && LA150_1<=COMMENT)) && (synpred29_Css3())) {s = 13;}

                        else if ( (LA150_1==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA150_1==IDENT||LA150_1==COMMA||LA150_1==COLON||LA150_1==MINUS||LA150_1==GREATER||(LA150_1>=HASH && LA150_1<=LBRACKET)||LA150_1==STAR||LA150_1==LESS_AND||LA150_1==RBRACKET) && (synpred29_Css3())) {s = 15;}

                        else if ( (LA150_1==NAME||LA150_1==AT_SIGN) ) {s = 4;}

                         
                        input.seek(index150_1);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA150_25 = input.LA(1);

                         
                        int index150_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA150_25>=WS && LA150_25<=COMMENT)) && (synpred29_Css3())) {s = 13;}

                        else if ( (LA150_25==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA150_25==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA150_25==IDENT) ) {s = 30;}

                        else if ( (LA150_25==COMMA||LA150_25==COLON||LA150_25==MINUS||LA150_25==GREATER||(LA150_25>=HASH && LA150_25<=LBRACKET)||LA150_25==STAR||LA150_25==LESS_AND||LA150_25==RBRACKET) && (synpred29_Css3())) {s = 15;}

                        else if ( ((LA150_25>=NOT && LA150_25<=GEN)) ) {s = 4;}

                         
                        input.seek(index150_25);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA150_0 = input.LA(1);

                         
                        int index150_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA150_0==HASH_SYMBOL) ) {s = 1;}

                        else if ( (LA150_0==GREATER) ) {s = 2;}

                        else if ( (LA150_0==IDENT) ) {s = 3;}

                        else if ( (LA150_0==GEN||LA150_0==PLUS||LA150_0==TILDE||(LA150_0>=DCOLON && LA150_0<=SASS_EXTEND_ONLY_SELECTOR)||LA150_0==PIPE||LA150_0==AT_SIGN) ) {s = 4;}

                        else if ( (LA150_0==STAR) ) {s = 5;}

                        else if ( (LA150_0==LESS_AND) ) {s = 6;}

                        else if ( (LA150_0==HASH) ) {s = 7;}

                        else if ( (LA150_0==DOT) ) {s = 8;}

                        else if ( (LA150_0==LBRACKET) ) {s = 9;}

                        else if ( (LA150_0==COLON) ) {s = 10;}

                        else if ( (LA150_0==COMMA||LA150_0==MINUS||LA150_0==RBRACKET) && (synpred29_Css3())) {s = 11;}

                         
                        input.seek(index150_0);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA150_26 = input.LA(1);

                         
                        int index150_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index150_26);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA150_33 = input.LA(1);

                         
                        int index150_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA150_33==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( ((LA150_33>=WS && LA150_33<=COMMENT)) ) {s = 33;}

                        else if ( (LA150_33==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA150_33==RBRACKET) ) {s = 34;}

                        else if ( ((LA150_33>=OPEQ && LA150_33<=CONTAINS)) ) {s = 4;}

                        else if ( (LA150_33==IDENT||LA150_33==COMMA||LA150_33==COLON||LA150_33==MINUS||LA150_33==GREATER||(LA150_33>=HASH && LA150_33<=LBRACKET)||LA150_33==STAR||LA150_33==LESS_AND) && (synpred29_Css3())) {s = 15;}

                         
                        input.seek(index150_33);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA150_18 = input.LA(1);

                         
                        int index150_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index150_18);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA150_21 = input.LA(1);

                         
                        int index150_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index150_21);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA150_16 = input.LA(1);

                         
                        int index150_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA150_16==HASH_SYMBOL) ) {s = 17;}

                        else if ( (LA150_16==IDENT) ) {s = 18;}

                        else if ( ((LA150_16>=WS && LA150_16<=COMMENT)) ) {s = 16;}

                        else if ( (LA150_16==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA150_16==STAR) ) {s = 20;}

                        else if ( (LA150_16==LESS_AND) ) {s = 21;}

                        else if ( (LA150_16==GEN||(LA150_16>=DCOLON && LA150_16<=SASS_EXTEND_ONLY_SELECTOR)||LA150_16==PIPE||LA150_16==AT_SIGN) ) {s = 4;}

                        else if ( (LA150_16==HASH) ) {s = 22;}

                        else if ( (LA150_16==DOT) ) {s = 23;}

                        else if ( (LA150_16==LBRACKET) ) {s = 24;}

                        else if ( (LA150_16==COLON) ) {s = 25;}

                        else if ( (LA150_16==COMMA||LA150_16==MINUS||LA150_16==GREATER||LA150_16==RBRACKET) && (synpred29_Css3())) {s = 15;}

                         
                        input.seek(index150_16);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA150_29 = input.LA(1);

                         
                        int index150_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA150_29>=WS && LA150_29<=COMMENT)) && (synpred29_Css3())) {s = 13;}

                        else if ( (LA150_29==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA150_29==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA150_29==IDENT||LA150_29==COMMA||LA150_29==COLON||LA150_29==MINUS||LA150_29==GREATER||(LA150_29>=HASH && LA150_29<=LBRACKET)||LA150_29==STAR||LA150_29==LESS_AND||LA150_29==RBRACKET) && (synpred29_Css3())) {s = 15;}

                        else if ( (LA150_29==PIPE) ) {s = 4;}

                         
                        input.seek(index150_29);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA150_27 = input.LA(1);

                         
                        int index150_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA150_27==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA150_27==IDENT) ) {s = 32;}

                        else if ( ((LA150_27>=WS && LA150_27<=COMMENT)) ) {s = 27;}

                        else if ( (LA150_27==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA150_27==COMMA||LA150_27==COLON||LA150_27==MINUS||LA150_27==GREATER||(LA150_27>=HASH && LA150_27<=LBRACKET)||LA150_27==STAR||LA150_27==LESS_AND||LA150_27==RBRACKET) && (synpred29_Css3())) {s = 15;}

                         
                        input.seek(index150_27);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA150_8 = input.LA(1);

                         
                        int index150_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA150_8>=WS && LA150_8<=COMMENT)) && (synpred29_Css3())) {s = 13;}

                        else if ( (LA150_8==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA150_8==IDENT) ) {s = 26;}

                        else if ( (LA150_8==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA150_8==COMMA||LA150_8==COLON||LA150_8==MINUS||LA150_8==GREATER||(LA150_8>=HASH && LA150_8<=LBRACKET)||LA150_8==STAR||LA150_8==LESS_AND||LA150_8==RBRACKET) && (synpred29_Css3())) {s = 15;}

                        else if ( (LA150_8==LESS_IMPORT_TYPE||LA150_8==GEN||LA150_8==AT_SIGN) ) {s = 4;}

                         
                        input.seek(index150_8);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA150_2 = input.LA(1);

                         
                        int index150_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA150_2>=WS && LA150_2<=COMMENT)) ) {s = 16;}

                        else if ( (LA150_2==HASH_SYMBOL) ) {s = 17;}

                        else if ( (LA150_2==IDENT) ) {s = 18;}

                        else if ( (LA150_2==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA150_2==STAR) ) {s = 20;}

                        else if ( (LA150_2==LESS_AND) ) {s = 21;}

                        else if ( (LA150_2==GEN||(LA150_2>=DCOLON && LA150_2<=SASS_EXTEND_ONLY_SELECTOR)||LA150_2==PIPE||LA150_2==AT_SIGN) ) {s = 4;}

                        else if ( (LA150_2==HASH) ) {s = 22;}

                        else if ( (LA150_2==DOT) ) {s = 23;}

                        else if ( (LA150_2==LBRACKET) ) {s = 24;}

                        else if ( (LA150_2==COLON) ) {s = 25;}

                        else if ( (LA150_2==COMMA||LA150_2==MINUS||LA150_2==GREATER||LA150_2==RBRACKET) && (synpred29_Css3())) {s = 15;}

                         
                        input.seek(index150_2);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA150_10 = input.LA(1);

                         
                        int index150_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA150_10>=WS && LA150_10<=COMMENT)) && (synpred29_Css3())) {s = 13;}

                        else if ( (LA150_10==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA150_10==IDENT) ) {s = 30;}

                        else if ( (LA150_10==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA150_10==COMMA||LA150_10==COLON||LA150_10==MINUS||LA150_10==GREATER||(LA150_10>=HASH && LA150_10<=LBRACKET)||LA150_10==STAR||LA150_10==LESS_AND||LA150_10==RBRACKET) && (synpred29_Css3())) {s = 15;}

                        else if ( ((LA150_10>=NOT && LA150_10<=GEN)) ) {s = 4;}

                         
                        input.seek(index150_10);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA150_24 = input.LA(1);

                         
                        int index150_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA150_24>=WS && LA150_24<=COMMENT)) ) {s = 27;}

                        else if ( (LA150_24==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA150_24==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA150_24==IDENT) ) {s = 28;}

                        else if ( (LA150_24==STAR) ) {s = 29;}

                        else if ( (LA150_24==COMMA||LA150_24==COLON||LA150_24==MINUS||LA150_24==GREATER||(LA150_24>=HASH && LA150_24<=LBRACKET)||LA150_24==LESS_AND||LA150_24==RBRACKET) && (synpred29_Css3())) {s = 15;}

                        else if ( (LA150_24==PIPE) ) {s = 4;}

                         
                        input.seek(index150_24);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA150_6 = input.LA(1);

                         
                        int index150_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index150_6);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA150_20 = input.LA(1);

                         
                        int index150_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index150_20);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA150_22 = input.LA(1);

                         
                        int index150_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index150_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA150_3 = input.LA(1);

                         
                        int index150_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index150_3);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA150_17 = input.LA(1);

                         
                        int index150_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA150_17==LBRACE) && (synpred29_Css3())) {s = 31;}

                        else if ( ((LA150_17>=WS && LA150_17<=COMMENT)) && (synpred29_Css3())) {s = 13;}

                        else if ( (LA150_17==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA150_17==IDENT||LA150_17==COMMA||LA150_17==COLON||LA150_17==MINUS||LA150_17==GREATER||(LA150_17>=HASH && LA150_17<=LBRACKET)||LA150_17==STAR||LA150_17==LESS_AND||LA150_17==RBRACKET) && (synpred29_Css3())) {s = 15;}

                        else if ( (LA150_17==NAME||LA150_17==AT_SIGN) ) {s = 4;}

                         
                        input.seek(index150_17);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA150_28 = input.LA(1);

                         
                        int index150_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA150_28>=WS && LA150_28<=COMMENT)) ) {s = 33;}

                        else if ( (LA150_28==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA150_28==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA150_28==RBRACKET) ) {s = 34;}

                        else if ( (LA150_28==PIPE||(LA150_28>=OPEQ && LA150_28<=CONTAINS)) ) {s = 4;}

                        else if ( (LA150_28==IDENT||LA150_28==COMMA||LA150_28==COLON||LA150_28==MINUS||LA150_28==GREATER||(LA150_28>=HASH && LA150_28<=LBRACKET)||LA150_28==STAR||LA150_28==LESS_AND) && (synpred29_Css3())) {s = 15;}

                         
                        input.seek(index150_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA150_32 = input.LA(1);

                         
                        int index150_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA150_32>=WS && LA150_32<=COMMENT)) ) {s = 33;}

                        else if ( (LA150_32==LBRACE) && (synpred29_Css3())) {s = 19;}

                        else if ( (LA150_32==HASH_SYMBOL) && (synpred29_Css3())) {s = 14;}

                        else if ( (LA150_32==RBRACKET) ) {s = 34;}

                        else if ( ((LA150_32>=OPEQ && LA150_32<=CONTAINS)) ) {s = 4;}

                        else if ( (LA150_32==IDENT||LA150_32==COMMA||LA150_32==COLON||LA150_32==MINUS||LA150_32==GREATER||(LA150_32>=HASH && LA150_32<=LBRACKET)||LA150_32==STAR||LA150_32==LESS_AND) && (synpred29_Css3())) {s = 15;}

                         
                        input.seek(index150_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 150, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA149_eotS =
        "\4\uffff";
    static final String DFA149_eofS =
        "\4\uffff";
    static final String DFA149_minS =
        "\2\13\2\uffff";
    static final String DFA149_maxS =
        "\2\127\2\uffff";
    static final String DFA149_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA149_specialS =
        "\4\uffff}>";
    static final String[] DFA149_transitionS = {
            "\1\3\4\uffff\1\2\104\uffff\3\1",
            "\1\3\4\uffff\1\2\104\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA149_eot = DFA.unpackEncodedString(DFA149_eotS);
    static final short[] DFA149_eof = DFA.unpackEncodedString(DFA149_eofS);
    static final char[] DFA149_min = DFA.unpackEncodedStringToUnsignedChars(DFA149_minS);
    static final char[] DFA149_max = DFA.unpackEncodedStringToUnsignedChars(DFA149_maxS);
    static final short[] DFA149_accept = DFA.unpackEncodedString(DFA149_acceptS);
    static final short[] DFA149_special = DFA.unpackEncodedString(DFA149_specialS);
    static final short[][] DFA149_transition;

    static {
        int numStates = DFA149_transitionS.length;
        DFA149_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA149_transition[i] = DFA.unpackEncodedString(DFA149_transitionS[i]);
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = DFA149_eot;
            this.eof = DFA149_eof;
            this.min = DFA149_min;
            this.max = DFA149_max;
            this.accept = DFA149_accept;
            this.special = DFA149_special;
            this.transition = DFA149_transition;
        }
        public String getDescription() {
            return "()* loopback of 692:18: ( ( ws )? COMMA ( ws )? selector )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA157_eotS =
        "\4\uffff";
    static final String DFA157_eofS =
        "\4\uffff";
    static final String DFA157_minS =
        "\2\6\2\uffff";
    static final String DFA157_maxS =
        "\2\157\2\uffff";
    static final String DFA157_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA157_specialS =
        "\4\uffff}>";
    static final String[] DFA157_transitionS = {
            "\1\3\4\uffff\1\2\4\uffff\1\2\5\uffff\2\3\34\uffff\13\3\1\uffff"+
            "\1\3\24\uffff\3\1\27\uffff\1\3",
            "\1\3\4\uffff\1\2\4\uffff\1\2\5\uffff\2\3\34\uffff\13\3\1\uffff"+
            "\1\3\24\uffff\3\1\27\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA157_eot = DFA.unpackEncodedString(DFA157_eotS);
    static final short[] DFA157_eof = DFA.unpackEncodedString(DFA157_eofS);
    static final char[] DFA157_min = DFA.unpackEncodedStringToUnsignedChars(DFA157_minS);
    static final char[] DFA157_max = DFA.unpackEncodedStringToUnsignedChars(DFA157_maxS);
    static final short[] DFA157_accept = DFA.unpackEncodedString(DFA157_acceptS);
    static final short[] DFA157_special = DFA.unpackEncodedString(DFA157_specialS);
    static final short[][] DFA157_transition;

    static {
        int numStates = DFA157_transitionS.length;
        DFA157_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA157_transition[i] = DFA.unpackEncodedString(DFA157_transitionS[i]);
        }
    }

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = DFA157_eot;
            this.eof = DFA157_eof;
            this.min = DFA157_min;
            this.max = DFA157_max;
            this.accept = DFA157_accept;
            this.special = DFA157_special;
            this.transition = DFA157_transition;
        }
        public String getDescription() {
            return "()* loopback of 696:49: ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA156_eotS =
        "\4\uffff";
    static final String DFA156_eofS =
        "\4\uffff";
    static final String DFA156_minS =
        "\2\6\2\uffff";
    static final String DFA156_maxS =
        "\2\157\2\uffff";
    static final String DFA156_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA156_specialS =
        "\4\uffff}>";
    static final String[] DFA156_transitionS = {
            "\1\3\17\uffff\2\3\34\uffff\3\2\10\3\1\uffff\1\3\24\uffff\3\1"+
            "\27\uffff\1\3",
            "\1\3\17\uffff\2\3\34\uffff\3\2\10\3\1\uffff\1\3\24\uffff\3"+
            "\1\27\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA156_eot = DFA.unpackEncodedString(DFA156_eotS);
    static final short[] DFA156_eof = DFA.unpackEncodedString(DFA156_eofS);
    static final char[] DFA156_min = DFA.unpackEncodedStringToUnsignedChars(DFA156_minS);
    static final char[] DFA156_max = DFA.unpackEncodedStringToUnsignedChars(DFA156_maxS);
    static final short[] DFA156_accept = DFA.unpackEncodedString(DFA156_acceptS);
    static final short[] DFA156_special = DFA.unpackEncodedString(DFA156_specialS);
    static final short[][] DFA156_transition;

    static {
        int numStates = DFA156_transitionS.length;
        DFA156_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA156_transition[i] = DFA.unpackEncodedString(DFA156_transitionS[i]);
        }
    }

    class DFA156 extends DFA {

        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = DFA156_eot;
            this.eof = DFA156_eof;
            this.min = DFA156_min;
            this.max = DFA156_max;
            this.accept = DFA156_accept;
            this.special = DFA156_special;
            this.transition = DFA156_transition;
        }
        public String getDescription() {
            return "696:51: ( ( ( ws )? combinator ( ws )? ) | ( ws )? )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA159_eotS =
        "\56\uffff";
    static final String DFA159_eofS =
        "\56\uffff";
    static final String DFA159_minS =
        "\1\4\1\0\5\uffff\7\0\25\uffff\1\0\12\uffff";
    static final String DFA159_maxS =
        "\1\160\1\0\5\uffff\7\0\25\uffff\1\0\12\uffff";
    static final String DFA159_acceptS =
        "\2\uffff\1\2\52\uffff\1\1";
    static final String DFA159_specialS =
        "\1\uffff\1\0\5\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\25\uffff\1\10\12"+
        "\uffff}>";
    static final String[] DFA159_transitionS = {
            "\3\2\2\uffff\3\2\2\uffff\4\2\4\uffff\1\2\1\15\2\2\3\uffff\1"+
            "\2\1\uffff\23\2\1\uffff\4\2\1\12\1\11\1\13\1\14\1\43\1\7\2\2"+
            "\1\uffff\1\2\6\uffff\2\2\14\uffff\3\1\1\uffff\15\2\11\uffff"+
            "\1\10\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "()* loopback of 706:17: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA159_1 = input.LA(1);

                         
                        int index159_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index159_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA159_7 = input.LA(1);

                         
                        int index159_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred30_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 45;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 2;}

                         
                        input.seek(index159_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA159_8 = input.LA(1);

                         
                        int index159_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred30_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 45;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 2;}

                         
                        input.seek(index159_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA159_9 = input.LA(1);

                         
                        int index159_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index159_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA159_10 = input.LA(1);

                         
                        int index159_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index159_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA159_11 = input.LA(1);

                         
                        int index159_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index159_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA159_12 = input.LA(1);

                         
                        int index159_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index159_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA159_13 = input.LA(1);

                         
                        int index159_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index159_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA159_35 = input.LA(1);

                         
                        int index159_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index159_35);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 159, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA161_eotS =
        "\56\uffff";
    static final String DFA161_eofS =
        "\56\uffff";
    static final String DFA161_minS =
        "\1\4\1\0\5\uffff\7\0\25\uffff\1\0\12\uffff";
    static final String DFA161_maxS =
        "\1\160\1\0\5\uffff\7\0\25\uffff\1\0\12\uffff";
    static final String DFA161_acceptS =
        "\2\uffff\1\2\52\uffff\1\1";
    static final String DFA161_specialS =
        "\1\uffff\1\0\5\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\25\uffff\1\10\12"+
        "\uffff}>";
    static final String[] DFA161_transitionS = {
            "\3\2\2\uffff\3\2\2\uffff\4\2\4\uffff\1\2\1\15\2\2\3\uffff\1"+
            "\2\1\uffff\23\2\1\uffff\4\2\1\12\1\11\1\13\1\14\1\43\1\7\2\2"+
            "\1\uffff\1\2\6\uffff\2\2\14\uffff\3\1\1\uffff\15\2\11\uffff"+
            "\1\10\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_eotS);
    static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_eofS);
    static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_minS);
    static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_maxS);
    static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_acceptS);
    static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_specialS);
    static final short[][] DFA161_transition;

    static {
        int numStates = DFA161_transitionS.length;
        DFA161_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA161_transition[i] = DFA.unpackEncodedString(DFA161_transitionS[i]);
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;
        }
        public String getDescription() {
            return "()* loopback of 708:20: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA161_1 = input.LA(1);

                         
                        int index161_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index161_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA161_7 = input.LA(1);

                         
                        int index161_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred31_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 45;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 2;}

                         
                        input.seek(index161_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA161_8 = input.LA(1);

                         
                        int index161_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred31_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 45;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 2;}

                         
                        input.seek(index161_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA161_9 = input.LA(1);

                         
                        int index161_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index161_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA161_10 = input.LA(1);

                         
                        int index161_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index161_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA161_11 = input.LA(1);

                         
                        int index161_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index161_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA161_12 = input.LA(1);

                         
                        int index161_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index161_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA161_13 = input.LA(1);

                         
                        int index161_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index161_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA161_35 = input.LA(1);

                         
                        int index161_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index161_35);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 161, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA179_eotS =
        "\4\uffff";
    static final String DFA179_eofS =
        "\4\uffff";
    static final String DFA179_minS =
        "\2\4\2\uffff";
    static final String DFA179_maxS =
        "\2\160\2\uffff";
    static final String DFA179_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA179_specialS =
        "\4\uffff}>";
    static final String[] DFA179_transitionS = {
            "\3\3\2\uffff\3\3\1\2\1\uffff\4\3\4\uffff\4\3\3\uffff\1\3\1\uffff"+
            "\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff\3\1\1\uffff"+
            "\15\3\11\uffff\2\3",
            "\3\3\2\uffff\3\3\1\2\2\uffff\3\3\4\uffff\4\3\3\uffff\1\3\1"+
            "\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff\3"+
            "\1\1\uffff\15\3\11\uffff\2\3",
            "",
            ""
    };

    static final short[] DFA179_eot = DFA.unpackEncodedString(DFA179_eotS);
    static final short[] DFA179_eof = DFA.unpackEncodedString(DFA179_eofS);
    static final char[] DFA179_min = DFA.unpackEncodedStringToUnsignedChars(DFA179_minS);
    static final char[] DFA179_max = DFA.unpackEncodedStringToUnsignedChars(DFA179_maxS);
    static final short[] DFA179_accept = DFA.unpackEncodedString(DFA179_acceptS);
    static final short[] DFA179_special = DFA.unpackEncodedString(DFA179_specialS);
    static final short[][] DFA179_transition;

    static {
        int numStates = DFA179_transitionS.length;
        DFA179_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA179_transition[i] = DFA.unpackEncodedString(DFA179_transitionS[i]);
        }
    }

    class DFA179 extends DFA {

        public DFA179(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 179;
            this.eot = DFA179_eot;
            this.eof = DFA179_eof;
            this.min = DFA179_min;
            this.max = DFA179_max;
            this.accept = DFA179_accept;
            this.special = DFA179_special;
            this.transition = DFA179_transition;
        }
        public String getDescription() {
            return "820:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA192_eotS =
        "\12\uffff";
    static final String DFA192_eofS =
        "\12\uffff";
    static final String DFA192_minS =
        "\1\4\7\0\2\uffff";
    static final String DFA192_maxS =
        "\1\145\7\0\2\uffff";
    static final String DFA192_acceptS =
        "\10\uffff\1\1\1\2";
    static final String DFA192_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\2\uffff}>";
    static final String[] DFA192_transitionS = {
            "\1\6\1\uffff\1\3\2\uffff\2\6\4\uffff\1\6\6\uffff\1\5\1\uffff"+
            "\2\6\3\uffff\1\6\1\uffff\23\6\1\uffff\1\4\3\uffff\1\2\2\4\3"+
            "\uffff\1\1\12\uffff\1\7\20\uffff\15\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA192_eot = DFA.unpackEncodedString(DFA192_eotS);
    static final short[] DFA192_eof = DFA.unpackEncodedString(DFA192_eofS);
    static final char[] DFA192_min = DFA.unpackEncodedStringToUnsignedChars(DFA192_minS);
    static final char[] DFA192_max = DFA.unpackEncodedStringToUnsignedChars(DFA192_maxS);
    static final short[] DFA192_accept = DFA.unpackEncodedString(DFA192_acceptS);
    static final short[] DFA192_special = DFA.unpackEncodedString(DFA192_specialS);
    static final short[][] DFA192_transition;

    static {
        int numStates = DFA192_transitionS.length;
        DFA192_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA192_transition[i] = DFA.unpackEncodedString(DFA192_transitionS[i]);
        }
    }

    class DFA192 extends DFA {

        public DFA192(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 192;
            this.eot = DFA192_eot;
            this.eof = DFA192_eof;
            this.min = DFA192_min;
            this.max = DFA192_max;
            this.accept = DFA192_accept;
            this.special = DFA192_special;
            this.transition = DFA192_transition;
        }
        public String getDescription() {
            return "829:1: propertyDeclaration : ( ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? | {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA192_1 = input.LA(1);

                         
                        int index192_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index192_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA192_2 = input.LA(1);

                         
                        int index192_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index192_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA192_3 = input.LA(1);

                         
                        int index192_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index192_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA192_4 = input.LA(1);

                         
                        int index192_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index192_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA192_5 = input.LA(1);

                         
                        int index192_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index192_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA192_6 = input.LA(1);

                         
                        int index192_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 8;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 9;}

                         
                        input.seek(index192_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA192_7 = input.LA(1);

                         
                        int index192_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 8;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 9;}

                         
                        input.seek(index192_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 192, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA188_eotS =
        "\4\uffff";
    static final String DFA188_eofS =
        "\1\3\3\uffff";
    static final String DFA188_minS =
        "\2\4\2\uffff";
    static final String DFA188_maxS =
        "\2\157\2\uffff";
    static final String DFA188_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA188_specialS =
        "\4\uffff}>";
    static final String[] DFA188_transitionS = {
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\1\2\3\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\1\2\3\uffff\4\3\3"+
            "\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3"+
            "\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA188_eot = DFA.unpackEncodedString(DFA188_eotS);
    static final short[] DFA188_eof = DFA.unpackEncodedString(DFA188_eofS);
    static final char[] DFA188_min = DFA.unpackEncodedStringToUnsignedChars(DFA188_minS);
    static final char[] DFA188_max = DFA.unpackEncodedStringToUnsignedChars(DFA188_maxS);
    static final short[] DFA188_accept = DFA.unpackEncodedString(DFA188_acceptS);
    static final short[] DFA188_special = DFA.unpackEncodedString(DFA188_specialS);
    static final short[][] DFA188_transition;

    static {
        int numStates = DFA188_transitionS.length;
        DFA188_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA188_transition[i] = DFA.unpackEncodedString(DFA188_transitionS[i]);
        }
    }

    class DFA188 extends DFA {

        public DFA188(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 188;
            this.eot = DFA188_eot;
            this.eof = DFA188_eof;
            this.min = DFA188_min;
            this.max = DFA188_max;
            this.accept = DFA188_accept;
            this.special = DFA188_special;
            this.transition = DFA188_transition;
        }
        public String getDescription() {
            return "831:48: ( ( ws )? prio )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA193_eotS =
        "\34\uffff";
    static final String DFA193_eofS =
        "\34\uffff";
    static final String DFA193_minS =
        "\1\4\1\uffff\27\0\3\uffff";
    static final String DFA193_maxS =
        "\1\145\1\uffff\27\0\3\uffff";
    static final String DFA193_acceptS =
        "\1\uffff\1\1\31\uffff\1\2";
    static final String DFA193_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\3\uffff}>";
    static final String[] DFA193_transitionS = {
            "\1\25\1\uffff\1\3\1\17\1\23\2\25\1\uffff\1\1\2\uffff\1\25\2"+
            "\uffff\1\1\2\uffff\1\1\1\22\1\uffff\2\25\3\uffff\1\25\1\5\23"+
            "\25\1\uffff\2\2\1\uffff\1\20\1\27\1\24\17\uffff\1\26\1\4\1\6"+
            "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\21\1\30\4\uffff\15"+
            "\25",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA193_eot = DFA.unpackEncodedString(DFA193_eotS);
    static final short[] DFA193_eof = DFA.unpackEncodedString(DFA193_eofS);
    static final char[] DFA193_min = DFA.unpackEncodedStringToUnsignedChars(DFA193_minS);
    static final char[] DFA193_max = DFA.unpackEncodedStringToUnsignedChars(DFA193_maxS);
    static final short[] DFA193_accept = DFA.unpackEncodedString(DFA193_acceptS);
    static final short[] DFA193_special = DFA.unpackEncodedString(DFA193_specialS);
    static final short[][] DFA193_transition;

    static {
        int numStates = DFA193_transitionS.length;
        DFA193_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA193_transition[i] = DFA.unpackEncodedString(DFA193_transitionS[i]);
        }
    }

    class DFA193 extends DFA {

        public DFA193(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 193;
            this.eot = DFA193_eot;
            this.eof = DFA193_eof;
            this.min = DFA193_min;
            this.max = DFA193_max;
            this.accept = DFA193_accept;
            this.special = DFA193_special;
            this.transition = DFA193_transition;
        }
        public String getDescription() {
            return "842:1: cp_propertyValue : ({...}? cp_expression_list | propertyValue );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA193_2 = input.LA(1);

                         
                        int index193_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index193_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA193_3 = input.LA(1);

                         
                        int index193_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index193_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA193_4 = input.LA(1);

                         
                        int index193_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index193_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA193_5 = input.LA(1);

                         
                        int index193_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index193_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA193_6 = input.LA(1);

                         
                        int index193_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index193_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA193_7 = input.LA(1);

                         
                        int index193_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index193_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA193_8 = input.LA(1);

                         
                        int index193_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index193_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA193_9 = input.LA(1);

                         
                        int index193_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index193_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA193_10 = input.LA(1);

                         
                        int index193_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index193_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA193_11 = input.LA(1);

                         
                        int index193_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index193_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA193_12 = input.LA(1);

                         
                        int index193_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index193_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA193_13 = input.LA(1);

                         
                        int index193_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index193_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA193_14 = input.LA(1);

                         
                        int index193_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index193_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA193_15 = input.LA(1);

                         
                        int index193_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index193_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA193_16 = input.LA(1);

                         
                        int index193_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index193_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA193_17 = input.LA(1);

                         
                        int index193_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index193_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA193_18 = input.LA(1);

                         
                        int index193_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index193_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA193_19 = input.LA(1);

                         
                        int index193_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index193_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA193_20 = input.LA(1);

                         
                        int index193_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index193_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA193_21 = input.LA(1);

                         
                        int index193_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 1;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 27;}

                         
                        input.seek(index193_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA193_22 = input.LA(1);

                         
                        int index193_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 1;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 27;}

                         
                        input.seek(index193_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA193_23 = input.LA(1);

                         
                        int index193_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 27;}

                         
                        input.seek(index193_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA193_24 = input.LA(1);

                         
                        int index193_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 27;}

                         
                        input.seek(index193_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 193, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA198_eotS =
        "\77\uffff";
    static final String DFA198_eofS =
        "\1\2\76\uffff";
    static final String DFA198_minS =
        "\1\4\1\0\5\uffff\2\0\1\uffff\16\0\2\uffff\1\0\4\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\10\0\4\uffff\1\0\17\uffff";
    static final String DFA198_maxS =
        "\1\157\1\0\5\uffff\2\0\1\uffff\16\0\2\uffff\1\0\4\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\10\0\4\uffff\1\0\17\uffff";
    static final String DFA198_acceptS =
        "\2\uffff\1\2\53\uffff\1\1\1\uffff\17\1";
    static final String DFA198_specialS =
        "\1\0\1\1\5\uffff\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\2\uffff\1\22\4\uffff\1\23\1"+
        "\uffff\1\24\1\uffff\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\4\uffff"+
        "\1\35\17\uffff}>";
    static final String[] DFA198_transitionS = {
            "\1\52\1\2\1\13\1\73\1\75\1\52\1\26\1\41\2\uffff\1\2\1\47\3\2"+
            "\3\uffff\1\15\1\2\1\46\1\44\3\uffff\1\45\1\61\1\27\1\50\1\43"+
            "\20\52\1\56\1\37\1\32\1\2\1\57\1\12\1\14\6\2\1\uffff\1\2\6\uffff"+
            "\1\2\1\17\1\60\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
            "\1\74\1\76\3\1\1\uffff\1\25\1\7\1\10\1\16\2\20\1\21\1\52\1\22"+
            "\1\52\1\51\1\23\1\24\11\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA198_eot = DFA.unpackEncodedString(DFA198_eotS);
    static final short[] DFA198_eof = DFA.unpackEncodedString(DFA198_eofS);
    static final char[] DFA198_min = DFA.unpackEncodedStringToUnsignedChars(DFA198_minS);
    static final char[] DFA198_max = DFA.unpackEncodedStringToUnsignedChars(DFA198_maxS);
    static final short[] DFA198_accept = DFA.unpackEncodedString(DFA198_acceptS);
    static final short[] DFA198_special = DFA.unpackEncodedString(DFA198_specialS);
    static final short[][] DFA198_transition;

    static {
        int numStates = DFA198_transitionS.length;
        DFA198_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA198_transition[i] = DFA.unpackEncodedString(DFA198_transitionS[i]);
        }
    }

    class DFA198 extends DFA {

        public DFA198(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 198;
            this.eot = DFA198_eot;
            this.eof = DFA198_eof;
            this.min = DFA198_min;
            this.max = DFA198_max;
            this.accept = DFA198_accept;
            this.special = DFA198_special;
            this.transition = DFA198_transition;
        }
        public String getDescription() {
            return "()* loopback of 898:12: ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA198_0 = input.LA(1);

                         
                        int index198_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA198_0>=WS && LA198_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA198_0==EOF||LA198_0==SEMI||LA198_0==RPAREN||(LA198_0>=LBRACE && LA198_0<=IMPORTANT_SYM)||LA198_0==COLON||LA198_0==GREATER||(LA198_0>=DOT && LA198_0<=PIPE)||LA198_0==LESS_AND||LA198_0==RBRACKET||LA198_0==AT_SIGN) ) {s = 2;}

                        else if ( (LA198_0==SASS_MIXIN) ) {s = 7;}

                        else if ( (LA198_0==SASS_INCLUDE) ) {s = 8;}

                        else if ( (LA198_0==HASH_SYMBOL) ) {s = 10;}

                        else if ( (LA198_0==IDENT) ) {s = 11;}

                        else if ( (LA198_0==HASH) ) {s = 12;}

                        else if ( (LA198_0==GEN) ) {s = 13;}

                        else if ( (LA198_0==SASS_EXTEND) ) {s = 14;}

                        else if ( (LA198_0==SASS_VAR) ) {s = 15;}

                        else if ( ((LA198_0>=SASS_DEBUG && LA198_0<=SASS_WARN)) ) {s = 16;}

                        else if ( (LA198_0==SASS_IF) ) {s = 17;}

                        else if ( (LA198_0==SASS_FOR) ) {s = 18;}

                        else if ( (LA198_0==SASS_EACH) ) {s = 19;}

                        else if ( (LA198_0==SASS_WHILE) ) {s = 20;}

                        else if ( (LA198_0==SASS_CONTENT) ) {s = 21;}

                        else if ( (LA198_0==IMPORT_SYM) ) {s = 22;}

                        else if ( (LA198_0==PAGE_SYM) ) {s = 23;}

                        else if ( (LA198_0==PLUS) ) {s = 26;}

                        else if ( (LA198_0==MINUS) ) {s = 31;}

                        else if ( (LA198_0==COMMA) ) {s = 33;}

                        else if ( (LA198_0==FONT_FACE_SYM) ) {s = 35;}

                        else if ( (LA198_0==MOZ_DOCUMENT_SYM) ) {s = 36;}

                        else if ( (LA198_0==WEBKIT_KEYFRAMES_SYM) ) {s = 37;}

                        else if ( (LA198_0==AT_IDENT) ) {s = 38;}

                        else if ( (LA198_0==MEDIA_SYM) ) {s = 39;}

                        else if ( (LA198_0==COUNTER_STYLE_SYM) ) {s = 40;}

                        else if ( (LA198_0==SASS_RETURN) ) {s = 41;}

                        else if ( (LA198_0==NAMESPACE_SYM||LA198_0==CHARSET_SYM||(LA198_0>=TOPLEFTCORNER_SYM && LA198_0<=RIGHTBOTTOM_SYM)||LA198_0==SASS_ELSE||LA198_0==SASS_FUNCTION) ) {s = 42;}

                        else if ( (LA198_0==SOLIDUS) && (synpred33_Css3())) {s = 46;}

                        else if ( (LA198_0==TILDE) ) {s = 47;}

                        else if ( (LA198_0==NUMBER) && (synpred33_Css3())) {s = 48;}

                        else if ( (LA198_0==PERCENTAGE) && (synpred33_Css3())) {s = 49;}

                        else if ( (LA198_0==LENGTH) && (synpred33_Css3())) {s = 50;}

                        else if ( (LA198_0==EMS) && (synpred33_Css3())) {s = 51;}

                        else if ( (LA198_0==REM) && (synpred33_Css3())) {s = 52;}

                        else if ( (LA198_0==EXS) && (synpred33_Css3())) {s = 53;}

                        else if ( (LA198_0==ANGLE) && (synpred33_Css3())) {s = 54;}

                        else if ( (LA198_0==TIME) && (synpred33_Css3())) {s = 55;}

                        else if ( (LA198_0==FREQ) && (synpred33_Css3())) {s = 56;}

                        else if ( (LA198_0==RESOLUTION) && (synpred33_Css3())) {s = 57;}

                        else if ( (LA198_0==DIMENSION) && (synpred33_Css3())) {s = 58;}

                        else if ( (LA198_0==STRING) && (synpred33_Css3())) {s = 59;}

                        else if ( (LA198_0==LESS_JS_STRING) && (synpred33_Css3())) {s = 60;}

                        else if ( (LA198_0==URI) && (synpred33_Css3())) {s = 61;}

                        else if ( (LA198_0==PERCENTAGE_SYMBOL) && (synpred33_Css3())) {s = 62;}

                         
                        input.seek(index198_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA198_1 = input.LA(1);

                         
                        int index198_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index198_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA198_7 = input.LA(1);

                         
                        int index198_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index198_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA198_8 = input.LA(1);

                         
                        int index198_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index198_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA198_10 = input.LA(1);

                         
                        int index198_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index198_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA198_11 = input.LA(1);

                         
                        int index198_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index198_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA198_12 = input.LA(1);

                         
                        int index198_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index198_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA198_13 = input.LA(1);

                         
                        int index198_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index198_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA198_14 = input.LA(1);

                         
                        int index198_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index198_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA198_15 = input.LA(1);

                         
                        int index198_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}

                         
                        input.seek(index198_15);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA198_16 = input.LA(1);

                         
                        int index198_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index198_16);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA198_17 = input.LA(1);

                         
                        int index198_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index198_17);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA198_18 = input.LA(1);

                         
                        int index198_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index198_18);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA198_19 = input.LA(1);

                         
                        int index198_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index198_19);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA198_20 = input.LA(1);

                         
                        int index198_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index198_20);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA198_21 = input.LA(1);

                         
                        int index198_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index198_21);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA198_22 = input.LA(1);

                         
                        int index198_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index198_22);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA198_23 = input.LA(1);

                         
                        int index198_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index198_23);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA198_26 = input.LA(1);

                         
                        int index198_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index198_26);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA198_31 = input.LA(1);

                         
                        int index198_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index198_31);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA198_33 = input.LA(1);

                         
                        int index198_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index198_33);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA198_35 = input.LA(1);

                         
                        int index198_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index198_35);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA198_36 = input.LA(1);

                         
                        int index198_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index198_36);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA198_37 = input.LA(1);

                         
                        int index198_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index198_37);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA198_38 = input.LA(1);

                         
                        int index198_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index198_38);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA198_39 = input.LA(1);

                         
                        int index198_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index198_39);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA198_40 = input.LA(1);

                         
                        int index198_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index198_40);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA198_41 = input.LA(1);

                         
                        int index198_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index198_41);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA198_42 = input.LA(1);

                         
                        int index198_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index198_42);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA198_47 = input.LA(1);

                         
                        int index198_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index198_47);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 198, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA197_eotS =
        "\5\uffff";
    static final String DFA197_eofS =
        "\5\uffff";
    static final String DFA197_minS =
        "\2\4\3\uffff";
    static final String DFA197_maxS =
        "\2\145\3\uffff";
    static final String DFA197_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA197_specialS =
        "\5\uffff}>";
    static final String[] DFA197_transitionS = {
            "\1\3\1\uffff\5\3\1\2\3\uffff\1\3\6\uffff\1\3\1\uffff\2\3\3\uffff"+
            "\25\3\1\2\2\3\1\uffff\3\3\17\uffff\15\3\3\1\1\uffff\15\3",
            "\1\4\1\uffff\5\4\1\2\3\uffff\1\4\6\uffff\1\4\1\uffff\2\4\3"+
            "\uffff\25\4\1\2\2\4\1\uffff\3\4\17\uffff\15\4\3\1\1\uffff\15"+
            "\4",
            "",
            "",
            ""
    };

    static final short[] DFA197_eot = DFA.unpackEncodedString(DFA197_eotS);
    static final short[] DFA197_eof = DFA.unpackEncodedString(DFA197_eofS);
    static final char[] DFA197_min = DFA.unpackEncodedStringToUnsignedChars(DFA197_minS);
    static final char[] DFA197_max = DFA.unpackEncodedStringToUnsignedChars(DFA197_maxS);
    static final short[] DFA197_accept = DFA.unpackEncodedString(DFA197_acceptS);
    static final short[] DFA197_special = DFA.unpackEncodedString(DFA197_specialS);
    static final short[][] DFA197_transition;

    static {
        int numStates = DFA197_transitionS.length;
        DFA197_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA197_transition[i] = DFA.unpackEncodedString(DFA197_transitionS[i]);
        }
    }

    class DFA197 extends DFA {

        public DFA197(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 197;
            this.eot = DFA197_eot;
            this.eof = DFA197_eof;
            this.min = DFA197_min;
            this.max = DFA197_max;
            this.accept = DFA197_accept;
            this.special = DFA197_special;
            this.transition = DFA197_transition;
        }
        public String getDescription() {
            return "898:66: ( ws | ( ( ws )? operator ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA201_eotS =
        "\31\uffff";
    static final String DFA201_eofS =
        "\31\uffff";
    static final String DFA201_minS =
        "\1\4\1\0\27\uffff";
    static final String DFA201_maxS =
        "\1\145\1\0\27\uffff";
    static final String DFA201_acceptS =
        "\2\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
        "\1\17\1\20\1\21\1\22\1\23\1\24\1\uffff\1\25\1\26\1\1\1\2";
    static final String DFA201_specialS =
        "\1\uffff\1\0\27\uffff}>";
    static final String[] DFA201_transitionS = {
            "\1\23\1\uffff\1\1\1\15\1\21\2\23\4\uffff\1\23\6\uffff\1\20\1"+
            "\uffff\2\23\3\uffff\1\23\1\3\23\23\4\uffff\1\16\1\25\1\22\17"+
            "\uffff\1\23\1\2\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\17"+
            "\1\26\4\uffff\15\23",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA201_eot = DFA.unpackEncodedString(DFA201_eotS);
    static final short[] DFA201_eof = DFA.unpackEncodedString(DFA201_eofS);
    static final char[] DFA201_min = DFA.unpackEncodedStringToUnsignedChars(DFA201_minS);
    static final char[] DFA201_max = DFA.unpackEncodedStringToUnsignedChars(DFA201_maxS);
    static final short[] DFA201_accept = DFA.unpackEncodedString(DFA201_acceptS);
    static final short[] DFA201_special = DFA.unpackEncodedString(DFA201_specialS);
    static final short[][] DFA201_transition;

    static {
        int numStates = DFA201_transitionS.length;
        DFA201_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA201_transition[i] = DFA.unpackEncodedString(DFA201_transitionS[i]);
        }
    }

    class DFA201 extends DFA {

        public DFA201(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 201;
            this.eot = DFA201_eot;
            this.eof = DFA201_eof;
            this.min = DFA201_min;
            this.max = DFA201_max;
            this.accept = DFA201_accept;
            this.special = DFA201_special;
            this.transition = DFA201_transition;
        }
        public String getDescription() {
            return "904:5: ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA201_1 = input.LA(1);

                         
                        int index201_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_Css3()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index201_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 201, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA209_eotS =
        "\4\uffff";
    static final String DFA209_eofS =
        "\4\uffff";
    static final String DFA209_minS =
        "\2\13\2\uffff";
    static final String DFA209_maxS =
        "\2\127\2\uffff";
    static final String DFA209_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA209_specialS =
        "\4\uffff}>";
    static final String[] DFA209_transitionS = {
            "\1\3\2\uffff\1\2\106\uffff\3\1",
            "\1\3\2\uffff\1\2\106\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA209_eot = DFA.unpackEncodedString(DFA209_eotS);
    static final short[] DFA209_eof = DFA.unpackEncodedString(DFA209_eofS);
    static final char[] DFA209_min = DFA.unpackEncodedStringToUnsignedChars(DFA209_minS);
    static final char[] DFA209_max = DFA.unpackEncodedStringToUnsignedChars(DFA209_maxS);
    static final short[] DFA209_accept = DFA.unpackEncodedString(DFA209_acceptS);
    static final short[] DFA209_special = DFA.unpackEncodedString(DFA209_specialS);
    static final short[][] DFA209_transition;

    static {
        int numStates = DFA209_transitionS.length;
        DFA209_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA209_transition[i] = DFA.unpackEncodedString(DFA209_transitionS[i]);
        }
    }

    class DFA209 extends DFA {

        public DFA209(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 209;
            this.eot = DFA209_eot;
            this.eof = DFA209_eof;
            this.min = DFA209_min;
            this.max = DFA209_max;
            this.accept = DFA209_accept;
            this.special = DFA209_special;
            this.transition = DFA209_transition;
        }
        public String getDescription() {
            return "()* loopback of 961:17: ( ( ws )? COMMA ( ws )? fnAttribute )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA213_eotS =
        "\35\uffff";
    static final String DFA213_eofS =
        "\35\uffff";
    static final String DFA213_minS =
        "\1\4\3\0\1\uffff\24\0\4\uffff";
    static final String DFA213_maxS =
        "\1\145\3\0\1\uffff\24\0\4\uffff";
    static final String DFA213_acceptS =
        "\4\uffff\1\2\26\uffff\1\1\1\3";
    static final String DFA213_specialS =
        "\1\uffff\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\4\uffff}>";
    static final String[] DFA213_transitionS = {
            "\1\2\1\uffff\1\1\1\21\1\25\2\2\1\uffff\1\4\2\uffff\1\2\2\uffff"+
            "\1\4\2\uffff\1\4\1\24\1\uffff\2\2\3\uffff\1\2\1\7\23\2\1\uffff"+
            "\2\5\1\uffff\1\22\1\27\1\26\17\uffff\1\3\1\6\1\10\1\11\1\12"+
            "\1\13\1\14\1\15\1\16\1\17\1\20\1\23\1\30\4\uffff\15\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA213_eot = DFA.unpackEncodedString(DFA213_eotS);
    static final short[] DFA213_eof = DFA.unpackEncodedString(DFA213_eofS);
    static final char[] DFA213_min = DFA.unpackEncodedStringToUnsignedChars(DFA213_minS);
    static final char[] DFA213_max = DFA.unpackEncodedStringToUnsignedChars(DFA213_maxS);
    static final short[] DFA213_accept = DFA.unpackEncodedString(DFA213_acceptS);
    static final short[] DFA213_special = DFA.unpackEncodedString(DFA213_specialS);
    static final short[][] DFA213_transition;

    static {
        int numStates = DFA213_transitionS.length;
        DFA213_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA213_transition[i] = DFA.unpackEncodedString(DFA213_transitionS[i]);
        }
    }

    class DFA213 extends DFA {

        public DFA213(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 213;
            this.eot = DFA213_eot;
            this.eof = DFA213_eof;
            this.min = DFA213_min;
            this.max = DFA213_max;
            this.accept = DFA213_accept;
            this.special = DFA213_special;
            this.transition = DFA213_transition;
        }
        public String getDescription() {
            return "964:1: fnAttribute : ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | {...}? cp_expression | expression );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA213_1 = input.LA(1);

                         
                        int index213_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_Css3()) ) {s = 27;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index213_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA213_2 = input.LA(1);

                         
                        int index213_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 27;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 4;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 28;}

                         
                        input.seek(index213_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA213_3 = input.LA(1);

                         
                        int index213_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 27;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 4;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 28;}

                         
                        input.seek(index213_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA213_5 = input.LA(1);

                         
                        int index213_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index213_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA213_6 = input.LA(1);

                         
                        int index213_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index213_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA213_7 = input.LA(1);

                         
                        int index213_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index213_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA213_8 = input.LA(1);

                         
                        int index213_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index213_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA213_9 = input.LA(1);

                         
                        int index213_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index213_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA213_10 = input.LA(1);

                         
                        int index213_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index213_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA213_11 = input.LA(1);

                         
                        int index213_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index213_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA213_12 = input.LA(1);

                         
                        int index213_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index213_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA213_13 = input.LA(1);

                         
                        int index213_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index213_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA213_14 = input.LA(1);

                         
                        int index213_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index213_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA213_15 = input.LA(1);

                         
                        int index213_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index213_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA213_16 = input.LA(1);

                         
                        int index213_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index213_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA213_17 = input.LA(1);

                         
                        int index213_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index213_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA213_18 = input.LA(1);

                         
                        int index213_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index213_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA213_19 = input.LA(1);

                         
                        int index213_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index213_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA213_20 = input.LA(1);

                         
                        int index213_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index213_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA213_21 = input.LA(1);

                         
                        int index213_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index213_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA213_22 = input.LA(1);

                         
                        int index213_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index213_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA213_23 = input.LA(1);

                         
                        int index213_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 28;}

                         
                        input.seek(index213_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA213_24 = input.LA(1);

                         
                        int index213_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 28;}

                         
                        input.seek(index213_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 213, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA220_eotS =
        "\33\uffff";
    static final String DFA220_eofS =
        "\33\uffff";
    static final String DFA220_minS =
        "\1\4\27\0\3\uffff";
    static final String DFA220_maxS =
        "\1\145\27\0\3\uffff";
    static final String DFA220_acceptS =
        "\30\uffff\1\2\1\uffff\1\1";
    static final String DFA220_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\3\uffff}>";
    static final String[] DFA220_transitionS = {
            "\1\24\1\uffff\1\2\1\16\1\22\2\24\1\uffff\1\30\2\uffff\1\24\2"+
            "\uffff\1\30\3\uffff\1\21\1\uffff\2\24\3\uffff\1\24\1\4\23\24"+
            "\1\uffff\2\1\1\uffff\1\17\1\26\1\23\17\uffff\1\25\1\3\1\5\1"+
            "\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\20\1\27\4\uffff\15\24",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA220_eot = DFA.unpackEncodedString(DFA220_eotS);
    static final short[] DFA220_eof = DFA.unpackEncodedString(DFA220_eofS);
    static final char[] DFA220_min = DFA.unpackEncodedStringToUnsignedChars(DFA220_minS);
    static final char[] DFA220_max = DFA.unpackEncodedStringToUnsignedChars(DFA220_maxS);
    static final short[] DFA220_accept = DFA.unpackEncodedString(DFA220_acceptS);
    static final short[] DFA220_special = DFA.unpackEncodedString(DFA220_specialS);
    static final short[][] DFA220_transition;

    static {
        int numStates = DFA220_transitionS.length;
        DFA220_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA220_transition[i] = DFA.unpackEncodedString(DFA220_transitionS[i]);
        }
    }

    class DFA220 extends DFA {

        public DFA220(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 220;
            this.eot = DFA220_eot;
            this.eof = DFA220_eof;
            this.min = DFA220_min;
            this.max = DFA220_max;
            this.accept = DFA220_accept;
            this.special = DFA220_special;
            this.transition = DFA220_transition;
        }
        public String getDescription() {
            return "977:1: fnAttributeValue : ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )* | {...}? cp_math_expression );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA220_1 = input.LA(1);

                         
                        int index220_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index220_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA220_2 = input.LA(1);

                         
                        int index220_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index220_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA220_3 = input.LA(1);

                         
                        int index220_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index220_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA220_4 = input.LA(1);

                         
                        int index220_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index220_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA220_5 = input.LA(1);

                         
                        int index220_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index220_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA220_6 = input.LA(1);

                         
                        int index220_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index220_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA220_7 = input.LA(1);

                         
                        int index220_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index220_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA220_8 = input.LA(1);

                         
                        int index220_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index220_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA220_9 = input.LA(1);

                         
                        int index220_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index220_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA220_10 = input.LA(1);

                         
                        int index220_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index220_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA220_11 = input.LA(1);

                         
                        int index220_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index220_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA220_12 = input.LA(1);

                         
                        int index220_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index220_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA220_13 = input.LA(1);

                         
                        int index220_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index220_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA220_14 = input.LA(1);

                         
                        int index220_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index220_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA220_15 = input.LA(1);

                         
                        int index220_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index220_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA220_16 = input.LA(1);

                         
                        int index220_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index220_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA220_17 = input.LA(1);

                         
                        int index220_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index220_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA220_18 = input.LA(1);

                         
                        int index220_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index220_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA220_19 = input.LA(1);

                         
                        int index220_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index220_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA220_20 = input.LA(1);

                         
                        int index220_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 26;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 24;}

                         
                        input.seek(index220_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA220_21 = input.LA(1);

                         
                        int index220_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 26;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 24;}

                         
                        input.seek(index220_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA220_22 = input.LA(1);

                         
                        int index220_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index220_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA220_23 = input.LA(1);

                         
                        int index220_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index220_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 220, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA219_eotS =
        "\37\uffff";
    static final String DFA219_eofS =
        "\37\uffff";
    static final String DFA219_minS =
        "\2\4\35\uffff";
    static final String DFA219_maxS =
        "\2\145\35\uffff";
    static final String DFA219_acceptS =
        "\2\uffff\1\2\34\1";
    static final String DFA219_specialS =
        "\1\0\1\1\35\uffff}>";
    static final String[] DFA219_transitionS = {
            "\1\27\1\uffff\1\5\1\21\1\25\2\27\1\2\2\uffff\1\2\1\27\6\uffff"+
            "\1\24\1\uffff\2\27\3\uffff\1\27\1\7\23\27\1\3\2\4\1\uffff\1"+
            "\22\1\31\1\26\17\uffff\1\30\1\6\1\10\1\11\1\12\1\13\1\14\1\15"+
            "\1\16\1\17\1\20\1\23\1\32\3\1\1\uffff\15\27",
            "\1\33\1\uffff\1\5\1\21\1\25\2\33\1\2\2\uffff\1\2\1\33\6\uffff"+
            "\1\24\1\uffff\2\33\3\uffff\1\33\1\7\23\33\1\3\2\4\1\uffff\1"+
            "\22\1\35\1\26\17\uffff\1\34\1\6\1\10\1\11\1\12\1\13\1\14\1\15"+
            "\1\16\1\17\1\20\1\23\1\36\3\1\1\uffff\15\33",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA219_eot = DFA.unpackEncodedString(DFA219_eotS);
    static final short[] DFA219_eof = DFA.unpackEncodedString(DFA219_eofS);
    static final char[] DFA219_min = DFA.unpackEncodedStringToUnsignedChars(DFA219_minS);
    static final char[] DFA219_max = DFA.unpackEncodedStringToUnsignedChars(DFA219_maxS);
    static final short[] DFA219_accept = DFA.unpackEncodedString(DFA219_acceptS);
    static final short[] DFA219_special = DFA.unpackEncodedString(DFA219_specialS);
    static final short[][] DFA219_transition;

    static {
        int numStates = DFA219_transitionS.length;
        DFA219_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA219_transition[i] = DFA.unpackEncodedString(DFA219_transitionS[i]);
        }
    }

    class DFA219 extends DFA {

        public DFA219(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 219;
            this.eot = DFA219_eot;
            this.eof = DFA219_eof;
            this.min = DFA219_min;
            this.max = DFA219_max;
            this.accept = DFA219_accept;
            this.special = DFA219_special;
            this.transition = DFA219_transition;
        }
        public String getDescription() {
            return "()* loopback of 979:18: ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA219_0 = input.LA(1);

                         
                        int index219_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA219_0>=WS && LA219_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA219_0==COMMA||LA219_0==RPAREN) ) {s = 2;}

                        else if ( (LA219_0==SOLIDUS) && (synpred36_Css3())) {s = 3;}

                        else if ( ((LA219_0>=MINUS && LA219_0<=PLUS)) && (synpred36_Css3())) {s = 4;}

                        else if ( (LA219_0==IDENT) && (synpred36_Css3())) {s = 5;}

                        else if ( (LA219_0==NUMBER) && (synpred36_Css3())) {s = 6;}

                        else if ( (LA219_0==PERCENTAGE) && (synpred36_Css3())) {s = 7;}

                        else if ( (LA219_0==LENGTH) && (synpred36_Css3())) {s = 8;}

                        else if ( (LA219_0==EMS) && (synpred36_Css3())) {s = 9;}

                        else if ( (LA219_0==REM) && (synpred36_Css3())) {s = 10;}

                        else if ( (LA219_0==EXS) && (synpred36_Css3())) {s = 11;}

                        else if ( (LA219_0==ANGLE) && (synpred36_Css3())) {s = 12;}

                        else if ( (LA219_0==TIME) && (synpred36_Css3())) {s = 13;}

                        else if ( (LA219_0==FREQ) && (synpred36_Css3())) {s = 14;}

                        else if ( (LA219_0==RESOLUTION) && (synpred36_Css3())) {s = 15;}

                        else if ( (LA219_0==DIMENSION) && (synpred36_Css3())) {s = 16;}

                        else if ( (LA219_0==STRING) && (synpred36_Css3())) {s = 17;}

                        else if ( (LA219_0==TILDE) && (synpred36_Css3())) {s = 18;}

                        else if ( (LA219_0==LESS_JS_STRING) && (synpred36_Css3())) {s = 19;}

                        else if ( (LA219_0==GEN) && (synpred36_Css3())) {s = 20;}

                        else if ( (LA219_0==URI) && (synpred36_Css3())) {s = 21;}

                        else if ( (LA219_0==HASH) && (synpred36_Css3())) {s = 22;}

                        else if ( (LA219_0==NAMESPACE_SYM||(LA219_0>=CHARSET_SYM && LA219_0<=IMPORT_SYM)||LA219_0==MEDIA_SYM||(LA219_0>=AT_IDENT && LA219_0<=MOZ_DOCUMENT_SYM)||LA219_0==WEBKIT_KEYFRAMES_SYM||(LA219_0>=PAGE_SYM && LA219_0<=RIGHTBOTTOM_SYM)||(LA219_0>=SASS_CONTENT && LA219_0<=SASS_WHILE)) && (synpred36_Css3())) {s = 23;}

                        else if ( (LA219_0==SASS_VAR) && (synpred36_Css3())) {s = 24;}

                        else if ( (LA219_0==HASH_SYMBOL) && (synpred36_Css3())) {s = 25;}

                        else if ( (LA219_0==PERCENTAGE_SYMBOL) && (synpred36_Css3())) {s = 26;}

                         
                        input.seek(index219_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA219_1 = input.LA(1);

                         
                        int index219_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA219_1==COMMA||LA219_1==RPAREN) ) {s = 2;}

                        else if ( ((LA219_1>=WS && LA219_1<=COMMENT)) ) {s = 1;}

                        else if ( ((LA219_1>=MINUS && LA219_1<=PLUS)) && (synpred36_Css3())) {s = 4;}

                        else if ( (LA219_1==IDENT) && (synpred36_Css3())) {s = 5;}

                        else if ( (LA219_1==NUMBER) && (synpred36_Css3())) {s = 6;}

                        else if ( (LA219_1==PERCENTAGE) && (synpred36_Css3())) {s = 7;}

                        else if ( (LA219_1==LENGTH) && (synpred36_Css3())) {s = 8;}

                        else if ( (LA219_1==EMS) && (synpred36_Css3())) {s = 9;}

                        else if ( (LA219_1==REM) && (synpred36_Css3())) {s = 10;}

                        else if ( (LA219_1==EXS) && (synpred36_Css3())) {s = 11;}

                        else if ( (LA219_1==ANGLE) && (synpred36_Css3())) {s = 12;}

                        else if ( (LA219_1==TIME) && (synpred36_Css3())) {s = 13;}

                        else if ( (LA219_1==FREQ) && (synpred36_Css3())) {s = 14;}

                        else if ( (LA219_1==RESOLUTION) && (synpred36_Css3())) {s = 15;}

                        else if ( (LA219_1==DIMENSION) && (synpred36_Css3())) {s = 16;}

                        else if ( (LA219_1==STRING) && (synpred36_Css3())) {s = 17;}

                        else if ( (LA219_1==TILDE) && (synpred36_Css3())) {s = 18;}

                        else if ( (LA219_1==LESS_JS_STRING) && (synpred36_Css3())) {s = 19;}

                        else if ( (LA219_1==GEN) && (synpred36_Css3())) {s = 20;}

                        else if ( (LA219_1==URI) && (synpred36_Css3())) {s = 21;}

                        else if ( (LA219_1==HASH) && (synpred36_Css3())) {s = 22;}

                        else if ( (LA219_1==NAMESPACE_SYM||(LA219_1>=CHARSET_SYM && LA219_1<=IMPORT_SYM)||LA219_1==MEDIA_SYM||(LA219_1>=AT_IDENT && LA219_1<=MOZ_DOCUMENT_SYM)||LA219_1==WEBKIT_KEYFRAMES_SYM||(LA219_1>=PAGE_SYM && LA219_1<=RIGHTBOTTOM_SYM)||(LA219_1>=SASS_CONTENT && LA219_1<=SASS_WHILE)) && (synpred36_Css3())) {s = 27;}

                        else if ( (LA219_1==SASS_VAR) && (synpred36_Css3())) {s = 28;}

                        else if ( (LA219_1==HASH_SYMBOL) && (synpred36_Css3())) {s = 29;}

                        else if ( (LA219_1==PERCENTAGE_SYMBOL) && (synpred36_Css3())) {s = 30;}

                        else if ( (LA219_1==SOLIDUS) && (synpred36_Css3())) {s = 3;}

                         
                        input.seek(index219_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 219, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA218_eotS =
        "\5\uffff";
    static final String DFA218_eofS =
        "\5\uffff";
    static final String DFA218_minS =
        "\2\4\3\uffff";
    static final String DFA218_maxS =
        "\2\145\3\uffff";
    static final String DFA218_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA218_specialS =
        "\5\uffff}>";
    static final String[] DFA218_transitionS = {
            "\1\3\1\uffff\5\3\4\uffff\1\3\6\uffff\1\3\1\uffff\2\3\3\uffff"+
            "\25\3\1\2\2\3\1\uffff\3\3\17\uffff\15\3\3\1\1\uffff\15\3",
            "\1\4\1\uffff\5\4\4\uffff\1\4\6\uffff\1\4\1\uffff\2\4\3\uffff"+
            "\25\4\1\2\2\4\1\uffff\3\4\17\uffff\15\4\3\1\1\uffff\15\4",
            "",
            "",
            ""
    };

    static final short[] DFA218_eot = DFA.unpackEncodedString(DFA218_eotS);
    static final short[] DFA218_eof = DFA.unpackEncodedString(DFA218_eofS);
    static final char[] DFA218_min = DFA.unpackEncodedStringToUnsignedChars(DFA218_minS);
    static final char[] DFA218_max = DFA.unpackEncodedStringToUnsignedChars(DFA218_maxS);
    static final short[] DFA218_accept = DFA.unpackEncodedString(DFA218_acceptS);
    static final short[] DFA218_special = DFA.unpackEncodedString(DFA218_specialS);
    static final short[][] DFA218_transition;

    static {
        int numStates = DFA218_transitionS.length;
        DFA218_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA218_transition[i] = DFA.unpackEncodedString(DFA218_transitionS[i]);
        }
    }

    class DFA218 extends DFA {

        public DFA218(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 218;
            this.eot = DFA218_eot;
            this.eof = DFA218_eof;
            this.min = DFA218_min;
            this.max = DFA218_max;
            this.accept = DFA218_accept;
            this.special = DFA218_special;
            this.transition = DFA218_transition;
        }
        public String getDescription() {
            return "979:71: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA227_eotS =
        "\4\uffff";
    static final String DFA227_eofS =
        "\2\3\2\uffff";
    static final String DFA227_minS =
        "\2\4\2\uffff";
    static final String DFA227_maxS =
        "\2\157\2\uffff";
    static final String DFA227_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA227_specialS =
        "\4\uffff}>";
    static final String[] DFA227_transitionS = {
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\2\15\3\11\uffff\1\3",
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\2\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA227_eot = DFA.unpackEncodedString(DFA227_eotS);
    static final short[] DFA227_eof = DFA.unpackEncodedString(DFA227_eofS);
    static final char[] DFA227_min = DFA.unpackEncodedStringToUnsignedChars(DFA227_minS);
    static final char[] DFA227_max = DFA.unpackEncodedStringToUnsignedChars(DFA227_maxS);
    static final short[] DFA227_accept = DFA.unpackEncodedString(DFA227_acceptS);
    static final short[] DFA227_special = DFA.unpackEncodedString(DFA227_specialS);
    static final short[][] DFA227_transition;

    static {
        int numStates = DFA227_transitionS.length;
        DFA227_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA227_transition[i] = DFA.unpackEncodedString(DFA227_transitionS[i]);
        }
    }

    class DFA227 extends DFA {

        public DFA227(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 227;
            this.eot = DFA227_eot;
            this.eof = DFA227_eof;
            this.min = DFA227_min;
            this.max = DFA227_max;
            this.accept = DFA227_accept;
            this.special = DFA227_special;
            this.transition = DFA227_transition;
        }
        public String getDescription() {
            return "998:72: ( ( ws )? SASS_DEFAULT )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA232_eotS =
        "\60\uffff";
    static final String DFA232_eofS =
        "\1\2\57\uffff";
    static final String DFA232_minS =
        "\1\4\1\0\35\uffff\1\0\20\uffff";
    static final String DFA232_maxS =
        "\1\157\1\0\35\uffff\1\0\20\uffff";
    static final String DFA232_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA232_specialS =
        "\1\uffff\1\0\35\uffff\1\1\20\uffff}>";
    static final String[] DFA232_transitionS = {
            "\3\2\2\uffff\2\2\1\37\2\uffff\4\2\4\uffff\4\2\3\uffff\1\2\1"+
            "\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\14\uffff\3"+
            "\1\16\2\11\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA232_eot = DFA.unpackEncodedString(DFA232_eotS);
    static final short[] DFA232_eof = DFA.unpackEncodedString(DFA232_eofS);
    static final char[] DFA232_min = DFA.unpackEncodedStringToUnsignedChars(DFA232_minS);
    static final char[] DFA232_max = DFA.unpackEncodedStringToUnsignedChars(DFA232_maxS);
    static final short[] DFA232_accept = DFA.unpackEncodedString(DFA232_acceptS);
    static final short[] DFA232_special = DFA.unpackEncodedString(DFA232_specialS);
    static final short[][] DFA232_transition;

    static {
        int numStates = DFA232_transitionS.length;
        DFA232_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA232_transition[i] = DFA.unpackEncodedString(DFA232_transitionS[i]);
        }
    }

    class DFA232 extends DFA {

        public DFA232(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 232;
            this.eot = DFA232_eot;
            this.eof = DFA232_eof;
            this.min = DFA232_min;
            this.max = DFA232_max;
            this.accept = DFA232_accept;
            this.special = DFA232_special;
            this.transition = DFA232_transition;
        }
        public String getDescription() {
            return "()* loopback of 1014:5: ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA232_1 = input.LA(1);

                         
                        int index232_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_Css3()) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index232_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA232_31 = input.LA(1);

                         
                        int index232_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_Css3()) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index232_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 232, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA236_eotS =
        "\105\uffff";
    static final String DFA236_eofS =
        "\1\2\104\uffff";
    static final String DFA236_minS =
        "\1\4\1\0\1\uffff\1\0\1\uffff\2\0\1\uffff\3\0\2\uffff\3\0\1\uffff"+
        "\11\0\1\uffff\1\0\4\uffff\1\0\3\uffff\10\0\1\uffff\1\0\6\uffff\1"+
        "\0\20\uffff";
    static final String DFA236_maxS =
        "\1\157\1\0\1\uffff\1\0\1\uffff\2\0\1\uffff\3\0\2\uffff\3\0\1\uffff"+
        "\11\0\1\uffff\1\0\4\uffff\1\0\3\uffff\10\0\1\uffff\1\0\6\uffff\1"+
        "\0\20\uffff";
    static final String DFA236_acceptS =
        "\2\uffff\1\3\57\uffff\1\1\1\2\1\uffff\20\2";
    static final String DFA236_specialS =
        "\1\0\1\1\1\uffff\1\2\1\uffff\1\3\1\4\1\uffff\1\5\1\6\1\7\2\uffff"+
        "\1\10\1\11\1\12\1\uffff\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
        "\1\23\1\uffff\1\24\4\uffff\1\25\3\uffff\1\26\1\27\1\30\1\31\1\32"+
        "\1\33\1\34\1\35\1\uffff\1\36\6\uffff\1\37\20\uffff}>";
    static final String[] DFA236_transitionS = {
            "\1\55\1\2\1\6\1\100\1\102\1\55\1\27\1\2\1\104\1\uffff\1\2\1"+
            "\50\2\2\1\3\1\62\1\uffff\1\63\1\10\1\2\1\47\1\45\3\uffff\1\46"+
            "\1\66\1\30\1\51\1\44\20\55\1\uffff\1\40\1\33\1\31\1\64\1\5\1"+
            "\15\6\2\1\uffff\1\2\6\uffff\1\2\1\12\1\65\1\67\1\70\1\71\1\72"+
            "\1\73\1\74\1\75\1\76\1\77\1\101\1\103\3\1\1\2\1\26\1\11\1\16"+
            "\1\17\2\21\1\22\1\55\1\23\1\53\1\52\1\24\1\25\6\62\2\2\1\uffff"+
            "\1\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA236_eot = DFA.unpackEncodedString(DFA236_eotS);
    static final short[] DFA236_eof = DFA.unpackEncodedString(DFA236_eofS);
    static final char[] DFA236_min = DFA.unpackEncodedStringToUnsignedChars(DFA236_minS);
    static final char[] DFA236_max = DFA.unpackEncodedStringToUnsignedChars(DFA236_maxS);
    static final short[] DFA236_accept = DFA.unpackEncodedString(DFA236_acceptS);
    static final short[] DFA236_special = DFA.unpackEncodedString(DFA236_specialS);
    static final short[][] DFA236_transition;

    static {
        int numStates = DFA236_transitionS.length;
        DFA236_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA236_transition[i] = DFA.unpackEncodedString(DFA236_transitionS[i]);
        }
    }

    class DFA236 extends DFA {

        public DFA236(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 236;
            this.eot = DFA236_eot;
            this.eof = DFA236_eof;
            this.min = DFA236_min;
            this.max = DFA236_max;
            this.accept = DFA236_accept;
            this.special = DFA236_special;
            this.transition = DFA236_transition;
        }
        public String getDescription() {
            return "()* loopback of 1030:5: ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA236_0 = input.LA(1);

                         
                        int index236_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA236_0>=WS && LA236_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA236_0==EOF||LA236_0==SEMI||LA236_0==COMMA||LA236_0==RPAREN||(LA236_0>=LBRACE && LA236_0<=RBRACE)||LA236_0==COLON||(LA236_0>=DOT && LA236_0<=PIPE)||LA236_0==LESS_AND||LA236_0==RBRACKET||LA236_0==SASS_DEFAULT||(LA236_0>=CP_DOTS && LA236_0<=LESS_REST)||LA236_0==AT_SIGN) ) {s = 2;}

                        else if ( (LA236_0==IMPORTANT_SYM) ) {s = 3;}

                        else if ( (LA236_0==HASH_SYMBOL) ) {s = 5;}

                        else if ( (LA236_0==IDENT) ) {s = 6;}

                        else if ( (LA236_0==GEN) ) {s = 8;}

                        else if ( (LA236_0==SASS_MIXIN) ) {s = 9;}

                        else if ( (LA236_0==SASS_VAR) ) {s = 10;}

                        else if ( (LA236_0==HASH) ) {s = 13;}

                        else if ( (LA236_0==SASS_INCLUDE) ) {s = 14;}

                        else if ( (LA236_0==SASS_EXTEND) ) {s = 15;}

                        else if ( ((LA236_0>=SASS_DEBUG && LA236_0<=SASS_WARN)) ) {s = 17;}

                        else if ( (LA236_0==SASS_IF) ) {s = 18;}

                        else if ( (LA236_0==SASS_FOR) ) {s = 19;}

                        else if ( (LA236_0==SASS_EACH) ) {s = 20;}

                        else if ( (LA236_0==SASS_WHILE) ) {s = 21;}

                        else if ( (LA236_0==SASS_CONTENT) ) {s = 22;}

                        else if ( (LA236_0==IMPORT_SYM) ) {s = 23;}

                        else if ( (LA236_0==PAGE_SYM) ) {s = 24;}

                        else if ( (LA236_0==GREATER) ) {s = 25;}

                        else if ( (LA236_0==PLUS) ) {s = 27;}

                        else if ( (LA236_0==MINUS) ) {s = 32;}

                        else if ( (LA236_0==FONT_FACE_SYM) ) {s = 36;}

                        else if ( (LA236_0==MOZ_DOCUMENT_SYM) ) {s = 37;}

                        else if ( (LA236_0==WEBKIT_KEYFRAMES_SYM) ) {s = 38;}

                        else if ( (LA236_0==AT_IDENT) ) {s = 39;}

                        else if ( (LA236_0==MEDIA_SYM) ) {s = 40;}

                        else if ( (LA236_0==COUNTER_STYLE_SYM) ) {s = 41;}

                        else if ( (LA236_0==SASS_RETURN) ) {s = 42;}

                        else if ( (LA236_0==SASS_FUNCTION) ) {s = 43;}

                        else if ( (LA236_0==NAMESPACE_SYM||LA236_0==CHARSET_SYM||(LA236_0>=TOPLEFTCORNER_SYM && LA236_0<=RIGHTBOTTOM_SYM)||LA236_0==SASS_ELSE) ) {s = 45;}

                        else if ( (LA236_0==AND||(LA236_0>=OR && LA236_0<=GREATER_OR_EQ)) && (synpred38_Css3())) {s = 50;}

                        else if ( (LA236_0==NOT) && (synpred39_Css3())) {s = 51;}

                        else if ( (LA236_0==TILDE) ) {s = 52;}

                        else if ( (LA236_0==NUMBER) && (synpred39_Css3())) {s = 53;}

                        else if ( (LA236_0==PERCENTAGE) && (synpred39_Css3())) {s = 54;}

                        else if ( (LA236_0==LENGTH) && (synpred39_Css3())) {s = 55;}

                        else if ( (LA236_0==EMS) && (synpred39_Css3())) {s = 56;}

                        else if ( (LA236_0==REM) && (synpred39_Css3())) {s = 57;}

                        else if ( (LA236_0==EXS) && (synpred39_Css3())) {s = 58;}

                        else if ( (LA236_0==ANGLE) && (synpred39_Css3())) {s = 59;}

                        else if ( (LA236_0==TIME) && (synpred39_Css3())) {s = 60;}

                        else if ( (LA236_0==FREQ) && (synpred39_Css3())) {s = 61;}

                        else if ( (LA236_0==RESOLUTION) && (synpred39_Css3())) {s = 62;}

                        else if ( (LA236_0==DIMENSION) && (synpred39_Css3())) {s = 63;}

                        else if ( (LA236_0==STRING) && (synpred39_Css3())) {s = 64;}

                        else if ( (LA236_0==LESS_JS_STRING) && (synpred39_Css3())) {s = 65;}

                        else if ( (LA236_0==URI) && (synpred39_Css3())) {s = 66;}

                        else if ( (LA236_0==PERCENTAGE_SYMBOL) && (synpred39_Css3())) {s = 67;}

                        else if ( (LA236_0==LPAREN) && (synpred39_Css3())) {s = 68;}

                         
                        input.seek(index236_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA236_1 = input.LA(1);

                         
                        int index236_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Css3()) ) {s = 50;}

                        else if ( (synpred39_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index236_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA236_3 = input.LA(1);

                         
                        int index236_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index236_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA236_5 = input.LA(1);

                         
                        int index236_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index236_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA236_6 = input.LA(1);

                         
                        int index236_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index236_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA236_8 = input.LA(1);

                         
                        int index236_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index236_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA236_9 = input.LA(1);

                         
                        int index236_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}

                         
                        input.seek(index236_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA236_10 = input.LA(1);

                         
                        int index236_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}

                         
                        input.seek(index236_10);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA236_13 = input.LA(1);

                         
                        int index236_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index236_13);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA236_14 = input.LA(1);

                         
                        int index236_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}

                         
                        input.seek(index236_14);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA236_15 = input.LA(1);

                         
                        int index236_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}

                         
                        input.seek(index236_15);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA236_17 = input.LA(1);

                         
                        int index236_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}

                         
                        input.seek(index236_17);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA236_18 = input.LA(1);

                         
                        int index236_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}

                         
                        input.seek(index236_18);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA236_19 = input.LA(1);

                         
                        int index236_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}

                         
                        input.seek(index236_19);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA236_20 = input.LA(1);

                         
                        int index236_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}

                         
                        input.seek(index236_20);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA236_21 = input.LA(1);

                         
                        int index236_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}

                         
                        input.seek(index236_21);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA236_22 = input.LA(1);

                         
                        int index236_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}

                         
                        input.seek(index236_22);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA236_23 = input.LA(1);

                         
                        int index236_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index236_23);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA236_24 = input.LA(1);

                         
                        int index236_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index236_24);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA236_25 = input.LA(1);

                         
                        int index236_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Css3()) ) {s = 50;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index236_25);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA236_27 = input.LA(1);

                         
                        int index236_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index236_27);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA236_32 = input.LA(1);

                         
                        int index236_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index236_32);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA236_36 = input.LA(1);

                         
                        int index236_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index236_36);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA236_37 = input.LA(1);

                         
                        int index236_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index236_37);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA236_38 = input.LA(1);

                         
                        int index236_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index236_38);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA236_39 = input.LA(1);

                         
                        int index236_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index236_39);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA236_40 = input.LA(1);

                         
                        int index236_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index236_40);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA236_41 = input.LA(1);

                         
                        int index236_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index236_41);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA236_42 = input.LA(1);

                         
                        int index236_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}

                         
                        input.seek(index236_42);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA236_43 = input.LA(1);

                         
                        int index236_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}

                         
                        input.seek(index236_43);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA236_45 = input.LA(1);

                         
                        int index236_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred39_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index236_45);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA236_52 = input.LA(1);

                         
                        int index236_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index236_52);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 236, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA242_eotS =
        "\33\uffff";
    static final String DFA242_eofS =
        "\33\uffff";
    static final String DFA242_minS =
        "\1\4\30\uffff\1\0\1\uffff";
    static final String DFA242_maxS =
        "\1\145\30\uffff\1\0\1\uffff";
    static final String DFA242_acceptS =
        "\1\uffff\30\1\1\uffff\1\2";
    static final String DFA242_specialS =
        "\1\0\30\uffff\1\1\1\uffff}>";
    static final String[] DFA242_transitionS = {
            "\1\24\1\uffff\1\2\1\16\1\22\2\24\1\uffff\1\31\2\uffff\1\24\2"+
            "\uffff\1\30\3\uffff\1\21\1\uffff\2\24\3\uffff\1\24\1\4\23\24"+
            "\1\uffff\2\1\1\uffff\1\17\1\26\1\23\17\uffff\1\25\1\3\1\5\1"+
            "\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\20\1\27\4\uffff\15\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA242_eot = DFA.unpackEncodedString(DFA242_eotS);
    static final short[] DFA242_eof = DFA.unpackEncodedString(DFA242_eofS);
    static final char[] DFA242_min = DFA.unpackEncodedStringToUnsignedChars(DFA242_minS);
    static final char[] DFA242_max = DFA.unpackEncodedStringToUnsignedChars(DFA242_maxS);
    static final short[] DFA242_accept = DFA.unpackEncodedString(DFA242_acceptS);
    static final short[] DFA242_special = DFA.unpackEncodedString(DFA242_specialS);
    static final short[][] DFA242_transition;

    static {
        int numStates = DFA242_transitionS.length;
        DFA242_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA242_transition[i] = DFA.unpackEncodedString(DFA242_transitionS[i]);
        }
    }

    class DFA242 extends DFA {

        public DFA242(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 242;
            this.eot = DFA242_eot;
            this.eof = DFA242_eof;
            this.min = DFA242_min;
            this.max = DFA242_max;
            this.accept = DFA242_accept;
            this.special = DFA242_special;
            this.transition = DFA242_transition;
        }
        public String getDescription() {
            return "1044:9: ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA242_0 = input.LA(1);

                         
                        int index242_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA242_0>=MINUS && LA242_0<=PLUS)) && (synpred40_Css3())) {s = 1;}

                        else if ( (LA242_0==IDENT) && (synpred40_Css3())) {s = 2;}

                        else if ( (LA242_0==NUMBER) && (synpred40_Css3())) {s = 3;}

                        else if ( (LA242_0==PERCENTAGE) && (synpred40_Css3())) {s = 4;}

                        else if ( (LA242_0==LENGTH) && (synpred40_Css3())) {s = 5;}

                        else if ( (LA242_0==EMS) && (synpred40_Css3())) {s = 6;}

                        else if ( (LA242_0==REM) && (synpred40_Css3())) {s = 7;}

                        else if ( (LA242_0==EXS) && (synpred40_Css3())) {s = 8;}

                        else if ( (LA242_0==ANGLE) && (synpred40_Css3())) {s = 9;}

                        else if ( (LA242_0==TIME) && (synpred40_Css3())) {s = 10;}

                        else if ( (LA242_0==FREQ) && (synpred40_Css3())) {s = 11;}

                        else if ( (LA242_0==RESOLUTION) && (synpred40_Css3())) {s = 12;}

                        else if ( (LA242_0==DIMENSION) && (synpred40_Css3())) {s = 13;}

                        else if ( (LA242_0==STRING) && (synpred40_Css3())) {s = 14;}

                        else if ( (LA242_0==TILDE) && (synpred40_Css3())) {s = 15;}

                        else if ( (LA242_0==LESS_JS_STRING) && (synpred40_Css3())) {s = 16;}

                        else if ( (LA242_0==GEN) && (synpred40_Css3())) {s = 17;}

                        else if ( (LA242_0==URI) && (synpred40_Css3())) {s = 18;}

                        else if ( (LA242_0==HASH) && (synpred40_Css3())) {s = 19;}

                        else if ( (LA242_0==NAMESPACE_SYM||(LA242_0>=CHARSET_SYM && LA242_0<=IMPORT_SYM)||LA242_0==MEDIA_SYM||(LA242_0>=AT_IDENT && LA242_0<=MOZ_DOCUMENT_SYM)||LA242_0==WEBKIT_KEYFRAMES_SYM||(LA242_0>=PAGE_SYM && LA242_0<=RIGHTBOTTOM_SYM)||(LA242_0>=SASS_CONTENT && LA242_0<=SASS_WHILE)) && (synpred40_Css3())) {s = 20;}

                        else if ( (LA242_0==SASS_VAR) && (synpred40_Css3())) {s = 21;}

                        else if ( (LA242_0==HASH_SYMBOL) && (synpred40_Css3())) {s = 22;}

                        else if ( (LA242_0==PERCENTAGE_SYMBOL) && (synpred40_Css3())) {s = 23;}

                        else if ( (LA242_0==IMPORTANT_SYM) && (synpred40_Css3())) {s = 24;}

                        else if ( (LA242_0==LPAREN) ) {s = 25;}

                         
                        input.seek(index242_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA242_25 = input.LA(1);

                         
                        int index242_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_Css3()) ) {s = 24;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index242_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 242, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA246_eotS =
        "\106\uffff";
    static final String DFA246_eofS =
        "\1\2\105\uffff";
    static final String DFA246_minS =
        "\1\4\1\0\4\uffff\1\0\30\uffff\1\0\5\uffff\1\0\40\uffff";
    static final String DFA246_maxS =
        "\1\157\1\0\4\uffff\1\0\30\uffff\1\0\5\uffff\1\0\40\uffff";
    static final String DFA246_acceptS =
        "\2\uffff\1\2\102\uffff\1\1";
    static final String DFA246_specialS =
        "\1\0\1\1\4\uffff\1\2\30\uffff\1\3\5\uffff\1\4\40\uffff}>";
    static final String[] DFA246_transitionS = {
            "\11\2\1\uffff\6\2\1\uffff\5\2\3\uffff\25\2\1\105\1\6\1\37\10"+
            "\2\1\45\1\2\1\uffff\1\2\6\uffff\16\2\3\1\26\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA246_eot = DFA.unpackEncodedString(DFA246_eotS);
    static final short[] DFA246_eof = DFA.unpackEncodedString(DFA246_eofS);
    static final char[] DFA246_min = DFA.unpackEncodedStringToUnsignedChars(DFA246_minS);
    static final char[] DFA246_max = DFA.unpackEncodedStringToUnsignedChars(DFA246_maxS);
    static final short[] DFA246_accept = DFA.unpackEncodedString(DFA246_acceptS);
    static final short[] DFA246_special = DFA.unpackEncodedString(DFA246_specialS);
    static final short[][] DFA246_transition;

    static {
        int numStates = DFA246_transitionS.length;
        DFA246_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA246_transition[i] = DFA.unpackEncodedString(DFA246_transitionS[i]);
        }
    }

    class DFA246 extends DFA {

        public DFA246(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 246;
            this.eot = DFA246_eot;
            this.eof = DFA246_eof;
            this.min = DFA246_min;
            this.max = DFA246_max;
            this.accept = DFA246_accept;
            this.special = DFA246_special;
            this.transition = DFA246_transition;
        }
        public String getDescription() {
            return "()* loopback of 1071:10: ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA246_0 = input.LA(1);

                         
                        int index246_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA246_0>=WS && LA246_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA246_0==EOF||(LA246_0>=NAMESPACE_SYM && LA246_0<=LPAREN)||(LA246_0>=RPAREN && LA246_0<=AND)||(LA246_0>=NOT && LA246_0<=MOZ_DOCUMENT_SYM)||(LA246_0>=WEBKIT_KEYFRAMES_SYM && LA246_0<=RIGHTBOTTOM_SYM)||(LA246_0>=GREATER && LA246_0<=SASS_EXTEND_ONLY_SELECTOR)||LA246_0==PIPE||LA246_0==LESS_AND||(LA246_0>=RBRACKET && LA246_0<=PERCENTAGE_SYMBOL)||(LA246_0>=SASS_DEFAULT && LA246_0<=LESS_REST)||LA246_0==AT_SIGN) ) {s = 2;}

                        else if ( (LA246_0==MINUS) ) {s = 6;}

                        else if ( (LA246_0==PLUS) ) {s = 31;}

                        else if ( (LA246_0==STAR) ) {s = 37;}

                        else if ( (LA246_0==SOLIDUS) && (synpred41_Css3())) {s = 69;}

                         
                        input.seek(index246_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA246_1 = input.LA(1);

                         
                        int index246_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_Css3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index246_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA246_6 = input.LA(1);

                         
                        int index246_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_Css3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index246_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA246_31 = input.LA(1);

                         
                        int index246_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_Css3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index246_31);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA246_37 = input.LA(1);

                         
                        int index246_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_Css3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index246_37);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 246, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA251_eotS =
        "\6\uffff";
    static final String DFA251_eofS =
        "\6\uffff";
    static final String DFA251_minS =
        "\2\4\3\uffff\1\4";
    static final String DFA251_maxS =
        "\2\145\3\uffff\1\145";
    static final String DFA251_acceptS =
        "\2\uffff\1\1\1\2\1\3\1\uffff";
    static final String DFA251_specialS =
        "\6\uffff}>";
    static final String[] DFA251_transitionS = {
            "\1\2\1\uffff\5\2\1\uffff\1\4\2\uffff\1\2\2\uffff\1\3\3\uffff"+
            "\1\2\1\uffff\2\2\3\uffff\25\2\1\uffff\2\1\1\uffff\3\2\17\uffff"+
            "\15\2\4\uffff\15\2",
            "\1\2\1\uffff\5\2\1\uffff\1\4\2\uffff\1\2\6\uffff\1\2\1\uffff"+
            "\2\2\3\uffff\25\2\4\uffff\3\2\17\uffff\15\2\3\5\1\uffff\15\2",
            "",
            "",
            "",
            "\1\2\1\uffff\5\2\1\uffff\1\4\2\uffff\1\2\6\uffff\1\2\1\uffff"+
            "\2\2\3\uffff\25\2\4\uffff\3\2\17\uffff\15\2\3\5\1\uffff\15\2"
    };

    static final short[] DFA251_eot = DFA.unpackEncodedString(DFA251_eotS);
    static final short[] DFA251_eof = DFA.unpackEncodedString(DFA251_eofS);
    static final char[] DFA251_min = DFA.unpackEncodedStringToUnsignedChars(DFA251_minS);
    static final char[] DFA251_max = DFA.unpackEncodedStringToUnsignedChars(DFA251_maxS);
    static final short[] DFA251_accept = DFA.unpackEncodedString(DFA251_acceptS);
    static final short[] DFA251_special = DFA.unpackEncodedString(DFA251_specialS);
    static final short[][] DFA251_transition;

    static {
        int numStates = DFA251_transitionS.length;
        DFA251_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA251_transition[i] = DFA.unpackEncodedString(DFA251_transitionS[i]);
        }
    }

    class DFA251 extends DFA {

        public DFA251(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 251;
            this.eot = DFA251_eot;
            this.eof = DFA251_eof;
            this.min = DFA251_min;
            this.max = DFA251_max;
            this.accept = DFA251_accept;
            this.special = DFA251_special;
            this.transition = DFA251_transition;
        }
        public String getDescription() {
            return "1076:1: cp_math_expression_atom : ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA256_eotS =
        "\4\uffff";
    static final String DFA256_eofS =
        "\4\uffff";
    static final String DFA256_minS =
        "\2\20\2\uffff";
    static final String DFA256_maxS =
        "\2\156\2\uffff";
    static final String DFA256_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA256_specialS =
        "\4\uffff}>";
    static final String[] DFA256_transitionS = {
            "\1\3\104\uffff\3\1\26\uffff\1\2",
            "\1\3\104\uffff\3\1\26\uffff\1\2",
            "",
            ""
    };

    static final short[] DFA256_eot = DFA.unpackEncodedString(DFA256_eotS);
    static final short[] DFA256_eof = DFA.unpackEncodedString(DFA256_eofS);
    static final char[] DFA256_min = DFA.unpackEncodedStringToUnsignedChars(DFA256_minS);
    static final char[] DFA256_max = DFA.unpackEncodedStringToUnsignedChars(DFA256_maxS);
    static final short[] DFA256_accept = DFA.unpackEncodedString(DFA256_acceptS);
    static final short[] DFA256_special = DFA.unpackEncodedString(DFA256_specialS);
    static final short[][] DFA256_transition;

    static {
        int numStates = DFA256_transitionS.length;
        DFA256_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA256_transition[i] = DFA.unpackEncodedString(DFA256_transitionS[i]);
        }
    }

    class DFA256 extends DFA {

        public DFA256(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 256;
            this.eot = DFA256_eot;
            this.eof = DFA256_eof;
            this.min = DFA256_min;
            this.max = DFA256_max;
            this.accept = DFA256_accept;
            this.special = DFA256_special;
            this.transition = DFA256_transition;
        }
        public String getDescription() {
            return "1092:81: ( ( ws )? less_mixin_guarded )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA260_eotS =
        "\4\uffff";
    static final String DFA260_eofS =
        "\4\uffff";
    static final String DFA260_minS =
        "\2\14\2\uffff";
    static final String DFA260_maxS =
        "\2\127\2\uffff";
    static final String DFA260_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA260_specialS =
        "\4\uffff}>";
    static final String[] DFA260_transitionS = {
            "\1\2\3\uffff\1\3\104\uffff\3\1",
            "\1\2\3\uffff\1\3\104\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA260_eot = DFA.unpackEncodedString(DFA260_eotS);
    static final short[] DFA260_eof = DFA.unpackEncodedString(DFA260_eofS);
    static final char[] DFA260_min = DFA.unpackEncodedStringToUnsignedChars(DFA260_minS);
    static final char[] DFA260_max = DFA.unpackEncodedStringToUnsignedChars(DFA260_maxS);
    static final short[] DFA260_accept = DFA.unpackEncodedString(DFA260_acceptS);
    static final short[] DFA260_special = DFA.unpackEncodedString(DFA260_specialS);
    static final short[][] DFA260_transition;

    static {
        int numStates = DFA260_transitionS.length;
        DFA260_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA260_transition[i] = DFA.unpackEncodedString(DFA260_transitionS[i]);
        }
    }

    class DFA260 extends DFA {

        public DFA260(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 260;
            this.eot = DFA260_eot;
            this.eof = DFA260_eof;
            this.min = DFA260_min;
            this.max = DFA260_max;
            this.accept = DFA260_accept;
            this.special = DFA260_special;
            this.transition = DFA260_transition;
        }
        public String getDescription() {
            return "1094:55: ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA266_eotS =
        "\4\uffff";
    static final String DFA266_eofS =
        "\2\3\2\uffff";
    static final String DFA266_minS =
        "\2\4\2\uffff";
    static final String DFA266_maxS =
        "\2\157\2\uffff";
    static final String DFA266_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA266_specialS =
        "\4\uffff}>";
    static final String[] DFA266_transitionS = {
            "\3\3\2\uffff\3\3\1\2\2\uffff\1\3\1\uffff\2\3\3\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\3\3\1\2\2\uffff\1\3\1\uffff\2\3\3\uffff\4\3\3"+
            "\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3"+
            "\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA266_eot = DFA.unpackEncodedString(DFA266_eotS);
    static final short[] DFA266_eof = DFA.unpackEncodedString(DFA266_eofS);
    static final char[] DFA266_min = DFA.unpackEncodedStringToUnsignedChars(DFA266_minS);
    static final char[] DFA266_max = DFA.unpackEncodedStringToUnsignedChars(DFA266_maxS);
    static final short[] DFA266_accept = DFA.unpackEncodedString(DFA266_acceptS);
    static final short[] DFA266_special = DFA.unpackEncodedString(DFA266_specialS);
    static final short[][] DFA266_transition;

    static {
        int numStates = DFA266_transitionS.length;
        DFA266_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA266_transition[i] = DFA.unpackEncodedString(DFA266_transitionS[i]);
        }
    }

    class DFA266 extends DFA {

        public DFA266(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 266;
            this.eot = DFA266_eot;
            this.eof = DFA266_eof;
            this.min = DFA266_min;
            this.max = DFA266_max;
            this.accept = DFA266_accept;
            this.special = DFA266_special;
            this.transition = DFA266_transition;
        }
        public String getDescription() {
            return "1104:45: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA270_eotS =
        "\4\uffff";
    static final String DFA270_eofS =
        "\2\3\2\uffff";
    static final String DFA270_minS =
        "\2\4\2\uffff";
    static final String DFA270_maxS =
        "\2\157\2\uffff";
    static final String DFA270_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA270_specialS =
        "\4\uffff}>";
    static final String[] DFA270_transitionS = {
            "\3\3\2\uffff\3\3\1\2\2\uffff\4\3\3\uffff\4\3\3\uffff\1\3\1\uffff"+
            "\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff\3\1\1\uffff"+
            "\15\3\11\uffff\1\3",
            "\3\3\2\uffff\3\3\1\2\2\uffff\4\3\3\uffff\4\3\3\uffff\1\3\1"+
            "\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff\3"+
            "\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA270_eot = DFA.unpackEncodedString(DFA270_eotS);
    static final short[] DFA270_eof = DFA.unpackEncodedString(DFA270_eofS);
    static final char[] DFA270_min = DFA.unpackEncodedStringToUnsignedChars(DFA270_minS);
    static final char[] DFA270_max = DFA.unpackEncodedStringToUnsignedChars(DFA270_maxS);
    static final short[] DFA270_accept = DFA.unpackEncodedString(DFA270_acceptS);
    static final short[] DFA270_special = DFA.unpackEncodedString(DFA270_specialS);
    static final short[][] DFA270_transition;

    static {
        int numStates = DFA270_transitionS.length;
        DFA270_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA270_transition[i] = DFA.unpackEncodedString(DFA270_transitionS[i]);
        }
    }

    class DFA270 extends DFA {

        public DFA270(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 270;
            this.eot = DFA270_eot;
            this.eof = DFA270_eof;
            this.min = DFA270_min;
            this.max = DFA270_max;
            this.accept = DFA270_accept;
            this.special = DFA270_special;
            this.transition = DFA270_transition;
        }
        public String getDescription() {
            return "1106:57: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA272_eotS =
        "\4\uffff";
    static final String DFA272_eofS =
        "\2\3\2\uffff";
    static final String DFA272_minS =
        "\2\4\2\uffff";
    static final String DFA272_maxS =
        "\2\157\2\uffff";
    static final String DFA272_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA272_specialS =
        "\4\uffff}>";
    static final String[] DFA272_transitionS = {
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\2\2\3\3\uffff\4\3\3\uffff\1\3"+
            "\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\2\2\3\3\uffff\4\3\3\uffff\1"+
            "\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA272_eot = DFA.unpackEncodedString(DFA272_eotS);
    static final short[] DFA272_eof = DFA.unpackEncodedString(DFA272_eofS);
    static final char[] DFA272_min = DFA.unpackEncodedStringToUnsignedChars(DFA272_minS);
    static final char[] DFA272_max = DFA.unpackEncodedStringToUnsignedChars(DFA272_maxS);
    static final short[] DFA272_accept = DFA.unpackEncodedString(DFA272_acceptS);
    static final short[] DFA272_special = DFA.unpackEncodedString(DFA272_specialS);
    static final short[][] DFA272_transition;

    static {
        int numStates = DFA272_transitionS.length;
        DFA272_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA272_transition[i] = DFA.unpackEncodedString(DFA272_transitionS[i]);
        }
    }

    class DFA272 extends DFA {

        public DFA272(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 272;
            this.eot = DFA272_eot;
            this.eof = DFA272_eof;
            this.min = DFA272_min;
            this.max = DFA272_max;
            this.accept = DFA272_accept;
            this.special = DFA272_special;
            this.transition = DFA272_transition;
        }
        public String getDescription() {
            return "1106:102: ( ( ws )? cp_mixin_block )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA282_eotS =
        "\7\uffff";
    static final String DFA282_eofS =
        "\7\uffff";
    static final String DFA282_minS =
        "\3\4\1\uffff\1\4\1\uffff\1\4";
    static final String DFA282_maxS =
        "\1\145\2\154\1\uffff\1\154\1\uffff\1\154";
    static final String DFA282_acceptS =
        "\3\uffff\1\2\1\uffff\1\1\1\uffff";
    static final String DFA282_specialS =
        "\7\uffff}>";
    static final String[] DFA282_transitionS = {
            "\1\1\1\uffff\3\3\2\1\1\uffff\1\3\2\uffff\1\1\2\uffff\1\3\2\uffff"+
            "\2\3\1\uffff\2\1\3\uffff\1\1\1\3\23\1\1\uffff\2\3\1\uffff\3"+
            "\3\17\uffff\1\2\14\3\4\uffff\15\1",
            "\11\3\1\uffff\2\3\2\uffff\2\3\1\uffff\2\3\1\5\2\3\3\uffff\34"+
            "\3\4\uffff\1\3\12\uffff\15\3\3\4\1\uffff\24\3",
            "\11\3\1\uffff\2\3\2\uffff\2\3\1\uffff\2\3\1\5\2\3\3\uffff\34"+
            "\3\4\uffff\1\3\12\uffff\15\3\3\6\1\uffff\24\3",
            "",
            "\11\3\1\uffff\2\3\2\uffff\2\3\1\uffff\2\3\1\5\2\3\3\uffff\34"+
            "\3\4\uffff\1\3\12\uffff\15\3\3\4\1\uffff\24\3",
            "",
            "\11\3\1\uffff\2\3\2\uffff\2\3\1\uffff\2\3\1\5\2\3\3\uffff\34"+
            "\3\4\uffff\1\3\12\uffff\15\3\3\6\1\uffff\24\3"
    };

    static final short[] DFA282_eot = DFA.unpackEncodedString(DFA282_eotS);
    static final short[] DFA282_eof = DFA.unpackEncodedString(DFA282_eofS);
    static final char[] DFA282_min = DFA.unpackEncodedStringToUnsignedChars(DFA282_minS);
    static final char[] DFA282_max = DFA.unpackEncodedStringToUnsignedChars(DFA282_maxS);
    static final short[] DFA282_accept = DFA.unpackEncodedString(DFA282_acceptS);
    static final short[] DFA282_special = DFA.unpackEncodedString(DFA282_specialS);
    static final short[][] DFA282_transition;

    static {
        int numStates = DFA282_transitionS.length;
        DFA282_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA282_transition[i] = DFA.unpackEncodedString(DFA282_transitionS[i]);
        }
    }

    class DFA282 extends DFA {

        public DFA282(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 282;
            this.eot = DFA282_eot;
            this.eof = DFA282_eof;
            this.min = DFA282_min;
            this.max = DFA282_max;
            this.accept = DFA282_accept;
            this.special = DFA282_special;
            this.transition = DFA282_transition;
        }
        public String getDescription() {
            return "1131:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA285_eotS =
        "\5\uffff";
    static final String DFA285_eofS =
        "\5\uffff";
    static final String DFA285_minS =
        "\1\5\1\4\1\uffff\1\4\1\uffff";
    static final String DFA285_maxS =
        "\2\155\1\uffff\1\155\1\uffff";
    static final String DFA285_acceptS =
        "\2\uffff\1\2\1\uffff\1\1";
    static final String DFA285_specialS =
        "\5\uffff}>";
    static final String[] DFA285_transitionS = {
            "\1\1\5\uffff\1\1\2\uffff\1\2\135\uffff\2\2",
            "\1\4\4\uffff\2\4\3\uffff\1\2\1\4\10\uffff\2\4\3\uffff\1\4\1"+
            "\uffff\23\4\26\uffff\1\4\14\uffff\3\3\1\uffff\15\4\6\uffff\2"+
            "\2",
            "",
            "\1\4\4\uffff\2\4\3\uffff\1\2\1\4\10\uffff\2\4\3\uffff\1\4\1"+
            "\uffff\23\4\26\uffff\1\4\14\uffff\3\3\1\uffff\15\4\6\uffff\2"+
            "\2",
            ""
    };

    static final short[] DFA285_eot = DFA.unpackEncodedString(DFA285_eotS);
    static final short[] DFA285_eof = DFA.unpackEncodedString(DFA285_eofS);
    static final char[] DFA285_min = DFA.unpackEncodedStringToUnsignedChars(DFA285_minS);
    static final char[] DFA285_max = DFA.unpackEncodedStringToUnsignedChars(DFA285_maxS);
    static final short[] DFA285_accept = DFA.unpackEncodedString(DFA285_acceptS);
    static final short[] DFA285_special = DFA.unpackEncodedString(DFA285_specialS);
    static final short[][] DFA285_transition;

    static {
        int numStates = DFA285_transitionS.length;
        DFA285_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA285_transition[i] = DFA.unpackEncodedString(DFA285_transitionS[i]);
        }
    }

    class DFA285 extends DFA {

        public DFA285(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 285;
            this.eot = DFA285_eot;
            this.eof = DFA285_eof;
            this.min = DFA285_min;
            this.max = DFA285_max;
            this.accept = DFA285_accept;
            this.special = DFA285_special;
            this.transition = DFA285_transition;
        }
        public String getDescription() {
            return "()* loopback of 1146:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA299_eotS =
        "\4\uffff";
    static final String DFA299_eofS =
        "\4\uffff";
    static final String DFA299_minS =
        "\2\13\2\uffff";
    static final String DFA299_maxS =
        "\2\127\2\uffff";
    static final String DFA299_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA299_specialS =
        "\4\uffff}>";
    static final String[] DFA299_transitionS = {
            "\1\3\4\uffff\1\2\2\uffff\1\3\101\uffff\3\1",
            "\1\3\4\uffff\1\2\2\uffff\1\3\101\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA299_eot = DFA.unpackEncodedString(DFA299_eotS);
    static final short[] DFA299_eof = DFA.unpackEncodedString(DFA299_eofS);
    static final char[] DFA299_min = DFA.unpackEncodedStringToUnsignedChars(DFA299_minS);
    static final char[] DFA299_max = DFA.unpackEncodedStringToUnsignedChars(DFA299_maxS);
    static final short[] DFA299_accept = DFA.unpackEncodedString(DFA299_acceptS);
    static final short[] DFA299_special = DFA.unpackEncodedString(DFA299_specialS);
    static final short[][] DFA299_transition;

    static {
        int numStates = DFA299_transitionS.length;
        DFA299_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA299_transition[i] = DFA.unpackEncodedString(DFA299_transitionS[i]);
        }
    }

    class DFA299 extends DFA {

        public DFA299(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 299;
            this.eot = DFA299_eot;
            this.eof = DFA299_eof;
            this.min = DFA299_min;
            this.max = DFA299_max;
            this.accept = DFA299_accept;
            this.special = DFA299_special;
            this.transition = DFA299_transition;
        }
        public String getDescription() {
            return "()* loopback of 1161:34: ( ( ws )? ( COMMA | AND ) ( ws )? less_condition )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA315_eotS =
        "\4\uffff";
    static final String DFA315_eofS =
        "\4\uffff";
    static final String DFA315_minS =
        "\2\6\2\uffff";
    static final String DFA315_maxS =
        "\2\127\2\uffff";
    static final String DFA315_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA315_specialS =
        "\4\uffff}>";
    static final String[] DFA315_transitionS = {
            "\1\3\4\uffff\1\3\4\uffff\1\2\6\uffff\1\3\33\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\4\3\2\uffff\1\3\2\uffff\1\3\6\uffff\1\3\15\uffff"+
            "\3\1",
            "\1\3\4\uffff\1\3\4\uffff\1\2\6\uffff\1\3\33\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\4\3\2\uffff\1\3\2\uffff\1\3\6\uffff\1\3\15\uffff"+
            "\3\1",
            "",
            ""
    };

    static final short[] DFA315_eot = DFA.unpackEncodedString(DFA315_eotS);
    static final short[] DFA315_eof = DFA.unpackEncodedString(DFA315_eofS);
    static final char[] DFA315_min = DFA.unpackEncodedStringToUnsignedChars(DFA315_minS);
    static final char[] DFA315_max = DFA.unpackEncodedStringToUnsignedChars(DFA315_maxS);
    static final short[] DFA315_accept = DFA.unpackEncodedString(DFA315_acceptS);
    static final short[] DFA315_special = DFA.unpackEncodedString(DFA315_specialS);
    static final short[][] DFA315_transition;

    static {
        int numStates = DFA315_transitionS.length;
        DFA315_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA315_transition[i] = DFA.unpackEncodedString(DFA315_transitionS[i]);
        }
    }

    class DFA315 extends DFA {

        public DFA315(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 315;
            this.eot = DFA315_eot;
            this.eof = DFA315_eof;
            this.min = DFA315_min;
            this.max = DFA315_max;
            this.accept = DFA315_accept;
            this.special = DFA315_special;
            this.transition = DFA315_transition;
        }
        public String getDescription() {
            return "()* loopback of 1210:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA319_eotS =
        "\4\uffff";
    static final String DFA319_eofS =
        "\4\uffff";
    static final String DFA319_minS =
        "\2\6\2\uffff";
    static final String DFA319_maxS =
        "\2\127\2\uffff";
    static final String DFA319_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA319_specialS =
        "\4\uffff}>";
    static final String[] DFA319_transitionS = {
            "\1\3\20\uffff\1\2\33\uffff\1\3\3\uffff\3\3\33\uffff\3\1",
            "\1\3\20\uffff\1\2\33\uffff\1\3\3\uffff\3\3\33\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA319_eot = DFA.unpackEncodedString(DFA319_eotS);
    static final short[] DFA319_eof = DFA.unpackEncodedString(DFA319_eofS);
    static final char[] DFA319_min = DFA.unpackEncodedStringToUnsignedChars(DFA319_minS);
    static final char[] DFA319_max = DFA.unpackEncodedStringToUnsignedChars(DFA319_maxS);
    static final short[] DFA319_accept = DFA.unpackEncodedString(DFA319_acceptS);
    static final short[] DFA319_special = DFA.unpackEncodedString(DFA319_specialS);
    static final short[][] DFA319_transition;

    static {
        int numStates = DFA319_transitionS.length;
        DFA319_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA319_transition[i] = DFA.unpackEncodedString(DFA319_transitionS[i]);
        }
    }

    class DFA319 extends DFA {

        public DFA319(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 319;
            this.eot = DFA319_eot;
            this.eof = DFA319_eof;
            this.min = DFA319_min;
            this.max = DFA319_max;
            this.accept = DFA319_accept;
            this.special = DFA319_special;
            this.transition = DFA319_transition;
        }
        public String getDescription() {
            return "()* loopback of 1228:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA327_eotS =
        "\4\uffff";
    static final String DFA327_eofS =
        "\4\uffff";
    static final String DFA327_minS =
        "\2\4\2\uffff";
    static final String DFA327_maxS =
        "\2\160\2\uffff";
    static final String DFA327_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA327_specialS =
        "\4\uffff}>";
    static final String[] DFA327_transitionS = {
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3\1\2",
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3\1\2",
            "",
            ""
    };

    static final short[] DFA327_eot = DFA.unpackEncodedString(DFA327_eotS);
    static final short[] DFA327_eof = DFA.unpackEncodedString(DFA327_eofS);
    static final char[] DFA327_min = DFA.unpackEncodedStringToUnsignedChars(DFA327_minS);
    static final char[] DFA327_max = DFA.unpackEncodedStringToUnsignedChars(DFA327_maxS);
    static final short[] DFA327_accept = DFA.unpackEncodedString(DFA327_acceptS);
    static final short[] DFA327_special = DFA.unpackEncodedString(DFA327_specialS);
    static final short[][] DFA327_transition;

    static {
        int numStates = DFA327_transitionS.length;
        DFA327_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA327_transition[i] = DFA.unpackEncodedString(DFA327_transitionS[i]);
        }
    }

    class DFA327 extends DFA {

        public DFA327(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 327;
            this.eot = DFA327_eot;
            this.eof = DFA327_eof;
            this.min = DFA327_min;
            this.max = DFA327_max;
            this.accept = DFA327_accept;
            this.special = DFA327_special;
            this.transition = DFA327_transition;
        }
        public String getDescription() {
            return "1269:43: ( ( ws )? SASS_OPTIONAL )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA331_eotS =
        "\10\uffff";
    static final String DFA331_eofS =
        "\2\3\6\uffff";
    static final String DFA331_minS =
        "\2\4\1\6\1\uffff\2\6\1\uffff\1\6";
    static final String DFA331_maxS =
        "\2\157\1\127\1\uffff\2\127\1\uffff\1\127";
    static final String DFA331_acceptS =
        "\3\uffff\1\2\2\uffff\1\1\1\uffff";
    static final String DFA331_specialS =
        "\10\uffff}>";
    static final String[] DFA331_transitionS = {
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\7\3\1\2\5\3\11\uffff\1\3",
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\7\3\1\4\5\3\11\uffff\1\3",
            "\1\6\11\uffff\1\6\6\uffff\1\3\75\uffff\3\5",
            "",
            "\1\6\11\uffff\1\6\6\uffff\1\3\75\uffff\3\7",
            "\1\6\11\uffff\1\6\6\uffff\1\3\75\uffff\3\5",
            "",
            "\1\6\11\uffff\1\6\6\uffff\1\3\75\uffff\3\7"
    };

    static final short[] DFA331_eot = DFA.unpackEncodedString(DFA331_eotS);
    static final short[] DFA331_eof = DFA.unpackEncodedString(DFA331_eofS);
    static final char[] DFA331_min = DFA.unpackEncodedStringToUnsignedChars(DFA331_minS);
    static final char[] DFA331_max = DFA.unpackEncodedStringToUnsignedChars(DFA331_maxS);
    static final short[] DFA331_accept = DFA.unpackEncodedString(DFA331_acceptS);
    static final short[] DFA331_special = DFA.unpackEncodedString(DFA331_specialS);
    static final short[][] DFA331_transition;

    static {
        int numStates = DFA331_transitionS.length;
        DFA331_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA331_transition[i] = DFA.unpackEncodedString(DFA331_transitionS[i]);
        }
    }

    class DFA331 extends DFA {

        public DFA331(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 331;
            this.eot = DFA331_eot;
            this.eof = DFA331_eof;
            this.min = DFA331_min;
            this.max = DFA331_max;
            this.accept = DFA331_accept;
            this.special = DFA331_special;
            this.transition = DFA331_transition;
        }
        public String getDescription() {
            return "1289:63: ( ( ws )? sass_else )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA338_eotS =
        "\5\uffff";
    static final String DFA338_eofS =
        "\5\uffff";
    static final String DFA338_minS =
        "\1\140\2\6\2\uffff";
    static final String DFA338_maxS =
        "\1\140\2\127\2\uffff";
    static final String DFA338_acceptS =
        "\3\uffff\1\1\1\2";
    static final String DFA338_specialS =
        "\5\uffff}>";
    static final String[] DFA338_transitionS = {
            "\1\1",
            "\1\4\11\uffff\1\3\104\uffff\3\2",
            "\1\4\11\uffff\1\3\104\uffff\3\2",
            "",
            ""
    };

    static final short[] DFA338_eot = DFA.unpackEncodedString(DFA338_eotS);
    static final short[] DFA338_eof = DFA.unpackEncodedString(DFA338_eofS);
    static final char[] DFA338_min = DFA.unpackEncodedStringToUnsignedChars(DFA338_minS);
    static final char[] DFA338_max = DFA.unpackEncodedStringToUnsignedChars(DFA338_maxS);
    static final short[] DFA338_accept = DFA.unpackEncodedString(DFA338_acceptS);
    static final short[] DFA338_special = DFA.unpackEncodedString(DFA338_specialS);
    static final short[][] DFA338_transition;

    static {
        int numStates = DFA338_transitionS.length;
        DFA338_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA338_transition[i] = DFA.unpackEncodedString(DFA338_transitionS[i]);
        }
    }

    class DFA338 extends DFA {

        public DFA338(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 338;
            this.eot = DFA338_eot;
            this.eof = DFA338_eof;
            this.min = DFA338_min;
            this.max = DFA338_max;
            this.accept = DFA338_accept;
            this.special = DFA338_special;
            this.transition = DFA338_transition;
        }
        public String getDescription() {
            return "1292:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA337_eotS =
        "\10\uffff";
    static final String DFA337_eofS =
        "\2\3\6\uffff";
    static final String DFA337_minS =
        "\2\4\1\6\1\uffff\2\6\1\uffff\1\6";
    static final String DFA337_maxS =
        "\2\157\1\127\1\uffff\2\127\1\uffff\1\127";
    static final String DFA337_acceptS =
        "\3\uffff\1\2\2\uffff\1\1\1\uffff";
    static final String DFA337_specialS =
        "\10\uffff}>";
    static final String[] DFA337_transitionS = {
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\7\3\1\2\5\3\11\uffff\1\3",
            "\3\3\2\uffff\3\3\3\uffff\1\3\1\uffff\1\3\4\uffff\4\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\7\3\1\4\5\3\11\uffff\1\3",
            "\1\6\11\uffff\1\6\6\uffff\1\3\75\uffff\3\5",
            "",
            "\1\6\11\uffff\1\6\6\uffff\1\3\75\uffff\3\7",
            "\1\6\11\uffff\1\6\6\uffff\1\3\75\uffff\3\5",
            "",
            "\1\6\11\uffff\1\6\6\uffff\1\3\75\uffff\3\7"
    };

    static final short[] DFA337_eot = DFA.unpackEncodedString(DFA337_eotS);
    static final short[] DFA337_eof = DFA.unpackEncodedString(DFA337_eofS);
    static final char[] DFA337_min = DFA.unpackEncodedStringToUnsignedChars(DFA337_minS);
    static final char[] DFA337_max = DFA.unpackEncodedStringToUnsignedChars(DFA337_maxS);
    static final short[] DFA337_accept = DFA.unpackEncodedString(DFA337_acceptS);
    static final short[] DFA337_special = DFA.unpackEncodedString(DFA337_specialS);
    static final short[][] DFA337_transition;

    static {
        int numStates = DFA337_transitionS.length;
        DFA337_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA337_transition[i] = DFA.unpackEncodedString(DFA337_transitionS[i]);
        }
    }

    class DFA337 extends DFA {

        public DFA337(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 337;
            this.eot = DFA337_eot;
            this.eof = DFA337_eof;
            this.min = DFA337_min;
            this.max = DFA337_max;
            this.accept = DFA337_accept;
            this.special = DFA337_special;
            this.transition = DFA337_transition;
        }
        public String getDescription() {
            return "1296:110: ( ( ws )? sass_else )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA358_eotS =
        "\4\uffff";
    static final String DFA358_eofS =
        "\4\uffff";
    static final String DFA358_minS =
        "\2\5\2\uffff";
    static final String DFA358_maxS =
        "\2\127\2\uffff";
    static final String DFA358_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA358_specialS =
        "\4\uffff}>";
    static final String[] DFA358_transitionS = {
            "\1\3\14\uffff\1\2\102\uffff\3\1",
            "\1\3\14\uffff\1\2\102\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA358_eot = DFA.unpackEncodedString(DFA358_eotS);
    static final short[] DFA358_eof = DFA.unpackEncodedString(DFA358_eofS);
    static final char[] DFA358_min = DFA.unpackEncodedStringToUnsignedChars(DFA358_minS);
    static final char[] DFA358_max = DFA.unpackEncodedStringToUnsignedChars(DFA358_maxS);
    static final short[] DFA358_accept = DFA.unpackEncodedString(DFA358_acceptS);
    static final short[] DFA358_special = DFA.unpackEncodedString(DFA358_specialS);
    static final short[][] DFA358_transition;

    static {
        int numStates = DFA358_transitionS.length;
        DFA358_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA358_transition[i] = DFA.unpackEncodedString(DFA358_transitionS[i]);
        }
    }

    class DFA358 extends DFA {

        public DFA358(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 358;
            this.eot = DFA358_eot;
            this.eof = DFA358_eof;
            this.min = DFA358_min;
            this.max = DFA358_max;
            this.accept = DFA358_accept;
            this.special = DFA358_special;
            this.transition = DFA358_transition;
        }
        public String getDescription() {
            return "393:22: ( ( ws )? IMPORTANT_SYM )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA381_eotS =
        "\4\uffff";
    static final String DFA381_eofS =
        "\4\uffff";
    static final String DFA381_minS =
        "\2\5\2\uffff";
    static final String DFA381_maxS =
        "\2\127\2\uffff";
    static final String DFA381_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA381_specialS =
        "\4\uffff}>";
    static final String[] DFA381_transitionS = {
            "\1\3\14\uffff\1\2\102\uffff\3\1",
            "\1\3\14\uffff\1\2\102\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA381_eot = DFA.unpackEncodedString(DFA381_eotS);
    static final short[] DFA381_eof = DFA.unpackEncodedString(DFA381_eofS);
    static final char[] DFA381_min = DFA.unpackEncodedStringToUnsignedChars(DFA381_minS);
    static final char[] DFA381_max = DFA.unpackEncodedStringToUnsignedChars(DFA381_maxS);
    static final short[] DFA381_accept = DFA.unpackEncodedString(DFA381_acceptS);
    static final short[] DFA381_special = DFA.unpackEncodedString(DFA381_specialS);
    static final short[][] DFA381_transition;

    static {
        int numStates = DFA381_transitionS.length;
        DFA381_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA381_transition[i] = DFA.unpackEncodedString(DFA381_transitionS[i]);
        }
    }

    class DFA381 extends DFA {

        public DFA381(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 381;
            this.eot = DFA381_eot;
            this.eof = DFA381_eof;
            this.min = DFA381_min;
            this.max = DFA381_max;
            this.accept = DFA381_accept;
            this.special = DFA381_special;
            this.transition = DFA381_transition;
        }
        public String getDescription() {
            return "670:22: ( ( ws )? IMPORTANT_SYM )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA390_eotS =
        "\5\uffff";
    static final String DFA390_eofS =
        "\5\uffff";
    static final String DFA390_minS =
        "\2\4\3\uffff";
    static final String DFA390_maxS =
        "\2\145\3\uffff";
    static final String DFA390_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA390_specialS =
        "\5\uffff}>";
    static final String[] DFA390_transitionS = {
            "\1\3\1\uffff\5\3\1\2\3\uffff\1\3\6\uffff\1\3\1\uffff\2\3\3\uffff"+
            "\25\3\1\2\2\3\1\uffff\3\3\17\uffff\15\3\3\1\1\uffff\15\3",
            "\1\4\1\uffff\5\4\1\2\3\uffff\1\4\6\uffff\1\4\1\uffff\2\4\3"+
            "\uffff\25\4\1\2\2\4\1\uffff\3\4\17\uffff\15\4\3\1\1\uffff\15"+
            "\4",
            "",
            "",
            ""
    };

    static final short[] DFA390_eot = DFA.unpackEncodedString(DFA390_eotS);
    static final short[] DFA390_eof = DFA.unpackEncodedString(DFA390_eofS);
    static final char[] DFA390_min = DFA.unpackEncodedStringToUnsignedChars(DFA390_minS);
    static final char[] DFA390_max = DFA.unpackEncodedStringToUnsignedChars(DFA390_maxS);
    static final short[] DFA390_accept = DFA.unpackEncodedString(DFA390_acceptS);
    static final short[] DFA390_special = DFA.unpackEncodedString(DFA390_specialS);
    static final short[][] DFA390_transition;

    static {
        int numStates = DFA390_transitionS.length;
        DFA390_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA390_transition[i] = DFA.unpackEncodedString(DFA390_transitionS[i]);
        }
    }

    class DFA390 extends DFA {

        public DFA390(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 390;
            this.eot = DFA390_eot;
            this.eof = DFA390_eof;
            this.min = DFA390_min;
            this.max = DFA390_max;
            this.accept = DFA390_accept;
            this.special = DFA390_special;
            this.transition = DFA390_transition;
        }
        public String getDescription() {
            return "898:15: ( ws | ( ( ws )? operator ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA395_eotS =
        "\5\uffff";
    static final String DFA395_eofS =
        "\5\uffff";
    static final String DFA395_minS =
        "\2\4\3\uffff";
    static final String DFA395_maxS =
        "\2\145\3\uffff";
    static final String DFA395_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA395_specialS =
        "\5\uffff}>";
    static final String[] DFA395_transitionS = {
            "\1\3\1\uffff\5\3\4\uffff\1\3\6\uffff\1\3\1\uffff\2\3\3\uffff"+
            "\25\3\1\2\2\3\1\uffff\3\3\17\uffff\15\3\3\1\1\uffff\15\3",
            "\1\4\1\uffff\5\4\4\uffff\1\4\6\uffff\1\4\1\uffff\2\4\3\uffff"+
            "\25\4\1\2\2\4\1\uffff\3\4\17\uffff\15\4\3\1\1\uffff\15\4",
            "",
            "",
            ""
    };

    static final short[] DFA395_eot = DFA.unpackEncodedString(DFA395_eotS);
    static final short[] DFA395_eof = DFA.unpackEncodedString(DFA395_eofS);
    static final char[] DFA395_min = DFA.unpackEncodedStringToUnsignedChars(DFA395_minS);
    static final char[] DFA395_max = DFA.unpackEncodedStringToUnsignedChars(DFA395_maxS);
    static final short[] DFA395_accept = DFA.unpackEncodedString(DFA395_acceptS);
    static final short[] DFA395_special = DFA.unpackEncodedString(DFA395_specialS);
    static final short[][] DFA395_transition;

    static {
        int numStates = DFA395_transitionS.length;
        DFA395_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA395_transition[i] = DFA.unpackEncodedString(DFA395_transitionS[i]);
        }
    }

    class DFA395 extends DFA {

        public DFA395(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 395;
            this.eot = DFA395_eot;
            this.eof = DFA395_eof;
            this.min = DFA395_min;
            this.max = DFA395_max;
            this.accept = DFA395_accept;
            this.special = DFA395_special;
            this.transition = DFA395_transition;
        }
        public String getDescription() {
            return "979:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
 

    public static final BitSet FOLLOW_ws_in_styleSheet120 = new BitSet(new long[]{0x7FFBFFFFA3C08E70L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_charSet_in_styleSheet130 = new BitSet(new long[]{0x7FFBFFFFA3C08E70L,0x0000803FFEE00181L});
    public static final BitSet FOLLOW_ws_in_styleSheet132 = new BitSet(new long[]{0x7FFBFFFFA3C08E70L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_imports_in_styleSheet146 = new BitSet(new long[]{0x7FFBFFFFA3C08E70L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_namespaces_in_styleSheet157 = new BitSet(new long[]{0x7FFBFFFFA3C08E70L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_body_in_styleSheet168 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_styleSheet176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespace_in_namespaces193 = new BitSet(new long[]{0x0000000000000012L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_namespaces195 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_NAMESPACE_SYM_in_namespace211 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_namespace213 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000E00000L});
    public static final BitSet FOLLOW_namespacePrefixName_in_namespace217 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_namespace219 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000E00000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_namespace224 = new BitSet(new long[]{0x0000000000000020L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_namespace226 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_namespace229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_namespacePrefixName242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_resourceIdentifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARSET_SYM_in_charSet276 = new BitSet(new long[]{0x0000000000000080L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_charSet278 = new BitSet(new long[]{0x0000000000000080L,0x0000000000E00000L});
    public static final BitSet FOLLOW_charSetValue_in_charSet281 = new BitSet(new long[]{0x0000000000000020L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_charSet283 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_charSet286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_charSetValue300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_imports314 = new BitSet(new long[]{0x0000000000000020L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_imports316 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_imports319 = new BitSet(new long[]{0x0000000000000402L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_imports321 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_IMPORT_SYM_in_importItem347 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_importItem349 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000E00000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem352 = new BitSet(new long[]{0x0083FFFFA3709652L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_ws_in_importItem362 = new BitSet(new long[]{0x0083FFFFA3709650L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_mediaQueryList_in_importItem365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_SYM_in_importItem398 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_importItem400 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000E00000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem403 = new BitSet(new long[]{0x0083FFFFA3709E52L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_ws_in_importItem406 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_importItem409 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_importItem411 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000E00000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem414 = new BitSet(new long[]{0x0083FFFFA3709E52L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_ws_in_importItem426 = new BitSet(new long[]{0x0083FFFFA3709650L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_mediaQueryList_in_importItem429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_SYM_in_importItem453 = new BitSet(new long[]{0x00000000000011C0L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_importItem455 = new BitSet(new long[]{0x00000000000011C0L,0x0000000000E00000L});
    public static final BitSet FOLLOW_LPAREN_in_importItem459 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LESS_IMPORT_TYPE_in_importItem461 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_importItem463 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_importItem465 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000E00000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem470 = new BitSet(new long[]{0x0083FFFFA3709652L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_ws_in_importItem480 = new BitSet(new long[]{0x0083FFFFA3709650L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_mediaQueryList_in_importItem483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIA_SYM_in_media501 = new BitSet(new long[]{0x0083FFFFA3709650L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_ws_in_media503 = new BitSet(new long[]{0x0083FFFFA3709650L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_mediaQueryList_in_media521 = new BitSet(new long[]{0x0000000000010000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_media529 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_media536 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFEE00181L});
    public static final BitSet FOLLOW_ws_in_media538 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_syncToFollow_in_media541 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_mediaBody_in_media551 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_media558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mediaBodyItem_in_mediaBody592 = new BitSet(new long[]{0x7FFBFFFFA3C08E72L,0x0000803FFEE00181L});
    public static final BitSet FOLLOW_ws_in_mediaBody602 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_mediaBody605 = new BitSet(new long[]{0x7FFBFFFFA3C08E72L,0x0000803FFEE00181L});
    public static final BitSet FOLLOW_ws_in_mediaBody609 = new BitSet(new long[]{0x7FFBFFFFA3C08E72L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_SEMI_in_mediaBody636 = new BitSet(new long[]{0x7FFBFFFFA3C08E72L,0x0000803FFEE00181L});
    public static final BitSet FOLLOW_ws_in_mediaBody638 = new BitSet(new long[]{0x7FFBFFFFA3C08E72L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_cp_mixin_declaration_in_mediaBodyItem704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_mediaBodyItem737 = new BitSet(new long[]{0x0000000000040002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_mediaBodyItem740 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_mediaBodyItem743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_mediaBodyItem760 = new BitSet(new long[]{0x0000000000040002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_mediaBodyItem763 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_mediaBodyItem766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_mediaBodyItem805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_mediaBodyItem832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_extend_in_mediaBodyItem842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_debug_in_mediaBodyItem852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_control_in_mediaBodyItem862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_content_in_mediaBodyItem872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_mediaBodyItem882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_mediaBodyItem890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_page_in_mediaBodyItem898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fontFace_in_mediaBodyItem906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vendorAtRule_in_mediaBodyItem914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_media_in_mediaBodyItem927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList941 = new BitSet(new long[]{0x0000000000000802L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_mediaQueryList953 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_mediaQueryList956 = new BitSet(new long[]{0x0083FFFFA3709650L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_ws_in_mediaQueryList958 = new BitSet(new long[]{0x0083FFFFA3709650L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList961 = new BitSet(new long[]{0x0000000000000802L,0x0000000000E00000L});
    public static final BitSet FOLLOW_mediaQueryOperator_in_mediaQuery980 = new BitSet(new long[]{0x0080000000700040L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery982 = new BitSet(new long[]{0x0080000000700040L});
    public static final BitSet FOLLOW_mediaType_in_mediaQuery989 = new BitSet(new long[]{0x0000000000080002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery993 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AND_in_mediaQuery996 = new BitSet(new long[]{0x0000000000001000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery998 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_mediaExpression_in_mediaQuery1001 = new BitSet(new long[]{0x0000000000080002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_mediaExpression_in_mediaQuery1012 = new BitSet(new long[]{0x0000000000080002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery1016 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AND_in_mediaQuery1019 = new BitSet(new long[]{0x0000000000001000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery1021 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_mediaExpression_in_mediaQuery1024 = new BitSet(new long[]{0x0000000000080002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_cp_variable_in_mediaQuery1037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_mediaQueryOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_mediaType1065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_mediaType1069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaType1075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_mediaExpression1093 = new BitSet(new long[]{0x0083FFFFA3408650L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_ws_in_mediaExpression1095 = new BitSet(new long[]{0x0083FFFFA3408650L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_mediaFeature_in_mediaExpression1098 = new BitSet(new long[]{0x0000000000804000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_mediaFeatureValue_in_mediaExpression1100 = new BitSet(new long[]{0x0000000000004000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_mediaExpression1103 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_mediaExpression1106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_mediaFeatureValue1127 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_mediaFeatureValue1130 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_mediaFeatureValue1132 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_cp_expression_in_mediaFeatureValue1151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_mediaFeatureValue1171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_mediaFeature1191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_mediaFeature1195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_mediaFeature1203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaFeature1207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bodyItem_in_body1241 = new BitSet(new long[]{0x7FFBFFFFA3C08E72L,0x0000803FFEE00181L});
    public static final BitSet FOLLOW_ws_in_body1251 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_body1254 = new BitSet(new long[]{0x7FFBFFFFA3C08E72L,0x0000803FFEE00181L});
    public static final BitSet FOLLOW_ws_in_body1258 = new BitSet(new long[]{0x7FFBFFFFA3C08E72L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_SEMI_in_body1285 = new BitSet(new long[]{0x7FFBFFFFA3C08E72L,0x0000803FFEE00181L});
    public static final BitSet FOLLOW_ws_in_body1287 = new BitSet(new long[]{0x7FFBFFFFA3C08E72L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_cp_mixin_declaration_in_bodyItem1359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_bodyItem1392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_bodyItem1411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_bodyItem1420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_map_in_bodyItem1437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_declaration_in_bodyItem1459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_at_rule_in_bodyItem1471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_bodyItem1494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_debug_in_bodyItem1508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_control_in_bodyItem1522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_function_declaration_in_bodyItem1536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_media_in_at_rule1562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_page_in_at_rule1570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_counterStyle_in_at_rule1578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fontFace_in_at_rule1586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vendorAtRule_in_at_rule1594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moz_document_in_vendorAtRule1607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_webkitKeyframes_in_vendorAtRule1611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_generic_at_rule_in_vendorAtRule1615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_atRuleId0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_IDENT_in_generic_at_rule1643 = new BitSet(new long[]{0x00000000000100C0L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_generic_at_rule1645 = new BitSet(new long[]{0x00000000000100C0L});
    public static final BitSet FOLLOW_atRuleId_in_generic_at_rule1650 = new BitSet(new long[]{0x0000000000010000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_generic_at_rule1652 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_generic_at_rule1666 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_syncTo_RBRACE_in_generic_at_rule1677 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_generic_at_rule1687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document1698 = new BitSet(new long[]{0x000000001C000100L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_moz_document1700 = new BitSet(new long[]{0x000000001C000100L,0x0000000000E00000L});
    public static final BitSet FOLLOW_moz_document_function_in_moz_document1705 = new BitSet(new long[]{0x0000000000010800L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_moz_document1707 = new BitSet(new long[]{0x0000000000010800L});
    public static final BitSet FOLLOW_COMMA_in_moz_document1713 = new BitSet(new long[]{0x000000001C000100L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_moz_document1715 = new BitSet(new long[]{0x000000001C000100L,0x0000000000E00000L});
    public static final BitSet FOLLOW_moz_document_function_in_moz_document1718 = new BitSet(new long[]{0x0000000000010800L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_moz_document1720 = new BitSet(new long[]{0x0000000000010800L});
    public static final BitSet FOLLOW_LBRACE_in_moz_document1727 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFEE00181L});
    public static final BitSet FOLLOW_ws_in_moz_document1729 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_body_in_moz_document1734 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_moz_document1739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_moz_document_function0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes1776 = new BitSet(new long[]{0x00000000000000C0L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1778 = new BitSet(new long[]{0x00000000000000C0L});
    public static final BitSet FOLLOW_atRuleId_in_webkitKeyframes1781 = new BitSet(new long[]{0x0000000000010000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1783 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_webkitKeyframes1787 = new BitSet(new long[]{0x0000000040020040L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1789 = new BitSet(new long[]{0x0000000040020040L});
    public static final BitSet FOLLOW_webkitKeyframesBlock_in_webkitKeyframes1796 = new BitSet(new long[]{0x0000000040020040L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1798 = new BitSet(new long[]{0x0000000040020040L});
    public static final BitSet FOLLOW_RBRACE_in_webkitKeyframes1805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock1817 = new BitSet(new long[]{0x0000000000010000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock1819 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_webkitKeyframesBlock1823 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFEE00181L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock1826 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_syncToFollow_in_webkitKeyframesBlock1829 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_declarations_in_webkitKeyframesBlock1833 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_webkitKeyframesBlock1837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_webkitKeyframeSelectors1849 = new BitSet(new long[]{0x0000000000000802L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors1861 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_webkitKeyframeSelectors1864 = new BitSet(new long[]{0x0000000040000040L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors1866 = new BitSet(new long[]{0x0000000040000040L});
    public static final BitSet FOLLOW_set_in_webkitKeyframeSelectors1869 = new BitSet(new long[]{0x0000000000000802L,0x0000000000E00000L});
    public static final BitSet FOLLOW_PAGE_SYM_in_page1894 = new BitSet(new long[]{0x0000000000810040L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_page1896 = new BitSet(new long[]{0x0000000000810040L});
    public static final BitSet FOLLOW_IDENT_in_page1901 = new BitSet(new long[]{0x0000000000810000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_page1903 = new BitSet(new long[]{0x0000000000810000L});
    public static final BitSet FOLLOW_pseudoPage_in_page1910 = new BitSet(new long[]{0x0000000000010000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_page1912 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_page1925 = new BitSet(new long[]{0x238BFFFFA3428670L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_ws_in_page1927 = new BitSet(new long[]{0x238BFFFFA3428670L,0x0000003FFE000100L});
    public static final BitSet FOLLOW_propertyDeclaration_in_page1970 = new BitSet(new long[]{0x0000000000020020L,0x0000000000E00000L});
    public static final BitSet FOLLOW_margin_in_page1972 = new BitSet(new long[]{0x0000000000020020L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_page1975 = new BitSet(new long[]{0x0000000000020020L});
    public static final BitSet FOLLOW_SEMI_in_page1981 = new BitSet(new long[]{0x238BFFFFA3428670L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_ws_in_page1983 = new BitSet(new long[]{0x238BFFFFA3428670L,0x0000003FFE000100L});
    public static final BitSet FOLLOW_propertyDeclaration_in_page1988 = new BitSet(new long[]{0x0000000000020020L,0x0000000000E00000L});
    public static final BitSet FOLLOW_margin_in_page1990 = new BitSet(new long[]{0x0000000000020020L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_page1993 = new BitSet(new long[]{0x0000000000020020L});
    public static final BitSet FOLLOW_RBRACE_in_page2008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNTER_STYLE_SYM_in_counterStyle2025 = new BitSet(new long[]{0x0000000000000040L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_counterStyle2027 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_counterStyle2030 = new BitSet(new long[]{0x0000000000010000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_counterStyle2032 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_counterStyle2043 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFEE00181L});
    public static final BitSet FOLLOW_ws_in_counterStyle2045 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_syncToDeclarationsRule_in_counterStyle2048 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_declarations_in_counterStyle2052 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_counterStyle2063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FONT_FACE_SYM_in_fontFace2080 = new BitSet(new long[]{0x0000000000010000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_fontFace2082 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_fontFace2093 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFEE00181L});
    public static final BitSet FOLLOW_ws_in_fontFace2095 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_syncToDeclarationsRule_in_fontFace2098 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_declarations_in_fontFace2102 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_fontFace2113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_margin_sym_in_margin2127 = new BitSet(new long[]{0x0000000000010000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_margin2129 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_margin2132 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFEE00181L});
    public static final BitSet FOLLOW_ws_in_margin2134 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_syncToDeclarationsRule_in_margin2137 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_declarations_in_margin2139 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_margin2142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_margin_sym0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_pseudoPage2351 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_pseudoPage2353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_unaryOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_declaration_interpolation_expression_in_property2449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_property2457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_property2465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_property2475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_map_name_in_sass_map2502 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_sass_map2504 = new BitSet(new long[]{0x0000000000001000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_map2506 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_sass_map2509 = new BitSet(new long[]{0x238BFFFFA340CE50L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_ws_in_sass_map2511 = new BitSet(new long[]{0x238BFFFFA340CE50L,0x0000003FFE000100L});
    public static final BitSet FOLLOW_syncToFollow_in_sass_map2514 = new BitSet(new long[]{0x238BFFFFA340CE50L,0x0000003FFE000100L});
    public static final BitSet FOLLOW_sass_map_pairs_in_sass_map2533 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_sass_map2540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_sass_map_name2561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_map_pair_in_sass_map_pairs2595 = new BitSet(new long[]{0x238BFFFFA3408E52L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_ws_in_sass_map_pairs2605 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_sass_map_pairs2608 = new BitSet(new long[]{0x238BFFFFA3408E52L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_ws_in_sass_map_pairs2612 = new BitSet(new long[]{0x238BFFFFA3408E52L,0x0000003FFE000100L});
    public static final BitSet FOLLOW_COMMA_in_sass_map_pairs2639 = new BitSet(new long[]{0x238BFFFFA3408E52L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_ws_in_sass_map_pairs2641 = new BitSet(new long[]{0x238BFFFFA3408E52L,0x0000003FFE000100L});
    public static final BitSet FOLLOW_property_in_sass_map_pair2676 = new BitSet(new long[]{0x0000000000800000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_map_pair2678 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_sass_map_pair2681 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_sass_map_pair2683 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_expression_in_sass_map_pair2686 = new BitSet(new long[]{0x0000000000040002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_map_pair2689 = new BitSet(new long[]{0x0000000000040000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_prio_in_sass_map_pair2692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectorsGroup_in_rule2715 = new BitSet(new long[]{0x0000000000010000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_rule2717 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_rule2724 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFEE00181L});
    public static final BitSet FOLLOW_ws_in_rule2726 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_syncToFollow_in_rule2729 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_declarations_in_rule2739 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_rule2746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_declarations2789 = new BitSet(new long[]{0x7FFBFFFFA3C08E72L,0x0000803FFEE00181L});
    public static final BitSet FOLLOW_ws_in_declarations2799 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_declarations2802 = new BitSet(new long[]{0x7FFBFFFFA3C08E72L,0x0000803FFEE00181L});
    public static final BitSet FOLLOW_ws_in_declarations2806 = new BitSet(new long[]{0x7FFBFFFFA3C08E72L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_SEMI_in_declarations2833 = new BitSet(new long[]{0x7FFBFFFFA3C08E72L,0x0000803FFEE00181L});
    public static final BitSet FOLLOW_ws_in_declarations2835 = new BitSet(new long[]{0x7FFBFFFFA3C08E72L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_cp_variable_declaration_in_declaration2870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_map_in_declaration2883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_nested_properties_in_declaration2895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_declaration2907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_declaration2946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_declaration_in_declaration2991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_declaration3024 = new BitSet(new long[]{0x0000000000040002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_declaration3027 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_declaration3030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_declaration3047 = new BitSet(new long[]{0x0000000000040002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_declaration3050 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_declaration3053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_declaration3072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_at_rule_in_declaration3082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_control_in_declaration3092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_extend_in_declaration3102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_debug_in_declaration3112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_content_in_declaration3122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_function_return_in_declaration3132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_declaration3142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_declaration3150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_selector_interpolation_expression_in_selectorsGroup3213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_in_selectorsGroup3226 = new BitSet(new long[]{0x0000000000000802L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_selectorsGroup3229 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_selectorsGroup3232 = new BitSet(new long[]{0x7FF8000000C00840L,0x0000800000E00081L});
    public static final BitSet FOLLOW_ws_in_selectorsGroup3234 = new BitSet(new long[]{0x7FF8000000C00840L,0x0000800000000081L});
    public static final BitSet FOLLOW_selector_in_selectorsGroup3237 = new BitSet(new long[]{0x0000000000000802L,0x0000000000E00000L});
    public static final BitSet FOLLOW_combinator_in_selector3258 = new BitSet(new long[]{0x7FF8000000C00840L,0x0000800000E00081L});
    public static final BitSet FOLLOW_ws_in_selector3260 = new BitSet(new long[]{0x7FF8000000C00840L,0x0000800000000081L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_selector3265 = new BitSet(new long[]{0x7FF8000000C00842L,0x0000800000E00081L});
    public static final BitSet FOLLOW_ws_in_selector3271 = new BitSet(new long[]{0x0070000000000000L});
    public static final BitSet FOLLOW_combinator_in_selector3274 = new BitSet(new long[]{0x7FF8000000C00840L,0x0000800000E00081L});
    public static final BitSet FOLLOW_ws_in_selector3276 = new BitSet(new long[]{0x7FF8000000C00840L,0x0000800000000081L});
    public static final BitSet FOLLOW_ws_in_selector3280 = new BitSet(new long[]{0x7FF8000000C00840L,0x0000800000000081L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_selector3284 = new BitSet(new long[]{0x7FF8000000C00842L,0x0000800000E00081L});
    public static final BitSet FOLLOW_set_in_combinator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeSelector_in_simpleSelectorSequence3332 = new BitSet(new long[]{0x7FF8000000C00842L,0x0000800000E00081L});
    public static final BitSet FOLLOW_ws_in_simpleSelectorSequence3342 = new BitSet(new long[]{0x7FF8000000C00840L,0x0000800000000081L});
    public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence3345 = new BitSet(new long[]{0x7FF8000000C00842L,0x0000800000E00081L});
    public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence3355 = new BitSet(new long[]{0x7FF8000000C00842L,0x0000800000E00081L});
    public static final BitSet FOLLOW_ws_in_simpleSelectorSequence3365 = new BitSet(new long[]{0x7FF8000000C00840L,0x0000800000000081L});
    public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence3368 = new BitSet(new long[]{0x7FF8000000C00842L,0x0000800000E00081L});
    public static final BitSet FOLLOW_set_in_esPred0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespacePrefix_in_typeSelector3457 = new BitSet(new long[]{0x6000000000400040L,0x0000000000000001L});
    public static final BitSet FOLLOW_elementName_in_typeSelector3461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespacePrefixName_in_namespacePrefix3476 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_STAR_in_namespacePrefix3480 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_PIPE_in_namespacePrefix3484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_extend_only_selector_in_elementSubsequent3516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_less_selector_interpolation_in_elementSubsequent3530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cssId_in_elementSubsequent3540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cssClass_in_elementSubsequent3549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_slAttribute_in_elementSubsequent3561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pseudo_in_elementSubsequent3573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_in_cssId3597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_cssId3617 = new BitSet(new long[]{0x8000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_NAME_in_cssId3633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_less_selector_interpolation_in_cssId3653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_cssClass3704 = new BitSet(new long[]{0x0000000000402040L,0x0000800000000000L});
    public static final BitSet FOLLOW_IDENT_in_cssClass3728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_IMPORT_TYPE_in_cssClass3744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_cssClass3760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_less_selector_interpolation_in_cssClass3778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_elementName0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_slAttribute3845 = new BitSet(new long[]{0x6000000000000040L,0x0000000000E00000L});
    public static final BitSet FOLLOW_namespacePrefix_in_slAttribute3852 = new BitSet(new long[]{0x6000000000000040L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_slAttribute3855 = new BitSet(new long[]{0x6000000000000040L,0x0000000000E00000L});
    public static final BitSet FOLLOW_slAttributeName_in_slAttribute3866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000E000FEL});
    public static final BitSet FOLLOW_ws_in_slAttribute3868 = new BitSet(new long[]{0x0000000000000000L,0x00000000000000FEL});
    public static final BitSet FOLLOW_set_in_slAttribute3902 = new BitSet(new long[]{0x00000000000000C0L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_slAttribute4082 = new BitSet(new long[]{0x00000000000000C0L,0x0000000000E00000L});
    public static final BitSet FOLLOW_slAttributeValue_in_slAttribute4101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000E00080L});
    public static final BitSet FOLLOW_ws_in_slAttribute4119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_RBRACKET_in_slAttribute4144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_slAttributeName4160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_slAttributeValue4172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_pseudo4232 = new BitSet(new long[]{0x0000000000600040L});
    public static final BitSet FOLLOW_set_in_pseudo4295 = new BitSet(new long[]{0x0000000000001002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_pseudo4352 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_pseudo4355 = new BitSet(new long[]{0x21DBFFFFE364D7D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_pseudo4357 = new BitSet(new long[]{0x21DBFFFFE364D7D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_expression_in_pseudo4363 = new BitSet(new long[]{0x0000000000004000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_pseudo4365 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_STAR_in_pseudo4371 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_pseudo4376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_pseudo4455 = new BitSet(new long[]{0x0000000000001000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_pseudo4457 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_pseudo4460 = new BitSet(new long[]{0x7FF8000000C04840L,0x0000800000E00081L});
    public static final BitSet FOLLOW_ws_in_pseudo4462 = new BitSet(new long[]{0x7FF8000000C04840L,0x0000800000000081L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_pseudo4465 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_pseudo4468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_propertyDeclaration4506 = new BitSet(new long[]{0x238BFFFFA3408650L,0x0000003FFE000100L});
    public static final BitSet FOLLOW_property_in_propertyDeclaration4509 = new BitSet(new long[]{0x0000000000800000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4511 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_propertyDeclaration4514 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4516 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_propertyValue_in_propertyDeclaration4519 = new BitSet(new long[]{0x0000000000040002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4522 = new BitSet(new long[]{0x0000000000040000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_prio_in_propertyDeclaration4525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_propertyDeclaration4537 = new BitSet(new long[]{0x238BFFFFA3408650L,0x0000003FFE000100L});
    public static final BitSet FOLLOW_property_in_propertyDeclaration4540 = new BitSet(new long[]{0x0000000000800000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4542 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_propertyDeclaration4545 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4547 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_cp_propertyValue_in_propertyDeclaration4550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_propertyValue4584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyValue_in_cp_propertyValue4592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertyValue4614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_expressionPredicate4650 = new BitSet(new long[]{0xDFFBFFFFFEFEFFF0L,0xFFFFFFFFFFFFFEFFL,0x00000000007FFFFFL});
    public static final BitSet FOLLOW_set_in_expressionPredicate4683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_syncTo_SEMI4784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_prio4829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_in_expression4846 = new BitSet(new long[]{0x01DFFFFFE3408FD2L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_expression4878 = new BitSet(new long[]{0x01DBFFFFE34087D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_ws_in_expression4883 = new BitSet(new long[]{0x0004000000000800L,0x0000000000E00000L});
    public static final BitSet FOLLOW_operator_in_expression4886 = new BitSet(new long[]{0x01DBFFFFE34087D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_expression4888 = new BitSet(new long[]{0x01DBFFFFE34087D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_term_in_expression4897 = new BitSet(new long[]{0x01DFFFFFE3408FD2L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_unaryOperator_in_term4922 = new BitSet(new long[]{0x01DBFFFFE34087D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_term4924 = new BitSet(new long[]{0x01DBFFFFE34087D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_function_in_term4953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_term4966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_term4978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENTAGE_in_term4990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LENGTH_in_term5002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMS_in_term5014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REM_in_term5026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXS_in_term5038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANGLE_in_term5050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIME_in_term5062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FREQ_in_term5074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RESOLUTION_in_term5086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIMENSION_in_term5098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_term5115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_term5127 = new BitSet(new long[]{0x0000000000000080L,0x0000000000080000L});
    public static final BitSet FOLLOW_set_in_term5129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_JS_STRING_in_term5150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_term5165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_URI_in_term5177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hexColor_in_term5189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_term5203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_term5217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_term_symbol_in_term5231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENTAGE_SYMBOL_in_cp_term_symbol5258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionName_in_function5274 = new BitSet(new long[]{0x0000000000001000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_function5276 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_function5281 = new BitSet(new long[]{0x01DBFFFFE364D7D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_function5283 = new BitSet(new long[]{0x01DBFFFFE364D7D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_fnAttributes_in_function5310 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_function5341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_functionName5393 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_functionName5395 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_functionName5399 = new BitSet(new long[]{0x0200000000000002L});
    public static final BitSet FOLLOW_DOT_in_functionName5402 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_functionName5404 = new BitSet(new long[]{0x0200000000000002L});
    public static final BitSet FOLLOW_fnAttribute_in_fnAttributes5428 = new BitSet(new long[]{0x0000000000000802L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_fnAttributes5431 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_fnAttributes5434 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_fnAttributes5436 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_fnAttribute_in_fnAttributes5439 = new BitSet(new long[]{0x0000000000000802L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_fnAttributes5443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fnAttributeName_in_fnAttribute5480 = new BitSet(new long[]{0x0000000000800000L,0x0000000000E00002L});
    public static final BitSet FOLLOW_ws_in_fnAttribute5482 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_fnAttribute5485 = new BitSet(new long[]{0x01DBFFFFE34497D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_fnAttribute5491 = new BitSet(new long[]{0x01DBFFFFE34497D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_fnAttributeValue_in_fnAttribute5494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_in_fnAttribute5508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_fnAttribute5520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_fnAttributeName5543 = new BitSet(new long[]{0x0200000000000002L});
    public static final BitSet FOLLOW_DOT_in_fnAttributeName5546 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_fnAttributeName5548 = new BitSet(new long[]{0x0200000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_fnAttributeName5568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_in_fnAttributeValue5591 = new BitSet(new long[]{0x01DFFFFFE34087D2L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_fnAttributeValue5623 = new BitSet(new long[]{0x01DBFFFFE34087D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_ws_in_fnAttributeValue5628 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_SOLIDUS_in_fnAttributeValue5631 = new BitSet(new long[]{0x01DBFFFFE34087D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_fnAttributeValue5633 = new BitSet(new long[]{0x01DBFFFFE34087D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_term_in_fnAttributeValue5642 = new BitSet(new long[]{0x01DFFFFFE34087D2L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_cp_math_expression_in_fnAttributeValue5663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_in_hexColor5677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ws5694 = new BitSet(new long[]{0x0000000000000002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration5737 = new BitSet(new long[]{0x0000000000800000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5739 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_cp_variable_declaration5742 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5744 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration5747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration5769 = new BitSet(new long[]{0x0000000000800000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5771 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_cp_variable_declaration5774 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5776 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration5779 = new BitSet(new long[]{0x0000000000000002L,0x0000000001E00000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5782 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_SASS_DEFAULT_in_cp_variable_declaration5785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_cp_variable5824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_VAR_in_cp_variable6005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_in_cp_expression_list6029 = new BitSet(new long[]{0x0000000000000802L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_expression_list6048 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_cp_expression_list6051 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_cp_expression_list6053 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_expression_in_cp_expression_list6056 = new BitSet(new long[]{0x0000000000000802L,0x0000000000E00000L});
    public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression6089 = new BitSet(new long[]{0x01FBFFFFE36C97D2L,0x00000FFFFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_cp_expression6113 = new BitSet(new long[]{0x0020000000080000L,0x00000FC000E00000L});
    public static final BitSet FOLLOW_cp_expression_operator_in_cp_expression6116 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_cp_expression6118 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression6122 = new BitSet(new long[]{0x01FBFFFFE36C97D2L,0x00000FFFFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_cp_expression6141 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression6144 = new BitSet(new long[]{0x01FBFFFFE36C97D2L,0x00000FFFFEFFFF00L});
    public static final BitSet FOLLOW_set_in_cp_expression_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_cp_expression_atom6226 = new BitSet(new long[]{0x01DBFFFFE34497D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_cp_expression_atom6228 = new BitSet(new long[]{0x01DBFFFFE34497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_expression_atom6259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_cp_expression_atom6275 = new BitSet(new long[]{0x01DBFFFFE364D7D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_cp_expression_atom6277 = new BitSet(new long[]{0x01DBFFFFE364D7D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_expression_atom6281 = new BitSet(new long[]{0x0000000000004000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_expression_atom6283 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_expression_atom6288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expressions6320 = new BitSet(new long[]{0x0000000000000002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expressions6327 = new BitSet(new long[]{0x01DBFFFFE34497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expressions6329 = new BitSet(new long[]{0x0000000000000002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_cp_math_expression_atom_in_cp_math_expression6363 = new BitSet(new long[]{0x201C000000000002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression6405 = new BitSet(new long[]{0x201C000000000000L});
    public static final BitSet FOLLOW_set_in_cp_math_expression6408 = new BitSet(new long[]{0x01DBFFFFE34497D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression6418 = new BitSet(new long[]{0x01DBFFFFE34497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_math_expression_atom_in_cp_math_expression6421 = new BitSet(new long[]{0x201C000000000002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_term_in_cp_math_expression_atom6454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_cp_math_expression_atom6462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryOperator_in_cp_math_expression_atom6473 = new BitSet(new long[]{0x0000000000001000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression_atom6475 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_math_expression_atom6481 = new BitSet(new long[]{0x01DBFFFFE34497D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression_atom6483 = new BitSet(new long[]{0x01DBFFFFE34497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expression_atom6486 = new BitSet(new long[]{0x0000000000004000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression_atom6488 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_math_expression_atom6491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_cp_mixin_declaration6530 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration6532 = new BitSet(new long[]{0x0000000000001000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6534 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration6537 = new BitSet(new long[]{0x0003FFFFA300C610L,0x0000303FFEE00100L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6539 = new BitSet(new long[]{0x0003FFFFA300C610L,0x0000303FFE000100L});
    public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration6542 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration6545 = new BitSet(new long[]{0x0000000000010000L,0x0000400000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6548 = new BitSet(new long[]{0x0000000000000000L,0x0000400000E00000L});
    public static final BitSet FOLLOW_less_mixin_guarded_in_cp_mixin_declaration6551 = new BitSet(new long[]{0x0000000000010000L,0x0000400000E00000L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_cp_mixin_declaration6575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6577 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration6579 = new BitSet(new long[]{0x0000000000011000L,0x0000400000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6582 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration6585 = new BitSet(new long[]{0x0003FFFFA300C610L,0x0000303FFEE00100L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6587 = new BitSet(new long[]{0x0003FFFFA300C610L,0x0000303FFE000100L});
    public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration6590 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration6593 = new BitSet(new long[]{0x0000000000010000L,0x0000400000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6607 = new BitSet(new long[]{0x0000000000010000L,0x0000400000E00000L});
    public static final BitSet FOLLOW_cp_mixin_block_in_cp_mixin_declaration6610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_cp_mixin_call6645 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call6647 = new BitSet(new long[]{0x0000000000001002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6650 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_call6653 = new BitSet(new long[]{0x01DBFFFFE364D7D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6655 = new BitSet(new long[]{0x01DBFFFFE364D7D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_mixin_call_args_in_cp_mixin_call6658 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_call6661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_INCLUDE_in_cp_mixin_call6685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6687 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call6689 = new BitSet(new long[]{0x0000000000011002L,0x0000400000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6692 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_call6695 = new BitSet(new long[]{0x01DBFFFFE364D7D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6697 = new BitSet(new long[]{0x01DBFFFFE364D7D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_mixin_call_args_in_cp_mixin_call6700 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_call6703 = new BitSet(new long[]{0x0000000000010002L,0x0000400000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6708 = new BitSet(new long[]{0x0000000000010000L,0x0000400000E00000L});
    public static final BitSet FOLLOW_cp_mixin_block_in_cp_mixin_call6711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_cp_mixin_block6740 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFEE00181L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_block6742 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_syncToFollow_in_cp_mixin_block6745 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_declarations_in_cp_mixin_block6755 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_cp_mixin_block6762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_cp_mixin_name6783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6814 = new BitSet(new long[]{0x0000000000000822L,0x0000100000000000L});
    public static final BitSet FOLLOW_set_in_cp_mixin_call_args6818 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_args6826 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6829 = new BitSet(new long[]{0x0000000000000822L,0x0000100000000000L});
    public static final BitSet FOLLOW_CP_DOTS_in_cp_mixin_call_args6835 = new BitSet(new long[]{0x0000000000000002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_args6837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_cp_mixin_call_arg6871 = new BitSet(new long[]{0x0000000000800000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6873 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_cp_mixin_call_arg6876 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6878 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg6881 = new BitSet(new long[]{0x0000000000000002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg6893 = new BitSet(new long[]{0x0000000000000002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_arg_in_cp_args_list6948 = new BitSet(new long[]{0x0000000000000822L,0x0000300000000000L});
    public static final BitSet FOLLOW_set_in_cp_args_list6952 = new BitSet(new long[]{0x0003FFFFA3008610L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_ws_in_cp_args_list6962 = new BitSet(new long[]{0x0003FFFFA3008610L,0x0000003FFE000100L});
    public static final BitSet FOLLOW_cp_arg_in_cp_args_list6965 = new BitSet(new long[]{0x0000000000000822L,0x0000300000000000L});
    public static final BitSet FOLLOW_set_in_cp_args_list6972 = new BitSet(new long[]{0x0000000000000002L,0x0000300000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_args_list6980 = new BitSet(new long[]{0x0000000000000002L,0x0000300000000000L});
    public static final BitSet FOLLOW_set_in_cp_args_list6988 = new BitSet(new long[]{0x0000000000000002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_args_list6996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_cp_args_list7013 = new BitSet(new long[]{0x0000000000000002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_args_list7021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_cp_arg7044 = new BitSet(new long[]{0x0000000000800002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_arg7046 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_COLON_in_cp_arg7051 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_cp_arg7053 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_expression_in_cp_arg7056 = new BitSet(new long[]{0x0000000000000002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_cp_arg7058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_WHEN_in_less_mixin_guarded7084 = new BitSet(new long[]{0x0000000000201000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_less_mixin_guarded7086 = new BitSet(new long[]{0x0000000000201000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded7089 = new BitSet(new long[]{0x0000000000080802L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_less_mixin_guarded7092 = new BitSet(new long[]{0x0000000000080800L});
    public static final BitSet FOLLOW_set_in_less_mixin_guarded7095 = new BitSet(new long[]{0x0000000000201000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_less_mixin_guarded7103 = new BitSet(new long[]{0x0000000000201000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded7106 = new BitSet(new long[]{0x0000000000080802L,0x0000000000E00000L});
    public static final BitSet FOLLOW_NOT_in_less_condition7132 = new BitSet(new long[]{0x0000000000001000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_less_condition7134 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_less_condition7143 = new BitSet(new long[]{0x0003FFFFA3008650L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_ws_in_less_condition7145 = new BitSet(new long[]{0x0003FFFFA3008650L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_cp_variable_in_less_condition7172 = new BitSet(new long[]{0x0020000000004000L,0x00000E0000E00002L});
    public static final BitSet FOLLOW_less_function_in_condition_in_less_condition7176 = new BitSet(new long[]{0x0020000000004000L,0x00000E0000E00002L});
    public static final BitSet FOLLOW_ws_in_less_condition7179 = new BitSet(new long[]{0x0020000000004000L,0x00000E0000000002L});
    public static final BitSet FOLLOW_less_condition_operator_in_less_condition7183 = new BitSet(new long[]{0x01DBFFFFE34497D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_less_condition7185 = new BitSet(new long[]{0x01DBFFFFE34497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_math_expression_in_less_condition7188 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_less_condition7206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_less_fn_name_in_less_function_in_condition7228 = new BitSet(new long[]{0x0000000000001000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_less_function_in_condition7230 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_less_function_in_condition7233 = new BitSet(new long[]{0x0003FFFFA3008610L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_ws_in_less_function_in_condition7235 = new BitSet(new long[]{0x0003FFFFA3008610L,0x0000003FFE000100L});
    public static final BitSet FOLLOW_cp_variable_in_less_function_in_condition7238 = new BitSet(new long[]{0x0000000000004000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_less_function_in_condition7240 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_less_function_in_condition7243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_less_fn_name7265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_less_condition_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_SIGN_in_less_selector_interpolation7323 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_less_selector_interpolation7325 = new BitSet(new long[]{0x0000000000000040L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_less_selector_interpolation7327 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_less_selector_interpolation7330 = new BitSet(new long[]{0x0000000000020000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_less_selector_interpolation7332 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_less_selector_interpolation7335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7383 = new BitSet(new long[]{0x27A8000000800842L,0x0000000000E00081L});
    public static final BitSet FOLLOW_set_in_sass_selector_interpolation_expression7411 = new BitSet(new long[]{0x27A8000000800842L,0x0000000000E00081L});
    public static final BitSet FOLLOW_ws_in_sass_selector_interpolation_expression7492 = new BitSet(new long[]{0x27A8000000800840L,0x0000000000000081L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7529 = new BitSet(new long[]{0x27A8000000800842L,0x0000000000E00081L});
    public static final BitSet FOLLOW_set_in_sass_selector_interpolation_expression7565 = new BitSet(new long[]{0x27A8000000800842L,0x0000000000E00081L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7680 = new BitSet(new long[]{0x0388000000000042L,0x0000000000E00000L});
    public static final BitSet FOLLOW_set_in_sass_declaration_interpolation_expression7708 = new BitSet(new long[]{0x0388000000000042L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_declaration_interpolation_expression7760 = new BitSet(new long[]{0x0388000000000040L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7797 = new BitSet(new long[]{0x0388000000000042L,0x0000000000E00000L});
    public static final BitSet FOLLOW_set_in_sass_declaration_interpolation_expression7833 = new BitSet(new long[]{0x0388000000000042L,0x0000000000E00000L});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var7902 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_sass_interpolation_expression_var7904 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_expression_in_sass_interpolation_expression_var7906 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_interpolation_expression_var7908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_sass_nested_properties7948 = new BitSet(new long[]{0x0000000000800000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties7950 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_sass_nested_properties7953 = new BitSet(new long[]{0x01DBFFFFE36597D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties7955 = new BitSet(new long[]{0x01DBFFFFE36597D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_propertyValue_in_sass_nested_properties7959 = new BitSet(new long[]{0x0000000000010000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties7961 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_sass_nested_properties7966 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFEE00181L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties7968 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_syncToFollow_in_sass_nested_properties7971 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_declarations_in_sass_nested_properties7973 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_nested_properties7976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_EXTEND_in_sass_extend7997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_extend7999 = new BitSet(new long[]{0x7FF8000000C00840L,0x0000800000000081L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_sass_extend8001 = new BitSet(new long[]{0x0000000000000002L,0x0001000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_extend8004 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_SASS_OPTIONAL_in_sass_extend8007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector8030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_sass_debug8051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_debug8061 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_expression_in_sass_debug8063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_if_in_sass_control8084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_for_in_sass_control8088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_each_in_sass_control8092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_while_in_sass_control8096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_IF_in_sass_if8117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_if8119 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_sass_control_expression_in_sass_if8121 = new BitSet(new long[]{0x0000000000010000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_if8123 = new BitSet(new long[]{0x0000000000010000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_if8126 = new BitSet(new long[]{0x0000000000000002L,0x0000000100E00000L});
    public static final BitSet FOLLOW_ws_in_sass_if8129 = new BitSet(new long[]{0x0000000000000000L,0x0000000100E00000L});
    public static final BitSet FOLLOW_sass_else_in_sass_if8132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_ELSE_in_sass_else8155 = new BitSet(new long[]{0x0000000000010000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_else8157 = new BitSet(new long[]{0x0000000000010000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_else8160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_ELSE_in_sass_else8172 = new BitSet(new long[]{0x0000000000000040L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_else8174 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_else8179 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_sass_else8183 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_sass_control_expression_in_sass_else8186 = new BitSet(new long[]{0x0000000000010000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_else8188 = new BitSet(new long[]{0x0000000000010000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_else8191 = new BitSet(new long[]{0x0000000000000002L,0x0000000100E00000L});
    public static final BitSet FOLLOW_ws_in_sass_else8194 = new BitSet(new long[]{0x0000000000000000L,0x0000000100E00000L});
    public static final BitSet FOLLOW_sass_else_in_sass_else8197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_in_sass_control_expression8220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_FOR_in_sass_for8241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_for8243 = new BitSet(new long[]{0x0003FFFFA3008610L,0x0000003FFE000100L});
    public static final BitSet FOLLOW_cp_variable_in_sass_for8245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_for8247 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_for8251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_for8255 = new BitSet(new long[]{0x01DBFFFFE34497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_math_expression_in_sass_for8257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_for8259 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_for8263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_for8267 = new BitSet(new long[]{0x01DBFFFFE34497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_math_expression_in_sass_for8269 = new BitSet(new long[]{0x0000000000010000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_for8271 = new BitSet(new long[]{0x0000000000010000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_for8274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_EACH_in_sass_each8295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_each8297 = new BitSet(new long[]{0x0003FFFFA3008610L,0x0000003FFE000100L});
    public static final BitSet FOLLOW_cp_variable_in_sass_each8299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_each8301 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_each8305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_each8309 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_expression_list_in_sass_each8311 = new BitSet(new long[]{0x0000000000010000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_each8313 = new BitSet(new long[]{0x0000000000010000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_each8316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_WHILE_in_sass_while8337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_while8339 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_sass_control_expression_in_sass_while8341 = new BitSet(new long[]{0x0000000000010000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_while8343 = new BitSet(new long[]{0x0000000000010000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_while8346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_sass_control_block8367 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFEE00181L});
    public static final BitSet FOLLOW_ws_in_sass_control_block8369 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_declarations_in_sass_control_block8372 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_control_block8375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_FUNCTION_in_sass_function_declaration8417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration8419 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_sass_function_name_in_sass_function_declaration8421 = new BitSet(new long[]{0x0000000000001000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration8423 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_sass_function_declaration8426 = new BitSet(new long[]{0x0003FFFFA300C610L,0x0000303FFE000100L});
    public static final BitSet FOLLOW_cp_args_list_in_sass_function_declaration8428 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_sass_function_declaration8431 = new BitSet(new long[]{0x0000000000010000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration8433 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_sass_function_declaration8436 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFEE00181L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration8438 = new BitSet(new long[]{0x7FFBFFFFA3C28E70L,0x0000803FFE000181L});
    public static final BitSet FOLLOW_declarations_in_sass_function_declaration8441 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_function_declaration8444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_sass_function_name8465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_RETURN_in_sass_function_return8486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_sass_function_return8488 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_expression_in_sass_function_return8490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_CONTENT_in_sass_content8511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred1_Css3356 = new BitSet(new long[]{0x0083FFFFA3709650L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_mediaQueryList_in_synpred1_Css3359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred2_Css3420 = new BitSet(new long[]{0x0083FFFFA3709650L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_mediaQueryList_in_synpred2_Css3423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred3_Css3474 = new BitSet(new long[]{0x0083FFFFA3709650L,0x0000003FFEE00100L});
    public static final BitSet FOLLOW_mediaQueryList_in_synpred3_Css3477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred4_Css3596 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred4_Css3599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_synpred5_Css3670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred5_Css3675 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_synpred5_Css3677 = new BitSet(new long[]{0x0000000000001000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_synpred5_Css3679 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred5_Css3682 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred5_Css3685 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
    public static final BitSet FOLLOW_RPAREN_in_synpred5_Css3690 = new BitSet(new long[]{0xFFFFFFFFFFFFFFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred5_Css3692 = new BitSet(new long[]{0xFFFFFFFFFFFFFFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
    public static final BitSet FOLLOW_LBRACE_in_synpred5_Css3700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred6_Css3718 = new BitSet(new long[]{0x0000000000040020L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_synpred6_Css3721 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_synpred6_Css3724 = new BitSet(new long[]{0x0000000000000020L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_synpred6_Css3728 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred6_Css3731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred7_Css3754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred8_Css3777 = new BitSet(new long[]{0xFFFFFFFFFFFCFFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
    public static final BitSet FOLLOW_COLON_in_synpred8_Css3789 = new BitSet(new long[]{0xFFFFFFFFFFFCFFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred8_Css3791 = new BitSet(new long[]{0xFFFFFFFFFFFCFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
    public static final BitSet FOLLOW_SEMI_in_synpred8_Css3801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_declaration_interpolation_expression_in_synpred9_Css3814 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_synpred9_Css3816 = new BitSet(new long[]{0xFFFFFFFFFFFCFFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred9_Css3818 = new BitSet(new long[]{0xFFFFFFFFFFFCFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
    public static final BitSet FOLLOW_SEMI_in_synpred9_Css3828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred10_Css3946 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred10_Css3949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred11_Css31245 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred11_Css31248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_synpred12_Css31323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred12_Css31328 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_synpred12_Css31330 = new BitSet(new long[]{0x0000000000001000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_synpred12_Css31332 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred12_Css31335 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred12_Css31338 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
    public static final BitSet FOLLOW_RPAREN_in_synpred12_Css31343 = new BitSet(new long[]{0xFFFFFFFFFFFDFFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred12_Css31345 = new BitSet(new long[]{0xFFFFFFFFFFFDFFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
    public static final BitSet FOLLOW_LBRACE_in_synpred12_Css31355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred13_Css31381 = new BitSet(new long[]{0x0000000000000020L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_synpred13_Css31383 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred13_Css31386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred14_Css31405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_map_in_synpred15_Css31433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_synpred16_Css31450 = new BitSet(new long[]{0x0000000000800000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_synpred16_Css31452 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_synpred16_Css31455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred17_Css32436 = new BitSet(new long[]{0xFFFFFFFFFF7FFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_synpred17_Css32444 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred17_Css32446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred18_Css32599 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred18_Css32602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred19_Css32793 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred19_Css32796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_declaration_in_synpred20_Css32867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_map_in_synpred21_Css32879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_nested_properties_in_synpred22_Css32892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_synpred23_Css32904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_synpred24_Css32921 = new BitSet(new long[]{0x0000000000800000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_synpred24_Css32923 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_synpred24_Css32926 = new BitSet(new long[]{0xFFFFFFFFFFFEFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred24_Css32928 = new BitSet(new long[]{0xFFFFFFFFFFFEFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred24_Css32938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_synpred25_Css32955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred25_Css32960 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_synpred25_Css32962 = new BitSet(new long[]{0x0000000000001000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_synpred25_Css32964 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred25_Css32967 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred25_Css32970 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
    public static final BitSet FOLLOW_RPAREN_in_synpred25_Css32975 = new BitSet(new long[]{0xFFFFFFFFFFFDFFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred25_Css32977 = new BitSet(new long[]{0xFFFFFFFFFFFDFFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
    public static final BitSet FOLLOW_LBRACE_in_synpred25_Css32987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred26_Css33005 = new BitSet(new long[]{0x0000000000040020L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_synpred26_Css33008 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_synpred26_Css33011 = new BitSet(new long[]{0x0000000000000020L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_synpred26_Css33015 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred26_Css33018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred27_Css33041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectorsGroup_in_synpred28_Css33064 = new BitSet(new long[]{0x0000000000010000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_synpred28_Css33066 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred28_Css33069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred29_Css33195 = new BitSet(new long[]{0xFFFFFFFFFFFEFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_synpred29_Css33207 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred29_Css33209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred30_Css33336 = new BitSet(new long[]{0x1F80000000800000L});
    public static final BitSet FOLLOW_esPred_in_synpred30_Css33339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred31_Css33359 = new BitSet(new long[]{0x1F80000000800000L});
    public static final BitSet FOLLOW_esPred_in_synpred31_Css33362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred32_Css33445 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_PIPE_in_synpred32_Css33454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred33_Css34853 = new BitSet(new long[]{0x01DBFFFFE34087D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_ws_in_synpred33_Css34858 = new BitSet(new long[]{0x0004000000000800L,0x0000000000E00000L});
    public static final BitSet FOLLOW_operator_in_synpred33_Css34861 = new BitSet(new long[]{0x01DBFFFFE34087D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_synpred33_Css34863 = new BitSet(new long[]{0x01DBFFFFE34087D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_term_in_synpred33_Css34872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionName_in_synpred34_Css34945 = new BitSet(new long[]{0x0000000000001000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ws_in_synpred34_Css34947 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred34_Css34950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fnAttributeName_in_synpred35_Css35467 = new BitSet(new long[]{0x0000000000800000L,0x0000000000E00002L});
    public static final BitSet FOLLOW_ws_in_synpred35_Css35469 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred35_Css35472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred36_Css35598 = new BitSet(new long[]{0x01DBFFFFE34087D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_ws_in_synpred36_Css35603 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_SOLIDUS_in_synpred36_Css35606 = new BitSet(new long[]{0x01DBFFFFE34087D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_synpred36_Css35608 = new BitSet(new long[]{0x01DBFFFFE34087D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_term_in_synpred36_Css35617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred37_Css36037 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred37_Css36040 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFEFFFF00L});
    public static final BitSet FOLLOW_ws_in_synpred37_Css36042 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_expression_in_synpred37_Css36045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred38_Css36106 = new BitSet(new long[]{0x0020000000080000L,0x00000FC000E00000L});
    public static final BitSet FOLLOW_cp_expression_operator_in_synpred38_Css36109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred39_Css36135 = new BitSet(new long[]{0x01DBFFFFE36497D0L,0x0000003FFE1FFF00L});
    public static final BitSet FOLLOW_cp_expression_atom_in_synpred39_Css36138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_math_expression_in_synpred40_Css36256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred41_Css36389 = new BitSet(new long[]{0x201C000000000000L});
    public static final BitSet FOLLOW_set_in_synpred41_Css36392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred42_Css37380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred43_Css37526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred44_Css37677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred45_Css37794 = new BitSet(new long[]{0x0000000000000002L});

}