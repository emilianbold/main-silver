// $ANTLR 3.3 Nov 30, 2010 12:50:56 /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g 2013-04-03 10:24:07

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2011 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2011 Sun Microsystems, Inc.
 */
package org.netbeans.modules.css.lib;
    


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.debug.*;
import java.io.IOException;
public class Css3Parser extends DebugParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NAMESPACE_SYM", "SEMI", "IDENT", "STRING", "URI", "CHARSET_SYM", "IMPORT_SYM", "COMMA", "MEDIA_SYM", "LBRACE", "RBRACE", "AND", "ONLY", "NOT", "GEN", "LPAREN", "COLON", "RPAREN", "AT_IDENT", "WS", "MOZ_DOCUMENT_SYM", "MOZ_URL_PREFIX", "MOZ_DOMAIN", "MOZ_REGEXP", "WEBKIT_KEYFRAMES_SYM", "PERCENTAGE", "PAGE_SYM", "COUNTER_STYLE_SYM", "FONT_FACE_SYM", "TOPLEFTCORNER_SYM", "TOPLEFT_SYM", "TOPCENTER_SYM", "TOPRIGHT_SYM", "TOPRIGHTCORNER_SYM", "BOTTOMLEFTCORNER_SYM", "BOTTOMLEFT_SYM", "BOTTOMCENTER_SYM", "BOTTOMRIGHT_SYM", "BOTTOMRIGHTCORNER_SYM", "LEFTTOP_SYM", "LEFTMIDDLE_SYM", "LEFTBOTTOM_SYM", "RIGHTTOP_SYM", "RIGHTMIDDLE_SYM", "RIGHTBOTTOM_SYM", "SOLIDUS", "MINUS", "PLUS", "GREATER", "TILDE", "HASH_SYMBOL", "HASH", "DOT", "LBRACKET", "DCOLON", "SASS_EXTEND_ONLY_SELECTOR", "STAR", "PIPE", "NAME", "LESS_AND", "OPEQ", "INCLUDES", "DASHMATCH", "BEGINS", "ENDS", "CONTAINS", "RBRACKET", "SASS_VAR", "IMPORTANT_SYM", "NUMBER", "LENGTH", "EMS", "REM", "EXS", "ANGLE", "TIME", "FREQ", "RESOLUTION", "DIMENSION", "NL", "COMMENT", "SASS_DEFAULT", "OR", "CP_EQ", "CP_NOT_EQ", "LESS", "LESS_OR_EQ", "GREATER_OR_EQ", "SASS_MIXIN", "SASS_INCLUDE", "LESS_DOTS", "LESS_REST", "LESS_WHEN", "SASS_EXTEND", "SASS_OPTIONAL", "SASS_DEBUG", "SASS_WARN", "SASS_IF", "SASS_ELSE", "SASS_FOR", "SASS_EACH", "SASS_WHILE", "SASS_FUNCTION", "SASS_RETURN", "SASS_CONTENT", "HEXCHAR", "NONASCII", "UNICODE", "ESCAPE", "NMSTART", "NMCHAR", "URL", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "CDO", "CDC", "INVALID", "LINE_COMMENT"
    };
    public static final int EOF=-1;
    public static final int NAMESPACE_SYM=4;
    public static final int SEMI=5;
    public static final int IDENT=6;
    public static final int STRING=7;
    public static final int URI=8;
    public static final int CHARSET_SYM=9;
    public static final int IMPORT_SYM=10;
    public static final int COMMA=11;
    public static final int MEDIA_SYM=12;
    public static final int LBRACE=13;
    public static final int RBRACE=14;
    public static final int AND=15;
    public static final int ONLY=16;
    public static final int NOT=17;
    public static final int GEN=18;
    public static final int LPAREN=19;
    public static final int COLON=20;
    public static final int RPAREN=21;
    public static final int AT_IDENT=22;
    public static final int WS=23;
    public static final int MOZ_DOCUMENT_SYM=24;
    public static final int MOZ_URL_PREFIX=25;
    public static final int MOZ_DOMAIN=26;
    public static final int MOZ_REGEXP=27;
    public static final int WEBKIT_KEYFRAMES_SYM=28;
    public static final int PERCENTAGE=29;
    public static final int PAGE_SYM=30;
    public static final int COUNTER_STYLE_SYM=31;
    public static final int FONT_FACE_SYM=32;
    public static final int TOPLEFTCORNER_SYM=33;
    public static final int TOPLEFT_SYM=34;
    public static final int TOPCENTER_SYM=35;
    public static final int TOPRIGHT_SYM=36;
    public static final int TOPRIGHTCORNER_SYM=37;
    public static final int BOTTOMLEFTCORNER_SYM=38;
    public static final int BOTTOMLEFT_SYM=39;
    public static final int BOTTOMCENTER_SYM=40;
    public static final int BOTTOMRIGHT_SYM=41;
    public static final int BOTTOMRIGHTCORNER_SYM=42;
    public static final int LEFTTOP_SYM=43;
    public static final int LEFTMIDDLE_SYM=44;
    public static final int LEFTBOTTOM_SYM=45;
    public static final int RIGHTTOP_SYM=46;
    public static final int RIGHTMIDDLE_SYM=47;
    public static final int RIGHTBOTTOM_SYM=48;
    public static final int SOLIDUS=49;
    public static final int MINUS=50;
    public static final int PLUS=51;
    public static final int GREATER=52;
    public static final int TILDE=53;
    public static final int HASH_SYMBOL=54;
    public static final int HASH=55;
    public static final int DOT=56;
    public static final int LBRACKET=57;
    public static final int DCOLON=58;
    public static final int SASS_EXTEND_ONLY_SELECTOR=59;
    public static final int STAR=60;
    public static final int PIPE=61;
    public static final int NAME=62;
    public static final int LESS_AND=63;
    public static final int OPEQ=64;
    public static final int INCLUDES=65;
    public static final int DASHMATCH=66;
    public static final int BEGINS=67;
    public static final int ENDS=68;
    public static final int CONTAINS=69;
    public static final int RBRACKET=70;
    public static final int SASS_VAR=71;
    public static final int IMPORTANT_SYM=72;
    public static final int NUMBER=73;
    public static final int LENGTH=74;
    public static final int EMS=75;
    public static final int REM=76;
    public static final int EXS=77;
    public static final int ANGLE=78;
    public static final int TIME=79;
    public static final int FREQ=80;
    public static final int RESOLUTION=81;
    public static final int DIMENSION=82;
    public static final int NL=83;
    public static final int COMMENT=84;
    public static final int SASS_DEFAULT=85;
    public static final int OR=86;
    public static final int CP_EQ=87;
    public static final int CP_NOT_EQ=88;
    public static final int LESS=89;
    public static final int LESS_OR_EQ=90;
    public static final int GREATER_OR_EQ=91;
    public static final int SASS_MIXIN=92;
    public static final int SASS_INCLUDE=93;
    public static final int LESS_DOTS=94;
    public static final int LESS_REST=95;
    public static final int LESS_WHEN=96;
    public static final int SASS_EXTEND=97;
    public static final int SASS_OPTIONAL=98;
    public static final int SASS_DEBUG=99;
    public static final int SASS_WARN=100;
    public static final int SASS_IF=101;
    public static final int SASS_ELSE=102;
    public static final int SASS_FOR=103;
    public static final int SASS_EACH=104;
    public static final int SASS_WHILE=105;
    public static final int SASS_FUNCTION=106;
    public static final int SASS_RETURN=107;
    public static final int SASS_CONTENT=108;
    public static final int HEXCHAR=109;
    public static final int NONASCII=110;
    public static final int UNICODE=111;
    public static final int ESCAPE=112;
    public static final int NMSTART=113;
    public static final int NMCHAR=114;
    public static final int URL=115;
    public static final int A=116;
    public static final int B=117;
    public static final int C=118;
    public static final int D=119;
    public static final int E=120;
    public static final int F=121;
    public static final int G=122;
    public static final int H=123;
    public static final int I=124;
    public static final int J=125;
    public static final int K=126;
    public static final int L=127;
    public static final int M=128;
    public static final int N=129;
    public static final int O=130;
    public static final int P=131;
    public static final int Q=132;
    public static final int R=133;
    public static final int S=134;
    public static final int T=135;
    public static final int U=136;
    public static final int V=137;
    public static final int W=138;
    public static final int X=139;
    public static final int Y=140;
    public static final int Z=141;
    public static final int CDO=142;
    public static final int CDC=143;
    public static final int INVALID=144;
    public static final int LINE_COMMENT=145;

    // delegates
    // delegators

    public static final String[] ruleNames = new String[] {
        "invalidRule", "counterStyle", "property", "namespacePrefix", "margin_sym", 
        "synpred22_Css3", "sass_control_block", "styleSheet", "cp_expression", 
        "syncToFollow", "synpred13_Css3", "unaryOperator", "elementSubsequent", 
        "synpred4_Css3", "synpred9_Css3", "media", "sass_function_declaration", 
        "rule", "cssClass", "mediaQueryList", "charSet", "slAttributeName", 
        "synpred20_Css3", "operator", "cp_expression_atom", "pseudo", "synpred1_Css3", 
        "synpred24_Css3", "expressionPredicate", "cssId", "selector", "webkitKeyframeSelectors", 
        "synpred23_Css3", "cp_arg", "body", "term", "sass_for", "prio", 
        "synpred8_Css3", "syncToDeclarationsRule", "synpred21_Css3", "declarations", 
        "sass_each", "sass_control_expression", "cp_mixin_call", "synpred28_Css3", 
        "namespace", "sass_extend", "fontFace", "synpred16_Css3", "sass_declaration_interpolation_expression", 
        "synpred15_Css3", "resourceIdentifier", "propertyDeclaration", "synpred10_Css3", 
        "elementName", "cp_mixin_call_arg", "slAttributeValue", "webkitKeyframes", 
        "charSetValue", "bodyItem", "synpred30_Css3", "pseudoPage", "mediaType", 
        "cp_math_expression_atom", "sass_content", "sass_interpolation_expression_var", 
        "hexColor", "cp_variable_declaration", "declaration", "synpred6_Css3", 
        "sass_debug", "synpred5_Css3", "synpred19_Css3", "syncTo_SEMI", 
        "selectorsGroup", "imports", "sass_control", "function", "less_mixin_guarded", 
        "namespacePrefixName", "cp_args_list", "fnAttributeValue", "synpred14_Css3", 
        "ws", "sass_selector_interpolation_expression", "less_condition", 
        "cp_mixin_name", "combinator", "sass_nested_properties", "mediaExpression", 
        "cp_math_expressions", "sass_function_name", "sass_if", "webkitKeyframesBlock", 
        "mediaQuery", "esPred", "syncTo_RBRACE", "mediaFeature", "synpred26_Css3", 
        "mediaQueryOperator", "synpred3_Css3", "slAttribute", "moz_document", 
        "generic_at_rule", "synpred18_Css3", "cp_mixin_call_args", "synpred12_Css3", 
        "synpred29_Css3", "cp_propertyValue", "synpred17_Css3", "atRuleId", 
        "sass_extend_only_selector", "moz_document_function", "expression", 
        "sass_while", "fnAttributeName", "typeSelector", "synpred7_Css3", 
        "at_rule", "fnAttribute", "namespaces", "less_function_in_condition", 
        "cp_math_expression", "page", "margin", "functionName", "synpred25_Css3", 
        "synpred11_Css3", "vendorAtRule", "synpred2_Css3", "sass_else", 
        "cp_variable", "importItem", "less_fn_name", "cp_expression_operator", 
        "less_condition_operator", "cp_expression_list", "cp_mixin_declaration", 
        "simpleSelectorSequence", "sass_function_return", "fnAttributes", 
        "propertyValue", "synpred27_Css3"
    };
    public static final boolean[] decisionCanBacktrack = new boolean[] {
        false, // invalid decision
        false, false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            true, false, false, false, false, false, true, false, false, 
            false, false, false, false, false, false, false, true, false, 
            false, false, false, true, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            true, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, true, false, false, false, false, false, false, false, 
            false, false, true, false, false, true, false, false, false, 
            false, false, true, false, true, false, true, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, true, false, false, true, false, false, false, false, 
            false, false, false, false, false, false, false, true, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, true, 
            false, false, false, true, false, false, false, false, true, 
            false, false, false, true, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, true, 
            false, true, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false
    };

     
        public int ruleLevel = 0;
        public int getRuleLevel() { return ruleLevel; }
        public void incRuleLevel() { ruleLevel++; }
        public void decRuleLevel() { ruleLevel--; }
        public Css3Parser(TokenStream input) {
            this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT, new RecognizerSharedState());
        }
        public Css3Parser(TokenStream input, int port, RecognizerSharedState state) {
            super(input, state);
            DebugEventSocketProxy proxy =
                new DebugEventSocketProxy(this, port, null);
            setDebugListener(proxy);
            try {
                proxy.handshake();
            }
            catch (IOException ioe) {
                reportError(ioe);
            }
        }
    public Css3Parser(TokenStream input, DebugEventListener dbg) {
        super(input, dbg, new RecognizerSharedState());

    }
    protected boolean evalPredicate(boolean result, String predicate) {
        dbg.semanticPredicate(result, predicate);
        return result;
    }


    public String[] getTokenNames() { return Css3Parser.tokenNames; }
    public String getGrammarFileName() { return "/Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g"; }



        protected boolean isLessSource() {
            return false;
        }
        
        protected boolean isScssSource() {
            return false;
        }
        
        private boolean isCssPreprocessorSource() {
            return isLessSource() || isScssSource();
        }

        private boolean tokenNameEquals(String tokenImage) {
            return tokenImage.equalsIgnoreCase(input.LT(1).getText());
        }

        private static enum DeclarationType {
            COMMAND, BLOCK;
        }
        
        private DeclarationType declarationType;

    /**
         * Use the current stacked followset to work out the valid tokens that
         * can follow on from the current point in the parse, then recover by
         * eating tokens that are not a member of the follow set we compute.
         *
         * This method is used whenever we wish to force a sync, even though
         * the parser has not yet checked LA(1) for alt selection. This is useful
         * in situations where only a subset of tokens can begin a new construct
         * (such as the start of a new statement in a block) and we want to
         * proactively detect garbage so that the current rule does not exit on
         * on an exception.
         *
         * We could override recover() to make this the default behavior but that
         * is too much like using a sledge hammer to crack a nut. We want finer
         * grained control of the recovery and error mechanisms.
         */
        protected void syncToSet()
        {
            // Compute the followset that is in context wherever we are in the
            // rule chain/stack
            //
             BitSet follow = state.following[state._fsp]; //computeContextSensitiveRuleFOLLOW();

             syncToSet(follow);
        }

        protected void syncToSet(BitSet follow)
        {
            int mark = -1;

            //create error-recovery node
            dbg.enterRule(getGrammarFileName(), "recovery");

            try {

                mark = input.mark();

                // Consume all tokens in the stream until we find a member of the follow
                // set, which means the next production should be guaranteed to be happy.
                //
                while (! follow.member(input.LA(1)) ) {

                    if  (input.LA(1) == Token.EOF) {

                        // Looks like we didn't find anything at all that can help us here
                        // so we need to rewind to where we were and let normal error handling
                        // bail out.
                        //
                        input.rewind();
                        mark = -1;
                        return;
                    }
                    input.consume();

                    // Now here, because you are consuming some tokens, yu will probably want
                    // to raise an error message such as "Spurious elements after the class member were discarded"
                    // using whatever your override of displayRecognitionError() routine does to record
                    // error messages. The exact error my depend on context etc.
                    //
                }
            } catch (Exception e) {

              // Just ignore any errors here, we will just let the recognizer
              // try to resync as normal - something must be very screwed.
              //
            }
            finally {
                dbg.exitRule(getGrammarFileName(), "recovery");

                // Always release the mark we took
                //
                if  (mark != -1) {
                    input.release(mark);
                }
            }
        }
        
        /**
             * synces to next RBRACE "}" taking nesting into account
             */
            protected void syncToRBRACE(int nest)
                {
                    
                    int mark = -1;
                    //create error-recovery node
                    //dbg.enterRule(getGrammarFileName(), "recovery");

                    try {
                        mark = input.mark();
                        for(;;) {
                            //read char
                            int c = input.LA(1);
                            
                            switch(c) {
                                case Token.EOF:
                                    input.rewind();
                                    mark = -1;
                                    return ;
                                case Css3Lexer.LBRACE:
                                    nest++;
                                    break;
                                case Css3Lexer.RBRACE:
                                    nest--;
                                    if(nest == 0) {
                                        //do not eat the final RBRACE
                                        return ;
                                    }
                            }
                            
                            input.consume();
                                                
                        }

                    } catch (Exception e) {

                      // Just ignore any errors here, we will just let the recognizer
                      // try to resync as normal - something must be very screwed.
                      //
                    }
                    finally {
                        if  (mark != -1) {
                            input.release(mark);
                        }
                        //dbg.exitRule(getGrammarFileName(), "recovery");
                    }
                }
        



    // $ANTLR start "styleSheet"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:1: styleSheet : ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF ;
    public final void styleSheet() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "styleSheet");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(327, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:328:5: ( ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:329:6: ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF
            {
            dbg.location(329,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:329:6: ( ws )?
            int alt1=2;
            try { dbg.enterSubRule(1);
            try { dbg.enterDecision(1, decisionCanBacktrack[1]);

            int LA1_0 = input.LA(1);

            if ( (LA1_0==WS||(LA1_0>=NL && LA1_0<=COMMENT)) ) {
                alt1=1;
            }
            } finally {dbg.exitDecision(1);}

            switch (alt1) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:329:6: ws
                    {
                    dbg.location(329,6);
                    pushFollow(FOLLOW_ws_in_styleSheet125);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(1);}

            dbg.location(330,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:330:6: ( charSet ( ws )? )?
            int alt3=2;
            try { dbg.enterSubRule(3);
            try { dbg.enterDecision(3, decisionCanBacktrack[3]);

            int LA3_0 = input.LA(1);

            if ( (LA3_0==CHARSET_SYM) ) {
                alt3=1;
            }
            } finally {dbg.exitDecision(3);}

            switch (alt3) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:330:8: charSet ( ws )?
                    {
                    dbg.location(330,8);
                    pushFollow(FOLLOW_charSet_in_styleSheet135);
                    charSet();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(330,16);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:330:16: ( ws )?
                    int alt2=2;
                    try { dbg.enterSubRule(2);
                    try { dbg.enterDecision(2, decisionCanBacktrack[2]);

                    int LA2_0 = input.LA(1);

                    if ( (LA2_0==WS||(LA2_0>=NL && LA2_0<=COMMENT)) ) {
                        alt2=1;
                    }
                    } finally {dbg.exitDecision(2);}

                    switch (alt2) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:330:16: ws
                            {
                            dbg.location(330,16);
                            pushFollow(FOLLOW_ws_in_styleSheet137);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(2);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(3);}

            dbg.location(331,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:331:9: ( imports )?
            int alt4=2;
            try { dbg.enterSubRule(4);
            try { dbg.enterDecision(4, decisionCanBacktrack[4]);

            try {
                isCyclicDecision = true;
                alt4 = dfa4.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(4);}

            switch (alt4) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:331:9: imports
                    {
                    dbg.location(331,9);
                    pushFollow(FOLLOW_imports_in_styleSheet151);
                    imports();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(4);}

            dbg.location(332,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:332:9: ( namespaces )?
            int alt5=2;
            try { dbg.enterSubRule(5);
            try { dbg.enterDecision(5, decisionCanBacktrack[5]);

            int LA5_0 = input.LA(1);

            if ( (LA5_0==NAMESPACE_SYM) ) {
                alt5=1;
            }
            } finally {dbg.exitDecision(5);}

            switch (alt5) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:332:9: namespaces
                    {
                    dbg.location(332,9);
                    pushFollow(FOLLOW_namespaces_in_styleSheet162);
                    namespaces();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(5);}

            dbg.location(333,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:9: ( body )?
            int alt6=2;
            try { dbg.enterSubRule(6);
            try { dbg.enterDecision(6, decisionCanBacktrack[6]);

            int LA6_0 = input.LA(1);

            if ( (LA6_0==IDENT||(LA6_0>=IMPORT_SYM && LA6_0<=MEDIA_SYM)||LA6_0==GEN||LA6_0==COLON||LA6_0==AT_IDENT||LA6_0==MOZ_DOCUMENT_SYM||LA6_0==WEBKIT_KEYFRAMES_SYM||(LA6_0>=PAGE_SYM && LA6_0<=FONT_FACE_SYM)||LA6_0==MINUS||LA6_0==GREATER||(LA6_0>=HASH_SYMBOL && LA6_0<=PIPE)||LA6_0==LESS_AND||LA6_0==SASS_VAR||(LA6_0>=SASS_MIXIN && LA6_0<=SASS_INCLUDE)||(LA6_0>=SASS_DEBUG && LA6_0<=SASS_IF)||(LA6_0>=SASS_FOR && LA6_0<=SASS_FUNCTION)) ) {
                alt6=1;
            }
            } finally {dbg.exitDecision(6);}

            switch (alt6) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:9: body
                    {
                    dbg.location(333,9);
                    pushFollow(FOLLOW_body_in_styleSheet174);
                    body();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(6);}

            dbg.location(334,6);
            match(input,EOF,FOLLOW_EOF_in_styleSheet182); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(335, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "styleSheet");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "styleSheet"


    // $ANTLR start "namespaces"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:1: namespaces : ( namespace ( ws )? )+ ;
    public final void namespaces() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespaces");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(337, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:338:2: ( ( namespace ( ws )? )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:339:2: ( namespace ( ws )? )+
            {
            dbg.location(339,2);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:339:2: ( namespace ( ws )? )+
            int cnt8=0;
            try { dbg.enterSubRule(8);

            loop8:
            do {
                int alt8=2;
                try { dbg.enterDecision(8, decisionCanBacktrack[8]);

                int LA8_0 = input.LA(1);

                if ( (LA8_0==NAMESPACE_SYM) ) {
                    alt8=1;
                }


                } finally {dbg.exitDecision(8);}

                switch (alt8) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:339:4: namespace ( ws )?
            	    {
            	    dbg.location(339,4);
            	    pushFollow(FOLLOW_namespace_in_namespaces199);
            	    namespace();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(339,14);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:339:14: ( ws )?
            	    int alt7=2;
            	    try { dbg.enterSubRule(7);
            	    try { dbg.enterDecision(7, decisionCanBacktrack[7]);

            	    int LA7_0 = input.LA(1);

            	    if ( (LA7_0==WS||(LA7_0>=NL && LA7_0<=COMMENT)) ) {
            	        alt7=1;
            	    }
            	    } finally {dbg.exitDecision(7);}

            	    switch (alt7) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:339:14: ws
            	            {
            	            dbg.location(339,14);
            	            pushFollow(FOLLOW_ws_in_namespaces201);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(7);}


            	    }
            	    break;

            	default :
            	    if ( cnt8 >= 1 ) break loop8;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(8, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt8++;
            } while (true);
            } finally {dbg.exitSubRule(8);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(340, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespaces");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespaces"


    // $ANTLR start "namespace"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:342:1: namespace : NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI ;
    public final void namespace() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespace");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(342, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:343:3: ( NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:343:5: NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI
            {
            dbg.location(343,5);
            match(input,NAMESPACE_SYM,FOLLOW_NAMESPACE_SYM_in_namespace217); if (state.failed) return ;
            dbg.location(343,19);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:343:19: ( ws )?
            int alt9=2;
            try { dbg.enterSubRule(9);
            try { dbg.enterDecision(9, decisionCanBacktrack[9]);

            int LA9_0 = input.LA(1);

            if ( (LA9_0==WS||(LA9_0>=NL && LA9_0<=COMMENT)) ) {
                alt9=1;
            }
            } finally {dbg.exitDecision(9);}

            switch (alt9) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:343:19: ws
                    {
                    dbg.location(343,19);
                    pushFollow(FOLLOW_ws_in_namespace219);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(9);}

            dbg.location(343,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:343:23: ( namespacePrefixName ( ws )? )?
            int alt11=2;
            try { dbg.enterSubRule(11);
            try { dbg.enterDecision(11, decisionCanBacktrack[11]);

            int LA11_0 = input.LA(1);

            if ( (LA11_0==IDENT) ) {
                alt11=1;
            }
            } finally {dbg.exitDecision(11);}

            switch (alt11) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:343:24: namespacePrefixName ( ws )?
                    {
                    dbg.location(343,24);
                    pushFollow(FOLLOW_namespacePrefixName_in_namespace223);
                    namespacePrefixName();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(343,44);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:343:44: ( ws )?
                    int alt10=2;
                    try { dbg.enterSubRule(10);
                    try { dbg.enterDecision(10, decisionCanBacktrack[10]);

                    int LA10_0 = input.LA(1);

                    if ( (LA10_0==WS||(LA10_0>=NL && LA10_0<=COMMENT)) ) {
                        alt10=1;
                    }
                    } finally {dbg.exitDecision(10);}

                    switch (alt10) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:343:44: ws
                            {
                            dbg.location(343,44);
                            pushFollow(FOLLOW_ws_in_namespace225);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(10);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(11);}

            dbg.location(343,50);
            pushFollow(FOLLOW_resourceIdentifier_in_namespace230);
            resourceIdentifier();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(343,69);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:343:69: ( ws )?
            int alt12=2;
            try { dbg.enterSubRule(12);
            try { dbg.enterDecision(12, decisionCanBacktrack[12]);

            int LA12_0 = input.LA(1);

            if ( (LA12_0==WS||(LA12_0>=NL && LA12_0<=COMMENT)) ) {
                alt12=1;
            }
            } finally {dbg.exitDecision(12);}

            switch (alt12) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:343:69: ws
                    {
                    dbg.location(343,69);
                    pushFollow(FOLLOW_ws_in_namespace232);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(12);}

            dbg.location(343,73);
            match(input,SEMI,FOLLOW_SEMI_in_namespace235); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(344, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespace");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespace"


    // $ANTLR start "namespacePrefixName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:346:1: namespacePrefixName : IDENT ;
    public final void namespacePrefixName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespacePrefixName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(346, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:347:3: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:347:5: IDENT
            {
            dbg.location(347,5);
            match(input,IDENT,FOLLOW_IDENT_in_namespacePrefixName248); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(348, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespacePrefixName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespacePrefixName"


    // $ANTLR start "resourceIdentifier"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:350:1: resourceIdentifier : ( STRING | URI );
    public final void resourceIdentifier() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "resourceIdentifier");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(350, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:351:3: ( STRING | URI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(351,3);
            if ( (input.LA(1)>=STRING && input.LA(1)<=URI) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(352, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "resourceIdentifier");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "resourceIdentifier"


    // $ANTLR start "charSet"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:354:1: charSet : CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI ;
    public final void charSet() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "charSet");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(354, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:355:5: ( CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:355:9: CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI
            {
            dbg.location(355,9);
            match(input,CHARSET_SYM,FOLLOW_CHARSET_SYM_in_charSet286); if (state.failed) return ;
            dbg.location(355,21);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:355:21: ( ws )?
            int alt13=2;
            try { dbg.enterSubRule(13);
            try { dbg.enterDecision(13, decisionCanBacktrack[13]);

            int LA13_0 = input.LA(1);

            if ( (LA13_0==WS||(LA13_0>=NL && LA13_0<=COMMENT)) ) {
                alt13=1;
            }
            } finally {dbg.exitDecision(13);}

            switch (alt13) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:355:21: ws
                    {
                    dbg.location(355,21);
                    pushFollow(FOLLOW_ws_in_charSet288);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(13);}

            dbg.location(355,25);
            pushFollow(FOLLOW_charSetValue_in_charSet291);
            charSetValue();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(355,38);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:355:38: ( ws )?
            int alt14=2;
            try { dbg.enterSubRule(14);
            try { dbg.enterDecision(14, decisionCanBacktrack[14]);

            int LA14_0 = input.LA(1);

            if ( (LA14_0==WS||(LA14_0>=NL && LA14_0<=COMMENT)) ) {
                alt14=1;
            }
            } finally {dbg.exitDecision(14);}

            switch (alt14) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:355:38: ws
                    {
                    dbg.location(355,38);
                    pushFollow(FOLLOW_ws_in_charSet293);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(14);}

            dbg.location(355,42);
            match(input,SEMI,FOLLOW_SEMI_in_charSet296); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(356, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "charSet");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "charSet"


    // $ANTLR start "charSetValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:1: charSetValue : STRING ;
    public final void charSetValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "charSetValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(358, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:359:2: ( STRING )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:359:4: STRING
            {
            dbg.location(359,4);
            match(input,STRING,FOLLOW_STRING_in_charSetValue310); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(360, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "charSetValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "charSetValue"


    // $ANTLR start "imports"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:362:1: imports : ( importItem ( ws )? SEMI ( ws )? )+ ;
    public final void imports() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "imports");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(362, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:2: ( ( importItem ( ws )? SEMI ( ws )? )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:364:2: ( importItem ( ws )? SEMI ( ws )? )+
            {
            dbg.location(364,2);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:364:2: ( importItem ( ws )? SEMI ( ws )? )+
            int cnt17=0;
            try { dbg.enterSubRule(17);

            loop17:
            do {
                int alt17=2;
                try { dbg.enterDecision(17, decisionCanBacktrack[17]);

                try {
                    isCyclicDecision = true;
                    alt17 = dfa17.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(17);}

                switch (alt17) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:364:4: importItem ( ws )? SEMI ( ws )?
            	    {
            	    dbg.location(364,4);
            	    pushFollow(FOLLOW_importItem_in_imports324);
            	    importItem();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(364,15);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:364:15: ( ws )?
            	    int alt15=2;
            	    try { dbg.enterSubRule(15);
            	    try { dbg.enterDecision(15, decisionCanBacktrack[15]);

            	    int LA15_0 = input.LA(1);

            	    if ( (LA15_0==WS||(LA15_0>=NL && LA15_0<=COMMENT)) ) {
            	        alt15=1;
            	    }
            	    } finally {dbg.exitDecision(15);}

            	    switch (alt15) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:364:15: ws
            	            {
            	            dbg.location(364,15);
            	            pushFollow(FOLLOW_ws_in_imports326);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(15);}

            	    dbg.location(364,19);
            	    match(input,SEMI,FOLLOW_SEMI_in_imports329); if (state.failed) return ;
            	    dbg.location(364,24);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:364:24: ( ws )?
            	    int alt16=2;
            	    try { dbg.enterSubRule(16);
            	    try { dbg.enterDecision(16, decisionCanBacktrack[16]);

            	    int LA16_0 = input.LA(1);

            	    if ( (LA16_0==WS||(LA16_0>=NL && LA16_0<=COMMENT)) ) {
            	        alt16=1;
            	    }
            	    } finally {dbg.exitDecision(16);}

            	    switch (alt16) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:364:24: ws
            	            {
            	            dbg.location(364,24);
            	            pushFollow(FOLLOW_ws_in_imports331);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(16);}


            	    }
            	    break;

            	default :
            	    if ( cnt17 >= 1 ) break loop17;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(17, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt17++;
            } while (true);
            } finally {dbg.exitSubRule(17);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(365, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "imports");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "imports"


    // $ANTLR start "importItem"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:367:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? );
    public final void importItem() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "importItem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(367, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:5: ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? )
            int alt27=2;
            try { dbg.enterDecision(27, decisionCanBacktrack[27]);

            try {
                isCyclicDecision = true;
                alt27 = dfa27.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(27);}

            switch (alt27) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:9: IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    {
                    dbg.location(369,9);
                    match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem361); if (state.failed) return ;
                    dbg.location(369,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:20: ( ws )?
                    int alt18=2;
                    try { dbg.enterSubRule(18);
                    try { dbg.enterDecision(18, decisionCanBacktrack[18]);

                    int LA18_0 = input.LA(1);

                    if ( (LA18_0==WS||(LA18_0>=NL && LA18_0<=COMMENT)) ) {
                        alt18=1;
                    }
                    } finally {dbg.exitDecision(18);}

                    switch (alt18) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:20: ws
                            {
                            dbg.location(369,20);
                            pushFollow(FOLLOW_ws_in_importItem363);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(18);}

                    dbg.location(369,24);
                    pushFollow(FOLLOW_resourceIdentifier_in_importItem366);
                    resourceIdentifier();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(369,43);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:43: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    int alt20=2;
                    try { dbg.enterSubRule(20);
                    try { dbg.enterDecision(20, decisionCanBacktrack[20]);

                    try {
                        isCyclicDecision = true;
                        alt20 = dfa20.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(20);}

                    switch (alt20) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:44: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
                            {
                            dbg.location(369,66);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:66: ( ws )?
                            int alt19=2;
                            try { dbg.enterSubRule(19);
                            try { dbg.enterDecision(19, decisionCanBacktrack[19]);

                            int LA19_0 = input.LA(1);

                            if ( (LA19_0==WS||(LA19_0>=NL && LA19_0<=COMMENT)) ) {
                                alt19=1;
                            }
                            } finally {dbg.exitDecision(19);}

                            switch (alt19) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:66: ws
                                    {
                                    dbg.location(369,66);
                                    pushFollow(FOLLOW_ws_in_importItem376);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(19);}

                            dbg.location(369,70);
                            pushFollow(FOLLOW_mediaQueryList_in_importItem379);
                            mediaQueryList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(20);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:9: {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    {
                    dbg.location(372,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "importItem", "isScssSource()");
                    }
                    dbg.location(372,27);
                    match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem412); if (state.failed) return ;
                    dbg.location(372,38);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:38: ( ws )?
                    int alt21=2;
                    try { dbg.enterSubRule(21);
                    try { dbg.enterDecision(21, decisionCanBacktrack[21]);

                    int LA21_0 = input.LA(1);

                    if ( (LA21_0==WS||(LA21_0>=NL && LA21_0<=COMMENT)) ) {
                        alt21=1;
                    }
                    } finally {dbg.exitDecision(21);}

                    switch (alt21) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:38: ws
                            {
                            dbg.location(372,38);
                            pushFollow(FOLLOW_ws_in_importItem414);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(21);}

                    dbg.location(372,42);
                    pushFollow(FOLLOW_resourceIdentifier_in_importItem417);
                    resourceIdentifier();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(372,61);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:61: ( ( ws )? COMMA ( ws )? resourceIdentifier )*
                    try { dbg.enterSubRule(24);

                    loop24:
                    do {
                        int alt24=2;
                        try { dbg.enterDecision(24, decisionCanBacktrack[24]);

                        try {
                            isCyclicDecision = true;
                            alt24 = dfa24.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(24);}

                        switch (alt24) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:62: ( ws )? COMMA ( ws )? resourceIdentifier
                    	    {
                    	    dbg.location(372,62);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:62: ( ws )?
                    	    int alt22=2;
                    	    try { dbg.enterSubRule(22);
                    	    try { dbg.enterDecision(22, decisionCanBacktrack[22]);

                    	    int LA22_0 = input.LA(1);

                    	    if ( (LA22_0==WS||(LA22_0>=NL && LA22_0<=COMMENT)) ) {
                    	        alt22=1;
                    	    }
                    	    } finally {dbg.exitDecision(22);}

                    	    switch (alt22) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:62: ws
                    	            {
                    	            dbg.location(372,62);
                    	            pushFollow(FOLLOW_ws_in_importItem420);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(22);}

                    	    dbg.location(372,66);
                    	    match(input,COMMA,FOLLOW_COMMA_in_importItem423); if (state.failed) return ;
                    	    dbg.location(372,72);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:72: ( ws )?
                    	    int alt23=2;
                    	    try { dbg.enterSubRule(23);
                    	    try { dbg.enterDecision(23, decisionCanBacktrack[23]);

                    	    int LA23_0 = input.LA(1);

                    	    if ( (LA23_0==WS||(LA23_0>=NL && LA23_0<=COMMENT)) ) {
                    	        alt23=1;
                    	    }
                    	    } finally {dbg.exitDecision(23);}

                    	    switch (alt23) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:72: ws
                    	            {
                    	            dbg.location(372,72);
                    	            pushFollow(FOLLOW_ws_in_importItem425);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(23);}

                    	    dbg.location(372,76);
                    	    pushFollow(FOLLOW_resourceIdentifier_in_importItem428);
                    	    resourceIdentifier();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop24;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(24);}

                    dbg.location(372,97);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:97: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    int alt26=2;
                    try { dbg.enterSubRule(26);
                    try { dbg.enterDecision(26, decisionCanBacktrack[26]);

                    try {
                        isCyclicDecision = true;
                        alt26 = dfa26.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(26);}

                    switch (alt26) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:98: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
                            {
                            dbg.location(372,120);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:120: ( ws )?
                            int alt25=2;
                            try { dbg.enterSubRule(25);
                            try { dbg.enterDecision(25, decisionCanBacktrack[25]);

                            int LA25_0 = input.LA(1);

                            if ( (LA25_0==WS||(LA25_0>=NL && LA25_0<=COMMENT)) ) {
                                alt25=1;
                            }
                            } finally {dbg.exitDecision(25);}

                            switch (alt25) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:120: ws
                                    {
                                    dbg.location(372,120);
                                    pushFollow(FOLLOW_ws_in_importItem440);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(25);}

                            dbg.location(372,124);
                            pushFollow(FOLLOW_mediaQueryList_in_importItem443);
                            mediaQueryList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(26);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(373, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "importItem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "importItem"


    // $ANTLR start "media"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:374:1: media : MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? ( ( ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI | sass_declaration_interpolation_expression COLON )=> propertyDeclaration ( ws )? SEMI | {...}? sass_extend ( ws )? SEMI | {...}? sass_debug ( ws )? SEMI | {...}? sass_control ( ws )? SEMI | {...}? sass_content ( ws )? SEMI | rule | page | fontFace | vendorAtRule | media ) ( ws )? )* RBRACE ;
    public final void media() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "media");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(374, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:375:5: ( MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? ( ( ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI | sass_declaration_interpolation_expression COLON )=> propertyDeclaration ( ws )? SEMI | {...}? sass_extend ( ws )? SEMI | {...}? sass_debug ( ws )? SEMI | {...}? sass_control ( ws )? SEMI | {...}? sass_content ( ws )? SEMI | rule | page | fontFace | vendorAtRule | media ) ( ws )? )* RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:375:7: MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? ( ( ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI | sass_declaration_interpolation_expression COLON )=> propertyDeclaration ( ws )? SEMI | {...}? sass_extend ( ws )? SEMI | {...}? sass_debug ( ws )? SEMI | {...}? sass_control ( ws )? SEMI | {...}? sass_content ( ws )? SEMI | rule | page | fontFace | vendorAtRule | media ) ( ws )? )* RBRACE
            {
            dbg.location(375,7);
            match(input,MEDIA_SYM,FOLLOW_MEDIA_SYM_in_media461); if (state.failed) return ;
            dbg.location(375,17);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:375:17: ( ws )?
            int alt28=2;
            try { dbg.enterSubRule(28);
            try { dbg.enterDecision(28, decisionCanBacktrack[28]);

            int LA28_0 = input.LA(1);

            if ( (LA28_0==WS||(LA28_0>=NL && LA28_0<=COMMENT)) ) {
                alt28=1;
            }
            } finally {dbg.exitDecision(28);}

            switch (alt28) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:375:17: ws
                    {
                    dbg.location(375,17);
                    pushFollow(FOLLOW_ws_in_media463);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(28);}

            dbg.location(376,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:376:5: ( mediaQueryList )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:10: mediaQueryList
            {
            dbg.location(379,10);
            pushFollow(FOLLOW_mediaQueryList_in_media484);
            mediaQueryList();

            state._fsp--;
            if (state.failed) return ;

            }

            dbg.location(380,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:380:7: ( ws )?
            int alt29=2;
            try { dbg.enterSubRule(29);
            try { dbg.enterDecision(29, decisionCanBacktrack[29]);

            int LA29_0 = input.LA(1);

            if ( (LA29_0==WS||(LA29_0>=NL && LA29_0<=COMMENT)) ) {
                alt29=1;
            }
            } finally {dbg.exitDecision(29);}

            switch (alt29) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:380:7: ws
                    {
                    dbg.location(380,7);
                    pushFollow(FOLLOW_ws_in_media492);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(29);}

            dbg.location(381,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_media499); if (state.failed) return ;
            dbg.location(381,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:12: ( ws )?
            int alt30=2;
            try { dbg.enterSubRule(30);
            try { dbg.enterDecision(30, decisionCanBacktrack[30]);

            int LA30_0 = input.LA(1);

            if ( (LA30_0==WS||(LA30_0>=NL && LA30_0<=COMMENT)) ) {
                alt30=1;
            }
            } finally {dbg.exitDecision(30);}

            switch (alt30) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:12: ws
                    {
                    dbg.location(381,12);
                    pushFollow(FOLLOW_ws_in_media501);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(30);}

            dbg.location(382,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:382:9: ( ( ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI | sass_declaration_interpolation_expression COLON )=> propertyDeclaration ( ws )? SEMI | {...}? sass_extend ( ws )? SEMI | {...}? sass_debug ( ws )? SEMI | {...}? sass_control ( ws )? SEMI | {...}? sass_content ( ws )? SEMI | rule | page | fontFace | vendorAtRule | media ) ( ws )? )*
            try { dbg.enterSubRule(38);

            loop38:
            do {
                int alt38=2;
                try { dbg.enterDecision(38, decisionCanBacktrack[38]);

                int LA38_0 = input.LA(1);

                if ( (LA38_0==IDENT||(LA38_0>=COMMA && LA38_0<=MEDIA_SYM)||LA38_0==GEN||LA38_0==COLON||LA38_0==AT_IDENT||LA38_0==MOZ_DOCUMENT_SYM||LA38_0==WEBKIT_KEYFRAMES_SYM||LA38_0==PAGE_SYM||LA38_0==FONT_FACE_SYM||LA38_0==MINUS||LA38_0==GREATER||(LA38_0>=HASH_SYMBOL && LA38_0<=PIPE)||LA38_0==LESS_AND||LA38_0==SASS_VAR||LA38_0==SASS_MIXIN||LA38_0==SASS_EXTEND||(LA38_0>=SASS_DEBUG && LA38_0<=SASS_IF)||(LA38_0>=SASS_FOR && LA38_0<=SASS_WHILE)||LA38_0==SASS_CONTENT) ) {
                    alt38=1;
                }


                } finally {dbg.exitDecision(38);}

                switch (alt38) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:13: ( ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI | sass_declaration_interpolation_expression COLON )=> propertyDeclaration ( ws )? SEMI | {...}? sass_extend ( ws )? SEMI | {...}? sass_debug ( ws )? SEMI | {...}? sass_control ( ws )? SEMI | {...}? sass_content ( ws )? SEMI | rule | page | fontFace | vendorAtRule | media ) ( ws )?
            	    {
            	    dbg.location(383,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:13: ( ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI | sass_declaration_interpolation_expression COLON )=> propertyDeclaration ( ws )? SEMI | {...}? sass_extend ( ws )? SEMI | {...}? sass_debug ( ws )? SEMI | {...}? sass_control ( ws )? SEMI | {...}? sass_content ( ws )? SEMI | rule | page | fontFace | vendorAtRule | media )
            	    int alt36=10;
            	    try { dbg.enterSubRule(36);
            	    try { dbg.enterDecision(36, decisionCanBacktrack[36]);

            	    try {
            	        isCyclicDecision = true;
            	        alt36 = dfa36.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(36);}

            	    switch (alt36) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:13: ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI | sass_declaration_interpolation_expression COLON )=> propertyDeclaration ( ws )? SEMI
            	            {
            	            dbg.location(385,130);
            	            pushFollow(FOLLOW_propertyDeclaration_in_media588);
            	            propertyDeclaration();

            	            state._fsp--;
            	            if (state.failed) return ;
            	            dbg.location(385,150);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:150: ( ws )?
            	            int alt31=2;
            	            try { dbg.enterSubRule(31);
            	            try { dbg.enterDecision(31, decisionCanBacktrack[31]);

            	            int LA31_0 = input.LA(1);

            	            if ( (LA31_0==WS||(LA31_0>=NL && LA31_0<=COMMENT)) ) {
            	                alt31=1;
            	            }
            	            } finally {dbg.exitDecision(31);}

            	            switch (alt31) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:150: ws
            	                    {
            	                    dbg.location(385,150);
            	                    pushFollow(FOLLOW_ws_in_media590);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(31);}

            	            dbg.location(385,154);
            	            match(input,SEMI,FOLLOW_SEMI_in_media593); if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:386:15: {...}? sass_extend ( ws )? SEMI
            	            {
            	            dbg.location(386,15);
            	            if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
            	                if (state.backtracking>0) {state.failed=true; return ;}
            	                throw new FailedPredicateException(input, "media", "isScssSource()");
            	            }
            	            dbg.location(386,33);
            	            pushFollow(FOLLOW_sass_extend_in_media611);
            	            sass_extend();

            	            state._fsp--;
            	            if (state.failed) return ;
            	            dbg.location(386,45);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:386:45: ( ws )?
            	            int alt32=2;
            	            try { dbg.enterSubRule(32);
            	            try { dbg.enterDecision(32, decisionCanBacktrack[32]);

            	            int LA32_0 = input.LA(1);

            	            if ( (LA32_0==WS||(LA32_0>=NL && LA32_0<=COMMENT)) ) {
            	                alt32=1;
            	            }
            	            } finally {dbg.exitDecision(32);}

            	            switch (alt32) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:386:45: ws
            	                    {
            	                    dbg.location(386,45);
            	                    pushFollow(FOLLOW_ws_in_media613);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(32);}

            	            dbg.location(386,49);
            	            match(input,SEMI,FOLLOW_SEMI_in_media616); if (state.failed) return ;

            	            }
            	            break;
            	        case 3 :
            	            dbg.enterAlt(3);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:387:15: {...}? sass_debug ( ws )? SEMI
            	            {
            	            dbg.location(387,15);
            	            if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
            	                if (state.backtracking>0) {state.failed=true; return ;}
            	                throw new FailedPredicateException(input, "media", "isScssSource()");
            	            }
            	            dbg.location(387,33);
            	            pushFollow(FOLLOW_sass_debug_in_media634);
            	            sass_debug();

            	            state._fsp--;
            	            if (state.failed) return ;
            	            dbg.location(387,44);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:387:44: ( ws )?
            	            int alt33=2;
            	            try { dbg.enterSubRule(33);
            	            try { dbg.enterDecision(33, decisionCanBacktrack[33]);

            	            int LA33_0 = input.LA(1);

            	            if ( (LA33_0==WS||(LA33_0>=NL && LA33_0<=COMMENT)) ) {
            	                alt33=1;
            	            }
            	            } finally {dbg.exitDecision(33);}

            	            switch (alt33) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:387:44: ws
            	                    {
            	                    dbg.location(387,44);
            	                    pushFollow(FOLLOW_ws_in_media636);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(33);}

            	            dbg.location(387,48);
            	            match(input,SEMI,FOLLOW_SEMI_in_media639); if (state.failed) return ;

            	            }
            	            break;
            	        case 4 :
            	            dbg.enterAlt(4);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:388:15: {...}? sass_control ( ws )? SEMI
            	            {
            	            dbg.location(388,15);
            	            if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
            	                if (state.backtracking>0) {state.failed=true; return ;}
            	                throw new FailedPredicateException(input, "media", "isScssSource()");
            	            }
            	            dbg.location(388,33);
            	            pushFollow(FOLLOW_sass_control_in_media657);
            	            sass_control();

            	            state._fsp--;
            	            if (state.failed) return ;
            	            dbg.location(388,46);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:388:46: ( ws )?
            	            int alt34=2;
            	            try { dbg.enterSubRule(34);
            	            try { dbg.enterDecision(34, decisionCanBacktrack[34]);

            	            int LA34_0 = input.LA(1);

            	            if ( (LA34_0==WS||(LA34_0>=NL && LA34_0<=COMMENT)) ) {
            	                alt34=1;
            	            }
            	            } finally {dbg.exitDecision(34);}

            	            switch (alt34) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:388:46: ws
            	                    {
            	                    dbg.location(388,46);
            	                    pushFollow(FOLLOW_ws_in_media659);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(34);}

            	            dbg.location(388,50);
            	            match(input,SEMI,FOLLOW_SEMI_in_media662); if (state.failed) return ;

            	            }
            	            break;
            	        case 5 :
            	            dbg.enterAlt(5);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:15: {...}? sass_content ( ws )? SEMI
            	            {
            	            dbg.location(389,15);
            	            if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
            	                if (state.backtracking>0) {state.failed=true; return ;}
            	                throw new FailedPredicateException(input, "media", "isScssSource()");
            	            }
            	            dbg.location(389,33);
            	            pushFollow(FOLLOW_sass_content_in_media680);
            	            sass_content();

            	            state._fsp--;
            	            if (state.failed) return ;
            	            dbg.location(389,46);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:46: ( ws )?
            	            int alt35=2;
            	            try { dbg.enterSubRule(35);
            	            try { dbg.enterDecision(35, decisionCanBacktrack[35]);

            	            int LA35_0 = input.LA(1);

            	            if ( (LA35_0==WS||(LA35_0>=NL && LA35_0<=COMMENT)) ) {
            	                alt35=1;
            	            }
            	            } finally {dbg.exitDecision(35);}

            	            switch (alt35) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:46: ws
            	                    {
            	                    dbg.location(389,46);
            	                    pushFollow(FOLLOW_ws_in_media682);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(35);}

            	            dbg.location(389,50);
            	            match(input,SEMI,FOLLOW_SEMI_in_media685); if (state.failed) return ;

            	            }
            	            break;
            	        case 6 :
            	            dbg.enterAlt(6);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:390:15: rule
            	            {
            	            dbg.location(390,15);
            	            pushFollow(FOLLOW_rule_in_media713);
            	            rule();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 7 :
            	            dbg.enterAlt(7);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:15: page
            	            {
            	            dbg.location(391,15);
            	            pushFollow(FOLLOW_page_in_media729);
            	            page();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 8 :
            	            dbg.enterAlt(8);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:15: fontFace
            	            {
            	            dbg.location(392,15);
            	            pushFollow(FOLLOW_fontFace_in_media745);
            	            fontFace();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 9 :
            	            dbg.enterAlt(9);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:15: vendorAtRule
            	            {
            	            dbg.location(393,15);
            	            pushFollow(FOLLOW_vendorAtRule_in_media761);
            	            vendorAtRule();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 10 :
            	            dbg.enterAlt(10);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:15: media
            	            {
            	            dbg.location(395,15);
            	            pushFollow(FOLLOW_media_in_media790);
            	            media();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(36);}

            	    dbg.location(396,15);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:396:15: ( ws )?
            	    int alt37=2;
            	    try { dbg.enterSubRule(37);
            	    try { dbg.enterDecision(37, decisionCanBacktrack[37]);

            	    int LA37_0 = input.LA(1);

            	    if ( (LA37_0==WS||(LA37_0>=NL && LA37_0<=COMMENT)) ) {
            	        alt37=1;
            	    }
            	    } finally {dbg.exitDecision(37);}

            	    switch (alt37) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:396:15: ws
            	            {
            	            dbg.location(396,15);
            	            pushFollow(FOLLOW_ws_in_media806);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(37);}


            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);
            } finally {dbg.exitSubRule(38);}

            dbg.location(398,6);
            match(input,RBRACE,FOLLOW_RBRACE_in_media825); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(399, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "media");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "media"


    // $ANTLR start "mediaQueryList"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:401:1: mediaQueryList : mediaQuery ( ( ( ws )? COMMA ( ws )? mediaQuery )=> ( ws )? COMMA ( ws )? mediaQuery )* ;
    public final void mediaQueryList() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaQueryList");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(401, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:2: ( mediaQuery ( ( ( ws )? COMMA ( ws )? mediaQuery )=> ( ws )? COMMA ( ws )? mediaQuery )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:4: mediaQuery ( ( ( ws )? COMMA ( ws )? mediaQuery )=> ( ws )? COMMA ( ws )? mediaQuery )*
            {
            dbg.location(402,4);
            pushFollow(FOLLOW_mediaQuery_in_mediaQueryList839);
            mediaQuery();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(402,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:15: ( ( ( ws )? COMMA ( ws )? mediaQuery )=> ( ws )? COMMA ( ws )? mediaQuery )*
            try { dbg.enterSubRule(41);

            loop41:
            do {
                int alt41=2;
                try { dbg.enterDecision(41, decisionCanBacktrack[41]);

                try {
                    isCyclicDecision = true;
                    alt41 = dfa41.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(41);}

                switch (alt41) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:17: ( ( ws )? COMMA ( ws )? mediaQuery )=> ( ws )? COMMA ( ws )? mediaQuery
            	    {
            	    dbg.location(402,46);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:46: ( ws )?
            	    int alt39=2;
            	    try { dbg.enterSubRule(39);
            	    try { dbg.enterDecision(39, decisionCanBacktrack[39]);

            	    int LA39_0 = input.LA(1);

            	    if ( (LA39_0==WS||(LA39_0>=NL && LA39_0<=COMMENT)) ) {
            	        alt39=1;
            	    }
            	    } finally {dbg.exitDecision(39);}

            	    switch (alt39) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:46: ws
            	            {
            	            dbg.location(402,46);
            	            pushFollow(FOLLOW_ws_in_mediaQueryList856);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(39);}

            	    dbg.location(402,50);
            	    match(input,COMMA,FOLLOW_COMMA_in_mediaQueryList859); if (state.failed) return ;
            	    dbg.location(402,56);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:56: ( ws )?
            	    int alt40=2;
            	    try { dbg.enterSubRule(40);
            	    try { dbg.enterDecision(40, decisionCanBacktrack[40]);

            	    int LA40_0 = input.LA(1);

            	    if ( (LA40_0==WS||(LA40_0>=NL && LA40_0<=COMMENT)) ) {
            	        alt40=1;
            	    }
            	    } finally {dbg.exitDecision(40);}

            	    switch (alt40) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:56: ws
            	            {
            	            dbg.location(402,56);
            	            pushFollow(FOLLOW_ws_in_mediaQueryList861);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(40);}

            	    dbg.location(402,60);
            	    pushFollow(FOLLOW_mediaQuery_in_mediaQueryList864);
            	    mediaQuery();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop41;
                }
            } while (true);
            } finally {dbg.exitSubRule(41);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(403, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaQueryList");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaQueryList"


    // $ANTLR start "mediaQuery"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:405:1: mediaQuery : ( ( mediaQueryOperator ( ws )? )? mediaType ( ( ws )? AND ( ws )? mediaExpression )* | mediaExpression ( ( ws )? AND ( ws )? mediaExpression )* );
    public final void mediaQuery() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaQuery");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(405, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:2: ( ( mediaQueryOperator ( ws )? )? mediaType ( ( ws )? AND ( ws )? mediaExpression )* | mediaExpression ( ( ws )? AND ( ws )? mediaExpression )* )
            int alt50=2;
            try { dbg.enterDecision(50, decisionCanBacktrack[50]);

            int LA50_0 = input.LA(1);

            if ( (LA50_0==IDENT||(LA50_0>=ONLY && LA50_0<=GEN)||LA50_0==HASH_SYMBOL) ) {
                alt50=1;
            }
            else if ( (LA50_0==LPAREN) ) {
                alt50=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(50);}

            switch (alt50) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:4: ( mediaQueryOperator ( ws )? )? mediaType ( ( ws )? AND ( ws )? mediaExpression )*
                    {
                    dbg.location(406,4);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:4: ( mediaQueryOperator ( ws )? )?
                    int alt43=2;
                    try { dbg.enterSubRule(43);
                    try { dbg.enterDecision(43, decisionCanBacktrack[43]);

                    int LA43_0 = input.LA(1);

                    if ( ((LA43_0>=ONLY && LA43_0<=NOT)) ) {
                        alt43=1;
                    }
                    } finally {dbg.exitDecision(43);}

                    switch (alt43) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:5: mediaQueryOperator ( ws )?
                            {
                            dbg.location(406,5);
                            pushFollow(FOLLOW_mediaQueryOperator_in_mediaQuery880);
                            mediaQueryOperator();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(406,24);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:24: ( ws )?
                            int alt42=2;
                            try { dbg.enterSubRule(42);
                            try { dbg.enterDecision(42, decisionCanBacktrack[42]);

                            int LA42_0 = input.LA(1);

                            if ( (LA42_0==WS||(LA42_0>=NL && LA42_0<=COMMENT)) ) {
                                alt42=1;
                            }
                            } finally {dbg.exitDecision(42);}

                            switch (alt42) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:24: ws
                                    {
                                    dbg.location(406,24);
                                    pushFollow(FOLLOW_ws_in_mediaQuery882);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(42);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(43);}

                    dbg.location(406,32);
                    pushFollow(FOLLOW_mediaType_in_mediaQuery889);
                    mediaType();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(406,42);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:42: ( ( ws )? AND ( ws )? mediaExpression )*
                    try { dbg.enterSubRule(46);

                    loop46:
                    do {
                        int alt46=2;
                        try { dbg.enterDecision(46, decisionCanBacktrack[46]);

                        try {
                            isCyclicDecision = true;
                            alt46 = dfa46.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(46);}

                        switch (alt46) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:44: ( ws )? AND ( ws )? mediaExpression
                    	    {
                    	    dbg.location(406,44);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:44: ( ws )?
                    	    int alt44=2;
                    	    try { dbg.enterSubRule(44);
                    	    try { dbg.enterDecision(44, decisionCanBacktrack[44]);

                    	    int LA44_0 = input.LA(1);

                    	    if ( (LA44_0==WS||(LA44_0>=NL && LA44_0<=COMMENT)) ) {
                    	        alt44=1;
                    	    }
                    	    } finally {dbg.exitDecision(44);}

                    	    switch (alt44) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:44: ws
                    	            {
                    	            dbg.location(406,44);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery893);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(44);}

                    	    dbg.location(406,48);
                    	    match(input,AND,FOLLOW_AND_in_mediaQuery896); if (state.failed) return ;
                    	    dbg.location(406,52);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:52: ( ws )?
                    	    int alt45=2;
                    	    try { dbg.enterSubRule(45);
                    	    try { dbg.enterDecision(45, decisionCanBacktrack[45]);

                    	    int LA45_0 = input.LA(1);

                    	    if ( (LA45_0==WS||(LA45_0>=NL && LA45_0<=COMMENT)) ) {
                    	        alt45=1;
                    	    }
                    	    } finally {dbg.exitDecision(45);}

                    	    switch (alt45) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:406:52: ws
                    	            {
                    	            dbg.location(406,52);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery898);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(45);}

                    	    dbg.location(406,56);
                    	    pushFollow(FOLLOW_mediaExpression_in_mediaQuery901);
                    	    mediaExpression();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop46;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(46);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:407:4: mediaExpression ( ( ws )? AND ( ws )? mediaExpression )*
                    {
                    dbg.location(407,4);
                    pushFollow(FOLLOW_mediaExpression_in_mediaQuery909);
                    mediaExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(407,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:407:20: ( ( ws )? AND ( ws )? mediaExpression )*
                    try { dbg.enterSubRule(49);

                    loop49:
                    do {
                        int alt49=2;
                        try { dbg.enterDecision(49, decisionCanBacktrack[49]);

                        try {
                            isCyclicDecision = true;
                            alt49 = dfa49.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(49);}

                        switch (alt49) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:407:22: ( ws )? AND ( ws )? mediaExpression
                    	    {
                    	    dbg.location(407,22);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:407:22: ( ws )?
                    	    int alt47=2;
                    	    try { dbg.enterSubRule(47);
                    	    try { dbg.enterDecision(47, decisionCanBacktrack[47]);

                    	    int LA47_0 = input.LA(1);

                    	    if ( (LA47_0==WS||(LA47_0>=NL && LA47_0<=COMMENT)) ) {
                    	        alt47=1;
                    	    }
                    	    } finally {dbg.exitDecision(47);}

                    	    switch (alt47) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:407:22: ws
                    	            {
                    	            dbg.location(407,22);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery913);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(47);}

                    	    dbg.location(407,26);
                    	    match(input,AND,FOLLOW_AND_in_mediaQuery916); if (state.failed) return ;
                    	    dbg.location(407,30);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:407:30: ( ws )?
                    	    int alt48=2;
                    	    try { dbg.enterSubRule(48);
                    	    try { dbg.enterDecision(48, decisionCanBacktrack[48]);

                    	    int LA48_0 = input.LA(1);

                    	    if ( (LA48_0==WS||(LA48_0>=NL && LA48_0<=COMMENT)) ) {
                    	        alt48=1;
                    	    }
                    	    } finally {dbg.exitDecision(48);}

                    	    switch (alt48) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:407:30: ws
                    	            {
                    	            dbg.location(407,30);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery918);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(48);}

                    	    dbg.location(407,34);
                    	    pushFollow(FOLLOW_mediaExpression_in_mediaQuery921);
                    	    mediaExpression();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop49;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(49);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(408, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaQuery");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaQuery"


    // $ANTLR start "mediaQueryOperator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:1: mediaQueryOperator : ( ONLY | NOT );
    public final void mediaQueryOperator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaQueryOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(410, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:3: ( ONLY | NOT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(411,3);
            if ( (input.LA(1)>=ONLY && input.LA(1)<=NOT) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(412, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaQueryOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaQueryOperator"


    // $ANTLR start "mediaType"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:1: mediaType : ( IDENT | GEN | {...}? sass_interpolation_expression_var );
    public final void mediaType() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaType");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(414, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:415:2: ( IDENT | GEN | {...}? sass_interpolation_expression_var )
            int alt51=3;
            try { dbg.enterDecision(51, decisionCanBacktrack[51]);

            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt51=1;
                }
                break;
            case GEN:
                {
                alt51=2;
                }
                break;
            case HASH_SYMBOL:
                {
                alt51=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(51);}

            switch (alt51) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:415:4: IDENT
                    {
                    dbg.location(415,4);
                    match(input,IDENT,FOLLOW_IDENT_in_mediaType957); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:415:12: GEN
                    {
                    dbg.location(415,12);
                    match(input,GEN,FOLLOW_GEN_in_mediaType961); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:415:18: {...}? sass_interpolation_expression_var
                    {
                    dbg.location(415,18);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaType", "isCssPreprocessorSource()");
                    }
                    dbg.location(415,47);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaType967);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(416, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaType");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaType"


    // $ANTLR start "mediaExpression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:418:1: mediaExpression : LPAREN ( ws )? mediaFeature ( ( ws )? COLON ( ws )? expression )? ( ws )? RPAREN ;
    public final void mediaExpression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(418, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:5: ( LPAREN ( ws )? mediaFeature ( ( ws )? COLON ( ws )? expression )? ( ws )? RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:7: LPAREN ( ws )? mediaFeature ( ( ws )? COLON ( ws )? expression )? ( ws )? RPAREN
            {
            dbg.location(419,7);
            match(input,LPAREN,FOLLOW_LPAREN_in_mediaExpression982); if (state.failed) return ;
            dbg.location(419,14);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:14: ( ws )?
            int alt52=2;
            try { dbg.enterSubRule(52);
            try { dbg.enterDecision(52, decisionCanBacktrack[52]);

            int LA52_0 = input.LA(1);

            if ( (LA52_0==WS||(LA52_0>=NL && LA52_0<=COMMENT)) ) {
                alt52=1;
            }
            } finally {dbg.exitDecision(52);}

            switch (alt52) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:14: ws
                    {
                    dbg.location(419,14);
                    pushFollow(FOLLOW_ws_in_mediaExpression984);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(52);}

            dbg.location(419,18);
            pushFollow(FOLLOW_mediaFeature_in_mediaExpression987);
            mediaFeature();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(419,31);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:31: ( ( ws )? COLON ( ws )? expression )?
            int alt55=2;
            try { dbg.enterSubRule(55);
            try { dbg.enterDecision(55, decisionCanBacktrack[55]);

            try {
                isCyclicDecision = true;
                alt55 = dfa55.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(55);}

            switch (alt55) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:32: ( ws )? COLON ( ws )? expression
                    {
                    dbg.location(419,32);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:32: ( ws )?
                    int alt53=2;
                    try { dbg.enterSubRule(53);
                    try { dbg.enterDecision(53, decisionCanBacktrack[53]);

                    int LA53_0 = input.LA(1);

                    if ( (LA53_0==WS||(LA53_0>=NL && LA53_0<=COMMENT)) ) {
                        alt53=1;
                    }
                    } finally {dbg.exitDecision(53);}

                    switch (alt53) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:32: ws
                            {
                            dbg.location(419,32);
                            pushFollow(FOLLOW_ws_in_mediaExpression990);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(53);}

                    dbg.location(419,36);
                    match(input,COLON,FOLLOW_COLON_in_mediaExpression993); if (state.failed) return ;
                    dbg.location(419,42);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:42: ( ws )?
                    int alt54=2;
                    try { dbg.enterSubRule(54);
                    try { dbg.enterDecision(54, decisionCanBacktrack[54]);

                    int LA54_0 = input.LA(1);

                    if ( (LA54_0==WS||(LA54_0>=NL && LA54_0<=COMMENT)) ) {
                        alt54=1;
                    }
                    } finally {dbg.exitDecision(54);}

                    switch (alt54) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:42: ws
                            {
                            dbg.location(419,42);
                            pushFollow(FOLLOW_ws_in_mediaExpression995);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(54);}

                    dbg.location(419,46);
                    pushFollow(FOLLOW_expression_in_mediaExpression998);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(55);}

            dbg.location(419,59);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:59: ( ws )?
            int alt56=2;
            try { dbg.enterSubRule(56);
            try { dbg.enterDecision(56, decisionCanBacktrack[56]);

            int LA56_0 = input.LA(1);

            if ( (LA56_0==WS||(LA56_0>=NL && LA56_0<=COMMENT)) ) {
                alt56=1;
            }
            } finally {dbg.exitDecision(56);}

            switch (alt56) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:59: ws
                    {
                    dbg.location(419,59);
                    pushFollow(FOLLOW_ws_in_mediaExpression1002);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(56);}

            dbg.location(419,63);
            match(input,RPAREN,FOLLOW_RPAREN_in_mediaExpression1005); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(420, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaExpression"


    // $ANTLR start "mediaFeature"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:1: mediaFeature : ( IDENT | GEN | {...}? ( cp_variable | sass_interpolation_expression_var ) );
    public final void mediaFeature() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaFeature");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(422, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:2: ( IDENT | GEN | {...}? ( cp_variable | sass_interpolation_expression_var ) )
            int alt58=3;
            try { dbg.enterDecision(58, decisionCanBacktrack[58]);

            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt58=1;
                }
                break;
            case GEN:
                {
                alt58=2;
                }
                break;
            case MEDIA_SYM:
            case AT_IDENT:
            case HASH_SYMBOL:
            case SASS_VAR:
                {
                alt58=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(58);}

            switch (alt58) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:4: IDENT
                    {
                    dbg.location(423,4);
                    match(input,IDENT,FOLLOW_IDENT_in_mediaFeature1020); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:12: GEN
                    {
                    dbg.location(423,12);
                    match(input,GEN,FOLLOW_GEN_in_mediaFeature1024); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:18: {...}? ( cp_variable | sass_interpolation_expression_var )
                    {
                    dbg.location(423,18);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaFeature", "isCssPreprocessorSource()");
                    }
                    dbg.location(423,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:47: ( cp_variable | sass_interpolation_expression_var )
                    int alt57=2;
                    try { dbg.enterSubRule(57);
                    try { dbg.enterDecision(57, decisionCanBacktrack[57]);

                    int LA57_0 = input.LA(1);

                    if ( (LA57_0==MEDIA_SYM||LA57_0==AT_IDENT||LA57_0==SASS_VAR) ) {
                        alt57=1;
                    }
                    else if ( (LA57_0==HASH_SYMBOL) ) {
                        alt57=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 57, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(57);}

                    switch (alt57) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:49: cp_variable
                            {
                            dbg.location(423,49);
                            pushFollow(FOLLOW_cp_variable_in_mediaFeature1032);
                            cp_variable();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:63: sass_interpolation_expression_var
                            {
                            dbg.location(423,63);
                            pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaFeature1036);
                            sass_interpolation_expression_var();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(57);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(424, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaFeature");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaFeature"


    // $ANTLR start "body"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:2: body : ( bodyItem ( ws )? )+ ;
    public final void body() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "body");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(426, 2);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:7: ( ( bodyItem ( ws )? )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:427:2: ( bodyItem ( ws )? )+
            {
            dbg.location(427,2);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:427:2: ( bodyItem ( ws )? )+
            int cnt60=0;
            try { dbg.enterSubRule(60);

            loop60:
            do {
                int alt60=2;
                try { dbg.enterDecision(60, decisionCanBacktrack[60]);

                int LA60_0 = input.LA(1);

                if ( (LA60_0==IDENT||(LA60_0>=IMPORT_SYM && LA60_0<=MEDIA_SYM)||LA60_0==GEN||LA60_0==COLON||LA60_0==AT_IDENT||LA60_0==MOZ_DOCUMENT_SYM||LA60_0==WEBKIT_KEYFRAMES_SYM||(LA60_0>=PAGE_SYM && LA60_0<=FONT_FACE_SYM)||LA60_0==MINUS||LA60_0==GREATER||(LA60_0>=HASH_SYMBOL && LA60_0<=PIPE)||LA60_0==LESS_AND||LA60_0==SASS_VAR||(LA60_0>=SASS_MIXIN && LA60_0<=SASS_INCLUDE)||(LA60_0>=SASS_DEBUG && LA60_0<=SASS_IF)||(LA60_0>=SASS_FOR && LA60_0<=SASS_FUNCTION)) ) {
                    alt60=1;
                }


                } finally {dbg.exitDecision(60);}

                switch (alt60) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:427:4: bodyItem ( ws )?
            	    {
            	    dbg.location(427,4);
            	    pushFollow(FOLLOW_bodyItem_in_body1054);
            	    bodyItem();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(427,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:427:13: ( ws )?
            	    int alt59=2;
            	    try { dbg.enterSubRule(59);
            	    try { dbg.enterDecision(59, decisionCanBacktrack[59]);

            	    int LA59_0 = input.LA(1);

            	    if ( (LA59_0==WS||(LA59_0>=NL && LA59_0<=COMMENT)) ) {
            	        alt59=1;
            	    }
            	    } finally {dbg.exitDecision(59);}

            	    switch (alt59) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:427:13: ws
            	            {
            	            dbg.location(427,13);
            	            pushFollow(FOLLOW_ws_in_body1056);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(59);}


            	    }
            	    break;

            	default :
            	    if ( cnt60 >= 1 ) break loop60;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(60, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt60++;
            } while (true);
            } finally {dbg.exitSubRule(60);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(428, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "body");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "body"


    // $ANTLR start "bodyItem"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:430:1: bodyItem : ( ( cp_mixin_call ( ws )? SEMI )=> cp_mixin_call ( ws )? SEMI | rule | at_rule | {...}? cp_variable_declaration ( ws )? SEMI | {...}? importItem ( ws )? SEMI | {...}? sass_debug ( ws )? SEMI | {...}? sass_control | {...}? sass_function_declaration );
    public final void bodyItem() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "bodyItem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(430, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:5: ( ( cp_mixin_call ( ws )? SEMI )=> cp_mixin_call ( ws )? SEMI | rule | at_rule | {...}? cp_variable_declaration ( ws )? SEMI | {...}? importItem ( ws )? SEMI | {...}? sass_debug ( ws )? SEMI | {...}? sass_control | {...}? sass_function_declaration )
            int alt65=8;
            try { dbg.enterDecision(65, decisionCanBacktrack[65]);

            try {
                isCyclicDecision = true;
                alt65 = dfa65.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(65);}

            switch (alt65) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:432:9: ( cp_mixin_call ( ws )? SEMI )=> cp_mixin_call ( ws )? SEMI
                    {
                    dbg.location(432,35);
                    pushFollow(FOLLOW_cp_mixin_call_in_bodyItem1093);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(432,49);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:432:49: ( ws )?
                    int alt61=2;
                    try { dbg.enterSubRule(61);
                    try { dbg.enterDecision(61, decisionCanBacktrack[61]);

                    int LA61_0 = input.LA(1);

                    if ( (LA61_0==WS||(LA61_0>=NL && LA61_0<=COMMENT)) ) {
                        alt61=1;
                    }
                    } finally {dbg.exitDecision(61);}

                    switch (alt61) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:432:49: ws
                            {
                            dbg.location(432,49);
                            pushFollow(FOLLOW_ws_in_bodyItem1095);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(61);}

                    dbg.location(432,53);
                    match(input,SEMI,FOLLOW_SEMI_in_bodyItem1098); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:433:8: rule
                    {
                    dbg.location(433,8);
                    pushFollow(FOLLOW_rule_in_bodyItem1107);
                    rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:434:11: at_rule
                    {
                    dbg.location(434,11);
                    pushFollow(FOLLOW_at_rule_in_bodyItem1119);
                    at_rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:435:11: {...}? cp_variable_declaration ( ws )? SEMI
                    {
                    dbg.location(435,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isCssPreprocessorSource()");
                    }
                    dbg.location(435,40);
                    pushFollow(FOLLOW_cp_variable_declaration_in_bodyItem1133);
                    cp_variable_declaration();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(435,64);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:435:64: ( ws )?
                    int alt62=2;
                    try { dbg.enterSubRule(62);
                    try { dbg.enterDecision(62, decisionCanBacktrack[62]);

                    int LA62_0 = input.LA(1);

                    if ( (LA62_0==WS||(LA62_0>=NL && LA62_0<=COMMENT)) ) {
                        alt62=1;
                    }
                    } finally {dbg.exitDecision(62);}

                    switch (alt62) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:435:64: ws
                            {
                            dbg.location(435,64);
                            pushFollow(FOLLOW_ws_in_bodyItem1135);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(62);}

                    dbg.location(435,68);
                    match(input,SEMI,FOLLOW_SEMI_in_bodyItem1138); if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:437:11: {...}? importItem ( ws )? SEMI
                    {
                    dbg.location(437,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isCssPreprocessorSource()");
                    }
                    dbg.location(437,40);
                    pushFollow(FOLLOW_importItem_in_bodyItem1161);
                    importItem();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(437,51);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:437:51: ( ws )?
                    int alt63=2;
                    try { dbg.enterSubRule(63);
                    try { dbg.enterDecision(63, decisionCanBacktrack[63]);

                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==WS||(LA63_0>=NL && LA63_0<=COMMENT)) ) {
                        alt63=1;
                    }
                    } finally {dbg.exitDecision(63);}

                    switch (alt63) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:437:51: ws
                            {
                            dbg.location(437,51);
                            pushFollow(FOLLOW_ws_in_bodyItem1163);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(63);}

                    dbg.location(437,55);
                    match(input,SEMI,FOLLOW_SEMI_in_bodyItem1166); if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:11: {...}? sass_debug ( ws )? SEMI
                    {
                    dbg.location(438,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(438,29);
                    pushFollow(FOLLOW_sass_debug_in_bodyItem1180);
                    sass_debug();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(438,41);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:41: ( ws )?
                    int alt64=2;
                    try { dbg.enterSubRule(64);
                    try { dbg.enterDecision(64, decisionCanBacktrack[64]);

                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==WS||(LA64_0>=NL && LA64_0<=COMMENT)) ) {
                        alt64=1;
                    }
                    } finally {dbg.exitDecision(64);}

                    switch (alt64) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:41: ws
                            {
                            dbg.location(438,41);
                            pushFollow(FOLLOW_ws_in_bodyItem1183);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(64);}

                    dbg.location(438,45);
                    match(input,SEMI,FOLLOW_SEMI_in_bodyItem1186); if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:439:11: {...}? sass_control
                    {
                    dbg.location(439,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(439,29);
                    pushFollow(FOLLOW_sass_control_in_bodyItem1200);
                    sass_control();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:440:11: {...}? sass_function_declaration
                    {
                    dbg.location(440,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(440,29);
                    pushFollow(FOLLOW_sass_function_declaration_in_bodyItem1214);
                    sass_function_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(NL)); 
                
        }
        finally {
        }
        dbg.location(441, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bodyItem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "bodyItem"


    // $ANTLR start "at_rule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:1: at_rule : ( media | page | counterStyle | fontFace | vendorAtRule );
    public final void at_rule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "at_rule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(446, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:447:5: ( media | page | counterStyle | fontFace | vendorAtRule )
            int alt66=5;
            try { dbg.enterDecision(66, decisionCanBacktrack[66]);

            switch ( input.LA(1) ) {
            case MEDIA_SYM:
                {
                alt66=1;
                }
                break;
            case PAGE_SYM:
                {
                alt66=2;
                }
                break;
            case COUNTER_STYLE_SYM:
                {
                alt66=3;
                }
                break;
            case FONT_FACE_SYM:
                {
                alt66=4;
                }
                break;
            case AT_IDENT:
            case MOZ_DOCUMENT_SYM:
            case WEBKIT_KEYFRAMES_SYM:
                {
                alt66=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(66);}

            switch (alt66) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:5: media
                    {
                    dbg.location(448,5);
                    pushFollow(FOLLOW_media_in_at_rule1244);
                    media();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:449:7: page
                    {
                    dbg.location(449,7);
                    pushFollow(FOLLOW_page_in_at_rule1252);
                    page();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:450:7: counterStyle
                    {
                    dbg.location(450,7);
                    pushFollow(FOLLOW_counterStyle_in_at_rule1260);
                    counterStyle();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:7: fontFace
                    {
                    dbg.location(451,7);
                    pushFollow(FOLLOW_fontFace_in_at_rule1268);
                    fontFace();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:452:7: vendorAtRule
                    {
                    dbg.location(452,7);
                    pushFollow(FOLLOW_vendorAtRule_in_at_rule1276);
                    vendorAtRule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(453, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "at_rule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "at_rule"


    // $ANTLR start "vendorAtRule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:455:1: vendorAtRule : ( moz_document | webkitKeyframes | generic_at_rule );
    public final void vendorAtRule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "vendorAtRule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(455, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:456:1: ( moz_document | webkitKeyframes | generic_at_rule )
            int alt67=3;
            try { dbg.enterDecision(67, decisionCanBacktrack[67]);

            switch ( input.LA(1) ) {
            case MOZ_DOCUMENT_SYM:
                {
                alt67=1;
                }
                break;
            case WEBKIT_KEYFRAMES_SYM:
                {
                alt67=2;
                }
                break;
            case AT_IDENT:
                {
                alt67=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(67);}

            switch (alt67) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:456:3: moz_document
                    {
                    dbg.location(456,3);
                    pushFollow(FOLLOW_moz_document_in_vendorAtRule1293);
                    moz_document();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:456:18: webkitKeyframes
                    {
                    dbg.location(456,18);
                    pushFollow(FOLLOW_webkitKeyframes_in_vendorAtRule1297);
                    webkitKeyframes();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:456:36: generic_at_rule
                    {
                    dbg.location(456,36);
                    pushFollow(FOLLOW_generic_at_rule_in_vendorAtRule1301);
                    generic_at_rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(456, 51);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vendorAtRule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "vendorAtRule"


    // $ANTLR start "atRuleId"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:458:1: atRuleId : ( IDENT | STRING );
    public final void atRuleId() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "atRuleId");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(458, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:2: ( IDENT | STRING )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(459,2);
            if ( (input.LA(1)>=IDENT && input.LA(1)<=STRING) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(461, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "atRuleId");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "atRuleId"


    // $ANTLR start "generic_at_rule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:463:1: generic_at_rule : AT_IDENT ( WS )* ( atRuleId ( WS )* )? LBRACE syncTo_RBRACE RBRACE ;
    public final void generic_at_rule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "generic_at_rule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(463, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:464:5: ( AT_IDENT ( WS )* ( atRuleId ( WS )* )? LBRACE syncTo_RBRACE RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:464:7: AT_IDENT ( WS )* ( atRuleId ( WS )* )? LBRACE syncTo_RBRACE RBRACE
            {
            dbg.location(464,7);
            match(input,AT_IDENT,FOLLOW_AT_IDENT_in_generic_at_rule1337); if (state.failed) return ;
            dbg.location(464,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:464:16: ( WS )*
            try { dbg.enterSubRule(68);

            loop68:
            do {
                int alt68=2;
                try { dbg.enterDecision(68, decisionCanBacktrack[68]);

                int LA68_0 = input.LA(1);

                if ( (LA68_0==WS) ) {
                    alt68=1;
                }


                } finally {dbg.exitDecision(68);}

                switch (alt68) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:464:16: WS
            	    {
            	    dbg.location(464,16);
            	    match(input,WS,FOLLOW_WS_in_generic_at_rule1339); if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);
            } finally {dbg.exitSubRule(68);}

            dbg.location(464,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:464:20: ( atRuleId ( WS )* )?
            int alt70=2;
            try { dbg.enterSubRule(70);
            try { dbg.enterDecision(70, decisionCanBacktrack[70]);

            int LA70_0 = input.LA(1);

            if ( ((LA70_0>=IDENT && LA70_0<=STRING)) ) {
                alt70=1;
            }
            } finally {dbg.exitDecision(70);}

            switch (alt70) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:464:22: atRuleId ( WS )*
                    {
                    dbg.location(464,22);
                    pushFollow(FOLLOW_atRuleId_in_generic_at_rule1344);
                    atRuleId();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(464,31);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:464:31: ( WS )*
                    try { dbg.enterSubRule(69);

                    loop69:
                    do {
                        int alt69=2;
                        try { dbg.enterDecision(69, decisionCanBacktrack[69]);

                        int LA69_0 = input.LA(1);

                        if ( (LA69_0==WS) ) {
                            alt69=1;
                        }


                        } finally {dbg.exitDecision(69);}

                        switch (alt69) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:464:31: WS
                    	    {
                    	    dbg.location(464,31);
                    	    match(input,WS,FOLLOW_WS_in_generic_at_rule1346); if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop69;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(69);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(70);}

            dbg.location(465,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_generic_at_rule1361); if (state.failed) return ;
            dbg.location(466,10);
            pushFollow(FOLLOW_syncTo_RBRACE_in_generic_at_rule1373);
            syncTo_RBRACE();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(467,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_generic_at_rule1383); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(468, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "generic_at_rule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "generic_at_rule"


    // $ANTLR start "moz_document"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:469:1: moz_document : MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE ;
    public final void moz_document() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "moz_document");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(469, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:470:2: ( MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:471:2: MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE
            {
            dbg.location(471,2);
            match(input,MOZ_DOCUMENT_SYM,FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document1399); if (state.failed) return ;
            dbg.location(471,19);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:471:19: ( ws )?
            int alt71=2;
            try { dbg.enterSubRule(71);
            try { dbg.enterDecision(71, decisionCanBacktrack[71]);

            int LA71_0 = input.LA(1);

            if ( (LA71_0==WS||(LA71_0>=NL && LA71_0<=COMMENT)) ) {
                alt71=1;
            }
            } finally {dbg.exitDecision(71);}

            switch (alt71) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:471:19: ws
                    {
                    dbg.location(471,19);
                    pushFollow(FOLLOW_ws_in_moz_document1401);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(71);}

            dbg.location(471,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:471:23: ( moz_document_function ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:471:25: moz_document_function ( ws )?
            {
            dbg.location(471,25);
            pushFollow(FOLLOW_moz_document_function_in_moz_document1406);
            moz_document_function();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(471,47);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:471:47: ( ws )?
            int alt72=2;
            try { dbg.enterSubRule(72);
            try { dbg.enterDecision(72, decisionCanBacktrack[72]);

            int LA72_0 = input.LA(1);

            if ( (LA72_0==WS||(LA72_0>=NL && LA72_0<=COMMENT)) ) {
                alt72=1;
            }
            } finally {dbg.exitDecision(72);}

            switch (alt72) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:471:47: ws
                    {
                    dbg.location(471,47);
                    pushFollow(FOLLOW_ws_in_moz_document1408);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(72);}


            }

            dbg.location(471,52);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:471:52: ( COMMA ( ws )? moz_document_function ( ws )? )*
            try { dbg.enterSubRule(75);

            loop75:
            do {
                int alt75=2;
                try { dbg.enterDecision(75, decisionCanBacktrack[75]);

                int LA75_0 = input.LA(1);

                if ( (LA75_0==COMMA) ) {
                    alt75=1;
                }


                } finally {dbg.exitDecision(75);}

                switch (alt75) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:471:54: COMMA ( ws )? moz_document_function ( ws )?
            	    {
            	    dbg.location(471,54);
            	    match(input,COMMA,FOLLOW_COMMA_in_moz_document1414); if (state.failed) return ;
            	    dbg.location(471,60);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:471:60: ( ws )?
            	    int alt73=2;
            	    try { dbg.enterSubRule(73);
            	    try { dbg.enterDecision(73, decisionCanBacktrack[73]);

            	    int LA73_0 = input.LA(1);

            	    if ( (LA73_0==WS||(LA73_0>=NL && LA73_0<=COMMENT)) ) {
            	        alt73=1;
            	    }
            	    } finally {dbg.exitDecision(73);}

            	    switch (alt73) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:471:60: ws
            	            {
            	            dbg.location(471,60);
            	            pushFollow(FOLLOW_ws_in_moz_document1416);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(73);}

            	    dbg.location(471,64);
            	    pushFollow(FOLLOW_moz_document_function_in_moz_document1419);
            	    moz_document_function();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(471,86);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:471:86: ( ws )?
            	    int alt74=2;
            	    try { dbg.enterSubRule(74);
            	    try { dbg.enterDecision(74, decisionCanBacktrack[74]);

            	    int LA74_0 = input.LA(1);

            	    if ( (LA74_0==WS||(LA74_0>=NL && LA74_0<=COMMENT)) ) {
            	        alt74=1;
            	    }
            	    } finally {dbg.exitDecision(74);}

            	    switch (alt74) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:471:86: ws
            	            {
            	            dbg.location(471,86);
            	            pushFollow(FOLLOW_ws_in_moz_document1421);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(74);}


            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);
            } finally {dbg.exitSubRule(75);}

            dbg.location(472,2);
            match(input,LBRACE,FOLLOW_LBRACE_in_moz_document1428); if (state.failed) return ;
            dbg.location(472,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:472:9: ( ws )?
            int alt76=2;
            try { dbg.enterSubRule(76);
            try { dbg.enterDecision(76, decisionCanBacktrack[76]);

            int LA76_0 = input.LA(1);

            if ( (LA76_0==WS||(LA76_0>=NL && LA76_0<=COMMENT)) ) {
                alt76=1;
            }
            } finally {dbg.exitDecision(76);}

            switch (alt76) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:472:9: ws
                    {
                    dbg.location(472,9);
                    pushFollow(FOLLOW_ws_in_moz_document1430);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(76);}

            dbg.location(473,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:473:3: ( body )?
            int alt77=2;
            try { dbg.enterSubRule(77);
            try { dbg.enterDecision(77, decisionCanBacktrack[77]);

            int LA77_0 = input.LA(1);

            if ( (LA77_0==IDENT||(LA77_0>=IMPORT_SYM && LA77_0<=MEDIA_SYM)||LA77_0==GEN||LA77_0==COLON||LA77_0==AT_IDENT||LA77_0==MOZ_DOCUMENT_SYM||LA77_0==WEBKIT_KEYFRAMES_SYM||(LA77_0>=PAGE_SYM && LA77_0<=FONT_FACE_SYM)||LA77_0==MINUS||LA77_0==GREATER||(LA77_0>=HASH_SYMBOL && LA77_0<=PIPE)||LA77_0==LESS_AND||LA77_0==SASS_VAR||(LA77_0>=SASS_MIXIN && LA77_0<=SASS_INCLUDE)||(LA77_0>=SASS_DEBUG && LA77_0<=SASS_IF)||(LA77_0>=SASS_FOR && LA77_0<=SASS_FUNCTION)) ) {
                alt77=1;
            }
            } finally {dbg.exitDecision(77);}

            switch (alt77) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:473:3: body
                    {
                    dbg.location(473,3);
                    pushFollow(FOLLOW_body_in_moz_document1435);
                    body();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(77);}

            dbg.location(474,2);
            match(input,RBRACE,FOLLOW_RBRACE_in_moz_document1440); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(475, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moz_document");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "moz_document"


    // $ANTLR start "moz_document_function"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:477:1: moz_document_function : ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP );
    public final void moz_document_function() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "moz_document_function");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(477, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:478:2: ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(478,2);
            if ( input.LA(1)==URI||(input.LA(1)>=MOZ_URL_PREFIX && input.LA(1)<=MOZ_REGEXP) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(480, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moz_document_function");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "moz_document_function"


    // $ANTLR start "webkitKeyframes"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:483:1: webkitKeyframes : WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE ;
    public final void webkitKeyframes() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "webkitKeyframes");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(483, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:484:2: ( WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:485:2: WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE
            {
            dbg.location(485,2);
            match(input,WEBKIT_KEYFRAMES_SYM,FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes1481); if (state.failed) return ;
            dbg.location(485,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:485:23: ( ws )?
            int alt78=2;
            try { dbg.enterSubRule(78);
            try { dbg.enterDecision(78, decisionCanBacktrack[78]);

            int LA78_0 = input.LA(1);

            if ( (LA78_0==WS||(LA78_0>=NL && LA78_0<=COMMENT)) ) {
                alt78=1;
            }
            } finally {dbg.exitDecision(78);}

            switch (alt78) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:485:23: ws
                    {
                    dbg.location(485,23);
                    pushFollow(FOLLOW_ws_in_webkitKeyframes1483);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(78);}

            dbg.location(485,27);
            pushFollow(FOLLOW_atRuleId_in_webkitKeyframes1486);
            atRuleId();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(485,36);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:485:36: ( ws )?
            int alt79=2;
            try { dbg.enterSubRule(79);
            try { dbg.enterDecision(79, decisionCanBacktrack[79]);

            int LA79_0 = input.LA(1);

            if ( (LA79_0==WS||(LA79_0>=NL && LA79_0<=COMMENT)) ) {
                alt79=1;
            }
            } finally {dbg.exitDecision(79);}

            switch (alt79) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:485:36: ws
                    {
                    dbg.location(485,36);
                    pushFollow(FOLLOW_ws_in_webkitKeyframes1488);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(79);}

            dbg.location(486,2);
            match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframes1493); if (state.failed) return ;
            dbg.location(486,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:9: ( ws )?
            int alt80=2;
            try { dbg.enterSubRule(80);
            try { dbg.enterDecision(80, decisionCanBacktrack[80]);

            int LA80_0 = input.LA(1);

            if ( (LA80_0==WS||(LA80_0>=NL && LA80_0<=COMMENT)) ) {
                alt80=1;
            }
            } finally {dbg.exitDecision(80);}

            switch (alt80) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:9: ws
                    {
                    dbg.location(486,9);
                    pushFollow(FOLLOW_ws_in_webkitKeyframes1495);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(80);}

            dbg.location(487,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:3: ( webkitKeyframesBlock ( ws )? )*
            try { dbg.enterSubRule(82);

            loop82:
            do {
                int alt82=2;
                try { dbg.enterDecision(82, decisionCanBacktrack[82]);

                int LA82_0 = input.LA(1);

                if ( (LA82_0==IDENT||LA82_0==PERCENTAGE) ) {
                    alt82=1;
                }


                } finally {dbg.exitDecision(82);}

                switch (alt82) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:5: webkitKeyframesBlock ( ws )?
            	    {
            	    dbg.location(487,5);
            	    pushFollow(FOLLOW_webkitKeyframesBlock_in_webkitKeyframes1502);
            	    webkitKeyframesBlock();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(487,26);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:26: ( ws )?
            	    int alt81=2;
            	    try { dbg.enterSubRule(81);
            	    try { dbg.enterDecision(81, decisionCanBacktrack[81]);

            	    int LA81_0 = input.LA(1);

            	    if ( (LA81_0==WS||(LA81_0>=NL && LA81_0<=COMMENT)) ) {
            	        alt81=1;
            	    }
            	    } finally {dbg.exitDecision(81);}

            	    switch (alt81) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:26: ws
            	            {
            	            dbg.location(487,26);
            	            pushFollow(FOLLOW_ws_in_webkitKeyframes1504);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(81);}


            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);
            } finally {dbg.exitSubRule(82);}

            dbg.location(488,2);
            match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframes1511); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(489, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "webkitKeyframes");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "webkitKeyframes"


    // $ANTLR start "webkitKeyframesBlock"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:491:1: webkitKeyframesBlock : webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void webkitKeyframesBlock() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "webkitKeyframesBlock");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(491, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:492:2: ( webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:493:2: webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(493,2);
            pushFollow(FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock1524);
            webkitKeyframeSelectors();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(493,26);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:493:26: ( ws )?
            int alt83=2;
            try { dbg.enterSubRule(83);
            try { dbg.enterDecision(83, decisionCanBacktrack[83]);

            int LA83_0 = input.LA(1);

            if ( (LA83_0==WS||(LA83_0>=NL && LA83_0<=COMMENT)) ) {
                alt83=1;
            }
            } finally {dbg.exitDecision(83);}

            switch (alt83) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:493:26: ws
                    {
                    dbg.location(493,26);
                    pushFollow(FOLLOW_ws_in_webkitKeyframesBlock1526);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(83);}

            dbg.location(495,2);
            match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframesBlock1531); if (state.failed) return ;
            dbg.location(495,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:495:10: ( ws )?
            int alt84=2;
            try { dbg.enterSubRule(84);
            try { dbg.enterDecision(84, decisionCanBacktrack[84]);

            int LA84_0 = input.LA(1);

            if ( (LA84_0==WS||(LA84_0>=NL && LA84_0<=COMMENT)) ) {
                alt84=1;
            }
            } finally {dbg.exitDecision(84);}

            switch (alt84) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:495:10: ws
                    {
                    dbg.location(495,10);
                    pushFollow(FOLLOW_ws_in_webkitKeyframesBlock1534);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(84);}

            dbg.location(495,14);
            pushFollow(FOLLOW_syncToFollow_in_webkitKeyframesBlock1537);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(496,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:496:3: ( declarations )?
            int alt85=2;
            try { dbg.enterSubRule(85);
            try { dbg.enterDecision(85, decisionCanBacktrack[85]);

            int LA85_0 = input.LA(1);

            if ( (LA85_0==IDENT||(LA85_0>=IMPORT_SYM && LA85_0<=MEDIA_SYM)||LA85_0==GEN||LA85_0==COLON||LA85_0==AT_IDENT||LA85_0==MOZ_DOCUMENT_SYM||LA85_0==WEBKIT_KEYFRAMES_SYM||(LA85_0>=PAGE_SYM && LA85_0<=FONT_FACE_SYM)||LA85_0==MINUS||LA85_0==GREATER||(LA85_0>=HASH_SYMBOL && LA85_0<=PIPE)||LA85_0==LESS_AND||LA85_0==SASS_VAR||(LA85_0>=SASS_MIXIN && LA85_0<=SASS_INCLUDE)||LA85_0==SASS_EXTEND||(LA85_0>=SASS_DEBUG && LA85_0<=SASS_IF)||(LA85_0>=SASS_FOR && LA85_0<=SASS_WHILE)||(LA85_0>=SASS_RETURN && LA85_0<=SASS_CONTENT)) ) {
                alt85=1;
            }
            } finally {dbg.exitDecision(85);}

            switch (alt85) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:496:3: declarations
                    {
                    dbg.location(496,3);
                    pushFollow(FOLLOW_declarations_in_webkitKeyframesBlock1541);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(85);}

            dbg.location(497,2);
            match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframesBlock1545); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(498, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "webkitKeyframesBlock");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "webkitKeyframesBlock"


    // $ANTLR start "webkitKeyframeSelectors"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:500:1: webkitKeyframeSelectors : ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )* ;
    public final void webkitKeyframeSelectors() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "webkitKeyframeSelectors");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(500, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:501:2: ( ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:2: ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*
            {
            dbg.location(502,2);
            if ( input.LA(1)==IDENT||input.LA(1)==PERCENTAGE ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(502,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:25: ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*
            try { dbg.enterSubRule(88);

            loop88:
            do {
                int alt88=2;
                try { dbg.enterDecision(88, decisionCanBacktrack[88]);

                try {
                    isCyclicDecision = true;
                    alt88 = dfa88.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(88);}

                switch (alt88) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:27: ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE )
            	    {
            	    dbg.location(502,27);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:27: ( ws )?
            	    int alt86=2;
            	    try { dbg.enterSubRule(86);
            	    try { dbg.enterDecision(86, decisionCanBacktrack[86]);

            	    int LA86_0 = input.LA(1);

            	    if ( (LA86_0==WS||(LA86_0>=NL && LA86_0<=COMMENT)) ) {
            	        alt86=1;
            	    }
            	    } finally {dbg.exitDecision(86);}

            	    switch (alt86) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:27: ws
            	            {
            	            dbg.location(502,27);
            	            pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors1572);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(86);}

            	    dbg.location(502,31);
            	    match(input,COMMA,FOLLOW_COMMA_in_webkitKeyframeSelectors1575); if (state.failed) return ;
            	    dbg.location(502,37);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:37: ( ws )?
            	    int alt87=2;
            	    try { dbg.enterSubRule(87);
            	    try { dbg.enterDecision(87, decisionCanBacktrack[87]);

            	    int LA87_0 = input.LA(1);

            	    if ( (LA87_0==WS||(LA87_0>=NL && LA87_0<=COMMENT)) ) {
            	        alt87=1;
            	    }
            	    } finally {dbg.exitDecision(87);}

            	    switch (alt87) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:37: ws
            	            {
            	            dbg.location(502,37);
            	            pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors1577);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(87);}

            	    dbg.location(502,41);
            	    if ( input.LA(1)==IDENT||input.LA(1)==PERCENTAGE ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);
            } finally {dbg.exitSubRule(88);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(503, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "webkitKeyframeSelectors");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "webkitKeyframeSelectors"


    // $ANTLR start "page"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:505:1: page : PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( propertyDeclaration | margin ( ws )? )? ( SEMI ( ws )? ( propertyDeclaration | margin ( ws )? )? )* RBRACE ;
    public final void page() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "page");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(505, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:506:5: ( PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( propertyDeclaration | margin ( ws )? )? ( SEMI ( ws )? ( propertyDeclaration | margin ( ws )? )? )* RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:506:7: PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( propertyDeclaration | margin ( ws )? )? ( SEMI ( ws )? ( propertyDeclaration | margin ( ws )? )? )* RBRACE
            {
            dbg.location(506,7);
            match(input,PAGE_SYM,FOLLOW_PAGE_SYM_in_page1609); if (state.failed) return ;
            dbg.location(506,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:506:16: ( ws )?
            int alt89=2;
            try { dbg.enterSubRule(89);
            try { dbg.enterDecision(89, decisionCanBacktrack[89]);

            int LA89_0 = input.LA(1);

            if ( (LA89_0==WS||(LA89_0>=NL && LA89_0<=COMMENT)) ) {
                alt89=1;
            }
            } finally {dbg.exitDecision(89);}

            switch (alt89) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:506:16: ws
                    {
                    dbg.location(506,16);
                    pushFollow(FOLLOW_ws_in_page1611);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(89);}

            dbg.location(506,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:506:20: ( IDENT ( ws )? )?
            int alt91=2;
            try { dbg.enterSubRule(91);
            try { dbg.enterDecision(91, decisionCanBacktrack[91]);

            int LA91_0 = input.LA(1);

            if ( (LA91_0==IDENT) ) {
                alt91=1;
            }
            } finally {dbg.exitDecision(91);}

            switch (alt91) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:506:22: IDENT ( ws )?
                    {
                    dbg.location(506,22);
                    match(input,IDENT,FOLLOW_IDENT_in_page1616); if (state.failed) return ;
                    dbg.location(506,28);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:506:28: ( ws )?
                    int alt90=2;
                    try { dbg.enterSubRule(90);
                    try { dbg.enterDecision(90, decisionCanBacktrack[90]);

                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==WS||(LA90_0>=NL && LA90_0<=COMMENT)) ) {
                        alt90=1;
                    }
                    } finally {dbg.exitDecision(90);}

                    switch (alt90) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:506:28: ws
                            {
                            dbg.location(506,28);
                            pushFollow(FOLLOW_ws_in_page1618);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(90);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(91);}

            dbg.location(506,35);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:506:35: ( pseudoPage ( ws )? )?
            int alt93=2;
            try { dbg.enterSubRule(93);
            try { dbg.enterDecision(93, decisionCanBacktrack[93]);

            int LA93_0 = input.LA(1);

            if ( (LA93_0==COLON) ) {
                alt93=1;
            }
            } finally {dbg.exitDecision(93);}

            switch (alt93) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:506:36: pseudoPage ( ws )?
                    {
                    dbg.location(506,36);
                    pushFollow(FOLLOW_pseudoPage_in_page1625);
                    pseudoPage();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(506,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:506:47: ( ws )?
                    int alt92=2;
                    try { dbg.enterSubRule(92);
                    try { dbg.enterDecision(92, decisionCanBacktrack[92]);

                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==WS||(LA92_0>=NL && LA92_0<=COMMENT)) ) {
                        alt92=1;
                    }
                    } finally {dbg.exitDecision(92);}

                    switch (alt92) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:506:47: ws
                            {
                            dbg.location(506,47);
                            pushFollow(FOLLOW_ws_in_page1627);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(92);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(93);}

            dbg.location(507,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_page1640); if (state.failed) return ;
            dbg.location(507,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:507:16: ( ws )?
            int alt94=2;
            try { dbg.enterSubRule(94);
            try { dbg.enterDecision(94, decisionCanBacktrack[94]);

            int LA94_0 = input.LA(1);

            if ( (LA94_0==WS||(LA94_0>=NL && LA94_0<=COMMENT)) ) {
                alt94=1;
            }
            } finally {dbg.exitDecision(94);}

            switch (alt94) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:507:16: ws
                    {
                    dbg.location(507,16);
                    pushFollow(FOLLOW_ws_in_page1642);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(94);}

            dbg.location(511,13);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:511:13: ( propertyDeclaration | margin ( ws )? )?
            int alt96=3;
            try { dbg.enterSubRule(96);
            try { dbg.enterDecision(96, decisionCanBacktrack[96]);

            int LA96_0 = input.LA(1);

            if ( (LA96_0==IDENT||LA96_0==MEDIA_SYM||LA96_0==GEN||LA96_0==AT_IDENT||LA96_0==MINUS||(LA96_0>=HASH_SYMBOL && LA96_0<=DOT)||LA96_0==STAR||LA96_0==SASS_VAR) ) {
                alt96=1;
            }
            else if ( ((LA96_0>=TOPLEFTCORNER_SYM && LA96_0<=RIGHTBOTTOM_SYM)) ) {
                alt96=2;
            }
            } finally {dbg.exitDecision(96);}

            switch (alt96) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:511:14: propertyDeclaration
                    {
                    dbg.location(511,14);
                    pushFollow(FOLLOW_propertyDeclaration_in_page1697);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:511:34: margin ( ws )?
                    {
                    dbg.location(511,34);
                    pushFollow(FOLLOW_margin_in_page1699);
                    margin();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(511,41);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:511:41: ( ws )?
                    int alt95=2;
                    try { dbg.enterSubRule(95);
                    try { dbg.enterDecision(95, decisionCanBacktrack[95]);

                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==WS||(LA95_0>=NL && LA95_0<=COMMENT)) ) {
                        alt95=1;
                    }
                    } finally {dbg.exitDecision(95);}

                    switch (alt95) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:511:41: ws
                            {
                            dbg.location(511,41);
                            pushFollow(FOLLOW_ws_in_page1701);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(95);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(96);}

            dbg.location(511,47);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:511:47: ( SEMI ( ws )? ( propertyDeclaration | margin ( ws )? )? )*
            try { dbg.enterSubRule(100);

            loop100:
            do {
                int alt100=2;
                try { dbg.enterDecision(100, decisionCanBacktrack[100]);

                int LA100_0 = input.LA(1);

                if ( (LA100_0==SEMI) ) {
                    alt100=1;
                }


                } finally {dbg.exitDecision(100);}

                switch (alt100) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:511:48: SEMI ( ws )? ( propertyDeclaration | margin ( ws )? )?
            	    {
            	    dbg.location(511,48);
            	    match(input,SEMI,FOLLOW_SEMI_in_page1707); if (state.failed) return ;
            	    dbg.location(511,53);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:511:53: ( ws )?
            	    int alt97=2;
            	    try { dbg.enterSubRule(97);
            	    try { dbg.enterDecision(97, decisionCanBacktrack[97]);

            	    int LA97_0 = input.LA(1);

            	    if ( (LA97_0==WS||(LA97_0>=NL && LA97_0<=COMMENT)) ) {
            	        alt97=1;
            	    }
            	    } finally {dbg.exitDecision(97);}

            	    switch (alt97) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:511:53: ws
            	            {
            	            dbg.location(511,53);
            	            pushFollow(FOLLOW_ws_in_page1709);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(97);}

            	    dbg.location(511,57);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:511:57: ( propertyDeclaration | margin ( ws )? )?
            	    int alt99=3;
            	    try { dbg.enterSubRule(99);
            	    try { dbg.enterDecision(99, decisionCanBacktrack[99]);

            	    int LA99_0 = input.LA(1);

            	    if ( (LA99_0==IDENT||LA99_0==MEDIA_SYM||LA99_0==GEN||LA99_0==AT_IDENT||LA99_0==MINUS||(LA99_0>=HASH_SYMBOL && LA99_0<=DOT)||LA99_0==STAR||LA99_0==SASS_VAR) ) {
            	        alt99=1;
            	    }
            	    else if ( ((LA99_0>=TOPLEFTCORNER_SYM && LA99_0<=RIGHTBOTTOM_SYM)) ) {
            	        alt99=2;
            	    }
            	    } finally {dbg.exitDecision(99);}

            	    switch (alt99) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:511:58: propertyDeclaration
            	            {
            	            dbg.location(511,58);
            	            pushFollow(FOLLOW_propertyDeclaration_in_page1713);
            	            propertyDeclaration();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:511:78: margin ( ws )?
            	            {
            	            dbg.location(511,78);
            	            pushFollow(FOLLOW_margin_in_page1715);
            	            margin();

            	            state._fsp--;
            	            if (state.failed) return ;
            	            dbg.location(511,85);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:511:85: ( ws )?
            	            int alt98=2;
            	            try { dbg.enterSubRule(98);
            	            try { dbg.enterDecision(98, decisionCanBacktrack[98]);

            	            int LA98_0 = input.LA(1);

            	            if ( (LA98_0==WS||(LA98_0>=NL && LA98_0<=COMMENT)) ) {
            	                alt98=1;
            	            }
            	            } finally {dbg.exitDecision(98);}

            	            switch (alt98) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:511:85: ws
            	                    {
            	                    dbg.location(511,85);
            	                    pushFollow(FOLLOW_ws_in_page1717);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(98);}


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(99);}


            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);
            } finally {dbg.exitSubRule(100);}

            dbg.location(512,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_page1732); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(513, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "page");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "page"


    // $ANTLR start "counterStyle"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:515:1: counterStyle : COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
    public final void counterStyle() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "counterStyle");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(515, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:5: ( COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:7: COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
            {
            dbg.location(516,7);
            match(input,COUNTER_STYLE_SYM,FOLLOW_COUNTER_STYLE_SYM_in_counterStyle1753); if (state.failed) return ;
            dbg.location(516,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:25: ( ws )?
            int alt101=2;
            try { dbg.enterSubRule(101);
            try { dbg.enterDecision(101, decisionCanBacktrack[101]);

            int LA101_0 = input.LA(1);

            if ( (LA101_0==WS||(LA101_0>=NL && LA101_0<=COMMENT)) ) {
                alt101=1;
            }
            } finally {dbg.exitDecision(101);}

            switch (alt101) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:25: ws
                    {
                    dbg.location(516,25);
                    pushFollow(FOLLOW_ws_in_counterStyle1755);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(101);}

            dbg.location(516,29);
            match(input,IDENT,FOLLOW_IDENT_in_counterStyle1758); if (state.failed) return ;
            dbg.location(516,35);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:35: ( ws )?
            int alt102=2;
            try { dbg.enterSubRule(102);
            try { dbg.enterDecision(102, decisionCanBacktrack[102]);

            int LA102_0 = input.LA(1);

            if ( (LA102_0==WS||(LA102_0>=NL && LA102_0<=COMMENT)) ) {
                alt102=1;
            }
            } finally {dbg.exitDecision(102);}

            switch (alt102) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:35: ws
                    {
                    dbg.location(516,35);
                    pushFollow(FOLLOW_ws_in_counterStyle1760);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(102);}

            dbg.location(517,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_counterStyle1771); if (state.failed) return ;
            dbg.location(517,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:517:16: ( ws )?
            int alt103=2;
            try { dbg.enterSubRule(103);
            try { dbg.enterDecision(103, decisionCanBacktrack[103]);

            int LA103_0 = input.LA(1);

            if ( (LA103_0==WS||(LA103_0>=NL && LA103_0<=COMMENT)) ) {
                alt103=1;
            }
            } finally {dbg.exitDecision(103);}

            switch (alt103) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:517:16: ws
                    {
                    dbg.location(517,16);
                    pushFollow(FOLLOW_ws_in_counterStyle1773);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(103);}

            dbg.location(517,20);
            pushFollow(FOLLOW_syncToDeclarationsRule_in_counterStyle1776);
            syncToDeclarationsRule();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(518,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:518:3: ( declarations )?
            int alt104=2;
            try { dbg.enterSubRule(104);
            try { dbg.enterDecision(104, decisionCanBacktrack[104]);

            int LA104_0 = input.LA(1);

            if ( (LA104_0==IDENT||(LA104_0>=IMPORT_SYM && LA104_0<=MEDIA_SYM)||LA104_0==GEN||LA104_0==COLON||LA104_0==AT_IDENT||LA104_0==MOZ_DOCUMENT_SYM||LA104_0==WEBKIT_KEYFRAMES_SYM||(LA104_0>=PAGE_SYM && LA104_0<=FONT_FACE_SYM)||LA104_0==MINUS||LA104_0==GREATER||(LA104_0>=HASH_SYMBOL && LA104_0<=PIPE)||LA104_0==LESS_AND||LA104_0==SASS_VAR||(LA104_0>=SASS_MIXIN && LA104_0<=SASS_INCLUDE)||LA104_0==SASS_EXTEND||(LA104_0>=SASS_DEBUG && LA104_0<=SASS_IF)||(LA104_0>=SASS_FOR && LA104_0<=SASS_WHILE)||(LA104_0>=SASS_RETURN && LA104_0<=SASS_CONTENT)) ) {
                alt104=1;
            }
            } finally {dbg.exitDecision(104);}

            switch (alt104) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:518:3: declarations
                    {
                    dbg.location(518,3);
                    pushFollow(FOLLOW_declarations_in_counterStyle1780);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(104);}

            dbg.location(519,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_counterStyle1791); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(520, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "counterStyle");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "counterStyle"


    // $ANTLR start "fontFace"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:522:1: fontFace : FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
    public final void fontFace() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fontFace");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(522, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:523:5: ( FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:523:7: FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
            {
            dbg.location(523,7);
            match(input,FONT_FACE_SYM,FOLLOW_FONT_FACE_SYM_in_fontFace1812); if (state.failed) return ;
            dbg.location(523,21);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:523:21: ( ws )?
            int alt105=2;
            try { dbg.enterSubRule(105);
            try { dbg.enterDecision(105, decisionCanBacktrack[105]);

            int LA105_0 = input.LA(1);

            if ( (LA105_0==WS||(LA105_0>=NL && LA105_0<=COMMENT)) ) {
                alt105=1;
            }
            } finally {dbg.exitDecision(105);}

            switch (alt105) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:523:21: ws
                    {
                    dbg.location(523,21);
                    pushFollow(FOLLOW_ws_in_fontFace1814);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(105);}

            dbg.location(524,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_fontFace1825); if (state.failed) return ;
            dbg.location(524,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:16: ( ws )?
            int alt106=2;
            try { dbg.enterSubRule(106);
            try { dbg.enterDecision(106, decisionCanBacktrack[106]);

            int LA106_0 = input.LA(1);

            if ( (LA106_0==WS||(LA106_0>=NL && LA106_0<=COMMENT)) ) {
                alt106=1;
            }
            } finally {dbg.exitDecision(106);}

            switch (alt106) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:16: ws
                    {
                    dbg.location(524,16);
                    pushFollow(FOLLOW_ws_in_fontFace1827);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(106);}

            dbg.location(524,20);
            pushFollow(FOLLOW_syncToDeclarationsRule_in_fontFace1830);
            syncToDeclarationsRule();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(525,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:525:3: ( declarations )?
            int alt107=2;
            try { dbg.enterSubRule(107);
            try { dbg.enterDecision(107, decisionCanBacktrack[107]);

            int LA107_0 = input.LA(1);

            if ( (LA107_0==IDENT||(LA107_0>=IMPORT_SYM && LA107_0<=MEDIA_SYM)||LA107_0==GEN||LA107_0==COLON||LA107_0==AT_IDENT||LA107_0==MOZ_DOCUMENT_SYM||LA107_0==WEBKIT_KEYFRAMES_SYM||(LA107_0>=PAGE_SYM && LA107_0<=FONT_FACE_SYM)||LA107_0==MINUS||LA107_0==GREATER||(LA107_0>=HASH_SYMBOL && LA107_0<=PIPE)||LA107_0==LESS_AND||LA107_0==SASS_VAR||(LA107_0>=SASS_MIXIN && LA107_0<=SASS_INCLUDE)||LA107_0==SASS_EXTEND||(LA107_0>=SASS_DEBUG && LA107_0<=SASS_IF)||(LA107_0>=SASS_FOR && LA107_0<=SASS_WHILE)||(LA107_0>=SASS_RETURN && LA107_0<=SASS_CONTENT)) ) {
                alt107=1;
            }
            } finally {dbg.exitDecision(107);}

            switch (alt107) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:525:3: declarations
                    {
                    dbg.location(525,3);
                    pushFollow(FOLLOW_declarations_in_fontFace1834);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(107);}

            dbg.location(526,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_fontFace1845); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(527, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fontFace");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fontFace"


    // $ANTLR start "margin"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:529:1: margin : margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
    public final void margin() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "margin");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(529, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:2: ( margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:4: margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
            {
            dbg.location(530,4);
            pushFollow(FOLLOW_margin_sym_in_margin1860);
            margin_sym();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(530,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:15: ( ws )?
            int alt108=2;
            try { dbg.enterSubRule(108);
            try { dbg.enterDecision(108, decisionCanBacktrack[108]);

            int LA108_0 = input.LA(1);

            if ( (LA108_0==WS||(LA108_0>=NL && LA108_0<=COMMENT)) ) {
                alt108=1;
            }
            } finally {dbg.exitDecision(108);}

            switch (alt108) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:15: ws
                    {
                    dbg.location(530,15);
                    pushFollow(FOLLOW_ws_in_margin1862);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(108);}

            dbg.location(530,19);
            match(input,LBRACE,FOLLOW_LBRACE_in_margin1865); if (state.failed) return ;
            dbg.location(530,26);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:26: ( ws )?
            int alt109=2;
            try { dbg.enterSubRule(109);
            try { dbg.enterDecision(109, decisionCanBacktrack[109]);

            int LA109_0 = input.LA(1);

            if ( (LA109_0==WS||(LA109_0>=NL && LA109_0<=COMMENT)) ) {
                alt109=1;
            }
            } finally {dbg.exitDecision(109);}

            switch (alt109) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:26: ws
                    {
                    dbg.location(530,26);
                    pushFollow(FOLLOW_ws_in_margin1867);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(109);}

            dbg.location(530,30);
            pushFollow(FOLLOW_syncToDeclarationsRule_in_margin1870);
            syncToDeclarationsRule();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(530,53);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:53: ( declarations )?
            int alt110=2;
            try { dbg.enterSubRule(110);
            try { dbg.enterDecision(110, decisionCanBacktrack[110]);

            int LA110_0 = input.LA(1);

            if ( (LA110_0==IDENT||(LA110_0>=IMPORT_SYM && LA110_0<=MEDIA_SYM)||LA110_0==GEN||LA110_0==COLON||LA110_0==AT_IDENT||LA110_0==MOZ_DOCUMENT_SYM||LA110_0==WEBKIT_KEYFRAMES_SYM||(LA110_0>=PAGE_SYM && LA110_0<=FONT_FACE_SYM)||LA110_0==MINUS||LA110_0==GREATER||(LA110_0>=HASH_SYMBOL && LA110_0<=PIPE)||LA110_0==LESS_AND||LA110_0==SASS_VAR||(LA110_0>=SASS_MIXIN && LA110_0<=SASS_INCLUDE)||LA110_0==SASS_EXTEND||(LA110_0>=SASS_DEBUG && LA110_0<=SASS_IF)||(LA110_0>=SASS_FOR && LA110_0<=SASS_WHILE)||(LA110_0>=SASS_RETURN && LA110_0<=SASS_CONTENT)) ) {
                alt110=1;
            }
            } finally {dbg.exitDecision(110);}

            switch (alt110) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:53: declarations
                    {
                    dbg.location(530,53);
                    pushFollow(FOLLOW_declarations_in_margin1872);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(110);}

            dbg.location(530,67);
            match(input,RBRACE,FOLLOW_RBRACE_in_margin1875); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(531, 8);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "margin");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "margin"


    // $ANTLR start "margin_sym"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:533:1: margin_sym : ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM );
    public final void margin_sym() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "margin_sym");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(533, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:2: ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(534,2);
            if ( (input.LA(1)>=TOPLEFTCORNER_SYM && input.LA(1)<=RIGHTBOTTOM_SYM) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(551, 8);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "margin_sym");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "margin_sym"


    // $ANTLR start "pseudoPage"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:553:1: pseudoPage : COLON IDENT ;
    public final void pseudoPage() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "pseudoPage");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(553, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:554:5: ( COLON IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:554:7: COLON IDENT
            {
            dbg.location(554,7);
            match(input,COLON,FOLLOW_COLON_in_pseudoPage2104); if (state.failed) return ;
            dbg.location(554,13);
            match(input,IDENT,FOLLOW_IDENT_in_pseudoPage2106); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(555, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pseudoPage");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "pseudoPage"


    // $ANTLR start "operator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:557:1: operator : ( SOLIDUS | COMMA );
    public final void operator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "operator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(557, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:558:5: ( SOLIDUS | COMMA )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(558,5);
            if ( input.LA(1)==COMMA||input.LA(1)==SOLIDUS ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(560, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "operator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "operator"


    // $ANTLR start "unaryOperator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:562:1: unaryOperator : ( MINUS | PLUS );
    public final void unaryOperator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "unaryOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(562, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:563:5: ( MINUS | PLUS )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(563,5);
            if ( (input.LA(1)>=MINUS && input.LA(1)<=PLUS) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(565, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unaryOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "unaryOperator"


    // $ANTLR start "property"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:567:1: property : ( ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression | IDENT | GEN | {...}? cp_variable ) ( ws )? ;
    public final void property() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "property");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(567, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:568:5: ( ( ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression | IDENT | GEN | {...}? cp_variable ) ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:569:5: ( ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression | IDENT | GEN | {...}? cp_variable ) ( ws )?
            {
            dbg.location(569,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:569:5: ( ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression | IDENT | GEN | {...}? cp_variable )
            int alt111=4;
            try { dbg.enterSubRule(111);
            try { dbg.enterDecision(111, decisionCanBacktrack[111]);

            int LA111_0 = input.LA(1);

            if ( (LA111_0==HASH_SYMBOL) && (synpred6_Css3())) {
                alt111=1;
            }
            else if ( (LA111_0==IDENT) ) {
                int LA111_2 = input.LA(2);

                if ( (synpred6_Css3()) ) {
                    alt111=1;
                }
                else if ( (true) ) {
                    alt111=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 111, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA111_0==MINUS||(LA111_0>=HASH && LA111_0<=DOT)) && (synpred6_Css3())) {
                alt111=1;
            }
            else if ( (LA111_0==GEN) ) {
                alt111=3;
            }
            else if ( (LA111_0==MEDIA_SYM||LA111_0==AT_IDENT||LA111_0==SASS_VAR) ) {
                alt111=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(111);}

            switch (alt111) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:572:9: ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression
                    {
                    dbg.location(572,53);
                    pushFollow(FOLLOW_sass_declaration_interpolation_expression_in_property2238);
                    sass_declaration_interpolation_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:573:11: IDENT
                    {
                    dbg.location(573,11);
                    match(input,IDENT,FOLLOW_IDENT_in_property2250); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:574:11: GEN
                    {
                    dbg.location(574,11);
                    match(input,GEN,FOLLOW_GEN_in_property2263); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:575:11: {...}? cp_variable
                    {
                    dbg.location(575,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "property", "isCssPreprocessorSource()");
                    }
                    dbg.location(575,40);
                    pushFollow(FOLLOW_cp_variable_in_property2278);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(111);}

            dbg.location(576,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:576:7: ( ws )?
            int alt112=2;
            try { dbg.enterSubRule(112);
            try { dbg.enterDecision(112, decisionCanBacktrack[112]);

            int LA112_0 = input.LA(1);

            if ( (LA112_0==WS||(LA112_0>=NL && LA112_0<=COMMENT)) ) {
                alt112=1;
            }
            } finally {dbg.exitDecision(112);}

            switch (alt112) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:576:7: ws
                    {
                    dbg.location(576,7);
                    pushFollow(FOLLOW_ws_in_property2286);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(112);}


            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(COLON)); 
                
        }
        finally {
        }
        dbg.location(577, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "property");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "property"


    // $ANTLR start "rule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:582:1: rule : ( ( cp_mixin_declaration )=> cp_mixin_declaration | selectorsGroup ) ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void rule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "rule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(582, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:583:5: ( ( ( cp_mixin_declaration )=> cp_mixin_declaration | selectorsGroup ) ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:584:5: ( ( cp_mixin_declaration )=> cp_mixin_declaration | selectorsGroup ) ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(584,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:584:5: ( ( cp_mixin_declaration )=> cp_mixin_declaration | selectorsGroup )
            int alt113=2;
            try { dbg.enterSubRule(113);
            try { dbg.enterDecision(113, decisionCanBacktrack[113]);

            try {
                isCyclicDecision = true;
                alt113 = dfa113.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(113);}

            switch (alt113) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:585:9: ( cp_mixin_declaration )=> cp_mixin_declaration
                    {
                    dbg.location(585,33);
                    pushFollow(FOLLOW_cp_mixin_declaration_in_rule2336);
                    cp_mixin_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:586:11: selectorsGroup
                    {
                    dbg.location(586,11);
                    pushFollow(FOLLOW_selectorsGroup_in_rule2350);
                    selectorsGroup();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(113);}

            dbg.location(587,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:587:7: ( ws )?
            int alt114=2;
            try { dbg.enterSubRule(114);
            try { dbg.enterDecision(114, decisionCanBacktrack[114]);

            int LA114_0 = input.LA(1);

            if ( (LA114_0==WS||(LA114_0>=NL && LA114_0<=COMMENT)) ) {
                alt114=1;
            }
            } finally {dbg.exitDecision(114);}

            switch (alt114) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:587:7: ws
                    {
                    dbg.location(587,7);
                    pushFollow(FOLLOW_ws_in_rule2358);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(114);}

            dbg.location(588,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_rule2365); if (state.failed) return ;
            dbg.location(588,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:588:12: ( ws )?
            int alt115=2;
            try { dbg.enterSubRule(115);
            try { dbg.enterDecision(115, decisionCanBacktrack[115]);

            int LA115_0 = input.LA(1);

            if ( (LA115_0==WS||(LA115_0>=NL && LA115_0<=COMMENT)) ) {
                alt115=1;
            }
            } finally {dbg.exitDecision(115);}

            switch (alt115) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:588:12: ws
                    {
                    dbg.location(588,12);
                    pushFollow(FOLLOW_ws_in_rule2367);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(115);}

            dbg.location(588,16);
            pushFollow(FOLLOW_syncToFollow_in_rule2370);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(589,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:589:9: ( declarations )?
            int alt116=2;
            try { dbg.enterSubRule(116);
            try { dbg.enterDecision(116, decisionCanBacktrack[116]);

            int LA116_0 = input.LA(1);

            if ( (LA116_0==IDENT||(LA116_0>=IMPORT_SYM && LA116_0<=MEDIA_SYM)||LA116_0==GEN||LA116_0==COLON||LA116_0==AT_IDENT||LA116_0==MOZ_DOCUMENT_SYM||LA116_0==WEBKIT_KEYFRAMES_SYM||(LA116_0>=PAGE_SYM && LA116_0<=FONT_FACE_SYM)||LA116_0==MINUS||LA116_0==GREATER||(LA116_0>=HASH_SYMBOL && LA116_0<=PIPE)||LA116_0==LESS_AND||LA116_0==SASS_VAR||(LA116_0>=SASS_MIXIN && LA116_0<=SASS_INCLUDE)||LA116_0==SASS_EXTEND||(LA116_0>=SASS_DEBUG && LA116_0<=SASS_IF)||(LA116_0>=SASS_FOR && LA116_0<=SASS_WHILE)||(LA116_0>=SASS_RETURN && LA116_0<=SASS_CONTENT)) ) {
                alt116=1;
            }
            } finally {dbg.exitDecision(116);}

            switch (alt116) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:589:9: declarations
                    {
                    dbg.location(589,9);
                    pushFollow(FOLLOW_declarations_in_rule2381);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(116);}

            dbg.location(590,5);
            match(input,RBRACE,FOLLOW_RBRACE_in_rule2388); if (state.failed) return ;

            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(RBRACE));
                    input.consume(); //consume the RBRACE as well   
                
        }
        finally {
        }
        dbg.location(591, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "rule"


    // $ANTLR start "declarations"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:1: declarations : ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )+ ;
    public final void declarations() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "declarations");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(598, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:599:5: ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:5: ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )+
            {
            dbg.location(601,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:5: ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )+
            int cnt120=0;
            try { dbg.enterSubRule(120);

            loop120:
            do {
                int alt120=2;
                try { dbg.enterDecision(120, decisionCanBacktrack[120]);

                int LA120_0 = input.LA(1);

                if ( (LA120_0==IDENT||(LA120_0>=IMPORT_SYM && LA120_0<=MEDIA_SYM)||LA120_0==GEN||LA120_0==COLON||LA120_0==AT_IDENT||LA120_0==MOZ_DOCUMENT_SYM||LA120_0==WEBKIT_KEYFRAMES_SYM||(LA120_0>=PAGE_SYM && LA120_0<=FONT_FACE_SYM)||LA120_0==MINUS||LA120_0==GREATER||(LA120_0>=HASH_SYMBOL && LA120_0<=PIPE)||LA120_0==LESS_AND||LA120_0==SASS_VAR||(LA120_0>=SASS_MIXIN && LA120_0<=SASS_INCLUDE)||LA120_0==SASS_EXTEND||(LA120_0>=SASS_DEBUG && LA120_0<=SASS_IF)||(LA120_0>=SASS_FOR && LA120_0<=SASS_WHILE)||(LA120_0>=SASS_RETURN && LA120_0<=SASS_CONTENT)) ) {
                    alt120=1;
                }


                } finally {dbg.exitDecision(120);}

                switch (alt120) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:606:10: declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
            	    {
            	    dbg.location(606,10);
            	    pushFollow(FOLLOW_declaration_in_declarations2439);
            	    declaration();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(606,22);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:606:22: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
            	    int alt118=2;
            	    try { dbg.enterSubRule(118);
            	    try { dbg.enterDecision(118, decisionCanBacktrack[118]);

            	    try {
            	        isCyclicDecision = true;
            	        alt118 = dfa118.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(118);}

            	    switch (alt118) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:606:23: ( ( ws )? SEMI )=> ( ws )? SEMI
            	            {
            	            dbg.location(606,35);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:606:35: ( ws )?
            	            int alt117=2;
            	            try { dbg.enterSubRule(117);
            	            try { dbg.enterDecision(117, decisionCanBacktrack[117]);

            	            int LA117_0 = input.LA(1);

            	            if ( (LA117_0==WS||(LA117_0>=NL && LA117_0<=COMMENT)) ) {
            	                alt117=1;
            	            }
            	            } finally {dbg.exitDecision(117);}

            	            switch (alt117) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:606:35: ws
            	                    {
            	                    dbg.location(606,35);
            	                    pushFollow(FOLLOW_ws_in_declarations2449);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(117);}

            	            dbg.location(606,39);
            	            match(input,SEMI,FOLLOW_SEMI_in_declarations2452); if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(118);}

            	    dbg.location(606,46);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:606:46: ( ws )?
            	    int alt119=2;
            	    try { dbg.enterSubRule(119);
            	    try { dbg.enterDecision(119, decisionCanBacktrack[119]);

            	    int LA119_0 = input.LA(1);

            	    if ( (LA119_0==WS||(LA119_0>=NL && LA119_0<=COMMENT)) ) {
            	        alt119=1;
            	    }
            	    } finally {dbg.exitDecision(119);}

            	    switch (alt119) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:606:46: ws
            	            {
            	            dbg.location(606,46);
            	            pushFollow(FOLLOW_ws_in_declarations2456);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(119);}


            	    }
            	    break;

            	default :
            	    if ( cnt120 >= 1 ) break loop120;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(120, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt120++;
            } while (true);
            } finally {dbg.exitSubRule(120);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(608, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "declarations");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "declarations"


    // $ANTLR start "declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:617:1: declaration : ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_nested_properties )=> sass_nested_properties | ( propertyDeclaration )=> propertyDeclaration | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )* COLON )=> propertyDeclaration | ( rule )=> rule | {...}? at_rule | {...}? sass_control | {...}? sass_extend | {...}? sass_debug | {...}? cp_mixin_call | {...}? sass_content | {...}? sass_function_return | {...}? importItem );
    public final void declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(617, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:618:5: ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_nested_properties )=> sass_nested_properties | ( propertyDeclaration )=> propertyDeclaration | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )* COLON )=> propertyDeclaration | ( rule )=> rule | {...}? at_rule | {...}? sass_control | {...}? sass_extend | {...}? sass_debug | {...}? cp_mixin_call | {...}? sass_content | {...}? sass_function_return | {...}? importItem )
            int alt121=13;
            try { dbg.enterDecision(121, decisionCanBacktrack[121]);

            try {
                isCyclicDecision = true;
                alt121 = dfa121.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(121);}

            switch (alt121) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:5: ( cp_variable_declaration )=> cp_variable_declaration
                    {
                    dbg.location(619,32);
                    pushFollow(FOLLOW_cp_variable_declaration_in_declaration2496);
                    cp_variable_declaration();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(619,56);
                    if ( state.backtracking==0 ) {
                       declarationType = DeclarationType.COMMAND; 
                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:620:7: ( sass_nested_properties )=> sass_nested_properties
                    {
                    dbg.location(620,33);
                    pushFollow(FOLLOW_sass_nested_properties_in_declaration2510);
                    sass_nested_properties();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(620,56);
                    if ( state.backtracking==0 ) {
                       declarationType = DeclarationType.BLOCK; 
                    }

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:7: ( propertyDeclaration )=> propertyDeclaration
                    {
                    dbg.location(621,30);
                    pushFollow(FOLLOW_propertyDeclaration_in_declaration2524);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(621,50);
                    if ( state.backtracking==0 ) {
                       declarationType = DeclarationType.COMMAND; 
                    }

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:7: ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )* COLON )=> propertyDeclaration
                    {
                    dbg.location(623,45);
                    pushFollow(FOLLOW_propertyDeclaration_in_declaration2555);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(623,65);
                    if ( state.backtracking==0 ) {
                       declarationType = DeclarationType.COMMAND; 
                    }

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:624:7: ( rule )=> rule
                    {
                    dbg.location(624,15);
                    pushFollow(FOLLOW_rule_in_declaration2569);
                    rule();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(624,20);
                    if ( state.backtracking==0 ) {
                       declarationType = DeclarationType.BLOCK; 
                    }

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:625:7: {...}? at_rule
                    {
                    dbg.location(625,7);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isCssPreprocessorSource()");
                    }
                    dbg.location(625,36);
                    pushFollow(FOLLOW_at_rule_in_declaration2581);
                    at_rule();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(625,44);
                    if ( state.backtracking==0 ) {
                       declarationType = DeclarationType.BLOCK; 
                    }

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:626:7: {...}? sass_control
                    {
                    dbg.location(626,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(626,25);
                    pushFollow(FOLLOW_sass_control_in_declaration2593);
                    sass_control();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(626,38);
                    if ( state.backtracking==0 ) {
                       declarationType = DeclarationType.COMMAND; 
                    }

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:7: {...}? sass_extend
                    {
                    dbg.location(627,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(627,25);
                    pushFollow(FOLLOW_sass_extend_in_declaration2605);
                    sass_extend();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(627,37);
                    if ( state.backtracking==0 ) {
                       declarationType = DeclarationType.COMMAND; 
                    }

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:628:7: {...}? sass_debug
                    {
                    dbg.location(628,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(628,25);
                    pushFollow(FOLLOW_sass_debug_in_declaration2617);
                    sass_debug();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(628,36);
                    if ( state.backtracking==0 ) {
                       declarationType = DeclarationType.COMMAND; 
                    }

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:7: {...}? cp_mixin_call
                    {
                    dbg.location(629,7);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isCssPreprocessorSource()");
                    }
                    dbg.location(629,36);
                    pushFollow(FOLLOW_cp_mixin_call_in_declaration2629);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(629,50);
                    if ( state.backtracking==0 ) {
                       declarationType = DeclarationType.COMMAND; 
                    }

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:630:7: {...}? sass_content
                    {
                    dbg.location(630,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(630,25);
                    pushFollow(FOLLOW_sass_content_in_declaration2641);
                    sass_content();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(630,38);
                    if ( state.backtracking==0 ) {
                       declarationType = DeclarationType.BLOCK; 
                    }

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:631:7: {...}? sass_function_return
                    {
                    dbg.location(631,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(631,25);
                    pushFollow(FOLLOW_sass_function_return_in_declaration2653);
                    sass_function_return();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(631,46);
                    if ( state.backtracking==0 ) {
                       declarationType = DeclarationType.COMMAND; 
                    }

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:7: {...}? importItem
                    {
                    dbg.location(632,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(632,25);
                    pushFollow(FOLLOW_importItem_in_declaration2665);
                    importItem();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(632,36);
                    if ( state.backtracking==0 ) {
                       declarationType = DeclarationType.COMMAND; 
                    }

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(SEMI));
                
        }
        finally {
        }
        dbg.location(633, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "declaration"


    // $ANTLR start "selectorsGroup"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:1: selectorsGroup : ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression | selector ( COMMA ( ws )? selector )* );
    public final void selectorsGroup() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "selectorsGroup");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(639, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:640:5: ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression | selector ( COMMA ( ws )? selector )* )
            int alt124=2;
            try { dbg.enterDecision(124, decisionCanBacktrack[124]);

            try {
                isCyclicDecision = true;
                alt124 = dfa124.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(124);}

            switch (alt124) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:642:9: ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression
                    {
                    dbg.location(642,60);
                    pushFollow(FOLLOW_sass_selector_interpolation_expression_in_selectorsGroup2735);
                    sass_selector_interpolation_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:644:9: selector ( COMMA ( ws )? selector )*
                    {
                    dbg.location(644,9);
                    pushFollow(FOLLOW_selector_in_selectorsGroup2748);
                    selector();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(644,18);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:644:18: ( COMMA ( ws )? selector )*
                    try { dbg.enterSubRule(123);

                    loop123:
                    do {
                        int alt123=2;
                        try { dbg.enterDecision(123, decisionCanBacktrack[123]);

                        int LA123_0 = input.LA(1);

                        if ( (LA123_0==COMMA) ) {
                            alt123=1;
                        }


                        } finally {dbg.exitDecision(123);}

                        switch (alt123) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:644:19: COMMA ( ws )? selector
                    	    {
                    	    dbg.location(644,19);
                    	    match(input,COMMA,FOLLOW_COMMA_in_selectorsGroup2751); if (state.failed) return ;
                    	    dbg.location(644,25);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:644:25: ( ws )?
                    	    int alt122=2;
                    	    try { dbg.enterSubRule(122);
                    	    try { dbg.enterDecision(122, decisionCanBacktrack[122]);

                    	    int LA122_0 = input.LA(1);

                    	    if ( (LA122_0==WS||(LA122_0>=NL && LA122_0<=COMMENT)) ) {
                    	        alt122=1;
                    	    }
                    	    } finally {dbg.exitDecision(122);}

                    	    switch (alt122) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:644:25: ws
                    	            {
                    	            dbg.location(644,25);
                    	            pushFollow(FOLLOW_ws_in_selectorsGroup2753);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(122);}

                    	    dbg.location(644,29);
                    	    pushFollow(FOLLOW_selector_in_selectorsGroup2756);
                    	    selector();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop123;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(123);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(645, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "selectorsGroup");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "selectorsGroup"


    // $ANTLR start "selector"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:647:1: selector : simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )* ;
    public final void selector() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "selector");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(647, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:648:5: ( simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:648:7: simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )*
            {
            dbg.location(648,7);
            pushFollow(FOLLOW_simpleSelectorSequence_in_selector2783);
            simpleSelectorSequence();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(648,30);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:648:30: ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )*
            try { dbg.enterSubRule(128);

            loop128:
            do {
                int alt128=2;
                try { dbg.enterDecision(128, decisionCanBacktrack[128]);

                try {
                    isCyclicDecision = true;
                    alt128 = dfa128.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(128);}

                switch (alt128) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:648:32: ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence
            	    {
            	    dbg.location(648,32);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:648:32: ( ( ( ws )? combinator ( ws )? ) | ws )
            	    int alt127=2;
            	    try { dbg.enterSubRule(127);
            	    try { dbg.enterDecision(127, decisionCanBacktrack[127]);

            	    try {
            	        isCyclicDecision = true;
            	        alt127 = dfa127.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(127);}

            	    switch (alt127) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:648:33: ( ( ws )? combinator ( ws )? )
            	            {
            	            dbg.location(648,33);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:648:33: ( ( ws )? combinator ( ws )? )
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:648:34: ( ws )? combinator ( ws )?
            	            {
            	            dbg.location(648,34);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:648:34: ( ws )?
            	            int alt125=2;
            	            try { dbg.enterSubRule(125);
            	            try { dbg.enterDecision(125, decisionCanBacktrack[125]);

            	            int LA125_0 = input.LA(1);

            	            if ( (LA125_0==WS||(LA125_0>=NL && LA125_0<=COMMENT)) ) {
            	                alt125=1;
            	            }
            	            } finally {dbg.exitDecision(125);}

            	            switch (alt125) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:648:34: ws
            	                    {
            	                    dbg.location(648,34);
            	                    pushFollow(FOLLOW_ws_in_selector2789);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(125);}

            	            dbg.location(648,38);
            	            pushFollow(FOLLOW_combinator_in_selector2792);
            	            combinator();

            	            state._fsp--;
            	            if (state.failed) return ;
            	            dbg.location(648,49);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:648:49: ( ws )?
            	            int alt126=2;
            	            try { dbg.enterSubRule(126);
            	            try { dbg.enterDecision(126, decisionCanBacktrack[126]);

            	            int LA126_0 = input.LA(1);

            	            if ( (LA126_0==WS||(LA126_0>=NL && LA126_0<=COMMENT)) ) {
            	                alt126=1;
            	            }
            	            } finally {dbg.exitDecision(126);}

            	            switch (alt126) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:648:49: ws
            	                    {
            	                    dbg.location(648,49);
            	                    pushFollow(FOLLOW_ws_in_selector2794);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(126);}


            	            }


            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:648:54: ws
            	            {
            	            dbg.location(648,54);
            	            pushFollow(FOLLOW_ws_in_selector2798);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(127);}

            	    dbg.location(648,58);
            	    pushFollow(FOLLOW_simpleSelectorSequence_in_selector2801);
            	    simpleSelectorSequence();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop128;
                }
            } while (true);
            } finally {dbg.exitSubRule(128);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(649, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "selector");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "selector"


    // $ANTLR start "combinator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:651:1: combinator : ( PLUS | GREATER | TILDE );
    public final void combinator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "combinator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(651, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:652:5: ( PLUS | GREATER | TILDE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(652,5);
            if ( (input.LA(1)>=PLUS && input.LA(1)<=TILDE) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(654, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "combinator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "combinator"


    // $ANTLR start "simpleSelectorSequence"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:1: simpleSelectorSequence : ( ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* ) | elementSubsequent ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* );
    public final void simpleSelectorSequence() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "simpleSelectorSequence");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(656, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:657:2: ( ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* ) | elementSubsequent ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* )
            int alt133=2;
            try { dbg.enterDecision(133, decisionCanBacktrack[133]);

            int LA133_0 = input.LA(1);

            if ( (LA133_0==IDENT||LA133_0==GEN||(LA133_0>=STAR && LA133_0<=PIPE)||LA133_0==LESS_AND) ) {
                alt133=1;
            }
            else if ( (LA133_0==COLON||(LA133_0>=HASH_SYMBOL && LA133_0<=SASS_EXTEND_ONLY_SELECTOR)) ) {
                alt133=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(133);}

            switch (alt133) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:2: ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* )
                    {
                    dbg.location(660,2);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:2: ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:4: typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    {
                    dbg.location(660,4);
                    pushFollow(FOLLOW_typeSelector_in_simpleSelectorSequence2865);
                    typeSelector();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(660,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:17: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    try { dbg.enterSubRule(130);

                    loop130:
                    do {
                        int alt130=2;
                        try { dbg.enterDecision(130, decisionCanBacktrack[130]);

                        try {
                            isCyclicDecision = true;
                            alt130 = dfa130.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(130);}

                        switch (alt130) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:18: ( ( ws )? esPred )=> ( ws )? elementSubsequent
                    	    {
                    	    dbg.location(660,32);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:32: ( ws )?
                    	    int alt129=2;
                    	    try { dbg.enterSubRule(129);
                    	    try { dbg.enterDecision(129, decisionCanBacktrack[129]);

                    	    int LA129_0 = input.LA(1);

                    	    if ( (LA129_0==WS||(LA129_0>=NL && LA129_0<=COMMENT)) ) {
                    	        alt129=1;
                    	    }
                    	    } finally {dbg.exitDecision(129);}

                    	    switch (alt129) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:32: ws
                    	            {
                    	            dbg.location(660,32);
                    	            pushFollow(FOLLOW_ws_in_simpleSelectorSequence2875);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(129);}

                    	    dbg.location(660,36);
                    	    pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence2878);
                    	    elementSubsequent();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop130;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(130);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:662:2: elementSubsequent ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    {
                    dbg.location(662,2);
                    pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence2889);
                    elementSubsequent();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(662,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:662:20: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    try { dbg.enterSubRule(132);

                    loop132:
                    do {
                        int alt132=2;
                        try { dbg.enterDecision(132, decisionCanBacktrack[132]);

                        try {
                            isCyclicDecision = true;
                            alt132 = dfa132.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(132);}

                        switch (alt132) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:662:21: ( ( ws )? esPred )=> ( ws )? elementSubsequent
                    	    {
                    	    dbg.location(662,35);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:662:35: ( ws )?
                    	    int alt131=2;
                    	    try { dbg.enterSubRule(131);
                    	    try { dbg.enterDecision(131, decisionCanBacktrack[131]);

                    	    int LA131_0 = input.LA(1);

                    	    if ( (LA131_0==WS||(LA131_0>=NL && LA131_0<=COMMENT)) ) {
                    	        alt131=1;
                    	    }
                    	    } finally {dbg.exitDecision(131);}

                    	    switch (alt131) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:662:35: ws
                    	            {
                    	            dbg.location(662,35);
                    	            pushFollow(FOLLOW_ws_in_simpleSelectorSequence2899);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(131);}

                    	    dbg.location(662,39);
                    	    pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence2902);
                    	    elementSubsequent();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop132;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(132);}


                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                        reportError(rce);
                        consumeUntil(input, BitSet.of(LBRACE)); 
                    
        }
        finally {
        }
        dbg.location(664, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "simpleSelectorSequence");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "simpleSelectorSequence"


    // $ANTLR start "esPred"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:671:1: esPred : ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR );
    public final void esPred() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "esPred");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(671, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:5: ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(672,5);
            if ( input.LA(1)==COLON||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=SASS_EXTEND_ONLY_SELECTOR) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(673, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "esPred");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "esPred"


    // $ANTLR start "typeSelector"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:675:1: typeSelector options {k=2; } : ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName ;
    public final void typeSelector() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "typeSelector");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(675, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:677:3: ( ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:677:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName
            {
            dbg.location(677,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:677:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )?
            int alt134=2;
            try { dbg.enterSubRule(134);
            try { dbg.enterDecision(134, decisionCanBacktrack[134]);

            int LA134_0 = input.LA(1);

            if ( (LA134_0==IDENT) ) {
                int LA134_1 = input.LA(2);

                if ( (synpred17_Css3()) ) {
                    alt134=1;
                }
            }
            else if ( (LA134_0==STAR) ) {
                int LA134_2 = input.LA(2);

                if ( (synpred17_Css3()) ) {
                    alt134=1;
                }
            }
            else if ( (LA134_0==PIPE) && (synpred17_Css3())) {
                alt134=1;
            }
            } finally {dbg.exitDecision(134);}

            switch (alt134) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:677:7: ( ( IDENT | STAR )? PIPE )=> namespacePrefix
                    {
                    dbg.location(677,31);
                    pushFollow(FOLLOW_namespacePrefix_in_typeSelector3017);
                    namespacePrefix();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(134);}

            dbg.location(677,49);
            pushFollow(FOLLOW_elementName_in_typeSelector3021);
            elementName();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(678, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "typeSelector");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "typeSelector"


    // $ANTLR start "namespacePrefix"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:680:1: namespacePrefix : ( namespacePrefixName | STAR )? PIPE ;
    public final void namespacePrefix() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespacePrefix");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(680, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:681:3: ( ( namespacePrefixName | STAR )? PIPE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:681:5: ( namespacePrefixName | STAR )? PIPE
            {
            dbg.location(681,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:681:5: ( namespacePrefixName | STAR )?
            int alt135=3;
            try { dbg.enterSubRule(135);
            try { dbg.enterDecision(135, decisionCanBacktrack[135]);

            int LA135_0 = input.LA(1);

            if ( (LA135_0==IDENT) ) {
                alt135=1;
            }
            else if ( (LA135_0==STAR) ) {
                alt135=2;
            }
            } finally {dbg.exitDecision(135);}

            switch (alt135) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:681:7: namespacePrefixName
                    {
                    dbg.location(681,7);
                    pushFollow(FOLLOW_namespacePrefixName_in_namespacePrefix3036);
                    namespacePrefixName();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:681:29: STAR
                    {
                    dbg.location(681,29);
                    match(input,STAR,FOLLOW_STAR_in_namespacePrefix3040); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(135);}

            dbg.location(681,36);
            match(input,PIPE,FOLLOW_PIPE_in_namespacePrefix3044); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(682, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespacePrefix");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespacePrefix"


    // $ANTLR start "elementSubsequent"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:685:1: elementSubsequent : ({...}? sass_extend_only_selector | cssId | cssClass | slAttribute | pseudo ) ;
    public final void elementSubsequent() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "elementSubsequent");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(685, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:686:5: ( ({...}? sass_extend_only_selector | cssId | cssClass | slAttribute | pseudo ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:687:5: ({...}? sass_extend_only_selector | cssId | cssClass | slAttribute | pseudo )
            {
            dbg.location(687,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:687:5: ({...}? sass_extend_only_selector | cssId | cssClass | slAttribute | pseudo )
            int alt136=5;
            try { dbg.enterSubRule(136);
            try { dbg.enterDecision(136, decisionCanBacktrack[136]);

            switch ( input.LA(1) ) {
            case SASS_EXTEND_ONLY_SELECTOR:
                {
                alt136=1;
                }
                break;
            case HASH_SYMBOL:
            case HASH:
                {
                alt136=2;
                }
                break;
            case DOT:
                {
                alt136=3;
                }
                break;
            case LBRACKET:
                {
                alt136=4;
                }
                break;
            case COLON:
            case DCOLON:
                {
                alt136=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(136);}

            switch (alt136) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:688:9: {...}? sass_extend_only_selector
                    {
                    dbg.location(688,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "elementSubsequent", "isScssSource()");
                    }
                    dbg.location(688,27);
                    pushFollow(FOLLOW_sass_extend_only_selector_in_elementSubsequent3083);
                    sass_extend_only_selector();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:689:8: cssId
                    {
                    dbg.location(689,8);
                    pushFollow(FOLLOW_cssId_in_elementSubsequent3092);
                    cssId();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:690:8: cssClass
                    {
                    dbg.location(690,8);
                    pushFollow(FOLLOW_cssClass_in_elementSubsequent3101);
                    cssClass();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:691:11: slAttribute
                    {
                    dbg.location(691,11);
                    pushFollow(FOLLOW_slAttribute_in_elementSubsequent3113);
                    slAttribute();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:692:11: pseudo
                    {
                    dbg.location(692,11);
                    pushFollow(FOLLOW_pseudo_in_elementSubsequent3125);
                    pseudo();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(136);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(694, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "elementSubsequent");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "elementSubsequent"


    // $ANTLR start "cssId"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:697:1: cssId : ( HASH | ( HASH_SYMBOL NAME ) );
    public final void cssId() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cssId");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(697, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:698:5: ( HASH | ( HASH_SYMBOL NAME ) )
            int alt137=2;
            try { dbg.enterDecision(137, decisionCanBacktrack[137]);

            int LA137_0 = input.LA(1);

            if ( (LA137_0==HASH) ) {
                alt137=1;
            }
            else if ( (LA137_0==HASH_SYMBOL) ) {
                alt137=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(137);}

            switch (alt137) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:698:7: HASH
                    {
                    dbg.location(698,7);
                    match(input,HASH,FOLLOW_HASH_in_cssId3153); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:698:14: ( HASH_SYMBOL NAME )
                    {
                    dbg.location(698,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:698:14: ( HASH_SYMBOL NAME )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:698:16: HASH_SYMBOL NAME
                    {
                    dbg.location(698,16);
                    match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_cssId3159); if (state.failed) return ;
                    dbg.location(698,28);
                    match(input,NAME,FOLLOW_NAME_in_cssId3161); if (state.failed) return ;

                    }


                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(WS, IDENT, LBRACE)); 
                
        }
        finally {
        }
        dbg.location(699, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cssId");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cssId"


    // $ANTLR start "cssClass"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:705:1: cssClass : DOT ( IDENT | GEN ) ;
    public final void cssClass() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cssClass");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(705, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:5: ( DOT ( IDENT | GEN ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:7: DOT ( IDENT | GEN )
            {
            dbg.location(706,7);
            match(input,DOT,FOLLOW_DOT_in_cssClass3189); if (state.failed) return ;
            dbg.location(706,11);
            if ( input.LA(1)==IDENT||input.LA(1)==GEN ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(WS, IDENT, LBRACE)); 
                
        }
        finally {
        }
        dbg.location(707, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cssClass");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cssClass"


    // $ANTLR start "elementName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:714:1: elementName : ( ( IDENT | GEN | LESS_AND ) | STAR );
    public final void elementName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "elementName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(714, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:715:5: ( ( IDENT | GEN | LESS_AND ) | STAR )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(715,5);
            if ( input.LA(1)==IDENT||input.LA(1)==GEN||input.LA(1)==STAR||input.LA(1)==LESS_AND ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(716, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "elementName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "elementName"


    // $ANTLR start "slAttribute"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:718:1: slAttribute : LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET ;
    public final void slAttribute() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "slAttribute");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(718, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:719:5: ( LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:719:7: LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET
            {
            dbg.location(719,7);
            match(input,LBRACKET,FOLLOW_LBRACKET_in_slAttribute3263); if (state.failed) return ;
            dbg.location(720,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:720:6: ( namespacePrefix )?
            int alt138=2;
            try { dbg.enterSubRule(138);
            try { dbg.enterDecision(138, decisionCanBacktrack[138]);

            int LA138_0 = input.LA(1);

            if ( (LA138_0==IDENT) ) {
                int LA138_1 = input.LA(2);

                if ( (LA138_1==PIPE) ) {
                    alt138=1;
                }
            }
            else if ( ((LA138_0>=STAR && LA138_0<=PIPE)) ) {
                alt138=1;
            }
            } finally {dbg.exitDecision(138);}

            switch (alt138) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:720:6: namespacePrefix
                    {
                    dbg.location(720,6);
                    pushFollow(FOLLOW_namespacePrefix_in_slAttribute3270);
                    namespacePrefix();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(138);}

            dbg.location(720,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:720:23: ( ws )?
            int alt139=2;
            try { dbg.enterSubRule(139);
            try { dbg.enterDecision(139, decisionCanBacktrack[139]);

            int LA139_0 = input.LA(1);

            if ( (LA139_0==WS||(LA139_0>=NL && LA139_0<=COMMENT)) ) {
                alt139=1;
            }
            } finally {dbg.exitDecision(139);}

            switch (alt139) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:720:23: ws
                    {
                    dbg.location(720,23);
                    pushFollow(FOLLOW_ws_in_slAttribute3273);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(139);}

            dbg.location(721,9);
            pushFollow(FOLLOW_slAttributeName_in_slAttribute3284);
            slAttributeName();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(721,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:721:25: ( ws )?
            int alt140=2;
            try { dbg.enterSubRule(140);
            try { dbg.enterDecision(140, decisionCanBacktrack[140]);

            int LA140_0 = input.LA(1);

            if ( (LA140_0==WS||(LA140_0>=NL && LA140_0<=COMMENT)) ) {
                alt140=1;
            }
            } finally {dbg.exitDecision(140);}

            switch (alt140) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:721:25: ws
                    {
                    dbg.location(721,25);
                    pushFollow(FOLLOW_ws_in_slAttribute3286);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(140);}

            dbg.location(723,13);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:723:13: ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )?
            int alt143=2;
            try { dbg.enterSubRule(143);
            try { dbg.enterDecision(143, decisionCanBacktrack[143]);

            int LA143_0 = input.LA(1);

            if ( ((LA143_0>=OPEQ && LA143_0<=CONTAINS)) ) {
                alt143=1;
            }
            } finally {dbg.exitDecision(143);}

            switch (alt143) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:724:17: ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )?
                    {
                    dbg.location(724,17);
                    if ( (input.LA(1)>=OPEQ && input.LA(1)<=CONTAINS) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(732,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:732:17: ( ws )?
                    int alt141=2;
                    try { dbg.enterSubRule(141);
                    try { dbg.enterDecision(141, decisionCanBacktrack[141]);

                    int LA141_0 = input.LA(1);

                    if ( (LA141_0==WS||(LA141_0>=NL && LA141_0<=COMMENT)) ) {
                        alt141=1;
                    }
                    } finally {dbg.exitDecision(141);}

                    switch (alt141) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:732:17: ws
                            {
                            dbg.location(732,17);
                            pushFollow(FOLLOW_ws_in_slAttribute3508);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(141);}

                    dbg.location(733,17);
                    pushFollow(FOLLOW_slAttributeValue_in_slAttribute3527);
                    slAttributeValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(734,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:734:17: ( ws )?
                    int alt142=2;
                    try { dbg.enterSubRule(142);
                    try { dbg.enterDecision(142, decisionCanBacktrack[142]);

                    int LA142_0 = input.LA(1);

                    if ( (LA142_0==WS||(LA142_0>=NL && LA142_0<=COMMENT)) ) {
                        alt142=1;
                    }
                    } finally {dbg.exitDecision(142);}

                    switch (alt142) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:734:17: ws
                            {
                            dbg.location(734,17);
                            pushFollow(FOLLOW_ws_in_slAttribute3545);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(142);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(143);}

            dbg.location(737,7);
            match(input,RBRACKET,FOLLOW_RBRACKET_in_slAttribute3574); if (state.failed) return ;

            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(IDENT, LBRACE)); 
                
        }
        finally {
        }
        dbg.location(738, 1);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "slAttribute");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "slAttribute"


    // $ANTLR start "slAttributeName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:745:1: slAttributeName : IDENT ;
    public final void slAttributeName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "slAttributeName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(745, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:2: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:4: IDENT
            {
            dbg.location(746,4);
            match(input,IDENT,FOLLOW_IDENT_in_slAttributeName3590); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(747, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "slAttributeName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "slAttributeName"


    // $ANTLR start "slAttributeValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:749:1: slAttributeValue : ( IDENT | STRING ) ;
    public final void slAttributeValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "slAttributeValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(749, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:750:2: ( ( IDENT | STRING ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:751:2: ( IDENT | STRING )
            {
            dbg.location(751,2);
            if ( (input.LA(1)>=IDENT && input.LA(1)<=STRING) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(755, 9);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "slAttributeValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "slAttributeValue"


    // $ANTLR start "pseudo"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:757:1: pseudo : ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) ) ;
    public final void pseudo() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "pseudo");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(757, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:758:5: ( ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:758:7: ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) )
            {
            dbg.location(758,7);
            if ( input.LA(1)==COLON||input.LA(1)==DCOLON ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(759,14);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:759:14: ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) )
            int alt152=2;
            try { dbg.enterSubRule(152);
            try { dbg.enterDecision(152, decisionCanBacktrack[152]);

            int LA152_0 = input.LA(1);

            if ( (LA152_0==IDENT||LA152_0==GEN) ) {
                alt152=1;
            }
            else if ( (LA152_0==NOT) ) {
                alt152=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(152);}

            switch (alt152) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:760:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
                    {
                    dbg.location(760,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:760:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:761:21: ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
                    {
                    dbg.location(761,21);
                    if ( input.LA(1)==IDENT||input.LA(1)==GEN ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(762,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:762:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
                    int alt148=2;
                    try { dbg.enterSubRule(148);
                    try { dbg.enterDecision(148, decisionCanBacktrack[148]);

                    try {
                        isCyclicDecision = true;
                        alt148 = dfa148.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(148);}

                    switch (alt148) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:25: ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN
                            {
                            dbg.location(763,25);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:25: ( ws )?
                            int alt144=2;
                            try { dbg.enterSubRule(144);
                            try { dbg.enterDecision(144, decisionCanBacktrack[144]);

                            int LA144_0 = input.LA(1);

                            if ( (LA144_0==WS||(LA144_0>=NL && LA144_0<=COMMENT)) ) {
                                alt144=1;
                            }
                            } finally {dbg.exitDecision(144);}

                            switch (alt144) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:25: ws
                                    {
                                    dbg.location(763,25);
                                    pushFollow(FOLLOW_ws_in_pseudo3785);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(144);}

                            dbg.location(763,29);
                            match(input,LPAREN,FOLLOW_LPAREN_in_pseudo3788); if (state.failed) return ;
                            dbg.location(763,36);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:36: ( ws )?
                            int alt145=2;
                            try { dbg.enterSubRule(145);
                            try { dbg.enterDecision(145, decisionCanBacktrack[145]);

                            int LA145_0 = input.LA(1);

                            if ( (LA145_0==WS||(LA145_0>=NL && LA145_0<=COMMENT)) ) {
                                alt145=1;
                            }
                            } finally {dbg.exitDecision(145);}

                            switch (alt145) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:36: ws
                                    {
                                    dbg.location(763,36);
                                    pushFollow(FOLLOW_ws_in_pseudo3790);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(145);}

                            dbg.location(763,40);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:40: ( ( expression ( ws )? ) | STAR )?
                            int alt147=3;
                            try { dbg.enterSubRule(147);
                            try { dbg.enterDecision(147, decisionCanBacktrack[147]);

                            int LA147_0 = input.LA(1);

                            if ( ((LA147_0>=IDENT && LA147_0<=URI)||LA147_0==MEDIA_SYM||LA147_0==GEN||LA147_0==AT_IDENT||LA147_0==PERCENTAGE||(LA147_0>=MINUS && LA147_0<=PLUS)||(LA147_0>=HASH_SYMBOL && LA147_0<=HASH)||LA147_0==SASS_VAR||(LA147_0>=NUMBER && LA147_0<=DIMENSION)) ) {
                                alt147=1;
                            }
                            else if ( (LA147_0==STAR) ) {
                                alt147=2;
                            }
                            } finally {dbg.exitDecision(147);}

                            switch (alt147) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:42: ( expression ( ws )? )
                                    {
                                    dbg.location(763,42);
                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:42: ( expression ( ws )? )
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:43: expression ( ws )?
                                    {
                                    dbg.location(763,43);
                                    pushFollow(FOLLOW_expression_in_pseudo3796);
                                    expression();

                                    state._fsp--;
                                    if (state.failed) return ;
                                    dbg.location(763,54);
                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:54: ( ws )?
                                    int alt146=2;
                                    try { dbg.enterSubRule(146);
                                    try { dbg.enterDecision(146, decisionCanBacktrack[146]);

                                    int LA146_0 = input.LA(1);

                                    if ( (LA146_0==WS||(LA146_0>=NL && LA146_0<=COMMENT)) ) {
                                        alt146=1;
                                    }
                                    } finally {dbg.exitDecision(146);}

                                    switch (alt146) {
                                        case 1 :
                                            dbg.enterAlt(1);

                                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:54: ws
                                            {
                                            dbg.location(763,54);
                                            pushFollow(FOLLOW_ws_in_pseudo3798);
                                            ws();

                                            state._fsp--;
                                            if (state.failed) return ;

                                            }
                                            break;

                                    }
                                    } finally {dbg.exitSubRule(146);}


                                    }


                                    }
                                    break;
                                case 2 :
                                    dbg.enterAlt(2);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:61: STAR
                                    {
                                    dbg.location(763,61);
                                    match(input,STAR,FOLLOW_STAR_in_pseudo3804); if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(147);}

                            dbg.location(763,69);
                            match(input,RPAREN,FOLLOW_RPAREN_in_pseudo3809); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(148);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:17: ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN )
                    {
                    dbg.location(767,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:17: ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:19: NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN
                    {
                    dbg.location(767,19);
                    match(input,NOT,FOLLOW_NOT_in_pseudo3888); if (state.failed) return ;
                    dbg.location(767,23);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:23: ( ws )?
                    int alt149=2;
                    try { dbg.enterSubRule(149);
                    try { dbg.enterDecision(149, decisionCanBacktrack[149]);

                    int LA149_0 = input.LA(1);

                    if ( (LA149_0==WS||(LA149_0>=NL && LA149_0<=COMMENT)) ) {
                        alt149=1;
                    }
                    } finally {dbg.exitDecision(149);}

                    switch (alt149) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:23: ws
                            {
                            dbg.location(767,23);
                            pushFollow(FOLLOW_ws_in_pseudo3890);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(149);}

                    dbg.location(767,27);
                    match(input,LPAREN,FOLLOW_LPAREN_in_pseudo3893); if (state.failed) return ;
                    dbg.location(767,34);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:34: ( ws )?
                    int alt150=2;
                    try { dbg.enterSubRule(150);
                    try { dbg.enterDecision(150, decisionCanBacktrack[150]);

                    int LA150_0 = input.LA(1);

                    if ( (LA150_0==WS||(LA150_0>=NL && LA150_0<=COMMENT)) ) {
                        alt150=1;
                    }
                    } finally {dbg.exitDecision(150);}

                    switch (alt150) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:34: ws
                            {
                            dbg.location(767,34);
                            pushFollow(FOLLOW_ws_in_pseudo3895);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(150);}

                    dbg.location(767,38);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:38: ( simpleSelectorSequence )?
                    int alt151=2;
                    try { dbg.enterSubRule(151);
                    try { dbg.enterDecision(151, decisionCanBacktrack[151]);

                    int LA151_0 = input.LA(1);

                    if ( (LA151_0==IDENT||LA151_0==GEN||LA151_0==COLON||(LA151_0>=HASH_SYMBOL && LA151_0<=PIPE)||LA151_0==LESS_AND) ) {
                        alt151=1;
                    }
                    } finally {dbg.exitDecision(151);}

                    switch (alt151) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:767:38: simpleSelectorSequence
                            {
                            dbg.location(767,38);
                            pushFollow(FOLLOW_simpleSelectorSequence_in_pseudo3898);
                            simpleSelectorSequence();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(151);}

                    dbg.location(767,62);
                    match(input,RPAREN,FOLLOW_RPAREN_in_pseudo3901); if (state.failed) return ;

                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(152);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(769, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pseudo");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "pseudo"


    // $ANTLR start "propertyDeclaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:771:1: propertyDeclaration : ( ( STAR )? property COLON ( ws )? propertyValue ( ( ws )? prio )? | {...}? ( STAR )? property COLON ( ws )? cp_propertyValue );
    public final void propertyDeclaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "propertyDeclaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(771, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:772:5: ( ( STAR )? property COLON ( ws )? propertyValue ( ( ws )? prio )? | {...}? ( STAR )? property COLON ( ws )? cp_propertyValue )
            int alt159=2;
            try { dbg.enterDecision(159, decisionCanBacktrack[159]);

            try {
                isCyclicDecision = true;
                alt159 = dfa159.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(159);}

            switch (alt159) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:5: ( STAR )? property COLON ( ws )? propertyValue ( ( ws )? prio )?
                    {
                    dbg.location(773,5);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:5: ( STAR )?
                    int alt153=2;
                    try { dbg.enterSubRule(153);
                    try { dbg.enterDecision(153, decisionCanBacktrack[153]);

                    int LA153_0 = input.LA(1);

                    if ( (LA153_0==STAR) ) {
                        alt153=1;
                    }
                    } finally {dbg.exitDecision(153);}

                    switch (alt153) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:5: STAR
                            {
                            dbg.location(773,5);
                            match(input,STAR,FOLLOW_STAR_in_propertyDeclaration3940); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(153);}

                    dbg.location(773,11);
                    pushFollow(FOLLOW_property_in_propertyDeclaration3943);
                    property();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(773,20);
                    match(input,COLON,FOLLOW_COLON_in_propertyDeclaration3945); if (state.failed) return ;
                    dbg.location(773,26);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:26: ( ws )?
                    int alt154=2;
                    try { dbg.enterSubRule(154);
                    try { dbg.enterDecision(154, decisionCanBacktrack[154]);

                    int LA154_0 = input.LA(1);

                    if ( (LA154_0==WS||(LA154_0>=NL && LA154_0<=COMMENT)) ) {
                        alt154=1;
                    }
                    } finally {dbg.exitDecision(154);}

                    switch (alt154) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:26: ws
                            {
                            dbg.location(773,26);
                            pushFollow(FOLLOW_ws_in_propertyDeclaration3947);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(154);}

                    dbg.location(773,30);
                    pushFollow(FOLLOW_propertyValue_in_propertyDeclaration3950);
                    propertyValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(773,44);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:44: ( ( ws )? prio )?
                    int alt156=2;
                    try { dbg.enterSubRule(156);
                    try { dbg.enterDecision(156, decisionCanBacktrack[156]);

                    try {
                        isCyclicDecision = true;
                        alt156 = dfa156.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(156);}

                    switch (alt156) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:45: ( ws )? prio
                            {
                            dbg.location(773,45);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:45: ( ws )?
                            int alt155=2;
                            try { dbg.enterSubRule(155);
                            try { dbg.enterDecision(155, decisionCanBacktrack[155]);

                            int LA155_0 = input.LA(1);

                            if ( (LA155_0==WS||(LA155_0>=NL && LA155_0<=COMMENT)) ) {
                                alt155=1;
                            }
                            } finally {dbg.exitDecision(155);}

                            switch (alt155) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:773:45: ws
                                    {
                                    dbg.location(773,45);
                                    pushFollow(FOLLOW_ws_in_propertyDeclaration3953);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(155);}

                            dbg.location(773,49);
                            pushFollow(FOLLOW_prio_in_propertyDeclaration3956);
                            prio();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(156);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:774:7: {...}? ( STAR )? property COLON ( ws )? cp_propertyValue
                    {
                    dbg.location(774,7);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "propertyDeclaration", "isCssPreprocessorSource()");
                    }
                    dbg.location(774,36);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:774:36: ( STAR )?
                    int alt157=2;
                    try { dbg.enterSubRule(157);
                    try { dbg.enterDecision(157, decisionCanBacktrack[157]);

                    int LA157_0 = input.LA(1);

                    if ( (LA157_0==STAR) ) {
                        alt157=1;
                    }
                    } finally {dbg.exitDecision(157);}

                    switch (alt157) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:774:36: STAR
                            {
                            dbg.location(774,36);
                            match(input,STAR,FOLLOW_STAR_in_propertyDeclaration3968); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(157);}

                    dbg.location(774,42);
                    pushFollow(FOLLOW_property_in_propertyDeclaration3971);
                    property();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(774,51);
                    match(input,COLON,FOLLOW_COLON_in_propertyDeclaration3973); if (state.failed) return ;
                    dbg.location(774,57);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:774:57: ( ws )?
                    int alt158=2;
                    try { dbg.enterSubRule(158);
                    try { dbg.enterDecision(158, decisionCanBacktrack[158]);

                    int LA158_0 = input.LA(1);

                    if ( (LA158_0==WS||(LA158_0>=NL && LA158_0<=COMMENT)) ) {
                        alt158=1;
                    }
                    } finally {dbg.exitDecision(158);}

                    switch (alt158) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:774:57: ws
                            {
                            dbg.location(774,57);
                            pushFollow(FOLLOW_ws_in_propertyDeclaration3975);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(158);}

                    dbg.location(774,61);
                    pushFollow(FOLLOW_cp_propertyValue_in_propertyDeclaration3978);
                    cp_propertyValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    //recovery: if an mismatched token occures inside a declaration is found,
                    //then skip all tokens until an end of the rule is found represented by right curly brace
                    consumeUntil(input, BitSet.of(SEMI, RBRACE)); 
                
        }
        finally {
        }
        dbg.location(775, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "propertyDeclaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "propertyDeclaration"


    // $ANTLR start "cp_propertyValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:784:1: cp_propertyValue : ({...}? cp_expression_list | propertyValue );
    public final void cp_propertyValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_propertyValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(784, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:785:5: ({...}? cp_expression_list | propertyValue )
            int alt160=2;
            try { dbg.enterDecision(160, decisionCanBacktrack[160]);

            try {
                isCyclicDecision = true;
                alt160 = dfa160.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(160);}

            switch (alt160) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:786:5: {...}? cp_expression_list
                    {
                    dbg.location(786,5);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_propertyValue", "isCssPreprocessorSource()");
                    }
                    dbg.location(786,34);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_propertyValue4013);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:787:7: propertyValue
                    {
                    dbg.location(787,7);
                    pushFollow(FOLLOW_propertyValue_in_cp_propertyValue4021);
                    propertyValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(788, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_propertyValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_propertyValue"


    // $ANTLR start "propertyValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:790:1: propertyValue : expression ;
    public final void propertyValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "propertyValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(790, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:791:2: ( expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:9: expression
            {
            dbg.location(792,9);
            pushFollow(FOLLOW_expression_in_propertyValue4043);
            expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(793, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "propertyValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "propertyValue"


    // $ANTLR start "expressionPredicate"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:796:1: expressionPredicate options {k=1; } : (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) ;
    public final void expressionPredicate() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "expressionPredicate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(796, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:798:5: ( (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:799:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE )
            {
            dbg.location(799,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:799:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+
            int cnt161=0;
            try { dbg.enterSubRule(161);

            loop161:
            do {
                int alt161=2;
                try { dbg.enterDecision(161, decisionCanBacktrack[161]);

                int LA161_0 = input.LA(1);

                if ( (LA161_0==NAMESPACE_SYM||(LA161_0>=IDENT && LA161_0<=MEDIA_SYM)||(LA161_0>=AND && LA161_0<=RPAREN)||(LA161_0>=WS && LA161_0<=RIGHTBOTTOM_SYM)||(LA161_0>=MINUS && LA161_0<=SASS_EXTEND_ONLY_SELECTOR)||(LA161_0>=PIPE && LA161_0<=RBRACKET)||(LA161_0>=IMPORTANT_SYM && LA161_0<=LINE_COMMENT)) ) {
                    alt161=1;
                }


                } finally {dbg.exitDecision(161);}

                switch (alt161) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:799:7: ~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR )
            	    {
            	    dbg.location(799,7);
            	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=RPAREN)||(input.LA(1)>=WS && input.LA(1)<=RIGHTBOTTOM_SYM)||(input.LA(1)>=MINUS && input.LA(1)<=SASS_EXTEND_ONLY_SELECTOR)||(input.LA(1)>=PIPE && input.LA(1)<=RBRACKET)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=LINE_COMMENT) ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt161 >= 1 ) break loop161;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(161, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt161++;
            } while (true);
            } finally {dbg.exitSubRule(161);}

            dbg.location(799,76);
            if ( input.LA(1)==SEMI||input.LA(1)==RBRACE ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(800, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "expressionPredicate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "expressionPredicate"


    // $ANTLR start "syncToDeclarationsRule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:804:1: syncToDeclarationsRule : ;
    public final void syncToDeclarationsRule() throws RecognitionException {

                //why sync to DOT? - LESS allows class rules nested
                syncToSet(BitSet.of(IDENT, RBRACE, STAR, DOT)); 
            
        try { dbg.enterRule(getGrammarFileName(), "syncToDeclarationsRule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(804, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:809:6: ()
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:810:6: 
            {
            }

        }
        finally {
        }
        dbg.location(810, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncToDeclarationsRule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncToDeclarationsRule"


    // $ANTLR start "syncTo_RBRACE"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:812:1: syncTo_RBRACE : ;
    public final void syncTo_RBRACE() throws RecognitionException {

                syncToRBRACE(1); //initial nest == 1
            
        try { dbg.enterRule(getGrammarFileName(), "syncTo_RBRACE");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(812, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:816:6: ()
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:6: 
            {
            }

        }
        finally {
        }
        dbg.location(817, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncTo_RBRACE");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncTo_RBRACE"


    // $ANTLR start "syncTo_SEMI"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:819:1: syncTo_SEMI : SEMI ;
    public final void syncTo_SEMI() throws RecognitionException {

                syncToSet(BitSet.of(SEMI)); 
            
        try { dbg.enterRule(getGrammarFileName(), "syncTo_SEMI");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(819, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:823:6: ( SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:824:13: SEMI
            {
            dbg.location(824,13);
            match(input,SEMI,FOLLOW_SEMI_in_syncTo_SEMI4230); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(825, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncTo_SEMI");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncTo_SEMI"


    // $ANTLR start "syncToFollow"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:828:1: syncToFollow : ;
    public final void syncToFollow() throws RecognitionException {

                syncToSet();
            
        try { dbg.enterRule(getGrammarFileName(), "syncToFollow");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(828, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:832:6: ()
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:833:6: 
            {
            }

        }
        finally {
        }
        dbg.location(833, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncToFollow");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncToFollow"


    // $ANTLR start "prio"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:835:1: prio : IMPORTANT_SYM ;
    public final void prio() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "prio");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(835, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:836:5: ( IMPORTANT_SYM )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:836:7: IMPORTANT_SYM
            {
            dbg.location(836,7);
            match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_prio4285); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(837, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prio");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "prio"


    // $ANTLR start "expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:839:1: expression : term ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )* ;
    public final void expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(839, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:5: ( term ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:7: term ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )*
            {
            dbg.location(840,7);
            pushFollow(FOLLOW_term_in_expression4306);
            term();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(840,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:12: ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )*
            try { dbg.enterSubRule(165);

            loop165:
            do {
                int alt165=2;
                try { dbg.enterDecision(165, decisionCanBacktrack[165]);

                try {
                    isCyclicDecision = true;
                    alt165 = dfa165.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(165);}

                switch (alt165) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:14: ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term
            	    {
            	    dbg.location(840,66);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:66: ( ws | ( ( ws )? operator ( ws )? ) | )
            	    int alt164=3;
            	    try { dbg.enterSubRule(164);
            	    try { dbg.enterDecision(164, decisionCanBacktrack[164]);

            	    try {
            	        isCyclicDecision = true;
            	        alt164 = dfa164.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(164);}

            	    switch (alt164) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:68: ws
            	            {
            	            dbg.location(840,68);
            	            pushFollow(FOLLOW_ws_in_expression4338);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:73: ( ( ws )? operator ( ws )? )
            	            {
            	            dbg.location(840,73);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:73: ( ( ws )? operator ( ws )? )
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:74: ( ws )? operator ( ws )?
            	            {
            	            dbg.location(840,74);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:74: ( ws )?
            	            int alt162=2;
            	            try { dbg.enterSubRule(162);
            	            try { dbg.enterDecision(162, decisionCanBacktrack[162]);

            	            int LA162_0 = input.LA(1);

            	            if ( (LA162_0==WS||(LA162_0>=NL && LA162_0<=COMMENT)) ) {
            	                alt162=1;
            	            }
            	            } finally {dbg.exitDecision(162);}

            	            switch (alt162) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:74: ws
            	                    {
            	                    dbg.location(840,74);
            	                    pushFollow(FOLLOW_ws_in_expression4343);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(162);}

            	            dbg.location(840,78);
            	            pushFollow(FOLLOW_operator_in_expression4346);
            	            operator();

            	            state._fsp--;
            	            if (state.failed) return ;
            	            dbg.location(840,87);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:87: ( ws )?
            	            int alt163=2;
            	            try { dbg.enterSubRule(163);
            	            try { dbg.enterDecision(163, decisionCanBacktrack[163]);

            	            int LA163_0 = input.LA(1);

            	            if ( (LA163_0==WS||(LA163_0>=NL && LA163_0<=COMMENT)) ) {
            	                alt163=1;
            	            }
            	            } finally {dbg.exitDecision(163);}

            	            switch (alt163) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:87: ws
            	                    {
            	                    dbg.location(840,87);
            	                    pushFollow(FOLLOW_ws_in_expression4348);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(163);}


            	            }


            	            }
            	            break;
            	        case 3 :
            	            dbg.enterAlt(3);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:107: 
            	            {
            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(164);}

            	    dbg.location(840,109);
            	    pushFollow(FOLLOW_term_in_expression4357);
            	    term();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop165;
                }
            } while (true);
            } finally {dbg.exitSubRule(165);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(842, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "expression"


    // $ANTLR start "term"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:844:1: term : ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var ) ;
    public final void term() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "term");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(844, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:845:5: ( ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:846:5: ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var )
            {
            dbg.location(846,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:846:5: ( unaryOperator ( ws )? )?
            int alt167=2;
            try { dbg.enterSubRule(167);
            try { dbg.enterDecision(167, decisionCanBacktrack[167]);

            int LA167_0 = input.LA(1);

            if ( ((LA167_0>=MINUS && LA167_0<=PLUS)) ) {
                alt167=1;
            }
            } finally {dbg.exitDecision(167);}

            switch (alt167) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:846:7: unaryOperator ( ws )?
                    {
                    dbg.location(846,7);
                    pushFollow(FOLLOW_unaryOperator_in_term4388);
                    unaryOperator();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(846,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:846:21: ( ws )?
                    int alt166=2;
                    try { dbg.enterSubRule(166);
                    try { dbg.enterDecision(166, decisionCanBacktrack[166]);

                    int LA166_0 = input.LA(1);

                    if ( (LA166_0==WS||(LA166_0>=NL && LA166_0<=COMMENT)) ) {
                        alt166=1;
                    }
                    } finally {dbg.exitDecision(166);}

                    switch (alt166) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:846:21: ws
                            {
                            dbg.location(846,21);
                            pushFollow(FOLLOW_ws_in_term4390);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(166);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(167);}

            dbg.location(847,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:847:5: ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var )
            int alt168=19;
            try { dbg.enterSubRule(168);
            try { dbg.enterDecision(168, decisionCanBacktrack[168]);

            try {
                isCyclicDecision = true;
                alt168 = dfa168.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(168);}

            switch (alt168) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:848:9: ( functionName ( ws )? LPAREN )=> function
                    {
                    dbg.location(848,36);
                    pushFollow(FOLLOW_function_in_term4419);
                    function();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:849:11: IDENT
                    {
                    dbg.location(849,11);
                    match(input,IDENT,FOLLOW_IDENT_in_term4432); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:850:11: NUMBER
                    {
                    dbg.location(850,11);
                    match(input,NUMBER,FOLLOW_NUMBER_in_term4444); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:851:11: PERCENTAGE
                    {
                    dbg.location(851,11);
                    match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_term4456); if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:852:11: LENGTH
                    {
                    dbg.location(852,11);
                    match(input,LENGTH,FOLLOW_LENGTH_in_term4468); if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:853:11: EMS
                    {
                    dbg.location(853,11);
                    match(input,EMS,FOLLOW_EMS_in_term4480); if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:854:11: REM
                    {
                    dbg.location(854,11);
                    match(input,REM,FOLLOW_REM_in_term4492); if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:855:11: EXS
                    {
                    dbg.location(855,11);
                    match(input,EXS,FOLLOW_EXS_in_term4504); if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:856:11: ANGLE
                    {
                    dbg.location(856,11);
                    match(input,ANGLE,FOLLOW_ANGLE_in_term4516); if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:857:11: TIME
                    {
                    dbg.location(857,11);
                    match(input,TIME,FOLLOW_TIME_in_term4528); if (state.failed) return ;

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:858:11: FREQ
                    {
                    dbg.location(858,11);
                    match(input,FREQ,FOLLOW_FREQ_in_term4540); if (state.failed) return ;

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:11: RESOLUTION
                    {
                    dbg.location(859,11);
                    match(input,RESOLUTION,FOLLOW_RESOLUTION_in_term4552); if (state.failed) return ;

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:860:11: DIMENSION
                    {
                    dbg.location(860,11);
                    match(input,DIMENSION,FOLLOW_DIMENSION_in_term4564); if (state.failed) return ;

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:11: STRING
                    {
                    dbg.location(861,11);
                    match(input,STRING,FOLLOW_STRING_in_term4581); if (state.failed) return ;

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:862:11: GEN
                    {
                    dbg.location(862,11);
                    match(input,GEN,FOLLOW_GEN_in_term4593); if (state.failed) return ;

                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:863:11: URI
                    {
                    dbg.location(863,11);
                    match(input,URI,FOLLOW_URI_in_term4605); if (state.failed) return ;

                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:864:11: hexColor
                    {
                    dbg.location(864,11);
                    pushFollow(FOLLOW_hexColor_in_term4617);
                    hexColor();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 18 :
                    dbg.enterAlt(18);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:11: {...}? cp_variable
                    {
                    dbg.location(865,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
                    }
                    dbg.location(865,40);
                    pushFollow(FOLLOW_cp_variable_in_term4631);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 19 :
                    dbg.enterAlt(19);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:866:11: {...}? sass_interpolation_expression_var
                    {
                    dbg.location(866,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
                    }
                    dbg.location(866,40);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_term4645);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(168);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(868, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "term");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "term"


    // $ANTLR start "function"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:870:1: function : functionName ( ws )? LPAREN ( ws )? ( fnAttributes | {...}?) RPAREN ;
    public final void function() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "function");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(870, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:871:2: ( functionName ( ws )? LPAREN ( ws )? ( fnAttributes | {...}?) RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:871:5: functionName ( ws )? LPAREN ( ws )? ( fnAttributes | {...}?) RPAREN
            {
            dbg.location(871,5);
            pushFollow(FOLLOW_functionName_in_function4666);
            functionName();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(871,18);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:871:18: ( ws )?
            int alt169=2;
            try { dbg.enterSubRule(169);
            try { dbg.enterDecision(169, decisionCanBacktrack[169]);

            int LA169_0 = input.LA(1);

            if ( (LA169_0==WS||(LA169_0>=NL && LA169_0<=COMMENT)) ) {
                alt169=1;
            }
            } finally {dbg.exitDecision(169);}

            switch (alt169) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:871:18: ws
                    {
                    dbg.location(871,18);
                    pushFollow(FOLLOW_ws_in_function4668);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(169);}

            dbg.location(872,3);
            match(input,LPAREN,FOLLOW_LPAREN_in_function4673); if (state.failed) return ;
            dbg.location(872,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:872:10: ( ws )?
            int alt170=2;
            try { dbg.enterSubRule(170);
            try { dbg.enterDecision(170, decisionCanBacktrack[170]);

            int LA170_0 = input.LA(1);

            if ( (LA170_0==WS||(LA170_0>=NL && LA170_0<=COMMENT)) ) {
                alt170=1;
            }
            } finally {dbg.exitDecision(170);}

            switch (alt170) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:872:10: ws
                    {
                    dbg.location(872,10);
                    pushFollow(FOLLOW_ws_in_function4675);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(170);}

            dbg.location(873,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:873:3: ( fnAttributes | {...}?)
            int alt171=2;
            try { dbg.enterSubRule(171);
            try { dbg.enterDecision(171, decisionCanBacktrack[171]);

            int LA171_0 = input.LA(1);

            if ( ((LA171_0>=IDENT && LA171_0<=URI)||LA171_0==MEDIA_SYM||(LA171_0>=NOT && LA171_0<=LPAREN)||LA171_0==AT_IDENT||LA171_0==PERCENTAGE||(LA171_0>=MINUS && LA171_0<=PLUS)||(LA171_0>=HASH_SYMBOL && LA171_0<=HASH)||(LA171_0>=SASS_VAR && LA171_0<=DIMENSION)) ) {
                alt171=1;
            }
            else if ( (LA171_0==RPAREN) ) {
                alt171=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 171, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(171);}

            switch (alt171) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:879:21: fnAttributes
                    {
                    dbg.location(879,21);
                    pushFollow(FOLLOW_fnAttributes_in_function4707);
                    fnAttributes();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:880:23: {...}?
                    {
                    dbg.location(880,23);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "function", "isCssPreprocessorSource()");
                    }

                    }
                    break;

            }
            } finally {dbg.exitSubRule(171);}

            dbg.location(882,3);
            match(input,RPAREN,FOLLOW_RPAREN_in_function4740); if (state.failed) return ;

            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(RPAREN, SEMI, RBRACE)); 

        }
        finally {
        }
        dbg.location(883, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "function");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "function"


    // $ANTLR start "functionName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:889:1: functionName : ( IDENT COLON )? IDENT ( DOT IDENT )* ;
    public final void functionName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "functionName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(889, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:893:2: ( ( IDENT COLON )? IDENT ( DOT IDENT )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:894:9: ( IDENT COLON )? IDENT ( DOT IDENT )*
            {
            dbg.location(894,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:894:9: ( IDENT COLON )?
            int alt172=2;
            try { dbg.enterSubRule(172);
            try { dbg.enterDecision(172, decisionCanBacktrack[172]);

            int LA172_0 = input.LA(1);

            if ( (LA172_0==IDENT) ) {
                int LA172_1 = input.LA(2);

                if ( (LA172_1==COLON) ) {
                    alt172=1;
                }
            }
            } finally {dbg.exitDecision(172);}

            switch (alt172) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:894:10: IDENT COLON
                    {
                    dbg.location(894,10);
                    match(input,IDENT,FOLLOW_IDENT_in_functionName4797); if (state.failed) return ;
                    dbg.location(894,16);
                    match(input,COLON,FOLLOW_COLON_in_functionName4799); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(172);}

            dbg.location(894,24);
            match(input,IDENT,FOLLOW_IDENT_in_functionName4803); if (state.failed) return ;
            dbg.location(894,30);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:894:30: ( DOT IDENT )*
            try { dbg.enterSubRule(173);

            loop173:
            do {
                int alt173=2;
                try { dbg.enterDecision(173, decisionCanBacktrack[173]);

                int LA173_0 = input.LA(1);

                if ( (LA173_0==DOT) ) {
                    alt173=1;
                }


                } finally {dbg.exitDecision(173);}

                switch (alt173) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:894:31: DOT IDENT
            	    {
            	    dbg.location(894,31);
            	    match(input,DOT,FOLLOW_DOT_in_functionName4806); if (state.failed) return ;
            	    dbg.location(894,35);
            	    match(input,IDENT,FOLLOW_IDENT_in_functionName4808); if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop173;
                }
            } while (true);
            } finally {dbg.exitSubRule(173);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(896, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "functionName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "functionName"


    // $ANTLR start "fnAttributes"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:1: fnAttributes : fnAttribute ( ( ws )? COMMA ( ws )? fnAttribute )* ( ws )? ;
    public final void fnAttributes() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttributes");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(898, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:899:5: ( fnAttribute ( ( ws )? COMMA ( ws )? fnAttribute )* ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:900:5: fnAttribute ( ( ws )? COMMA ( ws )? fnAttribute )* ( ws )?
            {
            dbg.location(900,5);
            pushFollow(FOLLOW_fnAttribute_in_fnAttributes4833);
            fnAttribute();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(900,17);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:900:17: ( ( ws )? COMMA ( ws )? fnAttribute )*
            try { dbg.enterSubRule(176);

            loop176:
            do {
                int alt176=2;
                try { dbg.enterDecision(176, decisionCanBacktrack[176]);

                try {
                    isCyclicDecision = true;
                    alt176 = dfa176.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(176);}

                switch (alt176) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:900:18: ( ws )? COMMA ( ws )? fnAttribute
            	    {
            	    dbg.location(900,18);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:900:18: ( ws )?
            	    int alt174=2;
            	    try { dbg.enterSubRule(174);
            	    try { dbg.enterDecision(174, decisionCanBacktrack[174]);

            	    int LA174_0 = input.LA(1);

            	    if ( (LA174_0==WS||(LA174_0>=NL && LA174_0<=COMMENT)) ) {
            	        alt174=1;
            	    }
            	    } finally {dbg.exitDecision(174);}

            	    switch (alt174) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:900:18: ws
            	            {
            	            dbg.location(900,18);
            	            pushFollow(FOLLOW_ws_in_fnAttributes4836);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(174);}

            	    dbg.location(900,22);
            	    match(input,COMMA,FOLLOW_COMMA_in_fnAttributes4839); if (state.failed) return ;
            	    dbg.location(900,28);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:900:28: ( ws )?
            	    int alt175=2;
            	    try { dbg.enterSubRule(175);
            	    try { dbg.enterDecision(175, decisionCanBacktrack[175]);

            	    int LA175_0 = input.LA(1);

            	    if ( (LA175_0==WS||(LA175_0>=NL && LA175_0<=COMMENT)) ) {
            	        alt175=1;
            	    }
            	    } finally {dbg.exitDecision(175);}

            	    switch (alt175) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:900:28: ws
            	            {
            	            dbg.location(900,28);
            	            pushFollow(FOLLOW_ws_in_fnAttributes4841);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(175);}

            	    dbg.location(900,32);
            	    pushFollow(FOLLOW_fnAttribute_in_fnAttributes4844);
            	    fnAttribute();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop176;
                }
            } while (true);
            } finally {dbg.exitSubRule(176);}

            dbg.location(900,46);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:900:46: ( ws )?
            int alt177=2;
            try { dbg.enterSubRule(177);
            try { dbg.enterDecision(177, decisionCanBacktrack[177]);

            int LA177_0 = input.LA(1);

            if ( (LA177_0==WS||(LA177_0>=NL && LA177_0<=COMMENT)) ) {
                alt177=1;
            }
            } finally {dbg.exitDecision(177);}

            switch (alt177) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:900:46: ws
                    {
                    dbg.location(900,46);
                    pushFollow(FOLLOW_ws_in_fnAttributes4848);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(177);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(901, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttributes");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttributes"


    // $ANTLR start "fnAttribute"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:903:1: fnAttribute : ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | {...}? cp_expression | expression );
    public final void fnAttribute() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttribute");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(903, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:904:2: ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | {...}? cp_expression | expression )
            int alt180=3;
            try { dbg.enterDecision(180, decisionCanBacktrack[180]);

            try {
                isCyclicDecision = true;
                alt180 = dfa180.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(180);}

            switch (alt180) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:9: ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue
                    {
                    dbg.location(905,46);
                    pushFollow(FOLLOW_fnAttributeName_in_fnAttribute4886);
                    fnAttributeName();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(905,62);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:62: ( ws )?
                    int alt178=2;
                    try { dbg.enterSubRule(178);
                    try { dbg.enterDecision(178, decisionCanBacktrack[178]);

                    int LA178_0 = input.LA(1);

                    if ( (LA178_0==WS||(LA178_0>=NL && LA178_0<=COMMENT)) ) {
                        alt178=1;
                    }
                    } finally {dbg.exitDecision(178);}

                    switch (alt178) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:62: ws
                            {
                            dbg.location(905,62);
                            pushFollow(FOLLOW_ws_in_fnAttribute4888);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(178);}

                    dbg.location(905,66);
                    if ( input.LA(1)==COLON||input.LA(1)==OPEQ ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(905,79);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:79: ( ws )?
                    int alt179=2;
                    try { dbg.enterSubRule(179);
                    try { dbg.enterDecision(179, decisionCanBacktrack[179]);

                    int LA179_0 = input.LA(1);

                    if ( (LA179_0==WS||(LA179_0>=NL && LA179_0<=COMMENT)) ) {
                        alt179=1;
                    }
                    } finally {dbg.exitDecision(179);}

                    switch (alt179) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:79: ws
                            {
                            dbg.location(905,79);
                            pushFollow(FOLLOW_ws_in_fnAttribute4897);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(179);}

                    dbg.location(905,83);
                    pushFollow(FOLLOW_fnAttributeValue_in_fnAttribute4900);
                    fnAttributeValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:906:11: {...}? cp_expression
                    {
                    dbg.location(906,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "fnAttribute", "isCssPreprocessorSource()");
                    }
                    dbg.location(906,40);
                    pushFollow(FOLLOW_cp_expression_in_fnAttribute4914);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:907:11: expression
                    {
                    dbg.location(907,11);
                    pushFollow(FOLLOW_expression_in_fnAttribute4926);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(908, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttribute");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttribute"


    // $ANTLR start "fnAttributeName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:910:1: fnAttributeName : ( IDENT ( DOT IDENT )* | {...}? cp_variable );
    public final void fnAttributeName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttributeName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(910, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:911:2: ( IDENT ( DOT IDENT )* | {...}? cp_variable )
            int alt182=2;
            try { dbg.enterDecision(182, decisionCanBacktrack[182]);

            int LA182_0 = input.LA(1);

            if ( (LA182_0==IDENT) ) {
                alt182=1;
            }
            else if ( (LA182_0==MEDIA_SYM||LA182_0==AT_IDENT||LA182_0==SASS_VAR) ) {
                alt182=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 182, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(182);}

            switch (alt182) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:912:13: IDENT ( DOT IDENT )*
                    {
                    dbg.location(912,13);
                    match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName4954); if (state.failed) return ;
                    dbg.location(912,19);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:912:19: ( DOT IDENT )*
                    try { dbg.enterSubRule(181);

                    loop181:
                    do {
                        int alt181=2;
                        try { dbg.enterDecision(181, decisionCanBacktrack[181]);

                        int LA181_0 = input.LA(1);

                        if ( (LA181_0==DOT) ) {
                            alt181=1;
                        }


                        } finally {dbg.exitDecision(181);}

                        switch (alt181) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:912:20: DOT IDENT
                    	    {
                    	    dbg.location(912,20);
                    	    match(input,DOT,FOLLOW_DOT_in_fnAttributeName4957); if (state.failed) return ;
                    	    dbg.location(912,24);
                    	    match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName4959); if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop181;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(181);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:913:15: {...}? cp_variable
                    {
                    dbg.location(913,15);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "fnAttributeName", "isCssPreprocessorSource()");
                    }
                    dbg.location(913,44);
                    pushFollow(FOLLOW_cp_variable_in_fnAttributeName4979);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(914, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttributeName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttributeName"


    // $ANTLR start "fnAttributeValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:916:1: fnAttributeValue : ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )* | {...}? cp_math_expression );
    public final void fnAttributeValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttributeValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(916, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:917:2: ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )* | {...}? cp_math_expression )
            int alt187=2;
            try { dbg.enterDecision(187, decisionCanBacktrack[187]);

            try {
                isCyclicDecision = true;
                alt187 = dfa187.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(187);}

            switch (alt187) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:13: term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )*
                    {
                    dbg.location(918,13);
                    pushFollow(FOLLOW_term_in_fnAttributeValue5004);
                    term();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(918,18);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:18: ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )*
                    try { dbg.enterSubRule(186);

                    loop186:
                    do {
                        int alt186=2;
                        try { dbg.enterDecision(186, decisionCanBacktrack[186]);

                        try {
                            isCyclicDecision = true;
                            alt186 = dfa186.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(186);}

                        switch (alt186) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:20: ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term
                    	    {
                    	    dbg.location(918,71);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:71: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )
                    	    int alt185=3;
                    	    try { dbg.enterSubRule(185);
                    	    try { dbg.enterDecision(185, decisionCanBacktrack[185]);

                    	    try {
                    	        isCyclicDecision = true;
                    	        alt185 = dfa185.predict(input);
                    	    }
                    	    catch (NoViableAltException nvae) {
                    	        dbg.recognitionException(nvae);
                    	        throw nvae;
                    	    }
                    	    } finally {dbg.exitDecision(185);}

                    	    switch (alt185) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:73: ws
                    	            {
                    	            dbg.location(918,73);
                    	            pushFollow(FOLLOW_ws_in_fnAttributeValue5036);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;
                    	        case 2 :
                    	            dbg.enterAlt(2);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:78: ( ( ws )? SOLIDUS ( ws )? )
                    	            {
                    	            dbg.location(918,78);
                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:78: ( ( ws )? SOLIDUS ( ws )? )
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:79: ( ws )? SOLIDUS ( ws )?
                    	            {
                    	            dbg.location(918,79);
                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:79: ( ws )?
                    	            int alt183=2;
                    	            try { dbg.enterSubRule(183);
                    	            try { dbg.enterDecision(183, decisionCanBacktrack[183]);

                    	            int LA183_0 = input.LA(1);

                    	            if ( (LA183_0==WS||(LA183_0>=NL && LA183_0<=COMMENT)) ) {
                    	                alt183=1;
                    	            }
                    	            } finally {dbg.exitDecision(183);}

                    	            switch (alt183) {
                    	                case 1 :
                    	                    dbg.enterAlt(1);

                    	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:79: ws
                    	                    {
                    	                    dbg.location(918,79);
                    	                    pushFollow(FOLLOW_ws_in_fnAttributeValue5041);
                    	                    ws();

                    	                    state._fsp--;
                    	                    if (state.failed) return ;

                    	                    }
                    	                    break;

                    	            }
                    	            } finally {dbg.exitSubRule(183);}

                    	            dbg.location(918,83);
                    	            match(input,SOLIDUS,FOLLOW_SOLIDUS_in_fnAttributeValue5044); if (state.failed) return ;
                    	            dbg.location(918,91);
                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:91: ( ws )?
                    	            int alt184=2;
                    	            try { dbg.enterSubRule(184);
                    	            try { dbg.enterDecision(184, decisionCanBacktrack[184]);

                    	            int LA184_0 = input.LA(1);

                    	            if ( (LA184_0==WS||(LA184_0>=NL && LA184_0<=COMMENT)) ) {
                    	                alt184=1;
                    	            }
                    	            } finally {dbg.exitDecision(184);}

                    	            switch (alt184) {
                    	                case 1 :
                    	                    dbg.enterAlt(1);

                    	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:91: ws
                    	                    {
                    	                    dbg.location(918,91);
                    	                    pushFollow(FOLLOW_ws_in_fnAttributeValue5046);
                    	                    ws();

                    	                    state._fsp--;
                    	                    if (state.failed) return ;

                    	                    }
                    	                    break;

                    	            }
                    	            } finally {dbg.exitSubRule(184);}


                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            dbg.enterAlt(3);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:111: 
                    	            {
                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(185);}

                    	    dbg.location(918,113);
                    	    pushFollow(FOLLOW_term_in_fnAttributeValue5055);
                    	    term();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop186;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(186);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:919:15: {...}? cp_math_expression
                    {
                    dbg.location(919,15);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "fnAttributeValue", "isCssPreprocessorSource()");
                    }
                    dbg.location(919,44);
                    pushFollow(FOLLOW_cp_math_expression_in_fnAttributeValue5076);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(920, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttributeValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttributeValue"


    // $ANTLR start "hexColor"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:922:1: hexColor : HASH ;
    public final void hexColor() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "hexColor");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(922, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:923:5: ( HASH )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:923:7: HASH
            {
            dbg.location(923,7);
            match(input,HASH,FOLLOW_HASH_in_hexColor5094); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(924, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hexColor");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "hexColor"


    // $ANTLR start "ws"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:926:1: ws : ( WS | NL | COMMENT )+ ;
    public final void ws() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "ws");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(926, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:927:5: ( ( WS | NL | COMMENT )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:927:7: ( WS | NL | COMMENT )+
            {
            dbg.location(927,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:927:7: ( WS | NL | COMMENT )+
            int cnt188=0;
            try { dbg.enterSubRule(188);

            loop188:
            do {
                int alt188=2;
                try { dbg.enterDecision(188, decisionCanBacktrack[188]);

                int LA188_0 = input.LA(1);

                if ( (LA188_0==WS||(LA188_0>=NL && LA188_0<=COMMENT)) ) {
                    alt188=1;
                }


                } finally {dbg.exitDecision(188);}

                switch (alt188) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            	    {
            	    dbg.location(927,7);
            	    if ( input.LA(1)==WS||(input.LA(1)>=NL && input.LA(1)<=COMMENT) ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt188 >= 1 ) break loop188;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(188, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt188++;
            } while (true);
            } finally {dbg.exitSubRule(188);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(928, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ws");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "ws"


    // $ANTLR start "cp_variable_declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:933:1: cp_variable_declaration : ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list | {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ws )? SASS_DEFAULT )? );
    public final void cp_variable_declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_variable_declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(933, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:5: ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list | {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ws )? SASS_DEFAULT )? )
            int alt195=2;
            try { dbg.enterDecision(195, decisionCanBacktrack[195]);

            int LA195_0 = input.LA(1);

            if ( (LA195_0==MEDIA_SYM||LA195_0==AT_IDENT) ) {
                int LA195_1 = input.LA(2);

                if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
                    alt195=1;
                }
                else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
                    alt195=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 195, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA195_0==SASS_VAR) ) {
                int LA195_2 = input.LA(2);

                if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
                    alt195=1;
                }
                else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
                    alt195=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 195, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(195);}

            switch (alt195) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:935:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list
                    {
                    dbg.location(935,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable_declaration", "isLessSource()");
                    }
                    dbg.location(935,27);
                    pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration5163);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(935,39);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:935:39: ( ws )?
                    int alt189=2;
                    try { dbg.enterSubRule(189);
                    try { dbg.enterDecision(189, decisionCanBacktrack[189]);

                    int LA189_0 = input.LA(1);

                    if ( (LA189_0==WS||(LA189_0>=NL && LA189_0<=COMMENT)) ) {
                        alt189=1;
                    }
                    } finally {dbg.exitDecision(189);}

                    switch (alt189) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:935:39: ws
                            {
                            dbg.location(935,39);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5165);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(189);}

                    dbg.location(935,43);
                    match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration5168); if (state.failed) return ;
                    dbg.location(935,49);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:935:49: ( ws )?
                    int alt190=2;
                    try { dbg.enterSubRule(190);
                    try { dbg.enterDecision(190, decisionCanBacktrack[190]);

                    int LA190_0 = input.LA(1);

                    if ( (LA190_0==WS||(LA190_0>=NL && LA190_0<=COMMENT)) ) {
                        alt190=1;
                    }
                    } finally {dbg.exitDecision(190);}

                    switch (alt190) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:935:49: ws
                            {
                            dbg.location(935,49);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5170);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(190);}

                    dbg.location(935,53);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration5173);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:937:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ws )? SASS_DEFAULT )?
                    {
                    dbg.location(937,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable_declaration", "isScssSource()");
                    }
                    dbg.location(937,27);
                    pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration5196);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(937,39);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:937:39: ( ws )?
                    int alt191=2;
                    try { dbg.enterSubRule(191);
                    try { dbg.enterDecision(191, decisionCanBacktrack[191]);

                    int LA191_0 = input.LA(1);

                    if ( (LA191_0==WS||(LA191_0>=NL && LA191_0<=COMMENT)) ) {
                        alt191=1;
                    }
                    } finally {dbg.exitDecision(191);}

                    switch (alt191) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:937:39: ws
                            {
                            dbg.location(937,39);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5198);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(191);}

                    dbg.location(937,43);
                    match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration5201); if (state.failed) return ;
                    dbg.location(937,49);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:937:49: ( ws )?
                    int alt192=2;
                    try { dbg.enterSubRule(192);
                    try { dbg.enterDecision(192, decisionCanBacktrack[192]);

                    int LA192_0 = input.LA(1);

                    if ( (LA192_0==WS||(LA192_0>=NL && LA192_0<=COMMENT)) ) {
                        alt192=1;
                    }
                    } finally {dbg.exitDecision(192);}

                    switch (alt192) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:937:49: ws
                            {
                            dbg.location(937,49);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5203);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(192);}

                    dbg.location(937,53);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration5206);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(937,72);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:937:72: ( ( ws )? SASS_DEFAULT )?
                    int alt194=2;
                    try { dbg.enterSubRule(194);
                    try { dbg.enterDecision(194, decisionCanBacktrack[194]);

                    try {
                        isCyclicDecision = true;
                        alt194 = dfa194.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(194);}

                    switch (alt194) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:937:73: ( ws )? SASS_DEFAULT
                            {
                            dbg.location(937,73);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:937:73: ( ws )?
                            int alt193=2;
                            try { dbg.enterSubRule(193);
                            try { dbg.enterDecision(193, decisionCanBacktrack[193]);

                            int LA193_0 = input.LA(1);

                            if ( (LA193_0==WS||(LA193_0>=NL && LA193_0<=COMMENT)) ) {
                                alt193=1;
                            }
                            } finally {dbg.exitDecision(193);}

                            switch (alt193) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:937:73: ws
                                    {
                                    dbg.location(937,73);
                                    pushFollow(FOLLOW_ws_in_cp_variable_declaration5209);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(193);}

                            dbg.location(937,77);
                            match(input,SASS_DEFAULT,FOLLOW_SASS_DEFAULT_in_cp_variable_declaration5212); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(194);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(938, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_variable_declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_variable_declaration"


    // $ANTLR start "cp_variable"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:941:1: cp_variable : ({...}? ( AT_IDENT | MEDIA_SYM ) | {...}? ( SASS_VAR ) );
    public final void cp_variable() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_variable");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(941, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:5: ({...}? ( AT_IDENT | MEDIA_SYM ) | {...}? ( SASS_VAR ) )
            int alt196=2;
            try { dbg.enterDecision(196, decisionCanBacktrack[196]);

            int LA196_0 = input.LA(1);

            if ( (LA196_0==MEDIA_SYM||LA196_0==AT_IDENT) ) {
                alt196=1;
            }
            else if ( (LA196_0==SASS_VAR) ) {
                alt196=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 196, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(196);}

            switch (alt196) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:9: {...}? ( AT_IDENT | MEDIA_SYM )
                    {
                    dbg.location(943,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable", "isLessSource()");
                    }
                    dbg.location(943,27);
                    if ( input.LA(1)==MEDIA_SYM||input.LA(1)==AT_IDENT ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:945:9: {...}? ( SASS_VAR )
                    {
                    dbg.location(945,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable", "isScssSource()");
                    }
                    dbg.location(945,27);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:945:27: ( SASS_VAR )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:945:29: SASS_VAR
                    {
                    dbg.location(945,29);
                    match(input,SASS_VAR,FOLLOW_SASS_VAR_in_cp_variable5275); if (state.failed) return ;

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(946, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_variable");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_variable"


    // $ANTLR start "cp_expression_list"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:949:1: cp_expression_list : cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )* ;
    public final void cp_expression_list() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression_list");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(949, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:5: ( cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:5: cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*
            {
            dbg.location(951,5);
            pushFollow(FOLLOW_cp_expression_in_cp_expression_list5299);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(952,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:952:5: ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*
            try { dbg.enterSubRule(199);

            loop199:
            do {
                int alt199=2;
                try { dbg.enterDecision(199, decisionCanBacktrack[199]);

                try {
                    isCyclicDecision = true;
                    alt199 = dfa199.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(199);}

                switch (alt199) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:952:6: ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression
            	    {
            	    dbg.location(952,37);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:952:37: ( ws )?
            	    int alt197=2;
            	    try { dbg.enterSubRule(197);
            	    try { dbg.enterDecision(197, decisionCanBacktrack[197]);

            	    int LA197_0 = input.LA(1);

            	    if ( (LA197_0==WS||(LA197_0>=NL && LA197_0<=COMMENT)) ) {
            	        alt197=1;
            	    }
            	    } finally {dbg.exitDecision(197);}

            	    switch (alt197) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:952:37: ws
            	            {
            	            dbg.location(952,37);
            	            pushFollow(FOLLOW_ws_in_cp_expression_list5318);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(197);}

            	    dbg.location(952,41);
            	    match(input,COMMA,FOLLOW_COMMA_in_cp_expression_list5321); if (state.failed) return ;
            	    dbg.location(952,47);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:952:47: ( ws )?
            	    int alt198=2;
            	    try { dbg.enterSubRule(198);
            	    try { dbg.enterDecision(198, decisionCanBacktrack[198]);

            	    int LA198_0 = input.LA(1);

            	    if ( (LA198_0==WS||(LA198_0>=NL && LA198_0<=COMMENT)) ) {
            	        alt198=1;
            	    }
            	    } finally {dbg.exitDecision(198);}

            	    switch (alt198) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:952:47: ws
            	            {
            	            dbg.location(952,47);
            	            pushFollow(FOLLOW_ws_in_cp_expression_list5323);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(198);}

            	    dbg.location(952,51);
            	    pushFollow(FOLLOW_cp_expression_in_cp_expression_list5326);
            	    cp_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop199;
                }
            } while (true);
            } finally {dbg.exitSubRule(199);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(953, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression_list");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression_list"


    // $ANTLR start "cp_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:965:1: cp_expression : cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* ;
    public final void cp_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(965, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:966:5: ( cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:967:5: cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*
            {
            dbg.location(967,5);
            pushFollow(FOLLOW_cp_expression_atom_in_cp_expression5363);
            cp_expression_atom();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(968,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:968:5: ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*
            try { dbg.enterSubRule(203);

            loop203:
            do {
                int alt203=3;
                try { dbg.enterDecision(203, decisionCanBacktrack[203]);

                try {
                    isCyclicDecision = true;
                    alt203 = dfa203.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(203);}

                switch (alt203) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:969:9: ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom
            	    {
            	    dbg.location(969,39);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:969:39: ( ( ws )? cp_expression_operator ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:969:40: ( ws )? cp_expression_operator ( ws )?
            	    {
            	    dbg.location(969,40);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:969:40: ( ws )?
            	    int alt200=2;
            	    try { dbg.enterSubRule(200);
            	    try { dbg.enterDecision(200, decisionCanBacktrack[200]);

            	    int LA200_0 = input.LA(1);

            	    if ( (LA200_0==WS||(LA200_0>=NL && LA200_0<=COMMENT)) ) {
            	        alt200=1;
            	    }
            	    } finally {dbg.exitDecision(200);}

            	    switch (alt200) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:969:40: ws
            	            {
            	            dbg.location(969,40);
            	            pushFollow(FOLLOW_ws_in_cp_expression5389);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(200);}

            	    dbg.location(969,44);
            	    pushFollow(FOLLOW_cp_expression_operator_in_cp_expression5392);
            	    cp_expression_operator();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(969,67);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:969:67: ( ws )?
            	    int alt201=2;
            	    try { dbg.enterSubRule(201);
            	    try { dbg.enterDecision(201, decisionCanBacktrack[201]);

            	    int LA201_0 = input.LA(1);

            	    if ( (LA201_0==WS||(LA201_0>=NL && LA201_0<=COMMENT)) ) {
            	        alt201=1;
            	    }
            	    } finally {dbg.exitDecision(201);}

            	    switch (alt201) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:969:67: ws
            	            {
            	            dbg.location(969,67);
            	            pushFollow(FOLLOW_ws_in_cp_expression5394);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(201);}


            	    }

            	    dbg.location(969,72);
            	    pushFollow(FOLLOW_cp_expression_atom_in_cp_expression5398);
            	    cp_expression_atom();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:970:11: ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom
            	    {
            	    dbg.location(970,37);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:970:37: ( ws )?
            	    int alt202=2;
            	    try { dbg.enterSubRule(202);
            	    try { dbg.enterDecision(202, decisionCanBacktrack[202]);

            	    int LA202_0 = input.LA(1);

            	    if ( (LA202_0==WS||(LA202_0>=NL && LA202_0<=COMMENT)) ) {
            	        alt202=1;
            	    }
            	    } finally {dbg.exitDecision(202);}

            	    switch (alt202) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:970:37: ws
            	            {
            	            dbg.location(970,37);
            	            pushFollow(FOLLOW_ws_in_cp_expression5418);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(202);}

            	    dbg.location(970,41);
            	    pushFollow(FOLLOW_cp_expression_atom_in_cp_expression5421);
            	    cp_expression_atom();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop203;
                }
            } while (true);
            } finally {dbg.exitSubRule(203);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(972, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression"


    // $ANTLR start "cp_expression_operator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:983:1: cp_expression_operator : ( OR | AND | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ );
    public final void cp_expression_operator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression_operator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(983, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:984:5: ( OR | AND | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(984,5);
            if ( input.LA(1)==AND||input.LA(1)==GREATER||(input.LA(1)>=OR && input.LA(1)<=GREATER_OR_EQ) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(986, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression_operator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression_operator"


    // $ANTLR start "cp_expression_atom"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:988:1: cp_expression_atom : ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN ) ;
    public final void cp_expression_atom() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression_atom");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(988, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:989:5: ( ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:990:9: ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN )
            {
            dbg.location(990,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:990:9: ( NOT ( ws )? )?
            int alt205=2;
            try { dbg.enterSubRule(205);
            try { dbg.enterDecision(205, decisionCanBacktrack[205]);

            int LA205_0 = input.LA(1);

            if ( (LA205_0==NOT) ) {
                alt205=1;
            }
            } finally {dbg.exitDecision(205);}

            switch (alt205) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:990:10: NOT ( ws )?
                    {
                    dbg.location(990,10);
                    match(input,NOT,FOLLOW_NOT_in_cp_expression_atom5521); if (state.failed) return ;
                    dbg.location(990,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:990:14: ( ws )?
                    int alt204=2;
                    try { dbg.enterSubRule(204);
                    try { dbg.enterDecision(204, decisionCanBacktrack[204]);

                    int LA204_0 = input.LA(1);

                    if ( (LA204_0==WS||(LA204_0>=NL && LA204_0<=COMMENT)) ) {
                        alt204=1;
                    }
                    } finally {dbg.exitDecision(204);}

                    switch (alt204) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:990:14: ws
                            {
                            dbg.location(990,14);
                            pushFollow(FOLLOW_ws_in_cp_expression_atom5523);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(204);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(205);}

            dbg.location(991,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:991:9: ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN )
            int alt208=2;
            try { dbg.enterSubRule(208);
            try { dbg.enterDecision(208, decisionCanBacktrack[208]);

            try {
                isCyclicDecision = true;
                alt208 = dfa208.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(208);}

            switch (alt208) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:993:13: ( cp_math_expression )=> cp_math_expression
                    {
                    dbg.location(993,35);
                    pushFollow(FOLLOW_cp_math_expression_in_cp_expression_atom5556);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:994:15: LPAREN ( ws )? cp_expression_list ( ws )? RPAREN
                    {
                    dbg.location(994,15);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_expression_atom5572); if (state.failed) return ;
                    dbg.location(994,22);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:994:22: ( ws )?
                    int alt206=2;
                    try { dbg.enterSubRule(206);
                    try { dbg.enterDecision(206, decisionCanBacktrack[206]);

                    int LA206_0 = input.LA(1);

                    if ( (LA206_0==WS||(LA206_0>=NL && LA206_0<=COMMENT)) ) {
                        alt206=1;
                    }
                    } finally {dbg.exitDecision(206);}

                    switch (alt206) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:994:22: ws
                            {
                            dbg.location(994,22);
                            pushFollow(FOLLOW_ws_in_cp_expression_atom5574);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(206);}

                    dbg.location(994,26);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_expression_atom5577);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(994,45);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:994:45: ( ws )?
                    int alt207=2;
                    try { dbg.enterSubRule(207);
                    try { dbg.enterDecision(207, decisionCanBacktrack[207]);

                    int LA207_0 = input.LA(1);

                    if ( (LA207_0==WS||(LA207_0>=NL && LA207_0<=COMMENT)) ) {
                        alt207=1;
                    }
                    } finally {dbg.exitDecision(207);}

                    switch (alt207) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:994:45: ws
                            {
                            dbg.location(994,45);
                            pushFollow(FOLLOW_ws_in_cp_expression_atom5579);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(207);}

                    dbg.location(994,49);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_expression_atom5582); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(208);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(996, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression_atom");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression_atom"


    // $ANTLR start "cp_math_expressions"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:999:1: cp_math_expressions : cp_math_expression ( ws cp_math_expression )* ;
    public final void cp_math_expressions() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_math_expressions");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(999, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1000:5: ( cp_math_expression ( ws cp_math_expression )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1001:5: cp_math_expression ( ws cp_math_expression )*
            {
            dbg.location(1001,5);
            pushFollow(FOLLOW_cp_math_expression_in_cp_math_expressions5614);
            cp_math_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1002,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1002:5: ( ws cp_math_expression )*
            try { dbg.enterSubRule(209);

            loop209:
            do {
                int alt209=2;
                try { dbg.enterDecision(209, decisionCanBacktrack[209]);

                int LA209_0 = input.LA(1);

                if ( (LA209_0==WS||(LA209_0>=NL && LA209_0<=COMMENT)) ) {
                    alt209=1;
                }


                } finally {dbg.exitDecision(209);}

                switch (alt209) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1002:6: ws cp_math_expression
            	    {
            	    dbg.location(1002,6);
            	    pushFollow(FOLLOW_ws_in_cp_math_expressions5621);
            	    ws();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(1002,9);
            	    pushFollow(FOLLOW_cp_math_expression_in_cp_math_expressions5623);
            	    cp_math_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop209;
                }
            } while (true);
            } finally {dbg.exitSubRule(209);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1003, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_math_expressions");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_math_expressions"


    // $ANTLR start "cp_math_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1017:1: cp_math_expression : cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )* ;
    public final void cp_math_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_math_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1017, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1018:5: ( cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1018:10: cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*
            {
            dbg.location(1018,10);
            pushFollow(FOLLOW_cp_math_expression_atom_in_cp_math_expression5657);
            cp_math_expression_atom();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1019,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1019:10: ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*
            try { dbg.enterSubRule(212);

            loop212:
            do {
                int alt212=2;
                try { dbg.enterDecision(212, decisionCanBacktrack[212]);

                try {
                    isCyclicDecision = true;
                    alt212 = dfa212.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(212);}

                switch (alt212) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1020:13: ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom
            	    {
            	    dbg.location(1020,48);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1020:48: ( ws )?
            	    int alt210=2;
            	    try { dbg.enterSubRule(210);
            	    try { dbg.enterDecision(210, decisionCanBacktrack[210]);

            	    int LA210_0 = input.LA(1);

            	    if ( (LA210_0==WS||(LA210_0>=NL && LA210_0<=COMMENT)) ) {
            	        alt210=1;
            	    }
            	    } finally {dbg.exitDecision(210);}

            	    switch (alt210) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1020:48: ws
            	            {
            	            dbg.location(1020,48);
            	            pushFollow(FOLLOW_ws_in_cp_math_expression5700);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(210);}

            	    dbg.location(1020,52);
            	    if ( (input.LA(1)>=SOLIDUS && input.LA(1)<=PLUS)||input.LA(1)==STAR ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }

            	    dbg.location(1020,78);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1020:78: ( ws )?
            	    int alt211=2;
            	    try { dbg.enterSubRule(211);
            	    try { dbg.enterDecision(211, decisionCanBacktrack[211]);

            	    int LA211_0 = input.LA(1);

            	    if ( (LA211_0==WS||(LA211_0>=NL && LA211_0<=COMMENT)) ) {
            	        alt211=1;
            	    }
            	    } finally {dbg.exitDecision(211);}

            	    switch (alt211) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1020:78: ws
            	            {
            	            dbg.location(1020,78);
            	            pushFollow(FOLLOW_ws_in_cp_math_expression5713);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(211);}

            	    dbg.location(1020,82);
            	    pushFollow(FOLLOW_cp_math_expression_atom_in_cp_math_expression5716);
            	    cp_math_expression_atom();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop212;
                }
            } while (true);
            } finally {dbg.exitSubRule(212);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1022, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_math_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_math_expression"


    // $ANTLR start "cp_math_expression_atom"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1024:1: cp_math_expression_atom : ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN );
    public final void cp_math_expression_atom() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_math_expression_atom");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1024, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:5: ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN )
            int alt217=3;
            try { dbg.enterDecision(217, decisionCanBacktrack[217]);

            try {
                isCyclicDecision = true;
                alt217 = dfa217.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(217);}

            switch (alt217) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1026:5: term
                    {
                    dbg.location(1026,5);
                    pushFollow(FOLLOW_term_in_cp_math_expression_atom5754);
                    term();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1027:7: IMPORTANT_SYM
                    {
                    dbg.location(1027,7);
                    match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_cp_math_expression_atom5762); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1028:7: ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN
                    {
                    dbg.location(1028,7);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1028:7: ( unaryOperator ( ws )? )?
                    int alt214=2;
                    try { dbg.enterSubRule(214);
                    try { dbg.enterDecision(214, decisionCanBacktrack[214]);

                    int LA214_0 = input.LA(1);

                    if ( ((LA214_0>=MINUS && LA214_0<=PLUS)) ) {
                        alt214=1;
                    }
                    } finally {dbg.exitDecision(214);}

                    switch (alt214) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1028:9: unaryOperator ( ws )?
                            {
                            dbg.location(1028,9);
                            pushFollow(FOLLOW_unaryOperator_in_cp_math_expression_atom5773);
                            unaryOperator();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(1028,23);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1028:23: ( ws )?
                            int alt213=2;
                            try { dbg.enterSubRule(213);
                            try { dbg.enterDecision(213, decisionCanBacktrack[213]);

                            int LA213_0 = input.LA(1);

                            if ( (LA213_0==WS||(LA213_0>=NL && LA213_0<=COMMENT)) ) {
                                alt213=1;
                            }
                            } finally {dbg.exitDecision(213);}

                            switch (alt213) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1028:23: ws
                                    {
                                    dbg.location(1028,23);
                                    pushFollow(FOLLOW_ws_in_cp_math_expression_atom5775);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(213);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(214);}

                    dbg.location(1028,30);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_math_expression_atom5781); if (state.failed) return ;
                    dbg.location(1028,37);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1028:37: ( ws )?
                    int alt215=2;
                    try { dbg.enterSubRule(215);
                    try { dbg.enterDecision(215, decisionCanBacktrack[215]);

                    int LA215_0 = input.LA(1);

                    if ( (LA215_0==WS||(LA215_0>=NL && LA215_0<=COMMENT)) ) {
                        alt215=1;
                    }
                    } finally {dbg.exitDecision(215);}

                    switch (alt215) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1028:37: ws
                            {
                            dbg.location(1028,37);
                            pushFollow(FOLLOW_ws_in_cp_math_expression_atom5783);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(215);}

                    dbg.location(1028,41);
                    pushFollow(FOLLOW_cp_math_expression_in_cp_math_expression_atom5786);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1028,60);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1028:60: ( ws )?
                    int alt216=2;
                    try { dbg.enterSubRule(216);
                    try { dbg.enterDecision(216, decisionCanBacktrack[216]);

                    int LA216_0 = input.LA(1);

                    if ( (LA216_0==WS||(LA216_0>=NL && LA216_0<=COMMENT)) ) {
                        alt216=1;
                    }
                    } finally {dbg.exitDecision(216);}

                    switch (alt216) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1028:60: ws
                            {
                            dbg.location(1028,60);
                            pushFollow(FOLLOW_ws_in_cp_math_expression_atom5788);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(216);}

                    dbg.location(1028,64);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_math_expression_atom5791); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1029, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_math_expression_atom");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_math_expression_atom"


    // $ANTLR start "cp_mixin_declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1037:1: cp_mixin_declaration : ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? );
    public final void cp_mixin_declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1037, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1038:5: ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? )
            int alt227=2;
            try { dbg.enterDecision(227, decisionCanBacktrack[227]);

            int LA227_0 = input.LA(1);

            if ( (LA227_0==DOT) ) {
                alt227=1;
            }
            else if ( (LA227_0==SASS_MIXIN) ) {
                alt227=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 227, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(227);}

            switch (alt227) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:5: {...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )?
                    {
                    dbg.location(1039,5);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_declaration", "isLessSource()");
                    }
                    dbg.location(1039,23);
                    match(input,DOT,FOLLOW_DOT_in_cp_mixin_declaration5821); if (state.failed) return ;
                    dbg.location(1039,27);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration5823);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1039,41);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:41: ( ws )?
                    int alt218=2;
                    try { dbg.enterSubRule(218);
                    try { dbg.enterDecision(218, decisionCanBacktrack[218]);

                    int LA218_0 = input.LA(1);

                    if ( (LA218_0==WS||(LA218_0>=NL && LA218_0<=COMMENT)) ) {
                        alt218=1;
                    }
                    } finally {dbg.exitDecision(218);}

                    switch (alt218) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:41: ws
                            {
                            dbg.location(1039,41);
                            pushFollow(FOLLOW_ws_in_cp_mixin_declaration5825);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(218);}

                    dbg.location(1039,45);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration5828); if (state.failed) return ;
                    dbg.location(1039,52);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:52: ( ws )?
                    int alt219=2;
                    try { dbg.enterSubRule(219);
                    try { dbg.enterDecision(219, decisionCanBacktrack[219]);

                    int LA219_0 = input.LA(1);

                    if ( (LA219_0==WS||(LA219_0>=NL && LA219_0<=COMMENT)) ) {
                        alt219=1;
                    }
                    } finally {dbg.exitDecision(219);}

                    switch (alt219) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:52: ws
                            {
                            dbg.location(1039,52);
                            pushFollow(FOLLOW_ws_in_cp_mixin_declaration5830);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(219);}

                    dbg.location(1039,56);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:56: ( cp_args_list )?
                    int alt220=2;
                    try { dbg.enterSubRule(220);
                    try { dbg.enterDecision(220, decisionCanBacktrack[220]);

                    int LA220_0 = input.LA(1);

                    if ( (LA220_0==MEDIA_SYM||LA220_0==AT_IDENT||LA220_0==SASS_VAR||(LA220_0>=LESS_DOTS && LA220_0<=LESS_REST)) ) {
                        alt220=1;
                    }
                    } finally {dbg.exitDecision(220);}

                    switch (alt220) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:56: cp_args_list
                            {
                            dbg.location(1039,56);
                            pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration5833);
                            cp_args_list();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(220);}

                    dbg.location(1039,70);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration5836); if (state.failed) return ;
                    dbg.location(1039,77);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:77: ( ( ws )? less_mixin_guarded )?
                    int alt222=2;
                    try { dbg.enterSubRule(222);
                    try { dbg.enterDecision(222, decisionCanBacktrack[222]);

                    try {
                        isCyclicDecision = true;
                        alt222 = dfa222.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(222);}

                    switch (alt222) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:78: ( ws )? less_mixin_guarded
                            {
                            dbg.location(1039,78);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:78: ( ws )?
                            int alt221=2;
                            try { dbg.enterSubRule(221);
                            try { dbg.enterDecision(221, decisionCanBacktrack[221]);

                            int LA221_0 = input.LA(1);

                            if ( (LA221_0==WS||(LA221_0>=NL && LA221_0<=COMMENT)) ) {
                                alt221=1;
                            }
                            } finally {dbg.exitDecision(221);}

                            switch (alt221) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:78: ws
                                    {
                                    dbg.location(1039,78);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration5839);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(221);}

                            dbg.location(1039,82);
                            pushFollow(FOLLOW_less_mixin_guarded_in_cp_mixin_declaration5842);
                            less_mixin_guarded();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(222);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:5: {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?
                    {
                    dbg.location(1041,5);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_declaration", "isScssSource()");
                    }
                    dbg.location(1041,23);
                    match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_cp_mixin_declaration5858); if (state.failed) return ;
                    dbg.location(1041,34);
                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration5860);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1041,37);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration5862);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1041,51);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:51: ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?
                    int alt226=2;
                    try { dbg.enterSubRule(226);
                    try { dbg.enterDecision(226, decisionCanBacktrack[226]);

                    try {
                        isCyclicDecision = true;
                        alt226 = dfa226.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(226);}

                    switch (alt226) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:52: ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN
                            {
                            dbg.location(1041,52);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:52: ( ws )?
                            int alt223=2;
                            try { dbg.enterSubRule(223);
                            try { dbg.enterDecision(223, decisionCanBacktrack[223]);

                            int LA223_0 = input.LA(1);

                            if ( (LA223_0==WS||(LA223_0>=NL && LA223_0<=COMMENT)) ) {
                                alt223=1;
                            }
                            } finally {dbg.exitDecision(223);}

                            switch (alt223) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:52: ws
                                    {
                                    dbg.location(1041,52);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration5865);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(223);}

                            dbg.location(1041,56);
                            match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration5868); if (state.failed) return ;
                            dbg.location(1041,63);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:63: ( ws )?
                            int alt224=2;
                            try { dbg.enterSubRule(224);
                            try { dbg.enterDecision(224, decisionCanBacktrack[224]);

                            int LA224_0 = input.LA(1);

                            if ( (LA224_0==WS||(LA224_0>=NL && LA224_0<=COMMENT)) ) {
                                alt224=1;
                            }
                            } finally {dbg.exitDecision(224);}

                            switch (alt224) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:63: ws
                                    {
                                    dbg.location(1041,63);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration5870);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(224);}

                            dbg.location(1041,67);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:67: ( cp_args_list )?
                            int alt225=2;
                            try { dbg.enterSubRule(225);
                            try { dbg.enterDecision(225, decisionCanBacktrack[225]);

                            int LA225_0 = input.LA(1);

                            if ( (LA225_0==MEDIA_SYM||LA225_0==AT_IDENT||LA225_0==SASS_VAR||(LA225_0>=LESS_DOTS && LA225_0<=LESS_REST)) ) {
                                alt225=1;
                            }
                            } finally {dbg.exitDecision(225);}

                            switch (alt225) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:67: cp_args_list
                                    {
                                    dbg.location(1041,67);
                                    pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration5873);
                                    cp_args_list();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(225);}

                            dbg.location(1041,81);
                            match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration5876); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(226);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1042, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_declaration"


    // $ANTLR start "cp_mixin_call"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:1: cp_mixin_call : ({...}? DOT cp_mixin_name | {...}? SASS_INCLUDE ws cp_mixin_name ) ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ;
    public final void cp_mixin_call() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1046, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1047:5: ( ({...}? DOT cp_mixin_name | {...}? SASS_INCLUDE ws cp_mixin_name ) ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1048:5: ({...}? DOT cp_mixin_name | {...}? SASS_INCLUDE ws cp_mixin_name ) ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
            {
            dbg.location(1048,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1048:5: ({...}? DOT cp_mixin_name | {...}? SASS_INCLUDE ws cp_mixin_name )
            int alt228=2;
            try { dbg.enterSubRule(228);
            try { dbg.enterDecision(228, decisionCanBacktrack[228]);

            int LA228_0 = input.LA(1);

            if ( (LA228_0==DOT) ) {
                alt228=1;
            }
            else if ( (LA228_0==SASS_INCLUDE) ) {
                alt228=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 228, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(228);}

            switch (alt228) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1049:9: {...}? DOT cp_mixin_name
                    {
                    dbg.location(1049,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_call", "isLessSource()");
                    }
                    dbg.location(1049,27);
                    match(input,DOT,FOLLOW_DOT_in_cp_mixin_call5917); if (state.failed) return ;
                    dbg.location(1049,31);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call5919);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1051:9: {...}? SASS_INCLUDE ws cp_mixin_name
                    {
                    dbg.location(1051,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_call", "isScssSource()");
                    }
                    dbg.location(1051,27);
                    match(input,SASS_INCLUDE,FOLLOW_SASS_INCLUDE_in_cp_mixin_call5941); if (state.failed) return ;
                    dbg.location(1051,40);
                    pushFollow(FOLLOW_ws_in_cp_mixin_call5943);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1051,43);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call5945);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(228);}

            dbg.location(1053,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:5: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
            int alt232=2;
            try { dbg.enterSubRule(232);
            try { dbg.enterDecision(232, decisionCanBacktrack[232]);

            try {
                isCyclicDecision = true;
                alt232 = dfa232.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(232);}

            switch (alt232) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:6: ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN
                    {
                    dbg.location(1053,6);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:6: ( ws )?
                    int alt229=2;
                    try { dbg.enterSubRule(229);
                    try { dbg.enterDecision(229, decisionCanBacktrack[229]);

                    int LA229_0 = input.LA(1);

                    if ( (LA229_0==WS||(LA229_0>=NL && LA229_0<=COMMENT)) ) {
                        alt229=1;
                    }
                    } finally {dbg.exitDecision(229);}

                    switch (alt229) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:6: ws
                            {
                            dbg.location(1053,6);
                            pushFollow(FOLLOW_ws_in_cp_mixin_call5958);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(229);}

                    dbg.location(1053,10);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_call5961); if (state.failed) return ;
                    dbg.location(1053,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:17: ( ws )?
                    int alt230=2;
                    try { dbg.enterSubRule(230);
                    try { dbg.enterDecision(230, decisionCanBacktrack[230]);

                    int LA230_0 = input.LA(1);

                    if ( (LA230_0==WS||(LA230_0>=NL && LA230_0<=COMMENT)) ) {
                        alt230=1;
                    }
                    } finally {dbg.exitDecision(230);}

                    switch (alt230) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:17: ws
                            {
                            dbg.location(1053,17);
                            pushFollow(FOLLOW_ws_in_cp_mixin_call5963);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(230);}

                    dbg.location(1053,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:21: ( cp_mixin_call_args )?
                    int alt231=2;
                    try { dbg.enterSubRule(231);
                    try { dbg.enterDecision(231, decisionCanBacktrack[231]);

                    int LA231_0 = input.LA(1);

                    if ( ((LA231_0>=IDENT && LA231_0<=URI)||LA231_0==MEDIA_SYM||(LA231_0>=NOT && LA231_0<=LPAREN)||LA231_0==AT_IDENT||LA231_0==PERCENTAGE||(LA231_0>=MINUS && LA231_0<=PLUS)||(LA231_0>=HASH_SYMBOL && LA231_0<=HASH)||(LA231_0>=SASS_VAR && LA231_0<=DIMENSION)) ) {
                        alt231=1;
                    }
                    } finally {dbg.exitDecision(231);}

                    switch (alt231) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1053:21: cp_mixin_call_args
                            {
                            dbg.location(1053,21);
                            pushFollow(FOLLOW_cp_mixin_call_args_in_cp_mixin_call5966);
                            cp_mixin_call_args();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(231);}

                    dbg.location(1053,41);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_call5969); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(232);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1054, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_call");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_call"


    // $ANTLR start "cp_mixin_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1056:1: cp_mixin_name : IDENT ;
    public final void cp_mixin_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1056, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1057:5: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1058:5: IDENT
            {
            dbg.location(1058,5);
            match(input,IDENT,FOLLOW_IDENT_in_cp_mixin_name6000); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1059, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_name"


    // $ANTLR start "cp_mixin_call_args"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1061:1: cp_mixin_call_args : cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ;
    public final void cp_mixin_call_args() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_args");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1061, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1062:5: ( cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:5: cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )*
            {
            dbg.location(1065,5);
            pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6036);
            cp_mixin_call_arg();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1065,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:23: ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )*
            try { dbg.enterSubRule(234);

            loop234:
            do {
                int alt234=2;
                try { dbg.enterDecision(234, decisionCanBacktrack[234]);

                int LA234_0 = input.LA(1);

                if ( (LA234_0==SEMI||LA234_0==COMMA) ) {
                    alt234=1;
                }


                } finally {dbg.exitDecision(234);}

                switch (alt234) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:25: ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg
            	    {
            	    dbg.location(1065,25);
            	    if ( input.LA(1)==SEMI||input.LA(1)==COMMA ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }

            	    dbg.location(1065,40);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:40: ( ws )?
            	    int alt233=2;
            	    try { dbg.enterSubRule(233);
            	    try { dbg.enterDecision(233, decisionCanBacktrack[233]);

            	    int LA233_0 = input.LA(1);

            	    if ( (LA233_0==WS||(LA233_0>=NL && LA233_0<=COMMENT)) ) {
            	        alt233=1;
            	    }
            	    } finally {dbg.exitDecision(233);}

            	    switch (alt233) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:40: ws
            	            {
            	            dbg.location(1065,40);
            	            pushFollow(FOLLOW_ws_in_cp_mixin_call_args6048);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(233);}

            	    dbg.location(1065,44);
            	    pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6051);
            	    cp_mixin_call_arg();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop234;
                }
            } while (true);
            } finally {dbg.exitSubRule(234);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1066, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_call_args");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_call_args"


    // $ANTLR start "cp_mixin_call_arg"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1068:1: cp_mixin_call_arg : ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? ;
    public final void cp_mixin_call_arg() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_arg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1068, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1069:5: ( ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1070:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )?
            {
            dbg.location(1070,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1070:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )
            int alt237=2;
            try { dbg.enterSubRule(237);
            try { dbg.enterDecision(237, decisionCanBacktrack[237]);

            try {
                isCyclicDecision = true;
                alt237 = dfa237.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(237);}

            switch (alt237) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:9: cp_variable ( ws )? COLON ( ws )? cp_expression
                    {
                    dbg.location(1071,9);
                    pushFollow(FOLLOW_cp_variable_in_cp_mixin_call_arg6093);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1071,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:21: ( ws )?
                    int alt235=2;
                    try { dbg.enterSubRule(235);
                    try { dbg.enterDecision(235, decisionCanBacktrack[235]);

                    int LA235_0 = input.LA(1);

                    if ( (LA235_0==WS||(LA235_0>=NL && LA235_0<=COMMENT)) ) {
                        alt235=1;
                    }
                    } finally {dbg.exitDecision(235);}

                    switch (alt235) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:21: ws
                            {
                            dbg.location(1071,21);
                            pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6095);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(235);}

                    dbg.location(1071,25);
                    match(input,COLON,FOLLOW_COLON_in_cp_mixin_call_arg6098); if (state.failed) return ;
                    dbg.location(1071,31);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:31: ( ws )?
                    int alt236=2;
                    try { dbg.enterSubRule(236);
                    try { dbg.enterDecision(236, decisionCanBacktrack[236]);

                    int LA236_0 = input.LA(1);

                    if ( (LA236_0==WS||(LA236_0>=NL && LA236_0<=COMMENT)) ) {
                        alt236=1;
                    }
                    } finally {dbg.exitDecision(236);}

                    switch (alt236) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:31: ws
                            {
                            dbg.location(1071,31);
                            pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6100);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(236);}

                    dbg.location(1071,35);
                    pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg6103);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1072:11: cp_expression
                    {
                    dbg.location(1072,11);
                    pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg6115);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(237);}

            dbg.location(1073,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:7: ( ws )?
            int alt238=2;
            try { dbg.enterSubRule(238);
            try { dbg.enterDecision(238, decisionCanBacktrack[238]);

            int LA238_0 = input.LA(1);

            if ( (LA238_0==WS||(LA238_0>=NL && LA238_0<=COMMENT)) ) {
                alt238=1;
            }
            } finally {dbg.exitDecision(238);}

            switch (alt238) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:7: ws
                    {
                    dbg.location(1073,7);
                    pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6123);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(238);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1074, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_call_arg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_call_arg"


    // $ANTLR start "cp_args_list"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:1: cp_args_list : ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? ( LESS_DOTS | LESS_REST ) )? ) | ( LESS_DOTS | LESS_REST ) );
    public final void cp_args_list() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_args_list");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1077, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1078:5: ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? ( LESS_DOTS | LESS_REST ) )? ) | ( LESS_DOTS | LESS_REST ) )
            int alt243=2;
            try { dbg.enterDecision(243, decisionCanBacktrack[243]);

            int LA243_0 = input.LA(1);

            if ( (LA243_0==MEDIA_SYM||LA243_0==AT_IDENT||LA243_0==SASS_VAR) ) {
                alt243=1;
            }
            else if ( ((LA243_0>=LESS_DOTS && LA243_0<=LESS_REST)) ) {
                alt243=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 243, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(243);}

            switch (alt243) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1081:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? ( LESS_DOTS | LESS_REST ) )? )
                    {
                    dbg.location(1081,5);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1081:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? ( LESS_DOTS | LESS_REST ) )? )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1081:7: cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? ( LESS_DOTS | LESS_REST ) )?
                    {
                    dbg.location(1081,7);
                    pushFollow(FOLLOW_cp_arg_in_cp_args_list6159);
                    cp_arg();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1081,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1081:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*
                    try { dbg.enterSubRule(240);

                    loop240:
                    do {
                        int alt240=2;
                        try { dbg.enterDecision(240, decisionCanBacktrack[240]);

                        try {
                            isCyclicDecision = true;
                            alt240 = dfa240.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(240);}

                        switch (alt240) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1081:16: ( COMMA | SEMI ) ( ws )? cp_arg
                    	    {
                    	    dbg.location(1081,16);
                    	    if ( input.LA(1)==SEMI||input.LA(1)==COMMA ) {
                    	        input.consume();
                    	        state.errorRecovery=false;state.failed=false;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return ;}
                    	        MismatchedSetException mse = new MismatchedSetException(null,input);
                    	        dbg.recognitionException(mse);
                    	        throw mse;
                    	    }

                    	    dbg.location(1081,33);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1081:33: ( ws )?
                    	    int alt239=2;
                    	    try { dbg.enterSubRule(239);
                    	    try { dbg.enterDecision(239, decisionCanBacktrack[239]);

                    	    int LA239_0 = input.LA(1);

                    	    if ( (LA239_0==WS||(LA239_0>=NL && LA239_0<=COMMENT)) ) {
                    	        alt239=1;
                    	    }
                    	    } finally {dbg.exitDecision(239);}

                    	    switch (alt239) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1081:33: ws
                    	            {
                    	            dbg.location(1081,33);
                    	            pushFollow(FOLLOW_ws_in_cp_args_list6173);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(239);}

                    	    dbg.location(1081,37);
                    	    pushFollow(FOLLOW_cp_arg_in_cp_args_list6176);
                    	    cp_arg();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop240;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(240);}

                    dbg.location(1081,46);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1081:46: ( ( COMMA | SEMI ) ( ws )? ( LESS_DOTS | LESS_REST ) )?
                    int alt242=2;
                    try { dbg.enterSubRule(242);
                    try { dbg.enterDecision(242, decisionCanBacktrack[242]);

                    int LA242_0 = input.LA(1);

                    if ( (LA242_0==SEMI||LA242_0==COMMA) ) {
                        alt242=1;
                    }
                    } finally {dbg.exitDecision(242);}

                    switch (alt242) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1081:48: ( COMMA | SEMI ) ( ws )? ( LESS_DOTS | LESS_REST )
                            {
                            dbg.location(1081,48);
                            if ( input.LA(1)==SEMI||input.LA(1)==COMMA ) {
                                input.consume();
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                dbg.recognitionException(mse);
                                throw mse;
                            }

                            dbg.location(1081,65);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1081:65: ( ws )?
                            int alt241=2;
                            try { dbg.enterSubRule(241);
                            try { dbg.enterDecision(241, decisionCanBacktrack[241]);

                            int LA241_0 = input.LA(1);

                            if ( (LA241_0==WS||(LA241_0>=NL && LA241_0<=COMMENT)) ) {
                                alt241=1;
                            }
                            } finally {dbg.exitDecision(241);}

                            switch (alt241) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1081:65: ws
                                    {
                                    dbg.location(1081,65);
                                    pushFollow(FOLLOW_ws_in_cp_args_list6192);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(241);}

                            dbg.location(1081,69);
                            if ( (input.LA(1)>=LESS_DOTS && input.LA(1)<=LESS_REST) ) {
                                input.consume();
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                dbg.recognitionException(mse);
                                throw mse;
                            }


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(242);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1083:5: ( LESS_DOTS | LESS_REST )
                    {
                    dbg.location(1083,5);
                    if ( (input.LA(1)>=LESS_DOTS && input.LA(1)<=LESS_REST) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1084, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_args_list");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_args_list"


    // $ANTLR start "cp_arg"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1087:1: cp_arg : cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? ;
    public final void cp_arg() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_arg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1087, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1088:5: ( cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1089:5: cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )?
            {
            dbg.location(1089,5);
            pushFollow(FOLLOW_cp_variable_in_cp_arg6249);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1089,17);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1089:17: ( ws )?
            int alt244=2;
            try { dbg.enterSubRule(244);
            try { dbg.enterDecision(244, decisionCanBacktrack[244]);

            int LA244_0 = input.LA(1);

            if ( (LA244_0==WS||(LA244_0>=NL && LA244_0<=COMMENT)) ) {
                alt244=1;
            }
            } finally {dbg.exitDecision(244);}

            switch (alt244) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1089:17: ws
                    {
                    dbg.location(1089,17);
                    pushFollow(FOLLOW_ws_in_cp_arg6251);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(244);}

            dbg.location(1089,21);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1089:21: ( COLON ( ws )? cp_expression ( ws )? )?
            int alt247=2;
            try { dbg.enterSubRule(247);
            try { dbg.enterDecision(247, decisionCanBacktrack[247]);

            int LA247_0 = input.LA(1);

            if ( (LA247_0==COLON) ) {
                alt247=1;
            }
            } finally {dbg.exitDecision(247);}

            switch (alt247) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1089:23: COLON ( ws )? cp_expression ( ws )?
                    {
                    dbg.location(1089,23);
                    match(input,COLON,FOLLOW_COLON_in_cp_arg6256); if (state.failed) return ;
                    dbg.location(1089,29);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1089:29: ( ws )?
                    int alt245=2;
                    try { dbg.enterSubRule(245);
                    try { dbg.enterDecision(245, decisionCanBacktrack[245]);

                    int LA245_0 = input.LA(1);

                    if ( (LA245_0==WS||(LA245_0>=NL && LA245_0<=COMMENT)) ) {
                        alt245=1;
                    }
                    } finally {dbg.exitDecision(245);}

                    switch (alt245) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1089:29: ws
                            {
                            dbg.location(1089,29);
                            pushFollow(FOLLOW_ws_in_cp_arg6258);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(245);}

                    dbg.location(1089,33);
                    pushFollow(FOLLOW_cp_expression_in_cp_arg6261);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1089,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1089:47: ( ws )?
                    int alt246=2;
                    try { dbg.enterSubRule(246);
                    try { dbg.enterDecision(246, decisionCanBacktrack[246]);

                    int LA246_0 = input.LA(1);

                    if ( (LA246_0==WS||(LA246_0>=NL && LA246_0<=COMMENT)) ) {
                        alt246=1;
                    }
                    } finally {dbg.exitDecision(246);}

                    switch (alt246) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1089:47: ws
                            {
                            dbg.location(1089,47);
                            pushFollow(FOLLOW_ws_in_cp_arg6263);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(246);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(247);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1090, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_arg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_arg"


    // $ANTLR start "less_mixin_guarded"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:1: less_mixin_guarded : LESS_WHEN ( ws )? less_condition ( ( COMMA | AND ) ( ws )? less_condition )* ;
    public final void less_mixin_guarded() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_mixin_guarded");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1094, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1095:5: ( LESS_WHEN ( ws )? less_condition ( ( COMMA | AND ) ( ws )? less_condition )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:5: LESS_WHEN ( ws )? less_condition ( ( COMMA | AND ) ( ws )? less_condition )*
            {
            dbg.location(1096,5);
            match(input,LESS_WHEN,FOLLOW_LESS_WHEN_in_less_mixin_guarded6289); if (state.failed) return ;
            dbg.location(1096,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:15: ( ws )?
            int alt248=2;
            try { dbg.enterSubRule(248);
            try { dbg.enterDecision(248, decisionCanBacktrack[248]);

            int LA248_0 = input.LA(1);

            if ( (LA248_0==WS||(LA248_0>=NL && LA248_0<=COMMENT)) ) {
                alt248=1;
            }
            } finally {dbg.exitDecision(248);}

            switch (alt248) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:15: ws
                    {
                    dbg.location(1096,15);
                    pushFollow(FOLLOW_ws_in_less_mixin_guarded6291);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(248);}

            dbg.location(1096,19);
            pushFollow(FOLLOW_less_condition_in_less_mixin_guarded6294);
            less_condition();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1096,34);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:34: ( ( COMMA | AND ) ( ws )? less_condition )*
            try { dbg.enterSubRule(250);

            loop250:
            do {
                int alt250=2;
                try { dbg.enterDecision(250, decisionCanBacktrack[250]);

                int LA250_0 = input.LA(1);

                if ( (LA250_0==COMMA||LA250_0==AND) ) {
                    alt250=1;
                }


                } finally {dbg.exitDecision(250);}

                switch (alt250) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:36: ( COMMA | AND ) ( ws )? less_condition
            	    {
            	    dbg.location(1096,36);
            	    if ( input.LA(1)==COMMA||input.LA(1)==AND ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }

            	    dbg.location(1096,50);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:50: ( ws )?
            	    int alt249=2;
            	    try { dbg.enterSubRule(249);
            	    try { dbg.enterDecision(249, decisionCanBacktrack[249]);

            	    int LA249_0 = input.LA(1);

            	    if ( (LA249_0==WS||(LA249_0>=NL && LA249_0<=COMMENT)) ) {
            	        alt249=1;
            	    }
            	    } finally {dbg.exitDecision(249);}

            	    switch (alt249) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:50: ws
            	            {
            	            dbg.location(1096,50);
            	            pushFollow(FOLLOW_ws_in_less_mixin_guarded6306);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(249);}

            	    dbg.location(1096,54);
            	    pushFollow(FOLLOW_less_condition_in_less_mixin_guarded6309);
            	    less_condition();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop250;
                }
            } while (true);
            } finally {dbg.exitSubRule(250);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1097, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_mixin_guarded");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_mixin_guarded"


    // $ANTLR start "less_condition"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1101:1: less_condition : ( NOT ( ws )? )? LPAREN ( ws )? ( less_function_in_condition ( ws )? | ( cp_variable ( ( ws )? less_condition_operator ( ws )? cp_math_expression )? ) ) RPAREN ;
    public final void less_condition() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_condition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1101, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1102:5: ( ( NOT ( ws )? )? LPAREN ( ws )? ( less_function_in_condition ( ws )? | ( cp_variable ( ( ws )? less_condition_operator ( ws )? cp_math_expression )? ) ) RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1103:5: ( NOT ( ws )? )? LPAREN ( ws )? ( less_function_in_condition ( ws )? | ( cp_variable ( ( ws )? less_condition_operator ( ws )? cp_math_expression )? ) ) RPAREN
            {
            dbg.location(1103,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1103:5: ( NOT ( ws )? )?
            int alt252=2;
            try { dbg.enterSubRule(252);
            try { dbg.enterDecision(252, decisionCanBacktrack[252]);

            int LA252_0 = input.LA(1);

            if ( (LA252_0==NOT) ) {
                alt252=1;
            }
            } finally {dbg.exitDecision(252);}

            switch (alt252) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1103:6: NOT ( ws )?
                    {
                    dbg.location(1103,6);
                    match(input,NOT,FOLLOW_NOT_in_less_condition6339); if (state.failed) return ;
                    dbg.location(1103,10);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1103:10: ( ws )?
                    int alt251=2;
                    try { dbg.enterSubRule(251);
                    try { dbg.enterDecision(251, decisionCanBacktrack[251]);

                    int LA251_0 = input.LA(1);

                    if ( (LA251_0==WS||(LA251_0>=NL && LA251_0<=COMMENT)) ) {
                        alt251=1;
                    }
                    } finally {dbg.exitDecision(251);}

                    switch (alt251) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1103:10: ws
                            {
                            dbg.location(1103,10);
                            pushFollow(FOLLOW_ws_in_less_condition6341);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(251);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(252);}

            dbg.location(1104,5);
            match(input,LPAREN,FOLLOW_LPAREN_in_less_condition6350); if (state.failed) return ;
            dbg.location(1104,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1104:12: ( ws )?
            int alt253=2;
            try { dbg.enterSubRule(253);
            try { dbg.enterDecision(253, decisionCanBacktrack[253]);

            int LA253_0 = input.LA(1);

            if ( (LA253_0==WS||(LA253_0>=NL && LA253_0<=COMMENT)) ) {
                alt253=1;
            }
            } finally {dbg.exitDecision(253);}

            switch (alt253) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1104:12: ws
                    {
                    dbg.location(1104,12);
                    pushFollow(FOLLOW_ws_in_less_condition6352);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(253);}

            dbg.location(1105,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1105:9: ( less_function_in_condition ( ws )? | ( cp_variable ( ( ws )? less_condition_operator ( ws )? cp_math_expression )? ) )
            int alt258=2;
            try { dbg.enterSubRule(258);
            try { dbg.enterDecision(258, decisionCanBacktrack[258]);

            int LA258_0 = input.LA(1);

            if ( (LA258_0==IDENT) ) {
                alt258=1;
            }
            else if ( (LA258_0==MEDIA_SYM||LA258_0==AT_IDENT||LA258_0==SASS_VAR) ) {
                alt258=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 258, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(258);}

            switch (alt258) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:13: less_function_in_condition ( ws )?
                    {
                    dbg.location(1106,13);
                    pushFollow(FOLLOW_less_function_in_condition_in_less_condition6378);
                    less_function_in_condition();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1106,40);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:40: ( ws )?
                    int alt254=2;
                    try { dbg.enterSubRule(254);
                    try { dbg.enterDecision(254, decisionCanBacktrack[254]);

                    int LA254_0 = input.LA(1);

                    if ( (LA254_0==WS||(LA254_0>=NL && LA254_0<=COMMENT)) ) {
                        alt254=1;
                    }
                    } finally {dbg.exitDecision(254);}

                    switch (alt254) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:40: ws
                            {
                            dbg.location(1106,40);
                            pushFollow(FOLLOW_ws_in_less_condition6380);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(254);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1108:13: ( cp_variable ( ( ws )? less_condition_operator ( ws )? cp_math_expression )? )
                    {
                    dbg.location(1108,13);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1108:13: ( cp_variable ( ( ws )? less_condition_operator ( ws )? cp_math_expression )? )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1108:15: cp_variable ( ( ws )? less_condition_operator ( ws )? cp_math_expression )?
                    {
                    dbg.location(1108,15);
                    pushFollow(FOLLOW_cp_variable_in_less_condition6411);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1108,27);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1108:27: ( ( ws )? less_condition_operator ( ws )? cp_math_expression )?
                    int alt257=2;
                    try { dbg.enterSubRule(257);
                    try { dbg.enterDecision(257, decisionCanBacktrack[257]);

                    int LA257_0 = input.LA(1);

                    if ( (LA257_0==WS||LA257_0==GREATER||LA257_0==OPEQ||(LA257_0>=NL && LA257_0<=COMMENT)||(LA257_0>=LESS && LA257_0<=GREATER_OR_EQ)) ) {
                        alt257=1;
                    }
                    } finally {dbg.exitDecision(257);}

                    switch (alt257) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1108:28: ( ws )? less_condition_operator ( ws )? cp_math_expression
                            {
                            dbg.location(1108,28);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1108:28: ( ws )?
                            int alt255=2;
                            try { dbg.enterSubRule(255);
                            try { dbg.enterDecision(255, decisionCanBacktrack[255]);

                            int LA255_0 = input.LA(1);

                            if ( (LA255_0==WS||(LA255_0>=NL && LA255_0<=COMMENT)) ) {
                                alt255=1;
                            }
                            } finally {dbg.exitDecision(255);}

                            switch (alt255) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1108:28: ws
                                    {
                                    dbg.location(1108,28);
                                    pushFollow(FOLLOW_ws_in_less_condition6414);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(255);}

                            dbg.location(1108,32);
                            pushFollow(FOLLOW_less_condition_operator_in_less_condition6417);
                            less_condition_operator();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(1108,56);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1108:56: ( ws )?
                            int alt256=2;
                            try { dbg.enterSubRule(256);
                            try { dbg.enterDecision(256, decisionCanBacktrack[256]);

                            int LA256_0 = input.LA(1);

                            if ( (LA256_0==WS||(LA256_0>=NL && LA256_0<=COMMENT)) ) {
                                alt256=1;
                            }
                            } finally {dbg.exitDecision(256);}

                            switch (alt256) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1108:56: ws
                                    {
                                    dbg.location(1108,56);
                                    pushFollow(FOLLOW_ws_in_less_condition6419);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(256);}

                            dbg.location(1108,60);
                            pushFollow(FOLLOW_cp_math_expression_in_less_condition6422);
                            cp_math_expression();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(257);}


                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(258);}

            dbg.location(1110,5);
            match(input,RPAREN,FOLLOW_RPAREN_in_less_condition6451); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1111, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_condition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_condition"


    // $ANTLR start "less_function_in_condition"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1114:1: less_function_in_condition : less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN ;
    public final void less_function_in_condition() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_function_in_condition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1114, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:5: ( less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1116:5: less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN
            {
            dbg.location(1116,5);
            pushFollow(FOLLOW_less_fn_name_in_less_function_in_condition6477);
            less_fn_name();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1116,18);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1116:18: ( ws )?
            int alt259=2;
            try { dbg.enterSubRule(259);
            try { dbg.enterDecision(259, decisionCanBacktrack[259]);

            int LA259_0 = input.LA(1);

            if ( (LA259_0==WS||(LA259_0>=NL && LA259_0<=COMMENT)) ) {
                alt259=1;
            }
            } finally {dbg.exitDecision(259);}

            switch (alt259) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1116:18: ws
                    {
                    dbg.location(1116,18);
                    pushFollow(FOLLOW_ws_in_less_function_in_condition6479);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(259);}

            dbg.location(1116,22);
            match(input,LPAREN,FOLLOW_LPAREN_in_less_function_in_condition6482); if (state.failed) return ;
            dbg.location(1116,29);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1116:29: ( ws )?
            int alt260=2;
            try { dbg.enterSubRule(260);
            try { dbg.enterDecision(260, decisionCanBacktrack[260]);

            int LA260_0 = input.LA(1);

            if ( (LA260_0==WS||(LA260_0>=NL && LA260_0<=COMMENT)) ) {
                alt260=1;
            }
            } finally {dbg.exitDecision(260);}

            switch (alt260) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1116:29: ws
                    {
                    dbg.location(1116,29);
                    pushFollow(FOLLOW_ws_in_less_function_in_condition6484);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(260);}

            dbg.location(1116,33);
            pushFollow(FOLLOW_cp_variable_in_less_function_in_condition6487);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1116,45);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1116:45: ( ws )?
            int alt261=2;
            try { dbg.enterSubRule(261);
            try { dbg.enterDecision(261, decisionCanBacktrack[261]);

            int LA261_0 = input.LA(1);

            if ( (LA261_0==WS||(LA261_0>=NL && LA261_0<=COMMENT)) ) {
                alt261=1;
            }
            } finally {dbg.exitDecision(261);}

            switch (alt261) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1116:45: ws
                    {
                    dbg.location(1116,45);
                    pushFollow(FOLLOW_ws_in_less_function_in_condition6489);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(261);}

            dbg.location(1116,49);
            match(input,RPAREN,FOLLOW_RPAREN_in_less_function_in_condition6492); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1117, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_function_in_condition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_function_in_condition"


    // $ANTLR start "less_fn_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1120:1: less_fn_name : IDENT ;
    public final void less_fn_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_fn_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1120, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1121:5: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1122:5: IDENT
            {
            dbg.location(1122,5);
            match(input,IDENT,FOLLOW_IDENT_in_less_fn_name6514); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1123, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_fn_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_fn_name"


    // $ANTLR start "less_condition_operator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1125:1: less_condition_operator : ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ );
    public final void less_condition_operator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_condition_operator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1125, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1126:5: ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(1126,5);
            if ( input.LA(1)==GREATER||input.LA(1)==OPEQ||(input.LA(1)>=LESS && input.LA(1)<=GREATER_OR_EQ) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1128, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_condition_operator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_condition_operator"


    // $ANTLR start "sass_selector_interpolation_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1135:1: sass_selector_interpolation_expression : ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) ) )* ;
    public final void sass_selector_interpolation_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_selector_interpolation_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1135, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1136:5: ( ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1137:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) ) )*
            {
            dbg.location(1137,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1137:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) )
            int alt262=2;
            try { dbg.enterSubRule(262);
            try { dbg.enterDecision(262, decisionCanBacktrack[262]);

            int LA262_0 = input.LA(1);

            if ( (LA262_0==HASH_SYMBOL) ) {
                int LA262_1 = input.LA(2);

                if ( (synpred27_Css3()) ) {
                    alt262=1;
                }
                else if ( (true) ) {
                    alt262=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 262, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA262_0==IDENT||LA262_0==COMMA||LA262_0==COLON||LA262_0==MINUS||LA262_0==GREATER||(LA262_0>=HASH && LA262_0<=DOT)||LA262_0==STAR||LA262_0==LESS_AND) ) {
                alt262=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 262, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(262);}

            switch (alt262) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:13: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
                    {
                    dbg.location(1138,50);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression6600);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1140:13: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER )
                    {
                    dbg.location(1140,13);
                    if ( input.LA(1)==IDENT||input.LA(1)==COMMA||input.LA(1)==COLON||input.LA(1)==MINUS||input.LA(1)==GREATER||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=DOT)||input.LA(1)==STAR||input.LA(1)==LESS_AND ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(262);}

            dbg.location(1142,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) ) )*
            try { dbg.enterSubRule(265);

            loop265:
            do {
                int alt265=2;
                try { dbg.enterDecision(265, decisionCanBacktrack[265]);

                try {
                    isCyclicDecision = true;
                    alt265 = dfa265.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(265);}

                switch (alt265) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1143:13: ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) )
            	    {
            	    dbg.location(1143,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1143:13: ( ws )?
            	    int alt263=2;
            	    try { dbg.enterSubRule(263);
            	    try { dbg.enterDecision(263, decisionCanBacktrack[263]);

            	    int LA263_0 = input.LA(1);

            	    if ( (LA263_0==WS||(LA263_0>=NL && LA263_0<=COMMENT)) ) {
            	        alt263=1;
            	    }
            	    } finally {dbg.exitDecision(263);}

            	    switch (alt263) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1143:13: ws
            	            {
            	            dbg.location(1143,13);
            	            pushFollow(FOLLOW_ws_in_sass_selector_interpolation_expression6702);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(263);}

            	    dbg.location(1144,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1144:13: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) )
            	    int alt264=2;
            	    try { dbg.enterSubRule(264);
            	    try { dbg.enterDecision(264, decisionCanBacktrack[264]);

            	    int LA264_0 = input.LA(1);

            	    if ( (LA264_0==HASH_SYMBOL) ) {
            	        int LA264_1 = input.LA(2);

            	        if ( (synpred28_Css3()) ) {
            	            alt264=1;
            	        }
            	        else if ( (true) ) {
            	            alt264=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return ;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 264, 1, input);

            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	    }
            	    else if ( (LA264_0==IDENT||LA264_0==COMMA||LA264_0==COLON||LA264_0==MINUS||LA264_0==GREATER||(LA264_0>=HASH && LA264_0<=DOT)||LA264_0==STAR||LA264_0==LESS_AND) ) {
            	        alt264=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 264, 0, input);

            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(264);}

            	    switch (alt264) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1145:17: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
            	            {
            	            dbg.location(1145,54);
            	            pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression6739);
            	            sass_interpolation_expression_var();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1147:17: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER )
            	            {
            	            dbg.location(1147,17);
            	            if ( input.LA(1)==IDENT||input.LA(1)==COMMA||input.LA(1)==COLON||input.LA(1)==MINUS||input.LA(1)==GREATER||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=DOT)||input.LA(1)==STAR||input.LA(1)==LESS_AND ) {
            	                input.consume();
            	                state.errorRecovery=false;state.failed=false;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return ;}
            	                MismatchedSetException mse = new MismatchedSetException(null,input);
            	                dbg.recognitionException(mse);
            	                throw mse;
            	            }


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(264);}


            	    }
            	    break;

            	default :
            	    break loop265;
                }
            } while (true);
            } finally {dbg.exitSubRule(265);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1151, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_selector_interpolation_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_selector_interpolation_expression"


    // $ANTLR start "sass_declaration_interpolation_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1153:1: sass_declaration_interpolation_expression : ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )* ;
    public final void sass_declaration_interpolation_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_declaration_interpolation_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1153, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1154:5: ( ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1155:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*
            {
            dbg.location(1155,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1155:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
            int alt266=2;
            try { dbg.enterSubRule(266);
            try { dbg.enterDecision(266, decisionCanBacktrack[266]);

            int LA266_0 = input.LA(1);

            if ( (LA266_0==HASH_SYMBOL) ) {
                int LA266_1 = input.LA(2);

                if ( (LA266_1==LBRACE) && (synpred29_Css3())) {
                    alt266=1;
                }
                else if ( (LA266_1==IDENT||LA266_1==COLON||LA266_1==WS||LA266_1==MINUS||(LA266_1>=HASH_SYMBOL && LA266_1<=DOT)||(LA266_1>=NL && LA266_1<=COMMENT)) ) {
                    alt266=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA266_0==IDENT||LA266_0==MINUS||(LA266_0>=HASH && LA266_0<=DOT)) ) {
                alt266=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 266, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(266);}

            switch (alt266) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1156:13: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
                    {
                    dbg.location(1156,50);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression6887);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1158:13: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH )
                    {
                    dbg.location(1158,13);
                    if ( input.LA(1)==IDENT||input.LA(1)==MINUS||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=DOT) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(266);}

            dbg.location(1160,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1160:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*
            try { dbg.enterSubRule(269);

            loop269:
            do {
                int alt269=2;
                try { dbg.enterDecision(269, decisionCanBacktrack[269]);

                try {
                    isCyclicDecision = true;
                    alt269 = dfa269.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(269);}

                switch (alt269) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:13: ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
            	    {
            	    dbg.location(1161,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:13: ( ws )?
            	    int alt267=2;
            	    try { dbg.enterSubRule(267);
            	    try { dbg.enterDecision(267, decisionCanBacktrack[267]);

            	    int LA267_0 = input.LA(1);

            	    if ( (LA267_0==WS||(LA267_0>=NL && LA267_0<=COMMENT)) ) {
            	        alt267=1;
            	    }
            	    } finally {dbg.exitDecision(267);}

            	    switch (alt267) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:13: ws
            	            {
            	            dbg.location(1161,13);
            	            pushFollow(FOLLOW_ws_in_sass_declaration_interpolation_expression6968);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(267);}

            	    dbg.location(1162,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1162:13: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
            	    int alt268=2;
            	    try { dbg.enterSubRule(268);
            	    try { dbg.enterDecision(268, decisionCanBacktrack[268]);

            	    int LA268_0 = input.LA(1);

            	    if ( (LA268_0==HASH_SYMBOL) ) {
            	        int LA268_1 = input.LA(2);

            	        if ( (LA268_1==LBRACE) && (synpred30_Css3())) {
            	            alt268=1;
            	        }
            	        else if ( (LA268_1==IDENT||LA268_1==COLON||LA268_1==WS||LA268_1==MINUS||(LA268_1>=HASH_SYMBOL && LA268_1<=DOT)||(LA268_1>=NL && LA268_1<=COMMENT)) ) {
            	            alt268=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return ;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 268, 1, input);

            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	    }
            	    else if ( (LA268_0==IDENT||LA268_0==MINUS||(LA268_0>=HASH && LA268_0<=DOT)) ) {
            	        alt268=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 268, 0, input);

            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(268);}

            	    switch (alt268) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1163:17: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
            	            {
            	            dbg.location(1163,54);
            	            pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7005);
            	            sass_interpolation_expression_var();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1165:17: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH )
            	            {
            	            dbg.location(1165,17);
            	            if ( input.LA(1)==IDENT||input.LA(1)==MINUS||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=DOT) ) {
            	                input.consume();
            	                state.errorRecovery=false;state.failed=false;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return ;}
            	                MismatchedSetException mse = new MismatchedSetException(null,input);
            	                dbg.recognitionException(mse);
            	                throw mse;
            	            }


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(268);}


            	    }
            	    break;

            	default :
            	    break loop269;
                }
            } while (true);
            } finally {dbg.exitSubRule(269);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1169, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_declaration_interpolation_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_declaration_interpolation_expression"


    // $ANTLR start "sass_interpolation_expression_var"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1209:1: sass_interpolation_expression_var : HASH_SYMBOL LBRACE cp_expression RBRACE ;
    public final void sass_interpolation_expression_var() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_interpolation_expression_var");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1209, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:5: ( HASH_SYMBOL LBRACE cp_expression RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1211:9: HASH_SYMBOL LBRACE cp_expression RBRACE
            {
            dbg.location(1211,9);
            match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var7156); if (state.failed) return ;
            dbg.location(1211,21);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_interpolation_expression_var7158); if (state.failed) return ;
            dbg.location(1211,28);
            pushFollow(FOLLOW_cp_expression_in_sass_interpolation_expression_var7160);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1211,42);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_interpolation_expression_var7162); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1212, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_interpolation_expression_var");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_interpolation_expression_var"


    // $ANTLR start "sass_nested_properties"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:1: sass_nested_properties : property COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void sass_nested_properties() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_nested_properties");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1232, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1233:5: ( property COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1234:5: property COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(1234,5);
            pushFollow(FOLLOW_property_in_sass_nested_properties7206);
            property();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1234,14);
            match(input,COLON,FOLLOW_COLON_in_sass_nested_properties7208); if (state.failed) return ;
            dbg.location(1234,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1234:20: ( ws )?
            int alt270=2;
            try { dbg.enterSubRule(270);
            try { dbg.enterDecision(270, decisionCanBacktrack[270]);

            int LA270_0 = input.LA(1);

            if ( (LA270_0==WS||(LA270_0>=NL && LA270_0<=COMMENT)) ) {
                alt270=1;
            }
            } finally {dbg.exitDecision(270);}

            switch (alt270) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1234:20: ws
                    {
                    dbg.location(1234,20);
                    pushFollow(FOLLOW_ws_in_sass_nested_properties7210);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(270);}

            dbg.location(1234,24);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1234:24: ( propertyValue ( ws )? )?
            int alt272=2;
            try { dbg.enterSubRule(272);
            try { dbg.enterDecision(272, decisionCanBacktrack[272]);

            int LA272_0 = input.LA(1);

            if ( ((LA272_0>=IDENT && LA272_0<=URI)||LA272_0==MEDIA_SYM||LA272_0==GEN||LA272_0==AT_IDENT||LA272_0==PERCENTAGE||(LA272_0>=MINUS && LA272_0<=PLUS)||(LA272_0>=HASH_SYMBOL && LA272_0<=HASH)||LA272_0==SASS_VAR||(LA272_0>=NUMBER && LA272_0<=DIMENSION)) ) {
                alt272=1;
            }
            } finally {dbg.exitDecision(272);}

            switch (alt272) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1234:25: propertyValue ( ws )?
                    {
                    dbg.location(1234,25);
                    pushFollow(FOLLOW_propertyValue_in_sass_nested_properties7214);
                    propertyValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1234,39);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1234:39: ( ws )?
                    int alt271=2;
                    try { dbg.enterSubRule(271);
                    try { dbg.enterDecision(271, decisionCanBacktrack[271]);

                    int LA271_0 = input.LA(1);

                    if ( (LA271_0==WS||(LA271_0>=NL && LA271_0<=COMMENT)) ) {
                        alt271=1;
                    }
                    } finally {dbg.exitDecision(271);}

                    switch (alt271) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1234:39: ws
                            {
                            dbg.location(1234,39);
                            pushFollow(FOLLOW_ws_in_sass_nested_properties7216);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(271);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(272);}

            dbg.location(1234,45);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_nested_properties7221); if (state.failed) return ;
            dbg.location(1234,52);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1234:52: ( ws )?
            int alt273=2;
            try { dbg.enterSubRule(273);
            try { dbg.enterDecision(273, decisionCanBacktrack[273]);

            int LA273_0 = input.LA(1);

            if ( (LA273_0==WS||(LA273_0>=NL && LA273_0<=COMMENT)) ) {
                alt273=1;
            }
            } finally {dbg.exitDecision(273);}

            switch (alt273) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1234:52: ws
                    {
                    dbg.location(1234,52);
                    pushFollow(FOLLOW_ws_in_sass_nested_properties7223);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(273);}

            dbg.location(1234,56);
            pushFollow(FOLLOW_syncToFollow_in_sass_nested_properties7226);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1234,69);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1234:69: ( declarations )?
            int alt274=2;
            try { dbg.enterSubRule(274);
            try { dbg.enterDecision(274, decisionCanBacktrack[274]);

            int LA274_0 = input.LA(1);

            if ( (LA274_0==IDENT||(LA274_0>=IMPORT_SYM && LA274_0<=MEDIA_SYM)||LA274_0==GEN||LA274_0==COLON||LA274_0==AT_IDENT||LA274_0==MOZ_DOCUMENT_SYM||LA274_0==WEBKIT_KEYFRAMES_SYM||(LA274_0>=PAGE_SYM && LA274_0<=FONT_FACE_SYM)||LA274_0==MINUS||LA274_0==GREATER||(LA274_0>=HASH_SYMBOL && LA274_0<=PIPE)||LA274_0==LESS_AND||LA274_0==SASS_VAR||(LA274_0>=SASS_MIXIN && LA274_0<=SASS_INCLUDE)||LA274_0==SASS_EXTEND||(LA274_0>=SASS_DEBUG && LA274_0<=SASS_IF)||(LA274_0>=SASS_FOR && LA274_0<=SASS_WHILE)||(LA274_0>=SASS_RETURN && LA274_0<=SASS_CONTENT)) ) {
                alt274=1;
            }
            } finally {dbg.exitDecision(274);}

            switch (alt274) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1234:69: declarations
                    {
                    dbg.location(1234,69);
                    pushFollow(FOLLOW_declarations_in_sass_nested_properties7228);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(274);}

            dbg.location(1234,83);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_nested_properties7231); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1235, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_nested_properties");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_nested_properties"


    // $ANTLR start "sass_extend"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1237:1: sass_extend : SASS_EXTEND ws simpleSelectorSequence ( ( ws )? SASS_OPTIONAL )? ;
    public final void sass_extend() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_extend");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1237, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:5: ( SASS_EXTEND ws simpleSelectorSequence ( ( ws )? SASS_OPTIONAL )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1239:5: SASS_EXTEND ws simpleSelectorSequence ( ( ws )? SASS_OPTIONAL )?
            {
            dbg.location(1239,5);
            match(input,SASS_EXTEND,FOLLOW_SASS_EXTEND_in_sass_extend7252); if (state.failed) return ;
            dbg.location(1239,17);
            pushFollow(FOLLOW_ws_in_sass_extend7254);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1239,20);
            pushFollow(FOLLOW_simpleSelectorSequence_in_sass_extend7256);
            simpleSelectorSequence();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1239,43);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1239:43: ( ( ws )? SASS_OPTIONAL )?
            int alt276=2;
            try { dbg.enterSubRule(276);
            try { dbg.enterDecision(276, decisionCanBacktrack[276]);

            try {
                isCyclicDecision = true;
                alt276 = dfa276.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(276);}

            switch (alt276) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1239:44: ( ws )? SASS_OPTIONAL
                    {
                    dbg.location(1239,44);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1239:44: ( ws )?
                    int alt275=2;
                    try { dbg.enterSubRule(275);
                    try { dbg.enterDecision(275, decisionCanBacktrack[275]);

                    int LA275_0 = input.LA(1);

                    if ( (LA275_0==WS||(LA275_0>=NL && LA275_0<=COMMENT)) ) {
                        alt275=1;
                    }
                    } finally {dbg.exitDecision(275);}

                    switch (alt275) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1239:44: ws
                            {
                            dbg.location(1239,44);
                            pushFollow(FOLLOW_ws_in_sass_extend7259);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(275);}

                    dbg.location(1239,48);
                    match(input,SASS_OPTIONAL,FOLLOW_SASS_OPTIONAL_in_sass_extend7262); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(276);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1240, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_extend");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_extend"


    // $ANTLR start "sass_extend_only_selector"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:1: sass_extend_only_selector : SASS_EXTEND_ONLY_SELECTOR ;
    public final void sass_extend_only_selector() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_extend_only_selector");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1242, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1243:5: ( SASS_EXTEND_ONLY_SELECTOR )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1244:5: SASS_EXTEND_ONLY_SELECTOR
            {
            dbg.location(1244,5);
            match(input,SASS_EXTEND_ONLY_SELECTOR,FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector7289); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1245, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_extend_only_selector");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_extend_only_selector"


    // $ANTLR start "sass_debug"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:1: sass_debug : ( SASS_DEBUG | SASS_WARN ) ws cp_expression ;
    public final void sass_debug() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_debug");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1247, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1248:5: ( ( SASS_DEBUG | SASS_WARN ) ws cp_expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1249:5: ( SASS_DEBUG | SASS_WARN ) ws cp_expression
            {
            dbg.location(1249,5);
            if ( (input.LA(1)>=SASS_DEBUG && input.LA(1)<=SASS_WARN) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(1249,32);
            pushFollow(FOLLOW_ws_in_sass_debug7320);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1249,35);
            pushFollow(FOLLOW_cp_expression_in_sass_debug7322);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1250, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_debug");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_debug"


    // $ANTLR start "sass_control"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1252:1: sass_control : ( sass_if | sass_for | sass_each | sass_while );
    public final void sass_control() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_control");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1252, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1253:5: ( sass_if | sass_for | sass_each | sass_while )
            int alt277=4;
            try { dbg.enterDecision(277, decisionCanBacktrack[277]);

            switch ( input.LA(1) ) {
            case SASS_IF:
                {
                alt277=1;
                }
                break;
            case SASS_FOR:
                {
                alt277=2;
                }
                break;
            case SASS_EACH:
                {
                alt277=3;
                }
                break;
            case SASS_WHILE:
                {
                alt277=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 277, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(277);}

            switch (alt277) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1254:5: sass_if
                    {
                    dbg.location(1254,5);
                    pushFollow(FOLLOW_sass_if_in_sass_control7347);
                    sass_if();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1254:15: sass_for
                    {
                    dbg.location(1254,15);
                    pushFollow(FOLLOW_sass_for_in_sass_control7351);
                    sass_for();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1254:26: sass_each
                    {
                    dbg.location(1254,26);
                    pushFollow(FOLLOW_sass_each_in_sass_control7355);
                    sass_each();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1254:38: sass_while
                    {
                    dbg.location(1254,38);
                    pushFollow(FOLLOW_sass_while_in_sass_control7359);
                    sass_while();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1255, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_control");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_control"


    // $ANTLR start "sass_if"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1257:1: sass_if : SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? ;
    public final void sass_if() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_if");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1257, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1258:5: ( SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:5: SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
            {
            dbg.location(1259,5);
            match(input,SASS_IF,FOLLOW_SASS_IF_in_sass_if7380); if (state.failed) return ;
            dbg.location(1259,13);
            pushFollow(FOLLOW_ws_in_sass_if7382);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1259,16);
            pushFollow(FOLLOW_sass_control_expression_in_sass_if7384);
            sass_control_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1259,40);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:40: ( ws )?
            int alt278=2;
            try { dbg.enterSubRule(278);
            try { dbg.enterDecision(278, decisionCanBacktrack[278]);

            int LA278_0 = input.LA(1);

            if ( (LA278_0==WS||(LA278_0>=NL && LA278_0<=COMMENT)) ) {
                alt278=1;
            }
            } finally {dbg.exitDecision(278);}

            switch (alt278) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:40: ws
                    {
                    dbg.location(1259,40);
                    pushFollow(FOLLOW_ws_in_sass_if7386);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(278);}

            dbg.location(1259,44);
            pushFollow(FOLLOW_sass_control_block_in_sass_if7389);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1259,63);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:63: ( ( ws )? sass_else )?
            int alt280=2;
            try { dbg.enterSubRule(280);
            try { dbg.enterDecision(280, decisionCanBacktrack[280]);

            try {
                isCyclicDecision = true;
                alt280 = dfa280.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(280);}

            switch (alt280) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:64: ( ws )? sass_else
                    {
                    dbg.location(1259,64);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:64: ( ws )?
                    int alt279=2;
                    try { dbg.enterSubRule(279);
                    try { dbg.enterDecision(279, decisionCanBacktrack[279]);

                    int LA279_0 = input.LA(1);

                    if ( (LA279_0==WS||(LA279_0>=NL && LA279_0<=COMMENT)) ) {
                        alt279=1;
                    }
                    } finally {dbg.exitDecision(279);}

                    switch (alt279) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:64: ws
                            {
                            dbg.location(1259,64);
                            pushFollow(FOLLOW_ws_in_sass_if7392);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(279);}

                    dbg.location(1259,68);
                    pushFollow(FOLLOW_sass_else_in_sass_if7395);
                    sass_else();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(280);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1260, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_if");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_if"


    // $ANTLR start "sass_else"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1262:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );
    public final void sass_else() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_else");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1262, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:5: ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
            int alt287=2;
            try { dbg.enterDecision(287, decisionCanBacktrack[287]);

            try {
                isCyclicDecision = true;
                alt287 = dfa287.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(287);}

            switch (alt287) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:5: SASS_ELSE ( ws )? sass_control_block
                    {
                    dbg.location(1264,5);
                    match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else7422); if (state.failed) return ;
                    dbg.location(1264,15);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:15: ( ws )?
                    int alt281=2;
                    try { dbg.enterSubRule(281);
                    try { dbg.enterDecision(281, decisionCanBacktrack[281]);

                    int LA281_0 = input.LA(1);

                    if ( (LA281_0==WS||(LA281_0>=NL && LA281_0<=COMMENT)) ) {
                        alt281=1;
                    }
                    } finally {dbg.exitDecision(281);}

                    switch (alt281) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:15: ws
                            {
                            dbg.location(1264,15);
                            pushFollow(FOLLOW_ws_in_sass_else7424);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(281);}

                    dbg.location(1264,19);
                    pushFollow(FOLLOW_sass_control_block_in_sass_else7427);
                    sass_control_block();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1266:5: SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
                    {
                    dbg.location(1266,5);
                    match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else7440); if (state.failed) return ;
                    dbg.location(1266,15);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1266:15: ( ws )?
                    int alt282=2;
                    try { dbg.enterSubRule(282);
                    try { dbg.enterDecision(282, decisionCanBacktrack[282]);

                    int LA282_0 = input.LA(1);

                    if ( (LA282_0==WS||(LA282_0>=NL && LA282_0<=COMMENT)) ) {
                        alt282=1;
                    }
                    } finally {dbg.exitDecision(282);}

                    switch (alt282) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1266:15: ws
                            {
                            dbg.location(1266,15);
                            pushFollow(FOLLOW_ws_in_sass_else7442);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(282);}

                    dbg.location(1266,19);
                    if ( !(evalPredicate(tokenNameEquals("if"),"tokenNameEquals(\"if\")")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "sass_else", "tokenNameEquals(\"if\")");
                    }
                    dbg.location(1266,44);
                    match(input,IDENT,FOLLOW_IDENT_in_sass_else7447); if (state.failed) return ;
                    dbg.location(1266,59);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1266:59: ( ws )?
                    int alt283=2;
                    try { dbg.enterSubRule(283);
                    try { dbg.enterDecision(283, decisionCanBacktrack[283]);

                    int LA283_0 = input.LA(1);

                    if ( (LA283_0==WS||(LA283_0>=NL && LA283_0<=COMMENT)) ) {
                        alt283=1;
                    }
                    } finally {dbg.exitDecision(283);}

                    switch (alt283) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1266:59: ws
                            {
                            dbg.location(1266,59);
                            pushFollow(FOLLOW_ws_in_sass_else7451);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(283);}

                    dbg.location(1266,63);
                    pushFollow(FOLLOW_sass_control_expression_in_sass_else7454);
                    sass_control_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1266,87);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1266:87: ( ws )?
                    int alt284=2;
                    try { dbg.enterSubRule(284);
                    try { dbg.enterDecision(284, decisionCanBacktrack[284]);

                    int LA284_0 = input.LA(1);

                    if ( (LA284_0==WS||(LA284_0>=NL && LA284_0<=COMMENT)) ) {
                        alt284=1;
                    }
                    } finally {dbg.exitDecision(284);}

                    switch (alt284) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1266:87: ws
                            {
                            dbg.location(1266,87);
                            pushFollow(FOLLOW_ws_in_sass_else7456);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(284);}

                    dbg.location(1266,91);
                    pushFollow(FOLLOW_sass_control_block_in_sass_else7459);
                    sass_control_block();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1266,110);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1266:110: ( ( ws )? sass_else )?
                    int alt286=2;
                    try { dbg.enterSubRule(286);
                    try { dbg.enterDecision(286, decisionCanBacktrack[286]);

                    try {
                        isCyclicDecision = true;
                        alt286 = dfa286.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(286);}

                    switch (alt286) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1266:111: ( ws )? sass_else
                            {
                            dbg.location(1266,111);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1266:111: ( ws )?
                            int alt285=2;
                            try { dbg.enterSubRule(285);
                            try { dbg.enterDecision(285, decisionCanBacktrack[285]);

                            int LA285_0 = input.LA(1);

                            if ( (LA285_0==WS||(LA285_0>=NL && LA285_0<=COMMENT)) ) {
                                alt285=1;
                            }
                            } finally {dbg.exitDecision(285);}

                            switch (alt285) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1266:111: ws
                                    {
                                    dbg.location(1266,111);
                                    pushFollow(FOLLOW_ws_in_sass_else7462);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(285);}

                            dbg.location(1266,115);
                            pushFollow(FOLLOW_sass_else_in_sass_else7465);
                            sass_else();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(286);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1267, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_else");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_else"


    // $ANTLR start "sass_control_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1269:1: sass_control_expression : cp_expression ;
    public final void sass_control_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_control_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1269, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1270:5: ( cp_expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1271:5: cp_expression
            {
            dbg.location(1271,5);
            pushFollow(FOLLOW_cp_expression_in_sass_control_expression7488);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1272, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_control_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_control_expression"


    // $ANTLR start "sass_for"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1274:1: sass_for : SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block ;
    public final void sass_for() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_for");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1274, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1275:5: ( SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1276:5: SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block
            {
            dbg.location(1276,5);
            match(input,SASS_FOR,FOLLOW_SASS_FOR_in_sass_for7513); if (state.failed) return ;
            dbg.location(1276,14);
            pushFollow(FOLLOW_ws_in_sass_for7515);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1276,17);
            pushFollow(FOLLOW_cp_variable_in_sass_for7517);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1276,29);
            pushFollow(FOLLOW_ws_in_sass_for7519);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1276,32);
            if ( !(evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "sass_for", "tokenNameEquals(\"from\")");
            }
            dbg.location(1276,59);
            match(input,IDENT,FOLLOW_IDENT_in_sass_for7523); if (state.failed) return ;
            dbg.location(1276,74);
            pushFollow(FOLLOW_ws_in_sass_for7527);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1276,77);
            pushFollow(FOLLOW_cp_math_expression_in_sass_for7529);
            cp_math_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1276,96);
            pushFollow(FOLLOW_ws_in_sass_for7531);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1276,99);
            if ( !(evalPredicate(tokenNameEquals("to")|tokenNameEquals("through"),"tokenNameEquals(\"to\")|tokenNameEquals(\"through\")")) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "sass_for", "tokenNameEquals(\"to\")|tokenNameEquals(\"through\")");
            }
            dbg.location(1276,151);
            match(input,IDENT,FOLLOW_IDENT_in_sass_for7535); if (state.failed) return ;
            dbg.location(1276,173);
            pushFollow(FOLLOW_ws_in_sass_for7539);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1276,176);
            pushFollow(FOLLOW_cp_math_expression_in_sass_for7541);
            cp_math_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1276,195);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1276:195: ( ws )?
            int alt288=2;
            try { dbg.enterSubRule(288);
            try { dbg.enterDecision(288, decisionCanBacktrack[288]);

            int LA288_0 = input.LA(1);

            if ( (LA288_0==WS||(LA288_0>=NL && LA288_0<=COMMENT)) ) {
                alt288=1;
            }
            } finally {dbg.exitDecision(288);}

            switch (alt288) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1276:195: ws
                    {
                    dbg.location(1276,195);
                    pushFollow(FOLLOW_ws_in_sass_for7543);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(288);}

            dbg.location(1276,199);
            pushFollow(FOLLOW_sass_control_block_in_sass_for7546);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1277, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_for");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_for"


    // $ANTLR start "sass_each"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1279:1: sass_each : SASS_EACH ws cp_variable ws {...}? IDENT ws cp_expression_list ( ws )? sass_control_block ;
    public final void sass_each() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_each");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1279, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1280:5: ( SASS_EACH ws cp_variable ws {...}? IDENT ws cp_expression_list ( ws )? sass_control_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:5: SASS_EACH ws cp_variable ws {...}? IDENT ws cp_expression_list ( ws )? sass_control_block
            {
            dbg.location(1281,5);
            match(input,SASS_EACH,FOLLOW_SASS_EACH_in_sass_each7567); if (state.failed) return ;
            dbg.location(1281,15);
            pushFollow(FOLLOW_ws_in_sass_each7569);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1281,18);
            pushFollow(FOLLOW_cp_variable_in_sass_each7571);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1281,30);
            pushFollow(FOLLOW_ws_in_sass_each7573);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1281,33);
            if ( !(evalPredicate(tokenNameEquals("in"),"tokenNameEquals(\"in\")")) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "sass_each", "tokenNameEquals(\"in\")");
            }
            dbg.location(1281,58);
            match(input,IDENT,FOLLOW_IDENT_in_sass_each7577); if (state.failed) return ;
            dbg.location(1281,71);
            pushFollow(FOLLOW_ws_in_sass_each7581);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1281,74);
            pushFollow(FOLLOW_cp_expression_list_in_sass_each7583);
            cp_expression_list();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1281,93);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:93: ( ws )?
            int alt289=2;
            try { dbg.enterSubRule(289);
            try { dbg.enterDecision(289, decisionCanBacktrack[289]);

            int LA289_0 = input.LA(1);

            if ( (LA289_0==WS||(LA289_0>=NL && LA289_0<=COMMENT)) ) {
                alt289=1;
            }
            } finally {dbg.exitDecision(289);}

            switch (alt289) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:93: ws
                    {
                    dbg.location(1281,93);
                    pushFollow(FOLLOW_ws_in_sass_each7585);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(289);}

            dbg.location(1281,97);
            pushFollow(FOLLOW_sass_control_block_in_sass_each7588);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1282, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_each");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_each"


    // $ANTLR start "sass_while"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1284:1: sass_while : SASS_WHILE ws sass_control_expression ( ws )? sass_control_block ;
    public final void sass_while() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_while");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1284, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1285:5: ( SASS_WHILE ws sass_control_expression ( ws )? sass_control_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1286:5: SASS_WHILE ws sass_control_expression ( ws )? sass_control_block
            {
            dbg.location(1286,5);
            match(input,SASS_WHILE,FOLLOW_SASS_WHILE_in_sass_while7613); if (state.failed) return ;
            dbg.location(1286,16);
            pushFollow(FOLLOW_ws_in_sass_while7615);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1286,19);
            pushFollow(FOLLOW_sass_control_expression_in_sass_while7617);
            sass_control_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1286,43);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1286:43: ( ws )?
            int alt290=2;
            try { dbg.enterSubRule(290);
            try { dbg.enterDecision(290, decisionCanBacktrack[290]);

            int LA290_0 = input.LA(1);

            if ( (LA290_0==WS||(LA290_0>=NL && LA290_0<=COMMENT)) ) {
                alt290=1;
            }
            } finally {dbg.exitDecision(290);}

            switch (alt290) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1286:43: ws
                    {
                    dbg.location(1286,43);
                    pushFollow(FOLLOW_ws_in_sass_while7619);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(290);}

            dbg.location(1286,47);
            pushFollow(FOLLOW_sass_control_block_in_sass_while7622);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1287, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_while");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_while"


    // $ANTLR start "sass_control_block"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1289:1: sass_control_block : LBRACE ( ws )? ( declarations )? RBRACE ;
    public final void sass_control_block() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_control_block");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1289, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1290:5: ( LBRACE ( ws )? ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1291:5: LBRACE ( ws )? ( declarations )? RBRACE
            {
            dbg.location(1291,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_control_block7643); if (state.failed) return ;
            dbg.location(1291,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1291:12: ( ws )?
            int alt291=2;
            try { dbg.enterSubRule(291);
            try { dbg.enterDecision(291, decisionCanBacktrack[291]);

            int LA291_0 = input.LA(1);

            if ( (LA291_0==WS||(LA291_0>=NL && LA291_0<=COMMENT)) ) {
                alt291=1;
            }
            } finally {dbg.exitDecision(291);}

            switch (alt291) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1291:12: ws
                    {
                    dbg.location(1291,12);
                    pushFollow(FOLLOW_ws_in_sass_control_block7645);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(291);}

            dbg.location(1291,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1291:16: ( declarations )?
            int alt292=2;
            try { dbg.enterSubRule(292);
            try { dbg.enterDecision(292, decisionCanBacktrack[292]);

            int LA292_0 = input.LA(1);

            if ( (LA292_0==IDENT||(LA292_0>=IMPORT_SYM && LA292_0<=MEDIA_SYM)||LA292_0==GEN||LA292_0==COLON||LA292_0==AT_IDENT||LA292_0==MOZ_DOCUMENT_SYM||LA292_0==WEBKIT_KEYFRAMES_SYM||(LA292_0>=PAGE_SYM && LA292_0<=FONT_FACE_SYM)||LA292_0==MINUS||LA292_0==GREATER||(LA292_0>=HASH_SYMBOL && LA292_0<=PIPE)||LA292_0==LESS_AND||LA292_0==SASS_VAR||(LA292_0>=SASS_MIXIN && LA292_0<=SASS_INCLUDE)||LA292_0==SASS_EXTEND||(LA292_0>=SASS_DEBUG && LA292_0<=SASS_IF)||(LA292_0>=SASS_FOR && LA292_0<=SASS_WHILE)||(LA292_0>=SASS_RETURN && LA292_0<=SASS_CONTENT)) ) {
                alt292=1;
            }
            } finally {dbg.exitDecision(292);}

            switch (alt292) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1291:16: declarations
                    {
                    dbg.location(1291,16);
                    pushFollow(FOLLOW_declarations_in_sass_control_block7648);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(292);}

            dbg.location(1291,30);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_control_block7651); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1292, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_control_block");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_control_block"


    // $ANTLR start "sass_function_declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1294:1: sass_function_declaration : SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE ;
    public final void sass_function_declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_function_declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1294, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1295:5: ( SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:5: SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE
            {
            dbg.location(1300,5);
            match(input,SASS_FUNCTION,FOLLOW_SASS_FUNCTION_in_sass_function_declaration7697); if (state.failed) return ;
            dbg.location(1300,19);
            pushFollow(FOLLOW_ws_in_sass_function_declaration7699);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1300,22);
            pushFollow(FOLLOW_sass_function_name_in_sass_function_declaration7701);
            sass_function_name();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1300,41);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:41: ( ws )?
            int alt293=2;
            try { dbg.enterSubRule(293);
            try { dbg.enterDecision(293, decisionCanBacktrack[293]);

            int LA293_0 = input.LA(1);

            if ( (LA293_0==WS||(LA293_0>=NL && LA293_0<=COMMENT)) ) {
                alt293=1;
            }
            } finally {dbg.exitDecision(293);}

            switch (alt293) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:41: ws
                    {
                    dbg.location(1300,41);
                    pushFollow(FOLLOW_ws_in_sass_function_declaration7703);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(293);}

            dbg.location(1300,45);
            match(input,LPAREN,FOLLOW_LPAREN_in_sass_function_declaration7706); if (state.failed) return ;
            dbg.location(1300,52);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:52: ( cp_args_list )?
            int alt294=2;
            try { dbg.enterSubRule(294);
            try { dbg.enterDecision(294, decisionCanBacktrack[294]);

            int LA294_0 = input.LA(1);

            if ( (LA294_0==MEDIA_SYM||LA294_0==AT_IDENT||LA294_0==SASS_VAR||(LA294_0>=LESS_DOTS && LA294_0<=LESS_REST)) ) {
                alt294=1;
            }
            } finally {dbg.exitDecision(294);}

            switch (alt294) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:52: cp_args_list
                    {
                    dbg.location(1300,52);
                    pushFollow(FOLLOW_cp_args_list_in_sass_function_declaration7708);
                    cp_args_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(294);}

            dbg.location(1300,66);
            match(input,RPAREN,FOLLOW_RPAREN_in_sass_function_declaration7711); if (state.failed) return ;
            dbg.location(1300,73);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:73: ( ws )?
            int alt295=2;
            try { dbg.enterSubRule(295);
            try { dbg.enterDecision(295, decisionCanBacktrack[295]);

            int LA295_0 = input.LA(1);

            if ( (LA295_0==WS||(LA295_0>=NL && LA295_0<=COMMENT)) ) {
                alt295=1;
            }
            } finally {dbg.exitDecision(295);}

            switch (alt295) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:73: ws
                    {
                    dbg.location(1300,73);
                    pushFollow(FOLLOW_ws_in_sass_function_declaration7713);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(295);}

            dbg.location(1300,77);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_function_declaration7716); if (state.failed) return ;
            dbg.location(1300,84);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:84: ( ws )?
            int alt296=2;
            try { dbg.enterSubRule(296);
            try { dbg.enterDecision(296, decisionCanBacktrack[296]);

            int LA296_0 = input.LA(1);

            if ( (LA296_0==WS||(LA296_0>=NL && LA296_0<=COMMENT)) ) {
                alt296=1;
            }
            } finally {dbg.exitDecision(296);}

            switch (alt296) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:84: ws
                    {
                    dbg.location(1300,84);
                    pushFollow(FOLLOW_ws_in_sass_function_declaration7718);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(296);}

            dbg.location(1300,88);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:88: ( declarations )?
            int alt297=2;
            try { dbg.enterSubRule(297);
            try { dbg.enterDecision(297, decisionCanBacktrack[297]);

            int LA297_0 = input.LA(1);

            if ( (LA297_0==IDENT||(LA297_0>=IMPORT_SYM && LA297_0<=MEDIA_SYM)||LA297_0==GEN||LA297_0==COLON||LA297_0==AT_IDENT||LA297_0==MOZ_DOCUMENT_SYM||LA297_0==WEBKIT_KEYFRAMES_SYM||(LA297_0>=PAGE_SYM && LA297_0<=FONT_FACE_SYM)||LA297_0==MINUS||LA297_0==GREATER||(LA297_0>=HASH_SYMBOL && LA297_0<=PIPE)||LA297_0==LESS_AND||LA297_0==SASS_VAR||(LA297_0>=SASS_MIXIN && LA297_0<=SASS_INCLUDE)||LA297_0==SASS_EXTEND||(LA297_0>=SASS_DEBUG && LA297_0<=SASS_IF)||(LA297_0>=SASS_FOR && LA297_0<=SASS_WHILE)||(LA297_0>=SASS_RETURN && LA297_0<=SASS_CONTENT)) ) {
                alt297=1;
            }
            } finally {dbg.exitDecision(297);}

            switch (alt297) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:88: declarations
                    {
                    dbg.location(1300,88);
                    pushFollow(FOLLOW_declarations_in_sass_function_declaration7721);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(297);}

            dbg.location(1300,102);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_function_declaration7724); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1301, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_function_declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_function_declaration"


    // $ANTLR start "sass_function_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1303:1: sass_function_name : IDENT ;
    public final void sass_function_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_function_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1303, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1304:5: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1305:5: IDENT
            {
            dbg.location(1305,5);
            match(input,IDENT,FOLLOW_IDENT_in_sass_function_name7749); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1306, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_function_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_function_name"


    // $ANTLR start "sass_function_return"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1308:1: sass_function_return : SASS_RETURN ws cp_expression ;
    public final void sass_function_return() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_function_return");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1308, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1309:5: ( SASS_RETURN ws cp_expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1310:5: SASS_RETURN ws cp_expression
            {
            dbg.location(1310,5);
            match(input,SASS_RETURN,FOLLOW_SASS_RETURN_in_sass_function_return7770); if (state.failed) return ;
            dbg.location(1310,17);
            pushFollow(FOLLOW_ws_in_sass_function_return7772);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1310,20);
            pushFollow(FOLLOW_cp_expression_in_sass_function_return7774);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1311, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_function_return");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_function_return"


    // $ANTLR start "sass_content"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1313:1: sass_content : SASS_CONTENT ;
    public final void sass_content() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_content");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1313, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1314:5: ( SASS_CONTENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1315:5: SASS_CONTENT
            {
            dbg.location(1315,5);
            match(input,SASS_CONTENT,FOLLOW_SASS_CONTENT_in_sass_content7799); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1316, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_content");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_content"

    // $ANTLR start synpred1_Css3
    public final void synpred1_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:44: ( ( ws )? mediaQueryList )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:45: ( ws )? mediaQueryList
        {
        dbg.location(369,45);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:45: ( ws )?
        int alt298=2;
        try { dbg.enterSubRule(298);
        try { dbg.enterDecision(298, decisionCanBacktrack[298]);

        int LA298_0 = input.LA(1);

        if ( (LA298_0==WS||(LA298_0>=NL && LA298_0<=COMMENT)) ) {
            alt298=1;
        }
        } finally {dbg.exitDecision(298);}

        switch (alt298) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:45: ws
                {
                dbg.location(369,45);
                pushFollow(FOLLOW_ws_in_synpred1_Css3370);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(298);}

        dbg.location(369,49);
        pushFollow(FOLLOW_mediaQueryList_in_synpred1_Css3373);
        mediaQueryList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_Css3

    // $ANTLR start synpred2_Css3
    public final void synpred2_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:98: ( ( ws )? mediaQueryList )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:99: ( ws )? mediaQueryList
        {
        dbg.location(372,99);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:99: ( ws )?
        int alt299=2;
        try { dbg.enterSubRule(299);
        try { dbg.enterDecision(299, decisionCanBacktrack[299]);

        int LA299_0 = input.LA(1);

        if ( (LA299_0==WS||(LA299_0>=NL && LA299_0<=COMMENT)) ) {
            alt299=1;
        }
        } finally {dbg.exitDecision(299);}

        switch (alt299) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:99: ws
                {
                dbg.location(372,99);
                pushFollow(FOLLOW_ws_in_synpred2_Css3434);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(299);}

        dbg.location(372,103);
        pushFollow(FOLLOW_mediaQueryList_in_synpred2_Css3437);
        mediaQueryList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_Css3

    // $ANTLR start synpred3_Css3
    public final void synpred3_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:13: ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI | sass_declaration_interpolation_expression COLON )
        int alt302=2;
        try { dbg.enterDecision(302, decisionCanBacktrack[302]);

        try {
            isCyclicDecision = true;
            alt302 = dfa302.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(302);}

        switch (alt302) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:14: (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI
                {
                dbg.location(385,14);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:14: (~ ( LBRACE | SEMI | RBRACE | COLON ) )+
                int cnt300=0;
                try { dbg.enterSubRule(300);

                loop300:
                do {
                    int alt300=2;
                    try { dbg.enterDecision(300, decisionCanBacktrack[300]);

                    int LA300_0 = input.LA(1);

                    if ( (LA300_0==NAMESPACE_SYM||(LA300_0>=IDENT && LA300_0<=MEDIA_SYM)||(LA300_0>=AND && LA300_0<=LPAREN)||(LA300_0>=RPAREN && LA300_0<=LINE_COMMENT)) ) {
                        alt300=1;
                    }


                    } finally {dbg.exitDecision(300);}

                    switch (alt300) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:14: ~ ( LBRACE | SEMI | RBRACE | COLON )
                	    {
                	    dbg.location(385,14);
                	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=LPAREN)||(input.LA(1)>=RPAREN && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    if ( cnt300 >= 1 ) break loop300;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(300, input);
                            dbg.recognitionException(eee);

                            throw eee;
                    }
                    cnt300++;
                } while (true);
                } finally {dbg.exitSubRule(300);}

                dbg.location(385,43);
                match(input,COLON,FOLLOW_COLON_in_synpred3_Css3566); if (state.failed) return ;
                dbg.location(385,49);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:49: (~ ( SEMI | LBRACE | RBRACE ) )+
                int cnt301=0;
                try { dbg.enterSubRule(301);

                loop301:
                do {
                    int alt301=2;
                    try { dbg.enterDecision(301, decisionCanBacktrack[301]);

                    int LA301_0 = input.LA(1);

                    if ( (LA301_0==NAMESPACE_SYM||(LA301_0>=IDENT && LA301_0<=MEDIA_SYM)||(LA301_0>=AND && LA301_0<=LINE_COMMENT)) ) {
                        alt301=1;
                    }


                    } finally {dbg.exitDecision(301);}

                    switch (alt301) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:49: ~ ( SEMI | LBRACE | RBRACE )
                	    {
                	    dbg.location(385,49);
                	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    if ( cnt301 >= 1 ) break loop301;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(301, input);
                            dbg.recognitionException(eee);

                            throw eee;
                    }
                    cnt301++;
                } while (true);
                } finally {dbg.exitSubRule(301);}

                dbg.location(385,72);
                match(input,SEMI,FOLLOW_SEMI_in_synpred3_Css3578); if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:79: sass_declaration_interpolation_expression COLON
                {
                dbg.location(385,79);
                pushFollow(FOLLOW_sass_declaration_interpolation_expression_in_synpred3_Css3582);
                sass_declaration_interpolation_expression();

                state._fsp--;
                if (state.failed) return ;
                dbg.location(385,121);
                match(input,COLON,FOLLOW_COLON_in_synpred3_Css3584); if (state.failed) return ;

                }
                break;

        }}
    // $ANTLR end synpred3_Css3

    // $ANTLR start synpred4_Css3
    public final void synpred4_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:17: ( ( ws )? COMMA ( ws )? mediaQuery )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:18: ( ws )? COMMA ( ws )? mediaQuery
        {
        dbg.location(402,18);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:18: ( ws )?
        int alt303=2;
        try { dbg.enterSubRule(303);
        try { dbg.enterDecision(303, decisionCanBacktrack[303]);

        int LA303_0 = input.LA(1);

        if ( (LA303_0==WS||(LA303_0>=NL && LA303_0<=COMMENT)) ) {
            alt303=1;
        }
        } finally {dbg.exitDecision(303);}

        switch (alt303) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:18: ws
                {
                dbg.location(402,18);
                pushFollow(FOLLOW_ws_in_synpred4_Css3844);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(303);}

        dbg.location(402,22);
        match(input,COMMA,FOLLOW_COMMA_in_synpred4_Css3847); if (state.failed) return ;
        dbg.location(402,28);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:28: ( ws )?
        int alt304=2;
        try { dbg.enterSubRule(304);
        try { dbg.enterDecision(304, decisionCanBacktrack[304]);

        int LA304_0 = input.LA(1);

        if ( (LA304_0==WS||(LA304_0>=NL && LA304_0<=COMMENT)) ) {
            alt304=1;
        }
        } finally {dbg.exitDecision(304);}

        switch (alt304) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:28: ws
                {
                dbg.location(402,28);
                pushFollow(FOLLOW_ws_in_synpred4_Css3849);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(304);}

        dbg.location(402,32);
        pushFollow(FOLLOW_mediaQuery_in_synpred4_Css3852);
        mediaQuery();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_Css3

    // $ANTLR start synpred5_Css3
    public final void synpred5_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:432:9: ( cp_mixin_call ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:432:10: cp_mixin_call ( ws )? SEMI
        {
        dbg.location(432,10);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred5_Css31085);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(432,24);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:432:24: ( ws )?
        int alt305=2;
        try { dbg.enterSubRule(305);
        try { dbg.enterDecision(305, decisionCanBacktrack[305]);

        int LA305_0 = input.LA(1);

        if ( (LA305_0==WS||(LA305_0>=NL && LA305_0<=COMMENT)) ) {
            alt305=1;
        }
        } finally {dbg.exitDecision(305);}

        switch (alt305) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:432:24: ws
                {
                dbg.location(432,24);
                pushFollow(FOLLOW_ws_in_synpred5_Css31087);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(305);}

        dbg.location(432,28);
        match(input,SEMI,FOLLOW_SEMI_in_synpred5_Css31090); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_Css3

    // $ANTLR start synpred6_Css3
    public final void synpred6_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:572:9: ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:572:10: (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE
        {
        dbg.location(572,10);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:572:10: (~ ( HASH_SYMBOL | COLON ) )*
        try { dbg.enterSubRule(306);

        loop306:
        do {
            int alt306=2;
            try { dbg.enterDecision(306, decisionCanBacktrack[306]);

            int LA306_0 = input.LA(1);

            if ( ((LA306_0>=NAMESPACE_SYM && LA306_0<=LPAREN)||(LA306_0>=RPAREN && LA306_0<=TILDE)||(LA306_0>=HASH && LA306_0<=LINE_COMMENT)) ) {
                alt306=1;
            }


            } finally {dbg.exitDecision(306);}

            switch (alt306) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:572:10: ~ ( HASH_SYMBOL | COLON )
        	    {
        	    dbg.location(572,10);
        	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=LPAREN)||(input.LA(1)>=RPAREN && input.LA(1)<=TILDE)||(input.LA(1)>=HASH && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop306;
            }
        } while (true);
        } finally {dbg.exitSubRule(306);}

        dbg.location(572,32);
        match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_synpred6_Css32233); if (state.failed) return ;
        dbg.location(572,44);
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred6_Css32235); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_Css3

    // $ANTLR start synpred7_Css3
    public final void synpred7_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:585:9: ( cp_mixin_declaration )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:585:10: cp_mixin_declaration
        {
        dbg.location(585,10);
        pushFollow(FOLLOW_cp_mixin_declaration_in_synpred7_Css32333);
        cp_mixin_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_Css3

    // $ANTLR start synpred8_Css3
    public final void synpred8_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:606:23: ( ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:606:24: ( ws )? SEMI
        {
        dbg.location(606,24);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:606:24: ( ws )?
        int alt307=2;
        try { dbg.enterSubRule(307);
        try { dbg.enterDecision(307, decisionCanBacktrack[307]);

        int LA307_0 = input.LA(1);

        if ( (LA307_0==WS||(LA307_0>=NL && LA307_0<=COMMENT)) ) {
            alt307=1;
        }
        } finally {dbg.exitDecision(307);}

        switch (alt307) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:606:24: ws
                {
                dbg.location(606,24);
                pushFollow(FOLLOW_ws_in_synpred8_Css32443);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(307);}

        dbg.location(606,28);
        match(input,SEMI,FOLLOW_SEMI_in_synpred8_Css32446); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_Css3

    // $ANTLR start synpred9_Css3
    public final void synpred9_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:5: ( cp_variable_declaration )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:6: cp_variable_declaration
        {
        dbg.location(619,6);
        pushFollow(FOLLOW_cp_variable_declaration_in_synpred9_Css32493);
        cp_variable_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_Css3

    // $ANTLR start synpred10_Css3
    public final void synpred10_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:620:7: ( sass_nested_properties )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:620:8: sass_nested_properties
        {
        dbg.location(620,8);
        pushFollow(FOLLOW_sass_nested_properties_in_synpred10_Css32507);
        sass_nested_properties();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_Css3

    // $ANTLR start synpred11_Css3
    public final void synpred11_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:7: ( propertyDeclaration )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:8: propertyDeclaration
        {
        dbg.location(621,8);
        pushFollow(FOLLOW_propertyDeclaration_in_synpred11_Css32521);
        propertyDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_Css3

    // $ANTLR start synpred12_Css3
    public final void synpred12_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:7: ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )* COLON )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:8: (~ ( LBRACE | SEMI | RBRACE | COLON ) )* COLON
        {
        dbg.location(623,8);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:8: (~ ( LBRACE | SEMI | RBRACE | COLON ) )*
        try { dbg.enterSubRule(308);

        loop308:
        do {
            int alt308=2;
            try { dbg.enterDecision(308, decisionCanBacktrack[308]);

            int LA308_0 = input.LA(1);

            if ( (LA308_0==NAMESPACE_SYM||(LA308_0>=IDENT && LA308_0<=MEDIA_SYM)||(LA308_0>=AND && LA308_0<=LPAREN)||(LA308_0>=RPAREN && LA308_0<=LINE_COMMENT)) ) {
                alt308=1;
            }


            } finally {dbg.exitDecision(308);}

            switch (alt308) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:8: ~ ( LBRACE | SEMI | RBRACE | COLON )
        	    {
        	    dbg.location(623,8);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=LPAREN)||(input.LA(1)>=RPAREN && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop308;
            }
        } while (true);
        } finally {dbg.exitSubRule(308);}

        dbg.location(623,37);
        match(input,COLON,FOLLOW_COLON_in_synpred12_Css32552); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_Css3

    // $ANTLR start synpred13_Css3
    public final void synpred13_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:624:7: ( rule )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:624:8: rule
        {
        dbg.location(624,8);
        pushFollow(FOLLOW_rule_in_synpred13_Css32566);
        rule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_Css3

    // $ANTLR start synpred14_Css3
    public final void synpred14_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:642:9: ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:642:11: (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE
        {
        dbg.location(642,11);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:642:11: (~ ( HASH_SYMBOL | LBRACE ) )*
        try { dbg.enterSubRule(309);

        loop309:
        do {
            int alt309=2;
            try { dbg.enterDecision(309, decisionCanBacktrack[309]);

            int LA309_0 = input.LA(1);

            if ( ((LA309_0>=NAMESPACE_SYM && LA309_0<=MEDIA_SYM)||(LA309_0>=RBRACE && LA309_0<=TILDE)||(LA309_0>=HASH && LA309_0<=LINE_COMMENT)) ) {
                alt309=1;
            }


            } finally {dbg.exitDecision(309);}

            switch (alt309) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:642:11: ~ ( HASH_SYMBOL | LBRACE )
        	    {
        	    dbg.location(642,11);
        	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=RBRACE && input.LA(1)<=TILDE)||(input.LA(1)>=HASH && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop309;
            }
        } while (true);
        } finally {dbg.exitSubRule(309);}

        dbg.location(642,38);
        match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_synpred14_Css32729); if (state.failed) return ;
        dbg.location(642,50);
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred14_Css32731); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_Css3

    // $ANTLR start synpred15_Css3
    public final void synpred15_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:18: ( ( ws )? esPred )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:19: ( ws )? esPred
        {
        dbg.location(660,19);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:19: ( ws )?
        int alt310=2;
        try { dbg.enterSubRule(310);
        try { dbg.enterDecision(310, decisionCanBacktrack[310]);

        int LA310_0 = input.LA(1);

        if ( (LA310_0==WS||(LA310_0>=NL && LA310_0<=COMMENT)) ) {
            alt310=1;
        }
        } finally {dbg.exitDecision(310);}

        switch (alt310) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:19: ws
                {
                dbg.location(660,19);
                pushFollow(FOLLOW_ws_in_synpred15_Css32869);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(310);}

        dbg.location(660,23);
        pushFollow(FOLLOW_esPred_in_synpred15_Css32872);
        esPred();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_Css3

    // $ANTLR start synpred16_Css3
    public final void synpred16_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:662:21: ( ( ws )? esPred )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:662:22: ( ws )? esPred
        {
        dbg.location(662,22);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:662:22: ( ws )?
        int alt311=2;
        try { dbg.enterSubRule(311);
        try { dbg.enterDecision(311, decisionCanBacktrack[311]);

        int LA311_0 = input.LA(1);

        if ( (LA311_0==WS||(LA311_0>=NL && LA311_0<=COMMENT)) ) {
            alt311=1;
        }
        } finally {dbg.exitDecision(311);}

        switch (alt311) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:662:22: ws
                {
                dbg.location(662,22);
                pushFollow(FOLLOW_ws_in_synpred16_Css32893);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(311);}

        dbg.location(662,26);
        pushFollow(FOLLOW_esPred_in_synpred16_Css32896);
        esPred();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_Css3

    // $ANTLR start synpred17_Css3
    public final void synpred17_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:677:7: ( ( IDENT | STAR )? PIPE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:677:8: ( IDENT | STAR )? PIPE
        {
        dbg.location(677,8);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:677:8: ( IDENT | STAR )?
        int alt312=2;
        try { dbg.enterSubRule(312);
        try { dbg.enterDecision(312, decisionCanBacktrack[312]);

        int LA312_0 = input.LA(1);

        if ( (LA312_0==IDENT||LA312_0==STAR) ) {
            alt312=1;
        }
        } finally {dbg.exitDecision(312);}

        switch (alt312) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
                {
                dbg.location(677,8);
                if ( input.LA(1)==IDENT||input.LA(1)==STAR ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    dbg.recognitionException(mse);
                    throw mse;
                }


                }
                break;

        }
        } finally {dbg.exitSubRule(312);}

        dbg.location(677,24);
        match(input,PIPE,FOLLOW_PIPE_in_synpred17_Css33014); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_Css3

    // $ANTLR start synpred18_Css3
    public final void synpred18_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:14: ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:15: ( ws | ( ( ws )? operator ( ws )? ) | ) term
        {
        dbg.location(840,15);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:15: ( ws | ( ( ws )? operator ( ws )? ) | )
        int alt315=3;
        try { dbg.enterSubRule(315);
        try { dbg.enterDecision(315, decisionCanBacktrack[315]);

        try {
            isCyclicDecision = true;
            alt315 = dfa315.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(315);}

        switch (alt315) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:17: ws
                {
                dbg.location(840,17);
                pushFollow(FOLLOW_ws_in_synpred18_Css34313);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:22: ( ( ws )? operator ( ws )? )
                {
                dbg.location(840,22);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:22: ( ( ws )? operator ( ws )? )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:23: ( ws )? operator ( ws )?
                {
                dbg.location(840,23);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:23: ( ws )?
                int alt313=2;
                try { dbg.enterSubRule(313);
                try { dbg.enterDecision(313, decisionCanBacktrack[313]);

                int LA313_0 = input.LA(1);

                if ( (LA313_0==WS||(LA313_0>=NL && LA313_0<=COMMENT)) ) {
                    alt313=1;
                }
                } finally {dbg.exitDecision(313);}

                switch (alt313) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:23: ws
                        {
                        dbg.location(840,23);
                        pushFollow(FOLLOW_ws_in_synpred18_Css34318);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(313);}

                dbg.location(840,27);
                pushFollow(FOLLOW_operator_in_synpred18_Css34321);
                operator();

                state._fsp--;
                if (state.failed) return ;
                dbg.location(840,36);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:36: ( ws )?
                int alt314=2;
                try { dbg.enterSubRule(314);
                try { dbg.enterDecision(314, decisionCanBacktrack[314]);

                int LA314_0 = input.LA(1);

                if ( (LA314_0==WS||(LA314_0>=NL && LA314_0<=COMMENT)) ) {
                    alt314=1;
                }
                } finally {dbg.exitDecision(314);}

                switch (alt314) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:36: ws
                        {
                        dbg.location(840,36);
                        pushFollow(FOLLOW_ws_in_synpred18_Css34323);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(314);}


                }


                }
                break;
            case 3 :
                dbg.enterAlt(3);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:840:56: 
                {
                }
                break;

        }
        } finally {dbg.exitSubRule(315);}

        dbg.location(840,58);
        pushFollow(FOLLOW_term_in_synpred18_Css34332);
        term();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_Css3

    // $ANTLR start synpred19_Css3
    public final void synpred19_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:848:9: ( functionName ( ws )? LPAREN )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:848:10: functionName ( ws )? LPAREN
        {
        dbg.location(848,10);
        pushFollow(FOLLOW_functionName_in_synpred19_Css34411);
        functionName();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(848,23);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:848:23: ( ws )?
        int alt316=2;
        try { dbg.enterSubRule(316);
        try { dbg.enterDecision(316, decisionCanBacktrack[316]);

        int LA316_0 = input.LA(1);

        if ( (LA316_0==WS||(LA316_0>=NL && LA316_0<=COMMENT)) ) {
            alt316=1;
        }
        } finally {dbg.exitDecision(316);}

        switch (alt316) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:848:23: ws
                {
                dbg.location(848,23);
                pushFollow(FOLLOW_ws_in_synpred19_Css34413);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(316);}

        dbg.location(848,27);
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred19_Css34416); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_Css3

    // $ANTLR start synpred20_Css3
    public final void synpred20_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:9: ( fnAttributeName ( ws )? ( OPEQ | COLON ) )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:10: fnAttributeName ( ws )? ( OPEQ | COLON )
        {
        dbg.location(905,10);
        pushFollow(FOLLOW_fnAttributeName_in_synpred20_Css34873);
        fnAttributeName();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(905,26);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:26: ( ws )?
        int alt317=2;
        try { dbg.enterSubRule(317);
        try { dbg.enterDecision(317, decisionCanBacktrack[317]);

        int LA317_0 = input.LA(1);

        if ( (LA317_0==WS||(LA317_0>=NL && LA317_0<=COMMENT)) ) {
            alt317=1;
        }
        } finally {dbg.exitDecision(317);}

        switch (alt317) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:26: ws
                {
                dbg.location(905,26);
                pushFollow(FOLLOW_ws_in_synpred20_Css34875);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(317);}

        dbg.location(905,30);
        if ( input.LA(1)==COLON||input.LA(1)==OPEQ ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            dbg.recognitionException(mse);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred20_Css3

    // $ANTLR start synpred21_Css3
    public final void synpred21_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:20: ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term
        {
        dbg.location(918,21);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )
        int alt320=3;
        try { dbg.enterSubRule(320);
        try { dbg.enterDecision(320, decisionCanBacktrack[320]);

        try {
            isCyclicDecision = true;
            alt320 = dfa320.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(320);}

        switch (alt320) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:23: ws
                {
                dbg.location(918,23);
                pushFollow(FOLLOW_ws_in_synpred21_Css35011);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:28: ( ( ws )? SOLIDUS ( ws )? )
                {
                dbg.location(918,28);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:28: ( ( ws )? SOLIDUS ( ws )? )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:29: ( ws )? SOLIDUS ( ws )?
                {
                dbg.location(918,29);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:29: ( ws )?
                int alt318=2;
                try { dbg.enterSubRule(318);
                try { dbg.enterDecision(318, decisionCanBacktrack[318]);

                int LA318_0 = input.LA(1);

                if ( (LA318_0==WS||(LA318_0>=NL && LA318_0<=COMMENT)) ) {
                    alt318=1;
                }
                } finally {dbg.exitDecision(318);}

                switch (alt318) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:29: ws
                        {
                        dbg.location(918,29);
                        pushFollow(FOLLOW_ws_in_synpred21_Css35016);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(318);}

                dbg.location(918,33);
                match(input,SOLIDUS,FOLLOW_SOLIDUS_in_synpred21_Css35019); if (state.failed) return ;
                dbg.location(918,41);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:41: ( ws )?
                int alt319=2;
                try { dbg.enterSubRule(319);
                try { dbg.enterDecision(319, decisionCanBacktrack[319]);

                int LA319_0 = input.LA(1);

                if ( (LA319_0==WS||(LA319_0>=NL && LA319_0<=COMMENT)) ) {
                    alt319=1;
                }
                } finally {dbg.exitDecision(319);}

                switch (alt319) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:41: ws
                        {
                        dbg.location(918,41);
                        pushFollow(FOLLOW_ws_in_synpred21_Css35021);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(319);}


                }


                }
                break;
            case 3 :
                dbg.enterAlt(3);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:61: 
                {
                }
                break;

        }
        } finally {dbg.exitSubRule(320);}

        dbg.location(918,63);
        pushFollow(FOLLOW_term_in_synpred21_Css35030);
        term();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_Css3

    // $ANTLR start synpred22_Css3
    public final void synpred22_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:952:6: ( ( ws )? COMMA ( ws )? cp_expression )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:952:7: ( ws )? COMMA ( ws )? cp_expression
        {
        dbg.location(952,7);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:952:7: ( ws )?
        int alt321=2;
        try { dbg.enterSubRule(321);
        try { dbg.enterDecision(321, decisionCanBacktrack[321]);

        int LA321_0 = input.LA(1);

        if ( (LA321_0==WS||(LA321_0>=NL && LA321_0<=COMMENT)) ) {
            alt321=1;
        }
        } finally {dbg.exitDecision(321);}

        switch (alt321) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:952:7: ws
                {
                dbg.location(952,7);
                pushFollow(FOLLOW_ws_in_synpred22_Css35307);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(321);}

        dbg.location(952,11);
        match(input,COMMA,FOLLOW_COMMA_in_synpred22_Css35310); if (state.failed) return ;
        dbg.location(952,17);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:952:17: ( ws )?
        int alt322=2;
        try { dbg.enterSubRule(322);
        try { dbg.enterDecision(322, decisionCanBacktrack[322]);

        int LA322_0 = input.LA(1);

        if ( (LA322_0==WS||(LA322_0>=NL && LA322_0<=COMMENT)) ) {
            alt322=1;
        }
        } finally {dbg.exitDecision(322);}

        switch (alt322) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:952:17: ws
                {
                dbg.location(952,17);
                pushFollow(FOLLOW_ws_in_synpred22_Css35312);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(322);}

        dbg.location(952,21);
        pushFollow(FOLLOW_cp_expression_in_synpred22_Css35315);
        cp_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_Css3

    // $ANTLR start synpred23_Css3
    public final void synpred23_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:969:9: ( ( ws )? cp_expression_operator )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:969:10: ( ws )? cp_expression_operator
        {
        dbg.location(969,10);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:969:10: ( ws )?
        int alt323=2;
        try { dbg.enterSubRule(323);
        try { dbg.enterDecision(323, decisionCanBacktrack[323]);

        int LA323_0 = input.LA(1);

        if ( (LA323_0==WS||(LA323_0>=NL && LA323_0<=COMMENT)) ) {
            alt323=1;
        }
        } finally {dbg.exitDecision(323);}

        switch (alt323) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:969:10: ws
                {
                dbg.location(969,10);
                pushFollow(FOLLOW_ws_in_synpred23_Css35382);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(323);}

        dbg.location(969,14);
        pushFollow(FOLLOW_cp_expression_operator_in_synpred23_Css35385);
        cp_expression_operator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_Css3

    // $ANTLR start synpred24_Css3
    public final void synpred24_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:970:11: ( ( ws )? cp_expression_atom )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:970:12: ( ws )? cp_expression_atom
        {
        dbg.location(970,12);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:970:12: ( ws )?
        int alt324=2;
        try { dbg.enterSubRule(324);
        try { dbg.enterDecision(324, decisionCanBacktrack[324]);

        int LA324_0 = input.LA(1);

        if ( (LA324_0==WS||(LA324_0>=NL && LA324_0<=COMMENT)) ) {
            alt324=1;
        }
        } finally {dbg.exitDecision(324);}

        switch (alt324) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:970:12: ws
                {
                dbg.location(970,12);
                pushFollow(FOLLOW_ws_in_synpred24_Css35412);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(324);}

        dbg.location(970,16);
        pushFollow(FOLLOW_cp_expression_atom_in_synpred24_Css35415);
        cp_expression_atom();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred24_Css3

    // $ANTLR start synpred25_Css3
    public final void synpred25_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:993:13: ( cp_math_expression )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:993:14: cp_math_expression
        {
        dbg.location(993,14);
        pushFollow(FOLLOW_cp_math_expression_in_synpred25_Css35553);
        cp_math_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred25_Css3

    // $ANTLR start synpred26_Css3
    public final void synpred26_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1020:13: ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1020:14: ( ws )? ( PLUS | MINUS | STAR | SOLIDUS )
        {
        dbg.location(1020,14);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1020:14: ( ws )?
        int alt325=2;
        try { dbg.enterSubRule(325);
        try { dbg.enterDecision(325, decisionCanBacktrack[325]);

        int LA325_0 = input.LA(1);

        if ( (LA325_0==WS||(LA325_0>=NL && LA325_0<=COMMENT)) ) {
            alt325=1;
        }
        } finally {dbg.exitDecision(325);}

        switch (alt325) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1020:14: ws
                {
                dbg.location(1020,14);
                pushFollow(FOLLOW_ws_in_synpred26_Css35684);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(325);}

        dbg.location(1020,18);
        if ( (input.LA(1)>=SOLIDUS && input.LA(1)<=PLUS)||input.LA(1)==STAR ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            dbg.recognitionException(mse);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred26_Css3

    // $ANTLR start synpred27_Css3
    public final void synpred27_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:13: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:14: sass_interpolation_expression_var
        {
        dbg.location(1138,14);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred27_Css36597);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_Css3

    // $ANTLR start synpred28_Css3
    public final void synpred28_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1145:17: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1145:18: sass_interpolation_expression_var
        {
        dbg.location(1145,18);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred28_Css36736);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred28_Css3

    // $ANTLR start synpred29_Css3
    public final void synpred29_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1156:13: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1156:14: sass_interpolation_expression_var
        {
        dbg.location(1156,14);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred29_Css36884);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_Css3

    // $ANTLR start synpred30_Css3
    public final void synpred30_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1163:17: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1163:18: sass_interpolation_expression_var
        {
        dbg.location(1163,18);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred30_Css37002);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_Css3

    // Delegated rules

    public final boolean synpred26_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred26_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred5_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred10_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred11_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred20_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred16_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred18_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred29_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred14_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred25_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred8_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred15_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred24_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred21_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred9_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred12_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred4_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred17_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred7_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred27_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred30_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred23_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred6_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred3_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred2_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred28_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred13_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred1_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred19_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred22_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA4 dfa4 = new DFA4(this);
    protected DFA17 dfa17 = new DFA17(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA24 dfa24 = new DFA24(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA36 dfa36 = new DFA36(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA55 dfa55 = new DFA55(this);
    protected DFA65 dfa65 = new DFA65(this);
    protected DFA88 dfa88 = new DFA88(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA118 dfa118 = new DFA118(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA148 dfa148 = new DFA148(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA156 dfa156 = new DFA156(this);
    protected DFA160 dfa160 = new DFA160(this);
    protected DFA165 dfa165 = new DFA165(this);
    protected DFA164 dfa164 = new DFA164(this);
    protected DFA168 dfa168 = new DFA168(this);
    protected DFA176 dfa176 = new DFA176(this);
    protected DFA180 dfa180 = new DFA180(this);
    protected DFA187 dfa187 = new DFA187(this);
    protected DFA186 dfa186 = new DFA186(this);
    protected DFA185 dfa185 = new DFA185(this);
    protected DFA194 dfa194 = new DFA194(this);
    protected DFA199 dfa199 = new DFA199(this);
    protected DFA203 dfa203 = new DFA203(this);
    protected DFA208 dfa208 = new DFA208(this);
    protected DFA212 dfa212 = new DFA212(this);
    protected DFA217 dfa217 = new DFA217(this);
    protected DFA222 dfa222 = new DFA222(this);
    protected DFA226 dfa226 = new DFA226(this);
    protected DFA232 dfa232 = new DFA232(this);
    protected DFA237 dfa237 = new DFA237(this);
    protected DFA240 dfa240 = new DFA240(this);
    protected DFA265 dfa265 = new DFA265(this);
    protected DFA269 dfa269 = new DFA269(this);
    protected DFA276 dfa276 = new DFA276(this);
    protected DFA280 dfa280 = new DFA280(this);
    protected DFA287 dfa287 = new DFA287(this);
    protected DFA286 dfa286 = new DFA286(this);
    protected DFA302 dfa302 = new DFA302(this);
    protected DFA315 dfa315 = new DFA315(this);
    protected DFA320 dfa320 = new DFA320(this);
    static final String DFA4_eotS =
        "\42\uffff";
    static final String DFA4_eofS =
        "\1\2\41\uffff";
    static final String DFA4_minS =
        "\1\4\1\0\40\uffff";
    static final String DFA4_maxS =
        "\1\152\1\0\40\uffff";
    static final String DFA4_acceptS =
        "\2\uffff\1\2\36\uffff\1\1";
    static final String DFA4_specialS =
        "\1\uffff\1\0\40\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\2\1\uffff\1\2\3\uffff\1\1\2\2\5\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\1\uffff\3\2\21\uffff\1\2\1\uffff"+
            "\1\2\1\uffff\10\2\1\uffff\1\2\7\uffff\1\2\24\uffff\2\2\5\uffff"+
            "\3\2\1\uffff\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "331:9: ( imports )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))),""))) ) {s = 33;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA17_eotS =
        "\42\uffff";
    static final String DFA17_eofS =
        "\1\1\41\uffff";
    static final String DFA17_minS =
        "\1\4\30\uffff\1\0\10\uffff";
    static final String DFA17_maxS =
        "\1\152\30\uffff\1\0\10\uffff";
    static final String DFA17_acceptS =
        "\1\uffff\1\2\37\uffff\1\1";
    static final String DFA17_specialS =
        "\31\uffff\1\0\10\uffff}>";
    static final String[] DFA17_transitionS = {
            "\1\1\1\uffff\1\1\3\uffff\1\31\2\1\5\uffff\1\1\1\uffff\1\1\1"+
            "\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\3\1\21\uffff\1\1"+
            "\1\uffff\1\1\1\uffff\10\1\1\uffff\1\1\7\uffff\1\1\24\uffff\2"+
            "\1\5\uffff\3\1\1\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA17_eot = DFA.unpackEncodedString(DFA17_eotS);
    static final short[] DFA17_eof = DFA.unpackEncodedString(DFA17_eofS);
    static final char[] DFA17_min = DFA.unpackEncodedStringToUnsignedChars(DFA17_minS);
    static final char[] DFA17_max = DFA.unpackEncodedStringToUnsignedChars(DFA17_maxS);
    static final short[] DFA17_accept = DFA.unpackEncodedString(DFA17_acceptS);
    static final short[] DFA17_special = DFA.unpackEncodedString(DFA17_specialS);
    static final short[][] DFA17_transition;

    static {
        int numStates = DFA17_transitionS.length;
        DFA17_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA17_transition[i] = DFA.unpackEncodedString(DFA17_transitionS[i]);
        }
    }

    class DFA17 extends DFA {

        public DFA17(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = DFA17_eot;
            this.eof = DFA17_eof;
            this.min = DFA17_min;
            this.max = DFA17_max;
            this.accept = DFA17_accept;
            this.special = DFA17_special;
            this.transition = DFA17_transition;
        }
        public String getDescription() {
            return "()+ loopback of 364:2: ( importItem ( ws )? SEMI ( ws )? )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA17_25 = input.LA(1);

                         
                        int index17_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))),""))) ) {s = 33;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 1;}

                         
                        input.seek(index17_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 17, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA27_eotS =
        "\7\uffff";
    static final String DFA27_eofS =
        "\7\uffff";
    static final String DFA27_minS =
        "\1\12\2\7\2\0\2\uffff";
    static final String DFA27_maxS =
        "\1\12\2\124\2\0\2\uffff";
    static final String DFA27_acceptS =
        "\5\uffff\1\1\1\2";
    static final String DFA27_specialS =
        "\3\uffff\1\1\1\0\2\uffff}>";
    static final String[] DFA27_transitionS = {
            "\1\1",
            "\2\3\16\uffff\1\2\73\uffff\2\2",
            "\2\4\16\uffff\1\2\73\uffff\2\2",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA27_eot = DFA.unpackEncodedString(DFA27_eotS);
    static final short[] DFA27_eof = DFA.unpackEncodedString(DFA27_eofS);
    static final char[] DFA27_min = DFA.unpackEncodedStringToUnsignedChars(DFA27_minS);
    static final char[] DFA27_max = DFA.unpackEncodedStringToUnsignedChars(DFA27_maxS);
    static final short[] DFA27_accept = DFA.unpackEncodedString(DFA27_acceptS);
    static final short[] DFA27_special = DFA.unpackEncodedString(DFA27_specialS);
    static final short[][] DFA27_transition;

    static {
        int numStates = DFA27_transitionS.length;
        DFA27_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA27_transition[i] = DFA.unpackEncodedString(DFA27_transitionS[i]);
        }
    }

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = DFA27_eot;
            this.eof = DFA27_eof;
            this.min = DFA27_min;
            this.max = DFA27_max;
            this.accept = DFA27_accept;
            this.special = DFA27_special;
            this.transition = DFA27_transition;
        }
        public String getDescription() {
            return "367:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA27_4 = input.LA(1);

                         
                        int index27_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isScssSource(),"isScssSource()"),""))) ) {s = 5;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 6;}

                         
                        input.seek(index27_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA27_3 = input.LA(1);

                         
                        int index27_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isScssSource(),"isScssSource()"),""))) ) {s = 5;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 6;}

                         
                        input.seek(index27_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 27, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA20_eotS =
        "\47\uffff";
    static final String DFA20_eofS =
        "\47\uffff";
    static final String DFA20_minS =
        "\1\5\1\0\1\uffff\3\0\41\uffff";
    static final String DFA20_maxS =
        "\1\154\1\0\1\uffff\3\0\41\uffff";
    static final String DFA20_acceptS =
        "\2\uffff\1\1\3\uffff\1\1\1\2\37\uffff";
    static final String DFA20_specialS =
        "\1\0\1\1\1\uffff\1\2\1\3\1\4\41\uffff}>";
    static final String[] DFA20_transitionS = {
            "\1\7\1\3\3\uffff\3\7\1\uffff\1\7\1\uffff\2\2\1\4\1\6\1\7\1\uffff"+
            "\1\7\1\1\1\7\3\uffff\1\7\1\uffff\3\7\21\uffff\1\7\1\uffff\1"+
            "\7\1\uffff\1\5\7\7\1\uffff\1\7\7\uffff\1\7\13\uffff\2\1\7\uffff"+
            "\2\7\3\uffff\1\7\1\uffff\3\7\1\uffff\3\7\1\uffff\2\7",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "369:43: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA20_0 = input.LA(1);

                         
                        int index20_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA20_0==WS||(LA20_0>=NL && LA20_0<=COMMENT)) ) {s = 1;}

                        else if ( ((LA20_0>=ONLY && LA20_0<=NOT)) && (synpred1_Css3())) {s = 2;}

                        else if ( (LA20_0==IDENT) ) {s = 3;}

                        else if ( (LA20_0==GEN) ) {s = 4;}

                        else if ( (LA20_0==HASH_SYMBOL) ) {s = 5;}

                        else if ( (LA20_0==LPAREN) && (synpred1_Css3())) {s = 6;}

                        else if ( (LA20_0==SEMI||(LA20_0>=IMPORT_SYM && LA20_0<=MEDIA_SYM)||LA20_0==RBRACE||LA20_0==COLON||LA20_0==AT_IDENT||LA20_0==MOZ_DOCUMENT_SYM||LA20_0==WEBKIT_KEYFRAMES_SYM||(LA20_0>=PAGE_SYM && LA20_0<=FONT_FACE_SYM)||LA20_0==MINUS||LA20_0==GREATER||(LA20_0>=HASH && LA20_0<=PIPE)||LA20_0==LESS_AND||LA20_0==SASS_VAR||(LA20_0>=SASS_MIXIN && LA20_0<=SASS_INCLUDE)||LA20_0==SASS_EXTEND||(LA20_0>=SASS_DEBUG && LA20_0<=SASS_IF)||(LA20_0>=SASS_FOR && LA20_0<=SASS_WHILE)||(LA20_0>=SASS_RETURN && LA20_0<=SASS_CONTENT)) ) {s = 7;}

                         
                        input.seek(index20_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA20_1 = input.LA(1);

                         
                        int index20_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA20_3 = input.LA(1);

                         
                        int index20_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA20_4 = input.LA(1);

                         
                        int index20_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA20_5 = input.LA(1);

                         
                        int index20_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred1_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA24_eotS =
        "\6\uffff";
    static final String DFA24_eofS =
        "\6\uffff";
    static final String DFA24_minS =
        "\2\5\1\uffff\2\6\1\uffff";
    static final String DFA24_maxS =
        "\2\154\1\uffff\2\124\1\uffff";
    static final String DFA24_acceptS =
        "\2\uffff\1\2\2\uffff\1\1";
    static final String DFA24_specialS =
        "\6\uffff}>";
    static final String[] DFA24_transitionS = {
            "\2\2\3\uffff\1\2\1\3\1\2\1\uffff\1\2\1\uffff\5\2\1\uffff\1\2"+
            "\1\1\1\2\3\uffff\1\2\1\uffff\3\2\21\uffff\1\2\1\uffff\1\2\1"+
            "\uffff\10\2\1\uffff\1\2\7\uffff\1\2\13\uffff\2\1\7\uffff\2\2"+
            "\3\uffff\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\2\2",
            "\2\2\3\uffff\1\2\1\3\1\2\1\uffff\1\2\1\uffff\5\2\1\uffff\1"+
            "\2\1\1\1\2\3\uffff\1\2\1\uffff\3\2\21\uffff\1\2\1\uffff\1\2"+
            "\1\uffff\10\2\1\uffff\1\2\7\uffff\1\2\13\uffff\2\1\7\uffff\2"+
            "\2\3\uffff\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\2\2",
            "",
            "\1\2\2\5\2\uffff\1\2\1\uffff\1\2\6\uffff\1\2\2\uffff\1\4\32"+
            "\uffff\1\2\1\uffff\1\2\1\uffff\3\2\3\uffff\1\2\2\uffff\1\2\23"+
            "\uffff\2\4",
            "\1\2\2\5\2\uffff\1\2\1\uffff\1\2\6\uffff\1\2\2\uffff\1\4\32"+
            "\uffff\1\2\1\uffff\1\2\1\uffff\3\2\3\uffff\1\2\2\uffff\1\2\23"+
            "\uffff\2\4",
            ""
    };

    static final short[] DFA24_eot = DFA.unpackEncodedString(DFA24_eotS);
    static final short[] DFA24_eof = DFA.unpackEncodedString(DFA24_eofS);
    static final char[] DFA24_min = DFA.unpackEncodedStringToUnsignedChars(DFA24_minS);
    static final char[] DFA24_max = DFA.unpackEncodedStringToUnsignedChars(DFA24_maxS);
    static final short[] DFA24_accept = DFA.unpackEncodedString(DFA24_acceptS);
    static final short[] DFA24_special = DFA.unpackEncodedString(DFA24_specialS);
    static final short[][] DFA24_transition;

    static {
        int numStates = DFA24_transitionS.length;
        DFA24_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA24_transition[i] = DFA.unpackEncodedString(DFA24_transitionS[i]);
        }
    }

    class DFA24 extends DFA {

        public DFA24(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 24;
            this.eot = DFA24_eot;
            this.eof = DFA24_eof;
            this.min = DFA24_min;
            this.max = DFA24_max;
            this.accept = DFA24_accept;
            this.special = DFA24_special;
            this.transition = DFA24_transition;
        }
        public String getDescription() {
            return "()* loopback of 372:61: ( ( ws )? COMMA ( ws )? resourceIdentifier )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA26_eotS =
        "\47\uffff";
    static final String DFA26_eofS =
        "\47\uffff";
    static final String DFA26_minS =
        "\1\5\1\0\1\uffff\3\0\41\uffff";
    static final String DFA26_maxS =
        "\1\154\1\0\1\uffff\3\0\41\uffff";
    static final String DFA26_acceptS =
        "\2\uffff\1\1\3\uffff\1\1\1\2\37\uffff";
    static final String DFA26_specialS =
        "\1\0\1\1\1\uffff\1\2\1\3\1\4\41\uffff}>";
    static final String[] DFA26_transitionS = {
            "\1\7\1\3\3\uffff\3\7\1\uffff\1\7\1\uffff\2\2\1\4\1\6\1\7\1\uffff"+
            "\1\7\1\1\1\7\3\uffff\1\7\1\uffff\3\7\21\uffff\1\7\1\uffff\1"+
            "\7\1\uffff\1\5\7\7\1\uffff\1\7\7\uffff\1\7\13\uffff\2\1\7\uffff"+
            "\2\7\3\uffff\1\7\1\uffff\3\7\1\uffff\3\7\1\uffff\2\7",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "372:97: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_0 = input.LA(1);

                         
                        int index26_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_0==WS||(LA26_0>=NL && LA26_0<=COMMENT)) ) {s = 1;}

                        else if ( ((LA26_0>=ONLY && LA26_0<=NOT)) && (synpred2_Css3())) {s = 2;}

                        else if ( (LA26_0==IDENT) ) {s = 3;}

                        else if ( (LA26_0==GEN) ) {s = 4;}

                        else if ( (LA26_0==HASH_SYMBOL) ) {s = 5;}

                        else if ( (LA26_0==LPAREN) && (synpred2_Css3())) {s = 6;}

                        else if ( (LA26_0==SEMI||(LA26_0>=IMPORT_SYM && LA26_0<=MEDIA_SYM)||LA26_0==RBRACE||LA26_0==COLON||LA26_0==AT_IDENT||LA26_0==MOZ_DOCUMENT_SYM||LA26_0==WEBKIT_KEYFRAMES_SYM||(LA26_0>=PAGE_SYM && LA26_0<=FONT_FACE_SYM)||LA26_0==MINUS||LA26_0==GREATER||(LA26_0>=HASH && LA26_0<=PIPE)||LA26_0==LESS_AND||LA26_0==SASS_VAR||(LA26_0>=SASS_MIXIN && LA26_0<=SASS_INCLUDE)||LA26_0==SASS_EXTEND||(LA26_0>=SASS_DEBUG && LA26_0<=SASS_IF)||(LA26_0>=SASS_FOR && LA26_0<=SASS_WHILE)||(LA26_0>=SASS_RETURN && LA26_0<=SASS_CONTENT)) ) {s = 7;}

                         
                        input.seek(index26_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA26_1 = input.LA(1);

                         
                        int index26_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA26_3 = input.LA(1);

                         
                        int index26_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA26_4 = input.LA(1);

                         
                        int index26_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA26_5 = input.LA(1);

                         
                        int index26_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA36_eotS =
        "\37\uffff";
    static final String DFA36_eofS =
        "\37\uffff";
    static final String DFA36_minS =
        "\1\6\6\0\10\uffff\1\0\5\uffff\1\0\7\uffff\1\0\1\uffff";
    static final String DFA36_maxS =
        "\1\154\6\0\10\uffff\1\0\5\uffff\1\0\7\uffff\1\0\1\uffff";
    static final String DFA36_acceptS =
        "\7\uffff\1\1\1\2\1\3\1\4\3\uffff\1\5\1\uffff\1\6\10\uffff\1\7\1"+
        "\10\1\11\2\uffff\1\12";
    static final String DFA36_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\10\uffff\1\7\5\uffff\1\10\7\uffff\1"+
        "\11\1\uffff}>";
    static final String[] DFA36_transitionS = {
            "\1\3\4\uffff\1\20\1\35\5\uffff\1\5\1\uffff\1\20\1\uffff\1\6"+
            "\1\uffff\1\33\3\uffff\1\33\1\uffff\1\31\1\uffff\1\32\21\uffff"+
            "\1\25\1\uffff\1\20\1\uffff\1\2\1\17\1\4\3\20\1\1\1\20\1\uffff"+
            "\1\20\7\uffff\1\7\24\uffff\1\20\4\uffff\1\10\1\uffff\2\11\1"+
            "\12\1\uffff\3\12\2\uffff\1\16",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_eotS);
    static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_eofS);
    static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS);
    static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS);
    static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS);
    static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_specialS);
    static final short[][] DFA36_transition;

    static {
        int numStates = DFA36_transitionS.length;
        DFA36_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA36_transition[i] = DFA.unpackEncodedString(DFA36_transitionS[i]);
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = DFA36_eot;
            this.eof = DFA36_eof;
            this.min = DFA36_min;
            this.max = DFA36_max;
            this.accept = DFA36_accept;
            this.special = DFA36_special;
            this.transition = DFA36_transition;
        }
        public String getDescription() {
            return "383:13: ( ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI | sass_declaration_interpolation_expression COLON )=> propertyDeclaration ( ws )? SEMI | {...}? sass_extend ( ws )? SEMI | {...}? sass_debug ( ws )? SEMI | {...}? sass_control ( ws )? SEMI | {...}? sass_content ( ws )? SEMI | rule | page | fontFace | vendorAtRule | media )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA36_0 = input.LA(1);

                         
                        int index36_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA36_0==STAR) ) {s = 1;}

                        else if ( (LA36_0==HASH_SYMBOL) ) {s = 2;}

                        else if ( (LA36_0==IDENT) ) {s = 3;}

                        else if ( (LA36_0==DOT) ) {s = 4;}

                        else if ( (LA36_0==GEN) ) {s = 5;}

                        else if ( (LA36_0==AT_IDENT) ) {s = 6;}

                        else if ( (LA36_0==SASS_VAR) && (synpred3_Css3())) {s = 7;}

                        else if ( (LA36_0==SASS_EXTEND) ) {s = 8;}

                        else if ( ((LA36_0>=SASS_DEBUG && LA36_0<=SASS_WARN)) ) {s = 9;}

                        else if ( (LA36_0==SASS_IF||(LA36_0>=SASS_FOR && LA36_0<=SASS_WHILE)) ) {s = 10;}

                        else if ( (LA36_0==SASS_CONTENT) ) {s = 14;}

                        else if ( (LA36_0==HASH) ) {s = 15;}

                        else if ( (LA36_0==COMMA||LA36_0==COLON||LA36_0==GREATER||(LA36_0>=LBRACKET && LA36_0<=SASS_EXTEND_ONLY_SELECTOR)||LA36_0==PIPE||LA36_0==LESS_AND||LA36_0==SASS_MIXIN) ) {s = 16;}

                        else if ( (LA36_0==MINUS) ) {s = 21;}

                        else if ( (LA36_0==PAGE_SYM) ) {s = 25;}

                        else if ( (LA36_0==FONT_FACE_SYM) ) {s = 26;}

                        else if ( (LA36_0==MOZ_DOCUMENT_SYM||LA36_0==WEBKIT_KEYFRAMES_SYM) ) {s = 27;}

                        else if ( (LA36_0==MEDIA_SYM) ) {s = 29;}

                         
                        input.seek(index36_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA36_1 = input.LA(1);

                         
                        int index36_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred3_Css3()||(synpred3_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 7;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index36_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA36_2 = input.LA(1);

                         
                        int index36_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred3_Css3()||(synpred3_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 7;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index36_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA36_3 = input.LA(1);

                         
                        int index36_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred3_Css3()||(synpred3_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 7;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index36_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA36_4 = input.LA(1);

                         
                        int index36_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred3_Css3()||(synpred3_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 7;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index36_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA36_5 = input.LA(1);

                         
                        int index36_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred3_Css3()||(synpred3_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 7;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index36_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA36_6 = input.LA(1);

                         
                        int index36_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred3_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred3_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 7;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index36_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA36_15 = input.LA(1);

                         
                        int index36_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred3_Css3()||(synpred3_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 7;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index36_15);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA36_21 = input.LA(1);

                         
                        int index36_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred3_Css3()||(synpred3_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 7;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index36_21);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA36_29 = input.LA(1);

                         
                        int index36_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred3_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred3_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 7;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index36_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 36, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA41_eotS =
        "\51\uffff";
    static final String DFA41_eofS =
        "\1\2\50\uffff";
    static final String DFA41_minS =
        "\1\5\1\0\21\uffff\1\0\25\uffff";
    static final String DFA41_maxS =
        "\1\154\1\0\21\uffff\1\0\25\uffff";
    static final String DFA41_acceptS =
        "\2\uffff\1\2\45\uffff\1\1";
    static final String DFA41_specialS =
        "\1\uffff\1\0\21\uffff\1\1\25\uffff}>";
    static final String[] DFA41_transitionS = {
            "\2\2\3\uffff\1\2\1\23\3\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1"+
            "\2\1\1\1\2\3\uffff\1\2\1\uffff\3\2\21\uffff\1\2\1\uffff\1\2"+
            "\1\uffff\10\2\1\uffff\1\2\7\uffff\1\2\13\uffff\2\1\7\uffff\2"+
            "\2\3\uffff\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA41_eot = DFA.unpackEncodedString(DFA41_eotS);
    static final short[] DFA41_eof = DFA.unpackEncodedString(DFA41_eofS);
    static final char[] DFA41_min = DFA.unpackEncodedStringToUnsignedChars(DFA41_minS);
    static final char[] DFA41_max = DFA.unpackEncodedStringToUnsignedChars(DFA41_maxS);
    static final short[] DFA41_accept = DFA.unpackEncodedString(DFA41_acceptS);
    static final short[] DFA41_special = DFA.unpackEncodedString(DFA41_specialS);
    static final short[][] DFA41_transition;

    static {
        int numStates = DFA41_transitionS.length;
        DFA41_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA41_transition[i] = DFA.unpackEncodedString(DFA41_transitionS[i]);
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;
        }
        public String getDescription() {
            return "()* loopback of 402:15: ( ( ( ws )? COMMA ( ws )? mediaQuery )=> ( ws )? COMMA ( ws )? mediaQuery )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA41_1 = input.LA(1);

                         
                        int index41_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Css3()) ) {s = 40;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA41_19 = input.LA(1);

                         
                        int index41_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Css3()) ) {s = 40;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 41, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA46_eotS =
        "\4\uffff";
    static final String DFA46_eofS =
        "\1\2\3\uffff";
    static final String DFA46_minS =
        "\2\5\2\uffff";
    static final String DFA46_maxS =
        "\2\154\2\uffff";
    static final String DFA46_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA46_specialS =
        "\4\uffff}>";
    static final String[] DFA46_transitionS = {
            "\2\2\3\uffff\5\2\1\3\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\1"+
            "\1\2\3\uffff\1\2\1\uffff\3\2\21\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\10\2\1\uffff\1\2\7\uffff\1\2\13\uffff\2\1\7\uffff\2\2\3\uffff"+
            "\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\2\2",
            "\2\2\3\uffff\5\2\1\3\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1"+
            "\1\1\2\3\uffff\1\2\1\uffff\3\2\21\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\10\2\1\uffff\1\2\7\uffff\1\2\13\uffff\2\1\7\uffff\2\2\3\uffff"+
            "\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\2\2",
            "",
            ""
    };

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "()* loopback of 406:42: ( ( ws )? AND ( ws )? mediaExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA49_eotS =
        "\4\uffff";
    static final String DFA49_eofS =
        "\1\2\3\uffff";
    static final String DFA49_minS =
        "\2\5\2\uffff";
    static final String DFA49_maxS =
        "\2\154\2\uffff";
    static final String DFA49_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA49_specialS =
        "\4\uffff}>";
    static final String[] DFA49_transitionS = {
            "\2\2\3\uffff\5\2\1\3\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\1"+
            "\1\2\3\uffff\1\2\1\uffff\3\2\21\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\10\2\1\uffff\1\2\7\uffff\1\2\13\uffff\2\1\7\uffff\2\2\3\uffff"+
            "\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\2\2",
            "\2\2\3\uffff\5\2\1\3\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1"+
            "\1\1\2\3\uffff\1\2\1\uffff\3\2\21\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\10\2\1\uffff\1\2\7\uffff\1\2\13\uffff\2\1\7\uffff\2\2\3\uffff"+
            "\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\2\2",
            "",
            ""
    };

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "()* loopback of 407:20: ( ( ws )? AND ( ws )? mediaExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA55_eotS =
        "\4\uffff";
    static final String DFA55_eofS =
        "\4\uffff";
    static final String DFA55_minS =
        "\2\24\2\uffff";
    static final String DFA55_maxS =
        "\2\124\2\uffff";
    static final String DFA55_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA55_specialS =
        "\4\uffff}>";
    static final String[] DFA55_transitionS = {
            "\1\2\1\3\1\uffff\1\1\73\uffff\2\1",
            "\1\2\1\3\1\uffff\1\1\73\uffff\2\1",
            "",
            ""
    };

    static final short[] DFA55_eot = DFA.unpackEncodedString(DFA55_eotS);
    static final short[] DFA55_eof = DFA.unpackEncodedString(DFA55_eofS);
    static final char[] DFA55_min = DFA.unpackEncodedStringToUnsignedChars(DFA55_minS);
    static final char[] DFA55_max = DFA.unpackEncodedStringToUnsignedChars(DFA55_maxS);
    static final short[] DFA55_accept = DFA.unpackEncodedString(DFA55_acceptS);
    static final short[] DFA55_special = DFA.unpackEncodedString(DFA55_specialS);
    static final short[][] DFA55_transition;

    static {
        int numStates = DFA55_transitionS.length;
        DFA55_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA55_transition[i] = DFA.unpackEncodedString(DFA55_transitionS[i]);
        }
    }

    class DFA55 extends DFA {

        public DFA55(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 55;
            this.eot = DFA55_eot;
            this.eof = DFA55_eof;
            this.min = DFA55_min;
            this.max = DFA55_max;
            this.accept = DFA55_accept;
            this.special = DFA55_special;
            this.transition = DFA55_transition;
        }
        public String getDescription() {
            return "419:31: ( ( ws )? COLON ( ws )? expression )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA65_eotS =
        "\37\uffff";
    static final String DFA65_eofS =
        "\37\uffff";
    static final String DFA65_minS =
        "\1\6\1\0\16\uffff\1\0\5\uffff\1\0\10\uffff";
    static final String DFA65_maxS =
        "\1\152\1\0\16\uffff\1\0\5\uffff\1\0\10\uffff";
    static final String DFA65_acceptS =
        "\2\uffff\1\1\1\2\15\uffff\1\3\5\uffff\1\4\1\5\1\6\1\7\3\uffff\1"+
        "\10";
    static final String DFA65_specialS =
        "\1\0\1\1\16\uffff\1\2\5\uffff\1\3\10\uffff}>";
    static final String[] DFA65_transitionS = {
            "\1\3\3\uffff\1\30\1\3\1\20\5\uffff\1\3\1\uffff\1\3\1\uffff\1"+
            "\26\1\uffff\1\21\3\uffff\1\21\1\uffff\3\21\21\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\2\3\1\1\5\3\1\uffff\1\3\7\uffff\1\27\24\uffff\1"+
            "\3\1\2\5\uffff\2\31\1\32\1\uffff\3\32\1\36",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA65_eot = DFA.unpackEncodedString(DFA65_eotS);
    static final short[] DFA65_eof = DFA.unpackEncodedString(DFA65_eofS);
    static final char[] DFA65_min = DFA.unpackEncodedStringToUnsignedChars(DFA65_minS);
    static final char[] DFA65_max = DFA.unpackEncodedStringToUnsignedChars(DFA65_maxS);
    static final short[] DFA65_accept = DFA.unpackEncodedString(DFA65_acceptS);
    static final short[] DFA65_special = DFA.unpackEncodedString(DFA65_specialS);
    static final short[][] DFA65_transition;

    static {
        int numStates = DFA65_transitionS.length;
        DFA65_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA65_transition[i] = DFA.unpackEncodedString(DFA65_transitionS[i]);
        }
    }

    class DFA65 extends DFA {

        public DFA65(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 65;
            this.eot = DFA65_eot;
            this.eof = DFA65_eof;
            this.min = DFA65_min;
            this.max = DFA65_max;
            this.accept = DFA65_accept;
            this.special = DFA65_special;
            this.transition = DFA65_transition;
        }
        public String getDescription() {
            return "430:1: bodyItem : ( ( cp_mixin_call ( ws )? SEMI )=> cp_mixin_call ( ws )? SEMI | rule | at_rule | {...}? cp_variable_declaration ( ws )? SEMI | {...}? importItem ( ws )? SEMI | {...}? sass_debug ( ws )? SEMI | {...}? sass_control | {...}? sass_function_declaration );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA65_0 = input.LA(1);

                         
                        int index65_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA65_0==DOT) ) {s = 1;}

                        else if ( (LA65_0==SASS_INCLUDE) && (synpred5_Css3())) {s = 2;}

                        else if ( (LA65_0==IDENT||LA65_0==COMMA||LA65_0==GEN||LA65_0==COLON||LA65_0==MINUS||LA65_0==GREATER||(LA65_0>=HASH_SYMBOL && LA65_0<=HASH)||(LA65_0>=LBRACKET && LA65_0<=PIPE)||LA65_0==LESS_AND||LA65_0==SASS_MIXIN) ) {s = 3;}

                        else if ( (LA65_0==MEDIA_SYM) ) {s = 16;}

                        else if ( (LA65_0==MOZ_DOCUMENT_SYM||LA65_0==WEBKIT_KEYFRAMES_SYM||(LA65_0>=PAGE_SYM && LA65_0<=FONT_FACE_SYM)) ) {s = 17;}

                        else if ( (LA65_0==AT_IDENT) ) {s = 22;}

                        else if ( (LA65_0==SASS_VAR) ) {s = 23;}

                        else if ( (LA65_0==IMPORT_SYM) ) {s = 24;}

                        else if ( ((LA65_0>=SASS_DEBUG && LA65_0<=SASS_WARN)) ) {s = 25;}

                        else if ( (LA65_0==SASS_IF||(LA65_0>=SASS_FOR && LA65_0<=SASS_WHILE)) ) {s = 26;}

                        else if ( (LA65_0==SASS_FUNCTION) ) {s = 30;}

                         
                        input.seek(index65_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA65_1 = input.LA(1);

                         
                        int index65_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index65_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA65_16 = input.LA(1);

                         
                        int index65_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate((((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))),""))) ) {s = 17;}

                        else if ( ((((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 23;}

                         
                        input.seek(index65_16);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA65_22 = input.LA(1);

                         
                        int index65_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate((((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))),""))) ) {s = 17;}

                        else if ( ((((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 23;}

                         
                        input.seek(index65_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 65, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA88_eotS =
        "\4\uffff";
    static final String DFA88_eofS =
        "\4\uffff";
    static final String DFA88_minS =
        "\2\13\2\uffff";
    static final String DFA88_maxS =
        "\2\124\2\uffff";
    static final String DFA88_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA88_specialS =
        "\4\uffff}>";
    static final String[] DFA88_transitionS = {
            "\1\3\1\uffff\1\2\11\uffff\1\1\73\uffff\2\1",
            "\1\3\1\uffff\1\2\11\uffff\1\1\73\uffff\2\1",
            "",
            ""
    };

    static final short[] DFA88_eot = DFA.unpackEncodedString(DFA88_eotS);
    static final short[] DFA88_eof = DFA.unpackEncodedString(DFA88_eofS);
    static final char[] DFA88_min = DFA.unpackEncodedStringToUnsignedChars(DFA88_minS);
    static final char[] DFA88_max = DFA.unpackEncodedStringToUnsignedChars(DFA88_maxS);
    static final short[] DFA88_accept = DFA.unpackEncodedString(DFA88_acceptS);
    static final short[] DFA88_special = DFA.unpackEncodedString(DFA88_specialS);
    static final short[][] DFA88_transition;

    static {
        int numStates = DFA88_transitionS.length;
        DFA88_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA88_transition[i] = DFA.unpackEncodedString(DFA88_transitionS[i]);
        }
    }

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = DFA88_eot;
            this.eof = DFA88_eof;
            this.min = DFA88_min;
            this.max = DFA88_max;
            this.accept = DFA88_accept;
            this.special = DFA88_special;
            this.transition = DFA88_transition;
        }
        public String getDescription() {
            return "()* loopback of 502:25: ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA113_eotS =
        "\7\uffff";
    static final String DFA113_eofS =
        "\7\uffff";
    static final String DFA113_minS =
        "\2\6\2\uffff\2\6\1\uffff";
    static final String DFA113_maxS =
        "\1\134\1\124\2\uffff\2\124\1\uffff";
    static final String DFA113_acceptS =
        "\2\uffff\1\1\1\2\2\uffff\1\1";
    static final String DFA113_specialS =
        "\1\0\3\uffff\1\2\1\1\1\uffff}>";
    static final String[] DFA113_transitionS = {
            "\1\3\4\uffff\1\3\6\uffff\1\3\1\uffff\1\3\35\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\2\3\1\1\5\3\1\uffff\1\3\34\uffff\1\2",
            "\1\4\4\uffff\1\3\1\uffff\1\3\4\uffff\1\3\1\uffff\1\3\2\uffff"+
            "\1\3\32\uffff\1\3\1\uffff\1\3\1\uffff\3\3\3\uffff\1\3\2\uffff"+
            "\1\3\23\uffff\2\3",
            "",
            "",
            "\1\3\4\uffff\1\3\1\uffff\1\3\5\uffff\1\6\1\3\2\uffff\1\5\32"+
            "\uffff\13\3\2\uffff\1\3\23\uffff\2\5",
            "\1\3\4\uffff\1\3\1\uffff\1\3\4\uffff\1\3\1\6\1\3\2\uffff\1"+
            "\5\32\uffff\14\3\1\uffff\1\3\23\uffff\2\5",
            ""
    };

    static final short[] DFA113_eot = DFA.unpackEncodedString(DFA113_eotS);
    static final short[] DFA113_eof = DFA.unpackEncodedString(DFA113_eofS);
    static final char[] DFA113_min = DFA.unpackEncodedStringToUnsignedChars(DFA113_minS);
    static final char[] DFA113_max = DFA.unpackEncodedStringToUnsignedChars(DFA113_maxS);
    static final short[] DFA113_accept = DFA.unpackEncodedString(DFA113_acceptS);
    static final short[] DFA113_special = DFA.unpackEncodedString(DFA113_specialS);
    static final short[][] DFA113_transition;

    static {
        int numStates = DFA113_transitionS.length;
        DFA113_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA113_transition[i] = DFA.unpackEncodedString(DFA113_transitionS[i]);
        }
    }

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = DFA113_eot;
            this.eof = DFA113_eof;
            this.min = DFA113_min;
            this.max = DFA113_max;
            this.accept = DFA113_accept;
            this.special = DFA113_special;
            this.transition = DFA113_transition;
        }
        public String getDescription() {
            return "584:5: ( ( cp_mixin_declaration )=> cp_mixin_declaration | selectorsGroup )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA113_0 = input.LA(1);

                         
                        int index113_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA113_0==DOT) ) {s = 1;}

                        else if ( (LA113_0==SASS_MIXIN) && (synpred7_Css3())) {s = 2;}

                        else if ( (LA113_0==IDENT||LA113_0==COMMA||LA113_0==GEN||LA113_0==COLON||LA113_0==MINUS||LA113_0==GREATER||(LA113_0>=HASH_SYMBOL && LA113_0<=HASH)||(LA113_0>=LBRACKET && LA113_0<=PIPE)||LA113_0==LESS_AND) ) {s = 3;}

                         
                        input.seek(index113_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA113_5 = input.LA(1);

                         
                        int index113_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA113_5==IDENT||LA113_5==COMMA||LA113_5==LBRACE||LA113_5==GEN||LA113_5==COLON||(LA113_5>=MINUS && LA113_5<=PIPE)||LA113_5==LESS_AND) ) {s = 3;}

                        else if ( (LA113_5==WS||(LA113_5>=NL && LA113_5<=COMMENT)) ) {s = 5;}

                        else if ( (LA113_5==LPAREN) && (synpred7_Css3())) {s = 6;}

                         
                        input.seek(index113_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA113_4 = input.LA(1);

                         
                        int index113_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA113_4==WS||(LA113_4>=NL && LA113_4<=COMMENT)) ) {s = 5;}

                        else if ( (LA113_4==IDENT||LA113_4==COMMA||LA113_4==LBRACE||LA113_4==COLON||(LA113_4>=MINUS && LA113_4<=STAR)||LA113_4==LESS_AND) ) {s = 3;}

                        else if ( (LA113_4==LPAREN) && (synpred7_Css3())) {s = 6;}

                         
                        input.seek(index113_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 113, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA118_eotS =
        "\4\uffff";
    static final String DFA118_eofS =
        "\4\uffff";
    static final String DFA118_minS =
        "\2\5\2\uffff";
    static final String DFA118_maxS =
        "\2\154\2\uffff";
    static final String DFA118_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA118_specialS =
        "\1\1\1\0\2\uffff}>";
    static final String[] DFA118_transitionS = {
            "\1\2\1\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\1\1\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1"+
            "\3\1\uffff\10\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff"+
            "\2\3\3\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\2\3",
            "\1\2\1\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1"+
            "\uffff\1\3\1\1\1\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\10\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff"+
            "\2\3\3\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\2\3",
            "",
            ""
    };

    static final short[] DFA118_eot = DFA.unpackEncodedString(DFA118_eotS);
    static final short[] DFA118_eof = DFA.unpackEncodedString(DFA118_eofS);
    static final char[] DFA118_min = DFA.unpackEncodedStringToUnsignedChars(DFA118_minS);
    static final char[] DFA118_max = DFA.unpackEncodedStringToUnsignedChars(DFA118_maxS);
    static final short[] DFA118_accept = DFA.unpackEncodedString(DFA118_acceptS);
    static final short[] DFA118_special = DFA.unpackEncodedString(DFA118_specialS);
    static final short[][] DFA118_transition;

    static {
        int numStates = DFA118_transitionS.length;
        DFA118_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA118_transition[i] = DFA.unpackEncodedString(DFA118_transitionS[i]);
        }
    }

    class DFA118 extends DFA {

        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = DFA118_eot;
            this.eof = DFA118_eof;
            this.min = DFA118_min;
            this.max = DFA118_max;
            this.accept = DFA118_accept;
            this.special = DFA118_special;
            this.transition = DFA118_transition;
        }
        public String getDescription() {
            return "606:22: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA118_1 = input.LA(1);

                         
                        int index118_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA118_1==SEMI) && (synpred8_Css3())) {s = 2;}

                        else if ( (LA118_1==WS||(LA118_1>=NL && LA118_1<=COMMENT)) ) {s = 1;}

                        else if ( (LA118_1==IDENT||(LA118_1>=IMPORT_SYM && LA118_1<=MEDIA_SYM)||LA118_1==RBRACE||LA118_1==GEN||LA118_1==COLON||LA118_1==AT_IDENT||LA118_1==MOZ_DOCUMENT_SYM||LA118_1==WEBKIT_KEYFRAMES_SYM||(LA118_1>=PAGE_SYM && LA118_1<=FONT_FACE_SYM)||LA118_1==MINUS||LA118_1==GREATER||(LA118_1>=HASH_SYMBOL && LA118_1<=PIPE)||LA118_1==LESS_AND||LA118_1==SASS_VAR||(LA118_1>=SASS_MIXIN && LA118_1<=SASS_INCLUDE)||LA118_1==SASS_EXTEND||(LA118_1>=SASS_DEBUG && LA118_1<=SASS_IF)||(LA118_1>=SASS_FOR && LA118_1<=SASS_WHILE)||(LA118_1>=SASS_RETURN && LA118_1<=SASS_CONTENT)) ) {s = 3;}

                         
                        input.seek(index118_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA118_0 = input.LA(1);

                         
                        int index118_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA118_0==WS||(LA118_0>=NL && LA118_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA118_0==SEMI) && (synpred8_Css3())) {s = 2;}

                        else if ( (LA118_0==IDENT||(LA118_0>=IMPORT_SYM && LA118_0<=MEDIA_SYM)||LA118_0==RBRACE||LA118_0==GEN||LA118_0==COLON||LA118_0==AT_IDENT||LA118_0==MOZ_DOCUMENT_SYM||LA118_0==WEBKIT_KEYFRAMES_SYM||(LA118_0>=PAGE_SYM && LA118_0<=FONT_FACE_SYM)||LA118_0==MINUS||LA118_0==GREATER||(LA118_0>=HASH_SYMBOL && LA118_0<=PIPE)||LA118_0==LESS_AND||LA118_0==SASS_VAR||(LA118_0>=SASS_MIXIN && LA118_0<=SASS_INCLUDE)||LA118_0==SASS_EXTEND||(LA118_0>=SASS_DEBUG && LA118_0<=SASS_IF)||(LA118_0>=SASS_FOR && LA118_0<=SASS_WHILE)||(LA118_0>=SASS_RETURN && LA118_0<=SASS_CONTENT)) ) {s = 3;}

                         
                        input.seek(index118_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 118, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA121_eotS =
        "\46\uffff";
    static final String DFA121_eofS =
        "\46\uffff";
    static final String DFA121_minS =
        "\1\6\10\0\5\uffff\1\0\3\uffff\1\0\23\uffff";
    static final String DFA121_maxS =
        "\1\154\10\0\5\uffff\1\0\3\uffff\1\0\23\uffff";
    static final String DFA121_acceptS =
        "\11\uffff\5\5\1\uffff\3\5\1\uffff\1\6\4\uffff\1\7\3\uffff\1\10\1"+
        "\11\1\12\1\13\1\14\1\15\1\1\1\2\1\3\1\4";
    static final String DFA121_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\5\uffff\1\11\3\uffff\1\12"+
        "\23\uffff}>";
    static final String[] DFA121_transitionS = {
            "\1\4\3\uffff\1\41\1\20\1\1\5\uffff\1\6\1\uffff\1\14\1\uffff"+
            "\1\22\1\uffff\1\23\3\uffff\1\23\1\uffff\3\23\21\uffff\1\16\1"+
            "\uffff\1\20\1\uffff\1\3\1\10\1\5\1\17\1\21\1\15\1\7\1\13\1\uffff"+
            "\1\12\7\uffff\1\2\24\uffff\1\11\1\36\3\uffff\1\34\1\uffff\2"+
            "\35\1\30\1\uffff\3\30\1\uffff\1\40\1\37",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA121_eot = DFA.unpackEncodedString(DFA121_eotS);
    static final short[] DFA121_eof = DFA.unpackEncodedString(DFA121_eofS);
    static final char[] DFA121_min = DFA.unpackEncodedStringToUnsignedChars(DFA121_minS);
    static final char[] DFA121_max = DFA.unpackEncodedStringToUnsignedChars(DFA121_maxS);
    static final short[] DFA121_accept = DFA.unpackEncodedString(DFA121_acceptS);
    static final short[] DFA121_special = DFA.unpackEncodedString(DFA121_specialS);
    static final short[][] DFA121_transition;

    static {
        int numStates = DFA121_transitionS.length;
        DFA121_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA121_transition[i] = DFA.unpackEncodedString(DFA121_transitionS[i]);
        }
    }

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = DFA121_eot;
            this.eof = DFA121_eof;
            this.min = DFA121_min;
            this.max = DFA121_max;
            this.accept = DFA121_accept;
            this.special = DFA121_special;
            this.transition = DFA121_transition;
        }
        public String getDescription() {
            return "617:1: declaration : ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_nested_properties )=> sass_nested_properties | ( propertyDeclaration )=> propertyDeclaration | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )* COLON )=> propertyDeclaration | ( rule )=> rule | {...}? at_rule | {...}? sass_control | {...}? sass_extend | {...}? sass_debug | {...}? cp_mixin_call | {...}? sass_content | {...}? sass_function_return | {...}? importItem );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA121_0 = input.LA(1);

                         
                        int index121_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA121_0==MEDIA_SYM) ) {s = 1;}

                        else if ( (LA121_0==SASS_VAR) ) {s = 2;}

                        else if ( (LA121_0==HASH_SYMBOL) ) {s = 3;}

                        else if ( (LA121_0==IDENT) ) {s = 4;}

                        else if ( (LA121_0==DOT) ) {s = 5;}

                        else if ( (LA121_0==GEN) ) {s = 6;}

                        else if ( (LA121_0==STAR) ) {s = 7;}

                        else if ( (LA121_0==HASH) ) {s = 8;}

                        else if ( (LA121_0==SASS_MIXIN) && (synpred13_Css3())) {s = 9;}

                        else if ( (LA121_0==LESS_AND) && (synpred13_Css3())) {s = 10;}

                        else if ( (LA121_0==PIPE) && (synpred13_Css3())) {s = 11;}

                        else if ( (LA121_0==COLON) && (synpred13_Css3())) {s = 12;}

                        else if ( (LA121_0==SASS_EXTEND_ONLY_SELECTOR) && (synpred13_Css3())) {s = 13;}

                        else if ( (LA121_0==MINUS) ) {s = 14;}

                        else if ( (LA121_0==LBRACKET) && (synpred13_Css3())) {s = 15;}

                        else if ( (LA121_0==COMMA||LA121_0==GREATER) && (synpred13_Css3())) {s = 16;}

                        else if ( (LA121_0==DCOLON) && (synpred13_Css3())) {s = 17;}

                        else if ( (LA121_0==AT_IDENT) ) {s = 18;}

                        else if ( (LA121_0==MOZ_DOCUMENT_SYM||LA121_0==WEBKIT_KEYFRAMES_SYM||(LA121_0>=PAGE_SYM && LA121_0<=FONT_FACE_SYM)) ) {s = 19;}

                        else if ( (LA121_0==SASS_IF||(LA121_0>=SASS_FOR && LA121_0<=SASS_WHILE)) ) {s = 24;}

                        else if ( (LA121_0==SASS_EXTEND) ) {s = 28;}

                        else if ( ((LA121_0>=SASS_DEBUG && LA121_0<=SASS_WARN)) ) {s = 29;}

                        else if ( (LA121_0==SASS_INCLUDE) ) {s = 30;}

                        else if ( (LA121_0==SASS_CONTENT) ) {s = 31;}

                        else if ( (LA121_0==SASS_RETURN) ) {s = 32;}

                        else if ( (LA121_0==IMPORT_SYM) ) {s = 33;}

                         
                        input.seek(index121_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA121_1 = input.LA(1);

                         
                        int index121_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred9_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred9_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 34;}

                        else if ( (((synpred10_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 35;}

                        else if ( ((((synpred11_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred11_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 36;}

                        else if ( ((((synpred12_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred12_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 19;}

                         
                        input.seek(index121_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA121_2 = input.LA(1);

                         
                        int index121_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred9_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((synpred9_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 34;}

                        else if ( (((synpred10_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 35;}

                        else if ( ((((synpred11_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||(((synpred11_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 36;}

                        else if ( (((((synpred12_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((synpred12_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 37;}

                         
                        input.seek(index121_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA121_3 = input.LA(1);

                         
                        int index121_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_Css3()) ) {s = 35;}

                        else if ( ((synpred11_Css3()||(synpred11_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 36;}

                        else if ( (((synpred12_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred12_Css3())) ) {s = 37;}

                        else if ( (synpred13_Css3()) ) {s = 17;}

                         
                        input.seek(index121_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA121_4 = input.LA(1);

                         
                        int index121_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_Css3()) ) {s = 35;}

                        else if ( ((synpred11_Css3()||(synpred11_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 36;}

                        else if ( (((synpred12_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred12_Css3())) ) {s = 37;}

                        else if ( (synpred13_Css3()) ) {s = 17;}

                         
                        input.seek(index121_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA121_5 = input.LA(1);

                         
                        int index121_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_Css3()) ) {s = 35;}

                        else if ( ((synpred11_Css3()||(synpred11_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 36;}

                        else if ( (((synpred12_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred12_Css3())) ) {s = 37;}

                        else if ( ((synpred13_Css3()||(synpred13_Css3()&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 17;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 30;}

                         
                        input.seek(index121_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA121_6 = input.LA(1);

                         
                        int index121_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_Css3()) ) {s = 35;}

                        else if ( ((synpred11_Css3()||(synpred11_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 36;}

                        else if ( (((synpred12_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred12_Css3())) ) {s = 37;}

                        else if ( (synpred13_Css3()) ) {s = 17;}

                         
                        input.seek(index121_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA121_7 = input.LA(1);

                         
                        int index121_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred11_Css3()||(synpred11_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 36;}

                        else if ( (((synpred12_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred12_Css3())) ) {s = 37;}

                        else if ( (synpred13_Css3()) ) {s = 17;}

                         
                        input.seek(index121_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA121_8 = input.LA(1);

                         
                        int index121_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_Css3()) ) {s = 35;}

                        else if ( ((synpred11_Css3()||(synpred11_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 36;}

                        else if ( (((synpred12_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred12_Css3())) ) {s = 37;}

                        else if ( (synpred13_Css3()) ) {s = 17;}

                         
                        input.seek(index121_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA121_14 = input.LA(1);

                         
                        int index121_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_Css3()) ) {s = 35;}

                        else if ( ((synpred11_Css3()||(synpred11_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 36;}

                        else if ( (((synpred12_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred12_Css3())) ) {s = 37;}

                        else if ( (synpred13_Css3()) ) {s = 17;}

                         
                        input.seek(index121_14);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA121_18 = input.LA(1);

                         
                        int index121_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred9_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred9_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 34;}

                        else if ( (((synpred10_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 35;}

                        else if ( ((((synpred11_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred11_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 36;}

                        else if ( ((((synpred12_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred12_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 19;}

                         
                        input.seek(index121_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 121, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA124_eotS =
        "\21\uffff";
    static final String DFA124_eofS =
        "\21\uffff";
    static final String DFA124_minS =
        "\2\6\3\0\1\uffff\1\0\2\6\5\uffff\1\0\1\uffff\1\0";
    static final String DFA124_maxS =
        "\1\77\1\124\3\0\1\uffff\1\0\2\124\5\uffff\1\0\1\uffff\1\0";
    static final String DFA124_acceptS =
        "\5\uffff\1\2\3\uffff\5\1\1\uffff\1\1\1\uffff";
    static final String DFA124_specialS =
        "\1\3\1\10\1\4\1\5\1\7\1\uffff\1\2\1\0\1\11\5\uffff\1\1\1\uffff\1"+
        "\6}>";
    static final String[] DFA124_transitionS = {
            "\1\2\4\uffff\1\11\6\uffff\1\5\1\uffff\1\10\35\uffff\1\11\1\uffff"+
            "\1\11\1\uffff\1\1\1\6\1\7\3\5\1\3\1\5\1\uffff\1\4",
            "\1\15\4\uffff\1\15\1\uffff\1\12\6\uffff\1\15\2\uffff\1\13\32"+
            "\uffff\1\15\1\uffff\1\15\1\uffff\1\14\2\15\3\uffff\1\15\1\uffff"+
            "\1\5\1\15\23\uffff\2\13",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\16\4\uffff\1\15\1\uffff\1\17\4\uffff\1\5\1\uffff\1\15\2"+
            "\uffff\1\13\32\uffff\1\15\1\uffff\1\15\1\uffff\1\14\2\15\3\uffff"+
            "\1\15\2\uffff\1\15\23\uffff\2\13",
            "\1\20\4\uffff\1\15\1\uffff\1\17\3\uffff\2\5\1\uffff\1\15\2"+
            "\uffff\1\13\32\uffff\1\15\1\uffff\1\15\1\uffff\1\14\2\15\3\uffff"+
            "\1\15\2\uffff\1\15\23\uffff\2\13",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff"
    };

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "639:1: selectorsGroup : ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression | selector ( COMMA ( ws )? selector )* );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA124_7 = input.LA(1);

                         
                        int index124_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_7==IDENT) ) {s = 14;}

                        else if ( (LA124_7==WS||(LA124_7>=NL && LA124_7<=COMMENT)) && (synpred14_Css3())) {s = 11;}

                        else if ( (LA124_7==HASH_SYMBOL) && (synpred14_Css3())) {s = 12;}

                        else if ( (LA124_7==GEN) ) {s = 5;}

                        else if ( (LA124_7==COMMA||LA124_7==COLON||LA124_7==MINUS||LA124_7==GREATER||(LA124_7>=HASH && LA124_7<=DOT)||LA124_7==STAR||LA124_7==LESS_AND) && (synpred14_Css3())) {s = 13;}

                        else if ( (LA124_7==LBRACE) && (synpred14_Css3())) {s = 15;}

                         
                        input.seek(index124_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA124_14 = input.LA(1);

                         
                        int index124_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_Css3()) ) {s = 15;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index124_14);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA124_6 = input.LA(1);

                         
                        int index124_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_Css3()) ) {s = 13;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index124_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA124_0 = input.LA(1);

                         
                        int index124_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_0==HASH_SYMBOL) ) {s = 1;}

                        else if ( (LA124_0==IDENT) ) {s = 2;}

                        else if ( (LA124_0==STAR) ) {s = 3;}

                        else if ( (LA124_0==LESS_AND) ) {s = 4;}

                        else if ( (LA124_0==GEN||(LA124_0>=LBRACKET && LA124_0<=SASS_EXTEND_ONLY_SELECTOR)||LA124_0==PIPE) ) {s = 5;}

                        else if ( (LA124_0==HASH) ) {s = 6;}

                        else if ( (LA124_0==DOT) ) {s = 7;}

                        else if ( (LA124_0==COLON) ) {s = 8;}

                        else if ( (LA124_0==COMMA||LA124_0==MINUS||LA124_0==GREATER) && (synpred14_Css3())) {s = 9;}

                         
                        input.seek(index124_0);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA124_2 = input.LA(1);

                         
                        int index124_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_Css3()) ) {s = 13;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index124_2);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA124_3 = input.LA(1);

                         
                        int index124_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_Css3()) ) {s = 13;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index124_3);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA124_16 = input.LA(1);

                         
                        int index124_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_Css3()) ) {s = 15;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index124_16);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA124_4 = input.LA(1);

                         
                        int index124_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_Css3()) ) {s = 13;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index124_4);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA124_1 = input.LA(1);

                         
                        int index124_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_1==LBRACE) && (synpred14_Css3())) {s = 10;}

                        else if ( (LA124_1==NAME) ) {s = 5;}

                        else if ( (LA124_1==WS||(LA124_1>=NL && LA124_1<=COMMENT)) && (synpred14_Css3())) {s = 11;}

                        else if ( (LA124_1==HASH_SYMBOL) && (synpred14_Css3())) {s = 12;}

                        else if ( (LA124_1==IDENT||LA124_1==COMMA||LA124_1==COLON||LA124_1==MINUS||LA124_1==GREATER||(LA124_1>=HASH && LA124_1<=DOT)||LA124_1==STAR||LA124_1==LESS_AND) && (synpred14_Css3())) {s = 13;}

                         
                        input.seek(index124_1);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA124_8 = input.LA(1);

                         
                        int index124_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_8==WS||(LA124_8>=NL && LA124_8<=COMMENT)) && (synpred14_Css3())) {s = 11;}

                        else if ( (LA124_8==HASH_SYMBOL) && (synpred14_Css3())) {s = 12;}

                        else if ( (LA124_8==IDENT) ) {s = 16;}

                        else if ( (LA124_8==LBRACE) && (synpred14_Css3())) {s = 15;}

                        else if ( (LA124_8==COMMA||LA124_8==COLON||LA124_8==MINUS||LA124_8==GREATER||(LA124_8>=HASH && LA124_8<=DOT)||LA124_8==STAR||LA124_8==LESS_AND) && (synpred14_Css3())) {s = 13;}

                        else if ( ((LA124_8>=NOT && LA124_8<=GEN)) ) {s = 5;}

                         
                        input.seek(index124_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 124, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA128_eotS =
        "\4\uffff";
    static final String DFA128_eofS =
        "\4\uffff";
    static final String DFA128_minS =
        "\1\13\1\uffff\1\6\1\uffff";
    static final String DFA128_maxS =
        "\1\124\1\uffff\1\124\1\uffff";
    static final String DFA128_acceptS =
        "\1\uffff\1\2\1\uffff\1\1";
    static final String DFA128_specialS =
        "\4\uffff}>";
    static final String[] DFA128_transitionS = {
            "\1\1\1\uffff\1\1\11\uffff\1\2\33\uffff\3\3\35\uffff\2\2",
            "",
            "\1\3\6\uffff\1\1\4\uffff\1\3\1\uffff\1\3\2\uffff\1\2\33\uffff"+
            "\13\3\1\uffff\1\3\23\uffff\2\2",
            ""
    };

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "()* loopback of 648:30: ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA127_eotS =
        "\4\uffff";
    static final String DFA127_eofS =
        "\4\uffff";
    static final String DFA127_minS =
        "\1\27\1\6\2\uffff";
    static final String DFA127_maxS =
        "\2\124\2\uffff";
    static final String DFA127_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA127_specialS =
        "\4\uffff}>";
    static final String[] DFA127_transitionS = {
            "\1\1\33\uffff\3\2\35\uffff\2\1",
            "\1\3\13\uffff\1\3\1\uffff\1\3\2\uffff\1\1\33\uffff\3\2\10\3"+
            "\1\uffff\1\3\23\uffff\2\1",
            "",
            ""
    };

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "648:32: ( ( ( ws )? combinator ( ws )? ) | ws )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA130_eotS =
        "\53\uffff";
    static final String DFA130_eofS =
        "\53\uffff";
    static final String DFA130_minS =
        "\1\5\1\0\11\uffff\1\0\1\uffff\1\0\2\uffff\1\0\4\uffff\2\0\1\uffff"+
        "\2\0\21\uffff";
    static final String DFA130_maxS =
        "\1\154\1\0\11\uffff\1\0\1\uffff\1\0\2\uffff\1\0\4\uffff\2\0\1\uffff"+
        "\2\0\21\uffff";
    static final String DFA130_acceptS =
        "\2\uffff\1\2\47\uffff\1\1";
    static final String DFA130_specialS =
        "\1\uffff\1\0\11\uffff\1\1\1\uffff\1\2\2\uffff\1\3\4\uffff\1\4\1"+
        "\5\1\uffff\1\6\1\7\21\uffff}>";
    static final String[] DFA130_transitionS = {
            "\2\2\3\uffff\5\2\3\uffff\1\2\1\uffff\1\25\2\2\1\1\1\2\3\uffff"+
            "\1\2\1\uffff\3\2\21\uffff\4\2\1\13\1\20\1\15\1\30\1\31\1\26"+
            "\2\2\1\uffff\1\2\7\uffff\1\2\13\uffff\2\1\7\uffff\2\2\3\uffff"+
            "\5\2\1\uffff\3\2\1\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA130_eot = DFA.unpackEncodedString(DFA130_eotS);
    static final short[] DFA130_eof = DFA.unpackEncodedString(DFA130_eofS);
    static final char[] DFA130_min = DFA.unpackEncodedStringToUnsignedChars(DFA130_minS);
    static final char[] DFA130_max = DFA.unpackEncodedStringToUnsignedChars(DFA130_maxS);
    static final short[] DFA130_accept = DFA.unpackEncodedString(DFA130_acceptS);
    static final short[] DFA130_special = DFA.unpackEncodedString(DFA130_specialS);
    static final short[][] DFA130_transition;

    static {
        int numStates = DFA130_transitionS.length;
        DFA130_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA130_transition[i] = DFA.unpackEncodedString(DFA130_transitionS[i]);
        }
    }

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;
        }
        public String getDescription() {
            return "()* loopback of 660:17: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA130_1 = input.LA(1);

                         
                        int index130_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index130_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA130_11 = input.LA(1);

                         
                        int index130_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index130_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA130_13 = input.LA(1);

                         
                        int index130_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index130_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA130_16 = input.LA(1);

                         
                        int index130_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index130_16);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA130_21 = input.LA(1);

                         
                        int index130_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index130_21);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA130_22 = input.LA(1);

                         
                        int index130_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index130_22);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA130_24 = input.LA(1);

                         
                        int index130_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index130_24);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA130_25 = input.LA(1);

                         
                        int index130_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index130_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 130, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA132_eotS =
        "\53\uffff";
    static final String DFA132_eofS =
        "\53\uffff";
    static final String DFA132_minS =
        "\1\5\1\0\11\uffff\1\0\1\uffff\1\0\2\uffff\1\0\4\uffff\2\0\1\uffff"+
        "\2\0\21\uffff";
    static final String DFA132_maxS =
        "\1\154\1\0\11\uffff\1\0\1\uffff\1\0\2\uffff\1\0\4\uffff\2\0\1\uffff"+
        "\2\0\21\uffff";
    static final String DFA132_acceptS =
        "\2\uffff\1\2\47\uffff\1\1";
    static final String DFA132_specialS =
        "\1\uffff\1\0\11\uffff\1\1\1\uffff\1\2\2\uffff\1\3\4\uffff\1\4\1"+
        "\5\1\uffff\1\6\1\7\21\uffff}>";
    static final String[] DFA132_transitionS = {
            "\2\2\3\uffff\5\2\3\uffff\1\2\1\uffff\1\25\2\2\1\1\1\2\3\uffff"+
            "\1\2\1\uffff\3\2\21\uffff\4\2\1\13\1\20\1\15\1\30\1\31\1\26"+
            "\2\2\1\uffff\1\2\7\uffff\1\2\13\uffff\2\1\7\uffff\2\2\3\uffff"+
            "\5\2\1\uffff\3\2\1\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "()* loopback of 662:20: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA132_1 = input.LA(1);

                         
                        int index132_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index132_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA132_11 = input.LA(1);

                         
                        int index132_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index132_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA132_13 = input.LA(1);

                         
                        int index132_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index132_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA132_16 = input.LA(1);

                         
                        int index132_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index132_16);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA132_21 = input.LA(1);

                         
                        int index132_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index132_21);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA132_22 = input.LA(1);

                         
                        int index132_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index132_22);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA132_24 = input.LA(1);

                         
                        int index132_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index132_24);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA132_25 = input.LA(1);

                         
                        int index132_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index132_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 132, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA148_eotS =
        "\4\uffff";
    static final String DFA148_eofS =
        "\4\uffff";
    static final String DFA148_minS =
        "\2\5\2\uffff";
    static final String DFA148_maxS =
        "\2\154\2\uffff";
    static final String DFA148_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA148_specialS =
        "\4\uffff}>";
    static final String[] DFA148_transitionS = {
            "\2\3\3\uffff\5\3\3\uffff\1\3\1\2\3\3\1\1\1\3\3\uffff\1\3\1\uffff"+
            "\3\3\21\uffff\14\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff"+
            "\2\3\3\uffff\5\3\1\uffff\3\3\1\uffff\2\3",
            "\2\3\3\uffff\5\3\3\uffff\1\3\1\2\1\3\1\uffff\1\3\1\1\1\3\3"+
            "\uffff\1\3\1\uffff\3\3\21\uffff\14\3\1\uffff\1\3\7\uffff\1\3"+
            "\13\uffff\2\1\7\uffff\2\3\3\uffff\5\3\1\uffff\3\3\1\uffff\2"+
            "\3",
            "",
            ""
    };

    static final short[] DFA148_eot = DFA.unpackEncodedString(DFA148_eotS);
    static final short[] DFA148_eof = DFA.unpackEncodedString(DFA148_eofS);
    static final char[] DFA148_min = DFA.unpackEncodedStringToUnsignedChars(DFA148_minS);
    static final char[] DFA148_max = DFA.unpackEncodedStringToUnsignedChars(DFA148_maxS);
    static final short[] DFA148_accept = DFA.unpackEncodedString(DFA148_acceptS);
    static final short[] DFA148_special = DFA.unpackEncodedString(DFA148_specialS);
    static final short[][] DFA148_transition;

    static {
        int numStates = DFA148_transitionS.length;
        DFA148_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA148_transition[i] = DFA.unpackEncodedString(DFA148_transitionS[i]);
        }
    }

    class DFA148 extends DFA {

        public DFA148(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = DFA148_eot;
            this.eof = DFA148_eof;
            this.min = DFA148_min;
            this.max = DFA148_max;
            this.accept = DFA148_accept;
            this.special = DFA148_special;
            this.transition = DFA148_transition;
        }
        public String getDescription() {
            return "762:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA159_eotS =
        "\12\uffff";
    static final String DFA159_eofS =
        "\12\uffff";
    static final String DFA159_minS =
        "\1\6\7\0\2\uffff";
    static final String DFA159_maxS =
        "\1\107\7\0\2\uffff";
    static final String DFA159_acceptS =
        "\10\uffff\1\1\1\2";
    static final String DFA159_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\2\uffff}>";
    static final String[] DFA159_transitionS = {
            "\1\3\5\uffff\1\6\5\uffff\1\5\3\uffff\1\6\33\uffff\1\4\3\uffff"+
            "\1\2\2\4\3\uffff\1\1\12\uffff\1\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "771:1: propertyDeclaration : ( ( STAR )? property COLON ( ws )? propertyValue ( ( ws )? prio )? | {...}? ( STAR )? property COLON ( ws )? cp_propertyValue );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA159_1 = input.LA(1);

                         
                        int index159_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index159_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA159_2 = input.LA(1);

                         
                        int index159_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index159_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA159_3 = input.LA(1);

                         
                        int index159_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index159_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA159_4 = input.LA(1);

                         
                        int index159_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index159_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA159_5 = input.LA(1);

                         
                        int index159_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index159_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA159_6 = input.LA(1);

                         
                        int index159_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 8;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 9;}

                         
                        input.seek(index159_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA159_7 = input.LA(1);

                         
                        int index159_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 8;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 9;}

                         
                        input.seek(index159_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 159, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA156_eotS =
        "\4\uffff";
    static final String DFA156_eofS =
        "\1\3\3\uffff";
    static final String DFA156_minS =
        "\2\5\2\uffff";
    static final String DFA156_maxS =
        "\2\154\2\uffff";
    static final String DFA156_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA156_specialS =
        "\4\uffff}>";
    static final String[] DFA156_transitionS = {
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\1\1\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1"+
            "\3\1\uffff\10\3\1\uffff\1\3\7\uffff\1\3\1\2\12\uffff\2\1\7\uffff"+
            "\2\3\3\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\2\3",
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\1\1\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1"+
            "\3\1\uffff\10\3\1\uffff\1\3\7\uffff\1\3\1\2\12\uffff\2\1\7\uffff"+
            "\2\3\3\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\2\3",
            "",
            ""
    };

    static final short[] DFA156_eot = DFA.unpackEncodedString(DFA156_eotS);
    static final short[] DFA156_eof = DFA.unpackEncodedString(DFA156_eofS);
    static final char[] DFA156_min = DFA.unpackEncodedStringToUnsignedChars(DFA156_minS);
    static final char[] DFA156_max = DFA.unpackEncodedStringToUnsignedChars(DFA156_maxS);
    static final short[] DFA156_accept = DFA.unpackEncodedString(DFA156_acceptS);
    static final short[] DFA156_special = DFA.unpackEncodedString(DFA156_specialS);
    static final short[][] DFA156_transition;

    static {
        int numStates = DFA156_transitionS.length;
        DFA156_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA156_transition[i] = DFA.unpackEncodedString(DFA156_transitionS[i]);
        }
    }

    class DFA156 extends DFA {

        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = DFA156_eot;
            this.eof = DFA156_eof;
            this.min = DFA156_min;
            this.max = DFA156_max;
            this.accept = DFA156_accept;
            this.special = DFA156_special;
            this.transition = DFA156_transition;
        }
        public String getDescription() {
            return "773:44: ( ( ws )? prio )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA160_eotS =
        "\31\uffff";
    static final String DFA160_eofS =
        "\31\uffff";
    static final String DFA160_minS =
        "\1\6\1\uffff\24\0\3\uffff";
    static final String DFA160_maxS =
        "\1\122\1\uffff\24\0\3\uffff";
    static final String DFA160_acceptS =
        "\1\uffff\1\1\26\uffff\1\2";
    static final String DFA160_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\3\uffff}>";
    static final String[] DFA160_transitionS = {
            "\1\3\1\17\1\21\3\uffff\1\23\4\uffff\1\1\1\20\1\1\2\uffff\1\23"+
            "\6\uffff\1\5\24\uffff\2\2\2\uffff\1\25\1\22\17\uffff\1\24\1"+
            "\1\1\4\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA160_eot = DFA.unpackEncodedString(DFA160_eotS);
    static final short[] DFA160_eof = DFA.unpackEncodedString(DFA160_eofS);
    static final char[] DFA160_min = DFA.unpackEncodedStringToUnsignedChars(DFA160_minS);
    static final char[] DFA160_max = DFA.unpackEncodedStringToUnsignedChars(DFA160_maxS);
    static final short[] DFA160_accept = DFA.unpackEncodedString(DFA160_acceptS);
    static final short[] DFA160_special = DFA.unpackEncodedString(DFA160_specialS);
    static final short[][] DFA160_transition;

    static {
        int numStates = DFA160_transitionS.length;
        DFA160_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA160_transition[i] = DFA.unpackEncodedString(DFA160_transitionS[i]);
        }
    }

    class DFA160 extends DFA {

        public DFA160(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 160;
            this.eot = DFA160_eot;
            this.eof = DFA160_eof;
            this.min = DFA160_min;
            this.max = DFA160_max;
            this.accept = DFA160_accept;
            this.special = DFA160_special;
            this.transition = DFA160_transition;
        }
        public String getDescription() {
            return "784:1: cp_propertyValue : ({...}? cp_expression_list | propertyValue );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA160_2 = input.LA(1);

                         
                        int index160_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index160_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA160_3 = input.LA(1);

                         
                        int index160_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index160_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA160_4 = input.LA(1);

                         
                        int index160_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index160_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA160_5 = input.LA(1);

                         
                        int index160_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index160_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA160_6 = input.LA(1);

                         
                        int index160_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index160_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA160_7 = input.LA(1);

                         
                        int index160_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index160_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA160_8 = input.LA(1);

                         
                        int index160_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index160_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA160_9 = input.LA(1);

                         
                        int index160_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index160_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA160_10 = input.LA(1);

                         
                        int index160_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index160_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA160_11 = input.LA(1);

                         
                        int index160_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index160_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA160_12 = input.LA(1);

                         
                        int index160_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index160_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA160_13 = input.LA(1);

                         
                        int index160_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index160_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA160_14 = input.LA(1);

                         
                        int index160_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index160_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA160_15 = input.LA(1);

                         
                        int index160_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index160_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA160_16 = input.LA(1);

                         
                        int index160_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index160_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA160_17 = input.LA(1);

                         
                        int index160_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index160_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA160_18 = input.LA(1);

                         
                        int index160_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index160_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA160_19 = input.LA(1);

                         
                        int index160_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 1;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 24;}

                         
                        input.seek(index160_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA160_20 = input.LA(1);

                         
                        int index160_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 1;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 24;}

                         
                        input.seek(index160_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA160_21 = input.LA(1);

                         
                        int index160_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index160_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 160, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA165_eotS =
        "\71\uffff";
    static final String DFA165_eofS =
        "\1\2\70\uffff";
    static final String DFA165_minS =
        "\1\5\1\0\4\uffff\4\0\1\uffff\1\0\1\uffff\1\0\5\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\1\0\41\uffff";
    static final String DFA165_maxS =
        "\1\154\1\0\4\uffff\4\0\1\uffff\1\0\1\uffff\1\0\5\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\1\0\41\uffff";
    static final String DFA165_acceptS =
        "\2\uffff\1\2\47\uffff\17\1";
    static final String DFA165_specialS =
        "\1\0\1\1\4\uffff\1\2\1\3\1\4\1\5\1\uffff\1\6\1\uffff\1\7\5\uffff"+
        "\1\10\1\uffff\1\11\1\uffff\1\12\41\uffff}>";
    static final String[] DFA165_transitionS = {
            "\1\2\1\11\1\67\1\70\1\uffff\1\2\1\25\1\6\2\2\3\uffff\1\13\1"+
            "\uffff\2\2\1\27\1\1\1\2\3\uffff\1\2\1\55\3\2\20\uffff\1\52\1"+
            "\23\1\53\1\2\1\uffff\1\10\1\15\6\2\1\uffff\1\2\7\uffff\1\7\1"+
            "\2\1\54\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\2\1\7\uffff"+
            "\2\2\3\uffff\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA165_eot = DFA.unpackEncodedString(DFA165_eotS);
    static final short[] DFA165_eof = DFA.unpackEncodedString(DFA165_eofS);
    static final char[] DFA165_min = DFA.unpackEncodedStringToUnsignedChars(DFA165_minS);
    static final char[] DFA165_max = DFA.unpackEncodedStringToUnsignedChars(DFA165_maxS);
    static final short[] DFA165_accept = DFA.unpackEncodedString(DFA165_acceptS);
    static final short[] DFA165_special = DFA.unpackEncodedString(DFA165_specialS);
    static final short[][] DFA165_transition;

    static {
        int numStates = DFA165_transitionS.length;
        DFA165_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA165_transition[i] = DFA.unpackEncodedString(DFA165_transitionS[i]);
        }
    }

    class DFA165 extends DFA {

        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = DFA165_eot;
            this.eof = DFA165_eof;
            this.min = DFA165_min;
            this.max = DFA165_max;
            this.accept = DFA165_accept;
            this.special = DFA165_special;
            this.transition = DFA165_transition;
        }
        public String getDescription() {
            return "()* loopback of 840:12: ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA165_0 = input.LA(1);

                         
                        int index165_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA165_0==WS||(LA165_0>=NL && LA165_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA165_0==EOF||LA165_0==SEMI||LA165_0==IMPORT_SYM||(LA165_0>=LBRACE && LA165_0<=RBRACE)||(LA165_0>=COLON && LA165_0<=RPAREN)||LA165_0==MOZ_DOCUMENT_SYM||LA165_0==WEBKIT_KEYFRAMES_SYM||(LA165_0>=PAGE_SYM && LA165_0<=FONT_FACE_SYM)||LA165_0==GREATER||(LA165_0>=DOT && LA165_0<=PIPE)||LA165_0==LESS_AND||LA165_0==IMPORTANT_SYM||(LA165_0>=SASS_MIXIN && LA165_0<=SASS_INCLUDE)||LA165_0==SASS_EXTEND||(LA165_0>=SASS_DEBUG && LA165_0<=SASS_IF)||(LA165_0>=SASS_FOR && LA165_0<=SASS_WHILE)||(LA165_0>=SASS_RETURN && LA165_0<=SASS_CONTENT)) ) {s = 2;}

                        else if ( (LA165_0==MEDIA_SYM) ) {s = 6;}

                        else if ( (LA165_0==SASS_VAR) ) {s = 7;}

                        else if ( (LA165_0==HASH_SYMBOL) ) {s = 8;}

                        else if ( (LA165_0==IDENT) ) {s = 9;}

                        else if ( (LA165_0==GEN) ) {s = 11;}

                        else if ( (LA165_0==HASH) ) {s = 13;}

                        else if ( (LA165_0==MINUS) ) {s = 19;}

                        else if ( (LA165_0==COMMA) ) {s = 21;}

                        else if ( (LA165_0==AT_IDENT) ) {s = 23;}

                        else if ( (LA165_0==SOLIDUS) && (synpred18_Css3())) {s = 42;}

                        else if ( (LA165_0==PLUS) && (synpred18_Css3())) {s = 43;}

                        else if ( (LA165_0==NUMBER) && (synpred18_Css3())) {s = 44;}

                        else if ( (LA165_0==PERCENTAGE) && (synpred18_Css3())) {s = 45;}

                        else if ( (LA165_0==LENGTH) && (synpred18_Css3())) {s = 46;}

                        else if ( (LA165_0==EMS) && (synpred18_Css3())) {s = 47;}

                        else if ( (LA165_0==REM) && (synpred18_Css3())) {s = 48;}

                        else if ( (LA165_0==EXS) && (synpred18_Css3())) {s = 49;}

                        else if ( (LA165_0==ANGLE) && (synpred18_Css3())) {s = 50;}

                        else if ( (LA165_0==TIME) && (synpred18_Css3())) {s = 51;}

                        else if ( (LA165_0==FREQ) && (synpred18_Css3())) {s = 52;}

                        else if ( (LA165_0==RESOLUTION) && (synpred18_Css3())) {s = 53;}

                        else if ( (LA165_0==DIMENSION) && (synpred18_Css3())) {s = 54;}

                        else if ( (LA165_0==STRING) && (synpred18_Css3())) {s = 55;}

                        else if ( (LA165_0==URI) && (synpred18_Css3())) {s = 56;}

                         
                        input.seek(index165_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA165_1 = input.LA(1);

                         
                        int index165_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_Css3()) ) {s = 56;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index165_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA165_6 = input.LA(1);

                         
                        int index165_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 56;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index165_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA165_7 = input.LA(1);

                         
                        int index165_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 56;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index165_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA165_8 = input.LA(1);

                         
                        int index165_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 56;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index165_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA165_9 = input.LA(1);

                         
                        int index165_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_Css3()) ) {s = 56;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index165_9);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA165_11 = input.LA(1);

                         
                        int index165_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_Css3()) ) {s = 56;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index165_11);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA165_13 = input.LA(1);

                         
                        int index165_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_Css3()) ) {s = 56;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index165_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA165_19 = input.LA(1);

                         
                        int index165_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_Css3()) ) {s = 56;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index165_19);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA165_21 = input.LA(1);

                         
                        int index165_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_Css3()) ) {s = 56;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index165_21);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA165_23 = input.LA(1);

                         
                        int index165_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 56;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index165_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 165, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA164_eotS =
        "\5\uffff";
    static final String DFA164_eofS =
        "\5\uffff";
    static final String DFA164_minS =
        "\2\6\3\uffff";
    static final String DFA164_maxS =
        "\2\124\3\uffff";
    static final String DFA164_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA164_specialS =
        "\5\uffff}>";
    static final String[] DFA164_transitionS = {
            "\3\3\2\uffff\1\2\1\3\5\uffff\1\3\3\uffff\1\3\1\1\5\uffff\1\3"+
            "\23\uffff\1\2\2\3\2\uffff\2\3\17\uffff\1\3\1\uffff\12\3\2\1",
            "\3\4\2\uffff\1\2\1\4\5\uffff\1\4\3\uffff\1\4\1\1\5\uffff\1"+
            "\4\23\uffff\1\2\2\4\2\uffff\2\4\17\uffff\1\4\1\uffff\12\4\2"+
            "\1",
            "",
            "",
            ""
    };

    static final short[] DFA164_eot = DFA.unpackEncodedString(DFA164_eotS);
    static final short[] DFA164_eof = DFA.unpackEncodedString(DFA164_eofS);
    static final char[] DFA164_min = DFA.unpackEncodedStringToUnsignedChars(DFA164_minS);
    static final char[] DFA164_max = DFA.unpackEncodedStringToUnsignedChars(DFA164_maxS);
    static final short[] DFA164_accept = DFA.unpackEncodedString(DFA164_acceptS);
    static final short[] DFA164_special = DFA.unpackEncodedString(DFA164_specialS);
    static final short[][] DFA164_transition;

    static {
        int numStates = DFA164_transitionS.length;
        DFA164_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA164_transition[i] = DFA.unpackEncodedString(DFA164_transitionS[i]);
        }
    }

    class DFA164 extends DFA {

        public DFA164(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = DFA164_eot;
            this.eof = DFA164_eof;
            this.min = DFA164_min;
            this.max = DFA164_max;
            this.accept = DFA164_accept;
            this.special = DFA164_special;
            this.transition = DFA164_transition;
        }
        public String getDescription() {
            return "840:66: ( ws | ( ( ws )? operator ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA168_eotS =
        "\26\uffff";
    static final String DFA168_eofS =
        "\26\uffff";
    static final String DFA168_minS =
        "\1\6\1\0\24\uffff";
    static final String DFA168_maxS =
        "\1\122\1\0\24\uffff";
    static final String DFA168_acceptS =
        "\2\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
        "\1\17\1\20\1\21\1\22\1\uffff\1\23\1\1\1\2";
    static final String DFA168_specialS =
        "\1\uffff\1\0\24\uffff}>";
    static final String[] DFA168_transitionS = {
            "\1\1\1\15\1\17\3\uffff\1\21\5\uffff\1\16\3\uffff\1\21\6\uffff"+
            "\1\3\30\uffff\1\23\1\20\17\uffff\1\21\1\uffff\1\2\1\4\1\5\1"+
            "\6\1\7\1\10\1\11\1\12\1\13\1\14",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA168_eot = DFA.unpackEncodedString(DFA168_eotS);
    static final short[] DFA168_eof = DFA.unpackEncodedString(DFA168_eofS);
    static final char[] DFA168_min = DFA.unpackEncodedStringToUnsignedChars(DFA168_minS);
    static final char[] DFA168_max = DFA.unpackEncodedStringToUnsignedChars(DFA168_maxS);
    static final short[] DFA168_accept = DFA.unpackEncodedString(DFA168_acceptS);
    static final short[] DFA168_special = DFA.unpackEncodedString(DFA168_specialS);
    static final short[][] DFA168_transition;

    static {
        int numStates = DFA168_transitionS.length;
        DFA168_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA168_transition[i] = DFA.unpackEncodedString(DFA168_transitionS[i]);
        }
    }

    class DFA168 extends DFA {

        public DFA168(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 168;
            this.eot = DFA168_eot;
            this.eof = DFA168_eof;
            this.min = DFA168_min;
            this.max = DFA168_max;
            this.accept = DFA168_accept;
            this.special = DFA168_special;
            this.transition = DFA168_transition;
        }
        public String getDescription() {
            return "847:5: ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA168_1 = input.LA(1);

                         
                        int index168_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_Css3()) ) {s = 20;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index168_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 168, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA176_eotS =
        "\4\uffff";
    static final String DFA176_eofS =
        "\4\uffff";
    static final String DFA176_minS =
        "\2\13\2\uffff";
    static final String DFA176_maxS =
        "\2\124\2\uffff";
    static final String DFA176_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA176_specialS =
        "\4\uffff}>";
    static final String[] DFA176_transitionS = {
            "\1\3\11\uffff\1\2\1\uffff\1\1\73\uffff\2\1",
            "\1\3\11\uffff\1\2\1\uffff\1\1\73\uffff\2\1",
            "",
            ""
    };

    static final short[] DFA176_eot = DFA.unpackEncodedString(DFA176_eotS);
    static final short[] DFA176_eof = DFA.unpackEncodedString(DFA176_eofS);
    static final char[] DFA176_min = DFA.unpackEncodedStringToUnsignedChars(DFA176_minS);
    static final char[] DFA176_max = DFA.unpackEncodedStringToUnsignedChars(DFA176_maxS);
    static final short[] DFA176_accept = DFA.unpackEncodedString(DFA176_acceptS);
    static final short[] DFA176_special = DFA.unpackEncodedString(DFA176_specialS);
    static final short[][] DFA176_transition;

    static {
        int numStates = DFA176_transitionS.length;
        DFA176_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA176_transition[i] = DFA.unpackEncodedString(DFA176_transitionS[i]);
        }
    }

    class DFA176 extends DFA {

        public DFA176(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 176;
            this.eot = DFA176_eot;
            this.eof = DFA176_eof;
            this.min = DFA176_min;
            this.max = DFA176_max;
            this.accept = DFA176_accept;
            this.special = DFA176_special;
            this.transition = DFA176_transition;
        }
        public String getDescription() {
            return "()* loopback of 900:17: ( ( ws )? COMMA ( ws )? fnAttribute )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA180_eotS =
        "\32\uffff";
    static final String DFA180_eofS =
        "\32\uffff";
    static final String DFA180_minS =
        "\1\6\3\0\1\uffff\21\0\4\uffff";
    static final String DFA180_maxS =
        "\1\122\3\0\1\uffff\21\0\4\uffff";
    static final String DFA180_acceptS =
        "\4\uffff\1\2\23\uffff\1\1\1\3";
    static final String DFA180_specialS =
        "\1\uffff\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\4\uffff}>";
    static final String[] DFA180_transitionS = {
            "\1\1\1\21\1\23\3\uffff\1\2\4\uffff\1\4\1\22\1\4\2\uffff\1\2"+
            "\6\uffff\1\7\24\uffff\2\5\2\uffff\1\25\1\24\17\uffff\1\3\1\4"+
            "\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA180_eot = DFA.unpackEncodedString(DFA180_eotS);
    static final short[] DFA180_eof = DFA.unpackEncodedString(DFA180_eofS);
    static final char[] DFA180_min = DFA.unpackEncodedStringToUnsignedChars(DFA180_minS);
    static final char[] DFA180_max = DFA.unpackEncodedStringToUnsignedChars(DFA180_maxS);
    static final short[] DFA180_accept = DFA.unpackEncodedString(DFA180_acceptS);
    static final short[] DFA180_special = DFA.unpackEncodedString(DFA180_specialS);
    static final short[][] DFA180_transition;

    static {
        int numStates = DFA180_transitionS.length;
        DFA180_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA180_transition[i] = DFA.unpackEncodedString(DFA180_transitionS[i]);
        }
    }

    class DFA180 extends DFA {

        public DFA180(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 180;
            this.eot = DFA180_eot;
            this.eof = DFA180_eof;
            this.min = DFA180_min;
            this.max = DFA180_max;
            this.accept = DFA180_accept;
            this.special = DFA180_special;
            this.transition = DFA180_transition;
        }
        public String getDescription() {
            return "903:1: fnAttribute : ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | {...}? cp_expression | expression );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA180_1 = input.LA(1);

                         
                        int index180_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 24;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index180_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA180_2 = input.LA(1);

                         
                        int index180_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred20_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 24;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 4;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 25;}

                         
                        input.seek(index180_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA180_3 = input.LA(1);

                         
                        int index180_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred20_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 24;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 4;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 25;}

                         
                        input.seek(index180_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA180_5 = input.LA(1);

                         
                        int index180_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index180_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA180_6 = input.LA(1);

                         
                        int index180_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index180_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA180_7 = input.LA(1);

                         
                        int index180_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index180_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA180_8 = input.LA(1);

                         
                        int index180_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index180_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA180_9 = input.LA(1);

                         
                        int index180_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index180_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA180_10 = input.LA(1);

                         
                        int index180_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index180_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA180_11 = input.LA(1);

                         
                        int index180_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index180_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA180_12 = input.LA(1);

                         
                        int index180_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index180_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA180_13 = input.LA(1);

                         
                        int index180_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index180_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA180_14 = input.LA(1);

                         
                        int index180_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index180_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA180_15 = input.LA(1);

                         
                        int index180_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index180_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA180_16 = input.LA(1);

                         
                        int index180_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index180_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA180_17 = input.LA(1);

                         
                        int index180_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index180_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA180_18 = input.LA(1);

                         
                        int index180_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index180_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA180_19 = input.LA(1);

                         
                        int index180_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index180_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA180_20 = input.LA(1);

                         
                        int index180_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index180_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA180_21 = input.LA(1);

                         
                        int index180_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 25;}

                         
                        input.seek(index180_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 180, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA187_eotS =
        "\30\uffff";
    static final String DFA187_eofS =
        "\30\uffff";
    static final String DFA187_minS =
        "\1\6\24\0\3\uffff";
    static final String DFA187_maxS =
        "\1\122\24\0\3\uffff";
    static final String DFA187_acceptS =
        "\25\uffff\1\2\1\uffff\1\1";
    static final String DFA187_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\3\uffff}>";
    static final String[] DFA187_transitionS = {
            "\1\2\1\16\1\20\3\uffff\1\22\5\uffff\1\17\1\25\2\uffff\1\22\6"+
            "\uffff\1\4\24\uffff\2\1\2\uffff\1\24\1\21\17\uffff\1\23\1\25"+
            "\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA187_eot = DFA.unpackEncodedString(DFA187_eotS);
    static final short[] DFA187_eof = DFA.unpackEncodedString(DFA187_eofS);
    static final char[] DFA187_min = DFA.unpackEncodedStringToUnsignedChars(DFA187_minS);
    static final char[] DFA187_max = DFA.unpackEncodedStringToUnsignedChars(DFA187_maxS);
    static final short[] DFA187_accept = DFA.unpackEncodedString(DFA187_acceptS);
    static final short[] DFA187_special = DFA.unpackEncodedString(DFA187_specialS);
    static final short[][] DFA187_transition;

    static {
        int numStates = DFA187_transitionS.length;
        DFA187_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA187_transition[i] = DFA.unpackEncodedString(DFA187_transitionS[i]);
        }
    }

    class DFA187 extends DFA {

        public DFA187(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 187;
            this.eot = DFA187_eot;
            this.eof = DFA187_eof;
            this.min = DFA187_min;
            this.max = DFA187_max;
            this.accept = DFA187_accept;
            this.special = DFA187_special;
            this.transition = DFA187_transition;
        }
        public String getDescription() {
            return "916:1: fnAttributeValue : ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )* | {...}? cp_math_expression );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA187_1 = input.LA(1);

                         
                        int index187_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index187_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA187_2 = input.LA(1);

                         
                        int index187_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index187_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA187_3 = input.LA(1);

                         
                        int index187_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index187_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA187_4 = input.LA(1);

                         
                        int index187_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index187_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA187_5 = input.LA(1);

                         
                        int index187_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index187_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA187_6 = input.LA(1);

                         
                        int index187_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index187_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA187_7 = input.LA(1);

                         
                        int index187_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index187_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA187_8 = input.LA(1);

                         
                        int index187_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index187_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA187_9 = input.LA(1);

                         
                        int index187_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index187_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA187_10 = input.LA(1);

                         
                        int index187_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index187_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA187_11 = input.LA(1);

                         
                        int index187_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index187_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA187_12 = input.LA(1);

                         
                        int index187_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index187_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA187_13 = input.LA(1);

                         
                        int index187_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index187_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA187_14 = input.LA(1);

                         
                        int index187_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index187_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA187_15 = input.LA(1);

                         
                        int index187_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index187_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA187_16 = input.LA(1);

                         
                        int index187_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index187_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA187_17 = input.LA(1);

                         
                        int index187_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index187_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA187_18 = input.LA(1);

                         
                        int index187_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 23;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 21;}

                         
                        input.seek(index187_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA187_19 = input.LA(1);

                         
                        int index187_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 23;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 21;}

                         
                        input.seek(index187_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA187_20 = input.LA(1);

                         
                        int index187_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index187_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 187, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA186_eotS =
        "\33\uffff";
    static final String DFA186_eofS =
        "\33\uffff";
    static final String DFA186_minS =
        "\2\6\31\uffff";
    static final String DFA186_maxS =
        "\2\124\31\uffff";
    static final String DFA186_acceptS =
        "\2\uffff\1\2\30\1";
    static final String DFA186_specialS =
        "\1\1\1\0\31\uffff}>";
    static final String[] DFA186_transitionS = {
            "\1\5\1\21\1\23\2\uffff\1\2\1\25\5\uffff\1\22\2\uffff\1\2\1\25"+
            "\1\1\5\uffff\1\7\23\uffff\1\3\2\4\2\uffff\1\27\1\24\17\uffff"+
            "\1\26\1\uffff\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
            "\20\2\1",
            "\1\5\1\21\1\23\2\uffff\1\2\1\30\5\uffff\1\22\2\uffff\1\2\1"+
            "\30\1\1\5\uffff\1\7\23\uffff\1\3\2\4\2\uffff\1\32\1\24\17\uffff"+
            "\1\31\1\uffff\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
            "\20\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA186_eot = DFA.unpackEncodedString(DFA186_eotS);
    static final short[] DFA186_eof = DFA.unpackEncodedString(DFA186_eofS);
    static final char[] DFA186_min = DFA.unpackEncodedStringToUnsignedChars(DFA186_minS);
    static final char[] DFA186_max = DFA.unpackEncodedStringToUnsignedChars(DFA186_maxS);
    static final short[] DFA186_accept = DFA.unpackEncodedString(DFA186_acceptS);
    static final short[] DFA186_special = DFA.unpackEncodedString(DFA186_specialS);
    static final short[][] DFA186_transition;

    static {
        int numStates = DFA186_transitionS.length;
        DFA186_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA186_transition[i] = DFA.unpackEncodedString(DFA186_transitionS[i]);
        }
    }

    class DFA186 extends DFA {

        public DFA186(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 186;
            this.eot = DFA186_eot;
            this.eof = DFA186_eof;
            this.min = DFA186_min;
            this.max = DFA186_max;
            this.accept = DFA186_accept;
            this.special = DFA186_special;
            this.transition = DFA186_transition;
        }
        public String getDescription() {
            return "()* loopback of 918:18: ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA186_1 = input.LA(1);

                         
                        int index186_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA186_1==COMMA||LA186_1==RPAREN) ) {s = 2;}

                        else if ( (LA186_1==WS||(LA186_1>=NL && LA186_1<=COMMENT)) ) {s = 1;}

                        else if ( ((LA186_1>=MINUS && LA186_1<=PLUS)) && (synpred21_Css3())) {s = 4;}

                        else if ( (LA186_1==IDENT) && (synpred21_Css3())) {s = 5;}

                        else if ( (LA186_1==NUMBER) && (synpred21_Css3())) {s = 6;}

                        else if ( (LA186_1==PERCENTAGE) && (synpred21_Css3())) {s = 7;}

                        else if ( (LA186_1==LENGTH) && (synpred21_Css3())) {s = 8;}

                        else if ( (LA186_1==EMS) && (synpred21_Css3())) {s = 9;}

                        else if ( (LA186_1==REM) && (synpred21_Css3())) {s = 10;}

                        else if ( (LA186_1==EXS) && (synpred21_Css3())) {s = 11;}

                        else if ( (LA186_1==ANGLE) && (synpred21_Css3())) {s = 12;}

                        else if ( (LA186_1==TIME) && (synpred21_Css3())) {s = 13;}

                        else if ( (LA186_1==FREQ) && (synpred21_Css3())) {s = 14;}

                        else if ( (LA186_1==RESOLUTION) && (synpred21_Css3())) {s = 15;}

                        else if ( (LA186_1==DIMENSION) && (synpred21_Css3())) {s = 16;}

                        else if ( (LA186_1==STRING) && (synpred21_Css3())) {s = 17;}

                        else if ( (LA186_1==GEN) && (synpred21_Css3())) {s = 18;}

                        else if ( (LA186_1==URI) && (synpred21_Css3())) {s = 19;}

                        else if ( (LA186_1==HASH) && (synpred21_Css3())) {s = 20;}

                        else if ( (LA186_1==MEDIA_SYM||LA186_1==AT_IDENT) && (synpred21_Css3())) {s = 24;}

                        else if ( (LA186_1==SASS_VAR) && (synpred21_Css3())) {s = 25;}

                        else if ( (LA186_1==HASH_SYMBOL) && (synpred21_Css3())) {s = 26;}

                        else if ( (LA186_1==SOLIDUS) && (synpred21_Css3())) {s = 3;}

                         
                        input.seek(index186_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA186_0 = input.LA(1);

                         
                        int index186_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA186_0==WS||(LA186_0>=NL && LA186_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA186_0==COMMA||LA186_0==RPAREN) ) {s = 2;}

                        else if ( (LA186_0==SOLIDUS) && (synpred21_Css3())) {s = 3;}

                        else if ( ((LA186_0>=MINUS && LA186_0<=PLUS)) && (synpred21_Css3())) {s = 4;}

                        else if ( (LA186_0==IDENT) && (synpred21_Css3())) {s = 5;}

                        else if ( (LA186_0==NUMBER) && (synpred21_Css3())) {s = 6;}

                        else if ( (LA186_0==PERCENTAGE) && (synpred21_Css3())) {s = 7;}

                        else if ( (LA186_0==LENGTH) && (synpred21_Css3())) {s = 8;}

                        else if ( (LA186_0==EMS) && (synpred21_Css3())) {s = 9;}

                        else if ( (LA186_0==REM) && (synpred21_Css3())) {s = 10;}

                        else if ( (LA186_0==EXS) && (synpred21_Css3())) {s = 11;}

                        else if ( (LA186_0==ANGLE) && (synpred21_Css3())) {s = 12;}

                        else if ( (LA186_0==TIME) && (synpred21_Css3())) {s = 13;}

                        else if ( (LA186_0==FREQ) && (synpred21_Css3())) {s = 14;}

                        else if ( (LA186_0==RESOLUTION) && (synpred21_Css3())) {s = 15;}

                        else if ( (LA186_0==DIMENSION) && (synpred21_Css3())) {s = 16;}

                        else if ( (LA186_0==STRING) && (synpred21_Css3())) {s = 17;}

                        else if ( (LA186_0==GEN) && (synpred21_Css3())) {s = 18;}

                        else if ( (LA186_0==URI) && (synpred21_Css3())) {s = 19;}

                        else if ( (LA186_0==HASH) && (synpred21_Css3())) {s = 20;}

                        else if ( (LA186_0==MEDIA_SYM||LA186_0==AT_IDENT) && (synpred21_Css3())) {s = 21;}

                        else if ( (LA186_0==SASS_VAR) && (synpred21_Css3())) {s = 22;}

                        else if ( (LA186_0==HASH_SYMBOL) && (synpred21_Css3())) {s = 23;}

                         
                        input.seek(index186_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 186, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA185_eotS =
        "\5\uffff";
    static final String DFA185_eofS =
        "\5\uffff";
    static final String DFA185_minS =
        "\2\6\3\uffff";
    static final String DFA185_maxS =
        "\2\124\3\uffff";
    static final String DFA185_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA185_specialS =
        "\5\uffff}>";
    static final String[] DFA185_transitionS = {
            "\3\3\3\uffff\1\3\5\uffff\1\3\3\uffff\1\3\1\1\5\uffff\1\3\23"+
            "\uffff\1\2\2\3\2\uffff\2\3\17\uffff\1\3\1\uffff\12\3\2\1",
            "\3\4\3\uffff\1\4\5\uffff\1\4\3\uffff\1\4\1\1\5\uffff\1\4\23"+
            "\uffff\1\2\2\4\2\uffff\2\4\17\uffff\1\4\1\uffff\12\4\2\1",
            "",
            "",
            ""
    };

    static final short[] DFA185_eot = DFA.unpackEncodedString(DFA185_eotS);
    static final short[] DFA185_eof = DFA.unpackEncodedString(DFA185_eofS);
    static final char[] DFA185_min = DFA.unpackEncodedStringToUnsignedChars(DFA185_minS);
    static final char[] DFA185_max = DFA.unpackEncodedStringToUnsignedChars(DFA185_maxS);
    static final short[] DFA185_accept = DFA.unpackEncodedString(DFA185_acceptS);
    static final short[] DFA185_special = DFA.unpackEncodedString(DFA185_specialS);
    static final short[][] DFA185_transition;

    static {
        int numStates = DFA185_transitionS.length;
        DFA185_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA185_transition[i] = DFA.unpackEncodedString(DFA185_transitionS[i]);
        }
    }

    class DFA185 extends DFA {

        public DFA185(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 185;
            this.eot = DFA185_eot;
            this.eof = DFA185_eof;
            this.min = DFA185_min;
            this.max = DFA185_max;
            this.accept = DFA185_accept;
            this.special = DFA185_special;
            this.transition = DFA185_transition;
        }
        public String getDescription() {
            return "918:71: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA194_eotS =
        "\4\uffff";
    static final String DFA194_eofS =
        "\1\3\3\uffff";
    static final String DFA194_minS =
        "\2\5\2\uffff";
    static final String DFA194_maxS =
        "\2\154\2\uffff";
    static final String DFA194_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA194_specialS =
        "\4\uffff}>";
    static final String[] DFA194_transitionS = {
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\1\1\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1"+
            "\3\1\uffff\10\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\1\2\6\uffff"+
            "\2\3\3\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\2\3",
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\1\1\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1"+
            "\3\1\uffff\10\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\1\2\6\uffff"+
            "\2\3\3\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\2\3",
            "",
            ""
    };

    static final short[] DFA194_eot = DFA.unpackEncodedString(DFA194_eotS);
    static final short[] DFA194_eof = DFA.unpackEncodedString(DFA194_eofS);
    static final char[] DFA194_min = DFA.unpackEncodedStringToUnsignedChars(DFA194_minS);
    static final char[] DFA194_max = DFA.unpackEncodedStringToUnsignedChars(DFA194_maxS);
    static final short[] DFA194_accept = DFA.unpackEncodedString(DFA194_acceptS);
    static final short[] DFA194_special = DFA.unpackEncodedString(DFA194_specialS);
    static final short[][] DFA194_transition;

    static {
        int numStates = DFA194_transitionS.length;
        DFA194_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA194_transition[i] = DFA.unpackEncodedString(DFA194_transitionS[i]);
        }
    }

    class DFA194 extends DFA {

        public DFA194(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 194;
            this.eot = DFA194_eot;
            this.eof = DFA194_eof;
            this.min = DFA194_min;
            this.max = DFA194_max;
            this.accept = DFA194_accept;
            this.special = DFA194_special;
            this.transition = DFA194_transition;
        }
        public String getDescription() {
            return "937:72: ( ( ws )? SASS_DEFAULT )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA199_eotS =
        "\53\uffff";
    static final String DFA199_eofS =
        "\1\2\52\uffff";
    static final String DFA199_minS =
        "\1\5\1\0\21\uffff\1\0\27\uffff";
    static final String DFA199_maxS =
        "\1\154\1\0\21\uffff\1\0\27\uffff";
    static final String DFA199_acceptS =
        "\2\uffff\1\2\47\uffff\1\1";
    static final String DFA199_specialS =
        "\1\uffff\1\0\21\uffff\1\1\27\uffff}>";
    static final String[] DFA199_transitionS = {
            "\2\2\3\uffff\1\2\1\23\3\2\3\uffff\1\2\1\uffff\3\2\1\1\1\2\3"+
            "\uffff\1\2\1\uffff\3\2\21\uffff\1\2\1\uffff\1\2\1\uffff\10\2"+
            "\1\uffff\1\2\7\uffff\1\2\13\uffff\2\1\1\2\6\uffff\2\2\3\uffff"+
            "\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA199_eot = DFA.unpackEncodedString(DFA199_eotS);
    static final short[] DFA199_eof = DFA.unpackEncodedString(DFA199_eofS);
    static final char[] DFA199_min = DFA.unpackEncodedStringToUnsignedChars(DFA199_minS);
    static final char[] DFA199_max = DFA.unpackEncodedStringToUnsignedChars(DFA199_maxS);
    static final short[] DFA199_accept = DFA.unpackEncodedString(DFA199_acceptS);
    static final short[] DFA199_special = DFA.unpackEncodedString(DFA199_specialS);
    static final short[][] DFA199_transition;

    static {
        int numStates = DFA199_transitionS.length;
        DFA199_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA199_transition[i] = DFA.unpackEncodedString(DFA199_transitionS[i]);
        }
    }

    class DFA199 extends DFA {

        public DFA199(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 199;
            this.eot = DFA199_eot;
            this.eof = DFA199_eof;
            this.min = DFA199_min;
            this.max = DFA199_max;
            this.accept = DFA199_accept;
            this.special = DFA199_special;
            this.transition = DFA199_transition;
        }
        public String getDescription() {
            return "()* loopback of 952:5: ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA199_1 = input.LA(1);

                         
                        int index199_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index199_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA199_19 = input.LA(1);

                         
                        int index199_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index199_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 199, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA203_eotS =
        "\74\uffff";
    static final String DFA203_eofS =
        "\1\2\73\uffff";
    static final String DFA203_minS =
        "\1\5\1\0\4\uffff\4\0\1\uffff\1\0\1\uffff\1\0\5\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\1\0\44\uffff";
    static final String DFA203_maxS =
        "\1\154\1\0\4\uffff\4\0\1\uffff\1\0\1\uffff\1\0\5\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\1\0\44\uffff";
    static final String DFA203_acceptS =
        "\2\uffff\1\3\47\uffff\1\1\21\2";
    static final String DFA203_specialS =
        "\1\0\1\1\4\uffff\1\2\1\3\1\4\1\5\1\uffff\1\6\1\uffff\1\7\5\uffff"+
        "\1\10\1\uffff\1\11\1\uffff\1\12\44\uffff}>";
    static final String[] DFA203_transitionS = {
            "\1\2\1\11\1\70\1\71\1\uffff\2\2\1\6\2\2\1\52\1\uffff\1\53\1"+
            "\13\1\73\2\2\1\27\1\1\1\2\3\uffff\1\2\1\56\3\2\21\uffff\1\23"+
            "\1\54\1\25\1\uffff\1\10\1\15\6\2\1\uffff\1\2\7\uffff\1\7\1\72"+
            "\1\55\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\2\1\1\2\6"+
            "\52\2\2\3\uffff\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA203_eot = DFA.unpackEncodedString(DFA203_eotS);
    static final short[] DFA203_eof = DFA.unpackEncodedString(DFA203_eofS);
    static final char[] DFA203_min = DFA.unpackEncodedStringToUnsignedChars(DFA203_minS);
    static final char[] DFA203_max = DFA.unpackEncodedStringToUnsignedChars(DFA203_maxS);
    static final short[] DFA203_accept = DFA.unpackEncodedString(DFA203_acceptS);
    static final short[] DFA203_special = DFA.unpackEncodedString(DFA203_specialS);
    static final short[][] DFA203_transition;

    static {
        int numStates = DFA203_transitionS.length;
        DFA203_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA203_transition[i] = DFA.unpackEncodedString(DFA203_transitionS[i]);
        }
    }

    class DFA203 extends DFA {

        public DFA203(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 203;
            this.eot = DFA203_eot;
            this.eof = DFA203_eof;
            this.min = DFA203_min;
            this.max = DFA203_max;
            this.accept = DFA203_accept;
            this.special = DFA203_special;
            this.transition = DFA203_transition;
        }
        public String getDescription() {
            return "()* loopback of 968:5: ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA203_0 = input.LA(1);

                         
                        int index203_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA203_0==WS||(LA203_0>=NL && LA203_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA203_0==EOF||LA203_0==SEMI||(LA203_0>=IMPORT_SYM && LA203_0<=COMMA)||(LA203_0>=LBRACE && LA203_0<=RBRACE)||(LA203_0>=COLON && LA203_0<=RPAREN)||LA203_0==MOZ_DOCUMENT_SYM||LA203_0==WEBKIT_KEYFRAMES_SYM||(LA203_0>=PAGE_SYM && LA203_0<=FONT_FACE_SYM)||(LA203_0>=DOT && LA203_0<=PIPE)||LA203_0==LESS_AND||LA203_0==SASS_DEFAULT||(LA203_0>=SASS_MIXIN && LA203_0<=SASS_INCLUDE)||LA203_0==SASS_EXTEND||(LA203_0>=SASS_DEBUG && LA203_0<=SASS_IF)||(LA203_0>=SASS_FOR && LA203_0<=SASS_WHILE)||(LA203_0>=SASS_RETURN && LA203_0<=SASS_CONTENT)) ) {s = 2;}

                        else if ( (LA203_0==MEDIA_SYM) ) {s = 6;}

                        else if ( (LA203_0==SASS_VAR) ) {s = 7;}

                        else if ( (LA203_0==HASH_SYMBOL) ) {s = 8;}

                        else if ( (LA203_0==IDENT) ) {s = 9;}

                        else if ( (LA203_0==GEN) ) {s = 11;}

                        else if ( (LA203_0==HASH) ) {s = 13;}

                        else if ( (LA203_0==MINUS) ) {s = 19;}

                        else if ( (LA203_0==GREATER) ) {s = 21;}

                        else if ( (LA203_0==AT_IDENT) ) {s = 23;}

                        else if ( (LA203_0==AND||(LA203_0>=OR && LA203_0<=GREATER_OR_EQ)) && (synpred23_Css3())) {s = 42;}

                        else if ( (LA203_0==NOT) && (synpred24_Css3())) {s = 43;}

                        else if ( (LA203_0==PLUS) && (synpred24_Css3())) {s = 44;}

                        else if ( (LA203_0==NUMBER) && (synpred24_Css3())) {s = 45;}

                        else if ( (LA203_0==PERCENTAGE) && (synpred24_Css3())) {s = 46;}

                        else if ( (LA203_0==LENGTH) && (synpred24_Css3())) {s = 47;}

                        else if ( (LA203_0==EMS) && (synpred24_Css3())) {s = 48;}

                        else if ( (LA203_0==REM) && (synpred24_Css3())) {s = 49;}

                        else if ( (LA203_0==EXS) && (synpred24_Css3())) {s = 50;}

                        else if ( (LA203_0==ANGLE) && (synpred24_Css3())) {s = 51;}

                        else if ( (LA203_0==TIME) && (synpred24_Css3())) {s = 52;}

                        else if ( (LA203_0==FREQ) && (synpred24_Css3())) {s = 53;}

                        else if ( (LA203_0==RESOLUTION) && (synpred24_Css3())) {s = 54;}

                        else if ( (LA203_0==DIMENSION) && (synpred24_Css3())) {s = 55;}

                        else if ( (LA203_0==STRING) && (synpred24_Css3())) {s = 56;}

                        else if ( (LA203_0==URI) && (synpred24_Css3())) {s = 57;}

                        else if ( (LA203_0==IMPORTANT_SYM) && (synpred24_Css3())) {s = 58;}

                        else if ( (LA203_0==LPAREN) && (synpred24_Css3())) {s = 59;}

                         
                        input.seek(index203_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA203_1 = input.LA(1);

                         
                        int index203_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_Css3()) ) {s = 42;}

                        else if ( (synpred24_Css3()) ) {s = 59;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index203_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA203_6 = input.LA(1);

                         
                        int index203_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 59;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index203_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA203_7 = input.LA(1);

                         
                        int index203_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 59;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index203_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA203_8 = input.LA(1);

                         
                        int index203_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 59;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index203_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA203_9 = input.LA(1);

                         
                        int index203_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 59;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index203_9);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA203_11 = input.LA(1);

                         
                        int index203_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 59;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index203_11);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA203_13 = input.LA(1);

                         
                        int index203_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 59;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index203_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA203_19 = input.LA(1);

                         
                        int index203_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 59;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index203_19);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA203_21 = input.LA(1);

                         
                        int index203_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index203_21);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA203_23 = input.LA(1);

                         
                        int index203_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 59;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index203_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 203, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA208_eotS =
        "\30\uffff";
    static final String DFA208_eofS =
        "\30\uffff";
    static final String DFA208_minS =
        "\1\6\25\uffff\1\0\1\uffff";
    static final String DFA208_maxS =
        "\1\122\25\uffff\1\0\1\uffff";
    static final String DFA208_acceptS =
        "\1\uffff\25\1\1\uffff\1\2";
    static final String DFA208_specialS =
        "\1\0\25\uffff\1\1\1\uffff}>";
    static final String[] DFA208_transitionS = {
            "\1\2\1\16\1\20\3\uffff\1\22\5\uffff\1\17\1\26\2\uffff\1\22\6"+
            "\uffff\1\4\24\uffff\2\1\2\uffff\1\24\1\21\17\uffff\1\23\1\25"+
            "\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA208_eot = DFA.unpackEncodedString(DFA208_eotS);
    static final short[] DFA208_eof = DFA.unpackEncodedString(DFA208_eofS);
    static final char[] DFA208_min = DFA.unpackEncodedStringToUnsignedChars(DFA208_minS);
    static final char[] DFA208_max = DFA.unpackEncodedStringToUnsignedChars(DFA208_maxS);
    static final short[] DFA208_accept = DFA.unpackEncodedString(DFA208_acceptS);
    static final short[] DFA208_special = DFA.unpackEncodedString(DFA208_specialS);
    static final short[][] DFA208_transition;

    static {
        int numStates = DFA208_transitionS.length;
        DFA208_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA208_transition[i] = DFA.unpackEncodedString(DFA208_transitionS[i]);
        }
    }

    class DFA208 extends DFA {

        public DFA208(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 208;
            this.eot = DFA208_eot;
            this.eof = DFA208_eof;
            this.min = DFA208_min;
            this.max = DFA208_max;
            this.accept = DFA208_accept;
            this.special = DFA208_special;
            this.transition = DFA208_transition;
        }
        public String getDescription() {
            return "991:9: ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA208_0 = input.LA(1);

                         
                        int index208_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA208_0>=MINUS && LA208_0<=PLUS)) && (synpred25_Css3())) {s = 1;}

                        else if ( (LA208_0==IDENT) && (synpred25_Css3())) {s = 2;}

                        else if ( (LA208_0==NUMBER) && (synpred25_Css3())) {s = 3;}

                        else if ( (LA208_0==PERCENTAGE) && (synpred25_Css3())) {s = 4;}

                        else if ( (LA208_0==LENGTH) && (synpred25_Css3())) {s = 5;}

                        else if ( (LA208_0==EMS) && (synpred25_Css3())) {s = 6;}

                        else if ( (LA208_0==REM) && (synpred25_Css3())) {s = 7;}

                        else if ( (LA208_0==EXS) && (synpred25_Css3())) {s = 8;}

                        else if ( (LA208_0==ANGLE) && (synpred25_Css3())) {s = 9;}

                        else if ( (LA208_0==TIME) && (synpred25_Css3())) {s = 10;}

                        else if ( (LA208_0==FREQ) && (synpred25_Css3())) {s = 11;}

                        else if ( (LA208_0==RESOLUTION) && (synpred25_Css3())) {s = 12;}

                        else if ( (LA208_0==DIMENSION) && (synpred25_Css3())) {s = 13;}

                        else if ( (LA208_0==STRING) && (synpred25_Css3())) {s = 14;}

                        else if ( (LA208_0==GEN) && (synpred25_Css3())) {s = 15;}

                        else if ( (LA208_0==URI) && (synpred25_Css3())) {s = 16;}

                        else if ( (LA208_0==HASH) && (synpred25_Css3())) {s = 17;}

                        else if ( (LA208_0==MEDIA_SYM||LA208_0==AT_IDENT) && (synpred25_Css3())) {s = 18;}

                        else if ( (LA208_0==SASS_VAR) && (synpred25_Css3())) {s = 19;}

                        else if ( (LA208_0==HASH_SYMBOL) && (synpred25_Css3())) {s = 20;}

                        else if ( (LA208_0==IMPORTANT_SYM) && (synpred25_Css3())) {s = 21;}

                        else if ( (LA208_0==LPAREN) ) {s = 22;}

                         
                        input.seek(index208_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA208_22 = input.LA(1);

                         
                        int index208_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_Css3()) ) {s = 21;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index208_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 208, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA212_eotS =
        "\75\uffff";
    static final String DFA212_eofS =
        "\1\2\74\uffff";
    static final String DFA212_minS =
        "\1\5\1\0\4\uffff\1\0\27\uffff\1\0\1\uffff\1\0\34\uffff";
    static final String DFA212_maxS =
        "\1\154\1\0\4\uffff\1\0\27\uffff\1\0\1\uffff\1\0\34\uffff";
    static final String DFA212_acceptS =
        "\2\uffff\1\2\71\uffff\1\1";
    static final String DFA212_specialS =
        "\1\0\1\1\4\uffff\1\2\27\uffff\1\3\1\uffff\1\4\34\uffff}>";
    static final String[] DFA212_transitionS = {
            "\4\2\1\uffff\6\2\1\uffff\6\2\1\1\1\2\3\uffff\5\2\20\uffff\1"+
            "\74\1\6\1\36\1\2\1\uffff\6\2\1\40\1\2\1\uffff\1\2\7\uffff\14"+
            "\2\2\1\11\2\3\uffff\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA212_eot = DFA.unpackEncodedString(DFA212_eotS);
    static final short[] DFA212_eof = DFA.unpackEncodedString(DFA212_eofS);
    static final char[] DFA212_min = DFA.unpackEncodedStringToUnsignedChars(DFA212_minS);
    static final char[] DFA212_max = DFA.unpackEncodedStringToUnsignedChars(DFA212_maxS);
    static final short[] DFA212_accept = DFA.unpackEncodedString(DFA212_acceptS);
    static final short[] DFA212_special = DFA.unpackEncodedString(DFA212_specialS);
    static final short[][] DFA212_transition;

    static {
        int numStates = DFA212_transitionS.length;
        DFA212_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA212_transition[i] = DFA.unpackEncodedString(DFA212_transitionS[i]);
        }
    }

    class DFA212 extends DFA {

        public DFA212(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 212;
            this.eot = DFA212_eot;
            this.eof = DFA212_eof;
            this.min = DFA212_min;
            this.max = DFA212_max;
            this.accept = DFA212_accept;
            this.special = DFA212_special;
            this.transition = DFA212_transition;
        }
        public String getDescription() {
            return "()* loopback of 1019:10: ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA212_0 = input.LA(1);

                         
                        int index212_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA212_0==WS||(LA212_0>=NL && LA212_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA212_0==EOF||(LA212_0>=SEMI && LA212_0<=URI)||(LA212_0>=IMPORT_SYM && LA212_0<=AND)||(LA212_0>=NOT && LA212_0<=AT_IDENT)||LA212_0==MOZ_DOCUMENT_SYM||(LA212_0>=WEBKIT_KEYFRAMES_SYM && LA212_0<=FONT_FACE_SYM)||LA212_0==GREATER||(LA212_0>=HASH_SYMBOL && LA212_0<=SASS_EXTEND_ONLY_SELECTOR)||LA212_0==PIPE||LA212_0==LESS_AND||(LA212_0>=SASS_VAR && LA212_0<=DIMENSION)||(LA212_0>=SASS_DEFAULT && LA212_0<=SASS_INCLUDE)||LA212_0==SASS_EXTEND||(LA212_0>=SASS_DEBUG && LA212_0<=SASS_IF)||(LA212_0>=SASS_FOR && LA212_0<=SASS_WHILE)||(LA212_0>=SASS_RETURN && LA212_0<=SASS_CONTENT)) ) {s = 2;}

                        else if ( (LA212_0==MINUS) ) {s = 6;}

                        else if ( (LA212_0==PLUS) ) {s = 30;}

                        else if ( (LA212_0==STAR) ) {s = 32;}

                        else if ( (LA212_0==SOLIDUS) && (synpred26_Css3())) {s = 60;}

                         
                        input.seek(index212_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA212_1 = input.LA(1);

                         
                        int index212_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index212_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA212_6 = input.LA(1);

                         
                        int index212_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index212_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA212_30 = input.LA(1);

                         
                        int index212_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index212_30);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA212_32 = input.LA(1);

                         
                        int index212_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index212_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 212, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA217_eotS =
        "\6\uffff";
    static final String DFA217_eofS =
        "\6\uffff";
    static final String DFA217_minS =
        "\2\6\3\uffff\1\6";
    static final String DFA217_maxS =
        "\1\122\1\124\3\uffff\1\124";
    static final String DFA217_acceptS =
        "\2\uffff\1\1\1\2\1\3\1\uffff";
    static final String DFA217_specialS =
        "\6\uffff}>";
    static final String[] DFA217_transitionS = {
            "\3\2\3\uffff\1\2\5\uffff\1\2\1\4\2\uffff\1\2\6\uffff\1\2\24"+
            "\uffff\2\1\2\uffff\2\2\17\uffff\1\2\1\3\12\2",
            "\3\2\3\uffff\1\2\5\uffff\1\2\1\4\2\uffff\1\2\1\5\5\uffff\1"+
            "\2\30\uffff\2\2\17\uffff\1\2\1\uffff\12\2\2\5",
            "",
            "",
            "",
            "\3\2\3\uffff\1\2\5\uffff\1\2\1\4\2\uffff\1\2\1\5\5\uffff\1"+
            "\2\30\uffff\2\2\17\uffff\1\2\1\uffff\12\2\2\5"
    };

    static final short[] DFA217_eot = DFA.unpackEncodedString(DFA217_eotS);
    static final short[] DFA217_eof = DFA.unpackEncodedString(DFA217_eofS);
    static final char[] DFA217_min = DFA.unpackEncodedStringToUnsignedChars(DFA217_minS);
    static final char[] DFA217_max = DFA.unpackEncodedStringToUnsignedChars(DFA217_maxS);
    static final short[] DFA217_accept = DFA.unpackEncodedString(DFA217_acceptS);
    static final short[] DFA217_special = DFA.unpackEncodedString(DFA217_specialS);
    static final short[][] DFA217_transition;

    static {
        int numStates = DFA217_transitionS.length;
        DFA217_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA217_transition[i] = DFA.unpackEncodedString(DFA217_transitionS[i]);
        }
    }

    class DFA217 extends DFA {

        public DFA217(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 217;
            this.eot = DFA217_eot;
            this.eof = DFA217_eof;
            this.min = DFA217_min;
            this.max = DFA217_max;
            this.accept = DFA217_accept;
            this.special = DFA217_special;
            this.transition = DFA217_transition;
        }
        public String getDescription() {
            return "1024:1: cp_math_expression_atom : ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA222_eotS =
        "\4\uffff";
    static final String DFA222_eofS =
        "\1\3\3\uffff";
    static final String DFA222_minS =
        "\2\15\2\uffff";
    static final String DFA222_maxS =
        "\2\140\2\uffff";
    static final String DFA222_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA222_specialS =
        "\4\uffff}>";
    static final String[] DFA222_transitionS = {
            "\1\3\11\uffff\1\1\73\uffff\2\1\13\uffff\1\2",
            "\1\3\11\uffff\1\1\73\uffff\2\1\13\uffff\1\2",
            "",
            ""
    };

    static final short[] DFA222_eot = DFA.unpackEncodedString(DFA222_eotS);
    static final short[] DFA222_eof = DFA.unpackEncodedString(DFA222_eofS);
    static final char[] DFA222_min = DFA.unpackEncodedStringToUnsignedChars(DFA222_minS);
    static final char[] DFA222_max = DFA.unpackEncodedStringToUnsignedChars(DFA222_maxS);
    static final short[] DFA222_accept = DFA.unpackEncodedString(DFA222_acceptS);
    static final short[] DFA222_special = DFA.unpackEncodedString(DFA222_specialS);
    static final short[][] DFA222_transition;

    static {
        int numStates = DFA222_transitionS.length;
        DFA222_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA222_transition[i] = DFA.unpackEncodedString(DFA222_transitionS[i]);
        }
    }

    class DFA222 extends DFA {

        public DFA222(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 222;
            this.eot = DFA222_eot;
            this.eof = DFA222_eof;
            this.min = DFA222_min;
            this.max = DFA222_max;
            this.accept = DFA222_accept;
            this.special = DFA222_special;
            this.transition = DFA222_transition;
        }
        public String getDescription() {
            return "1039:77: ( ( ws )? less_mixin_guarded )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA226_eotS =
        "\4\uffff";
    static final String DFA226_eofS =
        "\1\3\3\uffff";
    static final String DFA226_minS =
        "\2\15\2\uffff";
    static final String DFA226_maxS =
        "\2\124\2\uffff";
    static final String DFA226_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA226_specialS =
        "\4\uffff}>";
    static final String[] DFA226_transitionS = {
            "\1\3\5\uffff\1\2\3\uffff\1\1\73\uffff\2\1",
            "\1\3\5\uffff\1\2\3\uffff\1\1\73\uffff\2\1",
            "",
            ""
    };

    static final short[] DFA226_eot = DFA.unpackEncodedString(DFA226_eotS);
    static final short[] DFA226_eof = DFA.unpackEncodedString(DFA226_eofS);
    static final char[] DFA226_min = DFA.unpackEncodedStringToUnsignedChars(DFA226_minS);
    static final char[] DFA226_max = DFA.unpackEncodedStringToUnsignedChars(DFA226_maxS);
    static final short[] DFA226_accept = DFA.unpackEncodedString(DFA226_acceptS);
    static final short[] DFA226_special = DFA.unpackEncodedString(DFA226_specialS);
    static final short[][] DFA226_transition;

    static {
        int numStates = DFA226_transitionS.length;
        DFA226_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA226_transition[i] = DFA.unpackEncodedString(DFA226_transitionS[i]);
        }
    }

    class DFA226 extends DFA {

        public DFA226(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 226;
            this.eot = DFA226_eot;
            this.eof = DFA226_eof;
            this.min = DFA226_min;
            this.max = DFA226_max;
            this.accept = DFA226_accept;
            this.special = DFA226_special;
            this.transition = DFA226_transition;
        }
        public String getDescription() {
            return "1041:51: ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA232_eotS =
        "\4\uffff";
    static final String DFA232_eofS =
        "\4\uffff";
    static final String DFA232_minS =
        "\2\5\2\uffff";
    static final String DFA232_maxS =
        "\2\154\2\uffff";
    static final String DFA232_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA232_specialS =
        "\4\uffff}>";
    static final String[] DFA232_transitionS = {
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\1\2\1\3\1\uffff\1\3"+
            "\1\1\1\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1\3\1"+
            "\uffff\10\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff\2\3"+
            "\3\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\2\3",
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\1\2\1\3\1\uffff\1"+
            "\3\1\1\1\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1\3"+
            "\1\uffff\10\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff\2"+
            "\3\3\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\2\3",
            "",
            ""
    };

    static final short[] DFA232_eot = DFA.unpackEncodedString(DFA232_eotS);
    static final short[] DFA232_eof = DFA.unpackEncodedString(DFA232_eofS);
    static final char[] DFA232_min = DFA.unpackEncodedStringToUnsignedChars(DFA232_minS);
    static final char[] DFA232_max = DFA.unpackEncodedStringToUnsignedChars(DFA232_maxS);
    static final short[] DFA232_accept = DFA.unpackEncodedString(DFA232_acceptS);
    static final short[] DFA232_special = DFA.unpackEncodedString(DFA232_specialS);
    static final short[][] DFA232_transition;

    static {
        int numStates = DFA232_transitionS.length;
        DFA232_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA232_transition[i] = DFA.unpackEncodedString(DFA232_transitionS[i]);
        }
    }

    class DFA232 extends DFA {

        public DFA232(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 232;
            this.eot = DFA232_eot;
            this.eof = DFA232_eof;
            this.min = DFA232_min;
            this.max = DFA232_max;
            this.accept = DFA232_accept;
            this.special = DFA232_special;
            this.transition = DFA232_transition;
        }
        public String getDescription() {
            return "1053:5: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA237_eotS =
        "\7\uffff";
    static final String DFA237_eofS =
        "\7\uffff";
    static final String DFA237_minS =
        "\1\6\2\5\1\uffff\1\5\1\uffff\1\5";
    static final String DFA237_maxS =
        "\1\122\2\133\1\uffff\1\133\1\uffff\1\133";
    static final String DFA237_acceptS =
        "\3\uffff\1\2\1\uffff\1\1\1\uffff";
    static final String DFA237_specialS =
        "\7\uffff}>";
    static final String[] DFA237_transitionS = {
            "\3\3\3\uffff\1\1\4\uffff\3\3\2\uffff\1\1\6\uffff\1\3\24\uffff"+
            "\2\3\2\uffff\2\3\17\uffff\1\2\13\3",
            "\4\3\2\uffff\2\3\2\uffff\1\3\1\uffff\3\3\1\5\2\3\1\4\5\uffff"+
            "\1\3\23\uffff\4\3\1\uffff\2\3\4\uffff\1\3\12\uffff\14\3\2\4"+
            "\1\uffff\6\3",
            "\4\3\2\uffff\2\3\2\uffff\1\3\1\uffff\3\3\1\5\2\3\1\6\5\uffff"+
            "\1\3\23\uffff\4\3\1\uffff\2\3\4\uffff\1\3\12\uffff\14\3\2\6"+
            "\1\uffff\6\3",
            "",
            "\4\3\2\uffff\2\3\2\uffff\1\3\1\uffff\3\3\1\5\2\3\1\4\5\uffff"+
            "\1\3\23\uffff\4\3\1\uffff\2\3\4\uffff\1\3\12\uffff\14\3\2\4"+
            "\1\uffff\6\3",
            "",
            "\4\3\2\uffff\2\3\2\uffff\1\3\1\uffff\3\3\1\5\2\3\1\6\5\uffff"+
            "\1\3\23\uffff\4\3\1\uffff\2\3\4\uffff\1\3\12\uffff\14\3\2\6"+
            "\1\uffff\6\3"
    };

    static final short[] DFA237_eot = DFA.unpackEncodedString(DFA237_eotS);
    static final short[] DFA237_eof = DFA.unpackEncodedString(DFA237_eofS);
    static final char[] DFA237_min = DFA.unpackEncodedStringToUnsignedChars(DFA237_minS);
    static final char[] DFA237_max = DFA.unpackEncodedStringToUnsignedChars(DFA237_maxS);
    static final short[] DFA237_accept = DFA.unpackEncodedString(DFA237_acceptS);
    static final short[] DFA237_special = DFA.unpackEncodedString(DFA237_specialS);
    static final short[][] DFA237_transition;

    static {
        int numStates = DFA237_transitionS.length;
        DFA237_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA237_transition[i] = DFA.unpackEncodedString(DFA237_transitionS[i]);
        }
    }

    class DFA237 extends DFA {

        public DFA237(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 237;
            this.eot = DFA237_eot;
            this.eof = DFA237_eof;
            this.min = DFA237_min;
            this.max = DFA237_max;
            this.accept = DFA237_accept;
            this.special = DFA237_special;
            this.transition = DFA237_transition;
        }
        public String getDescription() {
            return "1070:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA240_eotS =
        "\5\uffff";
    static final String DFA240_eofS =
        "\5\uffff";
    static final String DFA240_minS =
        "\1\5\1\14\1\uffff\1\14\1\uffff";
    static final String DFA240_maxS =
        "\1\25\1\137\1\uffff\1\137\1\uffff";
    static final String DFA240_acceptS =
        "\2\uffff\1\2\1\uffff\1\1";
    static final String DFA240_specialS =
        "\5\uffff}>";
    static final String[] DFA240_transitionS = {
            "\1\1\5\uffff\1\1\11\uffff\1\2",
            "\1\4\11\uffff\1\4\1\3\57\uffff\1\4\13\uffff\2\3\11\uffff\2"+
            "\2",
            "",
            "\1\4\11\uffff\1\4\1\3\57\uffff\1\4\13\uffff\2\3\11\uffff\2"+
            "\2",
            ""
    };

    static final short[] DFA240_eot = DFA.unpackEncodedString(DFA240_eotS);
    static final short[] DFA240_eof = DFA.unpackEncodedString(DFA240_eofS);
    static final char[] DFA240_min = DFA.unpackEncodedStringToUnsignedChars(DFA240_minS);
    static final char[] DFA240_max = DFA.unpackEncodedStringToUnsignedChars(DFA240_maxS);
    static final short[] DFA240_accept = DFA.unpackEncodedString(DFA240_acceptS);
    static final short[] DFA240_special = DFA.unpackEncodedString(DFA240_specialS);
    static final short[][] DFA240_transition;

    static {
        int numStates = DFA240_transitionS.length;
        DFA240_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA240_transition[i] = DFA.unpackEncodedString(DFA240_transitionS[i]);
        }
    }

    class DFA240 extends DFA {

        public DFA240(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 240;
            this.eot = DFA240_eot;
            this.eof = DFA240_eof;
            this.min = DFA240_min;
            this.max = DFA240_max;
            this.accept = DFA240_accept;
            this.special = DFA240_special;
            this.transition = DFA240_transition;
        }
        public String getDescription() {
            return "()* loopback of 1081:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA265_eotS =
        "\4\uffff";
    static final String DFA265_eofS =
        "\4\uffff";
    static final String DFA265_minS =
        "\2\6\2\uffff";
    static final String DFA265_maxS =
        "\2\124\2\uffff";
    static final String DFA265_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA265_specialS =
        "\4\uffff}>";
    static final String[] DFA265_transitionS = {
            "\1\3\4\uffff\1\3\1\uffff\1\2\6\uffff\1\3\2\uffff\1\1\32\uffff"+
            "\1\3\1\uffff\1\3\1\uffff\3\3\3\uffff\1\3\2\uffff\1\3\23\uffff"+
            "\2\1",
            "\1\3\4\uffff\1\3\1\uffff\1\2\6\uffff\1\3\2\uffff\1\1\32\uffff"+
            "\1\3\1\uffff\1\3\1\uffff\3\3\3\uffff\1\3\2\uffff\1\3\23\uffff"+
            "\2\1",
            "",
            ""
    };

    static final short[] DFA265_eot = DFA.unpackEncodedString(DFA265_eotS);
    static final short[] DFA265_eof = DFA.unpackEncodedString(DFA265_eofS);
    static final char[] DFA265_min = DFA.unpackEncodedStringToUnsignedChars(DFA265_minS);
    static final char[] DFA265_max = DFA.unpackEncodedStringToUnsignedChars(DFA265_maxS);
    static final short[] DFA265_accept = DFA.unpackEncodedString(DFA265_acceptS);
    static final short[] DFA265_special = DFA.unpackEncodedString(DFA265_specialS);
    static final short[][] DFA265_transition;

    static {
        int numStates = DFA265_transitionS.length;
        DFA265_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA265_transition[i] = DFA.unpackEncodedString(DFA265_transitionS[i]);
        }
    }

    class DFA265 extends DFA {

        public DFA265(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 265;
            this.eot = DFA265_eot;
            this.eof = DFA265_eof;
            this.min = DFA265_min;
            this.max = DFA265_max;
            this.accept = DFA265_accept;
            this.special = DFA265_special;
            this.transition = DFA265_transition;
        }
        public String getDescription() {
            return "()* loopback of 1142:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA269_eotS =
        "\4\uffff";
    static final String DFA269_eofS =
        "\4\uffff";
    static final String DFA269_minS =
        "\2\6\2\uffff";
    static final String DFA269_maxS =
        "\2\124\2\uffff";
    static final String DFA269_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA269_specialS =
        "\4\uffff}>";
    static final String[] DFA269_transitionS = {
            "\1\3\15\uffff\1\2\2\uffff\1\1\32\uffff\1\3\3\uffff\3\3\32\uffff"+
            "\2\1",
            "\1\3\15\uffff\1\2\2\uffff\1\1\32\uffff\1\3\3\uffff\3\3\32\uffff"+
            "\2\1",
            "",
            ""
    };

    static final short[] DFA269_eot = DFA.unpackEncodedString(DFA269_eotS);
    static final short[] DFA269_eof = DFA.unpackEncodedString(DFA269_eofS);
    static final char[] DFA269_min = DFA.unpackEncodedStringToUnsignedChars(DFA269_minS);
    static final char[] DFA269_max = DFA.unpackEncodedStringToUnsignedChars(DFA269_maxS);
    static final short[] DFA269_accept = DFA.unpackEncodedString(DFA269_acceptS);
    static final short[] DFA269_special = DFA.unpackEncodedString(DFA269_specialS);
    static final short[][] DFA269_transition;

    static {
        int numStates = DFA269_transitionS.length;
        DFA269_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA269_transition[i] = DFA.unpackEncodedString(DFA269_transitionS[i]);
        }
    }

    class DFA269 extends DFA {

        public DFA269(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 269;
            this.eot = DFA269_eot;
            this.eof = DFA269_eof;
            this.min = DFA269_min;
            this.max = DFA269_max;
            this.accept = DFA269_accept;
            this.special = DFA269_special;
            this.transition = DFA269_transition;
        }
        public String getDescription() {
            return "()* loopback of 1160:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA276_eotS =
        "\4\uffff";
    static final String DFA276_eofS =
        "\4\uffff";
    static final String DFA276_minS =
        "\2\5\2\uffff";
    static final String DFA276_maxS =
        "\2\154\2\uffff";
    static final String DFA276_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA276_specialS =
        "\4\uffff}>";
    static final String[] DFA276_transitionS = {
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\1\1\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1"+
            "\3\1\uffff\10\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff"+
            "\2\3\3\uffff\1\3\1\2\3\3\1\uffff\3\3\1\uffff\2\3",
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\1\1\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1"+
            "\3\1\uffff\10\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff"+
            "\2\3\3\uffff\1\3\1\2\3\3\1\uffff\3\3\1\uffff\2\3",
            "",
            ""
    };

    static final short[] DFA276_eot = DFA.unpackEncodedString(DFA276_eotS);
    static final short[] DFA276_eof = DFA.unpackEncodedString(DFA276_eofS);
    static final char[] DFA276_min = DFA.unpackEncodedStringToUnsignedChars(DFA276_minS);
    static final char[] DFA276_max = DFA.unpackEncodedStringToUnsignedChars(DFA276_maxS);
    static final short[] DFA276_accept = DFA.unpackEncodedString(DFA276_acceptS);
    static final short[] DFA276_special = DFA.unpackEncodedString(DFA276_specialS);
    static final short[][] DFA276_transition;

    static {
        int numStates = DFA276_transitionS.length;
        DFA276_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA276_transition[i] = DFA.unpackEncodedString(DFA276_transitionS[i]);
        }
    }

    class DFA276 extends DFA {

        public DFA276(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 276;
            this.eot = DFA276_eot;
            this.eof = DFA276_eof;
            this.min = DFA276_min;
            this.max = DFA276_max;
            this.accept = DFA276_accept;
            this.special = DFA276_special;
            this.transition = DFA276_transition;
        }
        public String getDescription() {
            return "1239:43: ( ( ws )? SASS_OPTIONAL )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA280_eotS =
        "\4\uffff";
    static final String DFA280_eofS =
        "\2\3\2\uffff";
    static final String DFA280_minS =
        "\2\5\2\uffff";
    static final String DFA280_maxS =
        "\2\154\2\uffff";
    static final String DFA280_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA280_specialS =
        "\4\uffff}>";
    static final String[] DFA280_transitionS = {
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\1\1\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1"+
            "\3\1\uffff\10\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff"+
            "\2\3\3\uffff\1\3\1\uffff\3\3\1\2\6\3",
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\1\1\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1"+
            "\3\1\uffff\10\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff"+
            "\2\3\3\uffff\1\3\1\uffff\3\3\1\2\6\3",
            "",
            ""
    };

    static final short[] DFA280_eot = DFA.unpackEncodedString(DFA280_eotS);
    static final short[] DFA280_eof = DFA.unpackEncodedString(DFA280_eofS);
    static final char[] DFA280_min = DFA.unpackEncodedStringToUnsignedChars(DFA280_minS);
    static final char[] DFA280_max = DFA.unpackEncodedStringToUnsignedChars(DFA280_maxS);
    static final short[] DFA280_accept = DFA.unpackEncodedString(DFA280_acceptS);
    static final short[] DFA280_special = DFA.unpackEncodedString(DFA280_specialS);
    static final short[][] DFA280_transition;

    static {
        int numStates = DFA280_transitionS.length;
        DFA280_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA280_transition[i] = DFA.unpackEncodedString(DFA280_transitionS[i]);
        }
    }

    class DFA280 extends DFA {

        public DFA280(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 280;
            this.eot = DFA280_eot;
            this.eof = DFA280_eof;
            this.min = DFA280_min;
            this.max = DFA280_max;
            this.accept = DFA280_accept;
            this.special = DFA280_special;
            this.transition = DFA280_transition;
        }
        public String getDescription() {
            return "1259:63: ( ( ws )? sass_else )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA287_eotS =
        "\5\uffff";
    static final String DFA287_eofS =
        "\5\uffff";
    static final String DFA287_minS =
        "\1\146\2\6\2\uffff";
    static final String DFA287_maxS =
        "\1\146\2\124\2\uffff";
    static final String DFA287_acceptS =
        "\3\uffff\1\1\1\2";
    static final String DFA287_specialS =
        "\5\uffff}>";
    static final String[] DFA287_transitionS = {
            "\1\1",
            "\1\4\6\uffff\1\3\11\uffff\1\2\73\uffff\2\2",
            "\1\4\6\uffff\1\3\11\uffff\1\2\73\uffff\2\2",
            "",
            ""
    };

    static final short[] DFA287_eot = DFA.unpackEncodedString(DFA287_eotS);
    static final short[] DFA287_eof = DFA.unpackEncodedString(DFA287_eofS);
    static final char[] DFA287_min = DFA.unpackEncodedStringToUnsignedChars(DFA287_minS);
    static final char[] DFA287_max = DFA.unpackEncodedStringToUnsignedChars(DFA287_maxS);
    static final short[] DFA287_accept = DFA.unpackEncodedString(DFA287_acceptS);
    static final short[] DFA287_special = DFA.unpackEncodedString(DFA287_specialS);
    static final short[][] DFA287_transition;

    static {
        int numStates = DFA287_transitionS.length;
        DFA287_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA287_transition[i] = DFA.unpackEncodedString(DFA287_transitionS[i]);
        }
    }

    class DFA287 extends DFA {

        public DFA287(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 287;
            this.eot = DFA287_eot;
            this.eof = DFA287_eof;
            this.min = DFA287_min;
            this.max = DFA287_max;
            this.accept = DFA287_accept;
            this.special = DFA287_special;
            this.transition = DFA287_transition;
        }
        public String getDescription() {
            return "1262:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA286_eotS =
        "\4\uffff";
    static final String DFA286_eofS =
        "\2\3\2\uffff";
    static final String DFA286_minS =
        "\2\5\2\uffff";
    static final String DFA286_maxS =
        "\2\154\2\uffff";
    static final String DFA286_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA286_specialS =
        "\4\uffff}>";
    static final String[] DFA286_transitionS = {
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\1\1\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1"+
            "\3\1\uffff\10\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff"+
            "\2\3\3\uffff\1\3\1\uffff\3\3\1\2\6\3",
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\1\1\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1"+
            "\3\1\uffff\10\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff"+
            "\2\3\3\uffff\1\3\1\uffff\3\3\1\2\6\3",
            "",
            ""
    };

    static final short[] DFA286_eot = DFA.unpackEncodedString(DFA286_eotS);
    static final short[] DFA286_eof = DFA.unpackEncodedString(DFA286_eofS);
    static final char[] DFA286_min = DFA.unpackEncodedStringToUnsignedChars(DFA286_minS);
    static final char[] DFA286_max = DFA.unpackEncodedStringToUnsignedChars(DFA286_maxS);
    static final short[] DFA286_accept = DFA.unpackEncodedString(DFA286_acceptS);
    static final short[] DFA286_special = DFA.unpackEncodedString(DFA286_specialS);
    static final short[][] DFA286_transition;

    static {
        int numStates = DFA286_transitionS.length;
        DFA286_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA286_transition[i] = DFA.unpackEncodedString(DFA286_transitionS[i]);
        }
    }

    class DFA286 extends DFA {

        public DFA286(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 286;
            this.eot = DFA286_eot;
            this.eof = DFA286_eof;
            this.min = DFA286_min;
            this.max = DFA286_max;
            this.accept = DFA286_accept;
            this.special = DFA286_special;
            this.transition = DFA286_transition;
        }
        public String getDescription() {
            return "1266:110: ( ( ws )? sass_else )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA302_eotS =
        "\11\uffff";
    static final String DFA302_eofS =
        "\5\uffff\1\4\3\uffff";
    static final String DFA302_minS =
        "\3\4\2\uffff\4\4";
    static final String DFA302_maxS =
        "\3\u0091\2\uffff\4\u0091";
    static final String DFA302_acceptS =
        "\3\uffff\1\1\1\2\4\uffff";
    static final String DFA302_specialS =
        "\11\uffff}>";
    static final String[] DFA302_transitionS = {
            "\1\3\1\uffff\1\2\6\3\2\uffff\5\3\1\uffff\35\3\1\2\3\3\1\1\2"+
            "\2\131\3",
            "\1\3\1\uffff\1\10\6\3\1\4\1\uffff\5\3\1\5\2\3\1\6\32\3\1\10"+
            "\3\3\1\7\2\10\32\3\2\6\75\3",
            "\1\3\1\uffff\1\10\6\3\2\uffff\5\3\1\5\2\3\1\6\32\3\1\10\3\3"+
            "\1\7\2\10\32\3\2\6\75\3",
            "",
            "",
            "\1\3\1\uffff\7\3\2\uffff\u0083\3",
            "\1\3\1\uffff\1\10\6\3\2\uffff\10\3\1\6\32\3\1\10\3\3\1\7\2"+
            "\10\32\3\2\6\75\3",
            "\1\3\1\uffff\1\10\6\3\1\4\1\uffff\5\3\1\5\2\3\1\6\32\3\1\10"+
            "\3\3\1\7\2\10\32\3\2\6\75\3",
            "\1\3\1\uffff\1\10\6\3\2\uffff\5\3\1\5\2\3\1\6\32\3\1\10\3\3"+
            "\1\7\2\10\32\3\2\6\75\3"
    };

    static final short[] DFA302_eot = DFA.unpackEncodedString(DFA302_eotS);
    static final short[] DFA302_eof = DFA.unpackEncodedString(DFA302_eofS);
    static final char[] DFA302_min = DFA.unpackEncodedStringToUnsignedChars(DFA302_minS);
    static final char[] DFA302_max = DFA.unpackEncodedStringToUnsignedChars(DFA302_maxS);
    static final short[] DFA302_accept = DFA.unpackEncodedString(DFA302_acceptS);
    static final short[] DFA302_special = DFA.unpackEncodedString(DFA302_specialS);
    static final short[][] DFA302_transition;

    static {
        int numStates = DFA302_transitionS.length;
        DFA302_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA302_transition[i] = DFA.unpackEncodedString(DFA302_transitionS[i]);
        }
    }

    class DFA302 extends DFA {

        public DFA302(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 302;
            this.eot = DFA302_eot;
            this.eof = DFA302_eof;
            this.min = DFA302_min;
            this.max = DFA302_max;
            this.accept = DFA302_accept;
            this.special = DFA302_special;
            this.transition = DFA302_transition;
        }
        public String getDescription() {
            return "385:13: synpred3_Css3 : ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI | sass_declaration_interpolation_expression COLON );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA315_eotS =
        "\5\uffff";
    static final String DFA315_eofS =
        "\5\uffff";
    static final String DFA315_minS =
        "\2\6\3\uffff";
    static final String DFA315_maxS =
        "\2\124\3\uffff";
    static final String DFA315_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA315_specialS =
        "\5\uffff}>";
    static final String[] DFA315_transitionS = {
            "\3\3\2\uffff\1\2\1\3\5\uffff\1\3\3\uffff\1\3\1\1\5\uffff\1\3"+
            "\23\uffff\1\2\2\3\2\uffff\2\3\17\uffff\1\3\1\uffff\12\3\2\1",
            "\3\4\2\uffff\1\2\1\4\5\uffff\1\4\3\uffff\1\4\1\1\5\uffff\1"+
            "\4\23\uffff\1\2\2\4\2\uffff\2\4\17\uffff\1\4\1\uffff\12\4\2"+
            "\1",
            "",
            "",
            ""
    };

    static final short[] DFA315_eot = DFA.unpackEncodedString(DFA315_eotS);
    static final short[] DFA315_eof = DFA.unpackEncodedString(DFA315_eofS);
    static final char[] DFA315_min = DFA.unpackEncodedStringToUnsignedChars(DFA315_minS);
    static final char[] DFA315_max = DFA.unpackEncodedStringToUnsignedChars(DFA315_maxS);
    static final short[] DFA315_accept = DFA.unpackEncodedString(DFA315_acceptS);
    static final short[] DFA315_special = DFA.unpackEncodedString(DFA315_specialS);
    static final short[][] DFA315_transition;

    static {
        int numStates = DFA315_transitionS.length;
        DFA315_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA315_transition[i] = DFA.unpackEncodedString(DFA315_transitionS[i]);
        }
    }

    class DFA315 extends DFA {

        public DFA315(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 315;
            this.eot = DFA315_eot;
            this.eof = DFA315_eof;
            this.min = DFA315_min;
            this.max = DFA315_max;
            this.accept = DFA315_accept;
            this.special = DFA315_special;
            this.transition = DFA315_transition;
        }
        public String getDescription() {
            return "840:15: ( ws | ( ( ws )? operator ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA320_eotS =
        "\5\uffff";
    static final String DFA320_eofS =
        "\5\uffff";
    static final String DFA320_minS =
        "\2\6\3\uffff";
    static final String DFA320_maxS =
        "\2\124\3\uffff";
    static final String DFA320_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA320_specialS =
        "\5\uffff}>";
    static final String[] DFA320_transitionS = {
            "\3\3\3\uffff\1\3\5\uffff\1\3\3\uffff\1\3\1\1\5\uffff\1\3\23"+
            "\uffff\1\2\2\3\2\uffff\2\3\17\uffff\1\3\1\uffff\12\3\2\1",
            "\3\4\3\uffff\1\4\5\uffff\1\4\3\uffff\1\4\1\1\5\uffff\1\4\23"+
            "\uffff\1\2\2\4\2\uffff\2\4\17\uffff\1\4\1\uffff\12\4\2\1",
            "",
            "",
            ""
    };

    static final short[] DFA320_eot = DFA.unpackEncodedString(DFA320_eotS);
    static final short[] DFA320_eof = DFA.unpackEncodedString(DFA320_eofS);
    static final char[] DFA320_min = DFA.unpackEncodedStringToUnsignedChars(DFA320_minS);
    static final char[] DFA320_max = DFA.unpackEncodedStringToUnsignedChars(DFA320_maxS);
    static final short[] DFA320_accept = DFA.unpackEncodedString(DFA320_acceptS);
    static final short[] DFA320_special = DFA.unpackEncodedString(DFA320_specialS);
    static final short[][] DFA320_transition;

    static {
        int numStates = DFA320_transitionS.length;
        DFA320_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA320_transition[i] = DFA.unpackEncodedString(DFA320_transitionS[i]);
        }
    }

    class DFA320 extends DFA {

        public DFA320(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 320;
            this.eot = DFA320_eot;
            this.eof = DFA320_eof;
            this.min = DFA320_min;
            this.max = DFA320_max;
            this.accept = DFA320_accept;
            this.special = DFA320_special;
            this.transition = DFA320_transition;
        }
        public String getDescription() {
            return "918:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
 

    public static final BitSet FOLLOW_ws_in_styleSheet125 = new BitSet(new long[]{0xBFD40001D1541E50L,0x000007B830000080L});
    public static final BitSet FOLLOW_charSet_in_styleSheet135 = new BitSet(new long[]{0xBFD40001D1D41C50L,0x000007B830180080L});
    public static final BitSet FOLLOW_ws_in_styleSheet137 = new BitSet(new long[]{0xBFD40001D1541C50L,0x000007B830000080L});
    public static final BitSet FOLLOW_imports_in_styleSheet151 = new BitSet(new long[]{0xBFD40001D1541C50L,0x000007B830000080L});
    public static final BitSet FOLLOW_namespaces_in_styleSheet162 = new BitSet(new long[]{0xBFD40001D1541C40L,0x000007B830000080L});
    public static final BitSet FOLLOW_body_in_styleSheet174 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_styleSheet182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespace_in_namespaces199 = new BitSet(new long[]{0x0000000000800012L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_namespaces201 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_NAMESPACE_SYM_in_namespace217 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_namespace219 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_namespacePrefixName_in_namespace223 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_namespace225 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_namespace230 = new BitSet(new long[]{0x0000000000800020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_namespace232 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_namespace235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_namespacePrefixName248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_resourceIdentifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARSET_SYM_in_charSet286 = new BitSet(new long[]{0x0000000000800080L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_charSet288 = new BitSet(new long[]{0x0000000000800080L,0x0000000000180000L});
    public static final BitSet FOLLOW_charSetValue_in_charSet291 = new BitSet(new long[]{0x0000000000800020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_charSet293 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_charSet296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_charSetValue310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_imports324 = new BitSet(new long[]{0x0000000000800020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_imports326 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_imports329 = new BitSet(new long[]{0x0000000000800402L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_imports331 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_IMPORT_SYM_in_importItem361 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_importItem363 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem366 = new BitSet(new long[]{0x00400000008F0042L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_importItem376 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_mediaQueryList_in_importItem379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_SYM_in_importItem412 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_importItem414 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem417 = new BitSet(new long[]{0x00400000008F0842L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_importItem420 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_importItem423 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_importItem425 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem428 = new BitSet(new long[]{0x00400000008F0842L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_importItem440 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_mediaQueryList_in_importItem443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIA_SYM_in_media461 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_media463 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_mediaQueryList_in_media484 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_media492 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_media499 = new BitSet(new long[]{0xBFD40001D1D45840L,0x000013BA10180080L});
    public static final BitSet FOLLOW_ws_in_media501 = new BitSet(new long[]{0xBFD40001D1545840L,0x000013BA10000080L});
    public static final BitSet FOLLOW_propertyDeclaration_in_media588 = new BitSet(new long[]{0x0000000000800020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_media590 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_media593 = new BitSet(new long[]{0xBFD40001D1D45840L,0x000013BA10180080L});
    public static final BitSet FOLLOW_sass_extend_in_media611 = new BitSet(new long[]{0x0000000000800020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_media613 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_media616 = new BitSet(new long[]{0xBFD40001D1D45840L,0x000013BA10180080L});
    public static final BitSet FOLLOW_sass_debug_in_media634 = new BitSet(new long[]{0x0000000000800020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_media636 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_media639 = new BitSet(new long[]{0xBFD40001D1D45840L,0x000013BA10180080L});
    public static final BitSet FOLLOW_sass_control_in_media657 = new BitSet(new long[]{0x0000000000800020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_media659 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_media662 = new BitSet(new long[]{0xBFD40001D1D45840L,0x000013BA10180080L});
    public static final BitSet FOLLOW_sass_content_in_media680 = new BitSet(new long[]{0x0000000000800020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_media682 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_media685 = new BitSet(new long[]{0xBFD40001D1D45840L,0x000013BA10180080L});
    public static final BitSet FOLLOW_rule_in_media713 = new BitSet(new long[]{0xBFD40001D1D45840L,0x000013BA10180080L});
    public static final BitSet FOLLOW_page_in_media729 = new BitSet(new long[]{0xBFD40001D1D45840L,0x000013BA10180080L});
    public static final BitSet FOLLOW_fontFace_in_media745 = new BitSet(new long[]{0xBFD40001D1D45840L,0x000013BA10180080L});
    public static final BitSet FOLLOW_vendorAtRule_in_media761 = new BitSet(new long[]{0xBFD40001D1D45840L,0x000013BA10180080L});
    public static final BitSet FOLLOW_media_in_media790 = new BitSet(new long[]{0xBFD40001D1D45840L,0x000013BA10180080L});
    public static final BitSet FOLLOW_ws_in_media806 = new BitSet(new long[]{0xBFD40001D1545840L,0x000013BA10000080L});
    public static final BitSet FOLLOW_RBRACE_in_media825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList839 = new BitSet(new long[]{0x0000000000800802L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaQueryList856 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_mediaQueryList859 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaQueryList861 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList864 = new BitSet(new long[]{0x0000000000800802L,0x0000000000180000L});
    public static final BitSet FOLLOW_mediaQueryOperator_in_mediaQuery880 = new BitSet(new long[]{0x0040000000870040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery882 = new BitSet(new long[]{0x0040000000070040L});
    public static final BitSet FOLLOW_mediaType_in_mediaQuery889 = new BitSet(new long[]{0x0000000000808002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery893 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_AND_in_mediaQuery896 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery898 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_mediaExpression_in_mediaQuery901 = new BitSet(new long[]{0x0000000000808002L,0x0000000000180000L});
    public static final BitSet FOLLOW_mediaExpression_in_mediaQuery909 = new BitSet(new long[]{0x0000000000808002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery913 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_AND_in_mediaQuery916 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery918 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_mediaExpression_in_mediaQuery921 = new BitSet(new long[]{0x0000000000808002L,0x0000000000180000L});
    public static final BitSet FOLLOW_set_in_mediaQueryOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_mediaType957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_mediaType961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaType967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_mediaExpression982 = new BitSet(new long[]{0x0040000000C41040L,0x0000000000180080L});
    public static final BitSet FOLLOW_ws_in_mediaExpression984 = new BitSet(new long[]{0x0040000000C41040L,0x0000000000180080L});
    public static final BitSet FOLLOW_mediaFeature_in_mediaExpression987 = new BitSet(new long[]{0x0000000000B00000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaExpression990 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_COLON_in_mediaExpression993 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_mediaExpression995 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_expression_in_mediaExpression998 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaExpression1002 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_mediaExpression1005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_mediaFeature1020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_mediaFeature1024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_mediaFeature1032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaFeature1036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bodyItem_in_body1054 = new BitSet(new long[]{0xBFD40001D1D41C42L,0x000007B830180080L});
    public static final BitSet FOLLOW_ws_in_body1056 = new BitSet(new long[]{0xBFD40001D1541C42L,0x000007B830000080L});
    public static final BitSet FOLLOW_cp_mixin_call_in_bodyItem1093 = new BitSet(new long[]{0x0000000000800020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_bodyItem1095 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_bodyItem1098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_bodyItem1107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_at_rule_in_bodyItem1119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_declaration_in_bodyItem1133 = new BitSet(new long[]{0x0000000000800020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_bodyItem1135 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_bodyItem1138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_bodyItem1161 = new BitSet(new long[]{0x0000000000800020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_bodyItem1163 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_bodyItem1166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_debug_in_bodyItem1180 = new BitSet(new long[]{0x0000000000800020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_bodyItem1183 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_bodyItem1186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_control_in_bodyItem1200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_function_declaration_in_bodyItem1214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_media_in_at_rule1244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_page_in_at_rule1252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_counterStyle_in_at_rule1260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fontFace_in_at_rule1268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vendorAtRule_in_at_rule1276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moz_document_in_vendorAtRule1293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_webkitKeyframes_in_vendorAtRule1297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_generic_at_rule_in_vendorAtRule1301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_atRuleId0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_IDENT_in_generic_at_rule1337 = new BitSet(new long[]{0x00000000008020C0L});
    public static final BitSet FOLLOW_WS_in_generic_at_rule1339 = new BitSet(new long[]{0x00000000008020C0L});
    public static final BitSet FOLLOW_atRuleId_in_generic_at_rule1344 = new BitSet(new long[]{0x0000000000802000L});
    public static final BitSet FOLLOW_WS_in_generic_at_rule1346 = new BitSet(new long[]{0x0000000000802000L});
    public static final BitSet FOLLOW_LBRACE_in_generic_at_rule1361 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_syncTo_RBRACE_in_generic_at_rule1373 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_generic_at_rule1383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document1399 = new BitSet(new long[]{0x000000000E800100L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_moz_document1401 = new BitSet(new long[]{0x000000000E800100L,0x0000000000180000L});
    public static final BitSet FOLLOW_moz_document_function_in_moz_document1406 = new BitSet(new long[]{0x0000000000802800L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_moz_document1408 = new BitSet(new long[]{0x0000000000002800L});
    public static final BitSet FOLLOW_COMMA_in_moz_document1414 = new BitSet(new long[]{0x000000000E800100L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_moz_document1416 = new BitSet(new long[]{0x000000000E800100L,0x0000000000180000L});
    public static final BitSet FOLLOW_moz_document_function_in_moz_document1419 = new BitSet(new long[]{0x0000000000802800L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_moz_document1421 = new BitSet(new long[]{0x0000000000002800L});
    public static final BitSet FOLLOW_LBRACE_in_moz_document1428 = new BitSet(new long[]{0xBFD40001D1D45C40L,0x000007B830180080L});
    public static final BitSet FOLLOW_ws_in_moz_document1430 = new BitSet(new long[]{0xBFD40001D1545C40L,0x000007B830000080L});
    public static final BitSet FOLLOW_body_in_moz_document1435 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_moz_document1440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_moz_document_function0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes1481 = new BitSet(new long[]{0x00000000008000C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1483 = new BitSet(new long[]{0x00000000000000C0L});
    public static final BitSet FOLLOW_atRuleId_in_webkitKeyframes1486 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1488 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_webkitKeyframes1493 = new BitSet(new long[]{0x0000000020804040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1495 = new BitSet(new long[]{0x0000000020004040L});
    public static final BitSet FOLLOW_webkitKeyframesBlock_in_webkitKeyframes1502 = new BitSet(new long[]{0x0000000020804040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1504 = new BitSet(new long[]{0x0000000020004040L});
    public static final BitSet FOLLOW_RBRACE_in_webkitKeyframes1511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock1524 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock1526 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_webkitKeyframesBlock1531 = new BitSet(new long[]{0xBFD40001D1D45C40L,0x00001BBA30180080L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock1534 = new BitSet(new long[]{0xBFD40001D1545C40L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_syncToFollow_in_webkitKeyframesBlock1537 = new BitSet(new long[]{0xBFD40001D1545C40L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_declarations_in_webkitKeyframesBlock1541 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_webkitKeyframesBlock1545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_webkitKeyframeSelectors1560 = new BitSet(new long[]{0x0000000000800802L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors1572 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_webkitKeyframeSelectors1575 = new BitSet(new long[]{0x0000000020800040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors1577 = new BitSet(new long[]{0x0000000020000040L});
    public static final BitSet FOLLOW_set_in_webkitKeyframeSelectors1580 = new BitSet(new long[]{0x0000000000800802L,0x0000000000180000L});
    public static final BitSet FOLLOW_PAGE_SYM_in_page1609 = new BitSet(new long[]{0x0000000000902040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_page1611 = new BitSet(new long[]{0x0000000000102040L});
    public static final BitSet FOLLOW_IDENT_in_page1616 = new BitSet(new long[]{0x0000000000902000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_page1618 = new BitSet(new long[]{0x0000000000102000L});
    public static final BitSet FOLLOW_pseudoPage_in_page1625 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_page1627 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_page1640 = new BitSet(new long[]{0x11C5FFFE00C45060L,0x0000000000180080L});
    public static final BitSet FOLLOW_ws_in_page1642 = new BitSet(new long[]{0x11C5FFFE00445060L,0x0000000000000080L});
    public static final BitSet FOLLOW_propertyDeclaration_in_page1697 = new BitSet(new long[]{0x0000000000004020L});
    public static final BitSet FOLLOW_margin_in_page1699 = new BitSet(new long[]{0x0000000000804020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_page1701 = new BitSet(new long[]{0x0000000000004020L});
    public static final BitSet FOLLOW_SEMI_in_page1707 = new BitSet(new long[]{0x11C5FFFE00C45060L,0x0000000000180080L});
    public static final BitSet FOLLOW_ws_in_page1709 = new BitSet(new long[]{0x11C5FFFE00445060L,0x0000000000000080L});
    public static final BitSet FOLLOW_propertyDeclaration_in_page1713 = new BitSet(new long[]{0x0000000000004020L});
    public static final BitSet FOLLOW_margin_in_page1715 = new BitSet(new long[]{0x0000000000804020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_page1717 = new BitSet(new long[]{0x0000000000004020L});
    public static final BitSet FOLLOW_RBRACE_in_page1732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNTER_STYLE_SYM_in_counterStyle1753 = new BitSet(new long[]{0x0000000000800040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_counterStyle1755 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_counterStyle1758 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_counterStyle1760 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_counterStyle1771 = new BitSet(new long[]{0xBFD40001D1D45C40L,0x00001BBA30180080L});
    public static final BitSet FOLLOW_ws_in_counterStyle1773 = new BitSet(new long[]{0xBFD40001D1545C40L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_syncToDeclarationsRule_in_counterStyle1776 = new BitSet(new long[]{0xBFD40001D1545C40L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_declarations_in_counterStyle1780 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_counterStyle1791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FONT_FACE_SYM_in_fontFace1812 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_fontFace1814 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_fontFace1825 = new BitSet(new long[]{0xBFD40001D1D45C40L,0x00001BBA30180080L});
    public static final BitSet FOLLOW_ws_in_fontFace1827 = new BitSet(new long[]{0xBFD40001D1545C40L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_syncToDeclarationsRule_in_fontFace1830 = new BitSet(new long[]{0xBFD40001D1545C40L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_declarations_in_fontFace1834 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_fontFace1845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_margin_sym_in_margin1860 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_margin1862 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_margin1865 = new BitSet(new long[]{0xBFD40001D1D45C40L,0x00001BBA30180080L});
    public static final BitSet FOLLOW_ws_in_margin1867 = new BitSet(new long[]{0xBFD40001D1545C40L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_syncToDeclarationsRule_in_margin1870 = new BitSet(new long[]{0xBFD40001D1545C40L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_declarations_in_margin1872 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_margin1875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_margin_sym0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_pseudoPage2104 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_pseudoPage2106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_unaryOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_declaration_interpolation_expression_in_property2238 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_IDENT_in_property2250 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_GEN_in_property2263 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_cp_variable_in_property2278 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_property2286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_declaration_in_rule2336 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_selectorsGroup_in_rule2350 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_rule2358 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_rule2365 = new BitSet(new long[]{0xBFD40001D1D45C40L,0x00001BBA30180080L});
    public static final BitSet FOLLOW_ws_in_rule2367 = new BitSet(new long[]{0xBFD40001D1545C40L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_syncToFollow_in_rule2370 = new BitSet(new long[]{0xBFD40001D1545C40L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_declarations_in_rule2381 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_rule2388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_declarations2439 = new BitSet(new long[]{0xBFD40001D1D41C62L,0x00001BBA30180080L});
    public static final BitSet FOLLOW_ws_in_declarations2449 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_declarations2452 = new BitSet(new long[]{0xBFD40001D1D41C42L,0x00001BBA30180080L});
    public static final BitSet FOLLOW_ws_in_declarations2456 = new BitSet(new long[]{0xBFD40001D1541C42L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_cp_variable_declaration_in_declaration2496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_nested_properties_in_declaration2510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_declaration2524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_declaration2555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_declaration2569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_at_rule_in_declaration2581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_control_in_declaration2593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_extend_in_declaration2605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_debug_in_declaration2617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_declaration2629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_content_in_declaration2641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_function_return_in_declaration2653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_declaration2665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_selector_interpolation_expression_in_selectorsGroup2735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_in_selectorsGroup2748 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_selectorsGroup2751 = new BitSet(new long[]{0xBFD4000000940840L,0x0000000010180000L});
    public static final BitSet FOLLOW_ws_in_selectorsGroup2753 = new BitSet(new long[]{0xBFD4000000140840L,0x0000000010000000L});
    public static final BitSet FOLLOW_selector_in_selectorsGroup2756 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_selector2783 = new BitSet(new long[]{0x0038000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_selector2789 = new BitSet(new long[]{0x0038000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_combinator_in_selector2792 = new BitSet(new long[]{0xBFD4000000940840L,0x0000000010180000L});
    public static final BitSet FOLLOW_ws_in_selector2794 = new BitSet(new long[]{0xBFD4000000140840L,0x0000000010000000L});
    public static final BitSet FOLLOW_ws_in_selector2798 = new BitSet(new long[]{0xBFD4000000140840L,0x0000000010000000L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_selector2801 = new BitSet(new long[]{0x0038000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_set_in_combinator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeSelector_in_simpleSelectorSequence2865 = new BitSet(new long[]{0xBFD4000000940842L,0x0000000010180000L});
    public static final BitSet FOLLOW_ws_in_simpleSelectorSequence2875 = new BitSet(new long[]{0xBFD4000000140840L,0x0000000010000000L});
    public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence2878 = new BitSet(new long[]{0xBFD4000000940842L,0x0000000010180000L});
    public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence2889 = new BitSet(new long[]{0xBFD4000000940842L,0x0000000010180000L});
    public static final BitSet FOLLOW_ws_in_simpleSelectorSequence2899 = new BitSet(new long[]{0xBFD4000000140840L,0x0000000010000000L});
    public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence2902 = new BitSet(new long[]{0xBFD4000000940842L,0x0000000010180000L});
    public static final BitSet FOLLOW_set_in_esPred0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespacePrefix_in_typeSelector3017 = new BitSet(new long[]{0xB000000000040040L});
    public static final BitSet FOLLOW_elementName_in_typeSelector3021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespacePrefixName_in_namespacePrefix3036 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_STAR_in_namespacePrefix3040 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_PIPE_in_namespacePrefix3044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_extend_only_selector_in_elementSubsequent3083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cssId_in_elementSubsequent3092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cssClass_in_elementSubsequent3101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_slAttribute_in_elementSubsequent3113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pseudo_in_elementSubsequent3125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_in_cssId3153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_cssId3159 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_NAME_in_cssId3161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_cssClass3189 = new BitSet(new long[]{0x0000000000040040L});
    public static final BitSet FOLLOW_set_in_cssClass3191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_elementName0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_slAttribute3263 = new BitSet(new long[]{0x3000000000800040L,0x0000000000180000L});
    public static final BitSet FOLLOW_namespacePrefix_in_slAttribute3270 = new BitSet(new long[]{0x3000000000800040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_slAttribute3273 = new BitSet(new long[]{0x3000000000800040L,0x0000000000180000L});
    public static final BitSet FOLLOW_slAttributeName_in_slAttribute3284 = new BitSet(new long[]{0x0000000000800000L,0x000000000018007FL});
    public static final BitSet FOLLOW_ws_in_slAttribute3286 = new BitSet(new long[]{0x0000000000000000L,0x000000000000007FL});
    public static final BitSet FOLLOW_set_in_slAttribute3328 = new BitSet(new long[]{0x00000000008000C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_slAttribute3508 = new BitSet(new long[]{0x00000000008000C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_slAttributeValue_in_slAttribute3527 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180040L});
    public static final BitSet FOLLOW_ws_in_slAttribute3545 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RBRACKET_in_slAttribute3574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_slAttributeName3590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_slAttributeValue3604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_pseudo3664 = new BitSet(new long[]{0x0000000000060040L});
    public static final BitSet FOLLOW_set_in_pseudo3728 = new BitSet(new long[]{0x0000000000880002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_pseudo3785 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_pseudo3788 = new BitSet(new long[]{0x10CC000020E411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_pseudo3790 = new BitSet(new long[]{0x10CC000020E411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_expression_in_pseudo3796 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_pseudo3798 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_STAR_in_pseudo3804 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_pseudo3809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_pseudo3888 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_pseudo3890 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_pseudo3893 = new BitSet(new long[]{0xBFD4000000B40840L,0x0000000010180000L});
    public static final BitSet FOLLOW_ws_in_pseudo3895 = new BitSet(new long[]{0xBFD4000000340840L,0x0000000010000000L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_pseudo3898 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_pseudo3901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_propertyDeclaration3940 = new BitSet(new long[]{0x11C4000000441040L,0x0000000000000080L});
    public static final BitSet FOLLOW_property_in_propertyDeclaration3943 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_COLON_in_propertyDeclaration3945 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration3947 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_propertyValue_in_propertyDeclaration3950 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180100L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration3953 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180100L});
    public static final BitSet FOLLOW_prio_in_propertyDeclaration3956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_propertyDeclaration3968 = new BitSet(new long[]{0x11C4000000441040L,0x0000000000000080L});
    public static final BitSet FOLLOW_property_in_propertyDeclaration3971 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_COLON_in_propertyDeclaration3973 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration3975 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_propertyValue_in_propertyDeclaration3978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_propertyValue4013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyValue_in_cp_propertyValue4021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertyValue4043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_expressionPredicate4079 = new BitSet(new long[]{0xEFFDFFFFFFBFDFF0L,0xFFFFFFFFFFFFFF7FL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_set_in_expressionPredicate4112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_syncTo_SEMI4230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_prio4285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_in_expression4306 = new BitSet(new long[]{0x00CE000020C419C2L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_expression4338 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_expression4343 = new BitSet(new long[]{0x0002000000800800L,0x0000000000180000L});
    public static final BitSet FOLLOW_operator_in_expression4346 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_expression4348 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_term_in_expression4357 = new BitSet(new long[]{0x00CE000020C419C2L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_unaryOperator_in_term4388 = new BitSet(new long[]{0x00C0000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_term4390 = new BitSet(new long[]{0x00C00000204411C0L,0x000000000007FE80L});
    public static final BitSet FOLLOW_function_in_term4419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_term4432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_term4444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENTAGE_in_term4456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LENGTH_in_term4468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMS_in_term4480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REM_in_term4492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXS_in_term4504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANGLE_in_term4516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIME_in_term4528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FREQ_in_term4540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RESOLUTION_in_term4552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIMENSION_in_term4564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_term4581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_term4593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_URI_in_term4605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hexColor_in_term4617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_term4631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_term4645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionName_in_function4666 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_function4668 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_function4673 = new BitSet(new long[]{0x00CC000020EE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_function4675 = new BitSet(new long[]{0x00CC000020EE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_fnAttributes_in_function4707 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_function4740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_functionName4797 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_COLON_in_functionName4799 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_functionName4803 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_DOT_in_functionName4806 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_functionName4808 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_fnAttribute_in_fnAttributes4833 = new BitSet(new long[]{0x0000000000800802L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_fnAttributes4836 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_fnAttributes4839 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_fnAttributes4841 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_fnAttribute_in_fnAttributes4844 = new BitSet(new long[]{0x0000000000800802L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_fnAttributes4848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fnAttributeName_in_fnAttribute4886 = new BitSet(new long[]{0x0000000000900000L,0x0000000000180001L});
    public static final BitSet FOLLOW_ws_in_fnAttribute4888 = new BitSet(new long[]{0x0000000000100000L,0x0000000000000001L});
    public static final BitSet FOLLOW_set_in_fnAttribute4891 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_fnAttribute4897 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_fnAttributeValue_in_fnAttribute4900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_in_fnAttribute4914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_fnAttribute4926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_fnAttributeName4954 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_DOT_in_fnAttributeName4957 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_fnAttributeName4959 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_fnAttributeName4979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_in_fnAttributeValue5004 = new BitSet(new long[]{0x00CE000020C411C2L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_fnAttributeValue5036 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_fnAttributeValue5041 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_SOLIDUS_in_fnAttributeValue5044 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_fnAttributeValue5046 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_term_in_fnAttributeValue5055 = new BitSet(new long[]{0x00CE000020C411C2L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_cp_math_expression_in_fnAttributeValue5076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_in_hexColor5094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ws5115 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration5163 = new BitSet(new long[]{0x0000000000900000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5165 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_COLON_in_cp_variable_declaration5168 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5170 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration5173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration5196 = new BitSet(new long[]{0x0000000000900000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5198 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_COLON_in_cp_variable_declaration5201 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5203 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration5206 = new BitSet(new long[]{0x0000000000800002L,0x0000000000380000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SASS_DEFAULT_in_cp_variable_declaration5212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_cp_variable5243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_VAR_in_cp_variable5275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_in_cp_expression_list5299 = new BitSet(new long[]{0x0000000000800802L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_expression_list5318 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_cp_expression_list5321 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression_list5323 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_cp_expression_list5326 = new BitSet(new long[]{0x0000000000800802L,0x0000000000180000L});
    public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression5363 = new BitSet(new long[]{0x00DC000020CE91C2L,0x000000000FDFFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression5389 = new BitSet(new long[]{0x0010000000808000L,0x000000000FD80000L});
    public static final BitSet FOLLOW_cp_expression_operator_in_cp_expression5392 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression5394 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression5398 = new BitSet(new long[]{0x00DC000020CE91C2L,0x000000000FDFFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression5418 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression5421 = new BitSet(new long[]{0x00DC000020CE91C2L,0x000000000FDFFF80L});
    public static final BitSet FOLLOW_set_in_cp_expression_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_cp_expression_atom5521 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression_atom5523 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_expression_atom5556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_cp_expression_atom5572 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression_atom5574 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_expression_atom5577 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_expression_atom5579 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_expression_atom5582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expressions5614 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expressions5621 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expressions5623 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_cp_math_expression_atom_in_cp_math_expression5657 = new BitSet(new long[]{0x100E000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression5700 = new BitSet(new long[]{0x100E000000000000L});
    public static final BitSet FOLLOW_set_in_cp_math_expression5703 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression5713 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_atom_in_cp_math_expression5716 = new BitSet(new long[]{0x100E000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_term_in_cp_math_expression_atom5754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_cp_math_expression_atom5762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryOperator_in_cp_math_expression_atom5773 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression_atom5775 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_math_expression_atom5781 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression_atom5783 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expression_atom5786 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression_atom5788 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_math_expression_atom5791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_cp_mixin_declaration5821 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration5823 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration5825 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration5828 = new BitSet(new long[]{0x0000000000E01000L,0x00000000C0180080L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration5830 = new BitSet(new long[]{0x0000000000601000L,0x00000000C0000080L});
    public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration5833 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration5836 = new BitSet(new long[]{0x0000000000800002L,0x0000000100180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration5839 = new BitSet(new long[]{0x0000000000800000L,0x0000000100180000L});
    public static final BitSet FOLLOW_less_mixin_guarded_in_cp_mixin_declaration5842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_cp_mixin_declaration5858 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration5860 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration5862 = new BitSet(new long[]{0x0000000000880002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration5865 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration5868 = new BitSet(new long[]{0x0000000000E01000L,0x00000000C0180080L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration5870 = new BitSet(new long[]{0x0000000000601000L,0x00000000C0000080L});
    public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration5873 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration5876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_cp_mixin_call5917 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call5919 = new BitSet(new long[]{0x0000000000880002L,0x0000000000180000L});
    public static final BitSet FOLLOW_SASS_INCLUDE_in_cp_mixin_call5941 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call5943 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call5945 = new BitSet(new long[]{0x0000000000880002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call5958 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_call5961 = new BitSet(new long[]{0x00CC000020EE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call5963 = new BitSet(new long[]{0x00CC000020EE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_mixin_call_args_in_cp_mixin_call5966 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_call5969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_cp_mixin_name6000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6036 = new BitSet(new long[]{0x0000000000000822L});
    public static final BitSet FOLLOW_set_in_cp_mixin_call_args6040 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_args6048 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6051 = new BitSet(new long[]{0x0000000000000822L});
    public static final BitSet FOLLOW_cp_variable_in_cp_mixin_call_arg6093 = new BitSet(new long[]{0x0000000000900000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6095 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_COLON_in_cp_mixin_call_arg6098 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6100 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg6103 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg6115 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_arg_in_cp_args_list6159 = new BitSet(new long[]{0x0000000000000822L});
    public static final BitSet FOLLOW_set_in_cp_args_list6163 = new BitSet(new long[]{0x0000000000C01000L,0x0000000000180080L});
    public static final BitSet FOLLOW_ws_in_cp_args_list6173 = new BitSet(new long[]{0x0000000000401000L,0x0000000000000080L});
    public static final BitSet FOLLOW_cp_arg_in_cp_args_list6176 = new BitSet(new long[]{0x0000000000000822L});
    public static final BitSet FOLLOW_set_in_cp_args_list6182 = new BitSet(new long[]{0x0000000000800000L,0x00000000C0180000L});
    public static final BitSet FOLLOW_ws_in_cp_args_list6192 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_set_in_cp_args_list6195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_cp_args_list6217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_cp_arg6249 = new BitSet(new long[]{0x0000000000900002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_arg6251 = new BitSet(new long[]{0x0000000000100002L});
    public static final BitSet FOLLOW_COLON_in_cp_arg6256 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_arg6258 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_cp_arg6261 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_arg6263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_WHEN_in_less_mixin_guarded6289 = new BitSet(new long[]{0x00000000008A0000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_less_mixin_guarded6291 = new BitSet(new long[]{0x00000000008A0000L,0x0000000000180000L});
    public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded6294 = new BitSet(new long[]{0x0000000000008802L});
    public static final BitSet FOLLOW_set_in_less_mixin_guarded6298 = new BitSet(new long[]{0x00000000008A0000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_less_mixin_guarded6306 = new BitSet(new long[]{0x00000000008A0000L,0x0000000000180000L});
    public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded6309 = new BitSet(new long[]{0x0000000000008802L});
    public static final BitSet FOLLOW_NOT_in_less_condition6339 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_less_condition6341 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_less_condition6350 = new BitSet(new long[]{0x0000000000C01040L,0x0000000000180080L});
    public static final BitSet FOLLOW_ws_in_less_condition6352 = new BitSet(new long[]{0x0000000000401040L,0x0000000000000080L});
    public static final BitSet FOLLOW_less_function_in_condition_in_less_condition6378 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_less_condition6380 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_cp_variable_in_less_condition6411 = new BitSet(new long[]{0x0010000000A00000L,0x000000000E180001L});
    public static final BitSet FOLLOW_ws_in_less_condition6414 = new BitSet(new long[]{0x0010000000800000L,0x000000000E180001L});
    public static final BitSet FOLLOW_less_condition_operator_in_less_condition6417 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_less_condition6419 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_less_condition6422 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_less_condition6451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_less_fn_name_in_less_function_in_condition6477 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_less_function_in_condition6479 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_less_function_in_condition6482 = new BitSet(new long[]{0x0000000000C01000L,0x0000000000180080L});
    public static final BitSet FOLLOW_ws_in_less_function_in_condition6484 = new BitSet(new long[]{0x0000000000401000L,0x0000000000000080L});
    public static final BitSet FOLLOW_cp_variable_in_less_function_in_condition6487 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_less_function_in_condition6489 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_less_function_in_condition6492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_less_fn_name6514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_less_condition_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression6600 = new BitSet(new long[]{0x91D4000000900842L,0x0000000000180000L});
    public static final BitSet FOLLOW_set_in_sass_selector_interpolation_expression6628 = new BitSet(new long[]{0x91D4000000900842L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_selector_interpolation_expression6702 = new BitSet(new long[]{0x91D4000000100840L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression6739 = new BitSet(new long[]{0x91D4000000900842L,0x0000000000180000L});
    public static final BitSet FOLLOW_set_in_sass_selector_interpolation_expression6775 = new BitSet(new long[]{0x91D4000000900842L,0x0000000000180000L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression6887 = new BitSet(new long[]{0x01C4000000800042L,0x0000000000180000L});
    public static final BitSet FOLLOW_set_in_sass_declaration_interpolation_expression6915 = new BitSet(new long[]{0x01C4000000800042L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_declaration_interpolation_expression6968 = new BitSet(new long[]{0x01C4000000000040L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7005 = new BitSet(new long[]{0x01C4000000800042L,0x0000000000180000L});
    public static final BitSet FOLLOW_set_in_sass_declaration_interpolation_expression7041 = new BitSet(new long[]{0x01C4000000800042L,0x0000000000180000L});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var7156 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_sass_interpolation_expression_var7158 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_sass_interpolation_expression_var7160 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_interpolation_expression_var7162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_sass_nested_properties7206 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_COLON_in_sass_nested_properties7208 = new BitSet(new long[]{0x00CC000020C431C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties7210 = new BitSet(new long[]{0x00CC000020C431C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_propertyValue_in_sass_nested_properties7214 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties7216 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_sass_nested_properties7221 = new BitSet(new long[]{0xBFD40001D1D45C40L,0x00001BBA30180080L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties7223 = new BitSet(new long[]{0xBFD40001D1545C40L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_syncToFollow_in_sass_nested_properties7226 = new BitSet(new long[]{0xBFD40001D1545C40L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_declarations_in_sass_nested_properties7228 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_nested_properties7231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_EXTEND_in_sass_extend7252 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_extend7254 = new BitSet(new long[]{0xBFD4000000140840L,0x0000000010000000L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_sass_extend7256 = new BitSet(new long[]{0x0000000000800002L,0x0000000400180000L});
    public static final BitSet FOLLOW_ws_in_sass_extend7259 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SASS_OPTIONAL_in_sass_extend7262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector7289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_sass_debug7310 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_debug7320 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_sass_debug7322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_if_in_sass_control7347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_for_in_sass_control7351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_each_in_sass_control7355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_while_in_sass_control7359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_IF_in_sass_if7380 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_if7382 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_sass_control_expression_in_sass_if7384 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_if7386 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_if7389 = new BitSet(new long[]{0x0000000000800002L,0x0000004000180000L});
    public static final BitSet FOLLOW_ws_in_sass_if7392 = new BitSet(new long[]{0x0000000000800000L,0x0000004000180000L});
    public static final BitSet FOLLOW_sass_else_in_sass_if7395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_ELSE_in_sass_else7422 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_else7424 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_else7427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_ELSE_in_sass_else7440 = new BitSet(new long[]{0x0000000000800040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_else7442 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_else7447 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_sass_else7451 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_sass_control_expression_in_sass_else7454 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_else7456 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_else7459 = new BitSet(new long[]{0x0000000000800002L,0x0000004000180000L});
    public static final BitSet FOLLOW_ws_in_sass_else7462 = new BitSet(new long[]{0x0000000000800000L,0x0000004000180000L});
    public static final BitSet FOLLOW_sass_else_in_sass_else7465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_in_sass_control_expression7488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_FOR_in_sass_for7513 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_for7515 = new BitSet(new long[]{0x0000000000401000L,0x0000000000000080L});
    public static final BitSet FOLLOW_cp_variable_in_sass_for7517 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_for7519 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_for7523 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_for7527 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_sass_for7529 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_for7531 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_for7535 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_for7539 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_sass_for7541 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_for7543 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_for7546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_EACH_in_sass_each7567 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_each7569 = new BitSet(new long[]{0x0000000000401000L,0x0000000000000080L});
    public static final BitSet FOLLOW_cp_variable_in_sass_each7571 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_each7573 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_each7577 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_each7581 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_list_in_sass_each7583 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_each7585 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_each7588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_WHILE_in_sass_while7613 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_while7615 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_sass_control_expression_in_sass_while7617 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_while7619 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_while7622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_sass_control_block7643 = new BitSet(new long[]{0xBFD40001D1D45C40L,0x00001BBA30180080L});
    public static final BitSet FOLLOW_ws_in_sass_control_block7645 = new BitSet(new long[]{0xBFD40001D1545C40L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_declarations_in_sass_control_block7648 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_control_block7651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_FUNCTION_in_sass_function_declaration7697 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration7699 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_sass_function_name_in_sass_function_declaration7701 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration7703 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_sass_function_declaration7706 = new BitSet(new long[]{0x0000000000601000L,0x00000000C0000080L});
    public static final BitSet FOLLOW_cp_args_list_in_sass_function_declaration7708 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_sass_function_declaration7711 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration7713 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_sass_function_declaration7716 = new BitSet(new long[]{0xBFD40001D1D45C40L,0x00001BBA30180080L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration7718 = new BitSet(new long[]{0xBFD40001D1545C40L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_declarations_in_sass_function_declaration7721 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_function_declaration7724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_sass_function_name7749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_RETURN_in_sass_function_return7770 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_function_return7772 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_sass_function_return7774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_CONTENT_in_sass_content7799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred1_Css3370 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_mediaQueryList_in_synpred1_Css3373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred2_Css3434 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_mediaQueryList_in_synpred2_Css3437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred3_Css3554 = new BitSet(new long[]{0xFFFFFFFFFFFF9FD0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_COLON_in_synpred3_Css3566 = new BitSet(new long[]{0xFFFFFFFFFFFF9FD0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_set_in_synpred3_Css3568 = new BitSet(new long[]{0xFFFFFFFFFFFF9FF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_SEMI_in_synpred3_Css3578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_declaration_interpolation_expression_in_synpred3_Css3582 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_COLON_in_synpred3_Css3584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred4_Css3844 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred4_Css3847 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_synpred4_Css3849 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_mediaQuery_in_synpred4_Css3852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred5_Css31085 = new BitSet(new long[]{0x0000000000800020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_synpred5_Css31087 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred5_Css31090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred6_Css32225 = new BitSet(new long[]{0xFFFFFFFFFFEFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_synpred6_Css32233 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred6_Css32235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_declaration_in_synpred7_Css32333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred8_Css32443 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred8_Css32446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_declaration_in_synpred9_Css32493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_nested_properties_in_synpred10_Css32507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_synpred11_Css32521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred12_Css32540 = new BitSet(new long[]{0xFFFFFFFFFFFF9FD0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_COLON_in_synpred12_Css32552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_synpred13_Css32566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred14_Css32717 = new BitSet(new long[]{0xFFFFFFFFFFFFDFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_synpred14_Css32729 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred14_Css32731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred15_Css32869 = new BitSet(new long[]{0x0FC0000000100000L});
    public static final BitSet FOLLOW_esPred_in_synpred15_Css32872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred16_Css32893 = new BitSet(new long[]{0x0FC0000000100000L});
    public static final BitSet FOLLOW_esPred_in_synpred16_Css32896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred17_Css33005 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_PIPE_in_synpred17_Css33014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred18_Css34313 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_synpred18_Css34318 = new BitSet(new long[]{0x0002000000800800L,0x0000000000180000L});
    public static final BitSet FOLLOW_operator_in_synpred18_Css34321 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_synpred18_Css34323 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_term_in_synpred18_Css34332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionName_in_synpred19_Css34411 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_synpred19_Css34413 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred19_Css34416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fnAttributeName_in_synpred20_Css34873 = new BitSet(new long[]{0x0000000000900000L,0x0000000000180001L});
    public static final BitSet FOLLOW_ws_in_synpred20_Css34875 = new BitSet(new long[]{0x0000000000100000L,0x0000000000000001L});
    public static final BitSet FOLLOW_set_in_synpred20_Css34878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred21_Css35011 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_synpred21_Css35016 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_SOLIDUS_in_synpred21_Css35019 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_synpred21_Css35021 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_term_in_synpred21_Css35030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred22_Css35307 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred22_Css35310 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_synpred22_Css35312 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_synpred22_Css35315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred23_Css35382 = new BitSet(new long[]{0x0010000000808000L,0x000000000FD80000L});
    public static final BitSet FOLLOW_cp_expression_operator_in_synpred23_Css35385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred24_Css35412 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_atom_in_synpred24_Css35415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_math_expression_in_synpred25_Css35553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred26_Css35684 = new BitSet(new long[]{0x100E000000000000L});
    public static final BitSet FOLLOW_set_in_synpred26_Css35687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred27_Css36597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred28_Css36736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred29_Css36884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred30_Css37002 = new BitSet(new long[]{0x0000000000000002L});

}