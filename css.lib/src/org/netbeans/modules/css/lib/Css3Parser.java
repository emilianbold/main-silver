// $ANTLR 3.3 Nov 30, 2010 12:50:56 /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g 2013-08-22 11:06:15

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2011 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2011 Sun Microsystems, Inc.
 */
package org.netbeans.modules.css.lib;
    


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.debug.*;
import java.io.IOException;
public class Css3Parser extends DebugParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NAMESPACE_SYM", "SEMI", "IDENT", "STRING", "URI", "CHARSET_SYM", "IMPORT_SYM", "COMMA", "MEDIA_SYM", "LBRACE", "RBRACE", "IMPORTANT_SYM", "AND", "ONLY", "NOT", "GEN", "LPAREN", "RPAREN", "COLON", "AT_IDENT", "MOZ_DOCUMENT_SYM", "MOZ_URL_PREFIX", "MOZ_DOMAIN", "MOZ_REGEXP", "WEBKIT_KEYFRAMES_SYM", "PERCENTAGE", "PAGE_SYM", "COUNTER_STYLE_SYM", "FONT_FACE_SYM", "TOPLEFTCORNER_SYM", "TOPLEFT_SYM", "TOPCENTER_SYM", "TOPRIGHT_SYM", "TOPRIGHTCORNER_SYM", "BOTTOMLEFTCORNER_SYM", "BOTTOMLEFT_SYM", "BOTTOMCENTER_SYM", "BOTTOMRIGHT_SYM", "BOTTOMRIGHTCORNER_SYM", "LEFTTOP_SYM", "LEFTMIDDLE_SYM", "LEFTBOTTOM_SYM", "RIGHTTOP_SYM", "RIGHTMIDDLE_SYM", "RIGHTBOTTOM_SYM", "SOLIDUS", "MINUS", "PLUS", "GREATER", "TILDE", "HASH_SYMBOL", "HASH", "DOT", "LBRACKET", "DCOLON", "SASS_EXTEND_ONLY_SELECTOR", "STAR", "PIPE", "NAME", "LESS_AND", "OPEQ", "INCLUDES", "DASHMATCH", "BEGINS", "ENDS", "CONTAINS", "RBRACKET", "SASS_VAR", "NUMBER", "LENGTH", "EMS", "REM", "EXS", "ANGLE", "TIME", "FREQ", "RESOLUTION", "DIMENSION", "LESS_JS_STRING", "PERCENTAGE_SYMBOL", "WS", "NL", "COMMENT", "SASS_DEFAULT", "SASS_CONTENT", "SASS_MIXIN", "SASS_INCLUDE", "SASS_EXTEND", "SASS_DEBUG", "SASS_WARN", "SASS_IF", "SASS_ELSE", "SASS_FOR", "SASS_FUNCTION", "SASS_RETURN", "SASS_EACH", "SASS_WHILE", "OR", "CP_EQ", "CP_NOT_EQ", "LESS", "LESS_OR_EQ", "GREATER_OR_EQ", "CP_DOTS", "LESS_REST", "LESS_WHEN", "AT_SIGN", "SASS_OPTIONAL", "HEXCHAR", "NONASCII", "UNICODE", "ESCAPE", "NMSTART", "NMCHAR", "URL", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "CDO", "CDC", "EXCLAMATION_MARK", "INVALID", "LINE_COMMENT"
    };
    public static final int EOF=-1;
    public static final int NAMESPACE_SYM=4;
    public static final int SEMI=5;
    public static final int IDENT=6;
    public static final int STRING=7;
    public static final int URI=8;
    public static final int CHARSET_SYM=9;
    public static final int IMPORT_SYM=10;
    public static final int COMMA=11;
    public static final int MEDIA_SYM=12;
    public static final int LBRACE=13;
    public static final int RBRACE=14;
    public static final int IMPORTANT_SYM=15;
    public static final int AND=16;
    public static final int ONLY=17;
    public static final int NOT=18;
    public static final int GEN=19;
    public static final int LPAREN=20;
    public static final int RPAREN=21;
    public static final int COLON=22;
    public static final int AT_IDENT=23;
    public static final int MOZ_DOCUMENT_SYM=24;
    public static final int MOZ_URL_PREFIX=25;
    public static final int MOZ_DOMAIN=26;
    public static final int MOZ_REGEXP=27;
    public static final int WEBKIT_KEYFRAMES_SYM=28;
    public static final int PERCENTAGE=29;
    public static final int PAGE_SYM=30;
    public static final int COUNTER_STYLE_SYM=31;
    public static final int FONT_FACE_SYM=32;
    public static final int TOPLEFTCORNER_SYM=33;
    public static final int TOPLEFT_SYM=34;
    public static final int TOPCENTER_SYM=35;
    public static final int TOPRIGHT_SYM=36;
    public static final int TOPRIGHTCORNER_SYM=37;
    public static final int BOTTOMLEFTCORNER_SYM=38;
    public static final int BOTTOMLEFT_SYM=39;
    public static final int BOTTOMCENTER_SYM=40;
    public static final int BOTTOMRIGHT_SYM=41;
    public static final int BOTTOMRIGHTCORNER_SYM=42;
    public static final int LEFTTOP_SYM=43;
    public static final int LEFTMIDDLE_SYM=44;
    public static final int LEFTBOTTOM_SYM=45;
    public static final int RIGHTTOP_SYM=46;
    public static final int RIGHTMIDDLE_SYM=47;
    public static final int RIGHTBOTTOM_SYM=48;
    public static final int SOLIDUS=49;
    public static final int MINUS=50;
    public static final int PLUS=51;
    public static final int GREATER=52;
    public static final int TILDE=53;
    public static final int HASH_SYMBOL=54;
    public static final int HASH=55;
    public static final int DOT=56;
    public static final int LBRACKET=57;
    public static final int DCOLON=58;
    public static final int SASS_EXTEND_ONLY_SELECTOR=59;
    public static final int STAR=60;
    public static final int PIPE=61;
    public static final int NAME=62;
    public static final int LESS_AND=63;
    public static final int OPEQ=64;
    public static final int INCLUDES=65;
    public static final int DASHMATCH=66;
    public static final int BEGINS=67;
    public static final int ENDS=68;
    public static final int CONTAINS=69;
    public static final int RBRACKET=70;
    public static final int SASS_VAR=71;
    public static final int NUMBER=72;
    public static final int LENGTH=73;
    public static final int EMS=74;
    public static final int REM=75;
    public static final int EXS=76;
    public static final int ANGLE=77;
    public static final int TIME=78;
    public static final int FREQ=79;
    public static final int RESOLUTION=80;
    public static final int DIMENSION=81;
    public static final int LESS_JS_STRING=82;
    public static final int PERCENTAGE_SYMBOL=83;
    public static final int WS=84;
    public static final int NL=85;
    public static final int COMMENT=86;
    public static final int SASS_DEFAULT=87;
    public static final int SASS_CONTENT=88;
    public static final int SASS_MIXIN=89;
    public static final int SASS_INCLUDE=90;
    public static final int SASS_EXTEND=91;
    public static final int SASS_DEBUG=92;
    public static final int SASS_WARN=93;
    public static final int SASS_IF=94;
    public static final int SASS_ELSE=95;
    public static final int SASS_FOR=96;
    public static final int SASS_FUNCTION=97;
    public static final int SASS_RETURN=98;
    public static final int SASS_EACH=99;
    public static final int SASS_WHILE=100;
    public static final int OR=101;
    public static final int CP_EQ=102;
    public static final int CP_NOT_EQ=103;
    public static final int LESS=104;
    public static final int LESS_OR_EQ=105;
    public static final int GREATER_OR_EQ=106;
    public static final int CP_DOTS=107;
    public static final int LESS_REST=108;
    public static final int LESS_WHEN=109;
    public static final int AT_SIGN=110;
    public static final int SASS_OPTIONAL=111;
    public static final int HEXCHAR=112;
    public static final int NONASCII=113;
    public static final int UNICODE=114;
    public static final int ESCAPE=115;
    public static final int NMSTART=116;
    public static final int NMCHAR=117;
    public static final int URL=118;
    public static final int A=119;
    public static final int B=120;
    public static final int C=121;
    public static final int D=122;
    public static final int E=123;
    public static final int F=124;
    public static final int G=125;
    public static final int H=126;
    public static final int I=127;
    public static final int J=128;
    public static final int K=129;
    public static final int L=130;
    public static final int M=131;
    public static final int N=132;
    public static final int O=133;
    public static final int P=134;
    public static final int Q=135;
    public static final int R=136;
    public static final int S=137;
    public static final int T=138;
    public static final int U=139;
    public static final int V=140;
    public static final int W=141;
    public static final int X=142;
    public static final int Y=143;
    public static final int Z=144;
    public static final int CDO=145;
    public static final int CDC=146;
    public static final int EXCLAMATION_MARK=147;
    public static final int INVALID=148;
    public static final int LINE_COMMENT=149;

    // delegates
    // delegators

    public static final String[] ruleNames = new String[] {
        "invalidRule", "sass_control", "simpleSelectorSequence", "at_rule", 
        "property", "cp_expression_atom", "selector", "declaration", "mediaType", 
        "synpred22_Css3", "synpred18_Css3", "synpred15_Css3", "sass_declaration_interpolation_expression", 
        "mediaBody", "resourceIdentifier", "bodyItem", "mediaFeature", "synpred24_Css3", 
        "synpred4_Css3", "fontFace", "cp_propertyValue", "elementName", 
        "webkitKeyframesBlock", "pseudoPage", "sass_extend_only_selector", 
        "synpred40_Css3", "synpred16_Css3", "synpred8_Css3", "fnAttributeValue", 
        "synpred33_Css3", "charSetValue", "sass_content", "rule", "unaryOperator", 
        "less_fn_name", "expressionPredicate", "propertyValue", "cp_mixin_call", 
        "sass_selector_interpolation_expression", "synpred38_Css3", "sass_control_expression", 
        "cp_mixin_declaration", "synpred21_Css3", "webkitKeyframeSelectors", 
        "synpred30_Css3", "declarations", "synpred2_Css3", "syncToDeclarationsRule", 
        "synpred25_Css3", "synpred28_Css3", "mediaFeatureValue", "sass_extend", 
        "synpred29_Css3", "sass_else", "cp_expression_operator", "sass_if", 
        "sass_function_name", "term", "counterStyle", "importItem", "cssId", 
        "page", "mediaBodyItem", "pseudo", "hexColor", "synpred17_Css3", 
        "sass_while", "less_mixin_guarded", "synpred11_Css3", "cp_math_expressions", 
        "cp_variable", "sass_function_return", "syncTo_RBRACE", "synpred5_Css3", 
        "cp_expression_list", "namespace", "less_condition_operator", "sass_control_block", 
        "sass_each", "selectorsGroup", "cp_math_expression_atom", "fnAttributeName", 
        "mediaQuery", "prio", "namespacePrefixName", "synpred6_Css3", "moz_document_function", 
        "syncTo_SEMI", "synpred12_Css3", "mediaQueryList", "synpred10_Css3", 
        "vendorAtRule", "synpred36_Css3", "mediaExpression", "synpred7_Css3", 
        "atRuleId", "cssClass", "synpred14_Css3", "namespaces", "expression", 
        "media", "typeSelector", "less_condition", "synpred13_Css3", "sass_interpolation_expression_var", 
        "synpred23_Css3", "combinator", "synpred37_Css3", "cp_mixin_block", 
        "synpred32_Css3", "moz_document", "fnAttributes", "cp_args_list", 
        "synpred39_Css3", "synpred34_Css3", "cp_mixin_name", "sass_for", 
        "slAttributeName", "function", "slAttributeValue", "mediaQueryOperator", 
        "synpred9_Css3", "synpred26_Css3", "cp_math_expression", "cp_variable_declaration", 
        "elementSubsequent", "cp_arg", "margin_sym", "ws", "charSet", "functionName", 
        "cp_expression", "namespacePrefix", "webkitKeyframes", "cp_mixin_call_arg", 
        "sass_function_declaration", "cp_mixin_call_args", "synpred35_Css3", 
        "esPred", "synpred27_Css3", "body", "synpred31_Css3", "sass_nested_properties", 
        "less_selector_interpolation", "synpred3_Css3", "synpred1_Css3", 
        "fnAttribute", "propertyDeclaration", "less_function_in_condition", 
        "generic_at_rule", "sass_debug", "syncToFollow", "margin", "styleSheet", 
        "synpred20_Css3", "imports", "operator", "synpred19_Css3", "slAttribute", 
        "cp_term_symbol"
    };
    public static final boolean[] decisionCanBacktrack = new boolean[] {
        false, // invalid decision
        false, false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            true, false, false, false, false, false, true, false, false, 
            false, false, false, false, true, false, false, false, false, 
            false, false, false, true, false, false, true, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, true, 
            false, false, false, true, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, true, false, false, 
            false, false, true, false, false, false, false, false, false, 
            false, true, false, false, false, true, false, false, false, 
            false, false, false, false, false, true, false, true, false, 
            true, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, true, 
            false, false, true, false, false, false, false, false, false, 
            false, false, false, false, false, true, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, true, false, false, 
            false, true, false, false, false, false, true, false, false, 
            false, true, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            true, false, true, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false
    };

     
        public int ruleLevel = 0;
        public int getRuleLevel() { return ruleLevel; }
        public void incRuleLevel() { ruleLevel++; }
        public void decRuleLevel() { ruleLevel--; }
        public Css3Parser(TokenStream input) {
            this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT, new RecognizerSharedState());
        }
        public Css3Parser(TokenStream input, int port, RecognizerSharedState state) {
            super(input, state);
            DebugEventSocketProxy proxy =
                new DebugEventSocketProxy(this, port, null);
            setDebugListener(proxy);
            try {
                proxy.handshake();
            }
            catch (IOException ioe) {
                reportError(ioe);
            }
        }
    public Css3Parser(TokenStream input, DebugEventListener dbg) {
        super(input, dbg, new RecognizerSharedState());

    }
    protected boolean evalPredicate(boolean result, String predicate) {
        dbg.semanticPredicate(result, predicate);
        return result;
    }


    public String[] getTokenNames() { return Css3Parser.tokenNames; }
    public String getGrammarFileName() { return "/Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g"; }



        protected boolean isLessSource() {
            return false;
        }
        
        protected boolean isScssSource() {
            return false;
        }
        
        private boolean isCssPreprocessorSource() {
            return isLessSource() || isScssSource();
        }

        private boolean tokenNameEquals(String tokenImage) {
            return tokenImage.equalsIgnoreCase(input.LT(1).getText());
        }

    /**
         * Use the current stacked followset to work out the valid tokens that
         * can follow on from the current point in the parse, then recover by
         * eating tokens that are not a member of the follow set we compute.
         *
         * This method is used whenever we wish to force a sync, even though
         * the parser has not yet checked LA(1) for alt selection. This is useful
         * in situations where only a subset of tokens can begin a new construct
         * (such as the start of a new statement in a block) and we want to
         * proactively detect garbage so that the current rule does not exit on
         * on an exception.
         *
         * We could override recover() to make this the default behavior but that
         * is too much like using a sledge hammer to crack a nut. We want finer
         * grained control of the recovery and error mechanisms.
         */
        protected void syncToSet()
        {
            // Compute the followset that is in context wherever we are in the
            // rule chain/stack
            //
             BitSet follow = state.following[state._fsp]; //computeContextSensitiveRuleFOLLOW();

             syncToSet(follow);
        }

        protected void syncToSet(BitSet follow)
        {
            int mark = -1;

            //create error-recovery node
            dbg.enterRule(getGrammarFileName(), "recovery");

            try {

                mark = input.mark();

                // Consume all tokens in the stream until we find a member of the follow
                // set, which means the next production should be guaranteed to be happy.
                //
                while (! follow.member(input.LA(1)) ) {

                    if  (input.LA(1) == Token.EOF) {

                        // Looks like we didn't find anything at all that can help us here
                        // so we need to rewind to where we were and let normal error handling
                        // bail out.
                        //
                        input.rewind();
                        mark = -1;
                        return;
                    }
                    input.consume();

                    // Now here, because you are consuming some tokens, yu will probably want
                    // to raise an error message such as "Spurious elements after the class member were discarded"
                    // using whatever your override of displayRecognitionError() routine does to record
                    // error messages. The exact error my depend on context etc.
                    //
                }
            } catch (Exception e) {

              // Just ignore any errors here, we will just let the recognizer
              // try to resync as normal - something must be very screwed.
              //
            }
            finally {
                dbg.exitRule(getGrammarFileName(), "recovery");

                // Always release the mark we took
                //
                if  (mark != -1) {
                    input.release(mark);
                }
            }
        }
        
        /**
             * synces to next RBRACE "}" taking nesting into account
             */
            protected void syncToRBRACE(int nest)
                {
                    
                    int mark = -1;
                    //create error-recovery node
                    //dbg.enterRule(getGrammarFileName(), "recovery");

                    try {
                        mark = input.mark();
                        for(;;) {
                            //read char
                            int c = input.LA(1);
                            
                            switch(c) {
                                case Token.EOF:
                                    input.rewind();
                                    mark = -1;
                                    return ;
                                case Css3Lexer.LBRACE:
                                    nest++;
                                    break;
                                case Css3Lexer.RBRACE:
                                    nest--;
                                    if(nest == 0) {
                                        //do not eat the final RBRACE
                                        return ;
                                    }
                            }
                            
                            input.consume();
                                                
                        }

                    } catch (Exception e) {

                      // Just ignore any errors here, we will just let the recognizer
                      // try to resync as normal - something must be very screwed.
                      //
                    }
                    finally {
                        if  (mark != -1) {
                            input.release(mark);
                        }
                        //dbg.exitRule(getGrammarFileName(), "recovery");
                    }
                }
        



    // $ANTLR start "styleSheet"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:321:1: styleSheet : ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF ;
    public final void styleSheet() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "styleSheet");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(321, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:322:5: ( ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:6: ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF
            {
            dbg.location(323,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:6: ( ws )?
            int alt1=2;
            try { dbg.enterSubRule(1);
            try { dbg.enterDecision(1, decisionCanBacktrack[1]);

            int LA1_0 = input.LA(1);

            if ( ((LA1_0>=WS && LA1_0<=COMMENT)) ) {
                alt1=1;
            }
            } finally {dbg.exitDecision(1);}

            switch (alt1) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:6: ws
                    {
                    dbg.location(323,6);
                    pushFollow(FOLLOW_ws_in_styleSheet125);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(1);}

            dbg.location(324,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:6: ( charSet ( ws )? )?
            int alt3=2;
            try { dbg.enterSubRule(3);
            try { dbg.enterDecision(3, decisionCanBacktrack[3]);

            try {
                isCyclicDecision = true;
                alt3 = dfa3.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(3);}

            switch (alt3) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:8: charSet ( ws )?
                    {
                    dbg.location(324,8);
                    pushFollow(FOLLOW_charSet_in_styleSheet135);
                    charSet();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(324,16);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:16: ( ws )?
                    int alt2=2;
                    try { dbg.enterSubRule(2);
                    try { dbg.enterDecision(2, decisionCanBacktrack[2]);

                    int LA2_0 = input.LA(1);

                    if ( ((LA2_0>=WS && LA2_0<=COMMENT)) ) {
                        alt2=1;
                    }
                    } finally {dbg.exitDecision(2);}

                    switch (alt2) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:16: ws
                            {
                            dbg.location(324,16);
                            pushFollow(FOLLOW_ws_in_styleSheet137);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(2);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(3);}

            dbg.location(325,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:9: ( imports )?
            int alt4=2;
            try { dbg.enterSubRule(4);
            try { dbg.enterDecision(4, decisionCanBacktrack[4]);

            try {
                isCyclicDecision = true;
                alt4 = dfa4.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(4);}

            switch (alt4) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:9: imports
                    {
                    dbg.location(325,9);
                    pushFollow(FOLLOW_imports_in_styleSheet151);
                    imports();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(4);}

            dbg.location(326,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:326:9: ( namespaces )?
            int alt5=2;
            try { dbg.enterSubRule(5);
            try { dbg.enterDecision(5, decisionCanBacktrack[5]);

            try {
                isCyclicDecision = true;
                alt5 = dfa5.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(5);}

            switch (alt5) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:326:9: namespaces
                    {
                    dbg.location(326,9);
                    pushFollow(FOLLOW_namespaces_in_styleSheet162);
                    namespaces();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(5);}

            dbg.location(327,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:9: ( body )?
            int alt6=2;
            try { dbg.enterSubRule(6);
            try { dbg.enterDecision(6, decisionCanBacktrack[6]);

            int LA6_0 = input.LA(1);

            if ( ((LA6_0>=NAMESPACE_SYM && LA6_0<=IDENT)||(LA6_0>=CHARSET_SYM && LA6_0<=MEDIA_SYM)||LA6_0==GEN||(LA6_0>=COLON && LA6_0<=MOZ_DOCUMENT_SYM)||LA6_0==WEBKIT_KEYFRAMES_SYM||(LA6_0>=PAGE_SYM && LA6_0<=RIGHTBOTTOM_SYM)||(LA6_0>=MINUS && LA6_0<=PIPE)||LA6_0==LESS_AND||(LA6_0>=RBRACKET && LA6_0<=SASS_VAR)||(LA6_0>=SASS_CONTENT && LA6_0<=SASS_WHILE)||LA6_0==AT_SIGN) ) {
                alt6=1;
            }
            } finally {dbg.exitDecision(6);}

            switch (alt6) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:9: body
                    {
                    dbg.location(327,9);
                    pushFollow(FOLLOW_body_in_styleSheet174);
                    body();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(6);}

            dbg.location(328,6);
            match(input,EOF,FOLLOW_EOF_in_styleSheet182); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(329, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "styleSheet");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "styleSheet"


    // $ANTLR start "namespaces"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:331:1: namespaces : ( namespace ( ws )? )+ ;
    public final void namespaces() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespaces");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(331, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:332:2: ( ( namespace ( ws )? )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:2: ( namespace ( ws )? )+
            {
            dbg.location(333,2);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:2: ( namespace ( ws )? )+
            int cnt8=0;
            try { dbg.enterSubRule(8);

            loop8:
            do {
                int alt8=2;
                try { dbg.enterDecision(8, decisionCanBacktrack[8]);

                try {
                    isCyclicDecision = true;
                    alt8 = dfa8.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(8);}

                switch (alt8) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:4: namespace ( ws )?
            	    {
            	    dbg.location(333,4);
            	    pushFollow(FOLLOW_namespace_in_namespaces199);
            	    namespace();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(333,14);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:14: ( ws )?
            	    int alt7=2;
            	    try { dbg.enterSubRule(7);
            	    try { dbg.enterDecision(7, decisionCanBacktrack[7]);

            	    int LA7_0 = input.LA(1);

            	    if ( ((LA7_0>=WS && LA7_0<=COMMENT)) ) {
            	        alt7=1;
            	    }
            	    } finally {dbg.exitDecision(7);}

            	    switch (alt7) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:14: ws
            	            {
            	            dbg.location(333,14);
            	            pushFollow(FOLLOW_ws_in_namespaces201);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(7);}


            	    }
            	    break;

            	default :
            	    if ( cnt8 >= 1 ) break loop8;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(8, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt8++;
            } while (true);
            } finally {dbg.exitSubRule(8);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(334, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespaces");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespaces"


    // $ANTLR start "namespace"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:1: namespace : NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI ;
    public final void namespace() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespace");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(336, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:3: ( NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:5: NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI
            {
            dbg.location(337,5);
            match(input,NAMESPACE_SYM,FOLLOW_NAMESPACE_SYM_in_namespace217); if (state.failed) return ;
            dbg.location(337,19);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:19: ( ws )?
            int alt9=2;
            try { dbg.enterSubRule(9);
            try { dbg.enterDecision(9, decisionCanBacktrack[9]);

            int LA9_0 = input.LA(1);

            if ( ((LA9_0>=WS && LA9_0<=COMMENT)) ) {
                alt9=1;
            }
            } finally {dbg.exitDecision(9);}

            switch (alt9) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:19: ws
                    {
                    dbg.location(337,19);
                    pushFollow(FOLLOW_ws_in_namespace219);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(9);}

            dbg.location(337,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:23: ( namespacePrefixName ( ws )? )?
            int alt11=2;
            try { dbg.enterSubRule(11);
            try { dbg.enterDecision(11, decisionCanBacktrack[11]);

            int LA11_0 = input.LA(1);

            if ( (LA11_0==IDENT) ) {
                alt11=1;
            }
            } finally {dbg.exitDecision(11);}

            switch (alt11) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:24: namespacePrefixName ( ws )?
                    {
                    dbg.location(337,24);
                    pushFollow(FOLLOW_namespacePrefixName_in_namespace223);
                    namespacePrefixName();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(337,44);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:44: ( ws )?
                    int alt10=2;
                    try { dbg.enterSubRule(10);
                    try { dbg.enterDecision(10, decisionCanBacktrack[10]);

                    int LA10_0 = input.LA(1);

                    if ( ((LA10_0>=WS && LA10_0<=COMMENT)) ) {
                        alt10=1;
                    }
                    } finally {dbg.exitDecision(10);}

                    switch (alt10) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:44: ws
                            {
                            dbg.location(337,44);
                            pushFollow(FOLLOW_ws_in_namespace225);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(10);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(11);}

            dbg.location(337,50);
            pushFollow(FOLLOW_resourceIdentifier_in_namespace230);
            resourceIdentifier();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(337,69);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:69: ( ws )?
            int alt12=2;
            try { dbg.enterSubRule(12);
            try { dbg.enterDecision(12, decisionCanBacktrack[12]);

            int LA12_0 = input.LA(1);

            if ( ((LA12_0>=WS && LA12_0<=COMMENT)) ) {
                alt12=1;
            }
            } finally {dbg.exitDecision(12);}

            switch (alt12) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:69: ws
                    {
                    dbg.location(337,69);
                    pushFollow(FOLLOW_ws_in_namespace232);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(12);}

            dbg.location(337,73);
            match(input,SEMI,FOLLOW_SEMI_in_namespace235); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(338, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespace");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespace"


    // $ANTLR start "namespacePrefixName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:340:1: namespacePrefixName : IDENT ;
    public final void namespacePrefixName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespacePrefixName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(340, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:341:3: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:341:5: IDENT
            {
            dbg.location(341,5);
            match(input,IDENT,FOLLOW_IDENT_in_namespacePrefixName248); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(342, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespacePrefixName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespacePrefixName"


    // $ANTLR start "resourceIdentifier"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:344:1: resourceIdentifier : ( STRING | URI );
    public final void resourceIdentifier() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "resourceIdentifier");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(344, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:345:3: ( STRING | URI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(345,3);
            if ( (input.LA(1)>=STRING && input.LA(1)<=URI) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(346, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "resourceIdentifier");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "resourceIdentifier"


    // $ANTLR start "charSet"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:348:1: charSet : CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI ;
    public final void charSet() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "charSet");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(348, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:5: ( CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:9: CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI
            {
            dbg.location(349,9);
            match(input,CHARSET_SYM,FOLLOW_CHARSET_SYM_in_charSet286); if (state.failed) return ;
            dbg.location(349,21);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:21: ( ws )?
            int alt13=2;
            try { dbg.enterSubRule(13);
            try { dbg.enterDecision(13, decisionCanBacktrack[13]);

            int LA13_0 = input.LA(1);

            if ( ((LA13_0>=WS && LA13_0<=COMMENT)) ) {
                alt13=1;
            }
            } finally {dbg.exitDecision(13);}

            switch (alt13) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:21: ws
                    {
                    dbg.location(349,21);
                    pushFollow(FOLLOW_ws_in_charSet288);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(13);}

            dbg.location(349,25);
            pushFollow(FOLLOW_charSetValue_in_charSet291);
            charSetValue();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(349,38);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:38: ( ws )?
            int alt14=2;
            try { dbg.enterSubRule(14);
            try { dbg.enterDecision(14, decisionCanBacktrack[14]);

            int LA14_0 = input.LA(1);

            if ( ((LA14_0>=WS && LA14_0<=COMMENT)) ) {
                alt14=1;
            }
            } finally {dbg.exitDecision(14);}

            switch (alt14) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:38: ws
                    {
                    dbg.location(349,38);
                    pushFollow(FOLLOW_ws_in_charSet293);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(14);}

            dbg.location(349,42);
            match(input,SEMI,FOLLOW_SEMI_in_charSet296); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(350, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "charSet");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "charSet"


    // $ANTLR start "charSetValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:352:1: charSetValue : STRING ;
    public final void charSetValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "charSetValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(352, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:353:2: ( STRING )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:353:4: STRING
            {
            dbg.location(353,4);
            match(input,STRING,FOLLOW_STRING_in_charSetValue310); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(354, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "charSetValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "charSetValue"


    // $ANTLR start "imports"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:356:1: imports : ( importItem ( ws )? SEMI ( ws )? )+ ;
    public final void imports() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "imports");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(356, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:357:2: ( ( importItem ( ws )? SEMI ( ws )? )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:2: ( importItem ( ws )? SEMI ( ws )? )+
            {
            dbg.location(358,2);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:2: ( importItem ( ws )? SEMI ( ws )? )+
            int cnt17=0;
            try { dbg.enterSubRule(17);

            loop17:
            do {
                int alt17=2;
                try { dbg.enterDecision(17, decisionCanBacktrack[17]);

                try {
                    isCyclicDecision = true;
                    alt17 = dfa17.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(17);}

                switch (alt17) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:4: importItem ( ws )? SEMI ( ws )?
            	    {
            	    dbg.location(358,4);
            	    pushFollow(FOLLOW_importItem_in_imports324);
            	    importItem();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(358,15);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:15: ( ws )?
            	    int alt15=2;
            	    try { dbg.enterSubRule(15);
            	    try { dbg.enterDecision(15, decisionCanBacktrack[15]);

            	    int LA15_0 = input.LA(1);

            	    if ( ((LA15_0>=WS && LA15_0<=COMMENT)) ) {
            	        alt15=1;
            	    }
            	    } finally {dbg.exitDecision(15);}

            	    switch (alt15) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:15: ws
            	            {
            	            dbg.location(358,15);
            	            pushFollow(FOLLOW_ws_in_imports326);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(15);}

            	    dbg.location(358,19);
            	    match(input,SEMI,FOLLOW_SEMI_in_imports329); if (state.failed) return ;
            	    dbg.location(358,24);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:24: ( ws )?
            	    int alt16=2;
            	    try { dbg.enterSubRule(16);
            	    try { dbg.enterDecision(16, decisionCanBacktrack[16]);

            	    int LA16_0 = input.LA(1);

            	    if ( ((LA16_0>=WS && LA16_0<=COMMENT)) ) {
            	        alt16=1;
            	    }
            	    } finally {dbg.exitDecision(16);}

            	    switch (alt16) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:24: ws
            	            {
            	            dbg.location(358,24);
            	            pushFollow(FOLLOW_ws_in_imports331);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(16);}


            	    }
            	    break;

            	default :
            	    if ( cnt17 >= 1 ) break loop17;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(17, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt17++;
            } while (true);
            } finally {dbg.exitSubRule(17);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(359, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "imports");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "imports"


    // $ANTLR start "importItem"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:361:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? );
    public final void importItem() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "importItem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(361, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:362:5: ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? )
            int alt27=2;
            try { dbg.enterDecision(27, decisionCanBacktrack[27]);

            try {
                isCyclicDecision = true;
                alt27 = dfa27.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(27);}

            switch (alt27) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:9: IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    {
                    dbg.location(363,9);
                    match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem361); if (state.failed) return ;
                    dbg.location(363,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:20: ( ws )?
                    int alt18=2;
                    try { dbg.enterSubRule(18);
                    try { dbg.enterDecision(18, decisionCanBacktrack[18]);

                    int LA18_0 = input.LA(1);

                    if ( ((LA18_0>=WS && LA18_0<=COMMENT)) ) {
                        alt18=1;
                    }
                    } finally {dbg.exitDecision(18);}

                    switch (alt18) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:20: ws
                            {
                            dbg.location(363,20);
                            pushFollow(FOLLOW_ws_in_importItem363);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(18);}

                    dbg.location(363,24);
                    pushFollow(FOLLOW_resourceIdentifier_in_importItem366);
                    resourceIdentifier();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(363,43);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:43: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    int alt20=2;
                    try { dbg.enterSubRule(20);
                    try { dbg.enterDecision(20, decisionCanBacktrack[20]);

                    try {
                        isCyclicDecision = true;
                        alt20 = dfa20.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(20);}

                    switch (alt20) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:44: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
                            {
                            dbg.location(363,66);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:66: ( ws )?
                            int alt19=2;
                            try { dbg.enterSubRule(19);
                            try { dbg.enterDecision(19, decisionCanBacktrack[19]);

                            int LA19_0 = input.LA(1);

                            if ( ((LA19_0>=WS && LA19_0<=COMMENT)) ) {
                                alt19=1;
                            }
                            } finally {dbg.exitDecision(19);}

                            switch (alt19) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:66: ws
                                    {
                                    dbg.location(363,66);
                                    pushFollow(FOLLOW_ws_in_importItem376);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(19);}

                            dbg.location(363,70);
                            pushFollow(FOLLOW_mediaQueryList_in_importItem379);
                            mediaQueryList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(20);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:9: {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    {
                    dbg.location(366,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "importItem", "isScssSource()");
                    }
                    dbg.location(366,27);
                    match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem412); if (state.failed) return ;
                    dbg.location(366,38);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:38: ( ws )?
                    int alt21=2;
                    try { dbg.enterSubRule(21);
                    try { dbg.enterDecision(21, decisionCanBacktrack[21]);

                    int LA21_0 = input.LA(1);

                    if ( ((LA21_0>=WS && LA21_0<=COMMENT)) ) {
                        alt21=1;
                    }
                    } finally {dbg.exitDecision(21);}

                    switch (alt21) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:38: ws
                            {
                            dbg.location(366,38);
                            pushFollow(FOLLOW_ws_in_importItem414);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(21);}

                    dbg.location(366,42);
                    pushFollow(FOLLOW_resourceIdentifier_in_importItem417);
                    resourceIdentifier();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(366,61);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:61: ( ( ws )? COMMA ( ws )? resourceIdentifier )*
                    try { dbg.enterSubRule(24);

                    loop24:
                    do {
                        int alt24=2;
                        try { dbg.enterDecision(24, decisionCanBacktrack[24]);

                        try {
                            isCyclicDecision = true;
                            alt24 = dfa24.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(24);}

                        switch (alt24) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:62: ( ws )? COMMA ( ws )? resourceIdentifier
                    	    {
                    	    dbg.location(366,62);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:62: ( ws )?
                    	    int alt22=2;
                    	    try { dbg.enterSubRule(22);
                    	    try { dbg.enterDecision(22, decisionCanBacktrack[22]);

                    	    int LA22_0 = input.LA(1);

                    	    if ( ((LA22_0>=WS && LA22_0<=COMMENT)) ) {
                    	        alt22=1;
                    	    }
                    	    } finally {dbg.exitDecision(22);}

                    	    switch (alt22) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:62: ws
                    	            {
                    	            dbg.location(366,62);
                    	            pushFollow(FOLLOW_ws_in_importItem420);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(22);}

                    	    dbg.location(366,66);
                    	    match(input,COMMA,FOLLOW_COMMA_in_importItem423); if (state.failed) return ;
                    	    dbg.location(366,72);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:72: ( ws )?
                    	    int alt23=2;
                    	    try { dbg.enterSubRule(23);
                    	    try { dbg.enterDecision(23, decisionCanBacktrack[23]);

                    	    int LA23_0 = input.LA(1);

                    	    if ( ((LA23_0>=WS && LA23_0<=COMMENT)) ) {
                    	        alt23=1;
                    	    }
                    	    } finally {dbg.exitDecision(23);}

                    	    switch (alt23) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:72: ws
                    	            {
                    	            dbg.location(366,72);
                    	            pushFollow(FOLLOW_ws_in_importItem425);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(23);}

                    	    dbg.location(366,76);
                    	    pushFollow(FOLLOW_resourceIdentifier_in_importItem428);
                    	    resourceIdentifier();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop24;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(24);}

                    dbg.location(366,97);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:97: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    int alt26=2;
                    try { dbg.enterSubRule(26);
                    try { dbg.enterDecision(26, decisionCanBacktrack[26]);

                    try {
                        isCyclicDecision = true;
                        alt26 = dfa26.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(26);}

                    switch (alt26) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:98: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
                            {
                            dbg.location(366,120);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:120: ( ws )?
                            int alt25=2;
                            try { dbg.enterSubRule(25);
                            try { dbg.enterDecision(25, decisionCanBacktrack[25]);

                            int LA25_0 = input.LA(1);

                            if ( ((LA25_0>=WS && LA25_0<=COMMENT)) ) {
                                alt25=1;
                            }
                            } finally {dbg.exitDecision(25);}

                            switch (alt25) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:120: ws
                                    {
                                    dbg.location(366,120);
                                    pushFollow(FOLLOW_ws_in_importItem440);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(25);}

                            dbg.location(366,124);
                            pushFollow(FOLLOW_mediaQueryList_in_importItem443);
                            mediaQueryList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(26);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(367, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "importItem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "importItem"


    // $ANTLR start "media"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:1: media : MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE ;
    public final void media() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "media");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(368, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:5: ( MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:7: MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE
            {
            dbg.location(369,7);
            match(input,MEDIA_SYM,FOLLOW_MEDIA_SYM_in_media461); if (state.failed) return ;
            dbg.location(369,17);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:17: ( ws )?
            int alt28=2;
            try { dbg.enterSubRule(28);
            try { dbg.enterDecision(28, decisionCanBacktrack[28]);

            int LA28_0 = input.LA(1);

            if ( ((LA28_0>=WS && LA28_0<=COMMENT)) ) {
                alt28=1;
            }
            } finally {dbg.exitDecision(28);}

            switch (alt28) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:17: ws
                    {
                    dbg.location(369,17);
                    pushFollow(FOLLOW_ws_in_media463);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(28);}

            dbg.location(370,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:370:5: ( mediaQueryList )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:371:10: mediaQueryList
            {
            dbg.location(371,10);
            pushFollow(FOLLOW_mediaQueryList_in_media482);
            mediaQueryList();

            state._fsp--;
            if (state.failed) return ;

            }

            dbg.location(372,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:7: ( ws )?
            int alt29=2;
            try { dbg.enterSubRule(29);
            try { dbg.enterDecision(29, decisionCanBacktrack[29]);

            int LA29_0 = input.LA(1);

            if ( ((LA29_0>=WS && LA29_0<=COMMENT)) ) {
                alt29=1;
            }
            } finally {dbg.exitDecision(29);}

            switch (alt29) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:7: ws
                    {
                    dbg.location(372,7);
                    pushFollow(FOLLOW_ws_in_media490);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(29);}

            dbg.location(373,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_media497); if (state.failed) return ;
            dbg.location(373,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:12: ( ws )?
            int alt30=2;
            try { dbg.enterSubRule(30);
            try { dbg.enterDecision(30, decisionCanBacktrack[30]);

            int LA30_0 = input.LA(1);

            if ( ((LA30_0>=WS && LA30_0<=COMMENT)) ) {
                alt30=1;
            }
            } finally {dbg.exitDecision(30);}

            switch (alt30) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:12: ws
                    {
                    dbg.location(373,12);
                    pushFollow(FOLLOW_ws_in_media499);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(30);}

            dbg.location(373,16);
            pushFollow(FOLLOW_syncToFollow_in_media502);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(374,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:374:9: ( mediaBody )?
            int alt31=2;
            try { dbg.enterSubRule(31);
            try { dbg.enterDecision(31, decisionCanBacktrack[31]);

            int LA31_0 = input.LA(1);

            if ( ((LA31_0>=NAMESPACE_SYM && LA31_0<=IDENT)||(LA31_0>=CHARSET_SYM && LA31_0<=MEDIA_SYM)||LA31_0==GEN||(LA31_0>=COLON && LA31_0<=MOZ_DOCUMENT_SYM)||LA31_0==WEBKIT_KEYFRAMES_SYM||(LA31_0>=PAGE_SYM && LA31_0<=RIGHTBOTTOM_SYM)||(LA31_0>=MINUS && LA31_0<=PIPE)||LA31_0==LESS_AND||(LA31_0>=RBRACKET && LA31_0<=SASS_VAR)||(LA31_0>=SASS_CONTENT && LA31_0<=SASS_WHILE)||LA31_0==AT_SIGN) ) {
                alt31=1;
            }
            } finally {dbg.exitDecision(31);}

            switch (alt31) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:374:9: mediaBody
                    {
                    dbg.location(374,9);
                    pushFollow(FOLLOW_mediaBody_in_media512);
                    mediaBody();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(31);}

            dbg.location(375,5);
            match(input,RBRACE,FOLLOW_RBRACE_in_media519); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(376, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "media");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "media"


    // $ANTLR start "mediaBody"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:378:1: mediaBody : ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
    public final void mediaBody() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaBody");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(378, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:5: ( ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:380:5: ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            {
            dbg.location(380,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:380:5: ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            int cnt36=0;
            try { dbg.enterSubRule(36);

            loop36:
            do {
                int alt36=3;
                try { dbg.enterDecision(36, decisionCanBacktrack[36]);

                int LA36_0 = input.LA(1);

                if ( (LA36_0==NAMESPACE_SYM||LA36_0==IDENT||(LA36_0>=CHARSET_SYM && LA36_0<=MEDIA_SYM)||LA36_0==GEN||(LA36_0>=COLON && LA36_0<=MOZ_DOCUMENT_SYM)||LA36_0==WEBKIT_KEYFRAMES_SYM||(LA36_0>=PAGE_SYM && LA36_0<=RIGHTBOTTOM_SYM)||(LA36_0>=MINUS && LA36_0<=PIPE)||LA36_0==LESS_AND||(LA36_0>=RBRACKET && LA36_0<=SASS_VAR)||(LA36_0>=SASS_CONTENT && LA36_0<=SASS_WHILE)||LA36_0==AT_SIGN) ) {
                    alt36=1;
                }
                else if ( (LA36_0==SEMI) ) {
                    alt36=2;
                }


                } finally {dbg.exitDecision(36);}

                switch (alt36) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:10: ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    {
            	    dbg.location(381,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:10: ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:12: mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
            	    {
            	    dbg.location(381,12);
            	    pushFollow(FOLLOW_mediaBodyItem_in_mediaBody557);
            	    mediaBodyItem();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(381,26);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:26: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
            	    int alt33=2;
            	    try { dbg.enterSubRule(33);
            	    try { dbg.enterDecision(33, decisionCanBacktrack[33]);

            	    try {
            	        isCyclicDecision = true;
            	        alt33 = dfa33.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(33);}

            	    switch (alt33) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:27: ( ( ws )? SEMI )=> ( ws )? SEMI
            	            {
            	            dbg.location(381,39);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:39: ( ws )?
            	            int alt32=2;
            	            try { dbg.enterSubRule(32);
            	            try { dbg.enterDecision(32, decisionCanBacktrack[32]);

            	            int LA32_0 = input.LA(1);

            	            if ( ((LA32_0>=WS && LA32_0<=COMMENT)) ) {
            	                alt32=1;
            	            }
            	            } finally {dbg.exitDecision(32);}

            	            switch (alt32) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:39: ws
            	                    {
            	                    dbg.location(381,39);
            	                    pushFollow(FOLLOW_ws_in_mediaBody567);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(32);}

            	            dbg.location(381,43);
            	            match(input,SEMI,FOLLOW_SEMI_in_mediaBody570); if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(33);}

            	    dbg.location(381,50);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:50: ( ws )?
            	    int alt34=2;
            	    try { dbg.enterSubRule(34);
            	    try { dbg.enterDecision(34, decisionCanBacktrack[34]);

            	    int LA34_0 = input.LA(1);

            	    if ( ((LA34_0>=WS && LA34_0<=COMMENT)) ) {
            	        alt34=1;
            	    }
            	    } finally {dbg.exitDecision(34);}

            	    switch (alt34) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:50: ws
            	            {
            	            dbg.location(381,50);
            	            pushFollow(FOLLOW_ws_in_mediaBody574);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(34);}


            	    }


            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:10: ( SEMI ( ws )? )
            	    {
            	    dbg.location(383,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:10: ( SEMI ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:12: SEMI ( ws )?
            	    {
            	    dbg.location(383,12);
            	    match(input,SEMI,FOLLOW_SEMI_in_mediaBody601); if (state.failed) return ;
            	    dbg.location(383,17);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:17: ( ws )?
            	    int alt35=2;
            	    try { dbg.enterSubRule(35);
            	    try { dbg.enterDecision(35, decisionCanBacktrack[35]);

            	    int LA35_0 = input.LA(1);

            	    if ( ((LA35_0>=WS && LA35_0<=COMMENT)) ) {
            	        alt35=1;
            	    }
            	    } finally {dbg.exitDecision(35);}

            	    switch (alt35) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:17: ws
            	            {
            	            dbg.location(383,17);
            	            pushFollow(FOLLOW_ws_in_mediaBody603);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(35);}


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt36 >= 1 ) break loop36;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(36, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt36++;
            } while (true);
            } finally {dbg.exitSubRule(36);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(385, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaBody");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaBody"


    // $ANTLR start "mediaBodyItem"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:387:1: mediaBodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | {...}? sass_extend | {...}? sass_debug | {...}? sass_control | {...}? sass_content | rule | page | fontFace | vendorAtRule | media );
    public final void mediaBodyItem() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaBodyItem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(387, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:388:5: ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | {...}? sass_extend | {...}? sass_debug | {...}? sass_control | {...}? sass_content | rule | page | fontFace | vendorAtRule | media )
            int alt41=14;
            try { dbg.enterDecision(41, decisionCanBacktrack[41]);

            try {
                isCyclicDecision = true;
                alt41 = dfa41.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(41);}

            switch (alt41) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:5: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration
                    {
                    dbg.location(389,85);
                    pushFollow(FOLLOW_cp_mixin_declaration_in_mediaBodyItem669);
                    cp_mixin_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:7: ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
                    {
                    dbg.location(391,55);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isLessSource()");
                    }
                    dbg.location(391,73);
                    pushFollow(FOLLOW_cp_mixin_call_in_mediaBodyItem703);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(391,87);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:87: ( ( ws )? IMPORTANT_SYM )?
                    int alt38=2;
                    try { dbg.enterSubRule(38);
                    try { dbg.enterDecision(38, decisionCanBacktrack[38]);

                    try {
                        isCyclicDecision = true;
                        alt38 = dfa38.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(38);}

                    switch (alt38) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:88: ( ws )? IMPORTANT_SYM
                            {
                            dbg.location(391,88);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:88: ( ws )?
                            int alt37=2;
                            try { dbg.enterSubRule(37);
                            try { dbg.enterDecision(37, decisionCanBacktrack[37]);

                            int LA37_0 = input.LA(1);

                            if ( ((LA37_0>=WS && LA37_0<=COMMENT)) ) {
                                alt37=1;
                            }
                            } finally {dbg.exitDecision(37);}

                            switch (alt37) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:88: ws
                                    {
                                    dbg.location(391,88);
                                    pushFollow(FOLLOW_ws_in_mediaBodyItem706);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(37);}

                            dbg.location(391,92);
                            match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_mediaBodyItem709); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(38);}


                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:7: ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
                    {
                    dbg.location(392,25);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(392,43);
                    pushFollow(FOLLOW_cp_mixin_call_in_mediaBodyItem726);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(392,57);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:57: ( ( ws )? IMPORTANT_SYM )?
                    int alt40=2;
                    try { dbg.enterSubRule(40);
                    try { dbg.enterDecision(40, decisionCanBacktrack[40]);

                    try {
                        isCyclicDecision = true;
                        alt40 = dfa40.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(40);}

                    switch (alt40) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:58: ( ws )? IMPORTANT_SYM
                            {
                            dbg.location(392,58);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:58: ( ws )?
                            int alt39=2;
                            try { dbg.enterSubRule(39);
                            try { dbg.enterDecision(39, decisionCanBacktrack[39]);

                            int LA39_0 = input.LA(1);

                            if ( ((LA39_0>=WS && LA39_0<=COMMENT)) ) {
                                alt39=1;
                            }
                            } finally {dbg.exitDecision(39);}

                            switch (alt39) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:58: ws
                                    {
                                    dbg.location(392,58);
                                    pushFollow(FOLLOW_ws_in_mediaBodyItem729);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(39);}

                            dbg.location(392,62);
                            match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_mediaBodyItem732); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(40);}


                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:6: ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration
                    {
                    dbg.location(393,74);
                    pushFollow(FOLLOW_propertyDeclaration_in_mediaBodyItem771);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:6: ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration
                    {
                    dbg.location(394,87);
                    pushFollow(FOLLOW_propertyDeclaration_in_mediaBodyItem798);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:7: {...}? sass_extend
                    {
                    dbg.location(395,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(395,25);
                    pushFollow(FOLLOW_sass_extend_in_mediaBodyItem808);
                    sass_extend();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:396:7: {...}? sass_debug
                    {
                    dbg.location(396,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(396,25);
                    pushFollow(FOLLOW_sass_debug_in_mediaBodyItem818);
                    sass_debug();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:397:7: {...}? sass_control
                    {
                    dbg.location(397,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(397,25);
                    pushFollow(FOLLOW_sass_control_in_mediaBodyItem828);
                    sass_control();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:398:7: {...}? sass_content
                    {
                    dbg.location(398,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(398,25);
                    pushFollow(FOLLOW_sass_content_in_mediaBodyItem838);
                    sass_content();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:399:7: rule
                    {
                    dbg.location(399,7);
                    pushFollow(FOLLOW_rule_in_mediaBodyItem846);
                    rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:400:7: page
                    {
                    dbg.location(400,7);
                    pushFollow(FOLLOW_page_in_mediaBodyItem854);
                    page();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:401:7: fontFace
                    {
                    dbg.location(401,7);
                    pushFollow(FOLLOW_fontFace_in_mediaBodyItem862);
                    fontFace();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:7: vendorAtRule
                    {
                    dbg.location(402,7);
                    pushFollow(FOLLOW_vendorAtRule_in_mediaBodyItem870);
                    vendorAtRule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:404:7: media
                    {
                    dbg.location(404,7);
                    pushFollow(FOLLOW_media_in_mediaBodyItem883);
                    media();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(405, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaBodyItem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaBodyItem"


    // $ANTLR start "mediaQueryList"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:407:1: mediaQueryList : mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )* ;
    public final void mediaQueryList() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaQueryList");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(407, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:408:2: ( mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:408:4: mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*
            {
            dbg.location(408,4);
            pushFollow(FOLLOW_mediaQuery_in_mediaQueryList897);
            mediaQuery();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(408,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:408:15: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*
            try { dbg.enterSubRule(44);

            loop44:
            do {
                int alt44=2;
                try { dbg.enterDecision(44, decisionCanBacktrack[44]);

                try {
                    isCyclicDecision = true;
                    alt44 = dfa44.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(44);}

                switch (alt44) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:408:17: ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery
            	    {
            	    dbg.location(408,31);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:408:31: ( ws )?
            	    int alt42=2;
            	    try { dbg.enterSubRule(42);
            	    try { dbg.enterDecision(42, decisionCanBacktrack[42]);

            	    int LA42_0 = input.LA(1);

            	    if ( ((LA42_0>=WS && LA42_0<=COMMENT)) ) {
            	        alt42=1;
            	    }
            	    } finally {dbg.exitDecision(42);}

            	    switch (alt42) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:408:31: ws
            	            {
            	            dbg.location(408,31);
            	            pushFollow(FOLLOW_ws_in_mediaQueryList909);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(42);}

            	    dbg.location(408,35);
            	    match(input,COMMA,FOLLOW_COMMA_in_mediaQueryList912); if (state.failed) return ;
            	    dbg.location(408,41);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:408:41: ( ws )?
            	    int alt43=2;
            	    try { dbg.enterSubRule(43);
            	    try { dbg.enterDecision(43, decisionCanBacktrack[43]);

            	    int LA43_0 = input.LA(1);

            	    if ( ((LA43_0>=WS && LA43_0<=COMMENT)) ) {
            	        alt43=1;
            	    }
            	    } finally {dbg.exitDecision(43);}

            	    switch (alt43) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:408:41: ws
            	            {
            	            dbg.location(408,41);
            	            pushFollow(FOLLOW_ws_in_mediaQueryList914);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(43);}

            	    dbg.location(408,45);
            	    pushFollow(FOLLOW_mediaQuery_in_mediaQueryList917);
            	    mediaQuery();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);
            } finally {dbg.exitSubRule(44);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(409, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaQueryList");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaQueryList"


    // $ANTLR start "mediaQuery"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:1: mediaQuery : ( ( mediaQueryOperator ( ws )? )? mediaType ( ( ws )? AND ( ws )? mediaExpression )* | mediaExpression ( ( ws )? AND ( ws )? mediaExpression )* | {...}? cp_variable );
    public final void mediaQuery() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaQuery");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(411, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:412:2: ( ( mediaQueryOperator ( ws )? )? mediaType ( ( ws )? AND ( ws )? mediaExpression )* | mediaExpression ( ( ws )? AND ( ws )? mediaExpression )* | {...}? cp_variable )
            int alt53=3;
            try { dbg.enterDecision(53, decisionCanBacktrack[53]);

            switch ( input.LA(1) ) {
            case IDENT:
            case ONLY:
            case NOT:
            case GEN:
            case HASH_SYMBOL:
                {
                alt53=1;
                }
                break;
            case LPAREN:
                {
                alt53=2;
                }
                break;
            case NAMESPACE_SYM:
            case CHARSET_SYM:
            case IMPORT_SYM:
            case MEDIA_SYM:
            case AT_IDENT:
            case MOZ_DOCUMENT_SYM:
            case WEBKIT_KEYFRAMES_SYM:
            case PAGE_SYM:
            case COUNTER_STYLE_SYM:
            case FONT_FACE_SYM:
            case TOPLEFTCORNER_SYM:
            case TOPLEFT_SYM:
            case TOPCENTER_SYM:
            case TOPRIGHT_SYM:
            case TOPRIGHTCORNER_SYM:
            case BOTTOMLEFTCORNER_SYM:
            case BOTTOMLEFT_SYM:
            case BOTTOMCENTER_SYM:
            case BOTTOMRIGHT_SYM:
            case BOTTOMRIGHTCORNER_SYM:
            case LEFTTOP_SYM:
            case LEFTMIDDLE_SYM:
            case LEFTBOTTOM_SYM:
            case RIGHTTOP_SYM:
            case RIGHTMIDDLE_SYM:
            case RIGHTBOTTOM_SYM:
            case SASS_VAR:
            case SASS_CONTENT:
            case SASS_MIXIN:
            case SASS_INCLUDE:
            case SASS_EXTEND:
            case SASS_DEBUG:
            case SASS_WARN:
            case SASS_IF:
            case SASS_ELSE:
            case SASS_FOR:
            case SASS_FUNCTION:
            case SASS_RETURN:
            case SASS_EACH:
            case SASS_WHILE:
                {
                alt53=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(53);}

            switch (alt53) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:5: ( mediaQueryOperator ( ws )? )? mediaType ( ( ws )? AND ( ws )? mediaExpression )*
                    {
                    dbg.location(413,5);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:5: ( mediaQueryOperator ( ws )? )?
                    int alt46=2;
                    try { dbg.enterSubRule(46);
                    try { dbg.enterDecision(46, decisionCanBacktrack[46]);

                    int LA46_0 = input.LA(1);

                    if ( ((LA46_0>=ONLY && LA46_0<=NOT)) ) {
                        alt46=1;
                    }
                    } finally {dbg.exitDecision(46);}

                    switch (alt46) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:6: mediaQueryOperator ( ws )?
                            {
                            dbg.location(413,6);
                            pushFollow(FOLLOW_mediaQueryOperator_in_mediaQuery938);
                            mediaQueryOperator();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(413,25);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:25: ( ws )?
                            int alt45=2;
                            try { dbg.enterSubRule(45);
                            try { dbg.enterDecision(45, decisionCanBacktrack[45]);

                            int LA45_0 = input.LA(1);

                            if ( ((LA45_0>=WS && LA45_0<=COMMENT)) ) {
                                alt45=1;
                            }
                            } finally {dbg.exitDecision(45);}

                            switch (alt45) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:25: ws
                                    {
                                    dbg.location(413,25);
                                    pushFollow(FOLLOW_ws_in_mediaQuery940);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(45);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(46);}

                    dbg.location(413,33);
                    pushFollow(FOLLOW_mediaType_in_mediaQuery947);
                    mediaType();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(413,43);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:43: ( ( ws )? AND ( ws )? mediaExpression )*
                    try { dbg.enterSubRule(49);

                    loop49:
                    do {
                        int alt49=2;
                        try { dbg.enterDecision(49, decisionCanBacktrack[49]);

                        try {
                            isCyclicDecision = true;
                            alt49 = dfa49.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(49);}

                        switch (alt49) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:45: ( ws )? AND ( ws )? mediaExpression
                    	    {
                    	    dbg.location(413,45);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:45: ( ws )?
                    	    int alt47=2;
                    	    try { dbg.enterSubRule(47);
                    	    try { dbg.enterDecision(47, decisionCanBacktrack[47]);

                    	    int LA47_0 = input.LA(1);

                    	    if ( ((LA47_0>=WS && LA47_0<=COMMENT)) ) {
                    	        alt47=1;
                    	    }
                    	    } finally {dbg.exitDecision(47);}

                    	    switch (alt47) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:45: ws
                    	            {
                    	            dbg.location(413,45);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery951);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(47);}

                    	    dbg.location(413,49);
                    	    match(input,AND,FOLLOW_AND_in_mediaQuery954); if (state.failed) return ;
                    	    dbg.location(413,53);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:53: ( ws )?
                    	    int alt48=2;
                    	    try { dbg.enterSubRule(48);
                    	    try { dbg.enterDecision(48, decisionCanBacktrack[48]);

                    	    int LA48_0 = input.LA(1);

                    	    if ( ((LA48_0>=WS && LA48_0<=COMMENT)) ) {
                    	        alt48=1;
                    	    }
                    	    } finally {dbg.exitDecision(48);}

                    	    switch (alt48) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:53: ws
                    	            {
                    	            dbg.location(413,53);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery956);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(48);}

                    	    dbg.location(413,57);
                    	    pushFollow(FOLLOW_mediaExpression_in_mediaQuery959);
                    	    mediaExpression();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop49;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(49);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:7: mediaExpression ( ( ws )? AND ( ws )? mediaExpression )*
                    {
                    dbg.location(414,7);
                    pushFollow(FOLLOW_mediaExpression_in_mediaQuery970);
                    mediaExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(414,23);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:23: ( ( ws )? AND ( ws )? mediaExpression )*
                    try { dbg.enterSubRule(52);

                    loop52:
                    do {
                        int alt52=2;
                        try { dbg.enterDecision(52, decisionCanBacktrack[52]);

                        try {
                            isCyclicDecision = true;
                            alt52 = dfa52.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(52);}

                        switch (alt52) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:25: ( ws )? AND ( ws )? mediaExpression
                    	    {
                    	    dbg.location(414,25);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:25: ( ws )?
                    	    int alt50=2;
                    	    try { dbg.enterSubRule(50);
                    	    try { dbg.enterDecision(50, decisionCanBacktrack[50]);

                    	    int LA50_0 = input.LA(1);

                    	    if ( ((LA50_0>=WS && LA50_0<=COMMENT)) ) {
                    	        alt50=1;
                    	    }
                    	    } finally {dbg.exitDecision(50);}

                    	    switch (alt50) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:25: ws
                    	            {
                    	            dbg.location(414,25);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery974);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(50);}

                    	    dbg.location(414,29);
                    	    match(input,AND,FOLLOW_AND_in_mediaQuery977); if (state.failed) return ;
                    	    dbg.location(414,33);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:33: ( ws )?
                    	    int alt51=2;
                    	    try { dbg.enterSubRule(51);
                    	    try { dbg.enterDecision(51, decisionCanBacktrack[51]);

                    	    int LA51_0 = input.LA(1);

                    	    if ( ((LA51_0>=WS && LA51_0<=COMMENT)) ) {
                    	        alt51=1;
                    	    }
                    	    } finally {dbg.exitDecision(51);}

                    	    switch (alt51) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:33: ws
                    	            {
                    	            dbg.location(414,33);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery979);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(51);}

                    	    dbg.location(414,37);
                    	    pushFollow(FOLLOW_mediaExpression_in_mediaQuery982);
                    	    mediaExpression();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop52;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(52);}


                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:415:7: {...}? cp_variable
                    {
                    dbg.location(415,7);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaQuery", "isLessSource()");
                    }
                    dbg.location(415,25);
                    pushFollow(FOLLOW_cp_variable_in_mediaQuery995);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(416, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaQuery");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaQuery"


    // $ANTLR start "mediaQueryOperator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:418:1: mediaQueryOperator : ( ONLY | NOT );
    public final void mediaQueryOperator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaQueryOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(418, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:419:3: ( ONLY | NOT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(419,3);
            if ( (input.LA(1)>=ONLY && input.LA(1)<=NOT) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(420, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaQueryOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaQueryOperator"


    // $ANTLR start "mediaType"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:1: mediaType : ( IDENT | GEN | {...}? sass_interpolation_expression_var );
    public final void mediaType() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaType");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(422, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:2: ( IDENT | GEN | {...}? sass_interpolation_expression_var )
            int alt54=3;
            try { dbg.enterDecision(54, decisionCanBacktrack[54]);

            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt54=1;
                }
                break;
            case GEN:
                {
                alt54=2;
                }
                break;
            case HASH_SYMBOL:
                {
                alt54=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(54);}

            switch (alt54) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:4: IDENT
                    {
                    dbg.location(423,4);
                    match(input,IDENT,FOLLOW_IDENT_in_mediaType1028); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:12: GEN
                    {
                    dbg.location(423,12);
                    match(input,GEN,FOLLOW_GEN_in_mediaType1032); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:18: {...}? sass_interpolation_expression_var
                    {
                    dbg.location(423,18);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaType", "isCssPreprocessorSource()");
                    }
                    dbg.location(423,47);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaType1038);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(424, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaType");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaType"


    // $ANTLR start "mediaExpression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:1: mediaExpression : LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN ;
    public final void mediaExpression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(426, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:427:5: ( LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:428:5: LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN
            {
            dbg.location(428,5);
            match(input,LPAREN,FOLLOW_LPAREN_in_mediaExpression1058); if (state.failed) return ;
            dbg.location(428,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:428:12: ( ws )?
            int alt55=2;
            try { dbg.enterSubRule(55);
            try { dbg.enterDecision(55, decisionCanBacktrack[55]);

            int LA55_0 = input.LA(1);

            if ( ((LA55_0>=WS && LA55_0<=COMMENT)) ) {
                alt55=1;
            }
            } finally {dbg.exitDecision(55);}

            switch (alt55) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:428:12: ws
                    {
                    dbg.location(428,12);
                    pushFollow(FOLLOW_ws_in_mediaExpression1060);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(55);}

            dbg.location(428,16);
            pushFollow(FOLLOW_mediaFeature_in_mediaExpression1063);
            mediaFeature();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(428,29);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:428:29: ( mediaFeatureValue )?
            int alt56=2;
            try { dbg.enterSubRule(56);
            try { dbg.enterDecision(56, decisionCanBacktrack[56]);

            try {
                isCyclicDecision = true;
                alt56 = dfa56.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(56);}

            switch (alt56) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:428:29: mediaFeatureValue
                    {
                    dbg.location(428,29);
                    pushFollow(FOLLOW_mediaFeatureValue_in_mediaExpression1065);
                    mediaFeatureValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(56);}

            dbg.location(428,48);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:428:48: ( ws )?
            int alt57=2;
            try { dbg.enterSubRule(57);
            try { dbg.enterDecision(57, decisionCanBacktrack[57]);

            int LA57_0 = input.LA(1);

            if ( ((LA57_0>=WS && LA57_0<=COMMENT)) ) {
                alt57=1;
            }
            } finally {dbg.exitDecision(57);}

            switch (alt57) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:428:48: ws
                    {
                    dbg.location(428,48);
                    pushFollow(FOLLOW_ws_in_mediaExpression1068);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(57);}

            dbg.location(428,52);
            match(input,RPAREN,FOLLOW_RPAREN_in_mediaExpression1071); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(429, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaExpression"


    // $ANTLR start "mediaFeatureValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:1: mediaFeatureValue : ( ws )? COLON ( ws )? ({...}? cp_expression | expression ) ;
    public final void mediaFeatureValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaFeatureValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(431, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:432:5: ( ( ws )? COLON ( ws )? ({...}? cp_expression | expression ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:433:5: ( ws )? COLON ( ws )? ({...}? cp_expression | expression )
            {
            dbg.location(433,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:433:5: ( ws )?
            int alt58=2;
            try { dbg.enterSubRule(58);
            try { dbg.enterDecision(58, decisionCanBacktrack[58]);

            int LA58_0 = input.LA(1);

            if ( ((LA58_0>=WS && LA58_0<=COMMENT)) ) {
                alt58=1;
            }
            } finally {dbg.exitDecision(58);}

            switch (alt58) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:433:5: ws
                    {
                    dbg.location(433,5);
                    pushFollow(FOLLOW_ws_in_mediaFeatureValue1096);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(58);}

            dbg.location(433,9);
            match(input,COLON,FOLLOW_COLON_in_mediaFeatureValue1099); if (state.failed) return ;
            dbg.location(433,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:433:15: ( ws )?
            int alt59=2;
            try { dbg.enterSubRule(59);
            try { dbg.enterDecision(59, decisionCanBacktrack[59]);

            int LA59_0 = input.LA(1);

            if ( ((LA59_0>=WS && LA59_0<=COMMENT)) ) {
                alt59=1;
            }
            } finally {dbg.exitDecision(59);}

            switch (alt59) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:433:15: ws
                    {
                    dbg.location(433,15);
                    pushFollow(FOLLOW_ws_in_mediaFeatureValue1101);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(59);}

            dbg.location(434,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:434:5: ({...}? cp_expression | expression )
            int alt60=2;
            try { dbg.enterSubRule(60);
            try { dbg.enterDecision(60, decisionCanBacktrack[60]);

            try {
                isCyclicDecision = true;
                alt60 = dfa60.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(60);}

            switch (alt60) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:435:9: {...}? cp_expression
                    {
                    dbg.location(435,9);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaFeatureValue", "isCssPreprocessorSource()");
                    }
                    dbg.location(435,38);
                    pushFollow(FOLLOW_cp_expression_in_mediaFeatureValue1121);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:437:9: expression
                    {
                    dbg.location(437,9);
                    pushFollow(FOLLOW_expression_in_mediaFeatureValue1141);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(60);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(439, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaFeatureValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaFeatureValue"


    // $ANTLR start "mediaFeature"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:441:1: mediaFeature : ( IDENT | GEN | {...}? ( cp_variable | sass_interpolation_expression_var ) );
    public final void mediaFeature() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaFeature");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(441, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:442:2: ( IDENT | GEN | {...}? ( cp_variable | sass_interpolation_expression_var ) )
            int alt62=3;
            try { dbg.enterDecision(62, decisionCanBacktrack[62]);

            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt62=1;
                }
                break;
            case GEN:
                {
                alt62=2;
                }
                break;
            case NAMESPACE_SYM:
            case CHARSET_SYM:
            case IMPORT_SYM:
            case MEDIA_SYM:
            case AT_IDENT:
            case MOZ_DOCUMENT_SYM:
            case WEBKIT_KEYFRAMES_SYM:
            case PAGE_SYM:
            case COUNTER_STYLE_SYM:
            case FONT_FACE_SYM:
            case TOPLEFTCORNER_SYM:
            case TOPLEFT_SYM:
            case TOPCENTER_SYM:
            case TOPRIGHT_SYM:
            case TOPRIGHTCORNER_SYM:
            case BOTTOMLEFTCORNER_SYM:
            case BOTTOMLEFT_SYM:
            case BOTTOMCENTER_SYM:
            case BOTTOMRIGHT_SYM:
            case BOTTOMRIGHTCORNER_SYM:
            case LEFTTOP_SYM:
            case LEFTMIDDLE_SYM:
            case LEFTBOTTOM_SYM:
            case RIGHTTOP_SYM:
            case RIGHTMIDDLE_SYM:
            case RIGHTBOTTOM_SYM:
            case HASH_SYMBOL:
            case SASS_VAR:
            case SASS_CONTENT:
            case SASS_MIXIN:
            case SASS_INCLUDE:
            case SASS_EXTEND:
            case SASS_DEBUG:
            case SASS_WARN:
            case SASS_IF:
            case SASS_ELSE:
            case SASS_FOR:
            case SASS_FUNCTION:
            case SASS_RETURN:
            case SASS_EACH:
            case SASS_WHILE:
                {
                alt62=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(62);}

            switch (alt62) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:442:4: IDENT
                    {
                    dbg.location(442,4);
                    match(input,IDENT,FOLLOW_IDENT_in_mediaFeature1162); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:442:12: GEN
                    {
                    dbg.location(442,12);
                    match(input,GEN,FOLLOW_GEN_in_mediaFeature1166); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:442:18: {...}? ( cp_variable | sass_interpolation_expression_var )
                    {
                    dbg.location(442,18);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaFeature", "isCssPreprocessorSource()");
                    }
                    dbg.location(442,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:442:47: ( cp_variable | sass_interpolation_expression_var )
                    int alt61=2;
                    try { dbg.enterSubRule(61);
                    try { dbg.enterDecision(61, decisionCanBacktrack[61]);

                    int LA61_0 = input.LA(1);

                    if ( (LA61_0==NAMESPACE_SYM||(LA61_0>=CHARSET_SYM && LA61_0<=IMPORT_SYM)||LA61_0==MEDIA_SYM||(LA61_0>=AT_IDENT && LA61_0<=MOZ_DOCUMENT_SYM)||LA61_0==WEBKIT_KEYFRAMES_SYM||(LA61_0>=PAGE_SYM && LA61_0<=RIGHTBOTTOM_SYM)||LA61_0==SASS_VAR||(LA61_0>=SASS_CONTENT && LA61_0<=SASS_WHILE)) ) {
                        alt61=1;
                    }
                    else if ( (LA61_0==HASH_SYMBOL) ) {
                        alt61=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 61, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(61);}

                    switch (alt61) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:442:49: cp_variable
                            {
                            dbg.location(442,49);
                            pushFollow(FOLLOW_cp_variable_in_mediaFeature1174);
                            cp_variable();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:442:63: sass_interpolation_expression_var
                            {
                            dbg.location(442,63);
                            pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaFeature1178);
                            sass_interpolation_expression_var();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(61);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(443, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaFeature");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaFeature"


    // $ANTLR start "body"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:2: body : ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
    public final void body() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "body");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(445, 2);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:5: ( ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:447:5: ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            {
            dbg.location(447,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:447:5: ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            int cnt67=0;
            try { dbg.enterSubRule(67);

            loop67:
            do {
                int alt67=3;
                try { dbg.enterDecision(67, decisionCanBacktrack[67]);

                int LA67_0 = input.LA(1);

                if ( (LA67_0==NAMESPACE_SYM||LA67_0==IDENT||(LA67_0>=CHARSET_SYM && LA67_0<=MEDIA_SYM)||LA67_0==GEN||(LA67_0>=COLON && LA67_0<=MOZ_DOCUMENT_SYM)||LA67_0==WEBKIT_KEYFRAMES_SYM||(LA67_0>=PAGE_SYM && LA67_0<=RIGHTBOTTOM_SYM)||(LA67_0>=MINUS && LA67_0<=PIPE)||LA67_0==LESS_AND||(LA67_0>=RBRACKET && LA67_0<=SASS_VAR)||(LA67_0>=SASS_CONTENT && LA67_0<=SASS_WHILE)||LA67_0==AT_SIGN) ) {
                    alt67=1;
                }
                else if ( (LA67_0==SEMI) ) {
                    alt67=2;
                }


                } finally {dbg.exitDecision(67);}

                switch (alt67) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:10: ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    {
            	    dbg.location(448,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:10: ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:12: bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
            	    {
            	    dbg.location(448,12);
            	    pushFollow(FOLLOW_bodyItem_in_body1215);
            	    bodyItem();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(448,21);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:21: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
            	    int alt64=2;
            	    try { dbg.enterSubRule(64);
            	    try { dbg.enterDecision(64, decisionCanBacktrack[64]);

            	    try {
            	        isCyclicDecision = true;
            	        alt64 = dfa64.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(64);}

            	    switch (alt64) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:22: ( ( ws )? SEMI )=> ( ws )? SEMI
            	            {
            	            dbg.location(448,34);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:34: ( ws )?
            	            int alt63=2;
            	            try { dbg.enterSubRule(63);
            	            try { dbg.enterDecision(63, decisionCanBacktrack[63]);

            	            int LA63_0 = input.LA(1);

            	            if ( ((LA63_0>=WS && LA63_0<=COMMENT)) ) {
            	                alt63=1;
            	            }
            	            } finally {dbg.exitDecision(63);}

            	            switch (alt63) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:34: ws
            	                    {
            	                    dbg.location(448,34);
            	                    pushFollow(FOLLOW_ws_in_body1225);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(63);}

            	            dbg.location(448,38);
            	            match(input,SEMI,FOLLOW_SEMI_in_body1228); if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(64);}

            	    dbg.location(448,45);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:45: ( ws )?
            	    int alt65=2;
            	    try { dbg.enterSubRule(65);
            	    try { dbg.enterDecision(65, decisionCanBacktrack[65]);

            	    int LA65_0 = input.LA(1);

            	    if ( ((LA65_0>=WS && LA65_0<=COMMENT)) ) {
            	        alt65=1;
            	    }
            	    } finally {dbg.exitDecision(65);}

            	    switch (alt65) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:45: ws
            	            {
            	            dbg.location(448,45);
            	            pushFollow(FOLLOW_ws_in_body1232);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(65);}


            	    }


            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:450:10: ( SEMI ( ws )? )
            	    {
            	    dbg.location(450,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:450:10: ( SEMI ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:450:12: SEMI ( ws )?
            	    {
            	    dbg.location(450,12);
            	    match(input,SEMI,FOLLOW_SEMI_in_body1259); if (state.failed) return ;
            	    dbg.location(450,17);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:450:17: ( ws )?
            	    int alt66=2;
            	    try { dbg.enterSubRule(66);
            	    try { dbg.enterDecision(66, decisionCanBacktrack[66]);

            	    int LA66_0 = input.LA(1);

            	    if ( ((LA66_0>=WS && LA66_0<=COMMENT)) ) {
            	        alt66=1;
            	    }
            	    } finally {dbg.exitDecision(66);}

            	    switch (alt66) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:450:17: ws
            	            {
            	            dbg.location(450,17);
            	            pushFollow(FOLLOW_ws_in_body1261);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(66);}


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt67 >= 1 ) break loop67;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(67, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt67++;
            } while (true);
            } finally {dbg.exitSubRule(67);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(452, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "body");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "body"


    // $ANTLR start "bodyItem"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:1: bodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call | ( cp_mixin_call )=>{...}? cp_mixin_call | rule | at_rule | {...}? cp_variable_declaration | {...}? importItem | {...}? sass_debug | {...}? sass_control | {...}? sass_function_declaration );
    public final void bodyItem() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "bodyItem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(454, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:455:5: ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call | ( cp_mixin_call )=>{...}? cp_mixin_call | rule | at_rule | {...}? cp_variable_declaration | {...}? importItem | {...}? sass_debug | {...}? sass_control | {...}? sass_function_declaration )
            int alt68=10;
            try { dbg.enterDecision(68, decisionCanBacktrack[68]);

            try {
                isCyclicDecision = true;
                alt68 = dfa68.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(68);}

            switch (alt68) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:456:9: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration
                    {
                    dbg.location(456,96);
                    pushFollow(FOLLOW_cp_mixin_declaration_in_bodyItem1335);
                    cp_mixin_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:458:11: ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call
                    {
                    dbg.location(458,38);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isLessSource()");
                    }
                    dbg.location(458,56);
                    pushFollow(FOLLOW_cp_mixin_call_in_bodyItem1368);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:11: ( cp_mixin_call )=>{...}? cp_mixin_call
                    {
                    dbg.location(459,29);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(459,47);
                    pushFollow(FOLLOW_cp_mixin_call_in_bodyItem1387);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:460:8: rule
                    {
                    dbg.location(460,8);
                    pushFollow(FOLLOW_rule_in_bodyItem1396);
                    rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:461:11: at_rule
                    {
                    dbg.location(461,11);
                    pushFollow(FOLLOW_at_rule_in_bodyItem1408);
                    at_rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:11: {...}? cp_variable_declaration
                    {
                    dbg.location(462,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isCssPreprocessorSource()");
                    }
                    dbg.location(462,40);
                    pushFollow(FOLLOW_cp_variable_declaration_in_bodyItem1422);
                    cp_variable_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:464:11: {...}? importItem
                    {
                    dbg.location(464,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isCssPreprocessorSource()");
                    }
                    dbg.location(464,40);
                    pushFollow(FOLLOW_importItem_in_bodyItem1445);
                    importItem();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:465:11: {...}? sass_debug
                    {
                    dbg.location(465,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(465,29);
                    pushFollow(FOLLOW_sass_debug_in_bodyItem1459);
                    sass_debug();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:466:11: {...}? sass_control
                    {
                    dbg.location(466,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(466,29);
                    pushFollow(FOLLOW_sass_control_in_bodyItem1473);
                    sass_control();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:467:11: {...}? sass_function_declaration
                    {
                    dbg.location(467,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(467,29);
                    pushFollow(FOLLOW_sass_function_declaration_in_bodyItem1487);
                    sass_function_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(NL)); 
                
        }
        finally {
        }
        dbg.location(468, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bodyItem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "bodyItem"


    // $ANTLR start "at_rule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:473:1: at_rule : ( media | page | counterStyle | fontFace | vendorAtRule );
    public final void at_rule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "at_rule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(473, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:5: ( media | page | counterStyle | fontFace | vendorAtRule )
            int alt69=5;
            try { dbg.enterDecision(69, decisionCanBacktrack[69]);

            switch ( input.LA(1) ) {
            case MEDIA_SYM:
                {
                alt69=1;
                }
                break;
            case PAGE_SYM:
                {
                alt69=2;
                }
                break;
            case COUNTER_STYLE_SYM:
                {
                alt69=3;
                }
                break;
            case FONT_FACE_SYM:
                {
                alt69=4;
                }
                break;
            case AT_IDENT:
            case MOZ_DOCUMENT_SYM:
            case WEBKIT_KEYFRAMES_SYM:
                {
                alt69=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(69);}

            switch (alt69) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:475:5: media
                    {
                    dbg.location(475,5);
                    pushFollow(FOLLOW_media_in_at_rule1517);
                    media();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:476:7: page
                    {
                    dbg.location(476,7);
                    pushFollow(FOLLOW_page_in_at_rule1525);
                    page();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:477:7: counterStyle
                    {
                    dbg.location(477,7);
                    pushFollow(FOLLOW_counterStyle_in_at_rule1533);
                    counterStyle();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:478:7: fontFace
                    {
                    dbg.location(478,7);
                    pushFollow(FOLLOW_fontFace_in_at_rule1541);
                    fontFace();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:479:7: vendorAtRule
                    {
                    dbg.location(479,7);
                    pushFollow(FOLLOW_vendorAtRule_in_at_rule1549);
                    vendorAtRule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(480, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "at_rule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "at_rule"


    // $ANTLR start "vendorAtRule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:1: vendorAtRule : ( moz_document | webkitKeyframes | generic_at_rule );
    public final void vendorAtRule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "vendorAtRule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(482, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:483:1: ( moz_document | webkitKeyframes | generic_at_rule )
            int alt70=3;
            try { dbg.enterDecision(70, decisionCanBacktrack[70]);

            switch ( input.LA(1) ) {
            case MOZ_DOCUMENT_SYM:
                {
                alt70=1;
                }
                break;
            case WEBKIT_KEYFRAMES_SYM:
                {
                alt70=2;
                }
                break;
            case AT_IDENT:
                {
                alt70=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(70);}

            switch (alt70) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:483:3: moz_document
                    {
                    dbg.location(483,3);
                    pushFollow(FOLLOW_moz_document_in_vendorAtRule1566);
                    moz_document();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:483:18: webkitKeyframes
                    {
                    dbg.location(483,18);
                    pushFollow(FOLLOW_webkitKeyframes_in_vendorAtRule1570);
                    webkitKeyframes();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:483:36: generic_at_rule
                    {
                    dbg.location(483,36);
                    pushFollow(FOLLOW_generic_at_rule_in_vendorAtRule1574);
                    generic_at_rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(483, 51);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vendorAtRule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "vendorAtRule"


    // $ANTLR start "atRuleId"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:485:1: atRuleId : ( IDENT | STRING );
    public final void atRuleId() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "atRuleId");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(485, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:2: ( IDENT | STRING )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(486,2);
            if ( (input.LA(1)>=IDENT && input.LA(1)<=STRING) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(488, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "atRuleId");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "atRuleId"


    // $ANTLR start "generic_at_rule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:490:1: generic_at_rule : AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE ;
    public final void generic_at_rule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "generic_at_rule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(490, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:491:5: ( AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:491:7: AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE
            {
            dbg.location(491,7);
            match(input,AT_IDENT,FOLLOW_AT_IDENT_in_generic_at_rule1610); if (state.failed) return ;
            dbg.location(491,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:491:16: ( ws )?
            int alt71=2;
            try { dbg.enterSubRule(71);
            try { dbg.enterDecision(71, decisionCanBacktrack[71]);

            int LA71_0 = input.LA(1);

            if ( ((LA71_0>=WS && LA71_0<=COMMENT)) ) {
                alt71=1;
            }
            } finally {dbg.exitDecision(71);}

            switch (alt71) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:491:16: ws
                    {
                    dbg.location(491,16);
                    pushFollow(FOLLOW_ws_in_generic_at_rule1612);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(71);}

            dbg.location(491,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:491:20: ( atRuleId ( ws )? )?
            int alt73=2;
            try { dbg.enterSubRule(73);
            try { dbg.enterDecision(73, decisionCanBacktrack[73]);

            int LA73_0 = input.LA(1);

            if ( ((LA73_0>=IDENT && LA73_0<=STRING)) ) {
                alt73=1;
            }
            } finally {dbg.exitDecision(73);}

            switch (alt73) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:491:22: atRuleId ( ws )?
                    {
                    dbg.location(491,22);
                    pushFollow(FOLLOW_atRuleId_in_generic_at_rule1617);
                    atRuleId();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(491,31);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:491:31: ( ws )?
                    int alt72=2;
                    try { dbg.enterSubRule(72);
                    try { dbg.enterDecision(72, decisionCanBacktrack[72]);

                    int LA72_0 = input.LA(1);

                    if ( ((LA72_0>=WS && LA72_0<=COMMENT)) ) {
                        alt72=1;
                    }
                    } finally {dbg.exitDecision(72);}

                    switch (alt72) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:491:31: ws
                            {
                            dbg.location(491,31);
                            pushFollow(FOLLOW_ws_in_generic_at_rule1619);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(72);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(73);}

            dbg.location(492,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_generic_at_rule1634); if (state.failed) return ;
            dbg.location(493,10);
            pushFollow(FOLLOW_syncTo_RBRACE_in_generic_at_rule1646);
            syncTo_RBRACE();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(494,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_generic_at_rule1656); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(495, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "generic_at_rule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "generic_at_rule"


    // $ANTLR start "moz_document"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:496:1: moz_document : MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE ;
    public final void moz_document() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "moz_document");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(496, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:497:2: ( MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:498:2: MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE
            {
            dbg.location(498,2);
            match(input,MOZ_DOCUMENT_SYM,FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document1672); if (state.failed) return ;
            dbg.location(498,19);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:498:19: ( ws )?
            int alt74=2;
            try { dbg.enterSubRule(74);
            try { dbg.enterDecision(74, decisionCanBacktrack[74]);

            int LA74_0 = input.LA(1);

            if ( ((LA74_0>=WS && LA74_0<=COMMENT)) ) {
                alt74=1;
            }
            } finally {dbg.exitDecision(74);}

            switch (alt74) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:498:19: ws
                    {
                    dbg.location(498,19);
                    pushFollow(FOLLOW_ws_in_moz_document1674);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(74);}

            dbg.location(498,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:498:23: ( moz_document_function ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:498:25: moz_document_function ( ws )?
            {
            dbg.location(498,25);
            pushFollow(FOLLOW_moz_document_function_in_moz_document1679);
            moz_document_function();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(498,47);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:498:47: ( ws )?
            int alt75=2;
            try { dbg.enterSubRule(75);
            try { dbg.enterDecision(75, decisionCanBacktrack[75]);

            int LA75_0 = input.LA(1);

            if ( ((LA75_0>=WS && LA75_0<=COMMENT)) ) {
                alt75=1;
            }
            } finally {dbg.exitDecision(75);}

            switch (alt75) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:498:47: ws
                    {
                    dbg.location(498,47);
                    pushFollow(FOLLOW_ws_in_moz_document1681);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(75);}


            }

            dbg.location(498,52);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:498:52: ( COMMA ( ws )? moz_document_function ( ws )? )*
            try { dbg.enterSubRule(78);

            loop78:
            do {
                int alt78=2;
                try { dbg.enterDecision(78, decisionCanBacktrack[78]);

                int LA78_0 = input.LA(1);

                if ( (LA78_0==COMMA) ) {
                    alt78=1;
                }


                } finally {dbg.exitDecision(78);}

                switch (alt78) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:498:54: COMMA ( ws )? moz_document_function ( ws )?
            	    {
            	    dbg.location(498,54);
            	    match(input,COMMA,FOLLOW_COMMA_in_moz_document1687); if (state.failed) return ;
            	    dbg.location(498,60);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:498:60: ( ws )?
            	    int alt76=2;
            	    try { dbg.enterSubRule(76);
            	    try { dbg.enterDecision(76, decisionCanBacktrack[76]);

            	    int LA76_0 = input.LA(1);

            	    if ( ((LA76_0>=WS && LA76_0<=COMMENT)) ) {
            	        alt76=1;
            	    }
            	    } finally {dbg.exitDecision(76);}

            	    switch (alt76) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:498:60: ws
            	            {
            	            dbg.location(498,60);
            	            pushFollow(FOLLOW_ws_in_moz_document1689);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(76);}

            	    dbg.location(498,64);
            	    pushFollow(FOLLOW_moz_document_function_in_moz_document1692);
            	    moz_document_function();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(498,86);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:498:86: ( ws )?
            	    int alt77=2;
            	    try { dbg.enterSubRule(77);
            	    try { dbg.enterDecision(77, decisionCanBacktrack[77]);

            	    int LA77_0 = input.LA(1);

            	    if ( ((LA77_0>=WS && LA77_0<=COMMENT)) ) {
            	        alt77=1;
            	    }
            	    } finally {dbg.exitDecision(77);}

            	    switch (alt77) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:498:86: ws
            	            {
            	            dbg.location(498,86);
            	            pushFollow(FOLLOW_ws_in_moz_document1694);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(77);}


            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);
            } finally {dbg.exitSubRule(78);}

            dbg.location(499,2);
            match(input,LBRACE,FOLLOW_LBRACE_in_moz_document1701); if (state.failed) return ;
            dbg.location(499,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:499:9: ( ws )?
            int alt79=2;
            try { dbg.enterSubRule(79);
            try { dbg.enterDecision(79, decisionCanBacktrack[79]);

            int LA79_0 = input.LA(1);

            if ( ((LA79_0>=WS && LA79_0<=COMMENT)) ) {
                alt79=1;
            }
            } finally {dbg.exitDecision(79);}

            switch (alt79) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:499:9: ws
                    {
                    dbg.location(499,9);
                    pushFollow(FOLLOW_ws_in_moz_document1703);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(79);}

            dbg.location(500,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:500:3: ( body )?
            int alt80=2;
            try { dbg.enterSubRule(80);
            try { dbg.enterDecision(80, decisionCanBacktrack[80]);

            int LA80_0 = input.LA(1);

            if ( ((LA80_0>=NAMESPACE_SYM && LA80_0<=IDENT)||(LA80_0>=CHARSET_SYM && LA80_0<=MEDIA_SYM)||LA80_0==GEN||(LA80_0>=COLON && LA80_0<=MOZ_DOCUMENT_SYM)||LA80_0==WEBKIT_KEYFRAMES_SYM||(LA80_0>=PAGE_SYM && LA80_0<=RIGHTBOTTOM_SYM)||(LA80_0>=MINUS && LA80_0<=PIPE)||LA80_0==LESS_AND||(LA80_0>=RBRACKET && LA80_0<=SASS_VAR)||(LA80_0>=SASS_CONTENT && LA80_0<=SASS_WHILE)||LA80_0==AT_SIGN) ) {
                alt80=1;
            }
            } finally {dbg.exitDecision(80);}

            switch (alt80) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:500:3: body
                    {
                    dbg.location(500,3);
                    pushFollow(FOLLOW_body_in_moz_document1708);
                    body();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(80);}

            dbg.location(501,2);
            match(input,RBRACE,FOLLOW_RBRACE_in_moz_document1713); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(502, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moz_document");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "moz_document"


    // $ANTLR start "moz_document_function"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:504:1: moz_document_function : ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP );
    public final void moz_document_function() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "moz_document_function");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(504, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:505:2: ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(505,2);
            if ( input.LA(1)==URI||(input.LA(1)>=MOZ_URL_PREFIX && input.LA(1)<=MOZ_REGEXP) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(507, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moz_document_function");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "moz_document_function"


    // $ANTLR start "webkitKeyframes"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:510:1: webkitKeyframes : WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE ;
    public final void webkitKeyframes() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "webkitKeyframes");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(510, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:511:2: ( WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:512:2: WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE
            {
            dbg.location(512,2);
            match(input,WEBKIT_KEYFRAMES_SYM,FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes1754); if (state.failed) return ;
            dbg.location(512,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:512:23: ( ws )?
            int alt81=2;
            try { dbg.enterSubRule(81);
            try { dbg.enterDecision(81, decisionCanBacktrack[81]);

            int LA81_0 = input.LA(1);

            if ( ((LA81_0>=WS && LA81_0<=COMMENT)) ) {
                alt81=1;
            }
            } finally {dbg.exitDecision(81);}

            switch (alt81) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:512:23: ws
                    {
                    dbg.location(512,23);
                    pushFollow(FOLLOW_ws_in_webkitKeyframes1756);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(81);}

            dbg.location(512,27);
            pushFollow(FOLLOW_atRuleId_in_webkitKeyframes1759);
            atRuleId();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(512,36);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:512:36: ( ws )?
            int alt82=2;
            try { dbg.enterSubRule(82);
            try { dbg.enterDecision(82, decisionCanBacktrack[82]);

            int LA82_0 = input.LA(1);

            if ( ((LA82_0>=WS && LA82_0<=COMMENT)) ) {
                alt82=1;
            }
            } finally {dbg.exitDecision(82);}

            switch (alt82) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:512:36: ws
                    {
                    dbg.location(512,36);
                    pushFollow(FOLLOW_ws_in_webkitKeyframes1761);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(82);}

            dbg.location(513,2);
            match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframes1766); if (state.failed) return ;
            dbg.location(513,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:513:9: ( ws )?
            int alt83=2;
            try { dbg.enterSubRule(83);
            try { dbg.enterDecision(83, decisionCanBacktrack[83]);

            int LA83_0 = input.LA(1);

            if ( ((LA83_0>=WS && LA83_0<=COMMENT)) ) {
                alt83=1;
            }
            } finally {dbg.exitDecision(83);}

            switch (alt83) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:513:9: ws
                    {
                    dbg.location(513,9);
                    pushFollow(FOLLOW_ws_in_webkitKeyframes1768);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(83);}

            dbg.location(514,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:514:3: ( webkitKeyframesBlock ( ws )? )*
            try { dbg.enterSubRule(85);

            loop85:
            do {
                int alt85=2;
                try { dbg.enterDecision(85, decisionCanBacktrack[85]);

                int LA85_0 = input.LA(1);

                if ( (LA85_0==IDENT||LA85_0==PERCENTAGE) ) {
                    alt85=1;
                }


                } finally {dbg.exitDecision(85);}

                switch (alt85) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:514:5: webkitKeyframesBlock ( ws )?
            	    {
            	    dbg.location(514,5);
            	    pushFollow(FOLLOW_webkitKeyframesBlock_in_webkitKeyframes1775);
            	    webkitKeyframesBlock();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(514,26);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:514:26: ( ws )?
            	    int alt84=2;
            	    try { dbg.enterSubRule(84);
            	    try { dbg.enterDecision(84, decisionCanBacktrack[84]);

            	    int LA84_0 = input.LA(1);

            	    if ( ((LA84_0>=WS && LA84_0<=COMMENT)) ) {
            	        alt84=1;
            	    }
            	    } finally {dbg.exitDecision(84);}

            	    switch (alt84) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:514:26: ws
            	            {
            	            dbg.location(514,26);
            	            pushFollow(FOLLOW_ws_in_webkitKeyframes1777);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(84);}


            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);
            } finally {dbg.exitSubRule(85);}

            dbg.location(515,2);
            match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframes1784); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(516, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "webkitKeyframes");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "webkitKeyframes"


    // $ANTLR start "webkitKeyframesBlock"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:518:1: webkitKeyframesBlock : webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void webkitKeyframesBlock() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "webkitKeyframesBlock");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(518, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:519:2: ( webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:520:2: webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(520,2);
            pushFollow(FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock1797);
            webkitKeyframeSelectors();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(520,26);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:520:26: ( ws )?
            int alt86=2;
            try { dbg.enterSubRule(86);
            try { dbg.enterDecision(86, decisionCanBacktrack[86]);

            int LA86_0 = input.LA(1);

            if ( ((LA86_0>=WS && LA86_0<=COMMENT)) ) {
                alt86=1;
            }
            } finally {dbg.exitDecision(86);}

            switch (alt86) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:520:26: ws
                    {
                    dbg.location(520,26);
                    pushFollow(FOLLOW_ws_in_webkitKeyframesBlock1799);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(86);}

            dbg.location(521,2);
            match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframesBlock1803); if (state.failed) return ;
            dbg.location(521,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:521:10: ( ws )?
            int alt87=2;
            try { dbg.enterSubRule(87);
            try { dbg.enterDecision(87, decisionCanBacktrack[87]);

            int LA87_0 = input.LA(1);

            if ( ((LA87_0>=WS && LA87_0<=COMMENT)) ) {
                alt87=1;
            }
            } finally {dbg.exitDecision(87);}

            switch (alt87) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:521:10: ws
                    {
                    dbg.location(521,10);
                    pushFollow(FOLLOW_ws_in_webkitKeyframesBlock1806);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(87);}

            dbg.location(521,14);
            pushFollow(FOLLOW_syncToFollow_in_webkitKeyframesBlock1809);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(522,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:522:3: ( declarations )?
            int alt88=2;
            try { dbg.enterSubRule(88);
            try { dbg.enterDecision(88, decisionCanBacktrack[88]);

            int LA88_0 = input.LA(1);

            if ( ((LA88_0>=NAMESPACE_SYM && LA88_0<=IDENT)||(LA88_0>=CHARSET_SYM && LA88_0<=MEDIA_SYM)||LA88_0==GEN||(LA88_0>=COLON && LA88_0<=MOZ_DOCUMENT_SYM)||LA88_0==WEBKIT_KEYFRAMES_SYM||(LA88_0>=PAGE_SYM && LA88_0<=RIGHTBOTTOM_SYM)||(LA88_0>=MINUS && LA88_0<=PIPE)||LA88_0==LESS_AND||(LA88_0>=RBRACKET && LA88_0<=SASS_VAR)||(LA88_0>=SASS_CONTENT && LA88_0<=SASS_WHILE)||LA88_0==AT_SIGN) ) {
                alt88=1;
            }
            } finally {dbg.exitDecision(88);}

            switch (alt88) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:522:3: declarations
                    {
                    dbg.location(522,3);
                    pushFollow(FOLLOW_declarations_in_webkitKeyframesBlock1813);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(88);}

            dbg.location(523,2);
            match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframesBlock1817); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(524, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "webkitKeyframesBlock");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "webkitKeyframesBlock"


    // $ANTLR start "webkitKeyframeSelectors"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:526:1: webkitKeyframeSelectors : ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )* ;
    public final void webkitKeyframeSelectors() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "webkitKeyframeSelectors");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(526, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:527:2: ( ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:2: ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*
            {
            dbg.location(528,2);
            if ( input.LA(1)==IDENT||input.LA(1)==PERCENTAGE ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(528,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:25: ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*
            try { dbg.enterSubRule(91);

            loop91:
            do {
                int alt91=2;
                try { dbg.enterDecision(91, decisionCanBacktrack[91]);

                try {
                    isCyclicDecision = true;
                    alt91 = dfa91.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(91);}

                switch (alt91) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:27: ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE )
            	    {
            	    dbg.location(528,27);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:27: ( ws )?
            	    int alt89=2;
            	    try { dbg.enterSubRule(89);
            	    try { dbg.enterDecision(89, decisionCanBacktrack[89]);

            	    int LA89_0 = input.LA(1);

            	    if ( ((LA89_0>=WS && LA89_0<=COMMENT)) ) {
            	        alt89=1;
            	    }
            	    } finally {dbg.exitDecision(89);}

            	    switch (alt89) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:27: ws
            	            {
            	            dbg.location(528,27);
            	            pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors1844);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(89);}

            	    dbg.location(528,31);
            	    match(input,COMMA,FOLLOW_COMMA_in_webkitKeyframeSelectors1847); if (state.failed) return ;
            	    dbg.location(528,37);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:37: ( ws )?
            	    int alt90=2;
            	    try { dbg.enterSubRule(90);
            	    try { dbg.enterDecision(90, decisionCanBacktrack[90]);

            	    int LA90_0 = input.LA(1);

            	    if ( ((LA90_0>=WS && LA90_0<=COMMENT)) ) {
            	        alt90=1;
            	    }
            	    } finally {dbg.exitDecision(90);}

            	    switch (alt90) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:37: ws
            	            {
            	            dbg.location(528,37);
            	            pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors1849);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(90);}

            	    dbg.location(528,41);
            	    if ( input.LA(1)==IDENT||input.LA(1)==PERCENTAGE ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);
            } finally {dbg.exitSubRule(91);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(529, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "webkitKeyframeSelectors");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "webkitKeyframeSelectors"


    // $ANTLR start "page"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:531:1: page : PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )* RBRACE ;
    public final void page() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "page");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(531, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:5: ( PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )* RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:7: PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )* RBRACE
            {
            dbg.location(532,7);
            match(input,PAGE_SYM,FOLLOW_PAGE_SYM_in_page1881); if (state.failed) return ;
            dbg.location(532,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:16: ( ws )?
            int alt92=2;
            try { dbg.enterSubRule(92);
            try { dbg.enterDecision(92, decisionCanBacktrack[92]);

            int LA92_0 = input.LA(1);

            if ( ((LA92_0>=WS && LA92_0<=COMMENT)) ) {
                alt92=1;
            }
            } finally {dbg.exitDecision(92);}

            switch (alt92) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:16: ws
                    {
                    dbg.location(532,16);
                    pushFollow(FOLLOW_ws_in_page1883);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(92);}

            dbg.location(532,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:20: ( IDENT ( ws )? )?
            int alt94=2;
            try { dbg.enterSubRule(94);
            try { dbg.enterDecision(94, decisionCanBacktrack[94]);

            int LA94_0 = input.LA(1);

            if ( (LA94_0==IDENT) ) {
                alt94=1;
            }
            } finally {dbg.exitDecision(94);}

            switch (alt94) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:22: IDENT ( ws )?
                    {
                    dbg.location(532,22);
                    match(input,IDENT,FOLLOW_IDENT_in_page1888); if (state.failed) return ;
                    dbg.location(532,28);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:28: ( ws )?
                    int alt93=2;
                    try { dbg.enterSubRule(93);
                    try { dbg.enterDecision(93, decisionCanBacktrack[93]);

                    int LA93_0 = input.LA(1);

                    if ( ((LA93_0>=WS && LA93_0<=COMMENT)) ) {
                        alt93=1;
                    }
                    } finally {dbg.exitDecision(93);}

                    switch (alt93) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:28: ws
                            {
                            dbg.location(532,28);
                            pushFollow(FOLLOW_ws_in_page1890);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(93);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(94);}

            dbg.location(532,35);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:35: ( pseudoPage ( ws )? )?
            int alt96=2;
            try { dbg.enterSubRule(96);
            try { dbg.enterDecision(96, decisionCanBacktrack[96]);

            int LA96_0 = input.LA(1);

            if ( (LA96_0==COLON) ) {
                alt96=1;
            }
            } finally {dbg.exitDecision(96);}

            switch (alt96) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:36: pseudoPage ( ws )?
                    {
                    dbg.location(532,36);
                    pushFollow(FOLLOW_pseudoPage_in_page1897);
                    pseudoPage();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(532,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:47: ( ws )?
                    int alt95=2;
                    try { dbg.enterSubRule(95);
                    try { dbg.enterDecision(95, decisionCanBacktrack[95]);

                    int LA95_0 = input.LA(1);

                    if ( ((LA95_0>=WS && LA95_0<=COMMENT)) ) {
                        alt95=1;
                    }
                    } finally {dbg.exitDecision(95);}

                    switch (alt95) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:532:47: ws
                            {
                            dbg.location(532,47);
                            pushFollow(FOLLOW_ws_in_page1899);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(95);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(96);}

            dbg.location(533,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_page1912); if (state.failed) return ;
            dbg.location(533,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:533:16: ( ws )?
            int alt97=2;
            try { dbg.enterSubRule(97);
            try { dbg.enterDecision(97, decisionCanBacktrack[97]);

            int LA97_0 = input.LA(1);

            if ( ((LA97_0>=WS && LA97_0<=COMMENT)) ) {
                alt97=1;
            }
            } finally {dbg.exitDecision(97);}

            switch (alt97) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:533:16: ws
                    {
                    dbg.location(533,16);
                    pushFollow(FOLLOW_ws_in_page1914);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(97);}

            dbg.location(536,13);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:13: ( ( propertyDeclaration | margin ) ( ws )? )?
            int alt100=2;
            try { dbg.enterSubRule(100);
            try { dbg.enterDecision(100, decisionCanBacktrack[100]);

            int LA100_0 = input.LA(1);

            if ( (LA100_0==NAMESPACE_SYM||LA100_0==IDENT||(LA100_0>=CHARSET_SYM && LA100_0<=IMPORT_SYM)||LA100_0==MEDIA_SYM||LA100_0==GEN||(LA100_0>=AT_IDENT && LA100_0<=MOZ_DOCUMENT_SYM)||LA100_0==WEBKIT_KEYFRAMES_SYM||(LA100_0>=PAGE_SYM && LA100_0<=RIGHTBOTTOM_SYM)||LA100_0==MINUS||(LA100_0>=HASH_SYMBOL && LA100_0<=DOT)||LA100_0==STAR||LA100_0==SASS_VAR||(LA100_0>=SASS_CONTENT && LA100_0<=SASS_WHILE)) ) {
                alt100=1;
            }
            } finally {dbg.exitDecision(100);}

            switch (alt100) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:14: ( propertyDeclaration | margin ) ( ws )?
                    {
                    dbg.location(536,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:14: ( propertyDeclaration | margin )
                    int alt98=2;
                    try { dbg.enterSubRule(98);
                    try { dbg.enterDecision(98, decisionCanBacktrack[98]);

                    try {
                        isCyclicDecision = true;
                        alt98 = dfa98.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(98);}

                    switch (alt98) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:15: propertyDeclaration
                            {
                            dbg.location(536,15);
                            pushFollow(FOLLOW_propertyDeclaration_in_page1957);
                            propertyDeclaration();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:35: margin
                            {
                            dbg.location(536,35);
                            pushFollow(FOLLOW_margin_in_page1959);
                            margin();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(98);}

                    dbg.location(536,43);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:43: ( ws )?
                    int alt99=2;
                    try { dbg.enterSubRule(99);
                    try { dbg.enterDecision(99, decisionCanBacktrack[99]);

                    int LA99_0 = input.LA(1);

                    if ( ((LA99_0>=WS && LA99_0<=COMMENT)) ) {
                        alt99=1;
                    }
                    } finally {dbg.exitDecision(99);}

                    switch (alt99) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:43: ws
                            {
                            dbg.location(536,43);
                            pushFollow(FOLLOW_ws_in_page1962);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(99);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(100);}

            dbg.location(536,49);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:49: ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )*
            try { dbg.enterSubRule(105);

            loop105:
            do {
                int alt105=2;
                try { dbg.enterDecision(105, decisionCanBacktrack[105]);

                int LA105_0 = input.LA(1);

                if ( (LA105_0==SEMI) ) {
                    alt105=1;
                }


                } finally {dbg.exitDecision(105);}

                switch (alt105) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:50: SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )?
            	    {
            	    dbg.location(536,50);
            	    match(input,SEMI,FOLLOW_SEMI_in_page1968); if (state.failed) return ;
            	    dbg.location(536,55);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:55: ( ws )?
            	    int alt101=2;
            	    try { dbg.enterSubRule(101);
            	    try { dbg.enterDecision(101, decisionCanBacktrack[101]);

            	    int LA101_0 = input.LA(1);

            	    if ( ((LA101_0>=WS && LA101_0<=COMMENT)) ) {
            	        alt101=1;
            	    }
            	    } finally {dbg.exitDecision(101);}

            	    switch (alt101) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:55: ws
            	            {
            	            dbg.location(536,55);
            	            pushFollow(FOLLOW_ws_in_page1970);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(101);}

            	    dbg.location(536,59);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:59: ( ( propertyDeclaration | margin ) ( ws )? )?
            	    int alt104=2;
            	    try { dbg.enterSubRule(104);
            	    try { dbg.enterDecision(104, decisionCanBacktrack[104]);

            	    int LA104_0 = input.LA(1);

            	    if ( (LA104_0==NAMESPACE_SYM||LA104_0==IDENT||(LA104_0>=CHARSET_SYM && LA104_0<=IMPORT_SYM)||LA104_0==MEDIA_SYM||LA104_0==GEN||(LA104_0>=AT_IDENT && LA104_0<=MOZ_DOCUMENT_SYM)||LA104_0==WEBKIT_KEYFRAMES_SYM||(LA104_0>=PAGE_SYM && LA104_0<=RIGHTBOTTOM_SYM)||LA104_0==MINUS||(LA104_0>=HASH_SYMBOL && LA104_0<=DOT)||LA104_0==STAR||LA104_0==SASS_VAR||(LA104_0>=SASS_CONTENT && LA104_0<=SASS_WHILE)) ) {
            	        alt104=1;
            	    }
            	    } finally {dbg.exitDecision(104);}

            	    switch (alt104) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:60: ( propertyDeclaration | margin ) ( ws )?
            	            {
            	            dbg.location(536,60);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:60: ( propertyDeclaration | margin )
            	            int alt102=2;
            	            try { dbg.enterSubRule(102);
            	            try { dbg.enterDecision(102, decisionCanBacktrack[102]);

            	            try {
            	                isCyclicDecision = true;
            	                alt102 = dfa102.predict(input);
            	            }
            	            catch (NoViableAltException nvae) {
            	                dbg.recognitionException(nvae);
            	                throw nvae;
            	            }
            	            } finally {dbg.exitDecision(102);}

            	            switch (alt102) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:61: propertyDeclaration
            	                    {
            	                    dbg.location(536,61);
            	                    pushFollow(FOLLOW_propertyDeclaration_in_page1975);
            	                    propertyDeclaration();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;
            	                case 2 :
            	                    dbg.enterAlt(2);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:81: margin
            	                    {
            	                    dbg.location(536,81);
            	                    pushFollow(FOLLOW_margin_in_page1977);
            	                    margin();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(102);}

            	            dbg.location(536,89);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:89: ( ws )?
            	            int alt103=2;
            	            try { dbg.enterSubRule(103);
            	            try { dbg.enterDecision(103, decisionCanBacktrack[103]);

            	            int LA103_0 = input.LA(1);

            	            if ( ((LA103_0>=WS && LA103_0<=COMMENT)) ) {
            	                alt103=1;
            	            }
            	            } finally {dbg.exitDecision(103);}

            	            switch (alt103) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:89: ws
            	                    {
            	                    dbg.location(536,89);
            	                    pushFollow(FOLLOW_ws_in_page1980);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(103);}


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(104);}


            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);
            } finally {dbg.exitSubRule(105);}

            dbg.location(537,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_page1995); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(538, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "page");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "page"


    // $ANTLR start "counterStyle"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:540:1: counterStyle : COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
    public final void counterStyle() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "counterStyle");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(540, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:541:5: ( COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:541:7: COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
            {
            dbg.location(541,7);
            match(input,COUNTER_STYLE_SYM,FOLLOW_COUNTER_STYLE_SYM_in_counterStyle2016); if (state.failed) return ;
            dbg.location(541,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:541:25: ( ws )?
            int alt106=2;
            try { dbg.enterSubRule(106);
            try { dbg.enterDecision(106, decisionCanBacktrack[106]);

            int LA106_0 = input.LA(1);

            if ( ((LA106_0>=WS && LA106_0<=COMMENT)) ) {
                alt106=1;
            }
            } finally {dbg.exitDecision(106);}

            switch (alt106) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:541:25: ws
                    {
                    dbg.location(541,25);
                    pushFollow(FOLLOW_ws_in_counterStyle2018);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(106);}

            dbg.location(541,29);
            match(input,IDENT,FOLLOW_IDENT_in_counterStyle2021); if (state.failed) return ;
            dbg.location(541,35);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:541:35: ( ws )?
            int alt107=2;
            try { dbg.enterSubRule(107);
            try { dbg.enterDecision(107, decisionCanBacktrack[107]);

            int LA107_0 = input.LA(1);

            if ( ((LA107_0>=WS && LA107_0<=COMMENT)) ) {
                alt107=1;
            }
            } finally {dbg.exitDecision(107);}

            switch (alt107) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:541:35: ws
                    {
                    dbg.location(541,35);
                    pushFollow(FOLLOW_ws_in_counterStyle2023);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(107);}

            dbg.location(542,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_counterStyle2034); if (state.failed) return ;
            dbg.location(542,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:542:16: ( ws )?
            int alt108=2;
            try { dbg.enterSubRule(108);
            try { dbg.enterDecision(108, decisionCanBacktrack[108]);

            int LA108_0 = input.LA(1);

            if ( ((LA108_0>=WS && LA108_0<=COMMENT)) ) {
                alt108=1;
            }
            } finally {dbg.exitDecision(108);}

            switch (alt108) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:542:16: ws
                    {
                    dbg.location(542,16);
                    pushFollow(FOLLOW_ws_in_counterStyle2036);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(108);}

            dbg.location(542,20);
            pushFollow(FOLLOW_syncToDeclarationsRule_in_counterStyle2039);
            syncToDeclarationsRule();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(543,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:543:3: ( declarations )?
            int alt109=2;
            try { dbg.enterSubRule(109);
            try { dbg.enterDecision(109, decisionCanBacktrack[109]);

            int LA109_0 = input.LA(1);

            if ( ((LA109_0>=NAMESPACE_SYM && LA109_0<=IDENT)||(LA109_0>=CHARSET_SYM && LA109_0<=MEDIA_SYM)||LA109_0==GEN||(LA109_0>=COLON && LA109_0<=MOZ_DOCUMENT_SYM)||LA109_0==WEBKIT_KEYFRAMES_SYM||(LA109_0>=PAGE_SYM && LA109_0<=RIGHTBOTTOM_SYM)||(LA109_0>=MINUS && LA109_0<=PIPE)||LA109_0==LESS_AND||(LA109_0>=RBRACKET && LA109_0<=SASS_VAR)||(LA109_0>=SASS_CONTENT && LA109_0<=SASS_WHILE)||LA109_0==AT_SIGN) ) {
                alt109=1;
            }
            } finally {dbg.exitDecision(109);}

            switch (alt109) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:543:3: declarations
                    {
                    dbg.location(543,3);
                    pushFollow(FOLLOW_declarations_in_counterStyle2043);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(109);}

            dbg.location(544,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_counterStyle2054); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(545, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "counterStyle");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "counterStyle"


    // $ANTLR start "fontFace"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:547:1: fontFace : FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
    public final void fontFace() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fontFace");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(547, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:548:5: ( FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:548:7: FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
            {
            dbg.location(548,7);
            match(input,FONT_FACE_SYM,FOLLOW_FONT_FACE_SYM_in_fontFace2075); if (state.failed) return ;
            dbg.location(548,21);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:548:21: ( ws )?
            int alt110=2;
            try { dbg.enterSubRule(110);
            try { dbg.enterDecision(110, decisionCanBacktrack[110]);

            int LA110_0 = input.LA(1);

            if ( ((LA110_0>=WS && LA110_0<=COMMENT)) ) {
                alt110=1;
            }
            } finally {dbg.exitDecision(110);}

            switch (alt110) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:548:21: ws
                    {
                    dbg.location(548,21);
                    pushFollow(FOLLOW_ws_in_fontFace2077);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(110);}

            dbg.location(549,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_fontFace2088); if (state.failed) return ;
            dbg.location(549,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:549:16: ( ws )?
            int alt111=2;
            try { dbg.enterSubRule(111);
            try { dbg.enterDecision(111, decisionCanBacktrack[111]);

            int LA111_0 = input.LA(1);

            if ( ((LA111_0>=WS && LA111_0<=COMMENT)) ) {
                alt111=1;
            }
            } finally {dbg.exitDecision(111);}

            switch (alt111) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:549:16: ws
                    {
                    dbg.location(549,16);
                    pushFollow(FOLLOW_ws_in_fontFace2090);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(111);}

            dbg.location(549,20);
            pushFollow(FOLLOW_syncToDeclarationsRule_in_fontFace2093);
            syncToDeclarationsRule();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(550,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:550:3: ( declarations )?
            int alt112=2;
            try { dbg.enterSubRule(112);
            try { dbg.enterDecision(112, decisionCanBacktrack[112]);

            int LA112_0 = input.LA(1);

            if ( ((LA112_0>=NAMESPACE_SYM && LA112_0<=IDENT)||(LA112_0>=CHARSET_SYM && LA112_0<=MEDIA_SYM)||LA112_0==GEN||(LA112_0>=COLON && LA112_0<=MOZ_DOCUMENT_SYM)||LA112_0==WEBKIT_KEYFRAMES_SYM||(LA112_0>=PAGE_SYM && LA112_0<=RIGHTBOTTOM_SYM)||(LA112_0>=MINUS && LA112_0<=PIPE)||LA112_0==LESS_AND||(LA112_0>=RBRACKET && LA112_0<=SASS_VAR)||(LA112_0>=SASS_CONTENT && LA112_0<=SASS_WHILE)||LA112_0==AT_SIGN) ) {
                alt112=1;
            }
            } finally {dbg.exitDecision(112);}

            switch (alt112) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:550:3: declarations
                    {
                    dbg.location(550,3);
                    pushFollow(FOLLOW_declarations_in_fontFace2097);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(112);}

            dbg.location(551,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_fontFace2108); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(552, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fontFace");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fontFace"


    // $ANTLR start "margin"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:554:1: margin : margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
    public final void margin() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "margin");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(554, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:555:2: ( margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:555:4: margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
            {
            dbg.location(555,4);
            pushFollow(FOLLOW_margin_sym_in_margin2123);
            margin_sym();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(555,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:555:15: ( ws )?
            int alt113=2;
            try { dbg.enterSubRule(113);
            try { dbg.enterDecision(113, decisionCanBacktrack[113]);

            int LA113_0 = input.LA(1);

            if ( ((LA113_0>=WS && LA113_0<=COMMENT)) ) {
                alt113=1;
            }
            } finally {dbg.exitDecision(113);}

            switch (alt113) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:555:15: ws
                    {
                    dbg.location(555,15);
                    pushFollow(FOLLOW_ws_in_margin2125);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(113);}

            dbg.location(555,19);
            match(input,LBRACE,FOLLOW_LBRACE_in_margin2128); if (state.failed) return ;
            dbg.location(555,26);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:555:26: ( ws )?
            int alt114=2;
            try { dbg.enterSubRule(114);
            try { dbg.enterDecision(114, decisionCanBacktrack[114]);

            int LA114_0 = input.LA(1);

            if ( ((LA114_0>=WS && LA114_0<=COMMENT)) ) {
                alt114=1;
            }
            } finally {dbg.exitDecision(114);}

            switch (alt114) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:555:26: ws
                    {
                    dbg.location(555,26);
                    pushFollow(FOLLOW_ws_in_margin2130);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(114);}

            dbg.location(555,30);
            pushFollow(FOLLOW_syncToDeclarationsRule_in_margin2133);
            syncToDeclarationsRule();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(555,53);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:555:53: ( declarations )?
            int alt115=2;
            try { dbg.enterSubRule(115);
            try { dbg.enterDecision(115, decisionCanBacktrack[115]);

            int LA115_0 = input.LA(1);

            if ( ((LA115_0>=NAMESPACE_SYM && LA115_0<=IDENT)||(LA115_0>=CHARSET_SYM && LA115_0<=MEDIA_SYM)||LA115_0==GEN||(LA115_0>=COLON && LA115_0<=MOZ_DOCUMENT_SYM)||LA115_0==WEBKIT_KEYFRAMES_SYM||(LA115_0>=PAGE_SYM && LA115_0<=RIGHTBOTTOM_SYM)||(LA115_0>=MINUS && LA115_0<=PIPE)||LA115_0==LESS_AND||(LA115_0>=RBRACKET && LA115_0<=SASS_VAR)||(LA115_0>=SASS_CONTENT && LA115_0<=SASS_WHILE)||LA115_0==AT_SIGN) ) {
                alt115=1;
            }
            } finally {dbg.exitDecision(115);}

            switch (alt115) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:555:53: declarations
                    {
                    dbg.location(555,53);
                    pushFollow(FOLLOW_declarations_in_margin2135);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(115);}

            dbg.location(555,67);
            match(input,RBRACE,FOLLOW_RBRACE_in_margin2138); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(556, 8);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "margin");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "margin"


    // $ANTLR start "margin_sym"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:558:1: margin_sym : ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM );
    public final void margin_sym() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "margin_sym");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(558, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:559:2: ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(559,2);
            if ( (input.LA(1)>=TOPLEFTCORNER_SYM && input.LA(1)<=RIGHTBOTTOM_SYM) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(576, 8);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "margin_sym");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "margin_sym"


    // $ANTLR start "pseudoPage"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:578:1: pseudoPage : COLON IDENT ;
    public final void pseudoPage() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "pseudoPage");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(578, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:579:5: ( COLON IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:579:7: COLON IDENT
            {
            dbg.location(579,7);
            match(input,COLON,FOLLOW_COLON_in_pseudoPage2367); if (state.failed) return ;
            dbg.location(579,13);
            match(input,IDENT,FOLLOW_IDENT_in_pseudoPage2369); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(580, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pseudoPage");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "pseudoPage"


    // $ANTLR start "operator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:582:1: operator : ( SOLIDUS | COMMA );
    public final void operator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "operator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(582, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:583:5: ( SOLIDUS | COMMA )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(583,5);
            if ( input.LA(1)==COMMA||input.LA(1)==SOLIDUS ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(585, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "operator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "operator"


    // $ANTLR start "unaryOperator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:587:1: unaryOperator : ( MINUS | PLUS );
    public final void unaryOperator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "unaryOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(587, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:588:5: ( MINUS | PLUS )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(588,5);
            if ( (input.LA(1)>=MINUS && input.LA(1)<=PLUS) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(590, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unaryOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "unaryOperator"


    // $ANTLR start "property"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:592:1: property : ( ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression | IDENT | GEN | {...}? cp_variable );
    public final void property() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "property");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(592, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:593:5: ( ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression | IDENT | GEN | {...}? cp_variable )
            int alt116=4;
            try { dbg.enterDecision(116, decisionCanBacktrack[116]);

            int LA116_0 = input.LA(1);

            if ( (LA116_0==HASH_SYMBOL) && (synpred14_Css3())) {
                alt116=1;
            }
            else if ( (LA116_0==IDENT) ) {
                int LA116_2 = input.LA(2);

                if ( (synpred14_Css3()) ) {
                    alt116=1;
                }
                else if ( (true) ) {
                    alt116=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA116_0==MINUS||(LA116_0>=HASH && LA116_0<=DOT)) && (synpred14_Css3())) {
                alt116=1;
            }
            else if ( (LA116_0==GEN) ) {
                alt116=3;
            }
            else if ( (LA116_0==NAMESPACE_SYM||(LA116_0>=CHARSET_SYM && LA116_0<=IMPORT_SYM)||LA116_0==MEDIA_SYM||(LA116_0>=AT_IDENT && LA116_0<=MOZ_DOCUMENT_SYM)||LA116_0==WEBKIT_KEYFRAMES_SYM||(LA116_0>=PAGE_SYM && LA116_0<=RIGHTBOTTOM_SYM)||LA116_0==SASS_VAR||(LA116_0>=SASS_CONTENT && LA116_0<=SASS_WHILE)) ) {
                alt116=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(116);}

            switch (alt116) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:597:5: ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression
                    {
                    dbg.location(597,49);
                    pushFollow(FOLLOW_sass_declaration_interpolation_expression_in_property2484);
                    sass_declaration_interpolation_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:7: IDENT
                    {
                    dbg.location(598,7);
                    match(input,IDENT,FOLLOW_IDENT_in_property2492); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:599:7: GEN
                    {
                    dbg.location(599,7);
                    match(input,GEN,FOLLOW_GEN_in_property2501); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:600:7: {...}? cp_variable
                    {
                    dbg.location(600,7);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "property", "isCssPreprocessorSource()");
                    }
                    dbg.location(600,36);
                    pushFollow(FOLLOW_cp_variable_in_property2512);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(COLON)); 
                
        }
        finally {
        }
        dbg.location(602, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "property");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "property"


    // $ANTLR start "rule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:607:1: rule : selectorsGroup ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void rule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "rule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(607, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:608:5: ( selectorsGroup ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:5: selectorsGroup ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(609,5);
            pushFollow(FOLLOW_selectorsGroup_in_rule2551);
            selectorsGroup();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(609,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:20: ( ws )?
            int alt117=2;
            try { dbg.enterSubRule(117);
            try { dbg.enterDecision(117, decisionCanBacktrack[117]);

            int LA117_0 = input.LA(1);

            if ( ((LA117_0>=WS && LA117_0<=COMMENT)) ) {
                alt117=1;
            }
            } finally {dbg.exitDecision(117);}

            switch (alt117) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:20: ws
                    {
                    dbg.location(609,20);
                    pushFollow(FOLLOW_ws_in_rule2553);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(117);}

            dbg.location(610,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_rule2560); if (state.failed) return ;
            dbg.location(610,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:610:12: ( ws )?
            int alt118=2;
            try { dbg.enterSubRule(118);
            try { dbg.enterDecision(118, decisionCanBacktrack[118]);

            int LA118_0 = input.LA(1);

            if ( ((LA118_0>=WS && LA118_0<=COMMENT)) ) {
                alt118=1;
            }
            } finally {dbg.exitDecision(118);}

            switch (alt118) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:610:12: ws
                    {
                    dbg.location(610,12);
                    pushFollow(FOLLOW_ws_in_rule2562);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(118);}

            dbg.location(610,16);
            pushFollow(FOLLOW_syncToFollow_in_rule2565);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(611,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:611:9: ( declarations )?
            int alt119=2;
            try { dbg.enterSubRule(119);
            try { dbg.enterDecision(119, decisionCanBacktrack[119]);

            int LA119_0 = input.LA(1);

            if ( ((LA119_0>=NAMESPACE_SYM && LA119_0<=IDENT)||(LA119_0>=CHARSET_SYM && LA119_0<=MEDIA_SYM)||LA119_0==GEN||(LA119_0>=COLON && LA119_0<=MOZ_DOCUMENT_SYM)||LA119_0==WEBKIT_KEYFRAMES_SYM||(LA119_0>=PAGE_SYM && LA119_0<=RIGHTBOTTOM_SYM)||(LA119_0>=MINUS && LA119_0<=PIPE)||LA119_0==LESS_AND||(LA119_0>=RBRACKET && LA119_0<=SASS_VAR)||(LA119_0>=SASS_CONTENT && LA119_0<=SASS_WHILE)||LA119_0==AT_SIGN) ) {
                alt119=1;
            }
            } finally {dbg.exitDecision(119);}

            switch (alt119) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:611:9: declarations
                    {
                    dbg.location(611,9);
                    pushFollow(FOLLOW_declarations_in_rule2576);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(119);}

            dbg.location(612,5);
            match(input,RBRACE,FOLLOW_RBRACE_in_rule2583); if (state.failed) return ;

            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(RBRACE));
                    input.consume(); //consume the RBRACE as well   
                
        }
        finally {
        }
        dbg.location(613, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "rule"


    // $ANTLR start "declarations"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:620:1: declarations : ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
    public final void declarations() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "declarations");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(620, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:5: ( ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:622:5: ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            {
            dbg.location(622,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:622:5: ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            int cnt124=0;
            try { dbg.enterSubRule(124);

            loop124:
            do {
                int alt124=3;
                try { dbg.enterDecision(124, decisionCanBacktrack[124]);

                int LA124_0 = input.LA(1);

                if ( (LA124_0==NAMESPACE_SYM||LA124_0==IDENT||(LA124_0>=CHARSET_SYM && LA124_0<=MEDIA_SYM)||LA124_0==GEN||(LA124_0>=COLON && LA124_0<=MOZ_DOCUMENT_SYM)||LA124_0==WEBKIT_KEYFRAMES_SYM||(LA124_0>=PAGE_SYM && LA124_0<=RIGHTBOTTOM_SYM)||(LA124_0>=MINUS && LA124_0<=PIPE)||LA124_0==LESS_AND||(LA124_0>=RBRACKET && LA124_0<=SASS_VAR)||(LA124_0>=SASS_CONTENT && LA124_0<=SASS_WHILE)||LA124_0==AT_SIGN) ) {
                    alt124=1;
                }
                else if ( (LA124_0==SEMI) ) {
                    alt124=2;
                }


                } finally {dbg.exitDecision(124);}

                switch (alt124) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:10: ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    {
            	    dbg.location(623,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:10: ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:12: declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
            	    {
            	    dbg.location(623,12);
            	    pushFollow(FOLLOW_declaration_in_declarations2631);
            	    declaration();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(623,24);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:24: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
            	    int alt121=2;
            	    try { dbg.enterSubRule(121);
            	    try { dbg.enterDecision(121, decisionCanBacktrack[121]);

            	    try {
            	        isCyclicDecision = true;
            	        alt121 = dfa121.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(121);}

            	    switch (alt121) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:25: ( ( ws )? SEMI )=> ( ws )? SEMI
            	            {
            	            dbg.location(623,37);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:37: ( ws )?
            	            int alt120=2;
            	            try { dbg.enterSubRule(120);
            	            try { dbg.enterDecision(120, decisionCanBacktrack[120]);

            	            int LA120_0 = input.LA(1);

            	            if ( ((LA120_0>=WS && LA120_0<=COMMENT)) ) {
            	                alt120=1;
            	            }
            	            } finally {dbg.exitDecision(120);}

            	            switch (alt120) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:37: ws
            	                    {
            	                    dbg.location(623,37);
            	                    pushFollow(FOLLOW_ws_in_declarations2641);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(120);}

            	            dbg.location(623,41);
            	            match(input,SEMI,FOLLOW_SEMI_in_declarations2644); if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(121);}

            	    dbg.location(623,48);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:48: ( ws )?
            	    int alt122=2;
            	    try { dbg.enterSubRule(122);
            	    try { dbg.enterDecision(122, decisionCanBacktrack[122]);

            	    int LA122_0 = input.LA(1);

            	    if ( ((LA122_0>=WS && LA122_0<=COMMENT)) ) {
            	        alt122=1;
            	    }
            	    } finally {dbg.exitDecision(122);}

            	    switch (alt122) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:48: ws
            	            {
            	            dbg.location(623,48);
            	            pushFollow(FOLLOW_ws_in_declarations2648);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(122);}


            	    }


            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:625:10: ( SEMI ( ws )? )
            	    {
            	    dbg.location(625,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:625:10: ( SEMI ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:625:12: SEMI ( ws )?
            	    {
            	    dbg.location(625,12);
            	    match(input,SEMI,FOLLOW_SEMI_in_declarations2675); if (state.failed) return ;
            	    dbg.location(625,17);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:625:17: ( ws )?
            	    int alt123=2;
            	    try { dbg.enterSubRule(123);
            	    try { dbg.enterDecision(123, decisionCanBacktrack[123]);

            	    int LA123_0 = input.LA(1);

            	    if ( ((LA123_0>=WS && LA123_0<=COMMENT)) ) {
            	        alt123=1;
            	    }
            	    } finally {dbg.exitDecision(123);}

            	    switch (alt123) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:625:17: ws
            	            {
            	            dbg.location(625,17);
            	            pushFollow(FOLLOW_ws_in_declarations2677);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(123);}


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt124 >= 1 ) break loop124;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(124, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt124++;
            } while (true);
            } finally {dbg.exitSubRule(124);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(627, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "declarations");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "declarations"


    // $ANTLR start "declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:1: declaration : ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_nested_properties )=> sass_nested_properties | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( selectorsGroup ( ws )? LBRACE )=> rule | {...}? at_rule | {...}? sass_control | {...}? sass_extend | {...}? sass_debug | {...}? sass_content | {...}? sass_function_return | {...}? importItem | GEN );
    public final void declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(629, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:630:5: ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_nested_properties )=> sass_nested_properties | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( selectorsGroup ( ws )? LBRACE )=> rule | {...}? at_rule | {...}? sass_control | {...}? sass_extend | {...}? sass_debug | {...}? sass_content | {...}? sass_function_return | {...}? importItem | GEN )
            int alt129=16;
            try { dbg.enterDecision(129, decisionCanBacktrack[129]);

            try {
                isCyclicDecision = true;
                alt129 = dfa129.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(129);}

            switch (alt129) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:631:5: ( cp_variable_declaration )=> cp_variable_declaration
                    {
                    dbg.location(631,32);
                    pushFollow(FOLLOW_cp_variable_declaration_in_declaration2712);
                    cp_variable_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:7: ( sass_nested_properties )=> sass_nested_properties
                    {
                    dbg.location(632,33);
                    pushFollow(FOLLOW_sass_nested_properties_in_declaration2725);
                    sass_nested_properties();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:633:7: ( propertyDeclaration )=> propertyDeclaration
                    {
                    dbg.location(633,30);
                    pushFollow(FOLLOW_propertyDeclaration_in_declaration2738);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:7: ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration
                    {
                    dbg.location(635,67);
                    pushFollow(FOLLOW_propertyDeclaration_in_declaration2778);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:7: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )=> cp_mixin_declaration
                    {
                    dbg.location(636,94);
                    pushFollow(FOLLOW_cp_mixin_declaration_in_declaration2824);
                    cp_mixin_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:638:7: ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
                    {
                    dbg.location(638,55);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isLessSource()");
                    }
                    dbg.location(638,73);
                    pushFollow(FOLLOW_cp_mixin_call_in_declaration2858);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(638,87);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:638:87: ( ( ws )? IMPORTANT_SYM )?
                    int alt126=2;
                    try { dbg.enterSubRule(126);
                    try { dbg.enterDecision(126, decisionCanBacktrack[126]);

                    try {
                        isCyclicDecision = true;
                        alt126 = dfa126.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(126);}

                    switch (alt126) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:638:88: ( ws )? IMPORTANT_SYM
                            {
                            dbg.location(638,88);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:638:88: ( ws )?
                            int alt125=2;
                            try { dbg.enterSubRule(125);
                            try { dbg.enterDecision(125, decisionCanBacktrack[125]);

                            int LA125_0 = input.LA(1);

                            if ( ((LA125_0>=WS && LA125_0<=COMMENT)) ) {
                                alt125=1;
                            }
                            } finally {dbg.exitDecision(125);}

                            switch (alt125) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:638:88: ws
                                    {
                                    dbg.location(638,88);
                                    pushFollow(FOLLOW_ws_in_declaration2861);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(125);}

                            dbg.location(638,92);
                            match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_declaration2864); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(126);}


                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:7: ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
                    {
                    dbg.location(639,25);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(639,43);
                    pushFollow(FOLLOW_cp_mixin_call_in_declaration2881);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(639,57);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:57: ( ( ws )? IMPORTANT_SYM )?
                    int alt128=2;
                    try { dbg.enterSubRule(128);
                    try { dbg.enterDecision(128, decisionCanBacktrack[128]);

                    try {
                        isCyclicDecision = true;
                        alt128 = dfa128.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(128);}

                    switch (alt128) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:58: ( ws )? IMPORTANT_SYM
                            {
                            dbg.location(639,58);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:58: ( ws )?
                            int alt127=2;
                            try { dbg.enterSubRule(127);
                            try { dbg.enterDecision(127, decisionCanBacktrack[127]);

                            int LA127_0 = input.LA(1);

                            if ( ((LA127_0>=WS && LA127_0<=COMMENT)) ) {
                                alt127=1;
                            }
                            } finally {dbg.exitDecision(127);}

                            switch (alt127) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:58: ws
                                    {
                                    dbg.location(639,58);
                                    pushFollow(FOLLOW_ws_in_declaration2884);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(127);}

                            dbg.location(639,62);
                            match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_declaration2887); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(128);}


                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:640:7: ( selectorsGroup ( ws )? LBRACE )=> rule
                    {
                    dbg.location(640,36);
                    pushFollow(FOLLOW_rule_in_declaration2906);
                    rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:641:7: {...}? at_rule
                    {
                    dbg.location(641,7);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isCssPreprocessorSource()");
                    }
                    dbg.location(641,36);
                    pushFollow(FOLLOW_at_rule_in_declaration2917);
                    at_rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:642:7: {...}? sass_control
                    {
                    dbg.location(642,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(642,25);
                    pushFollow(FOLLOW_sass_control_in_declaration2928);
                    sass_control();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:7: {...}? sass_extend
                    {
                    dbg.location(643,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(643,25);
                    pushFollow(FOLLOW_sass_extend_in_declaration2939);
                    sass_extend();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:644:7: {...}? sass_debug
                    {
                    dbg.location(644,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(644,25);
                    pushFollow(FOLLOW_sass_debug_in_declaration2950);
                    sass_debug();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:645:7: {...}? sass_content
                    {
                    dbg.location(645,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(645,25);
                    pushFollow(FOLLOW_sass_content_in_declaration2961);
                    sass_content();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:646:7: {...}? sass_function_return
                    {
                    dbg.location(646,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(646,25);
                    pushFollow(FOLLOW_sass_function_return_in_declaration2972);
                    sass_function_return();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:647:7: {...}? importItem
                    {
                    dbg.location(647,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(647,25);
                    pushFollow(FOLLOW_importItem_in_declaration2983);
                    importItem();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:648:7: GEN
                    {
                    dbg.location(648,7);
                    match(input,GEN,FOLLOW_GEN_in_declaration2992); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(SEMI));
                
        }
        finally {
        }
        dbg.location(649, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "declaration"


    // $ANTLR start "selectorsGroup"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:655:1: selectorsGroup : ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression | selector ( ( ws )? COMMA ( ws )? selector )* );
    public final void selectorsGroup() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "selectorsGroup");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(655, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:656:5: ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression | selector ( ( ws )? COMMA ( ws )? selector )* )
            int alt133=2;
            try { dbg.enterDecision(133, decisionCanBacktrack[133]);

            try {
                isCyclicDecision = true;
                alt133 = dfa133.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(133);}

            switch (alt133) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:9: ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression
                    {
                    dbg.location(658,60);
                    pushFollow(FOLLOW_sass_selector_interpolation_expression_in_selectorsGroup3060);
                    sass_selector_interpolation_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:9: selector ( ( ws )? COMMA ( ws )? selector )*
                    {
                    dbg.location(660,9);
                    pushFollow(FOLLOW_selector_in_selectorsGroup3073);
                    selector();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(660,18);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:18: ( ( ws )? COMMA ( ws )? selector )*
                    try { dbg.enterSubRule(132);

                    loop132:
                    do {
                        int alt132=2;
                        try { dbg.enterDecision(132, decisionCanBacktrack[132]);

                        try {
                            isCyclicDecision = true;
                            alt132 = dfa132.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(132);}

                        switch (alt132) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:19: ( ws )? COMMA ( ws )? selector
                    	    {
                    	    dbg.location(660,19);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:19: ( ws )?
                    	    int alt130=2;
                    	    try { dbg.enterSubRule(130);
                    	    try { dbg.enterDecision(130, decisionCanBacktrack[130]);

                    	    int LA130_0 = input.LA(1);

                    	    if ( ((LA130_0>=WS && LA130_0<=COMMENT)) ) {
                    	        alt130=1;
                    	    }
                    	    } finally {dbg.exitDecision(130);}

                    	    switch (alt130) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:19: ws
                    	            {
                    	            dbg.location(660,19);
                    	            pushFollow(FOLLOW_ws_in_selectorsGroup3076);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(130);}

                    	    dbg.location(660,23);
                    	    match(input,COMMA,FOLLOW_COMMA_in_selectorsGroup3079); if (state.failed) return ;
                    	    dbg.location(660,29);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:29: ( ws )?
                    	    int alt131=2;
                    	    try { dbg.enterSubRule(131);
                    	    try { dbg.enterDecision(131, decisionCanBacktrack[131]);

                    	    int LA131_0 = input.LA(1);

                    	    if ( ((LA131_0>=WS && LA131_0<=COMMENT)) ) {
                    	        alt131=1;
                    	    }
                    	    } finally {dbg.exitDecision(131);}

                    	    switch (alt131) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:660:29: ws
                    	            {
                    	            dbg.location(660,29);
                    	            pushFollow(FOLLOW_ws_in_selectorsGroup3081);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(131);}

                    	    dbg.location(660,33);
                    	    pushFollow(FOLLOW_selector_in_selectorsGroup3084);
                    	    selector();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop132;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(132);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(661, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "selectorsGroup");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "selectorsGroup"


    // $ANTLR start "selector"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:663:1: selector : ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )* ;
    public final void selector() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "selector");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(663, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:5: ( ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:8: ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )*
            {
            dbg.location(664,8);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:8: ( combinator ( ws )? )?
            int alt135=2;
            try { dbg.enterSubRule(135);
            try { dbg.enterDecision(135, decisionCanBacktrack[135]);

            int LA135_0 = input.LA(1);

            if ( ((LA135_0>=PLUS && LA135_0<=TILDE)) ) {
                alt135=1;
            }
            } finally {dbg.exitDecision(135);}

            switch (alt135) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:9: combinator ( ws )?
                    {
                    dbg.location(664,9);
                    pushFollow(FOLLOW_combinator_in_selector3113);
                    combinator();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(664,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:20: ( ws )?
                    int alt134=2;
                    try { dbg.enterSubRule(134);
                    try { dbg.enterDecision(134, decisionCanBacktrack[134]);

                    int LA134_0 = input.LA(1);

                    if ( ((LA134_0>=WS && LA134_0<=COMMENT)) ) {
                        alt134=1;
                    }
                    } finally {dbg.exitDecision(134);}

                    switch (alt134) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:20: ws
                            {
                            dbg.location(664,20);
                            pushFollow(FOLLOW_ws_in_selector3115);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(134);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(135);}

            dbg.location(664,26);
            pushFollow(FOLLOW_simpleSelectorSequence_in_selector3120);
            simpleSelectorSequence();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(664,49);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:49: ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )*
            try { dbg.enterSubRule(140);

            loop140:
            do {
                int alt140=2;
                try { dbg.enterDecision(140, decisionCanBacktrack[140]);

                try {
                    isCyclicDecision = true;
                    alt140 = dfa140.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(140);}

                switch (alt140) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:51: ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence
            	    {
            	    dbg.location(664,51);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:51: ( ( ( ws )? combinator ( ws )? ) | ( ws )? )
            	    int alt139=2;
            	    try { dbg.enterSubRule(139);
            	    try { dbg.enterDecision(139, decisionCanBacktrack[139]);

            	    try {
            	        isCyclicDecision = true;
            	        alt139 = dfa139.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(139);}

            	    switch (alt139) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:52: ( ( ws )? combinator ( ws )? )
            	            {
            	            dbg.location(664,52);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:52: ( ( ws )? combinator ( ws )? )
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:53: ( ws )? combinator ( ws )?
            	            {
            	            dbg.location(664,53);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:53: ( ws )?
            	            int alt136=2;
            	            try { dbg.enterSubRule(136);
            	            try { dbg.enterDecision(136, decisionCanBacktrack[136]);

            	            int LA136_0 = input.LA(1);

            	            if ( ((LA136_0>=WS && LA136_0<=COMMENT)) ) {
            	                alt136=1;
            	            }
            	            } finally {dbg.exitDecision(136);}

            	            switch (alt136) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:53: ws
            	                    {
            	                    dbg.location(664,53);
            	                    pushFollow(FOLLOW_ws_in_selector3126);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(136);}

            	            dbg.location(664,57);
            	            pushFollow(FOLLOW_combinator_in_selector3129);
            	            combinator();

            	            state._fsp--;
            	            if (state.failed) return ;
            	            dbg.location(664,68);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:68: ( ws )?
            	            int alt137=2;
            	            try { dbg.enterSubRule(137);
            	            try { dbg.enterDecision(137, decisionCanBacktrack[137]);

            	            int LA137_0 = input.LA(1);

            	            if ( ((LA137_0>=WS && LA137_0<=COMMENT)) ) {
            	                alt137=1;
            	            }
            	            } finally {dbg.exitDecision(137);}

            	            switch (alt137) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:68: ws
            	                    {
            	                    dbg.location(664,68);
            	                    pushFollow(FOLLOW_ws_in_selector3131);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(137);}


            	            }


            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:73: ( ws )?
            	            {
            	            dbg.location(664,73);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:73: ( ws )?
            	            int alt138=2;
            	            try { dbg.enterSubRule(138);
            	            try { dbg.enterDecision(138, decisionCanBacktrack[138]);

            	            int LA138_0 = input.LA(1);

            	            if ( ((LA138_0>=WS && LA138_0<=COMMENT)) ) {
            	                alt138=1;
            	            }
            	            } finally {dbg.exitDecision(138);}

            	            switch (alt138) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:664:73: ws
            	                    {
            	                    dbg.location(664,73);
            	                    pushFollow(FOLLOW_ws_in_selector3135);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(138);}


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(139);}

            	    dbg.location(664,78);
            	    pushFollow(FOLLOW_simpleSelectorSequence_in_selector3139);
            	    simpleSelectorSequence();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);
            } finally {dbg.exitSubRule(140);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(665, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "selector");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "selector"


    // $ANTLR start "combinator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:1: combinator : ( PLUS | GREATER | TILDE );
    public final void combinator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "combinator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(667, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:668:5: ( PLUS | GREATER | TILDE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(668,5);
            if ( (input.LA(1)>=PLUS && input.LA(1)<=TILDE) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(670, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "combinator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "combinator"


    // $ANTLR start "simpleSelectorSequence"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:672:1: simpleSelectorSequence : ( ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* ) | elementSubsequent ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* );
    public final void simpleSelectorSequence() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "simpleSelectorSequence");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(672, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:673:2: ( ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* ) | elementSubsequent ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* )
            int alt145=2;
            try { dbg.enterDecision(145, decisionCanBacktrack[145]);

            int LA145_0 = input.LA(1);

            if ( (LA145_0==IDENT||LA145_0==GEN||(LA145_0>=STAR && LA145_0<=PIPE)||LA145_0==LESS_AND) ) {
                alt145=1;
            }
            else if ( (LA145_0==COLON||(LA145_0>=HASH_SYMBOL && LA145_0<=SASS_EXTEND_ONLY_SELECTOR)||LA145_0==AT_SIGN) ) {
                alt145=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(145);}

            switch (alt145) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:674:2: ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* )
                    {
                    dbg.location(674,2);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:674:2: ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:674:4: typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    {
                    dbg.location(674,4);
                    pushFollow(FOLLOW_typeSelector_in_simpleSelectorSequence3192);
                    typeSelector();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(674,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:674:17: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    try { dbg.enterSubRule(142);

                    loop142:
                    do {
                        int alt142=2;
                        try { dbg.enterDecision(142, decisionCanBacktrack[142]);

                        try {
                            isCyclicDecision = true;
                            alt142 = dfa142.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(142);}

                        switch (alt142) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:674:18: ( ( ws )? esPred )=> ( ws )? elementSubsequent
                    	    {
                    	    dbg.location(674,32);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:674:32: ( ws )?
                    	    int alt141=2;
                    	    try { dbg.enterSubRule(141);
                    	    try { dbg.enterDecision(141, decisionCanBacktrack[141]);

                    	    int LA141_0 = input.LA(1);

                    	    if ( ((LA141_0>=WS && LA141_0<=COMMENT)) ) {
                    	        alt141=1;
                    	    }
                    	    } finally {dbg.exitDecision(141);}

                    	    switch (alt141) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:674:32: ws
                    	            {
                    	            dbg.location(674,32);
                    	            pushFollow(FOLLOW_ws_in_simpleSelectorSequence3202);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(141);}

                    	    dbg.location(674,36);
                    	    pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence3205);
                    	    elementSubsequent();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop142;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(142);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:676:2: elementSubsequent ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    {
                    dbg.location(676,2);
                    pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence3216);
                    elementSubsequent();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(676,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:676:20: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    try { dbg.enterSubRule(144);

                    loop144:
                    do {
                        int alt144=2;
                        try { dbg.enterDecision(144, decisionCanBacktrack[144]);

                        try {
                            isCyclicDecision = true;
                            alt144 = dfa144.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(144);}

                        switch (alt144) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:676:21: ( ( ws )? esPred )=> ( ws )? elementSubsequent
                    	    {
                    	    dbg.location(676,35);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:676:35: ( ws )?
                    	    int alt143=2;
                    	    try { dbg.enterSubRule(143);
                    	    try { dbg.enterDecision(143, decisionCanBacktrack[143]);

                    	    int LA143_0 = input.LA(1);

                    	    if ( ((LA143_0>=WS && LA143_0<=COMMENT)) ) {
                    	        alt143=1;
                    	    }
                    	    } finally {dbg.exitDecision(143);}

                    	    switch (alt143) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:676:35: ws
                    	            {
                    	            dbg.location(676,35);
                    	            pushFollow(FOLLOW_ws_in_simpleSelectorSequence3226);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(143);}

                    	    dbg.location(676,39);
                    	    pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence3229);
                    	    elementSubsequent();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop144;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(144);}


                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                        reportError(rce);
                        consumeUntil(input, BitSet.of(LBRACE)); 
                    
        }
        finally {
        }
        dbg.location(677, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "simpleSelectorSequence");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "simpleSelectorSequence"


    // $ANTLR start "esPred"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:684:1: esPred : ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR );
    public final void esPred() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "esPred");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(684, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:685:5: ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(685,5);
            if ( input.LA(1)==COLON||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=SASS_EXTEND_ONLY_SELECTOR) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(686, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "esPred");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "esPred"


    // $ANTLR start "typeSelector"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:688:1: typeSelector options {k=2; } : ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName ;
    public final void typeSelector() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "typeSelector");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(688, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:690:3: ( ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:690:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName
            {
            dbg.location(690,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:690:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )?
            int alt146=2;
            try { dbg.enterSubRule(146);
            try { dbg.enterDecision(146, decisionCanBacktrack[146]);

            int LA146_0 = input.LA(1);

            if ( (LA146_0==IDENT) ) {
                int LA146_1 = input.LA(2);

                if ( (synpred27_Css3()) ) {
                    alt146=1;
                }
            }
            else if ( (LA146_0==STAR) ) {
                int LA146_2 = input.LA(2);

                if ( (synpred27_Css3()) ) {
                    alt146=1;
                }
            }
            else if ( (LA146_0==PIPE) && (synpred27_Css3())) {
                alt146=1;
            }
            } finally {dbg.exitDecision(146);}

            switch (alt146) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:690:7: ( ( IDENT | STAR )? PIPE )=> namespacePrefix
                    {
                    dbg.location(690,31);
                    pushFollow(FOLLOW_namespacePrefix_in_typeSelector3342);
                    namespacePrefix();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(146);}

            dbg.location(690,49);
            pushFollow(FOLLOW_elementName_in_typeSelector3346);
            elementName();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(691, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "typeSelector");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "typeSelector"


    // $ANTLR start "namespacePrefix"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:693:1: namespacePrefix : ( namespacePrefixName | STAR )? PIPE ;
    public final void namespacePrefix() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespacePrefix");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(693, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:694:3: ( ( namespacePrefixName | STAR )? PIPE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:694:5: ( namespacePrefixName | STAR )? PIPE
            {
            dbg.location(694,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:694:5: ( namespacePrefixName | STAR )?
            int alt147=3;
            try { dbg.enterSubRule(147);
            try { dbg.enterDecision(147, decisionCanBacktrack[147]);

            int LA147_0 = input.LA(1);

            if ( (LA147_0==IDENT) ) {
                alt147=1;
            }
            else if ( (LA147_0==STAR) ) {
                alt147=2;
            }
            } finally {dbg.exitDecision(147);}

            switch (alt147) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:694:7: namespacePrefixName
                    {
                    dbg.location(694,7);
                    pushFollow(FOLLOW_namespacePrefixName_in_namespacePrefix3361);
                    namespacePrefixName();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:694:29: STAR
                    {
                    dbg.location(694,29);
                    match(input,STAR,FOLLOW_STAR_in_namespacePrefix3365); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(147);}

            dbg.location(694,36);
            match(input,PIPE,FOLLOW_PIPE_in_namespacePrefix3369); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(695, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespacePrefix");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespacePrefix"


    // $ANTLR start "elementSubsequent"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:698:1: elementSubsequent : ({...}? sass_extend_only_selector | {...}? less_selector_interpolation | cssId | cssClass | slAttribute | pseudo ) ;
    public final void elementSubsequent() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "elementSubsequent");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(698, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:699:5: ( ({...}? sass_extend_only_selector | {...}? less_selector_interpolation | cssId | cssClass | slAttribute | pseudo ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:700:5: ({...}? sass_extend_only_selector | {...}? less_selector_interpolation | cssId | cssClass | slAttribute | pseudo )
            {
            dbg.location(700,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:700:5: ({...}? sass_extend_only_selector | {...}? less_selector_interpolation | cssId | cssClass | slAttribute | pseudo )
            int alt148=6;
            try { dbg.enterSubRule(148);
            try { dbg.enterDecision(148, decisionCanBacktrack[148]);

            switch ( input.LA(1) ) {
            case SASS_EXTEND_ONLY_SELECTOR:
                {
                alt148=1;
                }
                break;
            case AT_SIGN:
                {
                alt148=2;
                }
                break;
            case HASH_SYMBOL:
            case HASH:
                {
                alt148=3;
                }
                break;
            case DOT:
                {
                alt148=4;
                }
                break;
            case LBRACKET:
                {
                alt148=5;
                }
                break;
            case COLON:
            case DCOLON:
                {
                alt148=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(148);}

            switch (alt148) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:701:9: {...}? sass_extend_only_selector
                    {
                    dbg.location(701,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "elementSubsequent", "isScssSource()");
                    }
                    dbg.location(701,27);
                    pushFollow(FOLLOW_sass_extend_only_selector_in_elementSubsequent3408);
                    sass_extend_only_selector();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:702:11: {...}? less_selector_interpolation
                    {
                    dbg.location(702,11);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "elementSubsequent", "isLessSource()");
                    }
                    dbg.location(702,29);
                    pushFollow(FOLLOW_less_selector_interpolation_in_elementSubsequent3422);
                    less_selector_interpolation();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:703:8: cssId
                    {
                    dbg.location(703,8);
                    pushFollow(FOLLOW_cssId_in_elementSubsequent3432);
                    cssId();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:704:8: cssClass
                    {
                    dbg.location(704,8);
                    pushFollow(FOLLOW_cssClass_in_elementSubsequent3441);
                    cssClass();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:705:11: slAttribute
                    {
                    dbg.location(705,11);
                    pushFollow(FOLLOW_slAttribute_in_elementSubsequent3453);
                    slAttribute();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:11: pseudo
                    {
                    dbg.location(706,11);
                    pushFollow(FOLLOW_pseudo_in_elementSubsequent3465);
                    pseudo();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(148);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(708, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "elementSubsequent");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "elementSubsequent"


    // $ANTLR start "cssId"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:711:1: cssId : ( HASH | ( HASH_SYMBOL ( NAME | {...}? less_selector_interpolation ) ) );
    public final void cssId() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cssId");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(711, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:712:5: ( HASH | ( HASH_SYMBOL ( NAME | {...}? less_selector_interpolation ) ) )
            int alt150=2;
            try { dbg.enterDecision(150, decisionCanBacktrack[150]);

            int LA150_0 = input.LA(1);

            if ( (LA150_0==HASH) ) {
                alt150=1;
            }
            else if ( (LA150_0==HASH_SYMBOL) ) {
                alt150=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(150);}

            switch (alt150) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:712:7: HASH
                    {
                    dbg.location(712,7);
                    match(input,HASH,FOLLOW_HASH_in_cssId3493); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:714:9: ( HASH_SYMBOL ( NAME | {...}? less_selector_interpolation ) )
                    {
                    dbg.location(714,9);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:714:9: ( HASH_SYMBOL ( NAME | {...}? less_selector_interpolation ) )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:714:11: HASH_SYMBOL ( NAME | {...}? less_selector_interpolation )
                    {
                    dbg.location(714,11);
                    match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_cssId3515); if (state.failed) return ;
                    dbg.location(715,13);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:715:13: ( NAME | {...}? less_selector_interpolation )
                    int alt149=2;
                    try { dbg.enterSubRule(149);
                    try { dbg.enterDecision(149, decisionCanBacktrack[149]);

                    int LA149_0 = input.LA(1);

                    if ( (LA149_0==NAME) ) {
                        alt149=1;
                    }
                    else if ( (LA149_0==AT_SIGN) ) {
                        alt149=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 149, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(149);}

                    switch (alt149) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:715:15: NAME
                            {
                            dbg.location(715,15);
                            match(input,NAME,FOLLOW_NAME_in_cssId3532); if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:716:17: {...}? less_selector_interpolation
                            {
                            dbg.location(716,17);
                            if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                throw new FailedPredicateException(input, "cssId", "isLessSource()");
                            }
                            dbg.location(716,35);
                            pushFollow(FOLLOW_less_selector_interpolation_in_cssId3553);
                            less_selector_interpolation();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(149);}


                    }


                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(WS, IDENT, LBRACE)); 
                
        }
        finally {
        }
        dbg.location(719, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cssId");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cssId"


    // $ANTLR start "cssClass"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:725:1: cssClass : DOT ( IDENT | GEN | {...}? less_selector_interpolation ) ;
    public final void cssClass() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cssClass");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(725, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:726:5: ( DOT ( IDENT | GEN | {...}? less_selector_interpolation ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:726:7: DOT ( IDENT | GEN | {...}? less_selector_interpolation )
            {
            dbg.location(726,7);
            match(input,DOT,FOLLOW_DOT_in_cssClass3605); if (state.failed) return ;
            dbg.location(727,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:727:9: ( IDENT | GEN | {...}? less_selector_interpolation )
            int alt151=3;
            try { dbg.enterSubRule(151);
            try { dbg.enterDecision(151, decisionCanBacktrack[151]);

            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt151=1;
                }
                break;
            case GEN:
                {
                alt151=2;
                }
                break;
            case AT_SIGN:
                {
                alt151=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(151);}

            switch (alt151) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:728:13: IDENT
                    {
                    dbg.location(728,13);
                    match(input,IDENT,FOLLOW_IDENT_in_cssClass3631); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:729:15: GEN
                    {
                    dbg.location(729,15);
                    match(input,GEN,FOLLOW_GEN_in_cssClass3648); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:15: {...}? less_selector_interpolation
                    {
                    dbg.location(730,15);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cssClass", "isLessSource()");
                    }
                    dbg.location(730,33);
                    pushFollow(FOLLOW_less_selector_interpolation_in_cssClass3668);
                    less_selector_interpolation();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(151);}


            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(WS, IDENT, LBRACE)); 
                
        }
        finally {
        }
        dbg.location(732, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cssClass");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cssClass"


    // $ANTLR start "elementName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:739:1: elementName : ( IDENT | GEN | LESS_AND | STAR );
    public final void elementName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "elementName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(739, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:740:5: ( IDENT | GEN | LESS_AND | STAR )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(740,5);
            if ( input.LA(1)==IDENT||input.LA(1)==GEN||input.LA(1)==STAR||input.LA(1)==LESS_AND ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(741, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "elementName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "elementName"


    // $ANTLR start "slAttribute"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:743:1: slAttribute : LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET ;
    public final void slAttribute() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "slAttribute");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(743, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:744:5: ( LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:744:7: LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET
            {
            dbg.location(744,7);
            match(input,LBRACKET,FOLLOW_LBRACKET_in_slAttribute3739); if (state.failed) return ;
            dbg.location(745,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:745:6: ( namespacePrefix )?
            int alt152=2;
            try { dbg.enterSubRule(152);
            try { dbg.enterDecision(152, decisionCanBacktrack[152]);

            int LA152_0 = input.LA(1);

            if ( (LA152_0==IDENT) ) {
                int LA152_1 = input.LA(2);

                if ( (LA152_1==PIPE) ) {
                    alt152=1;
                }
            }
            else if ( ((LA152_0>=STAR && LA152_0<=PIPE)) ) {
                alt152=1;
            }
            } finally {dbg.exitDecision(152);}

            switch (alt152) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:745:6: namespacePrefix
                    {
                    dbg.location(745,6);
                    pushFollow(FOLLOW_namespacePrefix_in_slAttribute3746);
                    namespacePrefix();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(152);}

            dbg.location(745,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:745:23: ( ws )?
            int alt153=2;
            try { dbg.enterSubRule(153);
            try { dbg.enterDecision(153, decisionCanBacktrack[153]);

            int LA153_0 = input.LA(1);

            if ( ((LA153_0>=WS && LA153_0<=COMMENT)) ) {
                alt153=1;
            }
            } finally {dbg.exitDecision(153);}

            switch (alt153) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:745:23: ws
                    {
                    dbg.location(745,23);
                    pushFollow(FOLLOW_ws_in_slAttribute3749);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(153);}

            dbg.location(746,9);
            pushFollow(FOLLOW_slAttributeName_in_slAttribute3760);
            slAttributeName();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(746,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:25: ( ws )?
            int alt154=2;
            try { dbg.enterSubRule(154);
            try { dbg.enterDecision(154, decisionCanBacktrack[154]);

            int LA154_0 = input.LA(1);

            if ( ((LA154_0>=WS && LA154_0<=COMMENT)) ) {
                alt154=1;
            }
            } finally {dbg.exitDecision(154);}

            switch (alt154) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:746:25: ws
                    {
                    dbg.location(746,25);
                    pushFollow(FOLLOW_ws_in_slAttribute3762);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(154);}

            dbg.location(748,13);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:748:13: ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )?
            int alt157=2;
            try { dbg.enterSubRule(157);
            try { dbg.enterDecision(157, decisionCanBacktrack[157]);

            int LA157_0 = input.LA(1);

            if ( ((LA157_0>=OPEQ && LA157_0<=CONTAINS)) ) {
                alt157=1;
            }
            } finally {dbg.exitDecision(157);}

            switch (alt157) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:749:17: ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )?
                    {
                    dbg.location(749,17);
                    if ( (input.LA(1)>=OPEQ && input.LA(1)<=CONTAINS) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(757,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:757:17: ( ws )?
                    int alt155=2;
                    try { dbg.enterSubRule(155);
                    try { dbg.enterDecision(155, decisionCanBacktrack[155]);

                    int LA155_0 = input.LA(1);

                    if ( ((LA155_0>=WS && LA155_0<=COMMENT)) ) {
                        alt155=1;
                    }
                    } finally {dbg.exitDecision(155);}

                    switch (alt155) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:757:17: ws
                            {
                            dbg.location(757,17);
                            pushFollow(FOLLOW_ws_in_slAttribute3984);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(155);}

                    dbg.location(758,17);
                    pushFollow(FOLLOW_slAttributeValue_in_slAttribute4003);
                    slAttributeValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(759,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:759:17: ( ws )?
                    int alt156=2;
                    try { dbg.enterSubRule(156);
                    try { dbg.enterDecision(156, decisionCanBacktrack[156]);

                    int LA156_0 = input.LA(1);

                    if ( ((LA156_0>=WS && LA156_0<=COMMENT)) ) {
                        alt156=1;
                    }
                    } finally {dbg.exitDecision(156);}

                    switch (alt156) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:759:17: ws
                            {
                            dbg.location(759,17);
                            pushFollow(FOLLOW_ws_in_slAttribute4021);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(156);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(157);}

            dbg.location(762,7);
            match(input,RBRACKET,FOLLOW_RBRACKET_in_slAttribute4050); if (state.failed) return ;

            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(IDENT, LBRACE)); 
                
        }
        finally {
        }
        dbg.location(763, 1);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "slAttribute");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "slAttribute"


    // $ANTLR start "slAttributeName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:770:1: slAttributeName : IDENT ;
    public final void slAttributeName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "slAttributeName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(770, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:771:2: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:771:4: IDENT
            {
            dbg.location(771,4);
            match(input,IDENT,FOLLOW_IDENT_in_slAttributeName4066); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(772, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "slAttributeName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "slAttributeName"


    // $ANTLR start "slAttributeValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:774:1: slAttributeValue : ( IDENT | STRING ) ;
    public final void slAttributeValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "slAttributeValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(774, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:775:2: ( ( IDENT | STRING ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:776:2: ( IDENT | STRING )
            {
            dbg.location(776,2);
            if ( (input.LA(1)>=IDENT && input.LA(1)<=STRING) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(780, 9);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "slAttributeValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "slAttributeValue"


    // $ANTLR start "pseudo"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:1: pseudo : ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) ) ;
    public final void pseudo() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "pseudo");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(782, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:783:5: ( ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:783:7: ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) )
            {
            dbg.location(783,7);
            if ( input.LA(1)==COLON||input.LA(1)==DCOLON ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(784,14);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:784:14: ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) )
            int alt166=2;
            try { dbg.enterSubRule(166);
            try { dbg.enterDecision(166, decisionCanBacktrack[166]);

            int LA166_0 = input.LA(1);

            if ( (LA166_0==IDENT||LA166_0==GEN) ) {
                alt166=1;
            }
            else if ( (LA166_0==NOT) ) {
                alt166=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(166);}

            switch (alt166) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:785:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
                    {
                    dbg.location(785,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:785:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:786:21: ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
                    {
                    dbg.location(786,21);
                    if ( input.LA(1)==IDENT||input.LA(1)==GEN ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(787,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:787:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
                    int alt162=2;
                    try { dbg.enterSubRule(162);
                    try { dbg.enterDecision(162, decisionCanBacktrack[162]);

                    try {
                        isCyclicDecision = true;
                        alt162 = dfa162.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(162);}

                    switch (alt162) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:25: ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN
                            {
                            dbg.location(788,25);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:25: ( ws )?
                            int alt158=2;
                            try { dbg.enterSubRule(158);
                            try { dbg.enterDecision(158, decisionCanBacktrack[158]);

                            int LA158_0 = input.LA(1);

                            if ( ((LA158_0>=WS && LA158_0<=COMMENT)) ) {
                                alt158=1;
                            }
                            } finally {dbg.exitDecision(158);}

                            switch (alt158) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:25: ws
                                    {
                                    dbg.location(788,25);
                                    pushFollow(FOLLOW_ws_in_pseudo4261);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(158);}

                            dbg.location(788,29);
                            match(input,LPAREN,FOLLOW_LPAREN_in_pseudo4264); if (state.failed) return ;
                            dbg.location(788,36);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:36: ( ws )?
                            int alt159=2;
                            try { dbg.enterSubRule(159);
                            try { dbg.enterDecision(159, decisionCanBacktrack[159]);

                            int LA159_0 = input.LA(1);

                            if ( ((LA159_0>=WS && LA159_0<=COMMENT)) ) {
                                alt159=1;
                            }
                            } finally {dbg.exitDecision(159);}

                            switch (alt159) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:36: ws
                                    {
                                    dbg.location(788,36);
                                    pushFollow(FOLLOW_ws_in_pseudo4266);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(159);}

                            dbg.location(788,40);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:40: ( ( expression ( ws )? ) | STAR )?
                            int alt161=3;
                            try { dbg.enterSubRule(161);
                            try { dbg.enterDecision(161, decisionCanBacktrack[161]);

                            int LA161_0 = input.LA(1);

                            if ( (LA161_0==NAMESPACE_SYM||(LA161_0>=IDENT && LA161_0<=IMPORT_SYM)||LA161_0==MEDIA_SYM||LA161_0==GEN||(LA161_0>=AT_IDENT && LA161_0<=MOZ_DOCUMENT_SYM)||(LA161_0>=WEBKIT_KEYFRAMES_SYM && LA161_0<=RIGHTBOTTOM_SYM)||(LA161_0>=MINUS && LA161_0<=PLUS)||(LA161_0>=TILDE && LA161_0<=HASH)||(LA161_0>=SASS_VAR && LA161_0<=PERCENTAGE_SYMBOL)||(LA161_0>=SASS_CONTENT && LA161_0<=SASS_WHILE)) ) {
                                alt161=1;
                            }
                            else if ( (LA161_0==STAR) ) {
                                alt161=2;
                            }
                            } finally {dbg.exitDecision(161);}

                            switch (alt161) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:42: ( expression ( ws )? )
                                    {
                                    dbg.location(788,42);
                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:42: ( expression ( ws )? )
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:43: expression ( ws )?
                                    {
                                    dbg.location(788,43);
                                    pushFollow(FOLLOW_expression_in_pseudo4272);
                                    expression();

                                    state._fsp--;
                                    if (state.failed) return ;
                                    dbg.location(788,54);
                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:54: ( ws )?
                                    int alt160=2;
                                    try { dbg.enterSubRule(160);
                                    try { dbg.enterDecision(160, decisionCanBacktrack[160]);

                                    int LA160_0 = input.LA(1);

                                    if ( ((LA160_0>=WS && LA160_0<=COMMENT)) ) {
                                        alt160=1;
                                    }
                                    } finally {dbg.exitDecision(160);}

                                    switch (alt160) {
                                        case 1 :
                                            dbg.enterAlt(1);

                                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:54: ws
                                            {
                                            dbg.location(788,54);
                                            pushFollow(FOLLOW_ws_in_pseudo4274);
                                            ws();

                                            state._fsp--;
                                            if (state.failed) return ;

                                            }
                                            break;

                                    }
                                    } finally {dbg.exitSubRule(160);}


                                    }


                                    }
                                    break;
                                case 2 :
                                    dbg.enterAlt(2);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:61: STAR
                                    {
                                    dbg.location(788,61);
                                    match(input,STAR,FOLLOW_STAR_in_pseudo4280); if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(161);}

                            dbg.location(788,69);
                            match(input,RPAREN,FOLLOW_RPAREN_in_pseudo4285); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(162);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:17: ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN )
                    {
                    dbg.location(792,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:17: ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:19: NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN
                    {
                    dbg.location(792,19);
                    match(input,NOT,FOLLOW_NOT_in_pseudo4364); if (state.failed) return ;
                    dbg.location(792,23);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:23: ( ws )?
                    int alt163=2;
                    try { dbg.enterSubRule(163);
                    try { dbg.enterDecision(163, decisionCanBacktrack[163]);

                    int LA163_0 = input.LA(1);

                    if ( ((LA163_0>=WS && LA163_0<=COMMENT)) ) {
                        alt163=1;
                    }
                    } finally {dbg.exitDecision(163);}

                    switch (alt163) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:23: ws
                            {
                            dbg.location(792,23);
                            pushFollow(FOLLOW_ws_in_pseudo4366);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(163);}

                    dbg.location(792,27);
                    match(input,LPAREN,FOLLOW_LPAREN_in_pseudo4369); if (state.failed) return ;
                    dbg.location(792,34);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:34: ( ws )?
                    int alt164=2;
                    try { dbg.enterSubRule(164);
                    try { dbg.enterDecision(164, decisionCanBacktrack[164]);

                    int LA164_0 = input.LA(1);

                    if ( ((LA164_0>=WS && LA164_0<=COMMENT)) ) {
                        alt164=1;
                    }
                    } finally {dbg.exitDecision(164);}

                    switch (alt164) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:34: ws
                            {
                            dbg.location(792,34);
                            pushFollow(FOLLOW_ws_in_pseudo4371);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(164);}

                    dbg.location(792,38);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:38: ( simpleSelectorSequence )?
                    int alt165=2;
                    try { dbg.enterSubRule(165);
                    try { dbg.enterDecision(165, decisionCanBacktrack[165]);

                    int LA165_0 = input.LA(1);

                    if ( (LA165_0==IDENT||LA165_0==GEN||LA165_0==COLON||(LA165_0>=HASH_SYMBOL && LA165_0<=PIPE)||LA165_0==LESS_AND||LA165_0==AT_SIGN) ) {
                        alt165=1;
                    }
                    } finally {dbg.exitDecision(165);}

                    switch (alt165) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:38: simpleSelectorSequence
                            {
                            dbg.location(792,38);
                            pushFollow(FOLLOW_simpleSelectorSequence_in_pseudo4374);
                            simpleSelectorSequence();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(165);}

                    dbg.location(792,62);
                    match(input,RPAREN,FOLLOW_RPAREN_in_pseudo4377); if (state.failed) return ;

                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(166);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(794, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pseudo");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "pseudo"


    // $ANTLR start "propertyDeclaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:796:1: propertyDeclaration : ( ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? | {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue );
    public final void propertyDeclaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "propertyDeclaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(796, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:797:5: ( ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? | {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue )
            int alt175=2;
            try { dbg.enterDecision(175, decisionCanBacktrack[175]);

            try {
                isCyclicDecision = true;
                alt175 = dfa175.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(175);}

            switch (alt175) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:798:5: ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )?
                    {
                    dbg.location(798,5);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:798:5: ( STAR )?
                    int alt167=2;
                    try { dbg.enterSubRule(167);
                    try { dbg.enterDecision(167, decisionCanBacktrack[167]);

                    int LA167_0 = input.LA(1);

                    if ( (LA167_0==STAR) ) {
                        alt167=1;
                    }
                    } finally {dbg.exitDecision(167);}

                    switch (alt167) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:798:5: STAR
                            {
                            dbg.location(798,5);
                            match(input,STAR,FOLLOW_STAR_in_propertyDeclaration4416); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(167);}

                    dbg.location(798,11);
                    pushFollow(FOLLOW_property_in_propertyDeclaration4419);
                    property();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(798,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:798:20: ( ws )?
                    int alt168=2;
                    try { dbg.enterSubRule(168);
                    try { dbg.enterDecision(168, decisionCanBacktrack[168]);

                    int LA168_0 = input.LA(1);

                    if ( ((LA168_0>=WS && LA168_0<=COMMENT)) ) {
                        alt168=1;
                    }
                    } finally {dbg.exitDecision(168);}

                    switch (alt168) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:798:20: ws
                            {
                            dbg.location(798,20);
                            pushFollow(FOLLOW_ws_in_propertyDeclaration4421);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(168);}

                    dbg.location(798,24);
                    match(input,COLON,FOLLOW_COLON_in_propertyDeclaration4424); if (state.failed) return ;
                    dbg.location(798,30);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:798:30: ( ws )?
                    int alt169=2;
                    try { dbg.enterSubRule(169);
                    try { dbg.enterDecision(169, decisionCanBacktrack[169]);

                    int LA169_0 = input.LA(1);

                    if ( ((LA169_0>=WS && LA169_0<=COMMENT)) ) {
                        alt169=1;
                    }
                    } finally {dbg.exitDecision(169);}

                    switch (alt169) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:798:30: ws
                            {
                            dbg.location(798,30);
                            pushFollow(FOLLOW_ws_in_propertyDeclaration4426);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(169);}

                    dbg.location(798,34);
                    pushFollow(FOLLOW_propertyValue_in_propertyDeclaration4429);
                    propertyValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(798,48);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:798:48: ( ( ws )? prio )?
                    int alt171=2;
                    try { dbg.enterSubRule(171);
                    try { dbg.enterDecision(171, decisionCanBacktrack[171]);

                    try {
                        isCyclicDecision = true;
                        alt171 = dfa171.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(171);}

                    switch (alt171) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:798:49: ( ws )? prio
                            {
                            dbg.location(798,49);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:798:49: ( ws )?
                            int alt170=2;
                            try { dbg.enterSubRule(170);
                            try { dbg.enterDecision(170, decisionCanBacktrack[170]);

                            int LA170_0 = input.LA(1);

                            if ( ((LA170_0>=WS && LA170_0<=COMMENT)) ) {
                                alt170=1;
                            }
                            } finally {dbg.exitDecision(170);}

                            switch (alt170) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:798:49: ws
                                    {
                                    dbg.location(798,49);
                                    pushFollow(FOLLOW_ws_in_propertyDeclaration4432);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(170);}

                            dbg.location(798,53);
                            pushFollow(FOLLOW_prio_in_propertyDeclaration4435);
                            prio();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(171);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:799:7: {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue
                    {
                    dbg.location(799,7);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "propertyDeclaration", "isCssPreprocessorSource()");
                    }
                    dbg.location(799,36);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:799:36: ( STAR )?
                    int alt172=2;
                    try { dbg.enterSubRule(172);
                    try { dbg.enterDecision(172, decisionCanBacktrack[172]);

                    int LA172_0 = input.LA(1);

                    if ( (LA172_0==STAR) ) {
                        alt172=1;
                    }
                    } finally {dbg.exitDecision(172);}

                    switch (alt172) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:799:36: STAR
                            {
                            dbg.location(799,36);
                            match(input,STAR,FOLLOW_STAR_in_propertyDeclaration4447); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(172);}

                    dbg.location(799,42);
                    pushFollow(FOLLOW_property_in_propertyDeclaration4450);
                    property();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(799,51);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:799:51: ( ws )?
                    int alt173=2;
                    try { dbg.enterSubRule(173);
                    try { dbg.enterDecision(173, decisionCanBacktrack[173]);

                    int LA173_0 = input.LA(1);

                    if ( ((LA173_0>=WS && LA173_0<=COMMENT)) ) {
                        alt173=1;
                    }
                    } finally {dbg.exitDecision(173);}

                    switch (alt173) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:799:51: ws
                            {
                            dbg.location(799,51);
                            pushFollow(FOLLOW_ws_in_propertyDeclaration4452);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(173);}

                    dbg.location(799,55);
                    match(input,COLON,FOLLOW_COLON_in_propertyDeclaration4455); if (state.failed) return ;
                    dbg.location(799,61);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:799:61: ( ws )?
                    int alt174=2;
                    try { dbg.enterSubRule(174);
                    try { dbg.enterDecision(174, decisionCanBacktrack[174]);

                    int LA174_0 = input.LA(1);

                    if ( ((LA174_0>=WS && LA174_0<=COMMENT)) ) {
                        alt174=1;
                    }
                    } finally {dbg.exitDecision(174);}

                    switch (alt174) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:799:61: ws
                            {
                            dbg.location(799,61);
                            pushFollow(FOLLOW_ws_in_propertyDeclaration4457);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(174);}

                    dbg.location(799,65);
                    pushFollow(FOLLOW_cp_propertyValue_in_propertyDeclaration4460);
                    cp_propertyValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    //recovery: if an mismatched token occures inside a declaration is found,
                    //then skip all tokens until an end of the rule is found represented by right curly brace
                    consumeUntil(input, BitSet.of(SEMI, RBRACE)); 
                
        }
        finally {
        }
        dbg.location(800, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "propertyDeclaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "propertyDeclaration"


    // $ANTLR start "cp_propertyValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:809:1: cp_propertyValue : ({...}? cp_expression_list | propertyValue );
    public final void cp_propertyValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_propertyValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(809, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:810:5: ({...}? cp_expression_list | propertyValue )
            int alt176=2;
            try { dbg.enterDecision(176, decisionCanBacktrack[176]);

            try {
                isCyclicDecision = true;
                alt176 = dfa176.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(176);}

            switch (alt176) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:811:5: {...}? cp_expression_list
                    {
                    dbg.location(811,5);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_propertyValue", "isCssPreprocessorSource()");
                    }
                    dbg.location(811,34);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_propertyValue4495);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:812:7: propertyValue
                    {
                    dbg.location(812,7);
                    pushFollow(FOLLOW_propertyValue_in_cp_propertyValue4503);
                    propertyValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(813, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_propertyValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_propertyValue"


    // $ANTLR start "propertyValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:815:1: propertyValue : expression ;
    public final void propertyValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "propertyValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(815, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:816:2: ( expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:9: expression
            {
            dbg.location(817,9);
            pushFollow(FOLLOW_expression_in_propertyValue4525);
            expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(818, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "propertyValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "propertyValue"


    // $ANTLR start "expressionPredicate"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:1: expressionPredicate options {k=1; } : (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) ;
    public final void expressionPredicate() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "expressionPredicate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(821, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:823:5: ( (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:824:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE )
            {
            dbg.location(824,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:824:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+
            int cnt177=0;
            try { dbg.enterSubRule(177);

            loop177:
            do {
                int alt177=2;
                try { dbg.enterDecision(177, decisionCanBacktrack[177]);

                int LA177_0 = input.LA(1);

                if ( (LA177_0==NAMESPACE_SYM||(LA177_0>=IDENT && LA177_0<=MEDIA_SYM)||(LA177_0>=IMPORTANT_SYM && LA177_0<=COLON)||(LA177_0>=MOZ_DOCUMENT_SYM && LA177_0<=RIGHTBOTTOM_SYM)||(LA177_0>=MINUS && LA177_0<=SASS_EXTEND_ONLY_SELECTOR)||(LA177_0>=PIPE && LA177_0<=RBRACKET)||(LA177_0>=NUMBER && LA177_0<=LINE_COMMENT)) ) {
                    alt177=1;
                }


                } finally {dbg.exitDecision(177);}

                switch (alt177) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:824:7: ~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR )
            	    {
            	    dbg.location(824,7);
            	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=COLON)||(input.LA(1)>=MOZ_DOCUMENT_SYM && input.LA(1)<=RIGHTBOTTOM_SYM)||(input.LA(1)>=MINUS && input.LA(1)<=SASS_EXTEND_ONLY_SELECTOR)||(input.LA(1)>=PIPE && input.LA(1)<=RBRACKET)||(input.LA(1)>=NUMBER && input.LA(1)<=LINE_COMMENT) ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt177 >= 1 ) break loop177;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(177, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt177++;
            } while (true);
            } finally {dbg.exitSubRule(177);}

            dbg.location(824,76);
            if ( input.LA(1)==SEMI||input.LA(1)==RBRACE ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(825, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "expressionPredicate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "expressionPredicate"


    // $ANTLR start "syncToDeclarationsRule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:829:1: syncToDeclarationsRule : ;
    public final void syncToDeclarationsRule() throws RecognitionException {

                //why sync to DOT? - LESS allows class rules nested
                syncToSet(BitSet.of(IDENT, RBRACE, STAR, DOT)); 
            
        try { dbg.enterRule(getGrammarFileName(), "syncToDeclarationsRule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(829, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:834:6: ()
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:835:6: 
            {
            }

        }
        finally {
        }
        dbg.location(835, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncToDeclarationsRule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncToDeclarationsRule"


    // $ANTLR start "syncTo_RBRACE"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:837:1: syncTo_RBRACE : ;
    public final void syncTo_RBRACE() throws RecognitionException {

                syncToRBRACE(1); //initial nest == 1
            
        try { dbg.enterRule(getGrammarFileName(), "syncTo_RBRACE");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(837, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:841:6: ()
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:842:6: 
            {
            }

        }
        finally {
        }
        dbg.location(842, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncTo_RBRACE");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncTo_RBRACE"


    // $ANTLR start "syncTo_SEMI"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:844:1: syncTo_SEMI : SEMI ;
    public final void syncTo_SEMI() throws RecognitionException {

                syncToSet(BitSet.of(SEMI)); 
            
        try { dbg.enterRule(getGrammarFileName(), "syncTo_SEMI");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(844, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:848:6: ( SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:849:13: SEMI
            {
            dbg.location(849,13);
            match(input,SEMI,FOLLOW_SEMI_in_syncTo_SEMI4712); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(850, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncTo_SEMI");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncTo_SEMI"


    // $ANTLR start "syncToFollow"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:853:1: syncToFollow : ;
    public final void syncToFollow() throws RecognitionException {

                syncToSet();
            
        try { dbg.enterRule(getGrammarFileName(), "syncToFollow");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(853, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:857:6: ()
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:858:6: 
            {
            }

        }
        finally {
        }
        dbg.location(858, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncToFollow");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncToFollow"


    // $ANTLR start "prio"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:860:1: prio : IMPORTANT_SYM ;
    public final void prio() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "prio");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(860, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:5: ( IMPORTANT_SYM )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:7: IMPORTANT_SYM
            {
            dbg.location(861,7);
            match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_prio4767); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(862, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prio");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "prio"


    // $ANTLR start "expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:864:1: expression : term ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )* ;
    public final void expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(864, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:5: ( term ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:7: term ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )*
            {
            dbg.location(865,7);
            pushFollow(FOLLOW_term_in_expression4788);
            term();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(865,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:12: ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )*
            try { dbg.enterSubRule(181);

            loop181:
            do {
                int alt181=2;
                try { dbg.enterDecision(181, decisionCanBacktrack[181]);

                try {
                    isCyclicDecision = true;
                    alt181 = dfa181.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(181);}

                switch (alt181) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:14: ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term
            	    {
            	    dbg.location(865,66);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:66: ( ws | ( ( ws )? operator ( ws )? ) | )
            	    int alt180=3;
            	    try { dbg.enterSubRule(180);
            	    try { dbg.enterDecision(180, decisionCanBacktrack[180]);

            	    try {
            	        isCyclicDecision = true;
            	        alt180 = dfa180.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(180);}

            	    switch (alt180) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:68: ws
            	            {
            	            dbg.location(865,68);
            	            pushFollow(FOLLOW_ws_in_expression4820);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:73: ( ( ws )? operator ( ws )? )
            	            {
            	            dbg.location(865,73);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:73: ( ( ws )? operator ( ws )? )
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:74: ( ws )? operator ( ws )?
            	            {
            	            dbg.location(865,74);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:74: ( ws )?
            	            int alt178=2;
            	            try { dbg.enterSubRule(178);
            	            try { dbg.enterDecision(178, decisionCanBacktrack[178]);

            	            int LA178_0 = input.LA(1);

            	            if ( ((LA178_0>=WS && LA178_0<=COMMENT)) ) {
            	                alt178=1;
            	            }
            	            } finally {dbg.exitDecision(178);}

            	            switch (alt178) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:74: ws
            	                    {
            	                    dbg.location(865,74);
            	                    pushFollow(FOLLOW_ws_in_expression4825);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(178);}

            	            dbg.location(865,78);
            	            pushFollow(FOLLOW_operator_in_expression4828);
            	            operator();

            	            state._fsp--;
            	            if (state.failed) return ;
            	            dbg.location(865,87);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:87: ( ws )?
            	            int alt179=2;
            	            try { dbg.enterSubRule(179);
            	            try { dbg.enterDecision(179, decisionCanBacktrack[179]);

            	            int LA179_0 = input.LA(1);

            	            if ( ((LA179_0>=WS && LA179_0<=COMMENT)) ) {
            	                alt179=1;
            	            }
            	            } finally {dbg.exitDecision(179);}

            	            switch (alt179) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:87: ws
            	                    {
            	                    dbg.location(865,87);
            	                    pushFollow(FOLLOW_ws_in_expression4830);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(179);}


            	            }


            	            }
            	            break;
            	        case 3 :
            	            dbg.enterAlt(3);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:107: 
            	            {
            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(180);}

            	    dbg.location(865,109);
            	    pushFollow(FOLLOW_term_in_expression4839);
            	    term();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop181;
                }
            } while (true);
            } finally {dbg.exitSubRule(181);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(866, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "expression"


    // $ANTLR start "term"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:868:1: term : ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | {...}? TILDE STRING | {...}? LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol ) ;
    public final void term() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "term");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(868, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:5: ( ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | {...}? TILDE STRING | {...}? LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:870:5: ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | {...}? TILDE STRING | {...}? LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol )
            {
            dbg.location(870,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:870:5: ( unaryOperator ( ws )? )?
            int alt183=2;
            try { dbg.enterSubRule(183);
            try { dbg.enterDecision(183, decisionCanBacktrack[183]);

            int LA183_0 = input.LA(1);

            if ( ((LA183_0>=MINUS && LA183_0<=PLUS)) ) {
                alt183=1;
            }
            } finally {dbg.exitDecision(183);}

            switch (alt183) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:870:7: unaryOperator ( ws )?
                    {
                    dbg.location(870,7);
                    pushFollow(FOLLOW_unaryOperator_in_term4869);
                    unaryOperator();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(870,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:870:21: ( ws )?
                    int alt182=2;
                    try { dbg.enterSubRule(182);
                    try { dbg.enterDecision(182, decisionCanBacktrack[182]);

                    int LA182_0 = input.LA(1);

                    if ( ((LA182_0>=WS && LA182_0<=COMMENT)) ) {
                        alt182=1;
                    }
                    } finally {dbg.exitDecision(182);}

                    switch (alt182) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:870:21: ws
                            {
                            dbg.location(870,21);
                            pushFollow(FOLLOW_ws_in_term4871);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(182);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(183);}

            dbg.location(871,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:871:5: ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | {...}? TILDE STRING | {...}? LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol )
            int alt184=22;
            try { dbg.enterSubRule(184);
            try { dbg.enterDecision(184, decisionCanBacktrack[184]);

            try {
                isCyclicDecision = true;
                alt184 = dfa184.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(184);}

            switch (alt184) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:872:9: ( functionName ( ws )? LPAREN )=> function
                    {
                    dbg.location(872,36);
                    pushFollow(FOLLOW_function_in_term4900);
                    function();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:873:11: IDENT
                    {
                    dbg.location(873,11);
                    match(input,IDENT,FOLLOW_IDENT_in_term4913); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:874:11: NUMBER
                    {
                    dbg.location(874,11);
                    match(input,NUMBER,FOLLOW_NUMBER_in_term4925); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:875:11: PERCENTAGE
                    {
                    dbg.location(875,11);
                    match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_term4937); if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:876:11: LENGTH
                    {
                    dbg.location(876,11);
                    match(input,LENGTH,FOLLOW_LENGTH_in_term4949); if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:877:11: EMS
                    {
                    dbg.location(877,11);
                    match(input,EMS,FOLLOW_EMS_in_term4961); if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:878:11: REM
                    {
                    dbg.location(878,11);
                    match(input,REM,FOLLOW_REM_in_term4973); if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:879:11: EXS
                    {
                    dbg.location(879,11);
                    match(input,EXS,FOLLOW_EXS_in_term4985); if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:880:11: ANGLE
                    {
                    dbg.location(880,11);
                    match(input,ANGLE,FOLLOW_ANGLE_in_term4997); if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:881:11: TIME
                    {
                    dbg.location(881,11);
                    match(input,TIME,FOLLOW_TIME_in_term5009); if (state.failed) return ;

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:882:11: FREQ
                    {
                    dbg.location(882,11);
                    match(input,FREQ,FOLLOW_FREQ_in_term5021); if (state.failed) return ;

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:883:11: RESOLUTION
                    {
                    dbg.location(883,11);
                    match(input,RESOLUTION,FOLLOW_RESOLUTION_in_term5033); if (state.failed) return ;

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:884:11: DIMENSION
                    {
                    dbg.location(884,11);
                    match(input,DIMENSION,FOLLOW_DIMENSION_in_term5045); if (state.failed) return ;

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:885:11: STRING
                    {
                    dbg.location(885,11);
                    match(input,STRING,FOLLOW_STRING_in_term5062); if (state.failed) return ;

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:886:11: {...}? TILDE STRING
                    {
                    dbg.location(886,11);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isLessSource()");
                    }
                    dbg.location(886,29);
                    match(input,TILDE,FOLLOW_TILDE_in_term5076); if (state.failed) return ;
                    dbg.location(886,35);
                    match(input,STRING,FOLLOW_STRING_in_term5078); if (state.failed) return ;

                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:887:11: {...}? LESS_JS_STRING
                    {
                    dbg.location(887,11);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isLessSource()");
                    }
                    dbg.location(887,29);
                    match(input,LESS_JS_STRING,FOLLOW_LESS_JS_STRING_in_term5093); if (state.failed) return ;

                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:888:11: GEN
                    {
                    dbg.location(888,11);
                    match(input,GEN,FOLLOW_GEN_in_term5105); if (state.failed) return ;

                    }
                    break;
                case 18 :
                    dbg.enterAlt(18);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:889:11: URI
                    {
                    dbg.location(889,11);
                    match(input,URI,FOLLOW_URI_in_term5117); if (state.failed) return ;

                    }
                    break;
                case 19 :
                    dbg.enterAlt(19);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:890:11: hexColor
                    {
                    dbg.location(890,11);
                    pushFollow(FOLLOW_hexColor_in_term5129);
                    hexColor();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 20 :
                    dbg.enterAlt(20);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:891:11: {...}? cp_variable
                    {
                    dbg.location(891,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
                    }
                    dbg.location(891,40);
                    pushFollow(FOLLOW_cp_variable_in_term5143);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 21 :
                    dbg.enterAlt(21);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:892:11: {...}? sass_interpolation_expression_var
                    {
                    dbg.location(892,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
                    }
                    dbg.location(892,40);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_term5157);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 22 :
                    dbg.enterAlt(22);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:893:11: {...}? cp_term_symbol
                    {
                    dbg.location(893,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
                    }
                    dbg.location(893,40);
                    pushFollow(FOLLOW_cp_term_symbol_in_term5171);
                    cp_term_symbol();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(184);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(895, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "term");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "term"


    // $ANTLR start "cp_term_symbol"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:900:1: cp_term_symbol : PERCENTAGE_SYMBOL ;
    public final void cp_term_symbol() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_term_symbol");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(900, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:901:5: ( PERCENTAGE_SYMBOL )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:901:7: PERCENTAGE_SYMBOL
            {
            dbg.location(901,7);
            match(input,PERCENTAGE_SYMBOL,FOLLOW_PERCENTAGE_SYMBOL_in_cp_term_symbol5198); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(902, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_term_symbol");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_term_symbol"


    // $ANTLR start "function"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:904:1: function : functionName ( ws )? LPAREN ( ws )? ( fnAttributes | ) RPAREN ;
    public final void function() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "function");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(904, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:2: ( functionName ( ws )? LPAREN ( ws )? ( fnAttributes | ) RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:5: functionName ( ws )? LPAREN ( ws )? ( fnAttributes | ) RPAREN
            {
            dbg.location(905,5);
            pushFollow(FOLLOW_functionName_in_function5214);
            functionName();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(905,18);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:18: ( ws )?
            int alt185=2;
            try { dbg.enterSubRule(185);
            try { dbg.enterDecision(185, decisionCanBacktrack[185]);

            int LA185_0 = input.LA(1);

            if ( ((LA185_0>=WS && LA185_0<=COMMENT)) ) {
                alt185=1;
            }
            } finally {dbg.exitDecision(185);}

            switch (alt185) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:18: ws
                    {
                    dbg.location(905,18);
                    pushFollow(FOLLOW_ws_in_function5216);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(185);}

            dbg.location(906,3);
            match(input,LPAREN,FOLLOW_LPAREN_in_function5221); if (state.failed) return ;
            dbg.location(906,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:906:10: ( ws )?
            int alt186=2;
            try { dbg.enterSubRule(186);
            try { dbg.enterDecision(186, decisionCanBacktrack[186]);

            int LA186_0 = input.LA(1);

            if ( ((LA186_0>=WS && LA186_0<=COMMENT)) ) {
                alt186=1;
            }
            } finally {dbg.exitDecision(186);}

            switch (alt186) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:906:10: ws
                    {
                    dbg.location(906,10);
                    pushFollow(FOLLOW_ws_in_function5223);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(186);}

            dbg.location(907,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:907:3: ( fnAttributes | )
            int alt187=2;
            try { dbg.enterSubRule(187);
            try { dbg.enterDecision(187, decisionCanBacktrack[187]);

            int LA187_0 = input.LA(1);

            if ( (LA187_0==NAMESPACE_SYM||(LA187_0>=IDENT && LA187_0<=IMPORT_SYM)||LA187_0==MEDIA_SYM||LA187_0==IMPORTANT_SYM||(LA187_0>=NOT && LA187_0<=LPAREN)||(LA187_0>=AT_IDENT && LA187_0<=MOZ_DOCUMENT_SYM)||(LA187_0>=WEBKIT_KEYFRAMES_SYM && LA187_0<=RIGHTBOTTOM_SYM)||(LA187_0>=MINUS && LA187_0<=PLUS)||(LA187_0>=TILDE && LA187_0<=HASH)||(LA187_0>=SASS_VAR && LA187_0<=PERCENTAGE_SYMBOL)||(LA187_0>=SASS_CONTENT && LA187_0<=SASS_WHILE)) ) {
                alt187=1;
            }
            else if ( (LA187_0==RPAREN) ) {
                alt187=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 187, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(187);}

            switch (alt187) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:908:21: fnAttributes
                    {
                    dbg.location(908,21);
                    pushFollow(FOLLOW_fnAttributes_in_function5250);
                    fnAttributes();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:910:3: 
                    {
                    }
                    break;

            }
            } finally {dbg.exitSubRule(187);}

            dbg.location(911,3);
            match(input,RPAREN,FOLLOW_RPAREN_in_function5281); if (state.failed) return ;

            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(RPAREN, SEMI, RBRACE)); 

        }
        finally {
        }
        dbg.location(912, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "function");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "function"


    // $ANTLR start "functionName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:1: functionName : ( IDENT COLON )? IDENT ( DOT IDENT )* ;
    public final void functionName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "functionName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(918, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:922:2: ( ( IDENT COLON )? IDENT ( DOT IDENT )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:923:9: ( IDENT COLON )? IDENT ( DOT IDENT )*
            {
            dbg.location(923,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:923:9: ( IDENT COLON )?
            int alt188=2;
            try { dbg.enterSubRule(188);
            try { dbg.enterDecision(188, decisionCanBacktrack[188]);

            int LA188_0 = input.LA(1);

            if ( (LA188_0==IDENT) ) {
                int LA188_1 = input.LA(2);

                if ( (LA188_1==COLON) ) {
                    alt188=1;
                }
            }
            } finally {dbg.exitDecision(188);}

            switch (alt188) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:923:10: IDENT COLON
                    {
                    dbg.location(923,10);
                    match(input,IDENT,FOLLOW_IDENT_in_functionName5338); if (state.failed) return ;
                    dbg.location(923,16);
                    match(input,COLON,FOLLOW_COLON_in_functionName5340); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(188);}

            dbg.location(923,24);
            match(input,IDENT,FOLLOW_IDENT_in_functionName5344); if (state.failed) return ;
            dbg.location(923,30);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:923:30: ( DOT IDENT )*
            try { dbg.enterSubRule(189);

            loop189:
            do {
                int alt189=2;
                try { dbg.enterDecision(189, decisionCanBacktrack[189]);

                int LA189_0 = input.LA(1);

                if ( (LA189_0==DOT) ) {
                    alt189=1;
                }


                } finally {dbg.exitDecision(189);}

                switch (alt189) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:923:31: DOT IDENT
            	    {
            	    dbg.location(923,31);
            	    match(input,DOT,FOLLOW_DOT_in_functionName5347); if (state.failed) return ;
            	    dbg.location(923,35);
            	    match(input,IDENT,FOLLOW_IDENT_in_functionName5349); if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop189;
                }
            } while (true);
            } finally {dbg.exitSubRule(189);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(924, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "functionName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "functionName"


    // $ANTLR start "fnAttributes"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:926:1: fnAttributes : fnAttribute ( ( ws )? COMMA ( ws )? fnAttribute )* ( ws )? ;
    public final void fnAttributes() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttributes");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(926, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:927:5: ( fnAttribute ( ( ws )? COMMA ( ws )? fnAttribute )* ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:5: fnAttribute ( ( ws )? COMMA ( ws )? fnAttribute )* ( ws )?
            {
            dbg.location(928,5);
            pushFollow(FOLLOW_fnAttribute_in_fnAttributes5373);
            fnAttribute();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(928,17);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:17: ( ( ws )? COMMA ( ws )? fnAttribute )*
            try { dbg.enterSubRule(192);

            loop192:
            do {
                int alt192=2;
                try { dbg.enterDecision(192, decisionCanBacktrack[192]);

                try {
                    isCyclicDecision = true;
                    alt192 = dfa192.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(192);}

                switch (alt192) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:18: ( ws )? COMMA ( ws )? fnAttribute
            	    {
            	    dbg.location(928,18);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:18: ( ws )?
            	    int alt190=2;
            	    try { dbg.enterSubRule(190);
            	    try { dbg.enterDecision(190, decisionCanBacktrack[190]);

            	    int LA190_0 = input.LA(1);

            	    if ( ((LA190_0>=WS && LA190_0<=COMMENT)) ) {
            	        alt190=1;
            	    }
            	    } finally {dbg.exitDecision(190);}

            	    switch (alt190) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:18: ws
            	            {
            	            dbg.location(928,18);
            	            pushFollow(FOLLOW_ws_in_fnAttributes5376);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(190);}

            	    dbg.location(928,22);
            	    match(input,COMMA,FOLLOW_COMMA_in_fnAttributes5379); if (state.failed) return ;
            	    dbg.location(928,28);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:28: ( ws )?
            	    int alt191=2;
            	    try { dbg.enterSubRule(191);
            	    try { dbg.enterDecision(191, decisionCanBacktrack[191]);

            	    int LA191_0 = input.LA(1);

            	    if ( ((LA191_0>=WS && LA191_0<=COMMENT)) ) {
            	        alt191=1;
            	    }
            	    } finally {dbg.exitDecision(191);}

            	    switch (alt191) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:28: ws
            	            {
            	            dbg.location(928,28);
            	            pushFollow(FOLLOW_ws_in_fnAttributes5381);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(191);}

            	    dbg.location(928,32);
            	    pushFollow(FOLLOW_fnAttribute_in_fnAttributes5384);
            	    fnAttribute();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop192;
                }
            } while (true);
            } finally {dbg.exitSubRule(192);}

            dbg.location(928,46);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:46: ( ws )?
            int alt193=2;
            try { dbg.enterSubRule(193);
            try { dbg.enterDecision(193, decisionCanBacktrack[193]);

            int LA193_0 = input.LA(1);

            if ( ((LA193_0>=WS && LA193_0<=COMMENT)) ) {
                alt193=1;
            }
            } finally {dbg.exitDecision(193);}

            switch (alt193) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:46: ws
                    {
                    dbg.location(928,46);
                    pushFollow(FOLLOW_ws_in_fnAttributes5388);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(193);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(929, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttributes");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttributes"


    // $ANTLR start "fnAttribute"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:931:1: fnAttribute : ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | {...}? cp_expression | expression );
    public final void fnAttribute() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttribute");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(931, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:932:2: ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | {...}? cp_expression | expression )
            int alt196=3;
            try { dbg.enterDecision(196, decisionCanBacktrack[196]);

            try {
                isCyclicDecision = true;
                alt196 = dfa196.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(196);}

            switch (alt196) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:933:9: ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue
                    {
                    dbg.location(933,46);
                    pushFollow(FOLLOW_fnAttributeName_in_fnAttribute5426);
                    fnAttributeName();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(933,62);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:933:62: ( ws )?
                    int alt194=2;
                    try { dbg.enterSubRule(194);
                    try { dbg.enterDecision(194, decisionCanBacktrack[194]);

                    int LA194_0 = input.LA(1);

                    if ( ((LA194_0>=WS && LA194_0<=COMMENT)) ) {
                        alt194=1;
                    }
                    } finally {dbg.exitDecision(194);}

                    switch (alt194) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:933:62: ws
                            {
                            dbg.location(933,62);
                            pushFollow(FOLLOW_ws_in_fnAttribute5428);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(194);}

                    dbg.location(933,66);
                    if ( input.LA(1)==COLON||input.LA(1)==OPEQ ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(933,79);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:933:79: ( ws )?
                    int alt195=2;
                    try { dbg.enterSubRule(195);
                    try { dbg.enterDecision(195, decisionCanBacktrack[195]);

                    int LA195_0 = input.LA(1);

                    if ( ((LA195_0>=WS && LA195_0<=COMMENT)) ) {
                        alt195=1;
                    }
                    } finally {dbg.exitDecision(195);}

                    switch (alt195) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:933:79: ws
                            {
                            dbg.location(933,79);
                            pushFollow(FOLLOW_ws_in_fnAttribute5437);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(195);}

                    dbg.location(933,83);
                    pushFollow(FOLLOW_fnAttributeValue_in_fnAttribute5440);
                    fnAttributeValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:11: {...}? cp_expression
                    {
                    dbg.location(934,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "fnAttribute", "isCssPreprocessorSource()");
                    }
                    dbg.location(934,40);
                    pushFollow(FOLLOW_cp_expression_in_fnAttribute5454);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:935:11: expression
                    {
                    dbg.location(935,11);
                    pushFollow(FOLLOW_expression_in_fnAttribute5466);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(936, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttribute");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttribute"


    // $ANTLR start "fnAttributeName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:938:1: fnAttributeName : ( IDENT ( DOT IDENT )* | {...}? cp_variable );
    public final void fnAttributeName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttributeName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(938, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:939:2: ( IDENT ( DOT IDENT )* | {...}? cp_variable )
            int alt198=2;
            try { dbg.enterDecision(198, decisionCanBacktrack[198]);

            int LA198_0 = input.LA(1);

            if ( (LA198_0==IDENT) ) {
                alt198=1;
            }
            else if ( (LA198_0==NAMESPACE_SYM||(LA198_0>=CHARSET_SYM && LA198_0<=IMPORT_SYM)||LA198_0==MEDIA_SYM||(LA198_0>=AT_IDENT && LA198_0<=MOZ_DOCUMENT_SYM)||LA198_0==WEBKIT_KEYFRAMES_SYM||(LA198_0>=PAGE_SYM && LA198_0<=RIGHTBOTTOM_SYM)||LA198_0==SASS_VAR||(LA198_0>=SASS_CONTENT && LA198_0<=SASS_WHILE)) ) {
                alt198=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 198, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(198);}

            switch (alt198) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:13: IDENT ( DOT IDENT )*
                    {
                    dbg.location(940,13);
                    match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName5494); if (state.failed) return ;
                    dbg.location(940,19);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:19: ( DOT IDENT )*
                    try { dbg.enterSubRule(197);

                    loop197:
                    do {
                        int alt197=2;
                        try { dbg.enterDecision(197, decisionCanBacktrack[197]);

                        int LA197_0 = input.LA(1);

                        if ( (LA197_0==DOT) ) {
                            alt197=1;
                        }


                        } finally {dbg.exitDecision(197);}

                        switch (alt197) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:20: DOT IDENT
                    	    {
                    	    dbg.location(940,20);
                    	    match(input,DOT,FOLLOW_DOT_in_fnAttributeName5497); if (state.failed) return ;
                    	    dbg.location(940,24);
                    	    match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName5499); if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop197;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(197);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:941:15: {...}? cp_variable
                    {
                    dbg.location(941,15);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "fnAttributeName", "isCssPreprocessorSource()");
                    }
                    dbg.location(941,44);
                    pushFollow(FOLLOW_cp_variable_in_fnAttributeName5519);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(942, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttributeName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttributeName"


    // $ANTLR start "fnAttributeValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:944:1: fnAttributeValue : ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )* | {...}? cp_math_expression );
    public final void fnAttributeValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttributeValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(944, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:945:2: ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )* | {...}? cp_math_expression )
            int alt203=2;
            try { dbg.enterDecision(203, decisionCanBacktrack[203]);

            try {
                isCyclicDecision = true;
                alt203 = dfa203.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(203);}

            switch (alt203) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:13: term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )*
                    {
                    dbg.location(946,13);
                    pushFollow(FOLLOW_term_in_fnAttributeValue5544);
                    term();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(946,18);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:18: ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )*
                    try { dbg.enterSubRule(202);

                    loop202:
                    do {
                        int alt202=2;
                        try { dbg.enterDecision(202, decisionCanBacktrack[202]);

                        try {
                            isCyclicDecision = true;
                            alt202 = dfa202.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(202);}

                        switch (alt202) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:20: ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term
                    	    {
                    	    dbg.location(946,71);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:71: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )
                    	    int alt201=3;
                    	    try { dbg.enterSubRule(201);
                    	    try { dbg.enterDecision(201, decisionCanBacktrack[201]);

                    	    try {
                    	        isCyclicDecision = true;
                    	        alt201 = dfa201.predict(input);
                    	    }
                    	    catch (NoViableAltException nvae) {
                    	        dbg.recognitionException(nvae);
                    	        throw nvae;
                    	    }
                    	    } finally {dbg.exitDecision(201);}

                    	    switch (alt201) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:73: ws
                    	            {
                    	            dbg.location(946,73);
                    	            pushFollow(FOLLOW_ws_in_fnAttributeValue5576);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;
                    	        case 2 :
                    	            dbg.enterAlt(2);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:78: ( ( ws )? SOLIDUS ( ws )? )
                    	            {
                    	            dbg.location(946,78);
                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:78: ( ( ws )? SOLIDUS ( ws )? )
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:79: ( ws )? SOLIDUS ( ws )?
                    	            {
                    	            dbg.location(946,79);
                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:79: ( ws )?
                    	            int alt199=2;
                    	            try { dbg.enterSubRule(199);
                    	            try { dbg.enterDecision(199, decisionCanBacktrack[199]);

                    	            int LA199_0 = input.LA(1);

                    	            if ( ((LA199_0>=WS && LA199_0<=COMMENT)) ) {
                    	                alt199=1;
                    	            }
                    	            } finally {dbg.exitDecision(199);}

                    	            switch (alt199) {
                    	                case 1 :
                    	                    dbg.enterAlt(1);

                    	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:79: ws
                    	                    {
                    	                    dbg.location(946,79);
                    	                    pushFollow(FOLLOW_ws_in_fnAttributeValue5581);
                    	                    ws();

                    	                    state._fsp--;
                    	                    if (state.failed) return ;

                    	                    }
                    	                    break;

                    	            }
                    	            } finally {dbg.exitSubRule(199);}

                    	            dbg.location(946,83);
                    	            match(input,SOLIDUS,FOLLOW_SOLIDUS_in_fnAttributeValue5584); if (state.failed) return ;
                    	            dbg.location(946,91);
                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:91: ( ws )?
                    	            int alt200=2;
                    	            try { dbg.enterSubRule(200);
                    	            try { dbg.enterDecision(200, decisionCanBacktrack[200]);

                    	            int LA200_0 = input.LA(1);

                    	            if ( ((LA200_0>=WS && LA200_0<=COMMENT)) ) {
                    	                alt200=1;
                    	            }
                    	            } finally {dbg.exitDecision(200);}

                    	            switch (alt200) {
                    	                case 1 :
                    	                    dbg.enterAlt(1);

                    	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:91: ws
                    	                    {
                    	                    dbg.location(946,91);
                    	                    pushFollow(FOLLOW_ws_in_fnAttributeValue5586);
                    	                    ws();

                    	                    state._fsp--;
                    	                    if (state.failed) return ;

                    	                    }
                    	                    break;

                    	            }
                    	            } finally {dbg.exitSubRule(200);}


                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            dbg.enterAlt(3);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:111: 
                    	            {
                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(201);}

                    	    dbg.location(946,113);
                    	    pushFollow(FOLLOW_term_in_fnAttributeValue5595);
                    	    term();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop202;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(202);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:947:15: {...}? cp_math_expression
                    {
                    dbg.location(947,15);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "fnAttributeValue", "isCssPreprocessorSource()");
                    }
                    dbg.location(947,44);
                    pushFollow(FOLLOW_cp_math_expression_in_fnAttributeValue5616);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(948, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttributeValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttributeValue"


    // $ANTLR start "hexColor"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:1: hexColor : HASH ;
    public final void hexColor() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "hexColor");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(950, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:5: ( HASH )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:7: HASH
            {
            dbg.location(951,7);
            match(input,HASH,FOLLOW_HASH_in_hexColor5634); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(952, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hexColor");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "hexColor"


    // $ANTLR start "ws"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:954:1: ws : ( WS | NL | COMMENT )+ ;
    public final void ws() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "ws");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(954, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:955:5: ( ( WS | NL | COMMENT )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:955:7: ( WS | NL | COMMENT )+
            {
            dbg.location(955,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:955:7: ( WS | NL | COMMENT )+
            int cnt204=0;
            try { dbg.enterSubRule(204);

            loop204:
            do {
                int alt204=2;
                try { dbg.enterDecision(204, decisionCanBacktrack[204]);

                int LA204_0 = input.LA(1);

                if ( ((LA204_0>=WS && LA204_0<=COMMENT)) ) {
                    alt204=1;
                }


                } finally {dbg.exitDecision(204);}

                switch (alt204) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            	    {
            	    dbg.location(955,7);
            	    if ( (input.LA(1)>=WS && input.LA(1)<=COMMENT) ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt204 >= 1 ) break loop204;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(204, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt204++;
            } while (true);
            } finally {dbg.exitSubRule(204);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(956, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ws");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "ws"


    // $ANTLR start "cp_variable_declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:1: cp_variable_declaration : ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list | {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ws )? SASS_DEFAULT )? );
    public final void cp_variable_declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_variable_declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(961, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:962:5: ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list | {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ws )? SASS_DEFAULT )? )
            int alt211=2;
            try { dbg.enterDecision(211, decisionCanBacktrack[211]);

            int LA211_0 = input.LA(1);

            if ( (LA211_0==NAMESPACE_SYM||(LA211_0>=CHARSET_SYM && LA211_0<=IMPORT_SYM)||LA211_0==MEDIA_SYM||(LA211_0>=AT_IDENT && LA211_0<=MOZ_DOCUMENT_SYM)||LA211_0==WEBKIT_KEYFRAMES_SYM||(LA211_0>=PAGE_SYM && LA211_0<=RIGHTBOTTOM_SYM)||(LA211_0>=SASS_CONTENT && LA211_0<=SASS_WHILE)) ) {
                int LA211_1 = input.LA(2);

                if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
                    alt211=1;
                }
                else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
                    alt211=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 211, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA211_0==SASS_VAR) ) {
                int LA211_2 = input.LA(2);

                if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
                    alt211=1;
                }
                else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
                    alt211=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 211, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 211, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(211);}

            switch (alt211) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:963:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list
                    {
                    dbg.location(963,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable_declaration", "isLessSource()");
                    }
                    dbg.location(963,27);
                    pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration5703);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(963,39);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:963:39: ( ws )?
                    int alt205=2;
                    try { dbg.enterSubRule(205);
                    try { dbg.enterDecision(205, decisionCanBacktrack[205]);

                    int LA205_0 = input.LA(1);

                    if ( ((LA205_0>=WS && LA205_0<=COMMENT)) ) {
                        alt205=1;
                    }
                    } finally {dbg.exitDecision(205);}

                    switch (alt205) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:963:39: ws
                            {
                            dbg.location(963,39);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5705);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(205);}

                    dbg.location(963,43);
                    match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration5708); if (state.failed) return ;
                    dbg.location(963,49);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:963:49: ( ws )?
                    int alt206=2;
                    try { dbg.enterSubRule(206);
                    try { dbg.enterDecision(206, decisionCanBacktrack[206]);

                    int LA206_0 = input.LA(1);

                    if ( ((LA206_0>=WS && LA206_0<=COMMENT)) ) {
                        alt206=1;
                    }
                    } finally {dbg.exitDecision(206);}

                    switch (alt206) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:963:49: ws
                            {
                            dbg.location(963,49);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5710);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(206);}

                    dbg.location(963,53);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration5713);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:965:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ws )? SASS_DEFAULT )?
                    {
                    dbg.location(965,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable_declaration", "isScssSource()");
                    }
                    dbg.location(965,27);
                    pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration5736);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(965,39);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:965:39: ( ws )?
                    int alt207=2;
                    try { dbg.enterSubRule(207);
                    try { dbg.enterDecision(207, decisionCanBacktrack[207]);

                    int LA207_0 = input.LA(1);

                    if ( ((LA207_0>=WS && LA207_0<=COMMENT)) ) {
                        alt207=1;
                    }
                    } finally {dbg.exitDecision(207);}

                    switch (alt207) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:965:39: ws
                            {
                            dbg.location(965,39);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5738);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(207);}

                    dbg.location(965,43);
                    match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration5741); if (state.failed) return ;
                    dbg.location(965,49);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:965:49: ( ws )?
                    int alt208=2;
                    try { dbg.enterSubRule(208);
                    try { dbg.enterDecision(208, decisionCanBacktrack[208]);

                    int LA208_0 = input.LA(1);

                    if ( ((LA208_0>=WS && LA208_0<=COMMENT)) ) {
                        alt208=1;
                    }
                    } finally {dbg.exitDecision(208);}

                    switch (alt208) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:965:49: ws
                            {
                            dbg.location(965,49);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5743);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(208);}

                    dbg.location(965,53);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration5746);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(965,72);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:965:72: ( ( ws )? SASS_DEFAULT )?
                    int alt210=2;
                    try { dbg.enterSubRule(210);
                    try { dbg.enterDecision(210, decisionCanBacktrack[210]);

                    try {
                        isCyclicDecision = true;
                        alt210 = dfa210.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(210);}

                    switch (alt210) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:965:73: ( ws )? SASS_DEFAULT
                            {
                            dbg.location(965,73);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:965:73: ( ws )?
                            int alt209=2;
                            try { dbg.enterSubRule(209);
                            try { dbg.enterDecision(209, decisionCanBacktrack[209]);

                            int LA209_0 = input.LA(1);

                            if ( ((LA209_0>=WS && LA209_0<=COMMENT)) ) {
                                alt209=1;
                            }
                            } finally {dbg.exitDecision(209);}

                            switch (alt209) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:965:73: ws
                                    {
                                    dbg.location(965,73);
                                    pushFollow(FOLLOW_ws_in_cp_variable_declaration5749);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(209);}

                            dbg.location(965,77);
                            match(input,SASS_DEFAULT,FOLLOW_SASS_DEFAULT_in_cp_variable_declaration5752); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(210);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(966, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_variable_declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_variable_declaration"


    // $ANTLR start "cp_variable"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:969:1: cp_variable : ({...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE ) | {...}? ( SASS_VAR ) );
    public final void cp_variable() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_variable");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(969, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:970:5: ({...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE ) | {...}? ( SASS_VAR ) )
            int alt212=2;
            try { dbg.enterDecision(212, decisionCanBacktrack[212]);

            int LA212_0 = input.LA(1);

            if ( (LA212_0==NAMESPACE_SYM||(LA212_0>=CHARSET_SYM && LA212_0<=IMPORT_SYM)||LA212_0==MEDIA_SYM||(LA212_0>=AT_IDENT && LA212_0<=MOZ_DOCUMENT_SYM)||LA212_0==WEBKIT_KEYFRAMES_SYM||(LA212_0>=PAGE_SYM && LA212_0<=RIGHTBOTTOM_SYM)||(LA212_0>=SASS_CONTENT && LA212_0<=SASS_WHILE)) ) {
                alt212=1;
            }
            else if ( (LA212_0==SASS_VAR) ) {
                alt212=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 212, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(212);}

            switch (alt212) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:972:9: {...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE )
                    {
                    dbg.location(972,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable", "isLessSource()");
                    }
                    dbg.location(972,27);
                    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=CHARSET_SYM && input.LA(1)<=IMPORT_SYM)||input.LA(1)==MEDIA_SYM||(input.LA(1)>=AT_IDENT && input.LA(1)<=MOZ_DOCUMENT_SYM)||input.LA(1)==WEBKIT_KEYFRAMES_SYM||(input.LA(1)>=PAGE_SYM && input.LA(1)<=RIGHTBOTTOM_SYM)||(input.LA(1)>=SASS_CONTENT && input.LA(1)<=SASS_WHILE) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:974:9: {...}? ( SASS_VAR )
                    {
                    dbg.location(974,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable", "isScssSource()");
                    }
                    dbg.location(974,27);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:974:27: ( SASS_VAR )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:974:29: SASS_VAR
                    {
                    dbg.location(974,29);
                    match(input,SASS_VAR,FOLLOW_SASS_VAR_in_cp_variable5973); if (state.failed) return ;

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(975, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_variable");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_variable"


    // $ANTLR start "cp_expression_list"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:978:1: cp_expression_list : cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )* ;
    public final void cp_expression_list() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression_list");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(978, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:979:5: ( cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:980:5: cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*
            {
            dbg.location(980,5);
            pushFollow(FOLLOW_cp_expression_in_cp_expression_list6001);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(981,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:981:5: ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*
            try { dbg.enterSubRule(215);

            loop215:
            do {
                int alt215=2;
                try { dbg.enterDecision(215, decisionCanBacktrack[215]);

                try {
                    isCyclicDecision = true;
                    alt215 = dfa215.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(215);}

                switch (alt215) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:981:6: ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression
            	    {
            	    dbg.location(981,37);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:981:37: ( ws )?
            	    int alt213=2;
            	    try { dbg.enterSubRule(213);
            	    try { dbg.enterDecision(213, decisionCanBacktrack[213]);

            	    int LA213_0 = input.LA(1);

            	    if ( ((LA213_0>=WS && LA213_0<=COMMENT)) ) {
            	        alt213=1;
            	    }
            	    } finally {dbg.exitDecision(213);}

            	    switch (alt213) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:981:37: ws
            	            {
            	            dbg.location(981,37);
            	            pushFollow(FOLLOW_ws_in_cp_expression_list6020);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(213);}

            	    dbg.location(981,41);
            	    match(input,COMMA,FOLLOW_COMMA_in_cp_expression_list6023); if (state.failed) return ;
            	    dbg.location(981,47);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:981:47: ( ws )?
            	    int alt214=2;
            	    try { dbg.enterSubRule(214);
            	    try { dbg.enterDecision(214, decisionCanBacktrack[214]);

            	    int LA214_0 = input.LA(1);

            	    if ( ((LA214_0>=WS && LA214_0<=COMMENT)) ) {
            	        alt214=1;
            	    }
            	    } finally {dbg.exitDecision(214);}

            	    switch (alt214) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:981:47: ws
            	            {
            	            dbg.location(981,47);
            	            pushFollow(FOLLOW_ws_in_cp_expression_list6025);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(214);}

            	    dbg.location(981,51);
            	    pushFollow(FOLLOW_cp_expression_in_cp_expression_list6028);
            	    cp_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop215;
                }
            } while (true);
            } finally {dbg.exitSubRule(215);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(982, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression_list");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression_list"


    // $ANTLR start "cp_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:994:1: cp_expression : cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* ;
    public final void cp_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(994, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:995:5: ( cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:996:5: cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*
            {
            dbg.location(996,5);
            pushFollow(FOLLOW_cp_expression_atom_in_cp_expression6065);
            cp_expression_atom();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(997,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:997:5: ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*
            try { dbg.enterSubRule(219);

            loop219:
            do {
                int alt219=3;
                try { dbg.enterDecision(219, decisionCanBacktrack[219]);

                try {
                    isCyclicDecision = true;
                    alt219 = dfa219.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(219);}

                switch (alt219) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:9: ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom
            	    {
            	    dbg.location(998,39);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:39: ( ( ws )? cp_expression_operator ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:40: ( ws )? cp_expression_operator ( ws )?
            	    {
            	    dbg.location(998,40);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:40: ( ws )?
            	    int alt216=2;
            	    try { dbg.enterSubRule(216);
            	    try { dbg.enterDecision(216, decisionCanBacktrack[216]);

            	    int LA216_0 = input.LA(1);

            	    if ( ((LA216_0>=WS && LA216_0<=COMMENT)) ) {
            	        alt216=1;
            	    }
            	    } finally {dbg.exitDecision(216);}

            	    switch (alt216) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:40: ws
            	            {
            	            dbg.location(998,40);
            	            pushFollow(FOLLOW_ws_in_cp_expression6091);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(216);}

            	    dbg.location(998,44);
            	    pushFollow(FOLLOW_cp_expression_operator_in_cp_expression6094);
            	    cp_expression_operator();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(998,67);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:67: ( ws )?
            	    int alt217=2;
            	    try { dbg.enterSubRule(217);
            	    try { dbg.enterDecision(217, decisionCanBacktrack[217]);

            	    int LA217_0 = input.LA(1);

            	    if ( ((LA217_0>=WS && LA217_0<=COMMENT)) ) {
            	        alt217=1;
            	    }
            	    } finally {dbg.exitDecision(217);}

            	    switch (alt217) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:67: ws
            	            {
            	            dbg.location(998,67);
            	            pushFollow(FOLLOW_ws_in_cp_expression6096);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(217);}


            	    }

            	    dbg.location(998,72);
            	    pushFollow(FOLLOW_cp_expression_atom_in_cp_expression6100);
            	    cp_expression_atom();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:999:11: ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom
            	    {
            	    dbg.location(999,37);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:999:37: ( ws )?
            	    int alt218=2;
            	    try { dbg.enterSubRule(218);
            	    try { dbg.enterDecision(218, decisionCanBacktrack[218]);

            	    int LA218_0 = input.LA(1);

            	    if ( ((LA218_0>=WS && LA218_0<=COMMENT)) ) {
            	        alt218=1;
            	    }
            	    } finally {dbg.exitDecision(218);}

            	    switch (alt218) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:999:37: ws
            	            {
            	            dbg.location(999,37);
            	            pushFollow(FOLLOW_ws_in_cp_expression6120);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(218);}

            	    dbg.location(999,41);
            	    pushFollow(FOLLOW_cp_expression_atom_in_cp_expression6123);
            	    cp_expression_atom();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop219;
                }
            } while (true);
            } finally {dbg.exitSubRule(219);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1001, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression"


    // $ANTLR start "cp_expression_operator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1003:1: cp_expression_operator : ( OR | AND | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ );
    public final void cp_expression_operator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression_operator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1003, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1004:5: ( OR | AND | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(1004,5);
            if ( input.LA(1)==AND||input.LA(1)==GREATER||(input.LA(1)>=OR && input.LA(1)<=GREATER_OR_EQ) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1006, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression_operator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression_operator"


    // $ANTLR start "cp_expression_atom"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1008:1: cp_expression_atom : ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN ) ;
    public final void cp_expression_atom() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression_atom");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1008, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1009:5: ( ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1010:9: ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN )
            {
            dbg.location(1010,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1010:9: ( NOT ( ws )? )?
            int alt221=2;
            try { dbg.enterSubRule(221);
            try { dbg.enterDecision(221, decisionCanBacktrack[221]);

            int LA221_0 = input.LA(1);

            if ( (LA221_0==NOT) ) {
                alt221=1;
            }
            } finally {dbg.exitDecision(221);}

            switch (alt221) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1010:10: NOT ( ws )?
                    {
                    dbg.location(1010,10);
                    match(input,NOT,FOLLOW_NOT_in_cp_expression_atom6214); if (state.failed) return ;
                    dbg.location(1010,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1010:14: ( ws )?
                    int alt220=2;
                    try { dbg.enterSubRule(220);
                    try { dbg.enterDecision(220, decisionCanBacktrack[220]);

                    int LA220_0 = input.LA(1);

                    if ( ((LA220_0>=WS && LA220_0<=COMMENT)) ) {
                        alt220=1;
                    }
                    } finally {dbg.exitDecision(220);}

                    switch (alt220) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1010:14: ws
                            {
                            dbg.location(1010,14);
                            pushFollow(FOLLOW_ws_in_cp_expression_atom6216);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(220);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(221);}

            dbg.location(1011,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1011:9: ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN )
            int alt224=2;
            try { dbg.enterSubRule(224);
            try { dbg.enterDecision(224, decisionCanBacktrack[224]);

            try {
                isCyclicDecision = true;
                alt224 = dfa224.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(224);}

            switch (alt224) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1012:13: ( cp_math_expression )=> cp_math_expression
                    {
                    dbg.location(1012,35);
                    pushFollow(FOLLOW_cp_math_expression_in_cp_expression_atom6248);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1013:15: LPAREN ( ws )? cp_expression_list ( ws )? RPAREN
                    {
                    dbg.location(1013,15);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_expression_atom6264); if (state.failed) return ;
                    dbg.location(1013,22);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1013:22: ( ws )?
                    int alt222=2;
                    try { dbg.enterSubRule(222);
                    try { dbg.enterDecision(222, decisionCanBacktrack[222]);

                    int LA222_0 = input.LA(1);

                    if ( ((LA222_0>=WS && LA222_0<=COMMENT)) ) {
                        alt222=1;
                    }
                    } finally {dbg.exitDecision(222);}

                    switch (alt222) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1013:22: ws
                            {
                            dbg.location(1013,22);
                            pushFollow(FOLLOW_ws_in_cp_expression_atom6266);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(222);}

                    dbg.location(1013,26);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_expression_atom6269);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1013,45);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1013:45: ( ws )?
                    int alt223=2;
                    try { dbg.enterSubRule(223);
                    try { dbg.enterDecision(223, decisionCanBacktrack[223]);

                    int LA223_0 = input.LA(1);

                    if ( ((LA223_0>=WS && LA223_0<=COMMENT)) ) {
                        alt223=1;
                    }
                    } finally {dbg.exitDecision(223);}

                    switch (alt223) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1013:45: ws
                            {
                            dbg.location(1013,45);
                            pushFollow(FOLLOW_ws_in_cp_expression_atom6271);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(223);}

                    dbg.location(1013,49);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_expression_atom6274); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(224);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1015, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression_atom");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression_atom"


    // $ANTLR start "cp_math_expressions"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1018:1: cp_math_expressions : cp_math_expression ( ws cp_math_expression )* ;
    public final void cp_math_expressions() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_math_expressions");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1018, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1019:5: ( cp_math_expression ( ws cp_math_expression )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1020:5: cp_math_expression ( ws cp_math_expression )*
            {
            dbg.location(1020,5);
            pushFollow(FOLLOW_cp_math_expression_in_cp_math_expressions6306);
            cp_math_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1021,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1021:5: ( ws cp_math_expression )*
            try { dbg.enterSubRule(225);

            loop225:
            do {
                int alt225=2;
                try { dbg.enterDecision(225, decisionCanBacktrack[225]);

                int LA225_0 = input.LA(1);

                if ( ((LA225_0>=WS && LA225_0<=COMMENT)) ) {
                    alt225=1;
                }


                } finally {dbg.exitDecision(225);}

                switch (alt225) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1021:6: ws cp_math_expression
            	    {
            	    dbg.location(1021,6);
            	    pushFollow(FOLLOW_ws_in_cp_math_expressions6313);
            	    ws();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(1021,9);
            	    pushFollow(FOLLOW_cp_math_expression_in_cp_math_expressions6315);
            	    cp_math_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop225;
                }
            } while (true);
            } finally {dbg.exitSubRule(225);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1022, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_math_expressions");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_math_expressions"


    // $ANTLR start "cp_math_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1036:1: cp_math_expression : cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )* ;
    public final void cp_math_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_math_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1036, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1037:5: ( cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1037:10: cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*
            {
            dbg.location(1037,10);
            pushFollow(FOLLOW_cp_math_expression_atom_in_cp_math_expression6349);
            cp_math_expression_atom();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1038,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1038:10: ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*
            try { dbg.enterSubRule(228);

            loop228:
            do {
                int alt228=2;
                try { dbg.enterDecision(228, decisionCanBacktrack[228]);

                try {
                    isCyclicDecision = true;
                    alt228 = dfa228.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(228);}

                switch (alt228) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:13: ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom
            	    {
            	    dbg.location(1039,48);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:48: ( ws )?
            	    int alt226=2;
            	    try { dbg.enterSubRule(226);
            	    try { dbg.enterDecision(226, decisionCanBacktrack[226]);

            	    int LA226_0 = input.LA(1);

            	    if ( ((LA226_0>=WS && LA226_0<=COMMENT)) ) {
            	        alt226=1;
            	    }
            	    } finally {dbg.exitDecision(226);}

            	    switch (alt226) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:48: ws
            	            {
            	            dbg.location(1039,48);
            	            pushFollow(FOLLOW_ws_in_cp_math_expression6392);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(226);}

            	    dbg.location(1039,52);
            	    if ( (input.LA(1)>=SOLIDUS && input.LA(1)<=PLUS)||input.LA(1)==STAR ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }

            	    dbg.location(1039,78);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:78: ( ws )?
            	    int alt227=2;
            	    try { dbg.enterSubRule(227);
            	    try { dbg.enterDecision(227, decisionCanBacktrack[227]);

            	    int LA227_0 = input.LA(1);

            	    if ( ((LA227_0>=WS && LA227_0<=COMMENT)) ) {
            	        alt227=1;
            	    }
            	    } finally {dbg.exitDecision(227);}

            	    switch (alt227) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:78: ws
            	            {
            	            dbg.location(1039,78);
            	            pushFollow(FOLLOW_ws_in_cp_math_expression6405);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(227);}

            	    dbg.location(1039,82);
            	    pushFollow(FOLLOW_cp_math_expression_atom_in_cp_math_expression6408);
            	    cp_math_expression_atom();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop228;
                }
            } while (true);
            } finally {dbg.exitSubRule(228);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1041, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_math_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_math_expression"


    // $ANTLR start "cp_math_expression_atom"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:1: cp_math_expression_atom : ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN );
    public final void cp_math_expression_atom() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_math_expression_atom");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1043, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1044:5: ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN )
            int alt233=3;
            try { dbg.enterDecision(233, decisionCanBacktrack[233]);

            try {
                isCyclicDecision = true;
                alt233 = dfa233.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(233);}

            switch (alt233) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1045:5: term
                    {
                    dbg.location(1045,5);
                    pushFollow(FOLLOW_term_in_cp_math_expression_atom6446);
                    term();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:7: IMPORTANT_SYM
                    {
                    dbg.location(1046,7);
                    match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_cp_math_expression_atom6454); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1047:7: ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN
                    {
                    dbg.location(1047,7);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1047:7: ( unaryOperator ( ws )? )?
                    int alt230=2;
                    try { dbg.enterSubRule(230);
                    try { dbg.enterDecision(230, decisionCanBacktrack[230]);

                    int LA230_0 = input.LA(1);

                    if ( ((LA230_0>=MINUS && LA230_0<=PLUS)) ) {
                        alt230=1;
                    }
                    } finally {dbg.exitDecision(230);}

                    switch (alt230) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1047:9: unaryOperator ( ws )?
                            {
                            dbg.location(1047,9);
                            pushFollow(FOLLOW_unaryOperator_in_cp_math_expression_atom6465);
                            unaryOperator();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(1047,23);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1047:23: ( ws )?
                            int alt229=2;
                            try { dbg.enterSubRule(229);
                            try { dbg.enterDecision(229, decisionCanBacktrack[229]);

                            int LA229_0 = input.LA(1);

                            if ( ((LA229_0>=WS && LA229_0<=COMMENT)) ) {
                                alt229=1;
                            }
                            } finally {dbg.exitDecision(229);}

                            switch (alt229) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1047:23: ws
                                    {
                                    dbg.location(1047,23);
                                    pushFollow(FOLLOW_ws_in_cp_math_expression_atom6467);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(229);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(230);}

                    dbg.location(1047,30);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_math_expression_atom6473); if (state.failed) return ;
                    dbg.location(1047,37);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1047:37: ( ws )?
                    int alt231=2;
                    try { dbg.enterSubRule(231);
                    try { dbg.enterDecision(231, decisionCanBacktrack[231]);

                    int LA231_0 = input.LA(1);

                    if ( ((LA231_0>=WS && LA231_0<=COMMENT)) ) {
                        alt231=1;
                    }
                    } finally {dbg.exitDecision(231);}

                    switch (alt231) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1047:37: ws
                            {
                            dbg.location(1047,37);
                            pushFollow(FOLLOW_ws_in_cp_math_expression_atom6475);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(231);}

                    dbg.location(1047,41);
                    pushFollow(FOLLOW_cp_math_expression_in_cp_math_expression_atom6478);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1047,60);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1047:60: ( ws )?
                    int alt232=2;
                    try { dbg.enterSubRule(232);
                    try { dbg.enterDecision(232, decisionCanBacktrack[232]);

                    int LA232_0 = input.LA(1);

                    if ( ((LA232_0>=WS && LA232_0<=COMMENT)) ) {
                        alt232=1;
                    }
                    } finally {dbg.exitDecision(232);}

                    switch (alt232) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1047:60: ws
                            {
                            dbg.location(1047,60);
                            pushFollow(FOLLOW_ws_in_cp_math_expression_atom6480);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(232);}

                    dbg.location(1047,64);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_math_expression_atom6483); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1048, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_math_expression_atom");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_math_expression_atom"


    // $ANTLR start "cp_mixin_declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1056:1: cp_mixin_declaration : ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block ;
    public final void cp_mixin_declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1056, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1057:5: ( ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1058:5: ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block
            {
            dbg.location(1058,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1058:5: ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? )
            int alt243=2;
            try { dbg.enterSubRule(243);
            try { dbg.enterDecision(243, decisionCanBacktrack[243]);

            int LA243_0 = input.LA(1);

            if ( (LA243_0==DOT) ) {
                alt243=1;
            }
            else if ( (LA243_0==SASS_MIXIN) ) {
                alt243=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 243, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(243);}

            switch (alt243) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:9: {...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )?
                    {
                    dbg.location(1059,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_declaration", "isLessSource()");
                    }
                    dbg.location(1059,27);
                    match(input,DOT,FOLLOW_DOT_in_cp_mixin_declaration6523); if (state.failed) return ;
                    dbg.location(1059,31);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration6525);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1059,45);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:45: ( ws )?
                    int alt234=2;
                    try { dbg.enterSubRule(234);
                    try { dbg.enterDecision(234, decisionCanBacktrack[234]);

                    int LA234_0 = input.LA(1);

                    if ( ((LA234_0>=WS && LA234_0<=COMMENT)) ) {
                        alt234=1;
                    }
                    } finally {dbg.exitDecision(234);}

                    switch (alt234) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:45: ws
                            {
                            dbg.location(1059,45);
                            pushFollow(FOLLOW_ws_in_cp_mixin_declaration6527);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(234);}

                    dbg.location(1059,49);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration6530); if (state.failed) return ;
                    dbg.location(1059,56);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:56: ( ws )?
                    int alt235=2;
                    try { dbg.enterSubRule(235);
                    try { dbg.enterDecision(235, decisionCanBacktrack[235]);

                    int LA235_0 = input.LA(1);

                    if ( ((LA235_0>=WS && LA235_0<=COMMENT)) ) {
                        alt235=1;
                    }
                    } finally {dbg.exitDecision(235);}

                    switch (alt235) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:56: ws
                            {
                            dbg.location(1059,56);
                            pushFollow(FOLLOW_ws_in_cp_mixin_declaration6532);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(235);}

                    dbg.location(1059,60);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:60: ( cp_args_list )?
                    int alt236=2;
                    try { dbg.enterSubRule(236);
                    try { dbg.enterDecision(236, decisionCanBacktrack[236]);

                    int LA236_0 = input.LA(1);

                    if ( (LA236_0==NAMESPACE_SYM||(LA236_0>=CHARSET_SYM && LA236_0<=IMPORT_SYM)||LA236_0==MEDIA_SYM||(LA236_0>=AT_IDENT && LA236_0<=MOZ_DOCUMENT_SYM)||LA236_0==WEBKIT_KEYFRAMES_SYM||(LA236_0>=PAGE_SYM && LA236_0<=RIGHTBOTTOM_SYM)||LA236_0==SASS_VAR||(LA236_0>=SASS_CONTENT && LA236_0<=SASS_WHILE)||(LA236_0>=CP_DOTS && LA236_0<=LESS_REST)) ) {
                        alt236=1;
                    }
                    } finally {dbg.exitDecision(236);}

                    switch (alt236) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:60: cp_args_list
                            {
                            dbg.location(1059,60);
                            pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration6535);
                            cp_args_list();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(236);}

                    dbg.location(1059,74);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration6538); if (state.failed) return ;
                    dbg.location(1059,81);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:81: ( ( ws )? less_mixin_guarded )?
                    int alt238=2;
                    try { dbg.enterSubRule(238);
                    try { dbg.enterDecision(238, decisionCanBacktrack[238]);

                    try {
                        isCyclicDecision = true;
                        alt238 = dfa238.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(238);}

                    switch (alt238) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:82: ( ws )? less_mixin_guarded
                            {
                            dbg.location(1059,82);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:82: ( ws )?
                            int alt237=2;
                            try { dbg.enterSubRule(237);
                            try { dbg.enterDecision(237, decisionCanBacktrack[237]);

                            int LA237_0 = input.LA(1);

                            if ( ((LA237_0>=WS && LA237_0<=COMMENT)) ) {
                                alt237=1;
                            }
                            } finally {dbg.exitDecision(237);}

                            switch (alt237) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:82: ws
                                    {
                                    dbg.location(1059,82);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6541);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(237);}

                            dbg.location(1059,86);
                            pushFollow(FOLLOW_less_mixin_guarded_in_cp_mixin_declaration6544);
                            less_mixin_guarded();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(238);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1061:9: {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?
                    {
                    dbg.location(1061,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_declaration", "isScssSource()");
                    }
                    dbg.location(1061,27);
                    match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_cp_mixin_declaration6568); if (state.failed) return ;
                    dbg.location(1061,38);
                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6570);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1061,41);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration6572);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1061,55);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1061:55: ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?
                    int alt242=2;
                    try { dbg.enterSubRule(242);
                    try { dbg.enterDecision(242, decisionCanBacktrack[242]);

                    try {
                        isCyclicDecision = true;
                        alt242 = dfa242.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(242);}

                    switch (alt242) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1061:56: ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN
                            {
                            dbg.location(1061,56);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1061:56: ( ws )?
                            int alt239=2;
                            try { dbg.enterSubRule(239);
                            try { dbg.enterDecision(239, decisionCanBacktrack[239]);

                            int LA239_0 = input.LA(1);

                            if ( ((LA239_0>=WS && LA239_0<=COMMENT)) ) {
                                alt239=1;
                            }
                            } finally {dbg.exitDecision(239);}

                            switch (alt239) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1061:56: ws
                                    {
                                    dbg.location(1061,56);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6575);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(239);}

                            dbg.location(1061,60);
                            match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration6578); if (state.failed) return ;
                            dbg.location(1061,67);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1061:67: ( ws )?
                            int alt240=2;
                            try { dbg.enterSubRule(240);
                            try { dbg.enterDecision(240, decisionCanBacktrack[240]);

                            int LA240_0 = input.LA(1);

                            if ( ((LA240_0>=WS && LA240_0<=COMMENT)) ) {
                                alt240=1;
                            }
                            } finally {dbg.exitDecision(240);}

                            switch (alt240) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1061:67: ws
                                    {
                                    dbg.location(1061,67);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6580);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(240);}

                            dbg.location(1061,71);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1061:71: ( cp_args_list )?
                            int alt241=2;
                            try { dbg.enterSubRule(241);
                            try { dbg.enterDecision(241, decisionCanBacktrack[241]);

                            int LA241_0 = input.LA(1);

                            if ( (LA241_0==NAMESPACE_SYM||(LA241_0>=CHARSET_SYM && LA241_0<=IMPORT_SYM)||LA241_0==MEDIA_SYM||(LA241_0>=AT_IDENT && LA241_0<=MOZ_DOCUMENT_SYM)||LA241_0==WEBKIT_KEYFRAMES_SYM||(LA241_0>=PAGE_SYM && LA241_0<=RIGHTBOTTOM_SYM)||LA241_0==SASS_VAR||(LA241_0>=SASS_CONTENT && LA241_0<=SASS_WHILE)||(LA241_0>=CP_DOTS && LA241_0<=LESS_REST)) ) {
                                alt241=1;
                            }
                            } finally {dbg.exitDecision(241);}

                            switch (alt241) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1061:71: cp_args_list
                                    {
                                    dbg.location(1061,71);
                                    pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration6583);
                                    cp_args_list();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(241);}

                            dbg.location(1061,85);
                            match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration6586); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(242);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(243);}

            dbg.location(1063,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1063:5: ( ws )?
            int alt244=2;
            try { dbg.enterSubRule(244);
            try { dbg.enterDecision(244, decisionCanBacktrack[244]);

            int LA244_0 = input.LA(1);

            if ( ((LA244_0>=WS && LA244_0<=COMMENT)) ) {
                alt244=1;
            }
            } finally {dbg.exitDecision(244);}

            switch (alt244) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1063:5: ws
                    {
                    dbg.location(1063,5);
                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration6600);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(244);}

            dbg.location(1063,9);
            pushFollow(FOLLOW_cp_mixin_block_in_cp_mixin_declaration6603);
            cp_mixin_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1064, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_declaration"


    // $ANTLR start "cp_mixin_call"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1068:1: cp_mixin_call : ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? | {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? ) ;
    public final void cp_mixin_call() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1068, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1069:5: ( ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? | {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1070:5: ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? | {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? )
            {
            dbg.location(1070,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1070:5: ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? | {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? )
            int alt255=2;
            try { dbg.enterSubRule(255);
            try { dbg.enterDecision(255, decisionCanBacktrack[255]);

            int LA255_0 = input.LA(1);

            if ( (LA255_0==DOT) ) {
                alt255=1;
            }
            else if ( (LA255_0==SASS_INCLUDE) ) {
                alt255=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 255, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(255);}

            switch (alt255) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:9: {...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
                    {
                    dbg.location(1071,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_call", "isLessSource()");
                    }
                    dbg.location(1071,27);
                    match(input,DOT,FOLLOW_DOT_in_cp_mixin_call6643); if (state.failed) return ;
                    dbg.location(1071,31);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call6645);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1071,45);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:45: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
                    int alt248=2;
                    try { dbg.enterSubRule(248);
                    try { dbg.enterDecision(248, decisionCanBacktrack[248]);

                    try {
                        isCyclicDecision = true;
                        alt248 = dfa248.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(248);}

                    switch (alt248) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:46: ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN
                            {
                            dbg.location(1071,46);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:46: ( ws )?
                            int alt245=2;
                            try { dbg.enterSubRule(245);
                            try { dbg.enterDecision(245, decisionCanBacktrack[245]);

                            int LA245_0 = input.LA(1);

                            if ( ((LA245_0>=WS && LA245_0<=COMMENT)) ) {
                                alt245=1;
                            }
                            } finally {dbg.exitDecision(245);}

                            switch (alt245) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:46: ws
                                    {
                                    dbg.location(1071,46);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6648);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(245);}

                            dbg.location(1071,50);
                            match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_call6651); if (state.failed) return ;
                            dbg.location(1071,57);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:57: ( ws )?
                            int alt246=2;
                            try { dbg.enterSubRule(246);
                            try { dbg.enterDecision(246, decisionCanBacktrack[246]);

                            int LA246_0 = input.LA(1);

                            if ( ((LA246_0>=WS && LA246_0<=COMMENT)) ) {
                                alt246=1;
                            }
                            } finally {dbg.exitDecision(246);}

                            switch (alt246) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:57: ws
                                    {
                                    dbg.location(1071,57);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6653);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(246);}

                            dbg.location(1071,61);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:61: ( cp_mixin_call_args )?
                            int alt247=2;
                            try { dbg.enterSubRule(247);
                            try { dbg.enterDecision(247, decisionCanBacktrack[247]);

                            int LA247_0 = input.LA(1);

                            if ( (LA247_0==NAMESPACE_SYM||(LA247_0>=IDENT && LA247_0<=IMPORT_SYM)||LA247_0==MEDIA_SYM||LA247_0==IMPORTANT_SYM||(LA247_0>=NOT && LA247_0<=LPAREN)||(LA247_0>=AT_IDENT && LA247_0<=MOZ_DOCUMENT_SYM)||(LA247_0>=WEBKIT_KEYFRAMES_SYM && LA247_0<=RIGHTBOTTOM_SYM)||(LA247_0>=MINUS && LA247_0<=PLUS)||(LA247_0>=TILDE && LA247_0<=HASH)||(LA247_0>=SASS_VAR && LA247_0<=PERCENTAGE_SYMBOL)||(LA247_0>=SASS_CONTENT && LA247_0<=SASS_WHILE)) ) {
                                alt247=1;
                            }
                            } finally {dbg.exitDecision(247);}

                            switch (alt247) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1071:61: cp_mixin_call_args
                                    {
                                    dbg.location(1071,61);
                                    pushFollow(FOLLOW_cp_mixin_call_args_in_cp_mixin_call6656);
                                    cp_mixin_call_args();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(247);}

                            dbg.location(1071,81);
                            match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_call6659); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(248);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:9: {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )?
                    {
                    dbg.location(1073,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_call", "isScssSource()");
                    }
                    dbg.location(1073,27);
                    match(input,SASS_INCLUDE,FOLLOW_SASS_INCLUDE_in_cp_mixin_call6683); if (state.failed) return ;
                    dbg.location(1073,40);
                    pushFollow(FOLLOW_ws_in_cp_mixin_call6685);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1073,43);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call6687);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1073,57);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:57: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
                    int alt252=2;
                    try { dbg.enterSubRule(252);
                    try { dbg.enterDecision(252, decisionCanBacktrack[252]);

                    try {
                        isCyclicDecision = true;
                        alt252 = dfa252.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(252);}

                    switch (alt252) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:58: ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN
                            {
                            dbg.location(1073,58);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:58: ( ws )?
                            int alt249=2;
                            try { dbg.enterSubRule(249);
                            try { dbg.enterDecision(249, decisionCanBacktrack[249]);

                            int LA249_0 = input.LA(1);

                            if ( ((LA249_0>=WS && LA249_0<=COMMENT)) ) {
                                alt249=1;
                            }
                            } finally {dbg.exitDecision(249);}

                            switch (alt249) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:58: ws
                                    {
                                    dbg.location(1073,58);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6690);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(249);}

                            dbg.location(1073,62);
                            match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_call6693); if (state.failed) return ;
                            dbg.location(1073,69);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:69: ( ws )?
                            int alt250=2;
                            try { dbg.enterSubRule(250);
                            try { dbg.enterDecision(250, decisionCanBacktrack[250]);

                            int LA250_0 = input.LA(1);

                            if ( ((LA250_0>=WS && LA250_0<=COMMENT)) ) {
                                alt250=1;
                            }
                            } finally {dbg.exitDecision(250);}

                            switch (alt250) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:69: ws
                                    {
                                    dbg.location(1073,69);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6695);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(250);}

                            dbg.location(1073,73);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:73: ( cp_mixin_call_args )?
                            int alt251=2;
                            try { dbg.enterSubRule(251);
                            try { dbg.enterDecision(251, decisionCanBacktrack[251]);

                            int LA251_0 = input.LA(1);

                            if ( (LA251_0==NAMESPACE_SYM||(LA251_0>=IDENT && LA251_0<=IMPORT_SYM)||LA251_0==MEDIA_SYM||LA251_0==IMPORTANT_SYM||(LA251_0>=NOT && LA251_0<=LPAREN)||(LA251_0>=AT_IDENT && LA251_0<=MOZ_DOCUMENT_SYM)||(LA251_0>=WEBKIT_KEYFRAMES_SYM && LA251_0<=RIGHTBOTTOM_SYM)||(LA251_0>=MINUS && LA251_0<=PLUS)||(LA251_0>=TILDE && LA251_0<=HASH)||(LA251_0>=SASS_VAR && LA251_0<=PERCENTAGE_SYMBOL)||(LA251_0>=SASS_CONTENT && LA251_0<=SASS_WHILE)) ) {
                                alt251=1;
                            }
                            } finally {dbg.exitDecision(251);}

                            switch (alt251) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:73: cp_mixin_call_args
                                    {
                                    dbg.location(1073,73);
                                    pushFollow(FOLLOW_cp_mixin_call_args_in_cp_mixin_call6698);
                                    cp_mixin_call_args();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(251);}

                            dbg.location(1073,93);
                            match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_call6701); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(252);}

                    dbg.location(1073,102);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:102: ( ( ws )? cp_mixin_block )?
                    int alt254=2;
                    try { dbg.enterSubRule(254);
                    try { dbg.enterDecision(254, decisionCanBacktrack[254]);

                    try {
                        isCyclicDecision = true;
                        alt254 = dfa254.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(254);}

                    switch (alt254) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:103: ( ws )? cp_mixin_block
                            {
                            dbg.location(1073,103);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:103: ( ws )?
                            int alt253=2;
                            try { dbg.enterSubRule(253);
                            try { dbg.enterDecision(253, decisionCanBacktrack[253]);

                            int LA253_0 = input.LA(1);

                            if ( ((LA253_0>=WS && LA253_0<=COMMENT)) ) {
                                alt253=1;
                            }
                            } finally {dbg.exitDecision(253);}

                            switch (alt253) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:103: ws
                                    {
                                    dbg.location(1073,103);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6706);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(253);}

                            dbg.location(1073,107);
                            pushFollow(FOLLOW_cp_mixin_block_in_cp_mixin_call6709);
                            cp_mixin_block();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(254);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(255);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1075, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_call");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_call"


    // $ANTLR start "cp_mixin_block"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:1: cp_mixin_block : LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void cp_mixin_block() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_block");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1077, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1078:5: ( LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1079:5: LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(1079,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_cp_mixin_block6742); if (state.failed) return ;
            dbg.location(1079,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1079:12: ( ws )?
            int alt256=2;
            try { dbg.enterSubRule(256);
            try { dbg.enterDecision(256, decisionCanBacktrack[256]);

            int LA256_0 = input.LA(1);

            if ( ((LA256_0>=WS && LA256_0<=COMMENT)) ) {
                alt256=1;
            }
            } finally {dbg.exitDecision(256);}

            switch (alt256) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1079:12: ws
                    {
                    dbg.location(1079,12);
                    pushFollow(FOLLOW_ws_in_cp_mixin_block6744);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(256);}

            dbg.location(1079,16);
            pushFollow(FOLLOW_syncToFollow_in_cp_mixin_block6747);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1080,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1080:9: ( declarations )?
            int alt257=2;
            try { dbg.enterSubRule(257);
            try { dbg.enterDecision(257, decisionCanBacktrack[257]);

            int LA257_0 = input.LA(1);

            if ( ((LA257_0>=NAMESPACE_SYM && LA257_0<=IDENT)||(LA257_0>=CHARSET_SYM && LA257_0<=MEDIA_SYM)||LA257_0==GEN||(LA257_0>=COLON && LA257_0<=MOZ_DOCUMENT_SYM)||LA257_0==WEBKIT_KEYFRAMES_SYM||(LA257_0>=PAGE_SYM && LA257_0<=RIGHTBOTTOM_SYM)||(LA257_0>=MINUS && LA257_0<=PIPE)||LA257_0==LESS_AND||(LA257_0>=RBRACKET && LA257_0<=SASS_VAR)||(LA257_0>=SASS_CONTENT && LA257_0<=SASS_WHILE)||LA257_0==AT_SIGN) ) {
                alt257=1;
            }
            } finally {dbg.exitDecision(257);}

            switch (alt257) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1080:9: declarations
                    {
                    dbg.location(1080,9);
                    pushFollow(FOLLOW_declarations_in_cp_mixin_block6757);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(257);}

            dbg.location(1081,5);
            match(input,RBRACE,FOLLOW_RBRACE_in_cp_mixin_block6764); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1082, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_block");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_block"


    // $ANTLR start "cp_mixin_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1084:1: cp_mixin_name : IDENT ;
    public final void cp_mixin_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1084, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1085:5: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1086:5: IDENT
            {
            dbg.location(1086,5);
            match(input,IDENT,FOLLOW_IDENT_in_cp_mixin_name6793); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1087, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_name"


    // $ANTLR start "cp_mixin_call_args"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1089:1: cp_mixin_call_args : cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS )? ;
    public final void cp_mixin_call_args() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_args");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1089, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1090:5: ( cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:5: cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS )?
            {
            dbg.location(1093,5);
            pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6829);
            cp_mixin_call_arg();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1093,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:23: ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )*
            try { dbg.enterSubRule(259);

            loop259:
            do {
                int alt259=2;
                try { dbg.enterDecision(259, decisionCanBacktrack[259]);

                int LA259_0 = input.LA(1);

                if ( (LA259_0==SEMI||LA259_0==COMMA) ) {
                    alt259=1;
                }


                } finally {dbg.exitDecision(259);}

                switch (alt259) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:25: ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg
            	    {
            	    dbg.location(1093,25);
            	    if ( input.LA(1)==SEMI||input.LA(1)==COMMA ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }

            	    dbg.location(1093,40);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:40: ( ws )?
            	    int alt258=2;
            	    try { dbg.enterSubRule(258);
            	    try { dbg.enterDecision(258, decisionCanBacktrack[258]);

            	    int LA258_0 = input.LA(1);

            	    if ( ((LA258_0>=WS && LA258_0<=COMMENT)) ) {
            	        alt258=1;
            	    }
            	    } finally {dbg.exitDecision(258);}

            	    switch (alt258) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:40: ws
            	            {
            	            dbg.location(1093,40);
            	            pushFollow(FOLLOW_ws_in_cp_mixin_call_args6841);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(258);}

            	    dbg.location(1093,44);
            	    pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6844);
            	    cp_mixin_call_arg();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop259;
                }
            } while (true);
            } finally {dbg.exitSubRule(259);}

            dbg.location(1093,65);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:65: ( CP_DOTS )?
            int alt260=2;
            try { dbg.enterSubRule(260);
            try { dbg.enterDecision(260, decisionCanBacktrack[260]);

            int LA260_0 = input.LA(1);

            if ( (LA260_0==CP_DOTS) ) {
                alt260=1;
            }
            } finally {dbg.exitDecision(260);}

            switch (alt260) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:65: CP_DOTS
                    {
                    dbg.location(1093,65);
                    match(input,CP_DOTS,FOLLOW_CP_DOTS_in_cp_mixin_call_args6849); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(260);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1094, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_call_args");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_call_args"


    // $ANTLR start "cp_mixin_call_arg"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:1: cp_mixin_call_arg : ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? ;
    public final void cp_mixin_call_arg() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_arg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1096, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:5: ( ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1098:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )?
            {
            dbg.location(1098,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1098:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )
            int alt263=2;
            try { dbg.enterSubRule(263);
            try { dbg.enterDecision(263, decisionCanBacktrack[263]);

            try {
                isCyclicDecision = true;
                alt263 = dfa263.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(263);}

            switch (alt263) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1099:9: cp_variable ( ws )? COLON ( ws )? cp_expression
                    {
                    dbg.location(1099,9);
                    pushFollow(FOLLOW_cp_variable_in_cp_mixin_call_arg6888);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1099,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1099:21: ( ws )?
                    int alt261=2;
                    try { dbg.enterSubRule(261);
                    try { dbg.enterDecision(261, decisionCanBacktrack[261]);

                    int LA261_0 = input.LA(1);

                    if ( ((LA261_0>=WS && LA261_0<=COMMENT)) ) {
                        alt261=1;
                    }
                    } finally {dbg.exitDecision(261);}

                    switch (alt261) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1099:21: ws
                            {
                            dbg.location(1099,21);
                            pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6890);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(261);}

                    dbg.location(1099,25);
                    match(input,COLON,FOLLOW_COLON_in_cp_mixin_call_arg6893); if (state.failed) return ;
                    dbg.location(1099,31);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1099:31: ( ws )?
                    int alt262=2;
                    try { dbg.enterSubRule(262);
                    try { dbg.enterDecision(262, decisionCanBacktrack[262]);

                    int LA262_0 = input.LA(1);

                    if ( ((LA262_0>=WS && LA262_0<=COMMENT)) ) {
                        alt262=1;
                    }
                    } finally {dbg.exitDecision(262);}

                    switch (alt262) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1099:31: ws
                            {
                            dbg.location(1099,31);
                            pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6895);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(262);}

                    dbg.location(1099,35);
                    pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg6898);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1100:11: cp_expression
                    {
                    dbg.location(1100,11);
                    pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg6910);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(263);}

            dbg.location(1101,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1101:7: ( ws )?
            int alt264=2;
            try { dbg.enterSubRule(264);
            try { dbg.enterDecision(264, decisionCanBacktrack[264]);

            int LA264_0 = input.LA(1);

            if ( ((LA264_0>=WS && LA264_0<=COMMENT)) ) {
                alt264=1;
            }
            } finally {dbg.exitDecision(264);}

            switch (alt264) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1101:7: ws
                    {
                    dbg.location(1101,7);
                    pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6918);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(264);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1102, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_call_arg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_call_arg"


    // $ANTLR start "cp_args_list"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1105:1: cp_args_list : ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST ) )? ) | ( CP_DOTS | LESS_REST ) );
    public final void cp_args_list() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_args_list");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1105, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1106:5: ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST ) )? ) | ( CP_DOTS | LESS_REST ) )
            int alt270=2;
            try { dbg.enterDecision(270, decisionCanBacktrack[270]);

            int LA270_0 = input.LA(1);

            if ( (LA270_0==NAMESPACE_SYM||(LA270_0>=CHARSET_SYM && LA270_0<=IMPORT_SYM)||LA270_0==MEDIA_SYM||(LA270_0>=AT_IDENT && LA270_0<=MOZ_DOCUMENT_SYM)||LA270_0==WEBKIT_KEYFRAMES_SYM||(LA270_0>=PAGE_SYM && LA270_0<=RIGHTBOTTOM_SYM)||LA270_0==SASS_VAR||(LA270_0>=SASS_CONTENT && LA270_0<=SASS_WHILE)) ) {
                alt270=1;
            }
            else if ( ((LA270_0>=CP_DOTS && LA270_0<=LESS_REST)) ) {
                alt270=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 270, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(270);}

            switch (alt270) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1113:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST ) )? )
                    {
                    dbg.location(1113,5);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1113:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST ) )? )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1113:7: cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST ) )?
                    {
                    dbg.location(1113,7);
                    pushFollow(FOLLOW_cp_arg_in_cp_args_list6970);
                    cp_arg();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1113,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1113:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*
                    try { dbg.enterSubRule(266);

                    loop266:
                    do {
                        int alt266=2;
                        try { dbg.enterDecision(266, decisionCanBacktrack[266]);

                        try {
                            isCyclicDecision = true;
                            alt266 = dfa266.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(266);}

                        switch (alt266) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1113:16: ( COMMA | SEMI ) ( ws )? cp_arg
                    	    {
                    	    dbg.location(1113,16);
                    	    if ( input.LA(1)==SEMI||input.LA(1)==COMMA ) {
                    	        input.consume();
                    	        state.errorRecovery=false;state.failed=false;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return ;}
                    	        MismatchedSetException mse = new MismatchedSetException(null,input);
                    	        dbg.recognitionException(mse);
                    	        throw mse;
                    	    }

                    	    dbg.location(1113,33);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1113:33: ( ws )?
                    	    int alt265=2;
                    	    try { dbg.enterSubRule(265);
                    	    try { dbg.enterDecision(265, decisionCanBacktrack[265]);

                    	    int LA265_0 = input.LA(1);

                    	    if ( ((LA265_0>=WS && LA265_0<=COMMENT)) ) {
                    	        alt265=1;
                    	    }
                    	    } finally {dbg.exitDecision(265);}

                    	    switch (alt265) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1113:33: ws
                    	            {
                    	            dbg.location(1113,33);
                    	            pushFollow(FOLLOW_ws_in_cp_args_list6984);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(265);}

                    	    dbg.location(1113,37);
                    	    pushFollow(FOLLOW_cp_arg_in_cp_args_list6987);
                    	    cp_arg();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop266;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(266);}

                    dbg.location(1113,46);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1113:46: ( ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST ) )?
                    int alt269=2;
                    try { dbg.enterSubRule(269);
                    try { dbg.enterDecision(269, decisionCanBacktrack[269]);

                    int LA269_0 = input.LA(1);

                    if ( (LA269_0==SEMI||LA269_0==COMMA||(LA269_0>=CP_DOTS && LA269_0<=LESS_REST)) ) {
                        alt269=1;
                    }
                    } finally {dbg.exitDecision(269);}

                    switch (alt269) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1113:48: ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST )
                            {
                            dbg.location(1113,48);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1113:48: ( ( COMMA | SEMI ) ( ws )? )?
                            int alt268=2;
                            try { dbg.enterSubRule(268);
                            try { dbg.enterDecision(268, decisionCanBacktrack[268]);

                            int LA268_0 = input.LA(1);

                            if ( (LA268_0==SEMI||LA268_0==COMMA) ) {
                                alt268=1;
                            }
                            } finally {dbg.exitDecision(268);}

                            switch (alt268) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1113:50: ( COMMA | SEMI ) ( ws )?
                                    {
                                    dbg.location(1113,50);
                                    if ( input.LA(1)==SEMI||input.LA(1)==COMMA ) {
                                        input.consume();
                                        state.errorRecovery=false;state.failed=false;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return ;}
                                        MismatchedSetException mse = new MismatchedSetException(null,input);
                                        dbg.recognitionException(mse);
                                        throw mse;
                                    }

                                    dbg.location(1113,65);
                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1113:65: ( ws )?
                                    int alt267=2;
                                    try { dbg.enterSubRule(267);
                                    try { dbg.enterDecision(267, decisionCanBacktrack[267]);

                                    int LA267_0 = input.LA(1);

                                    if ( ((LA267_0>=WS && LA267_0<=COMMENT)) ) {
                                        alt267=1;
                                    }
                                    } finally {dbg.exitDecision(267);}

                                    switch (alt267) {
                                        case 1 :
                                            dbg.enterAlt(1);

                                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1113:65: ws
                                            {
                                            dbg.location(1113,65);
                                            pushFollow(FOLLOW_ws_in_cp_args_list7003);
                                            ws();

                                            state._fsp--;
                                            if (state.failed) return ;

                                            }
                                            break;

                                    }
                                    } finally {dbg.exitSubRule(267);}


                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(268);}

                            dbg.location(1113,72);
                            if ( (input.LA(1)>=CP_DOTS && input.LA(1)<=LESS_REST) ) {
                                input.consume();
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                dbg.recognitionException(mse);
                                throw mse;
                            }


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(269);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:5: ( CP_DOTS | LESS_REST )
                    {
                    dbg.location(1115,5);
                    if ( (input.LA(1)>=CP_DOTS && input.LA(1)<=LESS_REST) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1116, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_args_list");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_args_list"


    // $ANTLR start "cp_arg"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1119:1: cp_arg : cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? ;
    public final void cp_arg() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_arg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1119, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1120:5: ( cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1121:5: cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )?
            {
            dbg.location(1121,5);
            pushFollow(FOLLOW_cp_variable_in_cp_arg7063);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1121,17);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1121:17: ( ws )?
            int alt271=2;
            try { dbg.enterSubRule(271);
            try { dbg.enterDecision(271, decisionCanBacktrack[271]);

            int LA271_0 = input.LA(1);

            if ( ((LA271_0>=WS && LA271_0<=COMMENT)) ) {
                alt271=1;
            }
            } finally {dbg.exitDecision(271);}

            switch (alt271) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1121:17: ws
                    {
                    dbg.location(1121,17);
                    pushFollow(FOLLOW_ws_in_cp_arg7065);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(271);}

            dbg.location(1121,21);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1121:21: ( COLON ( ws )? cp_expression ( ws )? )?
            int alt274=2;
            try { dbg.enterSubRule(274);
            try { dbg.enterDecision(274, decisionCanBacktrack[274]);

            int LA274_0 = input.LA(1);

            if ( (LA274_0==COLON) ) {
                alt274=1;
            }
            } finally {dbg.exitDecision(274);}

            switch (alt274) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1121:23: COLON ( ws )? cp_expression ( ws )?
                    {
                    dbg.location(1121,23);
                    match(input,COLON,FOLLOW_COLON_in_cp_arg7070); if (state.failed) return ;
                    dbg.location(1121,29);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1121:29: ( ws )?
                    int alt272=2;
                    try { dbg.enterSubRule(272);
                    try { dbg.enterDecision(272, decisionCanBacktrack[272]);

                    int LA272_0 = input.LA(1);

                    if ( ((LA272_0>=WS && LA272_0<=COMMENT)) ) {
                        alt272=1;
                    }
                    } finally {dbg.exitDecision(272);}

                    switch (alt272) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1121:29: ws
                            {
                            dbg.location(1121,29);
                            pushFollow(FOLLOW_ws_in_cp_arg7072);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(272);}

                    dbg.location(1121,33);
                    pushFollow(FOLLOW_cp_expression_in_cp_arg7075);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1121,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1121:47: ( ws )?
                    int alt273=2;
                    try { dbg.enterSubRule(273);
                    try { dbg.enterDecision(273, decisionCanBacktrack[273]);

                    int LA273_0 = input.LA(1);

                    if ( ((LA273_0>=WS && LA273_0<=COMMENT)) ) {
                        alt273=1;
                    }
                    } finally {dbg.exitDecision(273);}

                    switch (alt273) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1121:47: ws
                            {
                            dbg.location(1121,47);
                            pushFollow(FOLLOW_ws_in_cp_arg7077);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(273);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(274);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1122, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_arg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_arg"


    // $ANTLR start "less_mixin_guarded"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1126:1: less_mixin_guarded : LESS_WHEN ( ws )? less_condition ( ( COMMA | AND ) ( ws )? less_condition )* ;
    public final void less_mixin_guarded() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_mixin_guarded");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1126, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1127:5: ( LESS_WHEN ( ws )? less_condition ( ( COMMA | AND ) ( ws )? less_condition )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1128:5: LESS_WHEN ( ws )? less_condition ( ( COMMA | AND ) ( ws )? less_condition )*
            {
            dbg.location(1128,5);
            match(input,LESS_WHEN,FOLLOW_LESS_WHEN_in_less_mixin_guarded7103); if (state.failed) return ;
            dbg.location(1128,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1128:15: ( ws )?
            int alt275=2;
            try { dbg.enterSubRule(275);
            try { dbg.enterDecision(275, decisionCanBacktrack[275]);

            int LA275_0 = input.LA(1);

            if ( ((LA275_0>=WS && LA275_0<=COMMENT)) ) {
                alt275=1;
            }
            } finally {dbg.exitDecision(275);}

            switch (alt275) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1128:15: ws
                    {
                    dbg.location(1128,15);
                    pushFollow(FOLLOW_ws_in_less_mixin_guarded7105);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(275);}

            dbg.location(1128,19);
            pushFollow(FOLLOW_less_condition_in_less_mixin_guarded7108);
            less_condition();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1128,34);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1128:34: ( ( COMMA | AND ) ( ws )? less_condition )*
            try { dbg.enterSubRule(277);

            loop277:
            do {
                int alt277=2;
                try { dbg.enterDecision(277, decisionCanBacktrack[277]);

                int LA277_0 = input.LA(1);

                if ( (LA277_0==COMMA||LA277_0==AND) ) {
                    alt277=1;
                }


                } finally {dbg.exitDecision(277);}

                switch (alt277) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1128:36: ( COMMA | AND ) ( ws )? less_condition
            	    {
            	    dbg.location(1128,36);
            	    if ( input.LA(1)==COMMA||input.LA(1)==AND ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }

            	    dbg.location(1128,50);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1128:50: ( ws )?
            	    int alt276=2;
            	    try { dbg.enterSubRule(276);
            	    try { dbg.enterDecision(276, decisionCanBacktrack[276]);

            	    int LA276_0 = input.LA(1);

            	    if ( ((LA276_0>=WS && LA276_0<=COMMENT)) ) {
            	        alt276=1;
            	    }
            	    } finally {dbg.exitDecision(276);}

            	    switch (alt276) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1128:50: ws
            	            {
            	            dbg.location(1128,50);
            	            pushFollow(FOLLOW_ws_in_less_mixin_guarded7120);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(276);}

            	    dbg.location(1128,54);
            	    pushFollow(FOLLOW_less_condition_in_less_mixin_guarded7123);
            	    less_condition();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop277;
                }
            } while (true);
            } finally {dbg.exitSubRule(277);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1129, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_mixin_guarded");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_mixin_guarded"


    // $ANTLR start "less_condition"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1133:1: less_condition : ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN ;
    public final void less_condition() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_condition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1133, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:5: ( ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1135:5: ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN
            {
            dbg.location(1135,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1135:5: ( NOT ( ws )? )?
            int alt279=2;
            try { dbg.enterSubRule(279);
            try { dbg.enterDecision(279, decisionCanBacktrack[279]);

            int LA279_0 = input.LA(1);

            if ( (LA279_0==NOT) ) {
                alt279=1;
            }
            } finally {dbg.exitDecision(279);}

            switch (alt279) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1135:6: NOT ( ws )?
                    {
                    dbg.location(1135,6);
                    match(input,NOT,FOLLOW_NOT_in_less_condition7153); if (state.failed) return ;
                    dbg.location(1135,10);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1135:10: ( ws )?
                    int alt278=2;
                    try { dbg.enterSubRule(278);
                    try { dbg.enterDecision(278, decisionCanBacktrack[278]);

                    int LA278_0 = input.LA(1);

                    if ( ((LA278_0>=WS && LA278_0<=COMMENT)) ) {
                        alt278=1;
                    }
                    } finally {dbg.exitDecision(278);}

                    switch (alt278) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1135:10: ws
                            {
                            dbg.location(1135,10);
                            pushFollow(FOLLOW_ws_in_less_condition7155);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(278);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(279);}

            dbg.location(1136,5);
            match(input,LPAREN,FOLLOW_LPAREN_in_less_condition7164); if (state.failed) return ;
            dbg.location(1136,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1136:12: ( ws )?
            int alt280=2;
            try { dbg.enterSubRule(280);
            try { dbg.enterDecision(280, decisionCanBacktrack[280]);

            int LA280_0 = input.LA(1);

            if ( ((LA280_0>=WS && LA280_0<=COMMENT)) ) {
                alt280=1;
            }
            } finally {dbg.exitDecision(280);}

            switch (alt280) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1136:12: ws
                    {
                    dbg.location(1136,12);
                    pushFollow(FOLLOW_ws_in_less_condition7166);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(280);}

            dbg.location(1137,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1137:9: ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:14: ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )?
            {
            dbg.location(1138,14);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:14: ( cp_variable | less_function_in_condition )
            int alt281=2;
            try { dbg.enterSubRule(281);
            try { dbg.enterDecision(281, decisionCanBacktrack[281]);

            int LA281_0 = input.LA(1);

            if ( (LA281_0==NAMESPACE_SYM||(LA281_0>=CHARSET_SYM && LA281_0<=IMPORT_SYM)||LA281_0==MEDIA_SYM||(LA281_0>=AT_IDENT && LA281_0<=MOZ_DOCUMENT_SYM)||LA281_0==WEBKIT_KEYFRAMES_SYM||(LA281_0>=PAGE_SYM && LA281_0<=RIGHTBOTTOM_SYM)||LA281_0==SASS_VAR||(LA281_0>=SASS_CONTENT && LA281_0<=SASS_WHILE)) ) {
                alt281=1;
            }
            else if ( (LA281_0==IDENT) ) {
                alt281=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 281, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(281);}

            switch (alt281) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:15: cp_variable
                    {
                    dbg.location(1138,15);
                    pushFollow(FOLLOW_cp_variable_in_less_condition7194);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:29: less_function_in_condition
                    {
                    dbg.location(1138,29);
                    pushFollow(FOLLOW_less_function_in_condition_in_less_condition7198);
                    less_function_in_condition();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(281);}

            dbg.location(1138,57);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:57: ( ws )?
            int alt282=2;
            try { dbg.enterSubRule(282);
            try { dbg.enterDecision(282, decisionCanBacktrack[282]);

            int LA282_0 = input.LA(1);

            if ( ((LA282_0>=WS && LA282_0<=COMMENT)) ) {
                alt282=1;
            }
            } finally {dbg.exitDecision(282);}

            switch (alt282) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:57: ws
                    {
                    dbg.location(1138,57);
                    pushFollow(FOLLOW_ws_in_less_condition7201);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(282);}

            dbg.location(1138,61);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:61: ( less_condition_operator ( ws )? cp_math_expression )?
            int alt284=2;
            try { dbg.enterSubRule(284);
            try { dbg.enterDecision(284, decisionCanBacktrack[284]);

            int LA284_0 = input.LA(1);

            if ( (LA284_0==GREATER||LA284_0==OPEQ||(LA284_0>=LESS && LA284_0<=GREATER_OR_EQ)) ) {
                alt284=1;
            }
            } finally {dbg.exitDecision(284);}

            switch (alt284) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:62: less_condition_operator ( ws )? cp_math_expression
                    {
                    dbg.location(1138,62);
                    pushFollow(FOLLOW_less_condition_operator_in_less_condition7205);
                    less_condition_operator();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1138,86);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:86: ( ws )?
                    int alt283=2;
                    try { dbg.enterSubRule(283);
                    try { dbg.enterDecision(283, decisionCanBacktrack[283]);

                    int LA283_0 = input.LA(1);

                    if ( ((LA283_0>=WS && LA283_0<=COMMENT)) ) {
                        alt283=1;
                    }
                    } finally {dbg.exitDecision(283);}

                    switch (alt283) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:86: ws
                            {
                            dbg.location(1138,86);
                            pushFollow(FOLLOW_ws_in_less_condition7207);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(283);}

                    dbg.location(1138,90);
                    pushFollow(FOLLOW_cp_math_expression_in_less_condition7210);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(284);}


            }

            dbg.location(1140,5);
            match(input,RPAREN,FOLLOW_RPAREN_in_less_condition7236); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1141, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_condition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_condition"


    // $ANTLR start "less_function_in_condition"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1144:1: less_function_in_condition : less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN ;
    public final void less_function_in_condition() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_function_in_condition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1144, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1145:5: ( less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:5: less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN
            {
            dbg.location(1146,5);
            pushFollow(FOLLOW_less_fn_name_in_less_function_in_condition7262);
            less_fn_name();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1146,18);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:18: ( ws )?
            int alt285=2;
            try { dbg.enterSubRule(285);
            try { dbg.enterDecision(285, decisionCanBacktrack[285]);

            int LA285_0 = input.LA(1);

            if ( ((LA285_0>=WS && LA285_0<=COMMENT)) ) {
                alt285=1;
            }
            } finally {dbg.exitDecision(285);}

            switch (alt285) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:18: ws
                    {
                    dbg.location(1146,18);
                    pushFollow(FOLLOW_ws_in_less_function_in_condition7264);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(285);}

            dbg.location(1146,22);
            match(input,LPAREN,FOLLOW_LPAREN_in_less_function_in_condition7267); if (state.failed) return ;
            dbg.location(1146,29);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:29: ( ws )?
            int alt286=2;
            try { dbg.enterSubRule(286);
            try { dbg.enterDecision(286, decisionCanBacktrack[286]);

            int LA286_0 = input.LA(1);

            if ( ((LA286_0>=WS && LA286_0<=COMMENT)) ) {
                alt286=1;
            }
            } finally {dbg.exitDecision(286);}

            switch (alt286) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:29: ws
                    {
                    dbg.location(1146,29);
                    pushFollow(FOLLOW_ws_in_less_function_in_condition7269);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(286);}

            dbg.location(1146,33);
            pushFollow(FOLLOW_cp_variable_in_less_function_in_condition7272);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1146,45);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:45: ( ws )?
            int alt287=2;
            try { dbg.enterSubRule(287);
            try { dbg.enterDecision(287, decisionCanBacktrack[287]);

            int LA287_0 = input.LA(1);

            if ( ((LA287_0>=WS && LA287_0<=COMMENT)) ) {
                alt287=1;
            }
            } finally {dbg.exitDecision(287);}

            switch (alt287) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1146:45: ws
                    {
                    dbg.location(1146,45);
                    pushFollow(FOLLOW_ws_in_less_function_in_condition7274);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(287);}

            dbg.location(1146,49);
            match(input,RPAREN,FOLLOW_RPAREN_in_less_function_in_condition7277); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1147, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_function_in_condition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_function_in_condition"


    // $ANTLR start "less_fn_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:1: less_fn_name : IDENT ;
    public final void less_fn_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_fn_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1150, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1151:5: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1152:5: IDENT
            {
            dbg.location(1152,5);
            match(input,IDENT,FOLLOW_IDENT_in_less_fn_name7299); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1153, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_fn_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_fn_name"


    // $ANTLR start "less_condition_operator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1155:1: less_condition_operator : ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ );
    public final void less_condition_operator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_condition_operator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1155, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1156:5: ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(1156,5);
            if ( input.LA(1)==GREATER||input.LA(1)==OPEQ||(input.LA(1)>=LESS && input.LA(1)<=GREATER_OR_EQ) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1158, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_condition_operator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_condition_operator"


    // $ANTLR start "less_selector_interpolation"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1160:1: less_selector_interpolation : AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE ;
    public final void less_selector_interpolation() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_selector_interpolation");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1160, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1161:5: ( AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1162:5: AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE
            {
            dbg.location(1162,5);
            match(input,AT_SIGN,FOLLOW_AT_SIGN_in_less_selector_interpolation7361); if (state.failed) return ;
            dbg.location(1162,13);
            match(input,LBRACE,FOLLOW_LBRACE_in_less_selector_interpolation7363); if (state.failed) return ;
            dbg.location(1162,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1162:20: ( ws )?
            int alt288=2;
            try { dbg.enterSubRule(288);
            try { dbg.enterDecision(288, decisionCanBacktrack[288]);

            int LA288_0 = input.LA(1);

            if ( ((LA288_0>=WS && LA288_0<=COMMENT)) ) {
                alt288=1;
            }
            } finally {dbg.exitDecision(288);}

            switch (alt288) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1162:20: ws
                    {
                    dbg.location(1162,20);
                    pushFollow(FOLLOW_ws_in_less_selector_interpolation7365);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(288);}

            dbg.location(1162,24);
            match(input,IDENT,FOLLOW_IDENT_in_less_selector_interpolation7368); if (state.failed) return ;
            dbg.location(1162,30);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1162:30: ( ws )?
            int alt289=2;
            try { dbg.enterSubRule(289);
            try { dbg.enterDecision(289, decisionCanBacktrack[289]);

            int LA289_0 = input.LA(1);

            if ( ((LA289_0>=WS && LA289_0<=COMMENT)) ) {
                alt289=1;
            }
            } finally {dbg.exitDecision(289);}

            switch (alt289) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1162:30: ws
                    {
                    dbg.location(1162,30);
                    pushFollow(FOLLOW_ws_in_less_selector_interpolation7370);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(289);}

            dbg.location(1162,34);
            match(input,RBRACE,FOLLOW_RBRACE_in_less_selector_interpolation7373); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1163, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_selector_interpolation");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_selector_interpolation"


    // $ANTLR start "sass_selector_interpolation_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1170:1: sass_selector_interpolation_expression : ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )* ;
    public final void sass_selector_interpolation_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_selector_interpolation_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1170, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1171:5: ( ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1172:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )*
            {
            dbg.location(1172,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1172:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) )
            int alt290=2;
            try { dbg.enterSubRule(290);
            try { dbg.enterDecision(290, decisionCanBacktrack[290]);

            int LA290_0 = input.LA(1);

            if ( (LA290_0==HASH_SYMBOL) ) {
                int LA290_1 = input.LA(2);

                if ( (synpred37_Css3()) ) {
                    alt290=1;
                }
                else if ( (true) ) {
                    alt290=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 290, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA290_0==IDENT||LA290_0==COMMA||LA290_0==COLON||LA290_0==MINUS||LA290_0==GREATER||(LA290_0>=HASH && LA290_0<=LBRACKET)||LA290_0==STAR||LA290_0==LESS_AND||LA290_0==RBRACKET) ) {
                alt290=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 290, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(290);}

            switch (alt290) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1173:13: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
                    {
                    dbg.location(1173,50);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7422);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1175:13: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET )
                    {
                    dbg.location(1175,13);
                    if ( input.LA(1)==IDENT||input.LA(1)==COMMA||input.LA(1)==COLON||input.LA(1)==MINUS||input.LA(1)==GREATER||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=LBRACKET)||input.LA(1)==STAR||input.LA(1)==LESS_AND||input.LA(1)==RBRACKET ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(290);}

            dbg.location(1177,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1177:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )*
            try { dbg.enterSubRule(293);

            loop293:
            do {
                int alt293=2;
                try { dbg.enterDecision(293, decisionCanBacktrack[293]);

                try {
                    isCyclicDecision = true;
                    alt293 = dfa293.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(293);}

                switch (alt293) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1178:13: ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) )
            	    {
            	    dbg.location(1178,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1178:13: ( ws )?
            	    int alt291=2;
            	    try { dbg.enterSubRule(291);
            	    try { dbg.enterDecision(291, decisionCanBacktrack[291]);

            	    int LA291_0 = input.LA(1);

            	    if ( ((LA291_0>=WS && LA291_0<=COMMENT)) ) {
            	        alt291=1;
            	    }
            	    } finally {dbg.exitDecision(291);}

            	    switch (alt291) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1178:13: ws
            	            {
            	            dbg.location(1178,13);
            	            pushFollow(FOLLOW_ws_in_sass_selector_interpolation_expression7532);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(291);}

            	    dbg.location(1179,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1179:13: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) )
            	    int alt292=2;
            	    try { dbg.enterSubRule(292);
            	    try { dbg.enterDecision(292, decisionCanBacktrack[292]);

            	    int LA292_0 = input.LA(1);

            	    if ( (LA292_0==HASH_SYMBOL) ) {
            	        int LA292_1 = input.LA(2);

            	        if ( (synpred38_Css3()) ) {
            	            alt292=1;
            	        }
            	        else if ( (true) ) {
            	            alt292=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return ;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 292, 1, input);

            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	    }
            	    else if ( (LA292_0==IDENT||LA292_0==COMMA||LA292_0==COLON||LA292_0==MINUS||LA292_0==GREATER||(LA292_0>=HASH && LA292_0<=LBRACKET)||LA292_0==STAR||LA292_0==LESS_AND||LA292_0==RBRACKET) ) {
            	        alt292=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 292, 0, input);

            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(292);}

            	    switch (alt292) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1180:17: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
            	            {
            	            dbg.location(1180,54);
            	            pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7569);
            	            sass_interpolation_expression_var();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1182:17: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET )
            	            {
            	            dbg.location(1182,17);
            	            if ( input.LA(1)==IDENT||input.LA(1)==COMMA||input.LA(1)==COLON||input.LA(1)==MINUS||input.LA(1)==GREATER||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=LBRACKET)||input.LA(1)==STAR||input.LA(1)==LESS_AND||input.LA(1)==RBRACKET ) {
            	                input.consume();
            	                state.errorRecovery=false;state.failed=false;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return ;}
            	                MismatchedSetException mse = new MismatchedSetException(null,input);
            	                dbg.recognitionException(mse);
            	                throw mse;
            	            }


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(292);}


            	    }
            	    break;

            	default :
            	    break loop293;
                }
            } while (true);
            } finally {dbg.exitSubRule(293);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1186, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_selector_interpolation_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_selector_interpolation_expression"


    // $ANTLR start "sass_declaration_interpolation_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1188:1: sass_declaration_interpolation_expression : ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )* ;
    public final void sass_declaration_interpolation_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_declaration_interpolation_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1188, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1189:5: ( ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1190:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*
            {
            dbg.location(1190,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1190:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
            int alt294=2;
            try { dbg.enterSubRule(294);
            try { dbg.enterDecision(294, decisionCanBacktrack[294]);

            int LA294_0 = input.LA(1);

            if ( (LA294_0==HASH_SYMBOL) ) {
                int LA294_1 = input.LA(2);

                if ( (LA294_1==LBRACE) && (synpred39_Css3())) {
                    alt294=1;
                }
                else if ( (LA294_1==IDENT||LA294_1==COLON||LA294_1==MINUS||(LA294_1>=HASH_SYMBOL && LA294_1<=DOT)||(LA294_1>=WS && LA294_1<=COMMENT)) ) {
                    alt294=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 294, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA294_0==IDENT||LA294_0==MINUS||(LA294_0>=HASH && LA294_0<=DOT)) ) {
                alt294=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 294, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(294);}

            switch (alt294) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1191:13: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
                    {
                    dbg.location(1191,50);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7725);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1193:13: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH )
                    {
                    dbg.location(1193,13);
                    if ( input.LA(1)==IDENT||input.LA(1)==MINUS||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=DOT) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(294);}

            dbg.location(1195,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1195:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*
            try { dbg.enterSubRule(297);

            loop297:
            do {
                int alt297=2;
                try { dbg.enterDecision(297, decisionCanBacktrack[297]);

                try {
                    isCyclicDecision = true;
                    alt297 = dfa297.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(297);}

                switch (alt297) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1196:13: ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
            	    {
            	    dbg.location(1196,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1196:13: ( ws )?
            	    int alt295=2;
            	    try { dbg.enterSubRule(295);
            	    try { dbg.enterDecision(295, decisionCanBacktrack[295]);

            	    int LA295_0 = input.LA(1);

            	    if ( ((LA295_0>=WS && LA295_0<=COMMENT)) ) {
            	        alt295=1;
            	    }
            	    } finally {dbg.exitDecision(295);}

            	    switch (alt295) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1196:13: ws
            	            {
            	            dbg.location(1196,13);
            	            pushFollow(FOLLOW_ws_in_sass_declaration_interpolation_expression7806);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(295);}

            	    dbg.location(1197,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1197:13: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
            	    int alt296=2;
            	    try { dbg.enterSubRule(296);
            	    try { dbg.enterDecision(296, decisionCanBacktrack[296]);

            	    int LA296_0 = input.LA(1);

            	    if ( (LA296_0==HASH_SYMBOL) ) {
            	        int LA296_1 = input.LA(2);

            	        if ( (LA296_1==LBRACE) && (synpred40_Css3())) {
            	            alt296=1;
            	        }
            	        else if ( (LA296_1==IDENT||LA296_1==COLON||LA296_1==MINUS||(LA296_1>=HASH_SYMBOL && LA296_1<=DOT)||(LA296_1>=WS && LA296_1<=COMMENT)) ) {
            	            alt296=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return ;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 296, 1, input);

            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	    }
            	    else if ( (LA296_0==IDENT||LA296_0==MINUS||(LA296_0>=HASH && LA296_0<=DOT)) ) {
            	        alt296=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 296, 0, input);

            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(296);}

            	    switch (alt296) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1198:17: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
            	            {
            	            dbg.location(1198,54);
            	            pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7843);
            	            sass_interpolation_expression_var();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1200:17: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH )
            	            {
            	            dbg.location(1200,17);
            	            if ( input.LA(1)==IDENT||input.LA(1)==MINUS||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=DOT) ) {
            	                input.consume();
            	                state.errorRecovery=false;state.failed=false;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return ;}
            	                MismatchedSetException mse = new MismatchedSetException(null,input);
            	                dbg.recognitionException(mse);
            	                throw mse;
            	            }


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(296);}


            	    }
            	    break;

            	default :
            	    break loop297;
                }
            } while (true);
            } finally {dbg.exitSubRule(297);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1204, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_declaration_interpolation_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_declaration_interpolation_expression"


    // $ANTLR start "sass_interpolation_expression_var"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1206:1: sass_interpolation_expression_var : HASH_SYMBOL LBRACE cp_expression RBRACE ;
    public final void sass_interpolation_expression_var() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_interpolation_expression_var");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1206, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1207:5: ( HASH_SYMBOL LBRACE cp_expression RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1208:9: HASH_SYMBOL LBRACE cp_expression RBRACE
            {
            dbg.location(1208,9);
            match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var7952); if (state.failed) return ;
            dbg.location(1208,21);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_interpolation_expression_var7954); if (state.failed) return ;
            dbg.location(1208,28);
            pushFollow(FOLLOW_cp_expression_in_sass_interpolation_expression_var7956);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1208,42);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_interpolation_expression_var7958); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1209, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_interpolation_expression_var");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_interpolation_expression_var"


    // $ANTLR start "sass_nested_properties"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1229:1: sass_nested_properties : property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void sass_nested_properties() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_nested_properties");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1229, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:5: ( property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1231:5: property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(1231,5);
            pushFollow(FOLLOW_property_in_sass_nested_properties8002);
            property();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1231,14);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1231:14: ( ws )?
            int alt298=2;
            try { dbg.enterSubRule(298);
            try { dbg.enterDecision(298, decisionCanBacktrack[298]);

            int LA298_0 = input.LA(1);

            if ( ((LA298_0>=WS && LA298_0<=COMMENT)) ) {
                alt298=1;
            }
            } finally {dbg.exitDecision(298);}

            switch (alt298) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1231:14: ws
                    {
                    dbg.location(1231,14);
                    pushFollow(FOLLOW_ws_in_sass_nested_properties8004);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(298);}

            dbg.location(1231,18);
            match(input,COLON,FOLLOW_COLON_in_sass_nested_properties8007); if (state.failed) return ;
            dbg.location(1231,24);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1231:24: ( ws )?
            int alt299=2;
            try { dbg.enterSubRule(299);
            try { dbg.enterDecision(299, decisionCanBacktrack[299]);

            int LA299_0 = input.LA(1);

            if ( ((LA299_0>=WS && LA299_0<=COMMENT)) ) {
                alt299=1;
            }
            } finally {dbg.exitDecision(299);}

            switch (alt299) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1231:24: ws
                    {
                    dbg.location(1231,24);
                    pushFollow(FOLLOW_ws_in_sass_nested_properties8009);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(299);}

            dbg.location(1231,28);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1231:28: ( propertyValue ( ws )? )?
            int alt301=2;
            try { dbg.enterSubRule(301);
            try { dbg.enterDecision(301, decisionCanBacktrack[301]);

            int LA301_0 = input.LA(1);

            if ( (LA301_0==NAMESPACE_SYM||(LA301_0>=IDENT && LA301_0<=IMPORT_SYM)||LA301_0==MEDIA_SYM||LA301_0==GEN||(LA301_0>=AT_IDENT && LA301_0<=MOZ_DOCUMENT_SYM)||(LA301_0>=WEBKIT_KEYFRAMES_SYM && LA301_0<=RIGHTBOTTOM_SYM)||(LA301_0>=MINUS && LA301_0<=PLUS)||(LA301_0>=TILDE && LA301_0<=HASH)||(LA301_0>=SASS_VAR && LA301_0<=PERCENTAGE_SYMBOL)||(LA301_0>=SASS_CONTENT && LA301_0<=SASS_WHILE)) ) {
                alt301=1;
            }
            } finally {dbg.exitDecision(301);}

            switch (alt301) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1231:29: propertyValue ( ws )?
                    {
                    dbg.location(1231,29);
                    pushFollow(FOLLOW_propertyValue_in_sass_nested_properties8013);
                    propertyValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1231,43);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1231:43: ( ws )?
                    int alt300=2;
                    try { dbg.enterSubRule(300);
                    try { dbg.enterDecision(300, decisionCanBacktrack[300]);

                    int LA300_0 = input.LA(1);

                    if ( ((LA300_0>=WS && LA300_0<=COMMENT)) ) {
                        alt300=1;
                    }
                    } finally {dbg.exitDecision(300);}

                    switch (alt300) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1231:43: ws
                            {
                            dbg.location(1231,43);
                            pushFollow(FOLLOW_ws_in_sass_nested_properties8015);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(300);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(301);}

            dbg.location(1231,49);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_nested_properties8020); if (state.failed) return ;
            dbg.location(1231,56);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1231:56: ( ws )?
            int alt302=2;
            try { dbg.enterSubRule(302);
            try { dbg.enterDecision(302, decisionCanBacktrack[302]);

            int LA302_0 = input.LA(1);

            if ( ((LA302_0>=WS && LA302_0<=COMMENT)) ) {
                alt302=1;
            }
            } finally {dbg.exitDecision(302);}

            switch (alt302) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1231:56: ws
                    {
                    dbg.location(1231,56);
                    pushFollow(FOLLOW_ws_in_sass_nested_properties8022);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(302);}

            dbg.location(1231,60);
            pushFollow(FOLLOW_syncToFollow_in_sass_nested_properties8025);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1231,73);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1231:73: ( declarations )?
            int alt303=2;
            try { dbg.enterSubRule(303);
            try { dbg.enterDecision(303, decisionCanBacktrack[303]);

            int LA303_0 = input.LA(1);

            if ( ((LA303_0>=NAMESPACE_SYM && LA303_0<=IDENT)||(LA303_0>=CHARSET_SYM && LA303_0<=MEDIA_SYM)||LA303_0==GEN||(LA303_0>=COLON && LA303_0<=MOZ_DOCUMENT_SYM)||LA303_0==WEBKIT_KEYFRAMES_SYM||(LA303_0>=PAGE_SYM && LA303_0<=RIGHTBOTTOM_SYM)||(LA303_0>=MINUS && LA303_0<=PIPE)||LA303_0==LESS_AND||(LA303_0>=RBRACKET && LA303_0<=SASS_VAR)||(LA303_0>=SASS_CONTENT && LA303_0<=SASS_WHILE)||LA303_0==AT_SIGN) ) {
                alt303=1;
            }
            } finally {dbg.exitDecision(303);}

            switch (alt303) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1231:73: declarations
                    {
                    dbg.location(1231,73);
                    pushFollow(FOLLOW_declarations_in_sass_nested_properties8027);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(303);}

            dbg.location(1231,87);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_nested_properties8030); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1232, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_nested_properties");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_nested_properties"


    // $ANTLR start "sass_extend"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1234:1: sass_extend : SASS_EXTEND ws simpleSelectorSequence ( ( ws )? SASS_OPTIONAL )? ;
    public final void sass_extend() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_extend");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1234, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:5: ( SASS_EXTEND ws simpleSelectorSequence ( ( ws )? SASS_OPTIONAL )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1236:5: SASS_EXTEND ws simpleSelectorSequence ( ( ws )? SASS_OPTIONAL )?
            {
            dbg.location(1236,5);
            match(input,SASS_EXTEND,FOLLOW_SASS_EXTEND_in_sass_extend8051); if (state.failed) return ;
            dbg.location(1236,17);
            pushFollow(FOLLOW_ws_in_sass_extend8053);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1236,20);
            pushFollow(FOLLOW_simpleSelectorSequence_in_sass_extend8055);
            simpleSelectorSequence();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1236,43);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1236:43: ( ( ws )? SASS_OPTIONAL )?
            int alt305=2;
            try { dbg.enterSubRule(305);
            try { dbg.enterDecision(305, decisionCanBacktrack[305]);

            try {
                isCyclicDecision = true;
                alt305 = dfa305.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(305);}

            switch (alt305) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1236:44: ( ws )? SASS_OPTIONAL
                    {
                    dbg.location(1236,44);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1236:44: ( ws )?
                    int alt304=2;
                    try { dbg.enterSubRule(304);
                    try { dbg.enterDecision(304, decisionCanBacktrack[304]);

                    int LA304_0 = input.LA(1);

                    if ( ((LA304_0>=WS && LA304_0<=COMMENT)) ) {
                        alt304=1;
                    }
                    } finally {dbg.exitDecision(304);}

                    switch (alt304) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1236:44: ws
                            {
                            dbg.location(1236,44);
                            pushFollow(FOLLOW_ws_in_sass_extend8058);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(304);}

                    dbg.location(1236,48);
                    match(input,SASS_OPTIONAL,FOLLOW_SASS_OPTIONAL_in_sass_extend8061); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(305);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1237, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_extend");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_extend"


    // $ANTLR start "sass_extend_only_selector"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1239:1: sass_extend_only_selector : SASS_EXTEND_ONLY_SELECTOR ;
    public final void sass_extend_only_selector() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_extend_only_selector");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1239, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:5: ( SASS_EXTEND_ONLY_SELECTOR )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1241:5: SASS_EXTEND_ONLY_SELECTOR
            {
            dbg.location(1241,5);
            match(input,SASS_EXTEND_ONLY_SELECTOR,FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector8088); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1242, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_extend_only_selector");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_extend_only_selector"


    // $ANTLR start "sass_debug"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1244:1: sass_debug : ( SASS_DEBUG | SASS_WARN ) ws cp_expression ;
    public final void sass_debug() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_debug");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1244, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1245:5: ( ( SASS_DEBUG | SASS_WARN ) ws cp_expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1246:5: ( SASS_DEBUG | SASS_WARN ) ws cp_expression
            {
            dbg.location(1246,5);
            if ( (input.LA(1)>=SASS_DEBUG && input.LA(1)<=SASS_WARN) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(1246,32);
            pushFollow(FOLLOW_ws_in_sass_debug8119);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1246,35);
            pushFollow(FOLLOW_cp_expression_in_sass_debug8121);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1247, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_debug");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_debug"


    // $ANTLR start "sass_control"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1249:1: sass_control : ( sass_if | sass_for | sass_each | sass_while );
    public final void sass_control() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_control");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1249, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1250:5: ( sass_if | sass_for | sass_each | sass_while )
            int alt306=4;
            try { dbg.enterDecision(306, decisionCanBacktrack[306]);

            switch ( input.LA(1) ) {
            case SASS_IF:
                {
                alt306=1;
                }
                break;
            case SASS_FOR:
                {
                alt306=2;
                }
                break;
            case SASS_EACH:
                {
                alt306=3;
                }
                break;
            case SASS_WHILE:
                {
                alt306=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 306, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(306);}

            switch (alt306) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1251:5: sass_if
                    {
                    dbg.location(1251,5);
                    pushFollow(FOLLOW_sass_if_in_sass_control8146);
                    sass_if();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1251:15: sass_for
                    {
                    dbg.location(1251,15);
                    pushFollow(FOLLOW_sass_for_in_sass_control8150);
                    sass_for();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1251:26: sass_each
                    {
                    dbg.location(1251,26);
                    pushFollow(FOLLOW_sass_each_in_sass_control8154);
                    sass_each();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1251:38: sass_while
                    {
                    dbg.location(1251,38);
                    pushFollow(FOLLOW_sass_while_in_sass_control8158);
                    sass_while();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1252, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_control");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_control"


    // $ANTLR start "sass_if"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1254:1: sass_if : SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? ;
    public final void sass_if() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_if");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1254, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1255:5: ( SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1256:5: SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
            {
            dbg.location(1256,5);
            match(input,SASS_IF,FOLLOW_SASS_IF_in_sass_if8179); if (state.failed) return ;
            dbg.location(1256,13);
            pushFollow(FOLLOW_ws_in_sass_if8181);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1256,16);
            pushFollow(FOLLOW_sass_control_expression_in_sass_if8183);
            sass_control_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1256,40);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1256:40: ( ws )?
            int alt307=2;
            try { dbg.enterSubRule(307);
            try { dbg.enterDecision(307, decisionCanBacktrack[307]);

            int LA307_0 = input.LA(1);

            if ( ((LA307_0>=WS && LA307_0<=COMMENT)) ) {
                alt307=1;
            }
            } finally {dbg.exitDecision(307);}

            switch (alt307) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1256:40: ws
                    {
                    dbg.location(1256,40);
                    pushFollow(FOLLOW_ws_in_sass_if8185);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(307);}

            dbg.location(1256,44);
            pushFollow(FOLLOW_sass_control_block_in_sass_if8188);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1256,63);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1256:63: ( ( ws )? sass_else )?
            int alt309=2;
            try { dbg.enterSubRule(309);
            try { dbg.enterDecision(309, decisionCanBacktrack[309]);

            try {
                isCyclicDecision = true;
                alt309 = dfa309.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(309);}

            switch (alt309) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1256:64: ( ws )? sass_else
                    {
                    dbg.location(1256,64);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1256:64: ( ws )?
                    int alt308=2;
                    try { dbg.enterSubRule(308);
                    try { dbg.enterDecision(308, decisionCanBacktrack[308]);

                    int LA308_0 = input.LA(1);

                    if ( ((LA308_0>=WS && LA308_0<=COMMENT)) ) {
                        alt308=1;
                    }
                    } finally {dbg.exitDecision(308);}

                    switch (alt308) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1256:64: ws
                            {
                            dbg.location(1256,64);
                            pushFollow(FOLLOW_ws_in_sass_if8191);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(308);}

                    dbg.location(1256,68);
                    pushFollow(FOLLOW_sass_else_in_sass_if8194);
                    sass_else();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(309);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1257, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_if");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_if"


    // $ANTLR start "sass_else"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );
    public final void sass_else() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_else");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1259, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1260:5: ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
            int alt316=2;
            try { dbg.enterDecision(316, decisionCanBacktrack[316]);

            try {
                isCyclicDecision = true;
                alt316 = dfa316.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(316);}

            switch (alt316) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1261:5: SASS_ELSE ( ws )? sass_control_block
                    {
                    dbg.location(1261,5);
                    match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else8221); if (state.failed) return ;
                    dbg.location(1261,15);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1261:15: ( ws )?
                    int alt310=2;
                    try { dbg.enterSubRule(310);
                    try { dbg.enterDecision(310, decisionCanBacktrack[310]);

                    int LA310_0 = input.LA(1);

                    if ( ((LA310_0>=WS && LA310_0<=COMMENT)) ) {
                        alt310=1;
                    }
                    } finally {dbg.exitDecision(310);}

                    switch (alt310) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1261:15: ws
                            {
                            dbg.location(1261,15);
                            pushFollow(FOLLOW_ws_in_sass_else8223);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(310);}

                    dbg.location(1261,19);
                    pushFollow(FOLLOW_sass_control_block_in_sass_else8226);
                    sass_control_block();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:5: SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
                    {
                    dbg.location(1263,5);
                    match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else8239); if (state.failed) return ;
                    dbg.location(1263,15);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:15: ( ws )?
                    int alt311=2;
                    try { dbg.enterSubRule(311);
                    try { dbg.enterDecision(311, decisionCanBacktrack[311]);

                    int LA311_0 = input.LA(1);

                    if ( ((LA311_0>=WS && LA311_0<=COMMENT)) ) {
                        alt311=1;
                    }
                    } finally {dbg.exitDecision(311);}

                    switch (alt311) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:15: ws
                            {
                            dbg.location(1263,15);
                            pushFollow(FOLLOW_ws_in_sass_else8241);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(311);}

                    dbg.location(1263,19);
                    if ( !(evalPredicate(tokenNameEquals("if"),"tokenNameEquals(\"if\")")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "sass_else", "tokenNameEquals(\"if\")");
                    }
                    dbg.location(1263,44);
                    match(input,IDENT,FOLLOW_IDENT_in_sass_else8246); if (state.failed) return ;
                    dbg.location(1263,59);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:59: ( ws )?
                    int alt312=2;
                    try { dbg.enterSubRule(312);
                    try { dbg.enterDecision(312, decisionCanBacktrack[312]);

                    int LA312_0 = input.LA(1);

                    if ( ((LA312_0>=WS && LA312_0<=COMMENT)) ) {
                        alt312=1;
                    }
                    } finally {dbg.exitDecision(312);}

                    switch (alt312) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:59: ws
                            {
                            dbg.location(1263,59);
                            pushFollow(FOLLOW_ws_in_sass_else8250);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(312);}

                    dbg.location(1263,63);
                    pushFollow(FOLLOW_sass_control_expression_in_sass_else8253);
                    sass_control_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1263,87);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:87: ( ws )?
                    int alt313=2;
                    try { dbg.enterSubRule(313);
                    try { dbg.enterDecision(313, decisionCanBacktrack[313]);

                    int LA313_0 = input.LA(1);

                    if ( ((LA313_0>=WS && LA313_0<=COMMENT)) ) {
                        alt313=1;
                    }
                    } finally {dbg.exitDecision(313);}

                    switch (alt313) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:87: ws
                            {
                            dbg.location(1263,87);
                            pushFollow(FOLLOW_ws_in_sass_else8255);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(313);}

                    dbg.location(1263,91);
                    pushFollow(FOLLOW_sass_control_block_in_sass_else8258);
                    sass_control_block();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1263,110);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:110: ( ( ws )? sass_else )?
                    int alt315=2;
                    try { dbg.enterSubRule(315);
                    try { dbg.enterDecision(315, decisionCanBacktrack[315]);

                    try {
                        isCyclicDecision = true;
                        alt315 = dfa315.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(315);}

                    switch (alt315) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:111: ( ws )? sass_else
                            {
                            dbg.location(1263,111);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:111: ( ws )?
                            int alt314=2;
                            try { dbg.enterSubRule(314);
                            try { dbg.enterDecision(314, decisionCanBacktrack[314]);

                            int LA314_0 = input.LA(1);

                            if ( ((LA314_0>=WS && LA314_0<=COMMENT)) ) {
                                alt314=1;
                            }
                            } finally {dbg.exitDecision(314);}

                            switch (alt314) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:111: ws
                                    {
                                    dbg.location(1263,111);
                                    pushFollow(FOLLOW_ws_in_sass_else8261);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(314);}

                            dbg.location(1263,115);
                            pushFollow(FOLLOW_sass_else_in_sass_else8264);
                            sass_else();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(315);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1264, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_else");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_else"


    // $ANTLR start "sass_control_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1266:1: sass_control_expression : cp_expression ;
    public final void sass_control_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_control_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1266, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1267:5: ( cp_expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1268:5: cp_expression
            {
            dbg.location(1268,5);
            pushFollow(FOLLOW_cp_expression_in_sass_control_expression8287);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1269, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_control_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_control_expression"


    // $ANTLR start "sass_for"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1271:1: sass_for : SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block ;
    public final void sass_for() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_for");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1271, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1272:5: ( SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1273:5: SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block
            {
            dbg.location(1273,5);
            match(input,SASS_FOR,FOLLOW_SASS_FOR_in_sass_for8312); if (state.failed) return ;
            dbg.location(1273,14);
            pushFollow(FOLLOW_ws_in_sass_for8314);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1273,17);
            pushFollow(FOLLOW_cp_variable_in_sass_for8316);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1273,29);
            pushFollow(FOLLOW_ws_in_sass_for8318);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1273,32);
            if ( !(evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "sass_for", "tokenNameEquals(\"from\")");
            }
            dbg.location(1273,59);
            match(input,IDENT,FOLLOW_IDENT_in_sass_for8322); if (state.failed) return ;
            dbg.location(1273,74);
            pushFollow(FOLLOW_ws_in_sass_for8326);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1273,77);
            pushFollow(FOLLOW_cp_math_expression_in_sass_for8328);
            cp_math_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1273,96);
            pushFollow(FOLLOW_ws_in_sass_for8330);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1273,99);
            if ( !(evalPredicate(tokenNameEquals("to")|tokenNameEquals("through"),"tokenNameEquals(\"to\")|tokenNameEquals(\"through\")")) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "sass_for", "tokenNameEquals(\"to\")|tokenNameEquals(\"through\")");
            }
            dbg.location(1273,151);
            match(input,IDENT,FOLLOW_IDENT_in_sass_for8334); if (state.failed) return ;
            dbg.location(1273,173);
            pushFollow(FOLLOW_ws_in_sass_for8338);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1273,176);
            pushFollow(FOLLOW_cp_math_expression_in_sass_for8340);
            cp_math_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1273,195);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1273:195: ( ws )?
            int alt317=2;
            try { dbg.enterSubRule(317);
            try { dbg.enterDecision(317, decisionCanBacktrack[317]);

            int LA317_0 = input.LA(1);

            if ( ((LA317_0>=WS && LA317_0<=COMMENT)) ) {
                alt317=1;
            }
            } finally {dbg.exitDecision(317);}

            switch (alt317) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1273:195: ws
                    {
                    dbg.location(1273,195);
                    pushFollow(FOLLOW_ws_in_sass_for8342);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(317);}

            dbg.location(1273,199);
            pushFollow(FOLLOW_sass_control_block_in_sass_for8345);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1274, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_for");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_for"


    // $ANTLR start "sass_each"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1276:1: sass_each : SASS_EACH ws cp_variable ws {...}? IDENT ws cp_expression_list ( ws )? sass_control_block ;
    public final void sass_each() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_each");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1276, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1277:5: ( SASS_EACH ws cp_variable ws {...}? IDENT ws cp_expression_list ( ws )? sass_control_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1278:5: SASS_EACH ws cp_variable ws {...}? IDENT ws cp_expression_list ( ws )? sass_control_block
            {
            dbg.location(1278,5);
            match(input,SASS_EACH,FOLLOW_SASS_EACH_in_sass_each8366); if (state.failed) return ;
            dbg.location(1278,15);
            pushFollow(FOLLOW_ws_in_sass_each8368);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1278,18);
            pushFollow(FOLLOW_cp_variable_in_sass_each8370);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1278,30);
            pushFollow(FOLLOW_ws_in_sass_each8372);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1278,33);
            if ( !(evalPredicate(tokenNameEquals("in"),"tokenNameEquals(\"in\")")) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "sass_each", "tokenNameEquals(\"in\")");
            }
            dbg.location(1278,58);
            match(input,IDENT,FOLLOW_IDENT_in_sass_each8376); if (state.failed) return ;
            dbg.location(1278,71);
            pushFollow(FOLLOW_ws_in_sass_each8380);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1278,74);
            pushFollow(FOLLOW_cp_expression_list_in_sass_each8382);
            cp_expression_list();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1278,93);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1278:93: ( ws )?
            int alt318=2;
            try { dbg.enterSubRule(318);
            try { dbg.enterDecision(318, decisionCanBacktrack[318]);

            int LA318_0 = input.LA(1);

            if ( ((LA318_0>=WS && LA318_0<=COMMENT)) ) {
                alt318=1;
            }
            } finally {dbg.exitDecision(318);}

            switch (alt318) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1278:93: ws
                    {
                    dbg.location(1278,93);
                    pushFollow(FOLLOW_ws_in_sass_each8384);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(318);}

            dbg.location(1278,97);
            pushFollow(FOLLOW_sass_control_block_in_sass_each8387);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1279, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_each");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_each"


    // $ANTLR start "sass_while"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:1: sass_while : SASS_WHILE ws sass_control_expression ( ws )? sass_control_block ;
    public final void sass_while() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_while");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1281, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1282:5: ( SASS_WHILE ws sass_control_expression ( ws )? sass_control_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1283:5: SASS_WHILE ws sass_control_expression ( ws )? sass_control_block
            {
            dbg.location(1283,5);
            match(input,SASS_WHILE,FOLLOW_SASS_WHILE_in_sass_while8412); if (state.failed) return ;
            dbg.location(1283,16);
            pushFollow(FOLLOW_ws_in_sass_while8414);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1283,19);
            pushFollow(FOLLOW_sass_control_expression_in_sass_while8416);
            sass_control_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1283,43);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1283:43: ( ws )?
            int alt319=2;
            try { dbg.enterSubRule(319);
            try { dbg.enterDecision(319, decisionCanBacktrack[319]);

            int LA319_0 = input.LA(1);

            if ( ((LA319_0>=WS && LA319_0<=COMMENT)) ) {
                alt319=1;
            }
            } finally {dbg.exitDecision(319);}

            switch (alt319) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1283:43: ws
                    {
                    dbg.location(1283,43);
                    pushFollow(FOLLOW_ws_in_sass_while8418);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(319);}

            dbg.location(1283,47);
            pushFollow(FOLLOW_sass_control_block_in_sass_while8421);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1284, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_while");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_while"


    // $ANTLR start "sass_control_block"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1286:1: sass_control_block : LBRACE ( ws )? ( declarations )? RBRACE ;
    public final void sass_control_block() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_control_block");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1286, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1287:5: ( LBRACE ( ws )? ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1288:5: LBRACE ( ws )? ( declarations )? RBRACE
            {
            dbg.location(1288,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_control_block8442); if (state.failed) return ;
            dbg.location(1288,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1288:12: ( ws )?
            int alt320=2;
            try { dbg.enterSubRule(320);
            try { dbg.enterDecision(320, decisionCanBacktrack[320]);

            int LA320_0 = input.LA(1);

            if ( ((LA320_0>=WS && LA320_0<=COMMENT)) ) {
                alt320=1;
            }
            } finally {dbg.exitDecision(320);}

            switch (alt320) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1288:12: ws
                    {
                    dbg.location(1288,12);
                    pushFollow(FOLLOW_ws_in_sass_control_block8444);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(320);}

            dbg.location(1288,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1288:16: ( declarations )?
            int alt321=2;
            try { dbg.enterSubRule(321);
            try { dbg.enterDecision(321, decisionCanBacktrack[321]);

            int LA321_0 = input.LA(1);

            if ( ((LA321_0>=NAMESPACE_SYM && LA321_0<=IDENT)||(LA321_0>=CHARSET_SYM && LA321_0<=MEDIA_SYM)||LA321_0==GEN||(LA321_0>=COLON && LA321_0<=MOZ_DOCUMENT_SYM)||LA321_0==WEBKIT_KEYFRAMES_SYM||(LA321_0>=PAGE_SYM && LA321_0<=RIGHTBOTTOM_SYM)||(LA321_0>=MINUS && LA321_0<=PIPE)||LA321_0==LESS_AND||(LA321_0>=RBRACKET && LA321_0<=SASS_VAR)||(LA321_0>=SASS_CONTENT && LA321_0<=SASS_WHILE)||LA321_0==AT_SIGN) ) {
                alt321=1;
            }
            } finally {dbg.exitDecision(321);}

            switch (alt321) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1288:16: declarations
                    {
                    dbg.location(1288,16);
                    pushFollow(FOLLOW_declarations_in_sass_control_block8447);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(321);}

            dbg.location(1288,30);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_control_block8450); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1289, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_control_block");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_control_block"


    // $ANTLR start "sass_function_declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1291:1: sass_function_declaration : SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE ;
    public final void sass_function_declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_function_declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1291, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1292:5: ( SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:5: SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE
            {
            dbg.location(1297,5);
            match(input,SASS_FUNCTION,FOLLOW_SASS_FUNCTION_in_sass_function_declaration8496); if (state.failed) return ;
            dbg.location(1297,19);
            pushFollow(FOLLOW_ws_in_sass_function_declaration8498);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1297,22);
            pushFollow(FOLLOW_sass_function_name_in_sass_function_declaration8500);
            sass_function_name();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1297,41);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:41: ( ws )?
            int alt322=2;
            try { dbg.enterSubRule(322);
            try { dbg.enterDecision(322, decisionCanBacktrack[322]);

            int LA322_0 = input.LA(1);

            if ( ((LA322_0>=WS && LA322_0<=COMMENT)) ) {
                alt322=1;
            }
            } finally {dbg.exitDecision(322);}

            switch (alt322) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:41: ws
                    {
                    dbg.location(1297,41);
                    pushFollow(FOLLOW_ws_in_sass_function_declaration8502);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(322);}

            dbg.location(1297,45);
            match(input,LPAREN,FOLLOW_LPAREN_in_sass_function_declaration8505); if (state.failed) return ;
            dbg.location(1297,52);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:52: ( cp_args_list )?
            int alt323=2;
            try { dbg.enterSubRule(323);
            try { dbg.enterDecision(323, decisionCanBacktrack[323]);

            int LA323_0 = input.LA(1);

            if ( (LA323_0==NAMESPACE_SYM||(LA323_0>=CHARSET_SYM && LA323_0<=IMPORT_SYM)||LA323_0==MEDIA_SYM||(LA323_0>=AT_IDENT && LA323_0<=MOZ_DOCUMENT_SYM)||LA323_0==WEBKIT_KEYFRAMES_SYM||(LA323_0>=PAGE_SYM && LA323_0<=RIGHTBOTTOM_SYM)||LA323_0==SASS_VAR||(LA323_0>=SASS_CONTENT && LA323_0<=SASS_WHILE)||(LA323_0>=CP_DOTS && LA323_0<=LESS_REST)) ) {
                alt323=1;
            }
            } finally {dbg.exitDecision(323);}

            switch (alt323) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:52: cp_args_list
                    {
                    dbg.location(1297,52);
                    pushFollow(FOLLOW_cp_args_list_in_sass_function_declaration8507);
                    cp_args_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(323);}

            dbg.location(1297,66);
            match(input,RPAREN,FOLLOW_RPAREN_in_sass_function_declaration8510); if (state.failed) return ;
            dbg.location(1297,73);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:73: ( ws )?
            int alt324=2;
            try { dbg.enterSubRule(324);
            try { dbg.enterDecision(324, decisionCanBacktrack[324]);

            int LA324_0 = input.LA(1);

            if ( ((LA324_0>=WS && LA324_0<=COMMENT)) ) {
                alt324=1;
            }
            } finally {dbg.exitDecision(324);}

            switch (alt324) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:73: ws
                    {
                    dbg.location(1297,73);
                    pushFollow(FOLLOW_ws_in_sass_function_declaration8512);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(324);}

            dbg.location(1297,77);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_function_declaration8515); if (state.failed) return ;
            dbg.location(1297,84);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:84: ( ws )?
            int alt325=2;
            try { dbg.enterSubRule(325);
            try { dbg.enterDecision(325, decisionCanBacktrack[325]);

            int LA325_0 = input.LA(1);

            if ( ((LA325_0>=WS && LA325_0<=COMMENT)) ) {
                alt325=1;
            }
            } finally {dbg.exitDecision(325);}

            switch (alt325) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:84: ws
                    {
                    dbg.location(1297,84);
                    pushFollow(FOLLOW_ws_in_sass_function_declaration8517);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(325);}

            dbg.location(1297,88);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:88: ( declarations )?
            int alt326=2;
            try { dbg.enterSubRule(326);
            try { dbg.enterDecision(326, decisionCanBacktrack[326]);

            int LA326_0 = input.LA(1);

            if ( ((LA326_0>=NAMESPACE_SYM && LA326_0<=IDENT)||(LA326_0>=CHARSET_SYM && LA326_0<=MEDIA_SYM)||LA326_0==GEN||(LA326_0>=COLON && LA326_0<=MOZ_DOCUMENT_SYM)||LA326_0==WEBKIT_KEYFRAMES_SYM||(LA326_0>=PAGE_SYM && LA326_0<=RIGHTBOTTOM_SYM)||(LA326_0>=MINUS && LA326_0<=PIPE)||LA326_0==LESS_AND||(LA326_0>=RBRACKET && LA326_0<=SASS_VAR)||(LA326_0>=SASS_CONTENT && LA326_0<=SASS_WHILE)||LA326_0==AT_SIGN) ) {
                alt326=1;
            }
            } finally {dbg.exitDecision(326);}

            switch (alt326) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1297:88: declarations
                    {
                    dbg.location(1297,88);
                    pushFollow(FOLLOW_declarations_in_sass_function_declaration8520);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(326);}

            dbg.location(1297,102);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_function_declaration8523); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1298, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_function_declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_function_declaration"


    // $ANTLR start "sass_function_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1300:1: sass_function_name : IDENT ;
    public final void sass_function_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_function_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1300, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:5: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1302:5: IDENT
            {
            dbg.location(1302,5);
            match(input,IDENT,FOLLOW_IDENT_in_sass_function_name8548); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1303, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_function_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_function_name"


    // $ANTLR start "sass_function_return"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1305:1: sass_function_return : SASS_RETURN ws cp_expression ;
    public final void sass_function_return() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_function_return");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1305, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1306:5: ( SASS_RETURN ws cp_expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1307:5: SASS_RETURN ws cp_expression
            {
            dbg.location(1307,5);
            match(input,SASS_RETURN,FOLLOW_SASS_RETURN_in_sass_function_return8569); if (state.failed) return ;
            dbg.location(1307,17);
            pushFollow(FOLLOW_ws_in_sass_function_return8571);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1307,20);
            pushFollow(FOLLOW_cp_expression_in_sass_function_return8573);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1308, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_function_return");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_function_return"


    // $ANTLR start "sass_content"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1310:1: sass_content : SASS_CONTENT ;
    public final void sass_content() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_content");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1310, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1311:5: ( SASS_CONTENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1312:5: SASS_CONTENT
            {
            dbg.location(1312,5);
            match(input,SASS_CONTENT,FOLLOW_SASS_CONTENT_in_sass_content8598); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1313, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_content");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_content"

    // $ANTLR start synpred1_Css3
    public final void synpred1_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:44: ( ( ws )? mediaQueryList )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:45: ( ws )? mediaQueryList
        {
        dbg.location(363,45);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:45: ( ws )?
        int alt327=2;
        try { dbg.enterSubRule(327);
        try { dbg.enterDecision(327, decisionCanBacktrack[327]);

        int LA327_0 = input.LA(1);

        if ( ((LA327_0>=WS && LA327_0<=COMMENT)) ) {
            alt327=1;
        }
        } finally {dbg.exitDecision(327);}

        switch (alt327) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:45: ws
                {
                dbg.location(363,45);
                pushFollow(FOLLOW_ws_in_synpred1_Css3370);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(327);}

        dbg.location(363,49);
        pushFollow(FOLLOW_mediaQueryList_in_synpred1_Css3373);
        mediaQueryList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_Css3

    // $ANTLR start synpred2_Css3
    public final void synpred2_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:98: ( ( ws )? mediaQueryList )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:99: ( ws )? mediaQueryList
        {
        dbg.location(366,99);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:99: ( ws )?
        int alt328=2;
        try { dbg.enterSubRule(328);
        try { dbg.enterDecision(328, decisionCanBacktrack[328]);

        int LA328_0 = input.LA(1);

        if ( ((LA328_0>=WS && LA328_0<=COMMENT)) ) {
            alt328=1;
        }
        } finally {dbg.exitDecision(328);}

        switch (alt328) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:99: ws
                {
                dbg.location(366,99);
                pushFollow(FOLLOW_ws_in_synpred2_Css3434);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(328);}

        dbg.location(366,103);
        pushFollow(FOLLOW_mediaQueryList_in_synpred2_Css3437);
        mediaQueryList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_Css3

    // $ANTLR start synpred3_Css3
    public final void synpred3_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:27: ( ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:28: ( ws )? SEMI
        {
        dbg.location(381,28);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:28: ( ws )?
        int alt329=2;
        try { dbg.enterSubRule(329);
        try { dbg.enterDecision(329, decisionCanBacktrack[329]);

        int LA329_0 = input.LA(1);

        if ( ((LA329_0>=WS && LA329_0<=COMMENT)) ) {
            alt329=1;
        }
        } finally {dbg.exitDecision(329);}

        switch (alt329) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:28: ws
                {
                dbg.location(381,28);
                pushFollow(FOLLOW_ws_in_synpred3_Css3561);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(329);}

        dbg.location(381,32);
        match(input,SEMI,FOLLOW_SEMI_in_synpred3_Css3564); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_Css3

    // $ANTLR start synpred4_Css3
    public final void synpred4_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:5: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )
        int alt333=2;
        try { dbg.enterDecision(333, decisionCanBacktrack[333]);

        int LA333_0 = input.LA(1);

        if ( (LA333_0==SASS_MIXIN) ) {
            alt333=1;
        }
        else if ( (LA333_0==DOT) ) {
            alt333=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 333, 0, input);

            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(333);}

        switch (alt333) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:6: SASS_MIXIN
                {
                dbg.location(389,6);
                match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred4_Css3635); if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:19: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE )
                {
                dbg.location(389,19);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:19: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:20: DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE
                {
                dbg.location(389,20);
                match(input,DOT,FOLLOW_DOT_in_synpred4_Css3640); if (state.failed) return ;
                dbg.location(389,24);
                match(input,IDENT,FOLLOW_IDENT_in_synpred4_Css3642); if (state.failed) return ;
                dbg.location(389,30);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:30: ( ws )?
                int alt330=2;
                try { dbg.enterSubRule(330);
                try { dbg.enterDecision(330, decisionCanBacktrack[330]);

                int LA330_0 = input.LA(1);

                if ( ((LA330_0>=WS && LA330_0<=COMMENT)) ) {
                    alt330=1;
                }
                } finally {dbg.exitDecision(330);}

                switch (alt330) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:30: ws
                        {
                        dbg.location(389,30);
                        pushFollow(FOLLOW_ws_in_synpred4_Css3644);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(330);}

                dbg.location(389,34);
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred4_Css3647); if (state.failed) return ;
                dbg.location(389,41);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:41: (~ RPAREN )*
                try { dbg.enterSubRule(331);

                loop331:
                do {
                    int alt331=2;
                    try { dbg.enterDecision(331, decisionCanBacktrack[331]);

                    int LA331_0 = input.LA(1);

                    if ( ((LA331_0>=NAMESPACE_SYM && LA331_0<=LPAREN)||(LA331_0>=COLON && LA331_0<=LINE_COMMENT)) ) {
                        alt331=1;
                    }


                    } finally {dbg.exitDecision(331);}

                    switch (alt331) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:42: ~ RPAREN
                	    {
                	    dbg.location(389,42);
                	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=LPAREN)||(input.LA(1)>=COLON && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop331;
                    }
                } while (true);
                } finally {dbg.exitSubRule(331);}

                dbg.location(389,52);
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred4_Css3655); if (state.failed) return ;
                dbg.location(389,59);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:59: (~ ( LBRACE | SEMI ) )*
                try { dbg.enterSubRule(332);

                loop332:
                do {
                    int alt332=2;
                    try { dbg.enterDecision(332, decisionCanBacktrack[332]);

                    int LA332_0 = input.LA(1);

                    if ( (LA332_0==NAMESPACE_SYM||(LA332_0>=IDENT && LA332_0<=MEDIA_SYM)||(LA332_0>=RBRACE && LA332_0<=LINE_COMMENT)) ) {
                        alt332=1;
                    }


                    } finally {dbg.exitDecision(332);}

                    switch (alt332) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:59: ~ ( LBRACE | SEMI )
                	    {
                	    dbg.location(389,59);
                	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=RBRACE && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop332;
                    }
                } while (true);
                } finally {dbg.exitSubRule(332);}

                dbg.location(389,75);
                match(input,LBRACE,FOLLOW_LBRACE_in_synpred4_Css3665); if (state.failed) return ;

                }


                }
                break;

        }}
    // $ANTLR end synpred4_Css3

    // $ANTLR start synpred5_Css3
    public final void synpred5_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:7: ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:8: cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI
        {
        dbg.location(391,8);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred5_Css3684);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(391,22);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:22: ( ( ws )? IMPORTANT_SYM )?
        int alt335=2;
        try { dbg.enterSubRule(335);
        try { dbg.enterDecision(335, decisionCanBacktrack[335]);

        try {
            isCyclicDecision = true;
            alt335 = dfa335.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(335);}

        switch (alt335) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:23: ( ws )? IMPORTANT_SYM
                {
                dbg.location(391,23);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:23: ( ws )?
                int alt334=2;
                try { dbg.enterSubRule(334);
                try { dbg.enterDecision(334, decisionCanBacktrack[334]);

                int LA334_0 = input.LA(1);

                if ( ((LA334_0>=WS && LA334_0<=COMMENT)) ) {
                    alt334=1;
                }
                } finally {dbg.exitDecision(334);}

                switch (alt334) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:23: ws
                        {
                        dbg.location(391,23);
                        pushFollow(FOLLOW_ws_in_synpred5_Css3687);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(334);}

                dbg.location(391,27);
                match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_synpred5_Css3690); if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(335);}

        dbg.location(391,43);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:43: ( ws )?
        int alt336=2;
        try { dbg.enterSubRule(336);
        try { dbg.enterDecision(336, decisionCanBacktrack[336]);

        int LA336_0 = input.LA(1);

        if ( ((LA336_0>=WS && LA336_0<=COMMENT)) ) {
            alt336=1;
        }
        } finally {dbg.exitDecision(336);}

        switch (alt336) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:43: ws
                {
                dbg.location(391,43);
                pushFollow(FOLLOW_ws_in_synpred5_Css3694);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(336);}

        dbg.location(391,47);
        match(input,SEMI,FOLLOW_SEMI_in_synpred5_Css3697); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_Css3

    // $ANTLR start synpred6_Css3
    public final void synpred6_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:7: ( cp_mixin_call )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:8: cp_mixin_call
        {
        dbg.location(392,8);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred6_Css3720);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_Css3

    // $ANTLR start synpred7_Css3
    public final void synpred7_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:6: ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:8: (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI
        {
        dbg.location(393,8);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:8: (~ ( LBRACE | SEMI | RBRACE | COLON ) )+
        int cnt337=0;
        try { dbg.enterSubRule(337);

        loop337:
        do {
            int alt337=2;
            try { dbg.enterDecision(337, decisionCanBacktrack[337]);

            int LA337_0 = input.LA(1);

            if ( (LA337_0==NAMESPACE_SYM||(LA337_0>=IDENT && LA337_0<=MEDIA_SYM)||(LA337_0>=IMPORTANT_SYM && LA337_0<=RPAREN)||(LA337_0>=AT_IDENT && LA337_0<=LINE_COMMENT)) ) {
                alt337=1;
            }


            } finally {dbg.exitDecision(337);}

            switch (alt337) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:8: ~ ( LBRACE | SEMI | RBRACE | COLON )
        	    {
        	    dbg.location(393,8);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=RPAREN)||(input.LA(1)>=AT_IDENT && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt337 >= 1 ) break loop337;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(337, input);
                    dbg.recognitionException(eee);

                    throw eee;
            }
            cnt337++;
        } while (true);
        } finally {dbg.exitSubRule(337);}

        dbg.location(393,37);
        match(input,COLON,FOLLOW_COLON_in_synpred7_Css3755); if (state.failed) return ;
        dbg.location(393,43);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:43: (~ ( SEMI | LBRACE | RBRACE ) )+
        int cnt338=0;
        try { dbg.enterSubRule(338);

        loop338:
        do {
            int alt338=2;
            try { dbg.enterDecision(338, decisionCanBacktrack[338]);

            int LA338_0 = input.LA(1);

            if ( (LA338_0==NAMESPACE_SYM||(LA338_0>=IDENT && LA338_0<=MEDIA_SYM)||(LA338_0>=IMPORTANT_SYM && LA338_0<=LINE_COMMENT)) ) {
                alt338=1;
            }


            } finally {dbg.exitDecision(338);}

            switch (alt338) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:43: ~ ( SEMI | LBRACE | RBRACE )
        	    {
        	    dbg.location(393,43);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt338 >= 1 ) break loop338;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(338, input);
                    dbg.recognitionException(eee);

                    throw eee;
            }
            cnt338++;
        } while (true);
        } finally {dbg.exitSubRule(338);}

        dbg.location(393,66);
        match(input,SEMI,FOLLOW_SEMI_in_synpred7_Css3767); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_Css3

    // $ANTLR start synpred8_Css3
    public final void synpred8_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:6: ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:8: sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI
        {
        dbg.location(394,8);
        pushFollow(FOLLOW_sass_declaration_interpolation_expression_in_synpred8_Css3780);
        sass_declaration_interpolation_expression();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(394,50);
        match(input,COLON,FOLLOW_COLON_in_synpred8_Css3782); if (state.failed) return ;
        dbg.location(394,56);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:56: (~ ( SEMI | LBRACE | RBRACE ) )+
        int cnt339=0;
        try { dbg.enterSubRule(339);

        loop339:
        do {
            int alt339=2;
            try { dbg.enterDecision(339, decisionCanBacktrack[339]);

            int LA339_0 = input.LA(1);

            if ( (LA339_0==NAMESPACE_SYM||(LA339_0>=IDENT && LA339_0<=MEDIA_SYM)||(LA339_0>=IMPORTANT_SYM && LA339_0<=LINE_COMMENT)) ) {
                alt339=1;
            }


            } finally {dbg.exitDecision(339);}

            switch (alt339) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:56: ~ ( SEMI | LBRACE | RBRACE )
        	    {
        	    dbg.location(394,56);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt339 >= 1 ) break loop339;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(339, input);
                    dbg.recognitionException(eee);

                    throw eee;
            }
            cnt339++;
        } while (true);
        } finally {dbg.exitSubRule(339);}

        dbg.location(394,79);
        match(input,SEMI,FOLLOW_SEMI_in_synpred8_Css3794); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_Css3

    // $ANTLR start synpred9_Css3
    public final void synpred9_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:408:17: ( ( ws )? COMMA )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:408:18: ( ws )? COMMA
        {
        dbg.location(408,18);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:408:18: ( ws )?
        int alt340=2;
        try { dbg.enterSubRule(340);
        try { dbg.enterDecision(340, decisionCanBacktrack[340]);

        int LA340_0 = input.LA(1);

        if ( ((LA340_0>=WS && LA340_0<=COMMENT)) ) {
            alt340=1;
        }
        } finally {dbg.exitDecision(340);}

        switch (alt340) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:408:18: ws
                {
                dbg.location(408,18);
                pushFollow(FOLLOW_ws_in_synpred9_Css3902);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(340);}

        dbg.location(408,22);
        match(input,COMMA,FOLLOW_COMMA_in_synpred9_Css3905); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_Css3

    // $ANTLR start synpred10_Css3
    public final void synpred10_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:22: ( ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:23: ( ws )? SEMI
        {
        dbg.location(448,23);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:23: ( ws )?
        int alt341=2;
        try { dbg.enterSubRule(341);
        try { dbg.enterDecision(341, decisionCanBacktrack[341]);

        int LA341_0 = input.LA(1);

        if ( ((LA341_0>=WS && LA341_0<=COMMENT)) ) {
            alt341=1;
        }
        } finally {dbg.exitDecision(341);}

        switch (alt341) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:23: ws
                {
                dbg.location(448,23);
                pushFollow(FOLLOW_ws_in_synpred10_Css31219);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(341);}

        dbg.location(448,27);
        match(input,SEMI,FOLLOW_SEMI_in_synpred10_Css31222); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_Css3

    // $ANTLR start synpred11_Css3
    public final void synpred11_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:456:9: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )
        int alt345=2;
        try { dbg.enterDecision(345, decisionCanBacktrack[345]);

        int LA345_0 = input.LA(1);

        if ( (LA345_0==SASS_MIXIN) ) {
            alt345=1;
        }
        else if ( (LA345_0==DOT) ) {
            alt345=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 345, 0, input);

            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(345);}

        switch (alt345) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:456:10: SASS_MIXIN
                {
                dbg.location(456,10);
                match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred11_Css31299); if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:456:23: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE )
                {
                dbg.location(456,23);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:456:23: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:456:24: DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE
                {
                dbg.location(456,24);
                match(input,DOT,FOLLOW_DOT_in_synpred11_Css31304); if (state.failed) return ;
                dbg.location(456,28);
                match(input,IDENT,FOLLOW_IDENT_in_synpred11_Css31306); if (state.failed) return ;
                dbg.location(456,34);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:456:34: ( ws )?
                int alt342=2;
                try { dbg.enterSubRule(342);
                try { dbg.enterDecision(342, decisionCanBacktrack[342]);

                int LA342_0 = input.LA(1);

                if ( ((LA342_0>=WS && LA342_0<=COMMENT)) ) {
                    alt342=1;
                }
                } finally {dbg.exitDecision(342);}

                switch (alt342) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:456:34: ws
                        {
                        dbg.location(456,34);
                        pushFollow(FOLLOW_ws_in_synpred11_Css31308);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(342);}

                dbg.location(456,38);
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred11_Css31311); if (state.failed) return ;
                dbg.location(456,45);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:456:45: (~ RPAREN )*
                try { dbg.enterSubRule(343);

                loop343:
                do {
                    int alt343=2;
                    try { dbg.enterDecision(343, decisionCanBacktrack[343]);

                    int LA343_0 = input.LA(1);

                    if ( ((LA343_0>=NAMESPACE_SYM && LA343_0<=LPAREN)||(LA343_0>=COLON && LA343_0<=LINE_COMMENT)) ) {
                        alt343=1;
                    }


                    } finally {dbg.exitDecision(343);}

                    switch (alt343) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:456:46: ~ RPAREN
                	    {
                	    dbg.location(456,46);
                	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=LPAREN)||(input.LA(1)>=COLON && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop343;
                    }
                } while (true);
                } finally {dbg.exitSubRule(343);}

                dbg.location(456,56);
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred11_Css31319); if (state.failed) return ;
                dbg.location(456,63);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:456:63: (~ ( LBRACE | RBRACE | SEMI ) )*
                try { dbg.enterSubRule(344);

                loop344:
                do {
                    int alt344=2;
                    try { dbg.enterDecision(344, decisionCanBacktrack[344]);

                    int LA344_0 = input.LA(1);

                    if ( (LA344_0==NAMESPACE_SYM||(LA344_0>=IDENT && LA344_0<=MEDIA_SYM)||(LA344_0>=IMPORTANT_SYM && LA344_0<=LINE_COMMENT)) ) {
                        alt344=1;
                    }


                    } finally {dbg.exitDecision(344);}

                    switch (alt344) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:456:63: ~ ( LBRACE | RBRACE | SEMI )
                	    {
                	    dbg.location(456,63);
                	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop344;
                    }
                } while (true);
                } finally {dbg.exitSubRule(344);}

                dbg.location(456,86);
                match(input,LBRACE,FOLLOW_LBRACE_in_synpred11_Css31331); if (state.failed) return ;

                }


                }
                break;

        }}
    // $ANTLR end synpred11_Css3

    // $ANTLR start synpred12_Css3
    public final void synpred12_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:458:11: ( cp_mixin_call ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:458:12: cp_mixin_call ( ws )? SEMI
        {
        dbg.location(458,12);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred12_Css31357);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(458,26);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:458:26: ( ws )?
        int alt346=2;
        try { dbg.enterSubRule(346);
        try { dbg.enterDecision(346, decisionCanBacktrack[346]);

        int LA346_0 = input.LA(1);

        if ( ((LA346_0>=WS && LA346_0<=COMMENT)) ) {
            alt346=1;
        }
        } finally {dbg.exitDecision(346);}

        switch (alt346) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:458:26: ws
                {
                dbg.location(458,26);
                pushFollow(FOLLOW_ws_in_synpred12_Css31359);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(346);}

        dbg.location(458,30);
        match(input,SEMI,FOLLOW_SEMI_in_synpred12_Css31362); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_Css3

    // $ANTLR start synpred13_Css3
    public final void synpred13_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:11: ( cp_mixin_call )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:12: cp_mixin_call
        {
        dbg.location(459,12);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred13_Css31381);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_Css3

    // $ANTLR start synpred14_Css3
    public final void synpred14_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:597:5: ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:597:6: (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE
        {
        dbg.location(597,6);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:597:6: (~ ( HASH_SYMBOL | COLON ) )*
        try { dbg.enterSubRule(347);

        loop347:
        do {
            int alt347=2;
            try { dbg.enterDecision(347, decisionCanBacktrack[347]);

            int LA347_0 = input.LA(1);

            if ( ((LA347_0>=NAMESPACE_SYM && LA347_0<=RPAREN)||(LA347_0>=AT_IDENT && LA347_0<=TILDE)||(LA347_0>=HASH && LA347_0<=LINE_COMMENT)) ) {
                alt347=1;
            }


            } finally {dbg.exitDecision(347);}

            switch (alt347) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:597:6: ~ ( HASH_SYMBOL | COLON )
        	    {
        	    dbg.location(597,6);
        	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=RPAREN)||(input.LA(1)>=AT_IDENT && input.LA(1)<=TILDE)||(input.LA(1)>=HASH && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop347;
            }
        } while (true);
        } finally {dbg.exitSubRule(347);}

        dbg.location(597,28);
        match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_synpred14_Css32479); if (state.failed) return ;
        dbg.location(597,40);
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred14_Css32481); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_Css3

    // $ANTLR start synpred15_Css3
    public final void synpred15_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:25: ( ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:26: ( ws )? SEMI
        {
        dbg.location(623,26);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:26: ( ws )?
        int alt348=2;
        try { dbg.enterSubRule(348);
        try { dbg.enterDecision(348, decisionCanBacktrack[348]);

        int LA348_0 = input.LA(1);

        if ( ((LA348_0>=WS && LA348_0<=COMMENT)) ) {
            alt348=1;
        }
        } finally {dbg.exitDecision(348);}

        switch (alt348) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:26: ws
                {
                dbg.location(623,26);
                pushFollow(FOLLOW_ws_in_synpred15_Css32635);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(348);}

        dbg.location(623,30);
        match(input,SEMI,FOLLOW_SEMI_in_synpred15_Css32638); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_Css3

    // $ANTLR start synpred16_Css3
    public final void synpred16_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:631:5: ( cp_variable_declaration )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:631:6: cp_variable_declaration
        {
        dbg.location(631,6);
        pushFollow(FOLLOW_cp_variable_declaration_in_synpred16_Css32709);
        cp_variable_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_Css3

    // $ANTLR start synpred17_Css3
    public final void synpred17_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:7: ( sass_nested_properties )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:8: sass_nested_properties
        {
        dbg.location(632,8);
        pushFollow(FOLLOW_sass_nested_properties_in_synpred17_Css32722);
        sass_nested_properties();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_Css3

    // $ANTLR start synpred18_Css3
    public final void synpred18_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:633:7: ( propertyDeclaration )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:633:8: propertyDeclaration
        {
        dbg.location(633,8);
        pushFollow(FOLLOW_propertyDeclaration_in_synpred18_Css32735);
        propertyDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_Css3

    // $ANTLR start synpred19_Css3
    public final void synpred19_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:7: ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:8: property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI )
        {
        dbg.location(635,8);
        pushFollow(FOLLOW_property_in_synpred19_Css32753);
        property();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(635,17);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:17: ( ws )?
        int alt349=2;
        try { dbg.enterSubRule(349);
        try { dbg.enterDecision(349, decisionCanBacktrack[349]);

        int LA349_0 = input.LA(1);

        if ( ((LA349_0>=WS && LA349_0<=COMMENT)) ) {
            alt349=1;
        }
        } finally {dbg.exitDecision(349);}

        switch (alt349) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:17: ws
                {
                dbg.location(635,17);
                pushFollow(FOLLOW_ws_in_synpred19_Css32755);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(349);}

        dbg.location(635,21);
        match(input,COLON,FOLLOW_COLON_in_synpred19_Css32758); if (state.failed) return ;
        dbg.location(635,27);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:27: (~ ( LBRACE | SEMI | RBRACE ) )*
        try { dbg.enterSubRule(350);

        loop350:
        do {
            int alt350=2;
            try { dbg.enterDecision(350, decisionCanBacktrack[350]);

            int LA350_0 = input.LA(1);

            if ( (LA350_0==NAMESPACE_SYM||(LA350_0>=IDENT && LA350_0<=MEDIA_SYM)||(LA350_0>=IMPORTANT_SYM && LA350_0<=LINE_COMMENT)) ) {
                alt350=1;
            }


            } finally {dbg.exitDecision(350);}

            switch (alt350) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:27: ~ ( LBRACE | SEMI | RBRACE )
        	    {
        	    dbg.location(635,27);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop350;
            }
        } while (true);
        } finally {dbg.exitSubRule(350);}

        dbg.location(635,50);
        if ( input.LA(1)==SEMI||input.LA(1)==RBRACE ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            dbg.recognitionException(mse);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred19_Css3

    // $ANTLR start synpred20_Css3
    public final void synpred20_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:7: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )
        int alt354=2;
        try { dbg.enterDecision(354, decisionCanBacktrack[354]);

        int LA354_0 = input.LA(1);

        if ( (LA354_0==SASS_MIXIN) ) {
            alt354=1;
        }
        else if ( (LA354_0==DOT) ) {
            alt354=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 354, 0, input);

            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(354);}

        switch (alt354) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:8: SASS_MIXIN
                {
                dbg.location(636,8);
                match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred20_Css32788); if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:21: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE )
                {
                dbg.location(636,21);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:21: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:22: DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE
                {
                dbg.location(636,22);
                match(input,DOT,FOLLOW_DOT_in_synpred20_Css32793); if (state.failed) return ;
                dbg.location(636,26);
                match(input,IDENT,FOLLOW_IDENT_in_synpred20_Css32795); if (state.failed) return ;
                dbg.location(636,32);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:32: ( ws )?
                int alt351=2;
                try { dbg.enterSubRule(351);
                try { dbg.enterDecision(351, decisionCanBacktrack[351]);

                int LA351_0 = input.LA(1);

                if ( ((LA351_0>=WS && LA351_0<=COMMENT)) ) {
                    alt351=1;
                }
                } finally {dbg.exitDecision(351);}

                switch (alt351) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:32: ws
                        {
                        dbg.location(636,32);
                        pushFollow(FOLLOW_ws_in_synpred20_Css32797);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(351);}

                dbg.location(636,36);
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred20_Css32800); if (state.failed) return ;
                dbg.location(636,43);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:43: (~ RPAREN )*
                try { dbg.enterSubRule(352);

                loop352:
                do {
                    int alt352=2;
                    try { dbg.enterDecision(352, decisionCanBacktrack[352]);

                    int LA352_0 = input.LA(1);

                    if ( ((LA352_0>=NAMESPACE_SYM && LA352_0<=LPAREN)||(LA352_0>=COLON && LA352_0<=LINE_COMMENT)) ) {
                        alt352=1;
                    }


                    } finally {dbg.exitDecision(352);}

                    switch (alt352) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:44: ~ RPAREN
                	    {
                	    dbg.location(636,44);
                	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=LPAREN)||(input.LA(1)>=COLON && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop352;
                    }
                } while (true);
                } finally {dbg.exitSubRule(352);}

                dbg.location(636,54);
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred20_Css32808); if (state.failed) return ;
                dbg.location(636,61);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:61: (~ ( LBRACE | SEMI | RBRACE ) )*
                try { dbg.enterSubRule(353);

                loop353:
                do {
                    int alt353=2;
                    try { dbg.enterDecision(353, decisionCanBacktrack[353]);

                    int LA353_0 = input.LA(1);

                    if ( (LA353_0==NAMESPACE_SYM||(LA353_0>=IDENT && LA353_0<=MEDIA_SYM)||(LA353_0>=IMPORTANT_SYM && LA353_0<=LINE_COMMENT)) ) {
                        alt353=1;
                    }


                    } finally {dbg.exitDecision(353);}

                    switch (alt353) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:61: ~ ( LBRACE | SEMI | RBRACE )
                	    {
                	    dbg.location(636,61);
                	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop353;
                    }
                } while (true);
                } finally {dbg.exitSubRule(353);}

                dbg.location(636,84);
                match(input,LBRACE,FOLLOW_LBRACE_in_synpred20_Css32820); if (state.failed) return ;

                }


                }
                break;

        }}
    // $ANTLR end synpred20_Css3

    // $ANTLR start synpred21_Css3
    public final void synpred21_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:638:7: ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:638:8: cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI
        {
        dbg.location(638,8);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred21_Css32839);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(638,22);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:638:22: ( ( ws )? IMPORTANT_SYM )?
        int alt356=2;
        try { dbg.enterSubRule(356);
        try { dbg.enterDecision(356, decisionCanBacktrack[356]);

        try {
            isCyclicDecision = true;
            alt356 = dfa356.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(356);}

        switch (alt356) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:638:23: ( ws )? IMPORTANT_SYM
                {
                dbg.location(638,23);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:638:23: ( ws )?
                int alt355=2;
                try { dbg.enterSubRule(355);
                try { dbg.enterDecision(355, decisionCanBacktrack[355]);

                int LA355_0 = input.LA(1);

                if ( ((LA355_0>=WS && LA355_0<=COMMENT)) ) {
                    alt355=1;
                }
                } finally {dbg.exitDecision(355);}

                switch (alt355) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:638:23: ws
                        {
                        dbg.location(638,23);
                        pushFollow(FOLLOW_ws_in_synpred21_Css32842);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(355);}

                dbg.location(638,27);
                match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_synpred21_Css32845); if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(356);}

        dbg.location(638,43);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:638:43: ( ws )?
        int alt357=2;
        try { dbg.enterSubRule(357);
        try { dbg.enterDecision(357, decisionCanBacktrack[357]);

        int LA357_0 = input.LA(1);

        if ( ((LA357_0>=WS && LA357_0<=COMMENT)) ) {
            alt357=1;
        }
        } finally {dbg.exitDecision(357);}

        switch (alt357) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:638:43: ws
                {
                dbg.location(638,43);
                pushFollow(FOLLOW_ws_in_synpred21_Css32849);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(357);}

        dbg.location(638,47);
        match(input,SEMI,FOLLOW_SEMI_in_synpred21_Css32852); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_Css3

    // $ANTLR start synpred22_Css3
    public final void synpred22_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:7: ( cp_mixin_call )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:8: cp_mixin_call
        {
        dbg.location(639,8);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred22_Css32875);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_Css3

    // $ANTLR start synpred23_Css3
    public final void synpred23_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:640:7: ( selectorsGroup ( ws )? LBRACE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:640:8: selectorsGroup ( ws )? LBRACE
        {
        dbg.location(640,8);
        pushFollow(FOLLOW_selectorsGroup_in_synpred23_Css32898);
        selectorsGroup();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(640,23);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:640:23: ( ws )?
        int alt358=2;
        try { dbg.enterSubRule(358);
        try { dbg.enterDecision(358, decisionCanBacktrack[358]);

        int LA358_0 = input.LA(1);

        if ( ((LA358_0>=WS && LA358_0<=COMMENT)) ) {
            alt358=1;
        }
        } finally {dbg.exitDecision(358);}

        switch (alt358) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:640:23: ws
                {
                dbg.location(640,23);
                pushFollow(FOLLOW_ws_in_synpred23_Css32900);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(358);}

        dbg.location(640,27);
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred23_Css32903); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_Css3

    // $ANTLR start synpred24_Css3
    public final void synpred24_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:9: ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:11: (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE
        {
        dbg.location(658,11);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:11: (~ ( HASH_SYMBOL | LBRACE ) )*
        try { dbg.enterSubRule(359);

        loop359:
        do {
            int alt359=2;
            try { dbg.enterDecision(359, decisionCanBacktrack[359]);

            int LA359_0 = input.LA(1);

            if ( ((LA359_0>=NAMESPACE_SYM && LA359_0<=MEDIA_SYM)||(LA359_0>=RBRACE && LA359_0<=TILDE)||(LA359_0>=HASH && LA359_0<=LINE_COMMENT)) ) {
                alt359=1;
            }


            } finally {dbg.exitDecision(359);}

            switch (alt359) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:11: ~ ( HASH_SYMBOL | LBRACE )
        	    {
        	    dbg.location(658,11);
        	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=RBRACE && input.LA(1)<=TILDE)||(input.LA(1)>=HASH && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop359;
            }
        } while (true);
        } finally {dbg.exitSubRule(359);}

        dbg.location(658,38);
        match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_synpred24_Css33054); if (state.failed) return ;
        dbg.location(658,50);
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred24_Css33056); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred24_Css3

    // $ANTLR start synpred25_Css3
    public final void synpred25_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:674:18: ( ( ws )? esPred )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:674:19: ( ws )? esPred
        {
        dbg.location(674,19);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:674:19: ( ws )?
        int alt360=2;
        try { dbg.enterSubRule(360);
        try { dbg.enterDecision(360, decisionCanBacktrack[360]);

        int LA360_0 = input.LA(1);

        if ( ((LA360_0>=WS && LA360_0<=COMMENT)) ) {
            alt360=1;
        }
        } finally {dbg.exitDecision(360);}

        switch (alt360) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:674:19: ws
                {
                dbg.location(674,19);
                pushFollow(FOLLOW_ws_in_synpred25_Css33196);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(360);}

        dbg.location(674,23);
        pushFollow(FOLLOW_esPred_in_synpred25_Css33199);
        esPred();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred25_Css3

    // $ANTLR start synpred26_Css3
    public final void synpred26_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:676:21: ( ( ws )? esPred )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:676:22: ( ws )? esPred
        {
        dbg.location(676,22);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:676:22: ( ws )?
        int alt361=2;
        try { dbg.enterSubRule(361);
        try { dbg.enterDecision(361, decisionCanBacktrack[361]);

        int LA361_0 = input.LA(1);

        if ( ((LA361_0>=WS && LA361_0<=COMMENT)) ) {
            alt361=1;
        }
        } finally {dbg.exitDecision(361);}

        switch (alt361) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:676:22: ws
                {
                dbg.location(676,22);
                pushFollow(FOLLOW_ws_in_synpred26_Css33220);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(361);}

        dbg.location(676,26);
        pushFollow(FOLLOW_esPred_in_synpred26_Css33223);
        esPred();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred26_Css3

    // $ANTLR start synpred27_Css3
    public final void synpred27_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:690:7: ( ( IDENT | STAR )? PIPE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:690:8: ( IDENT | STAR )? PIPE
        {
        dbg.location(690,8);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:690:8: ( IDENT | STAR )?
        int alt362=2;
        try { dbg.enterSubRule(362);
        try { dbg.enterDecision(362, decisionCanBacktrack[362]);

        int LA362_0 = input.LA(1);

        if ( (LA362_0==IDENT||LA362_0==STAR) ) {
            alt362=1;
        }
        } finally {dbg.exitDecision(362);}

        switch (alt362) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
                {
                dbg.location(690,8);
                if ( input.LA(1)==IDENT||input.LA(1)==STAR ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    dbg.recognitionException(mse);
                    throw mse;
                }


                }
                break;

        }
        } finally {dbg.exitSubRule(362);}

        dbg.location(690,24);
        match(input,PIPE,FOLLOW_PIPE_in_synpred27_Css33339); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_Css3

    // $ANTLR start synpred28_Css3
    public final void synpred28_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:14: ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:15: ( ws | ( ( ws )? operator ( ws )? ) | ) term
        {
        dbg.location(865,15);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:15: ( ws | ( ( ws )? operator ( ws )? ) | )
        int alt365=3;
        try { dbg.enterSubRule(365);
        try { dbg.enterDecision(365, decisionCanBacktrack[365]);

        try {
            isCyclicDecision = true;
            alt365 = dfa365.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(365);}

        switch (alt365) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:17: ws
                {
                dbg.location(865,17);
                pushFollow(FOLLOW_ws_in_synpred28_Css34795);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:22: ( ( ws )? operator ( ws )? )
                {
                dbg.location(865,22);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:22: ( ( ws )? operator ( ws )? )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:23: ( ws )? operator ( ws )?
                {
                dbg.location(865,23);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:23: ( ws )?
                int alt363=2;
                try { dbg.enterSubRule(363);
                try { dbg.enterDecision(363, decisionCanBacktrack[363]);

                int LA363_0 = input.LA(1);

                if ( ((LA363_0>=WS && LA363_0<=COMMENT)) ) {
                    alt363=1;
                }
                } finally {dbg.exitDecision(363);}

                switch (alt363) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:23: ws
                        {
                        dbg.location(865,23);
                        pushFollow(FOLLOW_ws_in_synpred28_Css34800);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(363);}

                dbg.location(865,27);
                pushFollow(FOLLOW_operator_in_synpred28_Css34803);
                operator();

                state._fsp--;
                if (state.failed) return ;
                dbg.location(865,36);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:36: ( ws )?
                int alt364=2;
                try { dbg.enterSubRule(364);
                try { dbg.enterDecision(364, decisionCanBacktrack[364]);

                int LA364_0 = input.LA(1);

                if ( ((LA364_0>=WS && LA364_0<=COMMENT)) ) {
                    alt364=1;
                }
                } finally {dbg.exitDecision(364);}

                switch (alt364) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:36: ws
                        {
                        dbg.location(865,36);
                        pushFollow(FOLLOW_ws_in_synpred28_Css34805);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(364);}


                }


                }
                break;
            case 3 :
                dbg.enterAlt(3);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:56: 
                {
                }
                break;

        }
        } finally {dbg.exitSubRule(365);}

        dbg.location(865,58);
        pushFollow(FOLLOW_term_in_synpred28_Css34814);
        term();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred28_Css3

    // $ANTLR start synpred29_Css3
    public final void synpred29_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:872:9: ( functionName ( ws )? LPAREN )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:872:10: functionName ( ws )? LPAREN
        {
        dbg.location(872,10);
        pushFollow(FOLLOW_functionName_in_synpred29_Css34892);
        functionName();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(872,23);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:872:23: ( ws )?
        int alt366=2;
        try { dbg.enterSubRule(366);
        try { dbg.enterDecision(366, decisionCanBacktrack[366]);

        int LA366_0 = input.LA(1);

        if ( ((LA366_0>=WS && LA366_0<=COMMENT)) ) {
            alt366=1;
        }
        } finally {dbg.exitDecision(366);}

        switch (alt366) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:872:23: ws
                {
                dbg.location(872,23);
                pushFollow(FOLLOW_ws_in_synpred29_Css34894);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(366);}

        dbg.location(872,27);
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred29_Css34897); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_Css3

    // $ANTLR start synpred30_Css3
    public final void synpred30_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:933:9: ( fnAttributeName ( ws )? ( OPEQ | COLON ) )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:933:10: fnAttributeName ( ws )? ( OPEQ | COLON )
        {
        dbg.location(933,10);
        pushFollow(FOLLOW_fnAttributeName_in_synpred30_Css35413);
        fnAttributeName();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(933,26);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:933:26: ( ws )?
        int alt367=2;
        try { dbg.enterSubRule(367);
        try { dbg.enterDecision(367, decisionCanBacktrack[367]);

        int LA367_0 = input.LA(1);

        if ( ((LA367_0>=WS && LA367_0<=COMMENT)) ) {
            alt367=1;
        }
        } finally {dbg.exitDecision(367);}

        switch (alt367) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:933:26: ws
                {
                dbg.location(933,26);
                pushFollow(FOLLOW_ws_in_synpred30_Css35415);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(367);}

        dbg.location(933,30);
        if ( input.LA(1)==COLON||input.LA(1)==OPEQ ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            dbg.recognitionException(mse);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred30_Css3

    // $ANTLR start synpred31_Css3
    public final void synpred31_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:20: ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term
        {
        dbg.location(946,21);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )
        int alt370=3;
        try { dbg.enterSubRule(370);
        try { dbg.enterDecision(370, decisionCanBacktrack[370]);

        try {
            isCyclicDecision = true;
            alt370 = dfa370.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(370);}

        switch (alt370) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:23: ws
                {
                dbg.location(946,23);
                pushFollow(FOLLOW_ws_in_synpred31_Css35551);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:28: ( ( ws )? SOLIDUS ( ws )? )
                {
                dbg.location(946,28);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:28: ( ( ws )? SOLIDUS ( ws )? )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:29: ( ws )? SOLIDUS ( ws )?
                {
                dbg.location(946,29);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:29: ( ws )?
                int alt368=2;
                try { dbg.enterSubRule(368);
                try { dbg.enterDecision(368, decisionCanBacktrack[368]);

                int LA368_0 = input.LA(1);

                if ( ((LA368_0>=WS && LA368_0<=COMMENT)) ) {
                    alt368=1;
                }
                } finally {dbg.exitDecision(368);}

                switch (alt368) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:29: ws
                        {
                        dbg.location(946,29);
                        pushFollow(FOLLOW_ws_in_synpred31_Css35556);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(368);}

                dbg.location(946,33);
                match(input,SOLIDUS,FOLLOW_SOLIDUS_in_synpred31_Css35559); if (state.failed) return ;
                dbg.location(946,41);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:41: ( ws )?
                int alt369=2;
                try { dbg.enterSubRule(369);
                try { dbg.enterDecision(369, decisionCanBacktrack[369]);

                int LA369_0 = input.LA(1);

                if ( ((LA369_0>=WS && LA369_0<=COMMENT)) ) {
                    alt369=1;
                }
                } finally {dbg.exitDecision(369);}

                switch (alt369) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:41: ws
                        {
                        dbg.location(946,41);
                        pushFollow(FOLLOW_ws_in_synpred31_Css35561);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(369);}


                }


                }
                break;
            case 3 :
                dbg.enterAlt(3);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:946:61: 
                {
                }
                break;

        }
        } finally {dbg.exitSubRule(370);}

        dbg.location(946,63);
        pushFollow(FOLLOW_term_in_synpred31_Css35570);
        term();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_Css3

    // $ANTLR start synpred32_Css3
    public final void synpred32_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:981:6: ( ( ws )? COMMA ( ws )? cp_expression )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:981:7: ( ws )? COMMA ( ws )? cp_expression
        {
        dbg.location(981,7);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:981:7: ( ws )?
        int alt371=2;
        try { dbg.enterSubRule(371);
        try { dbg.enterDecision(371, decisionCanBacktrack[371]);

        int LA371_0 = input.LA(1);

        if ( ((LA371_0>=WS && LA371_0<=COMMENT)) ) {
            alt371=1;
        }
        } finally {dbg.exitDecision(371);}

        switch (alt371) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:981:7: ws
                {
                dbg.location(981,7);
                pushFollow(FOLLOW_ws_in_synpred32_Css36009);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(371);}

        dbg.location(981,11);
        match(input,COMMA,FOLLOW_COMMA_in_synpred32_Css36012); if (state.failed) return ;
        dbg.location(981,17);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:981:17: ( ws )?
        int alt372=2;
        try { dbg.enterSubRule(372);
        try { dbg.enterDecision(372, decisionCanBacktrack[372]);

        int LA372_0 = input.LA(1);

        if ( ((LA372_0>=WS && LA372_0<=COMMENT)) ) {
            alt372=1;
        }
        } finally {dbg.exitDecision(372);}

        switch (alt372) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:981:17: ws
                {
                dbg.location(981,17);
                pushFollow(FOLLOW_ws_in_synpred32_Css36014);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(372);}

        dbg.location(981,21);
        pushFollow(FOLLOW_cp_expression_in_synpred32_Css36017);
        cp_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_Css3

    // $ANTLR start synpred33_Css3
    public final void synpred33_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:9: ( ( ws )? cp_expression_operator )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:10: ( ws )? cp_expression_operator
        {
        dbg.location(998,10);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:10: ( ws )?
        int alt373=2;
        try { dbg.enterSubRule(373);
        try { dbg.enterDecision(373, decisionCanBacktrack[373]);

        int LA373_0 = input.LA(1);

        if ( ((LA373_0>=WS && LA373_0<=COMMENT)) ) {
            alt373=1;
        }
        } finally {dbg.exitDecision(373);}

        switch (alt373) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:10: ws
                {
                dbg.location(998,10);
                pushFollow(FOLLOW_ws_in_synpred33_Css36084);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(373);}

        dbg.location(998,14);
        pushFollow(FOLLOW_cp_expression_operator_in_synpred33_Css36087);
        cp_expression_operator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred33_Css3

    // $ANTLR start synpred34_Css3
    public final void synpred34_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:999:11: ( ( ws )? cp_expression_atom )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:999:12: ( ws )? cp_expression_atom
        {
        dbg.location(999,12);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:999:12: ( ws )?
        int alt374=2;
        try { dbg.enterSubRule(374);
        try { dbg.enterDecision(374, decisionCanBacktrack[374]);

        int LA374_0 = input.LA(1);

        if ( ((LA374_0>=WS && LA374_0<=COMMENT)) ) {
            alt374=1;
        }
        } finally {dbg.exitDecision(374);}

        switch (alt374) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:999:12: ws
                {
                dbg.location(999,12);
                pushFollow(FOLLOW_ws_in_synpred34_Css36114);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(374);}

        dbg.location(999,16);
        pushFollow(FOLLOW_cp_expression_atom_in_synpred34_Css36117);
        cp_expression_atom();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred34_Css3

    // $ANTLR start synpred35_Css3
    public final void synpred35_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1012:13: ( cp_math_expression )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1012:14: cp_math_expression
        {
        dbg.location(1012,14);
        pushFollow(FOLLOW_cp_math_expression_in_synpred35_Css36245);
        cp_math_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_Css3

    // $ANTLR start synpred36_Css3
    public final void synpred36_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:13: ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:14: ( ws )? ( PLUS | MINUS | STAR | SOLIDUS )
        {
        dbg.location(1039,14);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:14: ( ws )?
        int alt375=2;
        try { dbg.enterSubRule(375);
        try { dbg.enterDecision(375, decisionCanBacktrack[375]);

        int LA375_0 = input.LA(1);

        if ( ((LA375_0>=WS && LA375_0<=COMMENT)) ) {
            alt375=1;
        }
        } finally {dbg.exitDecision(375);}

        switch (alt375) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:14: ws
                {
                dbg.location(1039,14);
                pushFollow(FOLLOW_ws_in_synpred36_Css36376);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(375);}

        dbg.location(1039,18);
        if ( (input.LA(1)>=SOLIDUS && input.LA(1)<=PLUS)||input.LA(1)==STAR ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            dbg.recognitionException(mse);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred36_Css3

    // $ANTLR start synpred37_Css3
    public final void synpred37_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1173:13: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1173:14: sass_interpolation_expression_var
        {
        dbg.location(1173,14);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred37_Css37419);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred37_Css3

    // $ANTLR start synpred38_Css3
    public final void synpred38_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1180:17: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1180:18: sass_interpolation_expression_var
        {
        dbg.location(1180,18);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred38_Css37566);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred38_Css3

    // $ANTLR start synpred39_Css3
    public final void synpred39_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1191:13: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1191:14: sass_interpolation_expression_var
        {
        dbg.location(1191,14);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred39_Css37722);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred39_Css3

    // $ANTLR start synpred40_Css3
    public final void synpred40_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1198:17: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1198:18: sass_interpolation_expression_var
        {
        dbg.location(1198,18);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred40_Css37840);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred40_Css3

    // Delegated rules

    public final boolean synpred26_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred26_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred5_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred36_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred10_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred11_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred20_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred16_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred18_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred35_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred29_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred14_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred25_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred8_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred15_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred38_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred39_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred24_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred21_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred40_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred9_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred34_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred33_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred12_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred4_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred17_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred7_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred37_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred27_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred30_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred23_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred6_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred3_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred2_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred28_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred13_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred1_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred32_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred31_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred22_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred19_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA3 dfa3 = new DFA3(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA17 dfa17 = new DFA17(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA24 dfa24 = new DFA24(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA33 dfa33 = new DFA33(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA44 dfa44 = new DFA44(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA60 dfa60 = new DFA60(this);
    protected DFA64 dfa64 = new DFA64(this);
    protected DFA68 dfa68 = new DFA68(this);
    protected DFA91 dfa91 = new DFA91(this);
    protected DFA98 dfa98 = new DFA98(this);
    protected DFA102 dfa102 = new DFA102(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA126 dfa126 = new DFA126(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA140 dfa140 = new DFA140(this);
    protected DFA139 dfa139 = new DFA139(this);
    protected DFA142 dfa142 = new DFA142(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA162 dfa162 = new DFA162(this);
    protected DFA175 dfa175 = new DFA175(this);
    protected DFA171 dfa171 = new DFA171(this);
    protected DFA176 dfa176 = new DFA176(this);
    protected DFA181 dfa181 = new DFA181(this);
    protected DFA180 dfa180 = new DFA180(this);
    protected DFA184 dfa184 = new DFA184(this);
    protected DFA192 dfa192 = new DFA192(this);
    protected DFA196 dfa196 = new DFA196(this);
    protected DFA203 dfa203 = new DFA203(this);
    protected DFA202 dfa202 = new DFA202(this);
    protected DFA201 dfa201 = new DFA201(this);
    protected DFA210 dfa210 = new DFA210(this);
    protected DFA215 dfa215 = new DFA215(this);
    protected DFA219 dfa219 = new DFA219(this);
    protected DFA224 dfa224 = new DFA224(this);
    protected DFA228 dfa228 = new DFA228(this);
    protected DFA233 dfa233 = new DFA233(this);
    protected DFA238 dfa238 = new DFA238(this);
    protected DFA242 dfa242 = new DFA242(this);
    protected DFA248 dfa248 = new DFA248(this);
    protected DFA252 dfa252 = new DFA252(this);
    protected DFA254 dfa254 = new DFA254(this);
    protected DFA263 dfa263 = new DFA263(this);
    protected DFA266 dfa266 = new DFA266(this);
    protected DFA293 dfa293 = new DFA293(this);
    protected DFA297 dfa297 = new DFA297(this);
    protected DFA305 dfa305 = new DFA305(this);
    protected DFA309 dfa309 = new DFA309(this);
    protected DFA316 dfa316 = new DFA316(this);
    protected DFA315 dfa315 = new DFA315(this);
    protected DFA335 dfa335 = new DFA335(this);
    protected DFA356 dfa356 = new DFA356(this);
    protected DFA365 dfa365 = new DFA365(this);
    protected DFA370 dfa370 = new DFA370(this);
    static final String DFA3_eotS =
        "\5\uffff";
    static final String DFA3_eofS =
        "\1\2\4\uffff";
    static final String DFA3_minS =
        "\1\4\1\7\1\uffff\1\7\1\uffff";
    static final String DFA3_maxS =
        "\1\156\1\126\1\uffff\1\126\1\uffff";
    static final String DFA3_acceptS =
        "\2\uffff\1\2\1\uffff\1\1";
    static final String DFA3_specialS =
        "\5\uffff}>";
    static final String[] DFA3_transitionS = {
            "\3\2\2\uffff\1\1\3\2\6\uffff\1\2\2\uffff\3\2\3\uffff\1\2\1\uffff"+
            "\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\20\uffff\15\2\11"+
            "\uffff\1\2",
            "\1\4\16\uffff\1\2\75\uffff\3\3",
            "",
            "\1\4\16\uffff\1\2\75\uffff\3\3",
            ""
    };

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "324:6: ( charSet ( ws )? )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA4_eotS =
        "\47\uffff";
    static final String DFA4_eofS =
        "\1\2\46\uffff";
    static final String DFA4_minS =
        "\1\4\1\0\45\uffff";
    static final String DFA4_maxS =
        "\1\156\1\0\45\uffff";
    static final String DFA4_acceptS =
        "\2\uffff\1\2\43\uffff\1\1";
    static final String DFA4_specialS =
        "\1\uffff\1\0\45\uffff}>";
    static final String[] DFA4_transitionS = {
            "\3\2\2\uffff\1\2\1\1\2\2\6\uffff\1\2\2\uffff\3\2\3\uffff\1\2"+
            "\1\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\20\uffff"+
            "\15\2\11\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "325:9: ( imports )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))),""))) ) {s = 38;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA5_eotS =
        "\5\uffff";
    static final String DFA5_eofS =
        "\1\2\4\uffff";
    static final String DFA5_minS =
        "\1\4\1\6\1\uffff\1\6\1\uffff";
    static final String DFA5_maxS =
        "\1\156\1\126\1\uffff\1\126\1\uffff";
    static final String DFA5_acceptS =
        "\2\uffff\1\2\1\uffff\1\1";
    static final String DFA5_specialS =
        "\5\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\1\2\2\2\uffff\4\2\6\uffff\1\2\2\uffff\3\2\3\uffff\1\2\1\uffff"+
            "\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\20\uffff\15\2\11"+
            "\uffff\1\2",
            "\3\4\15\uffff\1\2\75\uffff\3\3",
            "",
            "\3\4\15\uffff\1\2\75\uffff\3\3",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "326:9: ( namespaces )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA8_eotS =
        "\5\uffff";
    static final String DFA8_eofS =
        "\1\1\4\uffff";
    static final String DFA8_minS =
        "\1\4\1\uffff\2\6\1\uffff";
    static final String DFA8_maxS =
        "\1\156\1\uffff\2\126\1\uffff";
    static final String DFA8_acceptS =
        "\1\uffff\1\2\2\uffff\1\1";
    static final String DFA8_specialS =
        "\5\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\2\2\1\2\uffff\4\1\6\uffff\1\1\2\uffff\3\1\3\uffff\1\1\1\uffff"+
            "\23\1\1\uffff\14\1\1\uffff\1\1\6\uffff\2\1\20\uffff\15\1\11"+
            "\uffff\1\1",
            "",
            "\3\4\15\uffff\1\1\75\uffff\3\3",
            "\3\4\15\uffff\1\1\75\uffff\3\3",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "()+ loopback of 333:2: ( namespace ( ws )? )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA17_eotS =
        "\47\uffff";
    static final String DFA17_eofS =
        "\1\1\46\uffff";
    static final String DFA17_minS =
        "\1\4\32\uffff\1\0\13\uffff";
    static final String DFA17_maxS =
        "\1\156\32\uffff\1\0\13\uffff";
    static final String DFA17_acceptS =
        "\1\uffff\1\2\44\uffff\1\1";
    static final String DFA17_specialS =
        "\33\uffff\1\0\13\uffff}>";
    static final String[] DFA17_transitionS = {
            "\3\1\2\uffff\1\1\1\33\2\1\6\uffff\1\1\2\uffff\3\1\3\uffff\1"+
            "\1\1\uffff\23\1\1\uffff\14\1\1\uffff\1\1\6\uffff\2\1\20\uffff"+
            "\15\1\11\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA17_eot = DFA.unpackEncodedString(DFA17_eotS);
    static final short[] DFA17_eof = DFA.unpackEncodedString(DFA17_eofS);
    static final char[] DFA17_min = DFA.unpackEncodedStringToUnsignedChars(DFA17_minS);
    static final char[] DFA17_max = DFA.unpackEncodedStringToUnsignedChars(DFA17_maxS);
    static final short[] DFA17_accept = DFA.unpackEncodedString(DFA17_acceptS);
    static final short[] DFA17_special = DFA.unpackEncodedString(DFA17_specialS);
    static final short[][] DFA17_transition;

    static {
        int numStates = DFA17_transitionS.length;
        DFA17_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA17_transition[i] = DFA.unpackEncodedString(DFA17_transitionS[i]);
        }
    }

    class DFA17 extends DFA {

        public DFA17(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = DFA17_eot;
            this.eof = DFA17_eof;
            this.min = DFA17_min;
            this.max = DFA17_max;
            this.accept = DFA17_accept;
            this.special = DFA17_special;
            this.transition = DFA17_transition;
        }
        public String getDescription() {
            return "()+ loopback of 358:2: ( importItem ( ws )? SEMI ( ws )? )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA17_27 = input.LA(1);

                         
                        int index17_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))),""))) ) {s = 38;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 1;}

                         
                        input.seek(index17_27);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 17, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA27_eotS =
        "\7\uffff";
    static final String DFA27_eofS =
        "\7\uffff";
    static final String DFA27_minS =
        "\1\12\2\7\2\0\2\uffff";
    static final String DFA27_maxS =
        "\1\12\2\126\2\0\2\uffff";
    static final String DFA27_acceptS =
        "\5\uffff\1\1\1\2";
    static final String DFA27_specialS =
        "\3\uffff\1\1\1\0\2\uffff}>";
    static final String[] DFA27_transitionS = {
            "\1\1",
            "\2\3\113\uffff\3\2",
            "\2\4\113\uffff\3\2",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA27_eot = DFA.unpackEncodedString(DFA27_eotS);
    static final short[] DFA27_eof = DFA.unpackEncodedString(DFA27_eofS);
    static final char[] DFA27_min = DFA.unpackEncodedStringToUnsignedChars(DFA27_minS);
    static final char[] DFA27_max = DFA.unpackEncodedStringToUnsignedChars(DFA27_maxS);
    static final short[] DFA27_accept = DFA.unpackEncodedString(DFA27_acceptS);
    static final short[] DFA27_special = DFA.unpackEncodedString(DFA27_specialS);
    static final short[][] DFA27_transition;

    static {
        int numStates = DFA27_transitionS.length;
        DFA27_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA27_transition[i] = DFA.unpackEncodedString(DFA27_transitionS[i]);
        }
    }

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = DFA27_eot;
            this.eof = DFA27_eof;
            this.min = DFA27_min;
            this.max = DFA27_max;
            this.accept = DFA27_accept;
            this.special = DFA27_special;
            this.transition = DFA27_transition;
        }
        public String getDescription() {
            return "361:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA27_4 = input.LA(1);

                         
                        int index27_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isScssSource(),"isScssSource()"),""))) ) {s = 5;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 6;}

                         
                        input.seek(index27_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA27_3 = input.LA(1);

                         
                        int index27_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isScssSource(),"isScssSource()"),""))) ) {s = 5;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 6;}

                         
                        input.seek(index27_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 27, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA20_eotS =
        "\55\uffff";
    static final String DFA20_eofS =
        "\1\11\54\uffff";
    static final String DFA20_minS =
        "\1\4\1\0\1\uffff\3\0\1\uffff\2\0\4\uffff\2\0\14\uffff\16\0\1\uffff"+
        "\3\0";
    static final String DFA20_maxS =
        "\1\156\1\0\1\uffff\3\0\1\uffff\2\0\4\uffff\2\0\14\uffff\16\0\1\uffff"+
        "\3\0";
    static final String DFA20_acceptS =
        "\2\uffff\1\1\3\uffff\1\1\2\uffff\1\2\43\uffff";
    static final String DFA20_specialS =
        "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\uffff\1\5\1\6\4\uffff\1\7\1\10\14"+
        "\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1"+
        "\24\1\25\1\26\1\uffff\1\27\1\30\1\31}>";
    static final String[] DFA20_transitionS = {
            "\1\54\1\11\1\3\2\uffff\1\54\1\41\1\11\1\16\1\uffff\1\11\2\uffff"+
            "\2\2\1\4\1\6\1\uffff\1\11\1\40\1\36\3\uffff\1\37\1\uffff\1\33"+
            "\1\34\1\35\20\54\1\uffff\4\11\1\5\7\11\1\uffff\1\11\6\uffff"+
            "\1\11\1\10\14\uffff\3\1\1\uffff\1\52\1\7\1\15\1\50\2\42\1\43"+
            "\1\54\1\44\1\47\1\53\1\45\1\46\11\uffff\1\11",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "363:43: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA20_0 = input.LA(1);

                         
                        int index20_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA20_0>=WS && LA20_0<=COMMENT)) ) {s = 1;}

                        else if ( ((LA20_0>=ONLY && LA20_0<=NOT)) && (synpred1_Css3())) {s = 2;}

                        else if ( (LA20_0==IDENT) ) {s = 3;}

                        else if ( (LA20_0==GEN) ) {s = 4;}

                        else if ( (LA20_0==HASH_SYMBOL) ) {s = 5;}

                        else if ( (LA20_0==LPAREN) && (synpred1_Css3())) {s = 6;}

                        else if ( (LA20_0==SASS_MIXIN) ) {s = 7;}

                        else if ( (LA20_0==SASS_VAR) ) {s = 8;}

                        else if ( (LA20_0==EOF||LA20_0==SEMI||LA20_0==COMMA||LA20_0==RBRACE||LA20_0==COLON||(LA20_0>=MINUS && LA20_0<=TILDE)||(LA20_0>=HASH && LA20_0<=PIPE)||LA20_0==LESS_AND||LA20_0==RBRACKET||LA20_0==AT_SIGN) ) {s = 9;}

                        else if ( (LA20_0==SASS_INCLUDE) ) {s = 13;}

                        else if ( (LA20_0==MEDIA_SYM) ) {s = 14;}

                        else if ( (LA20_0==PAGE_SYM) ) {s = 27;}

                        else if ( (LA20_0==COUNTER_STYLE_SYM) ) {s = 28;}

                        else if ( (LA20_0==FONT_FACE_SYM) ) {s = 29;}

                        else if ( (LA20_0==MOZ_DOCUMENT_SYM) ) {s = 30;}

                        else if ( (LA20_0==WEBKIT_KEYFRAMES_SYM) ) {s = 31;}

                        else if ( (LA20_0==AT_IDENT) ) {s = 32;}

                        else if ( (LA20_0==IMPORT_SYM) ) {s = 33;}

                        else if ( ((LA20_0>=SASS_DEBUG && LA20_0<=SASS_WARN)) ) {s = 34;}

                        else if ( (LA20_0==SASS_IF) ) {s = 35;}

                        else if ( (LA20_0==SASS_FOR) ) {s = 36;}

                        else if ( (LA20_0==SASS_EACH) ) {s = 37;}

                        else if ( (LA20_0==SASS_WHILE) ) {s = 38;}

                        else if ( (LA20_0==SASS_FUNCTION) ) {s = 39;}

                        else if ( (LA20_0==SASS_EXTEND) ) {s = 40;}

                        else if ( (LA20_0==SASS_CONTENT) ) {s = 42;}

                        else if ( (LA20_0==SASS_RETURN) ) {s = 43;}

                        else if ( (LA20_0==NAMESPACE_SYM||LA20_0==CHARSET_SYM||(LA20_0>=TOPLEFTCORNER_SYM && LA20_0<=RIGHTBOTTOM_SYM)||LA20_0==SASS_ELSE) ) {s = 44;}

                         
                        input.seek(index20_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA20_1 = input.LA(1);

                         
                        int index20_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA20_3 = input.LA(1);

                         
                        int index20_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA20_4 = input.LA(1);

                         
                        int index20_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA20_5 = input.LA(1);

                         
                        int index20_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred1_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA20_7 = input.LA(1);

                         
                        int index20_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 9;}

                         
                        input.seek(index20_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA20_8 = input.LA(1);

                         
                        int index20_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 9;}

                         
                        input.seek(index20_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA20_13 = input.LA(1);

                         
                        int index20_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 9;}

                         
                        input.seek(index20_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA20_14 = input.LA(1);

                         
                        int index20_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA20_27 = input.LA(1);

                         
                        int index20_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_27);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA20_28 = input.LA(1);

                         
                        int index20_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_28);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA20_29 = input.LA(1);

                         
                        int index20_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_29);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA20_30 = input.LA(1);

                         
                        int index20_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_30);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA20_31 = input.LA(1);

                         
                        int index20_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_31);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA20_32 = input.LA(1);

                         
                        int index20_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index20_32);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA20_33 = input.LA(1);

                         
                        int index20_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 9;}

                         
                        input.seek(index20_33);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA20_34 = input.LA(1);

                         
                        int index20_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 9;}

                         
                        input.seek(index20_34);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA20_35 = input.LA(1);

                         
                        int index20_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 9;}

                         
                        input.seek(index20_35);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA20_36 = input.LA(1);

                         
                        int index20_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 9;}

                         
                        input.seek(index20_36);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA20_37 = input.LA(1);

                         
                        int index20_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 9;}

                         
                        input.seek(index20_37);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA20_38 = input.LA(1);

                         
                        int index20_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 9;}

                         
                        input.seek(index20_38);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA20_39 = input.LA(1);

                         
                        int index20_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 9;}

                         
                        input.seek(index20_39);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA20_40 = input.LA(1);

                         
                        int index20_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 9;}

                         
                        input.seek(index20_40);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA20_42 = input.LA(1);

                         
                        int index20_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 9;}

                         
                        input.seek(index20_42);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA20_43 = input.LA(1);

                         
                        int index20_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 9;}

                         
                        input.seek(index20_43);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA20_44 = input.LA(1);

                         
                        int index20_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 9;}

                         
                        input.seek(index20_44);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA24_eotS =
        "\6\uffff";
    static final String DFA24_eofS =
        "\2\2\4\uffff";
    static final String DFA24_minS =
        "\2\4\1\uffff\2\6\1\uffff";
    static final String DFA24_maxS =
        "\2\156\1\uffff\2\126\1\uffff";
    static final String DFA24_acceptS =
        "\2\uffff\1\2\2\uffff\1\1";
    static final String DFA24_specialS =
        "\6\uffff}>";
    static final String[] DFA24_transitionS = {
            "\3\2\2\uffff\2\2\1\3\1\2\1\uffff\1\2\2\uffff\4\2\1\uffff\3\2"+
            "\3\uffff\1\2\1\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2"+
            "\2\14\uffff\3\1\1\uffff\15\2\11\uffff\1\2",
            "\3\2\2\uffff\2\2\1\3\1\2\1\uffff\1\2\2\uffff\4\2\1\uffff\3"+
            "\2\3\uffff\1\2\1\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff"+
            "\2\2\14\uffff\3\1\1\uffff\15\2\11\uffff\1\2",
            "",
            "\1\2\2\5\2\uffff\1\2\1\uffff\1\2\10\uffff\1\2\33\uffff\1\2"+
            "\1\uffff\1\2\1\uffff\4\2\2\uffff\1\2\2\uffff\1\2\6\uffff\1\2"+
            "\15\uffff\3\4",
            "\1\2\2\5\2\uffff\1\2\1\uffff\1\2\10\uffff\1\2\33\uffff\1\2"+
            "\1\uffff\1\2\1\uffff\4\2\2\uffff\1\2\2\uffff\1\2\6\uffff\1\2"+
            "\15\uffff\3\4",
            ""
    };

    static final short[] DFA24_eot = DFA.unpackEncodedString(DFA24_eotS);
    static final short[] DFA24_eof = DFA.unpackEncodedString(DFA24_eofS);
    static final char[] DFA24_min = DFA.unpackEncodedStringToUnsignedChars(DFA24_minS);
    static final char[] DFA24_max = DFA.unpackEncodedStringToUnsignedChars(DFA24_maxS);
    static final short[] DFA24_accept = DFA.unpackEncodedString(DFA24_acceptS);
    static final short[] DFA24_special = DFA.unpackEncodedString(DFA24_specialS);
    static final short[][] DFA24_transition;

    static {
        int numStates = DFA24_transitionS.length;
        DFA24_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA24_transition[i] = DFA.unpackEncodedString(DFA24_transitionS[i]);
        }
    }

    class DFA24 extends DFA {

        public DFA24(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 24;
            this.eot = DFA24_eot;
            this.eof = DFA24_eof;
            this.min = DFA24_min;
            this.max = DFA24_max;
            this.accept = DFA24_accept;
            this.special = DFA24_special;
            this.transition = DFA24_transition;
        }
        public String getDescription() {
            return "()* loopback of 366:61: ( ( ws )? COMMA ( ws )? resourceIdentifier )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA26_eotS =
        "\55\uffff";
    static final String DFA26_eofS =
        "\1\11\54\uffff";
    static final String DFA26_minS =
        "\1\4\1\0\1\uffff\3\0\1\uffff\2\0\4\uffff\2\0\14\uffff\16\0\1\uffff"+
        "\3\0";
    static final String DFA26_maxS =
        "\1\156\1\0\1\uffff\3\0\1\uffff\2\0\4\uffff\2\0\14\uffff\16\0\1\uffff"+
        "\3\0";
    static final String DFA26_acceptS =
        "\2\uffff\1\1\3\uffff\1\1\2\uffff\1\2\43\uffff";
    static final String DFA26_specialS =
        "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\uffff\1\5\1\6\4\uffff\1\7\1\10\14"+
        "\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1"+
        "\24\1\25\1\26\1\uffff\1\27\1\30\1\31}>";
    static final String[] DFA26_transitionS = {
            "\1\54\1\11\1\3\2\uffff\1\54\1\41\1\11\1\16\1\uffff\1\11\2\uffff"+
            "\2\2\1\4\1\6\1\uffff\1\11\1\40\1\36\3\uffff\1\37\1\uffff\1\33"+
            "\1\34\1\35\20\54\1\uffff\4\11\1\5\7\11\1\uffff\1\11\6\uffff"+
            "\1\11\1\10\14\uffff\3\1\1\uffff\1\52\1\7\1\15\1\50\2\42\1\43"+
            "\1\54\1\44\1\47\1\53\1\45\1\46\11\uffff\1\11",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "366:97: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_0 = input.LA(1);

                         
                        int index26_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA26_0>=WS && LA26_0<=COMMENT)) ) {s = 1;}

                        else if ( ((LA26_0>=ONLY && LA26_0<=NOT)) && (synpred2_Css3())) {s = 2;}

                        else if ( (LA26_0==IDENT) ) {s = 3;}

                        else if ( (LA26_0==GEN) ) {s = 4;}

                        else if ( (LA26_0==HASH_SYMBOL) ) {s = 5;}

                        else if ( (LA26_0==LPAREN) && (synpred2_Css3())) {s = 6;}

                        else if ( (LA26_0==SASS_MIXIN) ) {s = 7;}

                        else if ( (LA26_0==SASS_VAR) ) {s = 8;}

                        else if ( (LA26_0==EOF||LA26_0==SEMI||LA26_0==COMMA||LA26_0==RBRACE||LA26_0==COLON||(LA26_0>=MINUS && LA26_0<=TILDE)||(LA26_0>=HASH && LA26_0<=PIPE)||LA26_0==LESS_AND||LA26_0==RBRACKET||LA26_0==AT_SIGN) ) {s = 9;}

                        else if ( (LA26_0==SASS_INCLUDE) ) {s = 13;}

                        else if ( (LA26_0==MEDIA_SYM) ) {s = 14;}

                        else if ( (LA26_0==PAGE_SYM) ) {s = 27;}

                        else if ( (LA26_0==COUNTER_STYLE_SYM) ) {s = 28;}

                        else if ( (LA26_0==FONT_FACE_SYM) ) {s = 29;}

                        else if ( (LA26_0==MOZ_DOCUMENT_SYM) ) {s = 30;}

                        else if ( (LA26_0==WEBKIT_KEYFRAMES_SYM) ) {s = 31;}

                        else if ( (LA26_0==AT_IDENT) ) {s = 32;}

                        else if ( (LA26_0==IMPORT_SYM) ) {s = 33;}

                        else if ( ((LA26_0>=SASS_DEBUG && LA26_0<=SASS_WARN)) ) {s = 34;}

                        else if ( (LA26_0==SASS_IF) ) {s = 35;}

                        else if ( (LA26_0==SASS_FOR) ) {s = 36;}

                        else if ( (LA26_0==SASS_EACH) ) {s = 37;}

                        else if ( (LA26_0==SASS_WHILE) ) {s = 38;}

                        else if ( (LA26_0==SASS_FUNCTION) ) {s = 39;}

                        else if ( (LA26_0==SASS_EXTEND) ) {s = 40;}

                        else if ( (LA26_0==SASS_CONTENT) ) {s = 42;}

                        else if ( (LA26_0==SASS_RETURN) ) {s = 43;}

                        else if ( (LA26_0==NAMESPACE_SYM||LA26_0==CHARSET_SYM||(LA26_0>=TOPLEFTCORNER_SYM && LA26_0<=RIGHTBOTTOM_SYM)||LA26_0==SASS_ELSE) ) {s = 44;}

                         
                        input.seek(index26_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA26_1 = input.LA(1);

                         
                        int index26_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA26_3 = input.LA(1);

                         
                        int index26_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA26_4 = input.LA(1);

                         
                        int index26_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA26_5 = input.LA(1);

                         
                        int index26_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA26_7 = input.LA(1);

                         
                        int index26_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA26_8 = input.LA(1);

                         
                        int index26_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 9;}

                         
                        input.seek(index26_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA26_13 = input.LA(1);

                         
                        int index26_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA26_14 = input.LA(1);

                         
                        int index26_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA26_27 = input.LA(1);

                         
                        int index26_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_27);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA26_28 = input.LA(1);

                         
                        int index26_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_28);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA26_29 = input.LA(1);

                         
                        int index26_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_29);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA26_30 = input.LA(1);

                         
                        int index26_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_30);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA26_31 = input.LA(1);

                         
                        int index26_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_31);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA26_32 = input.LA(1);

                         
                        int index26_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_32);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA26_33 = input.LA(1);

                         
                        int index26_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_33);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA26_34 = input.LA(1);

                         
                        int index26_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_34);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA26_35 = input.LA(1);

                         
                        int index26_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_35);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA26_36 = input.LA(1);

                         
                        int index26_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_36);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA26_37 = input.LA(1);

                         
                        int index26_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_37);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA26_38 = input.LA(1);

                         
                        int index26_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_38);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA26_39 = input.LA(1);

                         
                        int index26_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_39);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA26_40 = input.LA(1);

                         
                        int index26_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_40);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA26_42 = input.LA(1);

                         
                        int index26_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_42);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA26_43 = input.LA(1);

                         
                        int index26_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_43);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA26_44 = input.LA(1);

                         
                        int index26_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 6;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 9;}

                         
                        input.seek(index26_44);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA33_eotS =
        "\5\uffff";
    static final String DFA33_eofS =
        "\5\uffff";
    static final String DFA33_minS =
        "\2\4\1\0\2\uffff";
    static final String DFA33_maxS =
        "\2\156\1\0\2\uffff";
    static final String DFA33_acceptS =
        "\3\uffff\1\2\1\1";
    static final String DFA33_specialS =
        "\2\uffff\1\0\2\uffff}>";
    static final String[] DFA33_transitionS = {
            "\1\3\1\2\1\3\2\uffff\4\3\1\uffff\1\3\4\uffff\1\3\2\uffff\3\3"+
            "\3\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2"+
            "\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\3\1\2\1\3\2\uffff\4\3\1\uffff\1\3\4\uffff\1\3\2\uffff\3"+
            "\3\3\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff"+
            "\2\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
    static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
    static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
    static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
    static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
    static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
    static final short[][] DFA33_transition;

    static {
        int numStates = DFA33_transitionS.length;
        DFA33_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
        }
    }

    class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = DFA33_eot;
            this.eof = DFA33_eof;
            this.min = DFA33_min;
            this.max = DFA33_max;
            this.accept = DFA33_accept;
            this.special = DFA33_special;
            this.transition = DFA33_transition;
        }
        public String getDescription() {
            return "381:26: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA33_2 = input.LA(1);

                         
                        int index33_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_Css3()) ) {s = 4;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index33_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 33, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA41_eotS =
        "\60\uffff";
    static final String DFA41_eofS =
        "\60\uffff";
    static final String DFA41_minS =
        "\1\4\21\0\7\uffff\1\0\3\uffff\6\0\15\uffff";
    static final String DFA41_maxS =
        "\1\156\21\0\7\uffff\1\0\3\uffff\6\0\15\uffff";
    static final String DFA41_acceptS =
        "\22\uffff\1\12\20\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1"+
        "\13\1\14\1\15\1\16";
    static final String DFA41_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\7\uffff\1\21\3\uffff\1\22\1\23\1\24\1\25\1"+
        "\26\1\27\15\uffff}>";
    static final String[] DFA41_transitionS = {
            "\1\42\1\uffff\1\6\2\uffff\2\42\1\22\1\41\6\uffff\1\10\2\uffff"+
            "\1\22\1\40\1\36\3\uffff\1\37\1\uffff\1\21\1\42\1\35\20\42\1"+
            "\uffff\1\31\3\22\1\5\1\7\1\1\3\22\1\4\1\22\1\uffff\1\22\6\uffff"+
            "\1\22\1\12\20\uffff\1\20\1\2\1\3\1\11\2\13\1\14\1\42\1\15\2"+
            "\42\1\16\1\17\11\uffff\1\22",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA41_eot = DFA.unpackEncodedString(DFA41_eotS);
    static final short[] DFA41_eof = DFA.unpackEncodedString(DFA41_eofS);
    static final char[] DFA41_min = DFA.unpackEncodedStringToUnsignedChars(DFA41_minS);
    static final char[] DFA41_max = DFA.unpackEncodedStringToUnsignedChars(DFA41_maxS);
    static final short[] DFA41_accept = DFA.unpackEncodedString(DFA41_acceptS);
    static final short[] DFA41_special = DFA.unpackEncodedString(DFA41_specialS);
    static final short[][] DFA41_transition;

    static {
        int numStates = DFA41_transitionS.length;
        DFA41_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA41_transition[i] = DFA.unpackEncodedString(DFA41_transitionS[i]);
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;
        }
        public String getDescription() {
            return "387:1: mediaBodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | {...}? sass_extend | {...}? sass_debug | {...}? sass_control | {...}? sass_content | rule | page | fontFace | vendorAtRule | media );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA41_1 = input.LA(1);

                         
                        int index41_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred4_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 35;}

                        else if ( (((synpred5_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 36;}

                        else if ( (((synpred6_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 37;}

                        else if ( ((synpred7_Css3()||(synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 38;}

                        else if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred8_Css3())) ) {s = 39;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index41_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA41_2 = input.LA(1);

                         
                        int index41_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred4_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 35;}

                        else if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                         
                        input.seek(index41_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA41_3 = input.LA(1);

                         
                        int index41_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred5_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 36;}

                        else if ( (((synpred6_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 37;}

                        else if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                         
                        input.seek(index41_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA41_4 = input.LA(1);

                         
                        int index41_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred7_Css3()||(synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 38;}

                        else if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred8_Css3())) ) {s = 39;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index41_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA41_5 = input.LA(1);

                         
                        int index41_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred7_Css3()||(synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 38;}

                        else if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred8_Css3())) ) {s = 39;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index41_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA41_6 = input.LA(1);

                         
                        int index41_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred7_Css3()||(synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 38;}

                        else if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred8_Css3())) ) {s = 39;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index41_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA41_7 = input.LA(1);

                         
                        int index41_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred7_Css3()||(synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 38;}

                        else if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred8_Css3())) ) {s = 39;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index41_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA41_8 = input.LA(1);

                         
                        int index41_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred7_Css3()||(synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 38;}

                        else if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred8_Css3())) ) {s = 39;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index41_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA41_9 = input.LA(1);

                         
                        int index41_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 40;}

                         
                        input.seek(index41_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA41_10 = input.LA(1);

                         
                        int index41_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 38;}

                        else if ( ((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||(((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 39;}

                         
                        input.seek(index41_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA41_11 = input.LA(1);

                         
                        int index41_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 41;}

                         
                        input.seek(index41_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA41_12 = input.LA(1);

                         
                        int index41_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 42;}

                         
                        input.seek(index41_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA41_13 = input.LA(1);

                         
                        int index41_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 42;}

                         
                        input.seek(index41_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA41_14 = input.LA(1);

                         
                        int index41_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 42;}

                         
                        input.seek(index41_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA41_15 = input.LA(1);

                         
                        int index41_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 42;}

                         
                        input.seek(index41_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA41_16 = input.LA(1);

                         
                        int index41_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 43;}

                         
                        input.seek(index41_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA41_17 = input.LA(1);

                         
                        int index41_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (true) ) {s = 44;}

                         
                        input.seek(index41_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA41_25 = input.LA(1);

                         
                        int index41_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred7_Css3()||(synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 38;}

                        else if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred8_Css3())) ) {s = 39;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index41_25);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA41_29 = input.LA(1);

                         
                        int index41_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index41_29);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA41_30 = input.LA(1);

                         
                        int index41_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (true) ) {s = 46;}

                         
                        input.seek(index41_30);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA41_31 = input.LA(1);

                         
                        int index41_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (true) ) {s = 46;}

                         
                        input.seek(index41_31);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA41_32 = input.LA(1);

                         
                        int index41_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (true) ) {s = 46;}

                         
                        input.seek(index41_32);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA41_33 = input.LA(1);

                         
                        int index41_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                        else if ( (true) ) {s = 47;}

                         
                        input.seek(index41_33);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA41_34 = input.LA(1);

                         
                        int index41_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred7_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( ((((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 39;}

                         
                        input.seek(index41_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 41, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA38_eotS =
        "\4\uffff";
    static final String DFA38_eofS =
        "\4\uffff";
    static final String DFA38_minS =
        "\2\4\2\uffff";
    static final String DFA38_maxS =
        "\2\156\2\uffff";
    static final String DFA38_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA38_specialS =
        "\4\uffff}>";
    static final String[] DFA38_transitionS = {
            "\3\3\2\uffff\4\3\1\uffff\1\3\1\2\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\4\3\1\uffff\1\3\1\2\3\uffff\1\3\2\uffff\3\3\3"+
            "\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3"+
            "\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA38_eot = DFA.unpackEncodedString(DFA38_eotS);
    static final short[] DFA38_eof = DFA.unpackEncodedString(DFA38_eofS);
    static final char[] DFA38_min = DFA.unpackEncodedStringToUnsignedChars(DFA38_minS);
    static final char[] DFA38_max = DFA.unpackEncodedStringToUnsignedChars(DFA38_maxS);
    static final short[] DFA38_accept = DFA.unpackEncodedString(DFA38_acceptS);
    static final short[] DFA38_special = DFA.unpackEncodedString(DFA38_specialS);
    static final short[][] DFA38_transition;

    static {
        int numStates = DFA38_transitionS.length;
        DFA38_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA38_transition[i] = DFA.unpackEncodedString(DFA38_transitionS[i]);
        }
    }

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = DFA38_eot;
            this.eof = DFA38_eof;
            this.min = DFA38_min;
            this.max = DFA38_max;
            this.accept = DFA38_accept;
            this.special = DFA38_special;
            this.transition = DFA38_transition;
        }
        public String getDescription() {
            return "391:87: ( ( ws )? IMPORTANT_SYM )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA40_eotS =
        "\4\uffff";
    static final String DFA40_eofS =
        "\4\uffff";
    static final String DFA40_minS =
        "\2\4\2\uffff";
    static final String DFA40_maxS =
        "\2\156\2\uffff";
    static final String DFA40_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA40_specialS =
        "\4\uffff}>";
    static final String[] DFA40_transitionS = {
            "\3\3\2\uffff\4\3\1\uffff\1\3\1\2\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\4\3\1\uffff\1\3\1\2\3\uffff\1\3\2\uffff\3\3\3"+
            "\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3"+
            "\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "392:57: ( ( ws )? IMPORTANT_SYM )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA44_eotS =
        "\56\uffff";
    static final String DFA44_eofS =
        "\1\2\55\uffff";
    static final String DFA44_minS =
        "\1\4\1\0\45\uffff\1\0\6\uffff";
    static final String DFA44_maxS =
        "\1\156\1\0\45\uffff\1\0\6\uffff";
    static final String DFA44_acceptS =
        "\2\uffff\1\2\52\uffff\1\1";
    static final String DFA44_specialS =
        "\1\uffff\1\0\45\uffff\1\1\6\uffff}>";
    static final String[] DFA44_transitionS = {
            "\3\2\2\uffff\2\2\1\47\3\2\4\uffff\1\2\2\uffff\3\2\3\uffff\1"+
            "\2\1\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\14\uffff"+
            "\3\1\1\uffff\15\2\11\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA44_eot = DFA.unpackEncodedString(DFA44_eotS);
    static final short[] DFA44_eof = DFA.unpackEncodedString(DFA44_eofS);
    static final char[] DFA44_min = DFA.unpackEncodedStringToUnsignedChars(DFA44_minS);
    static final char[] DFA44_max = DFA.unpackEncodedStringToUnsignedChars(DFA44_maxS);
    static final short[] DFA44_accept = DFA.unpackEncodedString(DFA44_acceptS);
    static final short[] DFA44_special = DFA.unpackEncodedString(DFA44_specialS);
    static final short[][] DFA44_transition;

    static {
        int numStates = DFA44_transitionS.length;
        DFA44_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA44_transition[i] = DFA.unpackEncodedString(DFA44_transitionS[i]);
        }
    }

    class DFA44 extends DFA {

        public DFA44(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = DFA44_eot;
            this.eof = DFA44_eof;
            this.min = DFA44_min;
            this.max = DFA44_max;
            this.accept = DFA44_accept;
            this.special = DFA44_special;
            this.transition = DFA44_transition;
        }
        public String getDescription() {
            return "()* loopback of 408:15: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA44_1 = input.LA(1);

                         
                        int index44_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index44_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA44_39 = input.LA(1);

                         
                        int index44_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index44_39);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 44, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA49_eotS =
        "\4\uffff";
    static final String DFA49_eofS =
        "\2\2\2\uffff";
    static final String DFA49_minS =
        "\2\4\2\uffff";
    static final String DFA49_maxS =
        "\2\156\2\uffff";
    static final String DFA49_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA49_specialS =
        "\4\uffff}>";
    static final String[] DFA49_transitionS = {
            "\3\2\2\uffff\6\2\1\uffff\1\3\2\uffff\1\2\2\uffff\3\2\3\uffff"+
            "\1\2\1\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\14\uffff"+
            "\3\1\1\uffff\15\2\11\uffff\1\2",
            "\3\2\2\uffff\6\2\1\uffff\1\3\2\uffff\1\2\2\uffff\3\2\3\uffff"+
            "\1\2\1\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\14\uffff"+
            "\3\1\1\uffff\15\2\11\uffff\1\2",
            "",
            ""
    };

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "()* loopback of 413:43: ( ( ws )? AND ( ws )? mediaExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA52_eotS =
        "\4\uffff";
    static final String DFA52_eofS =
        "\2\2\2\uffff";
    static final String DFA52_minS =
        "\2\4\2\uffff";
    static final String DFA52_maxS =
        "\2\156\2\uffff";
    static final String DFA52_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA52_specialS =
        "\4\uffff}>";
    static final String[] DFA52_transitionS = {
            "\3\2\2\uffff\6\2\1\uffff\1\3\2\uffff\1\2\2\uffff\3\2\3\uffff"+
            "\1\2\1\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\14\uffff"+
            "\3\1\1\uffff\15\2\11\uffff\1\2",
            "\3\2\2\uffff\6\2\1\uffff\1\3\2\uffff\1\2\2\uffff\3\2\3\uffff"+
            "\1\2\1\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\14\uffff"+
            "\3\1\1\uffff\15\2\11\uffff\1\2",
            "",
            ""
    };

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "()* loopback of 414:23: ( ( ws )? AND ( ws )? mediaExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA56_eotS =
        "\4\uffff";
    static final String DFA56_eofS =
        "\4\uffff";
    static final String DFA56_minS =
        "\2\25\2\uffff";
    static final String DFA56_maxS =
        "\2\126\2\uffff";
    static final String DFA56_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA56_specialS =
        "\4\uffff}>";
    static final String[] DFA56_transitionS = {
            "\1\3\1\2\75\uffff\3\1",
            "\1\3\1\2\75\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "428:29: ( mediaFeatureValue )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA60_eotS =
        "\34\uffff";
    static final String DFA60_eofS =
        "\34\uffff";
    static final String DFA60_minS =
        "\1\4\1\uffff\27\0\3\uffff";
    static final String DFA60_maxS =
        "\1\144\1\uffff\27\0\3\uffff";
    static final String DFA60_acceptS =
        "\1\uffff\1\1\31\uffff\1\2";
    static final String DFA60_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\3\uffff}>";
    static final String[] DFA60_transitionS = {
            "\1\25\1\uffff\1\3\1\17\1\23\2\25\1\uffff\1\25\2\uffff\1\1\2"+
            "\uffff\1\1\1\22\1\1\2\uffff\2\25\3\uffff\1\25\1\5\23\25\1\uffff"+
            "\2\2\1\uffff\1\20\1\27\1\24\17\uffff\1\26\1\4\1\6\1\7\1\10\1"+
            "\11\1\12\1\13\1\14\1\15\1\16\1\21\1\30\4\uffff\15\25",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA60_eot = DFA.unpackEncodedString(DFA60_eotS);
    static final short[] DFA60_eof = DFA.unpackEncodedString(DFA60_eofS);
    static final char[] DFA60_min = DFA.unpackEncodedStringToUnsignedChars(DFA60_minS);
    static final char[] DFA60_max = DFA.unpackEncodedStringToUnsignedChars(DFA60_maxS);
    static final short[] DFA60_accept = DFA.unpackEncodedString(DFA60_acceptS);
    static final short[] DFA60_special = DFA.unpackEncodedString(DFA60_specialS);
    static final short[][] DFA60_transition;

    static {
        int numStates = DFA60_transitionS.length;
        DFA60_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA60_transition[i] = DFA.unpackEncodedString(DFA60_transitionS[i]);
        }
    }

    class DFA60 extends DFA {

        public DFA60(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 60;
            this.eot = DFA60_eot;
            this.eof = DFA60_eof;
            this.min = DFA60_min;
            this.max = DFA60_max;
            this.accept = DFA60_accept;
            this.special = DFA60_special;
            this.transition = DFA60_transition;
        }
        public String getDescription() {
            return "434:5: ({...}? cp_expression | expression )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA60_2 = input.LA(1);

                         
                        int index60_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index60_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA60_3 = input.LA(1);

                         
                        int index60_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index60_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA60_4 = input.LA(1);

                         
                        int index60_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index60_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA60_5 = input.LA(1);

                         
                        int index60_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index60_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA60_6 = input.LA(1);

                         
                        int index60_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index60_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA60_7 = input.LA(1);

                         
                        int index60_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index60_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA60_8 = input.LA(1);

                         
                        int index60_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index60_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA60_9 = input.LA(1);

                         
                        int index60_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index60_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA60_10 = input.LA(1);

                         
                        int index60_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index60_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA60_11 = input.LA(1);

                         
                        int index60_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index60_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA60_12 = input.LA(1);

                         
                        int index60_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index60_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA60_13 = input.LA(1);

                         
                        int index60_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index60_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA60_14 = input.LA(1);

                         
                        int index60_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index60_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA60_15 = input.LA(1);

                         
                        int index60_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index60_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA60_16 = input.LA(1);

                         
                        int index60_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 1;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 27;}

                         
                        input.seek(index60_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA60_17 = input.LA(1);

                         
                        int index60_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 1;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 27;}

                         
                        input.seek(index60_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA60_18 = input.LA(1);

                         
                        int index60_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index60_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA60_19 = input.LA(1);

                         
                        int index60_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index60_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA60_20 = input.LA(1);

                         
                        int index60_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index60_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA60_21 = input.LA(1);

                         
                        int index60_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 1;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 27;}

                         
                        input.seek(index60_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA60_22 = input.LA(1);

                         
                        int index60_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 1;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 27;}

                         
                        input.seek(index60_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA60_23 = input.LA(1);

                         
                        int index60_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 27;}

                         
                        input.seek(index60_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA60_24 = input.LA(1);

                         
                        int index60_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 27;}

                         
                        input.seek(index60_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 60, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA64_eotS =
        "\5\uffff";
    static final String DFA64_eofS =
        "\2\3\3\uffff";
    static final String DFA64_minS =
        "\2\4\1\0\2\uffff";
    static final String DFA64_maxS =
        "\2\156\1\0\2\uffff";
    static final String DFA64_acceptS =
        "\3\uffff\1\2\1\1";
    static final String DFA64_specialS =
        "\2\uffff\1\0\2\uffff}>";
    static final String[] DFA64_transitionS = {
            "\1\3\1\2\1\3\2\uffff\4\3\1\uffff\1\3\4\uffff\1\3\2\uffff\3\3"+
            "\3\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2"+
            "\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\3\1\2\1\3\2\uffff\4\3\1\uffff\1\3\4\uffff\1\3\2\uffff\3"+
            "\3\3\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff"+
            "\2\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA64_eot = DFA.unpackEncodedString(DFA64_eotS);
    static final short[] DFA64_eof = DFA.unpackEncodedString(DFA64_eofS);
    static final char[] DFA64_min = DFA.unpackEncodedStringToUnsignedChars(DFA64_minS);
    static final char[] DFA64_max = DFA.unpackEncodedStringToUnsignedChars(DFA64_maxS);
    static final short[] DFA64_accept = DFA.unpackEncodedString(DFA64_acceptS);
    static final short[] DFA64_special = DFA.unpackEncodedString(DFA64_specialS);
    static final short[][] DFA64_transition;

    static {
        int numStates = DFA64_transitionS.length;
        DFA64_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA64_transition[i] = DFA.unpackEncodedString(DFA64_transitionS[i]);
        }
    }

    class DFA64 extends DFA {

        public DFA64(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = DFA64_eot;
            this.eof = DFA64_eof;
            this.min = DFA64_min;
            this.max = DFA64_max;
            this.accept = DFA64_accept;
            this.special = DFA64_special;
            this.transition = DFA64_transition;
        }
        public String getDescription() {
            return "448:21: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA64_2 = input.LA(1);

                         
                        int index64_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_Css3()) ) {s = 4;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index64_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 64, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA68_eotS =
        "\63\uffff";
    static final String DFA68_eofS =
        "\56\uffff\1\15\3\uffff\1\15";
    static final String DFA68_minS =
        "\1\4\1\6\2\26\1\uffff\1\4\2\6\1\15\1\10\2\6\1\7\1\uffff\6\26\3\6"+
        "\1\4\1\uffff\1\6\1\4\1\6\1\15\1\10\2\6\1\7\1\uffff\5\4\2\6\4\uffff"+
        "\1\0\1\4\3\uffff\1\4";
    static final String DFA68_maxS =
        "\2\156\2\126\1\uffff\1\144\7\126\1\uffff\6\126\1\156\2\126\1\144"+
        "\1\uffff\1\126\1\144\6\126\1\uffff\5\144\1\126\1\156\4\uffff\1\0"+
        "\1\156\3\uffff\1\156";
    static final String DFA68_acceptS =
        "\4\uffff\1\4\10\uffff\1\6\12\uffff\1\5\10\uffff\1\7\7\uffff\1\1"+
        "\1\2\1\3\1\1\2\uffff\1\10\1\11\1\12\1\uffff";
    static final String DFA68_specialS =
        "\24\uffff\1\3\1\0\22\uffff\1\2\4\uffff\1\1\5\uffff}>";
    static final String[] DFA68_transitionS = {
            "\1\15\1\uffff\1\4\2\uffff\1\15\1\14\1\4\1\5\6\uffff\1\4\2\uffff"+
            "\1\4\1\13\1\11\3\uffff\1\12\1\uffff\1\6\1\7\1\10\20\15\1\uffff"+
            "\6\4\1\1\5\4\1\uffff\1\4\6\uffff\1\4\1\15\20\uffff\1\15\1\2"+
            "\1\3\1\15\2\16\1\17\1\15\1\20\1\23\1\15\1\21\1\22\11\uffff\1"+
            "\4",
            "\1\24\4\uffff\1\4\1\uffff\1\4\5\uffff\1\4\2\uffff\1\4\33\uffff"+
            "\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\2\uffff\1\4\6\uffff"+
            "\1\4\15\uffff\3\4\27\uffff\1\4",
            "\1\15\75\uffff\3\25",
            "\1\15\75\uffff\3\26",
            "",
            "\1\30\1\uffff\1\30\2\uffff\2\30\1\uffff\1\30\4\uffff\4\30\1"+
            "\uffff\1\15\2\30\3\uffff\1\30\1\uffff\23\30\5\uffff\1\30\20"+
            "\uffff\1\30\14\uffff\3\27\1\uffff\15\30",
            "\1\30\6\uffff\1\30\10\uffff\1\32\75\uffff\3\31",
            "\1\30\17\uffff\1\15\75\uffff\3\33",
            "\1\30\10\uffff\1\15\75\uffff\3\34",
            "\1\30\15\uffff\1\15\2\uffff\3\30\70\uffff\3\35",
            "\2\30\16\uffff\1\15\75\uffff\3\36",
            "\2\30\5\uffff\1\30\10\uffff\1\15\75\uffff\3\37",
            "\2\41\15\uffff\1\15\75\uffff\3\40",
            "",
            "\1\15\75\uffff\3\42",
            "\1\15\75\uffff\3\43",
            "\1\15\75\uffff\3\44",
            "\1\15\75\uffff\3\45",
            "\1\15\75\uffff\3\46",
            "\1\15\75\uffff\3\47",
            "\1\4\4\uffff\1\4\1\uffff\1\4\5\uffff\1\4\1\51\1\uffff\1\4\33"+
            "\uffff\14\4\1\uffff\1\4\6\uffff\1\4\15\uffff\3\50\27\uffff\1"+
            "\4",
            "\1\54\17\uffff\1\15\75\uffff\3\25",
            "\1\55\17\uffff\1\15\75\uffff\3\26",
            "\1\30\1\uffff\1\30\2\uffff\2\30\1\uffff\1\30\4\uffff\4\30\1"+
            "\uffff\1\15\2\30\3\uffff\1\30\1\uffff\23\30\5\uffff\1\30\20"+
            "\uffff\1\30\14\uffff\3\27\1\uffff\15\30",
            "",
            "\1\30\6\uffff\1\30\10\uffff\1\32\75\uffff\3\31",
            "\1\15\1\uffff\1\56\4\15\1\uffff\1\15\2\uffff\1\15\2\uffff\3"+
            "\15\2\uffff\2\15\3\uffff\25\15\1\uffff\2\15\1\uffff\3\15\17"+
            "\uffff\20\15\1\uffff\15\15",
            "\1\30\17\uffff\1\15\75\uffff\3\33",
            "\1\30\10\uffff\1\15\75\uffff\3\34",
            "\1\30\15\uffff\1\15\2\uffff\3\30\70\uffff\3\35",
            "\2\30\16\uffff\1\15\75\uffff\3\36",
            "\2\30\5\uffff\1\30\10\uffff\1\15\75\uffff\3\37",
            "\2\41\15\uffff\1\15\75\uffff\3\40",
            "",
            "\1\57\1\uffff\5\57\1\uffff\1\57\2\uffff\1\57\2\uffff\3\57\1"+
            "\uffff\1\15\2\57\3\uffff\25\57\1\uffff\2\57\1\uffff\3\57\17"+
            "\uffff\15\57\3\42\1\uffff\15\57",
            "\1\60\1\uffff\5\60\1\uffff\1\60\2\uffff\1\60\2\uffff\3\60\1"+
            "\uffff\1\15\2\60\3\uffff\25\60\1\uffff\2\60\1\uffff\3\60\17"+
            "\uffff\15\60\3\43\1\uffff\15\60",
            "\1\60\4\uffff\2\60\1\uffff\1\60\11\uffff\1\15\2\60\3\uffff"+
            "\1\60\1\uffff\23\60\26\uffff\1\60\14\uffff\3\44\1\uffff\15\60",
            "\1\60\4\uffff\2\60\1\uffff\1\60\11\uffff\1\15\2\60\3\uffff"+
            "\1\60\1\uffff\23\60\26\uffff\1\60\14\uffff\3\45\1\uffff\15\60",
            "\1\60\1\uffff\5\60\1\uffff\1\60\2\uffff\1\60\2\uffff\3\60\1"+
            "\uffff\1\15\2\60\3\uffff\25\60\1\uffff\2\60\1\uffff\3\60\17"+
            "\uffff\15\60\3\46\1\uffff\15\60",
            "\1\61\17\uffff\1\15\75\uffff\3\47",
            "\1\4\4\uffff\1\4\1\uffff\1\4\5\uffff\1\4\1\51\1\uffff\1\4\33"+
            "\uffff\14\4\1\uffff\1\4\6\uffff\1\4\15\uffff\3\50\27\uffff\1"+
            "\4",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\11\15\1\30\3\15\1\uffff\3\15\1\uffff\3\15\3\uffff\42\15\1"+
            "\uffff\1\15\6\uffff\16\15\3\62\24\15\3\uffff\1\15",
            "",
            "",
            "",
            "\11\15\1\30\3\15\1\uffff\3\15\1\uffff\3\15\3\uffff\42\15\1"+
            "\uffff\1\15\6\uffff\16\15\3\62\24\15\3\uffff\1\15"
    };

    static final short[] DFA68_eot = DFA.unpackEncodedString(DFA68_eotS);
    static final short[] DFA68_eof = DFA.unpackEncodedString(DFA68_eofS);
    static final char[] DFA68_min = DFA.unpackEncodedStringToUnsignedChars(DFA68_minS);
    static final char[] DFA68_max = DFA.unpackEncodedStringToUnsignedChars(DFA68_maxS);
    static final short[] DFA68_accept = DFA.unpackEncodedString(DFA68_acceptS);
    static final short[] DFA68_special = DFA.unpackEncodedString(DFA68_specialS);
    static final short[][] DFA68_transition;

    static {
        int numStates = DFA68_transitionS.length;
        DFA68_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA68_transition[i] = DFA.unpackEncodedString(DFA68_transitionS[i]);
        }
    }

    class DFA68 extends DFA {

        public DFA68(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 68;
            this.eot = DFA68_eot;
            this.eof = DFA68_eof;
            this.min = DFA68_min;
            this.max = DFA68_max;
            this.accept = DFA68_accept;
            this.special = DFA68_special;
            this.transition = DFA68_transition;
        }
        public String getDescription() {
            return "454:1: bodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call | ( cp_mixin_call )=>{...}? cp_mixin_call | rule | at_rule | {...}? cp_variable_declaration | {...}? importItem | {...}? sass_debug | {...}? sass_control | {...}? sass_function_declaration );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA68_21 = input.LA(1);

                         
                        int index68_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA68_21==IDENT) && (synpred11_Css3())) {s = 44;}

                        else if ( ((LA68_21>=WS && LA68_21<=COMMENT)) ) {s = 21;}

                        else if ( (LA68_21==COLON) ) {s = 13;}

                         
                        input.seek(index68_21);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA68_45 = input.LA(1);

                         
                        int index68_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred12_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 42;}

                        else if ( (((synpred13_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 43;}

                         
                        input.seek(index68_45);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA68_40 = input.LA(1);

                         
                        int index68_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA68_40==LPAREN) && (synpred11_Css3())) {s = 41;}

                        else if ( ((LA68_40>=WS && LA68_40<=COMMENT)) ) {s = 40;}

                        else if ( (LA68_40==IDENT||LA68_40==COMMA||LA68_40==LBRACE||LA68_40==GEN||LA68_40==COLON||(LA68_40>=MINUS && LA68_40<=PIPE)||LA68_40==LESS_AND||LA68_40==RBRACKET||LA68_40==AT_SIGN) ) {s = 4;}

                         
                        input.seek(index68_40);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA68_20 = input.LA(1);

                         
                        int index68_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA68_20>=WS && LA68_20<=COMMENT)) ) {s = 40;}

                        else if ( (LA68_20==LPAREN) && (synpred11_Css3())) {s = 41;}

                        else if ( (LA68_20==IDENT||LA68_20==COMMA||LA68_20==LBRACE||LA68_20==GEN||LA68_20==COLON||(LA68_20>=MINUS && LA68_20<=PIPE)||LA68_20==LESS_AND||LA68_20==RBRACKET||LA68_20==AT_SIGN) ) {s = 4;}

                        else if ( (((synpred12_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 42;}

                        else if ( (((synpred13_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 43;}

                         
                        input.seek(index68_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 68, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA91_eotS =
        "\4\uffff";
    static final String DFA91_eofS =
        "\4\uffff";
    static final String DFA91_minS =
        "\2\13\2\uffff";
    static final String DFA91_maxS =
        "\2\126\2\uffff";
    static final String DFA91_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA91_specialS =
        "\4\uffff}>";
    static final String[] DFA91_transitionS = {
            "\1\3\1\uffff\1\2\106\uffff\3\1",
            "\1\3\1\uffff\1\2\106\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA91_eot = DFA.unpackEncodedString(DFA91_eotS);
    static final short[] DFA91_eof = DFA.unpackEncodedString(DFA91_eofS);
    static final char[] DFA91_min = DFA.unpackEncodedStringToUnsignedChars(DFA91_minS);
    static final char[] DFA91_max = DFA.unpackEncodedStringToUnsignedChars(DFA91_maxS);
    static final short[] DFA91_accept = DFA.unpackEncodedString(DFA91_acceptS);
    static final short[] DFA91_special = DFA.unpackEncodedString(DFA91_specialS);
    static final short[][] DFA91_transition;

    static {
        int numStates = DFA91_transitionS.length;
        DFA91_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA91_transition[i] = DFA.unpackEncodedString(DFA91_transitionS[i]);
        }
    }

    class DFA91 extends DFA {

        public DFA91(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 91;
            this.eot = DFA91_eot;
            this.eof = DFA91_eof;
            this.min = DFA91_min;
            this.max = DFA91_max;
            this.accept = DFA91_accept;
            this.special = DFA91_special;
            this.transition = DFA91_transition;
        }
        public String getDescription() {
            return "()* loopback of 528:25: ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA98_eotS =
        "\5\uffff";
    static final String DFA98_eofS =
        "\5\uffff";
    static final String DFA98_minS =
        "\1\4\1\uffff\2\15\1\uffff";
    static final String DFA98_maxS =
        "\1\144\1\uffff\2\126\1\uffff";
    static final String DFA98_acceptS =
        "\1\uffff\1\1\2\uffff\1\2";
    static final String DFA98_specialS =
        "\5\uffff}>";
    static final String[] DFA98_transitionS = {
            "\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\6\uffff\1\1\3\uffff"+
            "\2\1\3\uffff\1\1\1\uffff\3\1\20\2\1\uffff\1\1\3\uffff\3\1\3"+
            "\uffff\1\1\12\uffff\1\1\20\uffff\15\1",
            "",
            "\1\4\10\uffff\1\1\75\uffff\3\3",
            "\1\4\10\uffff\1\1\75\uffff\3\3",
            ""
    };

    static final short[] DFA98_eot = DFA.unpackEncodedString(DFA98_eotS);
    static final short[] DFA98_eof = DFA.unpackEncodedString(DFA98_eofS);
    static final char[] DFA98_min = DFA.unpackEncodedStringToUnsignedChars(DFA98_minS);
    static final char[] DFA98_max = DFA.unpackEncodedStringToUnsignedChars(DFA98_maxS);
    static final short[] DFA98_accept = DFA.unpackEncodedString(DFA98_acceptS);
    static final short[] DFA98_special = DFA.unpackEncodedString(DFA98_specialS);
    static final short[][] DFA98_transition;

    static {
        int numStates = DFA98_transitionS.length;
        DFA98_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA98_transition[i] = DFA.unpackEncodedString(DFA98_transitionS[i]);
        }
    }

    class DFA98 extends DFA {

        public DFA98(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = DFA98_eot;
            this.eof = DFA98_eof;
            this.min = DFA98_min;
            this.max = DFA98_max;
            this.accept = DFA98_accept;
            this.special = DFA98_special;
            this.transition = DFA98_transition;
        }
        public String getDescription() {
            return "536:14: ( propertyDeclaration | margin )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA102_eotS =
        "\5\uffff";
    static final String DFA102_eofS =
        "\5\uffff";
    static final String DFA102_minS =
        "\1\4\1\uffff\2\15\1\uffff";
    static final String DFA102_maxS =
        "\1\144\1\uffff\2\126\1\uffff";
    static final String DFA102_acceptS =
        "\1\uffff\1\1\2\uffff\1\2";
    static final String DFA102_specialS =
        "\5\uffff}>";
    static final String[] DFA102_transitionS = {
            "\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\6\uffff\1\1\3\uffff"+
            "\2\1\3\uffff\1\1\1\uffff\3\1\20\2\1\uffff\1\1\3\uffff\3\1\3"+
            "\uffff\1\1\12\uffff\1\1\20\uffff\15\1",
            "",
            "\1\4\10\uffff\1\1\75\uffff\3\3",
            "\1\4\10\uffff\1\1\75\uffff\3\3",
            ""
    };

    static final short[] DFA102_eot = DFA.unpackEncodedString(DFA102_eotS);
    static final short[] DFA102_eof = DFA.unpackEncodedString(DFA102_eofS);
    static final char[] DFA102_min = DFA.unpackEncodedStringToUnsignedChars(DFA102_minS);
    static final char[] DFA102_max = DFA.unpackEncodedStringToUnsignedChars(DFA102_maxS);
    static final short[] DFA102_accept = DFA.unpackEncodedString(DFA102_acceptS);
    static final short[] DFA102_special = DFA.unpackEncodedString(DFA102_specialS);
    static final short[][] DFA102_transition;

    static {
        int numStates = DFA102_transitionS.length;
        DFA102_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA102_transition[i] = DFA.unpackEncodedString(DFA102_transitionS[i]);
        }
    }

    class DFA102 extends DFA {

        public DFA102(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 102;
            this.eot = DFA102_eot;
            this.eof = DFA102_eof;
            this.min = DFA102_min;
            this.max = DFA102_max;
            this.accept = DFA102_accept;
            this.special = DFA102_special;
            this.transition = DFA102_transition;
        }
        public String getDescription() {
            return "536:60: ( propertyDeclaration | margin )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA121_eotS =
        "\5\uffff";
    static final String DFA121_eofS =
        "\5\uffff";
    static final String DFA121_minS =
        "\2\4\1\0\2\uffff";
    static final String DFA121_maxS =
        "\2\156\1\0\2\uffff";
    static final String DFA121_acceptS =
        "\3\uffff\1\2\1\1";
    static final String DFA121_specialS =
        "\2\uffff\1\0\2\uffff}>";
    static final String[] DFA121_transitionS = {
            "\1\3\1\2\1\3\2\uffff\4\3\1\uffff\1\3\4\uffff\1\3\2\uffff\3\3"+
            "\3\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2"+
            "\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\3\1\2\1\3\2\uffff\4\3\1\uffff\1\3\4\uffff\1\3\2\uffff\3"+
            "\3\3\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff"+
            "\2\3\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA121_eot = DFA.unpackEncodedString(DFA121_eotS);
    static final short[] DFA121_eof = DFA.unpackEncodedString(DFA121_eofS);
    static final char[] DFA121_min = DFA.unpackEncodedStringToUnsignedChars(DFA121_minS);
    static final char[] DFA121_max = DFA.unpackEncodedStringToUnsignedChars(DFA121_maxS);
    static final short[] DFA121_accept = DFA.unpackEncodedString(DFA121_acceptS);
    static final short[] DFA121_special = DFA.unpackEncodedString(DFA121_specialS);
    static final short[][] DFA121_transition;

    static {
        int numStates = DFA121_transitionS.length;
        DFA121_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA121_transition[i] = DFA.unpackEncodedString(DFA121_transitionS[i]);
        }
    }

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = DFA121_eot;
            this.eof = DFA121_eof;
            this.min = DFA121_min;
            this.max = DFA121_max;
            this.accept = DFA121_accept;
            this.special = DFA121_special;
            this.transition = DFA121_transition;
        }
        public String getDescription() {
            return "623:24: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA121_2 = input.LA(1);

                         
                        int index121_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Css3()) ) {s = 4;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index121_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 121, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA129_eotS =
        "\65\uffff";
    static final String DFA129_eofS =
        "\65\uffff";
    static final String DFA129_minS =
        "\1\4\12\0\7\uffff\1\0\3\uffff\20\0\17\uffff";
    static final String DFA129_maxS =
        "\1\156\12\0\7\uffff\1\0\3\uffff\20\0\17\uffff";
    static final String DFA129_acceptS =
        "\13\uffff\7\10\1\uffff\3\10\20\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
        "\1\20\1\11\1\12\1\13\1\14\1\15\1\16\1\17";
    static final String DFA129_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\7\uffff\1\13\3\uffff"+
        "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\17\uffff}>";
    static final String[] DFA129_transitionS = {
            "\1\45\1\uffff\1\4\2\uffff\1\45\1\44\1\24\1\12\6\uffff\1\6\2"+
            "\uffff\1\23\1\33\1\31\3\uffff\1\32\1\uffff\1\26\1\27\1\30\20"+
            "\45\1\uffff\1\22\1\15\1\13\1\15\1\3\1\10\1\5\1\17\1\25\1\20"+
            "\1\7\1\16\1\uffff\1\14\6\uffff\1\24\1\2\20\uffff\1\42\1\1\1"+
            "\11\1\40\2\41\1\34\1\45\1\35\1\45\1\43\1\36\1\37\11\uffff\1"+
            "\21",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA129_eot = DFA.unpackEncodedString(DFA129_eotS);
    static final short[] DFA129_eof = DFA.unpackEncodedString(DFA129_eofS);
    static final char[] DFA129_min = DFA.unpackEncodedStringToUnsignedChars(DFA129_minS);
    static final char[] DFA129_max = DFA.unpackEncodedStringToUnsignedChars(DFA129_maxS);
    static final short[] DFA129_accept = DFA.unpackEncodedString(DFA129_acceptS);
    static final short[] DFA129_special = DFA.unpackEncodedString(DFA129_specialS);
    static final short[][] DFA129_transition;

    static {
        int numStates = DFA129_transitionS.length;
        DFA129_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA129_transition[i] = DFA.unpackEncodedString(DFA129_transitionS[i]);
        }
    }

    class DFA129 extends DFA {

        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = DFA129_eot;
            this.eof = DFA129_eof;
            this.min = DFA129_min;
            this.max = DFA129_max;
            this.accept = DFA129_accept;
            this.special = DFA129_special;
            this.transition = DFA129_transition;
        }
        public String getDescription() {
            return "629:1: declaration : ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_nested_properties )=> sass_nested_properties | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( selectorsGroup ( ws )? LBRACE )=> rule | {...}? at_rule | {...}? sass_control | {...}? sass_extend | {...}? sass_debug | {...}? sass_content | {...}? sass_function_return | {...}? importItem | GEN );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA129_0 = input.LA(1);

                         
                        int index129_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA129_0==SASS_MIXIN) ) {s = 1;}

                        else if ( (LA129_0==SASS_VAR) ) {s = 2;}

                        else if ( (LA129_0==HASH_SYMBOL) ) {s = 3;}

                        else if ( (LA129_0==IDENT) ) {s = 4;}

                        else if ( (LA129_0==DOT) ) {s = 5;}

                        else if ( (LA129_0==GEN) ) {s = 6;}

                        else if ( (LA129_0==STAR) ) {s = 7;}

                        else if ( (LA129_0==HASH) ) {s = 8;}

                        else if ( (LA129_0==SASS_INCLUDE) ) {s = 9;}

                        else if ( (LA129_0==MEDIA_SYM) ) {s = 10;}

                        else if ( (LA129_0==GREATER) && (synpred23_Css3())) {s = 11;}

                        else if ( (LA129_0==LESS_AND) && (synpred23_Css3())) {s = 12;}

                        else if ( (LA129_0==PLUS||LA129_0==TILDE) && (synpred23_Css3())) {s = 13;}

                        else if ( (LA129_0==PIPE) && (synpred23_Css3())) {s = 14;}

                        else if ( (LA129_0==LBRACKET) && (synpred23_Css3())) {s = 15;}

                        else if ( (LA129_0==SASS_EXTEND_ONLY_SELECTOR) && (synpred23_Css3())) {s = 16;}

                        else if ( (LA129_0==AT_SIGN) && (synpred23_Css3())) {s = 17;}

                        else if ( (LA129_0==MINUS) ) {s = 18;}

                        else if ( (LA129_0==COLON) && (synpred23_Css3())) {s = 19;}

                        else if ( (LA129_0==COMMA||LA129_0==RBRACKET) && (synpred23_Css3())) {s = 20;}

                        else if ( (LA129_0==DCOLON) && (synpred23_Css3())) {s = 21;}

                        else if ( (LA129_0==PAGE_SYM) ) {s = 22;}

                        else if ( (LA129_0==COUNTER_STYLE_SYM) ) {s = 23;}

                        else if ( (LA129_0==FONT_FACE_SYM) ) {s = 24;}

                        else if ( (LA129_0==MOZ_DOCUMENT_SYM) ) {s = 25;}

                        else if ( (LA129_0==WEBKIT_KEYFRAMES_SYM) ) {s = 26;}

                        else if ( (LA129_0==AT_IDENT) ) {s = 27;}

                        else if ( (LA129_0==SASS_IF) ) {s = 28;}

                        else if ( (LA129_0==SASS_FOR) ) {s = 29;}

                        else if ( (LA129_0==SASS_EACH) ) {s = 30;}

                        else if ( (LA129_0==SASS_WHILE) ) {s = 31;}

                        else if ( (LA129_0==SASS_EXTEND) ) {s = 32;}

                        else if ( ((LA129_0>=SASS_DEBUG && LA129_0<=SASS_WARN)) ) {s = 33;}

                        else if ( (LA129_0==SASS_CONTENT) ) {s = 34;}

                        else if ( (LA129_0==SASS_RETURN) ) {s = 35;}

                        else if ( (LA129_0==IMPORT_SYM) ) {s = 36;}

                        else if ( (LA129_0==NAMESPACE_SYM||LA129_0==CHARSET_SYM||(LA129_0>=TOPLEFTCORNER_SYM && LA129_0<=RIGHTBOTTOM_SYM)||LA129_0==SASS_ELSE||LA129_0==SASS_FUNCTION) ) {s = 37;}

                         
                        input.seek(index129_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA129_1 = input.LA(1);

                         
                        int index129_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (((((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( ((synpred20_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 42;}

                         
                        input.seek(index129_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA129_2 = input.LA(1);

                         
                        int index129_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 38;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 39;}

                        else if ( ((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||(((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 40;}

                        else if ( ((((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||(((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 41;}

                         
                        input.seek(index129_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA129_3 = input.LA(1);

                         
                        int index129_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_Css3()) ) {s = 39;}

                        else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred18_Css3())) ) {s = 40;}

                        else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred19_Css3())) ) {s = 41;}

                        else if ( (synpred23_Css3()) ) {s = 21;}

                         
                        input.seek(index129_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA129_4 = input.LA(1);

                         
                        int index129_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_Css3()) ) {s = 39;}

                        else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred18_Css3())) ) {s = 40;}

                        else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred19_Css3())) ) {s = 41;}

                        else if ( (synpred23_Css3()) ) {s = 21;}

                         
                        input.seek(index129_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA129_5 = input.LA(1);

                         
                        int index129_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_Css3()) ) {s = 39;}

                        else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred18_Css3())) ) {s = 40;}

                        else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred19_Css3())) ) {s = 41;}

                        else if ( ((synpred20_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 42;}

                        else if ( (((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 43;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 44;}

                        else if ( (synpred23_Css3()) ) {s = 21;}

                         
                        input.seek(index129_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA129_6 = input.LA(1);

                         
                        int index129_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_Css3()) ) {s = 39;}

                        else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred18_Css3())) ) {s = 40;}

                        else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred19_Css3())) ) {s = 41;}

                        else if ( (synpred23_Css3()) ) {s = 21;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index129_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA129_7 = input.LA(1);

                         
                        int index129_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred18_Css3())) ) {s = 40;}

                        else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred19_Css3())) ) {s = 41;}

                        else if ( (synpred23_Css3()) ) {s = 21;}

                         
                        input.seek(index129_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA129_8 = input.LA(1);

                         
                        int index129_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_Css3()) ) {s = 39;}

                        else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred18_Css3())) ) {s = 40;}

                        else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred19_Css3())) ) {s = 41;}

                        else if ( (synpred23_Css3()) ) {s = 21;}

                         
                        input.seek(index129_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA129_9 = input.LA(1);

                         
                        int index129_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (((((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (((synpred21_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 43;}

                        else if ( (((synpred22_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 44;}

                         
                        input.seek(index129_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA129_10 = input.LA(1);

                         
                        int index129_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (((((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 46;}

                         
                        input.seek(index129_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA129_18 = input.LA(1);

                         
                        int index129_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_Css3()) ) {s = 39;}

                        else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred18_Css3())) ) {s = 40;}

                        else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred19_Css3())) ) {s = 41;}

                        else if ( (synpred23_Css3()) ) {s = 21;}

                         
                        input.seek(index129_18);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA129_22 = input.LA(1);

                         
                        int index129_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (((((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 46;}

                         
                        input.seek(index129_22);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA129_23 = input.LA(1);

                         
                        int index129_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (((((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 46;}

                         
                        input.seek(index129_23);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA129_24 = input.LA(1);

                         
                        int index129_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (((((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 46;}

                         
                        input.seek(index129_24);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA129_25 = input.LA(1);

                         
                        int index129_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (((((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 46;}

                         
                        input.seek(index129_25);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA129_26 = input.LA(1);

                         
                        int index129_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (((((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 46;}

                         
                        input.seek(index129_26);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA129_27 = input.LA(1);

                         
                        int index129_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (((((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 46;}

                         
                        input.seek(index129_27);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA129_28 = input.LA(1);

                         
                        int index129_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (((((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 47;}

                         
                        input.seek(index129_28);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA129_29 = input.LA(1);

                         
                        int index129_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (((((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 47;}

                         
                        input.seek(index129_29);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA129_30 = input.LA(1);

                         
                        int index129_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (((((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 47;}

                         
                        input.seek(index129_30);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA129_31 = input.LA(1);

                         
                        int index129_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (((((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 47;}

                         
                        input.seek(index129_31);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA129_32 = input.LA(1);

                         
                        int index129_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (((((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 48;}

                         
                        input.seek(index129_32);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA129_33 = input.LA(1);

                         
                        int index129_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (((((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 49;}

                         
                        input.seek(index129_33);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA129_34 = input.LA(1);

                         
                        int index129_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (((((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 50;}

                         
                        input.seek(index129_34);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA129_35 = input.LA(1);

                         
                        int index129_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (((((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 51;}

                         
                        input.seek(index129_35);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA129_36 = input.LA(1);

                         
                        int index129_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (((((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 52;}

                         
                        input.seek(index129_36);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA129_37 = input.LA(1);

                         
                        int index129_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred16_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred16_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 38;}

                        else if ( (((synpred17_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 39;}

                        else if ( (((((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 40;}

                        else if ( (((((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 41;}

                         
                        input.seek(index129_37);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 129, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA126_eotS =
        "\4\uffff";
    static final String DFA126_eofS =
        "\4\uffff";
    static final String DFA126_minS =
        "\2\4\2\uffff";
    static final String DFA126_maxS =
        "\2\156\2\uffff";
    static final String DFA126_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA126_specialS =
        "\4\uffff}>";
    static final String[] DFA126_transitionS = {
            "\3\3\2\uffff\4\3\1\uffff\1\3\1\2\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\4\3\1\uffff\1\3\1\2\3\uffff\1\3\2\uffff\3\3\3"+
            "\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3"+
            "\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA126_eot = DFA.unpackEncodedString(DFA126_eotS);
    static final short[] DFA126_eof = DFA.unpackEncodedString(DFA126_eofS);
    static final char[] DFA126_min = DFA.unpackEncodedStringToUnsignedChars(DFA126_minS);
    static final char[] DFA126_max = DFA.unpackEncodedStringToUnsignedChars(DFA126_maxS);
    static final short[] DFA126_accept = DFA.unpackEncodedString(DFA126_acceptS);
    static final short[] DFA126_special = DFA.unpackEncodedString(DFA126_specialS);
    static final short[][] DFA126_transition;

    static {
        int numStates = DFA126_transitionS.length;
        DFA126_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA126_transition[i] = DFA.unpackEncodedString(DFA126_transitionS[i]);
        }
    }

    class DFA126 extends DFA {

        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = DFA126_eot;
            this.eof = DFA126_eof;
            this.min = DFA126_min;
            this.max = DFA126_max;
            this.accept = DFA126_accept;
            this.special = DFA126_special;
            this.transition = DFA126_transition;
        }
        public String getDescription() {
            return "638:87: ( ( ws )? IMPORTANT_SYM )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA128_eotS =
        "\4\uffff";
    static final String DFA128_eofS =
        "\4\uffff";
    static final String DFA128_minS =
        "\2\4\2\uffff";
    static final String DFA128_maxS =
        "\2\156\2\uffff";
    static final String DFA128_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA128_specialS =
        "\4\uffff}>";
    static final String[] DFA128_transitionS = {
            "\3\3\2\uffff\4\3\1\uffff\1\3\1\2\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\4\3\1\uffff\1\3\1\2\3\uffff\1\3\2\uffff\3\3\3"+
            "\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3"+
            "\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "639:57: ( ( ws )? IMPORTANT_SYM )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA133_eotS =
        "\43\uffff";
    static final String DFA133_eofS =
        "\43\uffff";
    static final String DFA133_minS =
        "\3\6\1\0\1\uffff\3\0\3\6\5\uffff\2\6\1\0\1\uffff\3\0\3\6\1\0\3\6"+
        "\1\0\1\uffff\2\6\1\0";
    static final String DFA133_maxS =
        "\3\156\1\0\1\uffff\3\0\1\156\2\126\5\uffff\2\156\1\0\1\uffff\3\0"+
        "\1\156\2\126\1\0\3\126\1\0\1\uffff\2\126\1\0";
    static final String DFA133_acceptS =
        "\4\uffff\1\2\6\uffff\5\1\3\uffff\1\1\13\uffff\1\1\3\uffff";
    static final String DFA133_specialS =
        "\1\11\1\31\1\5\1\23\1\uffff\1\24\1\27\1\22\1\30\1\2\1\14\5\uffff"+
        "\1\17\1\26\1\10\1\uffff\1\4\1\15\1\32\1\21\1\16\1\0\1\7\1\6\1\3"+
        "\1\12\1\25\1\uffff\1\1\1\20\1\13}>";
    static final String[] DFA133_transitionS = {
            "\1\3\4\uffff\1\13\7\uffff\1\4\2\uffff\1\12\33\uffff\1\13\1\4"+
            "\1\2\1\4\1\1\1\7\1\10\1\11\2\4\1\5\1\4\1\uffff\1\6\6\uffff\1"+
            "\13\47\uffff\1\4",
            "\1\17\4\uffff\1\17\1\uffff\1\14\10\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\1\uffff\1\4\1\17"+
            "\6\uffff\1\17\15\uffff\3\15\27\uffff\1\4",
            "\1\22\4\uffff\1\17\1\uffff\1\23\5\uffff\1\4\2\uffff\1\31\33"+
            "\uffff\1\17\1\uffff\1\17\1\uffff\1\21\1\26\1\27\1\30\2\4\1\24"+
            "\1\4\1\uffff\1\25\6\uffff\1\17\15\uffff\3\20\27\uffff\1\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\32\4\uffff\1\17\1\uffff\1\23\5\uffff\1\4\2\uffff\1\17\33"+
            "\uffff\1\17\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff"+
            "\1\17\6\uffff\1\17\15\uffff\3\15\27\uffff\1\4",
            "\1\34\4\uffff\1\17\1\uffff\1\23\10\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\35\1\4\1\uffff\1\17"+
            "\6\uffff\1\17\15\uffff\3\33",
            "\1\36\4\uffff\1\17\1\uffff\1\23\4\uffff\2\4\2\uffff\1\17\33"+
            "\uffff\1\17\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff"+
            "\1\17\6\uffff\1\17\15\uffff\3\15",
            "",
            "",
            "",
            "",
            "",
            "\1\22\4\uffff\1\17\1\uffff\1\23\5\uffff\1\4\2\uffff\1\31\33"+
            "\uffff\1\17\1\uffff\1\17\1\uffff\1\21\1\26\1\27\1\30\2\4\1\24"+
            "\1\4\1\uffff\1\25\6\uffff\1\17\15\uffff\3\20\27\uffff\1\4",
            "\1\17\4\uffff\1\17\1\uffff\1\37\10\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\1\uffff\1\4\1\17"+
            "\6\uffff\1\17\15\uffff\3\15\27\uffff\1\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\32\4\uffff\1\17\1\uffff\1\23\5\uffff\1\4\2\uffff\1\17\33"+
            "\uffff\1\17\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff"+
            "\1\17\6\uffff\1\17\15\uffff\3\15\27\uffff\1\4",
            "\1\34\4\uffff\1\17\1\uffff\1\23\10\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\35\1\4\1\uffff\1\17"+
            "\6\uffff\1\17\15\uffff\3\33",
            "\1\36\4\uffff\1\17\1\uffff\1\23\4\uffff\2\4\2\uffff\1\17\33"+
            "\uffff\1\17\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff"+
            "\1\17\6\uffff\1\17\15\uffff\3\15",
            "\1\uffff",
            "\1\40\4\uffff\1\17\1\uffff\1\23\10\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff\1\17\6"+
            "\uffff\1\17\15\uffff\3\33",
            "\1\17\4\uffff\1\17\1\uffff\1\23\10\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\1\4\1\uffff\1\17"+
            "\6\4\1\42\15\uffff\3\41",
            "\1\17\4\uffff\1\17\1\uffff\1\23\10\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\1\4\1\uffff\1\17"+
            "\6\uffff\1\17\15\uffff\3\15",
            "\1\uffff",
            "",
            "\1\17\4\uffff\1\17\1\uffff\1\23\10\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff\1\17\6"+
            "\4\1\42\15\uffff\3\41",
            "\1\17\4\uffff\1\17\1\uffff\1\23\10\uffff\1\17\33\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\1\16\3\17\2\uffff\1\17\2\uffff\1\17\6"+
            "\4\1\42\15\uffff\3\41",
            "\1\uffff"
    };

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "655:1: selectorsGroup : ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression | selector ( ( ws )? COMMA ( ws )? selector )* );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA133_25 = input.LA(1);

                         
                        int index133_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA133_25>=WS && LA133_25<=COMMENT)) && (synpred24_Css3())) {s = 13;}

                        else if ( (LA133_25==LBRACE) && (synpred24_Css3())) {s = 19;}

                        else if ( (LA133_25==HASH_SYMBOL) && (synpred24_Css3())) {s = 14;}

                        else if ( (LA133_25==IDENT) ) {s = 30;}

                        else if ( (LA133_25==COMMA||LA133_25==COLON||LA133_25==MINUS||LA133_25==GREATER||(LA133_25>=HASH && LA133_25<=LBRACKET)||LA133_25==STAR||LA133_25==LESS_AND||LA133_25==RBRACKET) && (synpred24_Css3())) {s = 15;}

                        else if ( ((LA133_25>=NOT && LA133_25<=GEN)) ) {s = 4;}

                         
                        input.seek(index133_25);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA133_32 = input.LA(1);

                         
                        int index133_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA133_32>=WS && LA133_32<=COMMENT)) ) {s = 33;}

                        else if ( (LA133_32==LBRACE) && (synpred24_Css3())) {s = 19;}

                        else if ( (LA133_32==HASH_SYMBOL) && (synpred24_Css3())) {s = 14;}

                        else if ( (LA133_32==RBRACKET) ) {s = 34;}

                        else if ( ((LA133_32>=OPEQ && LA133_32<=CONTAINS)) ) {s = 4;}

                        else if ( (LA133_32==IDENT||LA133_32==COMMA||LA133_32==COLON||LA133_32==MINUS||LA133_32==GREATER||(LA133_32>=HASH && LA133_32<=LBRACKET)||LA133_32==STAR||LA133_32==LESS_AND) && (synpred24_Css3())) {s = 15;}

                         
                        input.seek(index133_32);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA133_9 = input.LA(1);

                         
                        int index133_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA133_9>=WS && LA133_9<=COMMENT)) ) {s = 27;}

                        else if ( (LA133_9==HASH_SYMBOL) && (synpred24_Css3())) {s = 14;}

                        else if ( (LA133_9==IDENT) ) {s = 28;}

                        else if ( (LA133_9==LBRACE) && (synpred24_Css3())) {s = 19;}

                        else if ( (LA133_9==STAR) ) {s = 29;}

                        else if ( (LA133_9==COMMA||LA133_9==COLON||LA133_9==MINUS||LA133_9==GREATER||(LA133_9>=HASH && LA133_9<=LBRACKET)||LA133_9==LESS_AND||LA133_9==RBRACKET) && (synpred24_Css3())) {s = 15;}

                        else if ( (LA133_9==PIPE) ) {s = 4;}

                         
                        input.seek(index133_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA133_28 = input.LA(1);

                         
                        int index133_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA133_28>=WS && LA133_28<=COMMENT)) ) {s = 33;}

                        else if ( (LA133_28==LBRACE) && (synpred24_Css3())) {s = 19;}

                        else if ( (LA133_28==HASH_SYMBOL) && (synpred24_Css3())) {s = 14;}

                        else if ( (LA133_28==RBRACKET) ) {s = 34;}

                        else if ( (LA133_28==PIPE||(LA133_28>=OPEQ && LA133_28<=CONTAINS)) ) {s = 4;}

                        else if ( (LA133_28==IDENT||LA133_28==COMMA||LA133_28==COLON||LA133_28==MINUS||LA133_28==GREATER||(LA133_28>=HASH && LA133_28<=LBRACKET)||LA133_28==STAR||LA133_28==LESS_AND) && (synpred24_Css3())) {s = 15;}

                         
                        input.seek(index133_28);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA133_20 = input.LA(1);

                         
                        int index133_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index133_20);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA133_2 = input.LA(1);

                         
                        int index133_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA133_2>=WS && LA133_2<=COMMENT)) ) {s = 16;}

                        else if ( (LA133_2==HASH_SYMBOL) ) {s = 17;}

                        else if ( (LA133_2==IDENT) ) {s = 18;}

                        else if ( (LA133_2==LBRACE) && (synpred24_Css3())) {s = 19;}

                        else if ( (LA133_2==STAR) ) {s = 20;}

                        else if ( (LA133_2==LESS_AND) ) {s = 21;}

                        else if ( (LA133_2==GEN||(LA133_2>=DCOLON && LA133_2<=SASS_EXTEND_ONLY_SELECTOR)||LA133_2==PIPE||LA133_2==AT_SIGN) ) {s = 4;}

                        else if ( (LA133_2==HASH) ) {s = 22;}

                        else if ( (LA133_2==DOT) ) {s = 23;}

                        else if ( (LA133_2==LBRACKET) ) {s = 24;}

                        else if ( (LA133_2==COLON) ) {s = 25;}

                        else if ( (LA133_2==COMMA||LA133_2==MINUS||LA133_2==GREATER||LA133_2==RBRACKET) && (synpred24_Css3())) {s = 15;}

                         
                        input.seek(index133_2);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA133_27 = input.LA(1);

                         
                        int index133_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_27==HASH_SYMBOL) && (synpred24_Css3())) {s = 14;}

                        else if ( (LA133_27==IDENT) ) {s = 32;}

                        else if ( ((LA133_27>=WS && LA133_27<=COMMENT)) ) {s = 27;}

                        else if ( (LA133_27==LBRACE) && (synpred24_Css3())) {s = 19;}

                        else if ( (LA133_27==COMMA||LA133_27==COLON||LA133_27==MINUS||LA133_27==GREATER||(LA133_27>=HASH && LA133_27<=LBRACKET)||LA133_27==STAR||LA133_27==LESS_AND||LA133_27==RBRACKET) && (synpred24_Css3())) {s = 15;}

                         
                        input.seek(index133_27);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA133_26 = input.LA(1);

                         
                        int index133_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index133_26);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA133_18 = input.LA(1);

                         
                        int index133_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index133_18);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA133_0 = input.LA(1);

                         
                        int index133_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_0==HASH_SYMBOL) ) {s = 1;}

                        else if ( (LA133_0==GREATER) ) {s = 2;}

                        else if ( (LA133_0==IDENT) ) {s = 3;}

                        else if ( (LA133_0==GEN||LA133_0==PLUS||LA133_0==TILDE||(LA133_0>=DCOLON && LA133_0<=SASS_EXTEND_ONLY_SELECTOR)||LA133_0==PIPE||LA133_0==AT_SIGN) ) {s = 4;}

                        else if ( (LA133_0==STAR) ) {s = 5;}

                        else if ( (LA133_0==LESS_AND) ) {s = 6;}

                        else if ( (LA133_0==HASH) ) {s = 7;}

                        else if ( (LA133_0==DOT) ) {s = 8;}

                        else if ( (LA133_0==LBRACKET) ) {s = 9;}

                        else if ( (LA133_0==COLON) ) {s = 10;}

                        else if ( (LA133_0==COMMA||LA133_0==MINUS||LA133_0==RBRACKET) && (synpred24_Css3())) {s = 11;}

                         
                        input.seek(index133_0);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA133_29 = input.LA(1);

                         
                        int index133_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA133_29>=WS && LA133_29<=COMMENT)) && (synpred24_Css3())) {s = 13;}

                        else if ( (LA133_29==LBRACE) && (synpred24_Css3())) {s = 19;}

                        else if ( (LA133_29==HASH_SYMBOL) && (synpred24_Css3())) {s = 14;}

                        else if ( (LA133_29==IDENT||LA133_29==COMMA||LA133_29==COLON||LA133_29==MINUS||LA133_29==GREATER||(LA133_29>=HASH && LA133_29<=LBRACKET)||LA133_29==STAR||LA133_29==LESS_AND||LA133_29==RBRACKET) && (synpred24_Css3())) {s = 15;}

                        else if ( (LA133_29==PIPE) ) {s = 4;}

                         
                        input.seek(index133_29);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA133_34 = input.LA(1);

                         
                        int index133_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index133_34);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA133_10 = input.LA(1);

                         
                        int index133_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA133_10>=WS && LA133_10<=COMMENT)) && (synpred24_Css3())) {s = 13;}

                        else if ( (LA133_10==HASH_SYMBOL) && (synpred24_Css3())) {s = 14;}

                        else if ( (LA133_10==IDENT) ) {s = 30;}

                        else if ( (LA133_10==LBRACE) && (synpred24_Css3())) {s = 19;}

                        else if ( (LA133_10==COMMA||LA133_10==COLON||LA133_10==MINUS||LA133_10==GREATER||(LA133_10>=HASH && LA133_10<=LBRACKET)||LA133_10==STAR||LA133_10==LESS_AND||LA133_10==RBRACKET) && (synpred24_Css3())) {s = 15;}

                        else if ( ((LA133_10>=NOT && LA133_10<=GEN)) ) {s = 4;}

                         
                        input.seek(index133_10);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA133_21 = input.LA(1);

                         
                        int index133_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index133_21);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA133_24 = input.LA(1);

                         
                        int index133_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA133_24>=WS && LA133_24<=COMMENT)) ) {s = 27;}

                        else if ( (LA133_24==LBRACE) && (synpred24_Css3())) {s = 19;}

                        else if ( (LA133_24==HASH_SYMBOL) && (synpred24_Css3())) {s = 14;}

                        else if ( (LA133_24==IDENT) ) {s = 28;}

                        else if ( (LA133_24==STAR) ) {s = 29;}

                        else if ( (LA133_24==COMMA||LA133_24==COLON||LA133_24==MINUS||LA133_24==GREATER||(LA133_24>=HASH && LA133_24<=LBRACKET)||LA133_24==LESS_AND||LA133_24==RBRACKET) && (synpred24_Css3())) {s = 15;}

                        else if ( (LA133_24==PIPE) ) {s = 4;}

                         
                        input.seek(index133_24);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA133_16 = input.LA(1);

                         
                        int index133_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_16==HASH_SYMBOL) ) {s = 17;}

                        else if ( (LA133_16==IDENT) ) {s = 18;}

                        else if ( ((LA133_16>=WS && LA133_16<=COMMENT)) ) {s = 16;}

                        else if ( (LA133_16==LBRACE) && (synpred24_Css3())) {s = 19;}

                        else if ( (LA133_16==STAR) ) {s = 20;}

                        else if ( (LA133_16==LESS_AND) ) {s = 21;}

                        else if ( (LA133_16==GEN||(LA133_16>=DCOLON && LA133_16<=SASS_EXTEND_ONLY_SELECTOR)||LA133_16==PIPE||LA133_16==AT_SIGN) ) {s = 4;}

                        else if ( (LA133_16==HASH) ) {s = 22;}

                        else if ( (LA133_16==DOT) ) {s = 23;}

                        else if ( (LA133_16==LBRACKET) ) {s = 24;}

                        else if ( (LA133_16==COLON) ) {s = 25;}

                        else if ( (LA133_16==COMMA||LA133_16==MINUS||LA133_16==GREATER||LA133_16==RBRACKET) && (synpred24_Css3())) {s = 15;}

                         
                        input.seek(index133_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA133_33 = input.LA(1);

                         
                        int index133_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_33==LBRACE) && (synpred24_Css3())) {s = 19;}

                        else if ( ((LA133_33>=WS && LA133_33<=COMMENT)) ) {s = 33;}

                        else if ( (LA133_33==HASH_SYMBOL) && (synpred24_Css3())) {s = 14;}

                        else if ( (LA133_33==RBRACKET) ) {s = 34;}

                        else if ( ((LA133_33>=OPEQ && LA133_33<=CONTAINS)) ) {s = 4;}

                        else if ( (LA133_33==IDENT||LA133_33==COMMA||LA133_33==COLON||LA133_33==MINUS||LA133_33==GREATER||(LA133_33>=HASH && LA133_33<=LBRACKET)||LA133_33==STAR||LA133_33==LESS_AND) && (synpred24_Css3())) {s = 15;}

                         
                        input.seek(index133_33);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA133_23 = input.LA(1);

                         
                        int index133_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA133_23>=WS && LA133_23<=COMMENT)) && (synpred24_Css3())) {s = 13;}

                        else if ( (LA133_23==LBRACE) && (synpred24_Css3())) {s = 19;}

                        else if ( (LA133_23==HASH_SYMBOL) && (synpred24_Css3())) {s = 14;}

                        else if ( (LA133_23==IDENT) ) {s = 26;}

                        else if ( (LA133_23==COMMA||LA133_23==COLON||LA133_23==MINUS||LA133_23==GREATER||(LA133_23>=HASH && LA133_23<=LBRACKET)||LA133_23==STAR||LA133_23==LESS_AND||LA133_23==RBRACKET) && (synpred24_Css3())) {s = 15;}

                        else if ( (LA133_23==GEN||LA133_23==AT_SIGN) ) {s = 4;}

                         
                        input.seek(index133_23);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA133_7 = input.LA(1);

                         
                        int index133_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index133_7);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA133_3 = input.LA(1);

                         
                        int index133_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index133_3);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA133_5 = input.LA(1);

                         
                        int index133_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index133_5);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA133_30 = input.LA(1);

                         
                        int index133_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index133_30);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA133_17 = input.LA(1);

                         
                        int index133_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_17==LBRACE) && (synpred24_Css3())) {s = 31;}

                        else if ( ((LA133_17>=WS && LA133_17<=COMMENT)) && (synpred24_Css3())) {s = 13;}

                        else if ( (LA133_17==HASH_SYMBOL) && (synpred24_Css3())) {s = 14;}

                        else if ( (LA133_17==IDENT||LA133_17==COMMA||LA133_17==COLON||LA133_17==MINUS||LA133_17==GREATER||(LA133_17>=HASH && LA133_17<=LBRACKET)||LA133_17==STAR||LA133_17==LESS_AND||LA133_17==RBRACKET) && (synpred24_Css3())) {s = 15;}

                        else if ( (LA133_17==NAME||LA133_17==AT_SIGN) ) {s = 4;}

                         
                        input.seek(index133_17);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA133_6 = input.LA(1);

                         
                        int index133_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index133_6);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA133_8 = input.LA(1);

                         
                        int index133_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA133_8>=WS && LA133_8<=COMMENT)) && (synpred24_Css3())) {s = 13;}

                        else if ( (LA133_8==HASH_SYMBOL) && (synpred24_Css3())) {s = 14;}

                        else if ( (LA133_8==IDENT) ) {s = 26;}

                        else if ( (LA133_8==LBRACE) && (synpred24_Css3())) {s = 19;}

                        else if ( (LA133_8==COMMA||LA133_8==COLON||LA133_8==MINUS||LA133_8==GREATER||(LA133_8>=HASH && LA133_8<=LBRACKET)||LA133_8==STAR||LA133_8==LESS_AND||LA133_8==RBRACKET) && (synpred24_Css3())) {s = 15;}

                        else if ( (LA133_8==GEN||LA133_8==AT_SIGN) ) {s = 4;}

                         
                        input.seek(index133_8);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA133_1 = input.LA(1);

                         
                        int index133_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_1==LBRACE) && (synpred24_Css3())) {s = 12;}

                        else if ( ((LA133_1>=WS && LA133_1<=COMMENT)) && (synpred24_Css3())) {s = 13;}

                        else if ( (LA133_1==HASH_SYMBOL) && (synpred24_Css3())) {s = 14;}

                        else if ( (LA133_1==IDENT||LA133_1==COMMA||LA133_1==COLON||LA133_1==MINUS||LA133_1==GREATER||(LA133_1>=HASH && LA133_1<=LBRACKET)||LA133_1==STAR||LA133_1==LESS_AND||LA133_1==RBRACKET) && (synpred24_Css3())) {s = 15;}

                        else if ( (LA133_1==NAME||LA133_1==AT_SIGN) ) {s = 4;}

                         
                        input.seek(index133_1);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA133_22 = input.LA(1);

                         
                        int index133_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 31;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index133_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 133, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA132_eotS =
        "\4\uffff";
    static final String DFA132_eofS =
        "\4\uffff";
    static final String DFA132_minS =
        "\2\13\2\uffff";
    static final String DFA132_maxS =
        "\2\126\2\uffff";
    static final String DFA132_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA132_specialS =
        "\4\uffff}>";
    static final String[] DFA132_transitionS = {
            "\1\3\1\uffff\1\2\106\uffff\3\1",
            "\1\3\1\uffff\1\2\106\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "()* loopback of 660:18: ( ( ws )? COMMA ( ws )? selector )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA140_eotS =
        "\4\uffff";
    static final String DFA140_eofS =
        "\4\uffff";
    static final String DFA140_minS =
        "\2\6\2\uffff";
    static final String DFA140_maxS =
        "\2\156\2\uffff";
    static final String DFA140_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA140_specialS =
        "\4\uffff}>";
    static final String[] DFA140_transitionS = {
            "\1\3\4\uffff\1\2\1\uffff\1\2\5\uffff\1\3\2\uffff\1\3\34\uffff"+
            "\13\3\1\uffff\1\3\24\uffff\3\1\27\uffff\1\3",
            "\1\3\4\uffff\1\2\1\uffff\1\2\5\uffff\1\3\2\uffff\1\3\34\uffff"+
            "\13\3\1\uffff\1\3\24\uffff\3\1\27\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA140_eot = DFA.unpackEncodedString(DFA140_eotS);
    static final short[] DFA140_eof = DFA.unpackEncodedString(DFA140_eofS);
    static final char[] DFA140_min = DFA.unpackEncodedStringToUnsignedChars(DFA140_minS);
    static final char[] DFA140_max = DFA.unpackEncodedStringToUnsignedChars(DFA140_maxS);
    static final short[] DFA140_accept = DFA.unpackEncodedString(DFA140_acceptS);
    static final short[] DFA140_special = DFA.unpackEncodedString(DFA140_specialS);
    static final short[][] DFA140_transition;

    static {
        int numStates = DFA140_transitionS.length;
        DFA140_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA140_transition[i] = DFA.unpackEncodedString(DFA140_transitionS[i]);
        }
    }

    class DFA140 extends DFA {

        public DFA140(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 140;
            this.eot = DFA140_eot;
            this.eof = DFA140_eof;
            this.min = DFA140_min;
            this.max = DFA140_max;
            this.accept = DFA140_accept;
            this.special = DFA140_special;
            this.transition = DFA140_transition;
        }
        public String getDescription() {
            return "()* loopback of 664:49: ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA139_eotS =
        "\4\uffff";
    static final String DFA139_eofS =
        "\4\uffff";
    static final String DFA139_minS =
        "\2\6\2\uffff";
    static final String DFA139_maxS =
        "\2\156\2\uffff";
    static final String DFA139_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA139_specialS =
        "\4\uffff}>";
    static final String[] DFA139_transitionS = {
            "\1\3\14\uffff\1\3\2\uffff\1\3\34\uffff\3\2\10\3\1\uffff\1\3"+
            "\24\uffff\3\1\27\uffff\1\3",
            "\1\3\14\uffff\1\3\2\uffff\1\3\34\uffff\3\2\10\3\1\uffff\1\3"+
            "\24\uffff\3\1\27\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA139_eot = DFA.unpackEncodedString(DFA139_eotS);
    static final short[] DFA139_eof = DFA.unpackEncodedString(DFA139_eofS);
    static final char[] DFA139_min = DFA.unpackEncodedStringToUnsignedChars(DFA139_minS);
    static final char[] DFA139_max = DFA.unpackEncodedStringToUnsignedChars(DFA139_maxS);
    static final short[] DFA139_accept = DFA.unpackEncodedString(DFA139_acceptS);
    static final short[] DFA139_special = DFA.unpackEncodedString(DFA139_specialS);
    static final short[][] DFA139_transition;

    static {
        int numStates = DFA139_transitionS.length;
        DFA139_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA139_transition[i] = DFA.unpackEncodedString(DFA139_transitionS[i]);
        }
    }

    class DFA139 extends DFA {

        public DFA139(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 139;
            this.eot = DFA139_eot;
            this.eof = DFA139_eof;
            this.min = DFA139_min;
            this.max = DFA139_max;
            this.accept = DFA139_accept;
            this.special = DFA139_special;
            this.transition = DFA139_transition;
        }
        public String getDescription() {
            return "664:51: ( ( ( ws )? combinator ( ws )? ) | ( ws )? )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA142_eotS =
        "\56\uffff";
    static final String DFA142_eofS =
        "\56\uffff";
    static final String DFA142_minS =
        "\1\4\1\0\5\uffff\7\0\24\uffff\1\0\13\uffff";
    static final String DFA142_maxS =
        "\1\157\1\0\5\uffff\7\0\24\uffff\1\0\13\uffff";
    static final String DFA142_acceptS =
        "\2\uffff\1\2\52\uffff\1\1";
    static final String DFA142_specialS =
        "\1\uffff\1\0\5\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\24\uffff\1\10\13"+
        "\uffff}>";
    static final String[] DFA142_transitionS = {
            "\3\2\2\uffff\6\2\4\uffff\1\2\1\uffff\1\2\1\15\2\2\3\uffff\1"+
            "\2\1\uffff\23\2\1\uffff\4\2\1\12\1\11\1\13\1\14\1\42\1\7\2\2"+
            "\1\uffff\1\2\6\uffff\2\2\14\uffff\3\1\1\uffff\15\2\11\uffff"+
            "\1\10\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA142_eot = DFA.unpackEncodedString(DFA142_eotS);
    static final short[] DFA142_eof = DFA.unpackEncodedString(DFA142_eofS);
    static final char[] DFA142_min = DFA.unpackEncodedStringToUnsignedChars(DFA142_minS);
    static final char[] DFA142_max = DFA.unpackEncodedStringToUnsignedChars(DFA142_maxS);
    static final short[] DFA142_accept = DFA.unpackEncodedString(DFA142_acceptS);
    static final short[] DFA142_special = DFA.unpackEncodedString(DFA142_specialS);
    static final short[][] DFA142_transition;

    static {
        int numStates = DFA142_transitionS.length;
        DFA142_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA142_transition[i] = DFA.unpackEncodedString(DFA142_transitionS[i]);
        }
    }

    class DFA142 extends DFA {

        public DFA142(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 142;
            this.eot = DFA142_eot;
            this.eof = DFA142_eof;
            this.min = DFA142_min;
            this.max = DFA142_max;
            this.accept = DFA142_accept;
            this.special = DFA142_special;
            this.transition = DFA142_transition;
        }
        public String getDescription() {
            return "()* loopback of 674:17: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA142_1 = input.LA(1);

                         
                        int index142_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index142_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA142_7 = input.LA(1);

                         
                        int index142_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred25_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 45;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 2;}

                         
                        input.seek(index142_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA142_8 = input.LA(1);

                         
                        int index142_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred25_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 45;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 2;}

                         
                        input.seek(index142_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA142_9 = input.LA(1);

                         
                        int index142_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index142_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA142_10 = input.LA(1);

                         
                        int index142_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index142_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA142_11 = input.LA(1);

                         
                        int index142_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index142_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA142_12 = input.LA(1);

                         
                        int index142_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index142_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA142_13 = input.LA(1);

                         
                        int index142_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index142_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA142_34 = input.LA(1);

                         
                        int index142_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index142_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 142, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA144_eotS =
        "\56\uffff";
    static final String DFA144_eofS =
        "\56\uffff";
    static final String DFA144_minS =
        "\1\4\1\0\5\uffff\7\0\24\uffff\1\0\13\uffff";
    static final String DFA144_maxS =
        "\1\157\1\0\5\uffff\7\0\24\uffff\1\0\13\uffff";
    static final String DFA144_acceptS =
        "\2\uffff\1\2\52\uffff\1\1";
    static final String DFA144_specialS =
        "\1\uffff\1\0\5\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\24\uffff\1\10\13"+
        "\uffff}>";
    static final String[] DFA144_transitionS = {
            "\3\2\2\uffff\6\2\4\uffff\1\2\1\uffff\1\2\1\15\2\2\3\uffff\1"+
            "\2\1\uffff\23\2\1\uffff\4\2\1\12\1\11\1\13\1\14\1\42\1\7\2\2"+
            "\1\uffff\1\2\6\uffff\2\2\14\uffff\3\1\1\uffff\15\2\11\uffff"+
            "\1\10\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_eotS);
    static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_eofS);
    static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_minS);
    static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_maxS);
    static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_acceptS);
    static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_specialS);
    static final short[][] DFA144_transition;

    static {
        int numStates = DFA144_transitionS.length;
        DFA144_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA144_transition[i] = DFA.unpackEncodedString(DFA144_transitionS[i]);
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;
        }
        public String getDescription() {
            return "()* loopback of 676:20: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA144_1 = input.LA(1);

                         
                        int index144_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index144_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA144_7 = input.LA(1);

                         
                        int index144_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred26_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 45;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 2;}

                         
                        input.seek(index144_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA144_8 = input.LA(1);

                         
                        int index144_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 45;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 2;}

                         
                        input.seek(index144_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA144_9 = input.LA(1);

                         
                        int index144_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index144_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA144_10 = input.LA(1);

                         
                        int index144_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index144_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA144_11 = input.LA(1);

                         
                        int index144_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index144_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA144_12 = input.LA(1);

                         
                        int index144_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index144_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA144_13 = input.LA(1);

                         
                        int index144_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index144_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA144_34 = input.LA(1);

                         
                        int index144_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index144_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 144, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA162_eotS =
        "\4\uffff";
    static final String DFA162_eofS =
        "\4\uffff";
    static final String DFA162_minS =
        "\2\4\2\uffff";
    static final String DFA162_maxS =
        "\2\157\2\uffff";
    static final String DFA162_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA162_specialS =
        "\4\uffff}>";
    static final String[] DFA162_transitionS = {
            "\3\3\2\uffff\6\3\4\uffff\1\3\1\2\4\3\3\uffff\1\3\1\uffff\23"+
            "\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff\3\1\1\uffff"+
            "\15\3\11\uffff\2\3",
            "\3\3\2\uffff\6\3\4\uffff\1\3\1\2\1\uffff\3\3\3\uffff\1\3\1"+
            "\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff\3"+
            "\1\1\uffff\15\3\11\uffff\2\3",
            "",
            ""
    };

    static final short[] DFA162_eot = DFA.unpackEncodedString(DFA162_eotS);
    static final short[] DFA162_eof = DFA.unpackEncodedString(DFA162_eofS);
    static final char[] DFA162_min = DFA.unpackEncodedStringToUnsignedChars(DFA162_minS);
    static final char[] DFA162_max = DFA.unpackEncodedStringToUnsignedChars(DFA162_maxS);
    static final short[] DFA162_accept = DFA.unpackEncodedString(DFA162_acceptS);
    static final short[] DFA162_special = DFA.unpackEncodedString(DFA162_specialS);
    static final short[][] DFA162_transition;

    static {
        int numStates = DFA162_transitionS.length;
        DFA162_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA162_transition[i] = DFA.unpackEncodedString(DFA162_transitionS[i]);
        }
    }

    class DFA162 extends DFA {

        public DFA162(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 162;
            this.eot = DFA162_eot;
            this.eof = DFA162_eof;
            this.min = DFA162_min;
            this.max = DFA162_max;
            this.accept = DFA162_accept;
            this.special = DFA162_special;
            this.transition = DFA162_transition;
        }
        public String getDescription() {
            return "787:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA175_eotS =
        "\12\uffff";
    static final String DFA175_eofS =
        "\12\uffff";
    static final String DFA175_minS =
        "\1\4\7\0\2\uffff";
    static final String DFA175_maxS =
        "\1\144\7\0\2\uffff";
    static final String DFA175_acceptS =
        "\10\uffff\1\1\1\2";
    static final String DFA175_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\2\uffff}>";
    static final String[] DFA175_transitionS = {
            "\1\6\1\uffff\1\3\2\uffff\2\6\1\uffff\1\6\6\uffff\1\5\3\uffff"+
            "\2\6\3\uffff\1\6\1\uffff\23\6\1\uffff\1\4\3\uffff\1\2\2\4\3"+
            "\uffff\1\1\12\uffff\1\7\20\uffff\15\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA175_eot = DFA.unpackEncodedString(DFA175_eotS);
    static final short[] DFA175_eof = DFA.unpackEncodedString(DFA175_eofS);
    static final char[] DFA175_min = DFA.unpackEncodedStringToUnsignedChars(DFA175_minS);
    static final char[] DFA175_max = DFA.unpackEncodedStringToUnsignedChars(DFA175_maxS);
    static final short[] DFA175_accept = DFA.unpackEncodedString(DFA175_acceptS);
    static final short[] DFA175_special = DFA.unpackEncodedString(DFA175_specialS);
    static final short[][] DFA175_transition;

    static {
        int numStates = DFA175_transitionS.length;
        DFA175_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA175_transition[i] = DFA.unpackEncodedString(DFA175_transitionS[i]);
        }
    }

    class DFA175 extends DFA {

        public DFA175(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 175;
            this.eot = DFA175_eot;
            this.eof = DFA175_eof;
            this.min = DFA175_min;
            this.max = DFA175_max;
            this.accept = DFA175_accept;
            this.special = DFA175_special;
            this.transition = DFA175_transition;
        }
        public String getDescription() {
            return "796:1: propertyDeclaration : ( ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? | {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA175_1 = input.LA(1);

                         
                        int index175_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index175_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA175_2 = input.LA(1);

                         
                        int index175_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index175_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA175_3 = input.LA(1);

                         
                        int index175_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index175_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA175_4 = input.LA(1);

                         
                        int index175_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index175_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA175_5 = input.LA(1);

                         
                        int index175_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index175_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA175_6 = input.LA(1);

                         
                        int index175_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 8;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 9;}

                         
                        input.seek(index175_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA175_7 = input.LA(1);

                         
                        int index175_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 8;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 9;}

                         
                        input.seek(index175_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 175, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA171_eotS =
        "\4\uffff";
    static final String DFA171_eofS =
        "\1\3\3\uffff";
    static final String DFA171_minS =
        "\2\4\2\uffff";
    static final String DFA171_maxS =
        "\2\156\2\uffff";
    static final String DFA171_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA171_specialS =
        "\4\uffff}>";
    static final String[] DFA171_transitionS = {
            "\3\3\2\uffff\4\3\1\uffff\1\3\1\2\3\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\4\3\1\uffff\1\3\1\2\3\uffff\1\3\2\uffff\3\3\3"+
            "\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3"+
            "\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA171_eot = DFA.unpackEncodedString(DFA171_eotS);
    static final short[] DFA171_eof = DFA.unpackEncodedString(DFA171_eofS);
    static final char[] DFA171_min = DFA.unpackEncodedStringToUnsignedChars(DFA171_minS);
    static final char[] DFA171_max = DFA.unpackEncodedStringToUnsignedChars(DFA171_maxS);
    static final short[] DFA171_accept = DFA.unpackEncodedString(DFA171_acceptS);
    static final short[] DFA171_special = DFA.unpackEncodedString(DFA171_specialS);
    static final short[][] DFA171_transition;

    static {
        int numStates = DFA171_transitionS.length;
        DFA171_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA171_transition[i] = DFA.unpackEncodedString(DFA171_transitionS[i]);
        }
    }

    class DFA171 extends DFA {

        public DFA171(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 171;
            this.eot = DFA171_eot;
            this.eof = DFA171_eof;
            this.min = DFA171_min;
            this.max = DFA171_max;
            this.accept = DFA171_accept;
            this.special = DFA171_special;
            this.transition = DFA171_transition;
        }
        public String getDescription() {
            return "798:48: ( ( ws )? prio )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA176_eotS =
        "\34\uffff";
    static final String DFA176_eofS =
        "\34\uffff";
    static final String DFA176_minS =
        "\1\4\1\uffff\27\0\3\uffff";
    static final String DFA176_maxS =
        "\1\144\1\uffff\27\0\3\uffff";
    static final String DFA176_acceptS =
        "\1\uffff\1\1\31\uffff\1\2";
    static final String DFA176_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\3\uffff}>";
    static final String[] DFA176_transitionS = {
            "\1\25\1\uffff\1\3\1\17\1\23\2\25\1\uffff\1\25\2\uffff\1\1\2"+
            "\uffff\1\1\1\22\1\1\2\uffff\2\25\3\uffff\1\25\1\5\23\25\1\uffff"+
            "\2\2\1\uffff\1\20\1\27\1\24\17\uffff\1\26\1\4\1\6\1\7\1\10\1"+
            "\11\1\12\1\13\1\14\1\15\1\16\1\21\1\30\4\uffff\15\25",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA176_eot = DFA.unpackEncodedString(DFA176_eotS);
    static final short[] DFA176_eof = DFA.unpackEncodedString(DFA176_eofS);
    static final char[] DFA176_min = DFA.unpackEncodedStringToUnsignedChars(DFA176_minS);
    static final char[] DFA176_max = DFA.unpackEncodedStringToUnsignedChars(DFA176_maxS);
    static final short[] DFA176_accept = DFA.unpackEncodedString(DFA176_acceptS);
    static final short[] DFA176_special = DFA.unpackEncodedString(DFA176_specialS);
    static final short[][] DFA176_transition;

    static {
        int numStates = DFA176_transitionS.length;
        DFA176_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA176_transition[i] = DFA.unpackEncodedString(DFA176_transitionS[i]);
        }
    }

    class DFA176 extends DFA {

        public DFA176(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 176;
            this.eot = DFA176_eot;
            this.eof = DFA176_eof;
            this.min = DFA176_min;
            this.max = DFA176_max;
            this.accept = DFA176_accept;
            this.special = DFA176_special;
            this.transition = DFA176_transition;
        }
        public String getDescription() {
            return "809:1: cp_propertyValue : ({...}? cp_expression_list | propertyValue );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA176_2 = input.LA(1);

                         
                        int index176_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index176_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA176_3 = input.LA(1);

                         
                        int index176_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index176_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA176_4 = input.LA(1);

                         
                        int index176_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index176_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA176_5 = input.LA(1);

                         
                        int index176_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index176_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA176_6 = input.LA(1);

                         
                        int index176_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index176_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA176_7 = input.LA(1);

                         
                        int index176_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index176_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA176_8 = input.LA(1);

                         
                        int index176_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index176_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA176_9 = input.LA(1);

                         
                        int index176_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index176_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA176_10 = input.LA(1);

                         
                        int index176_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index176_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA176_11 = input.LA(1);

                         
                        int index176_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index176_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA176_12 = input.LA(1);

                         
                        int index176_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index176_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA176_13 = input.LA(1);

                         
                        int index176_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index176_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA176_14 = input.LA(1);

                         
                        int index176_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index176_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA176_15 = input.LA(1);

                         
                        int index176_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index176_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA176_16 = input.LA(1);

                         
                        int index176_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 1;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 27;}

                         
                        input.seek(index176_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA176_17 = input.LA(1);

                         
                        int index176_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 1;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 27;}

                         
                        input.seek(index176_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA176_18 = input.LA(1);

                         
                        int index176_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index176_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA176_19 = input.LA(1);

                         
                        int index176_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index176_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA176_20 = input.LA(1);

                         
                        int index176_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index176_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA176_21 = input.LA(1);

                         
                        int index176_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 1;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 27;}

                         
                        input.seek(index176_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA176_22 = input.LA(1);

                         
                        int index176_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 1;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 27;}

                         
                        input.seek(index176_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA176_23 = input.LA(1);

                         
                        int index176_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 27;}

                         
                        input.seek(index176_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA176_24 = input.LA(1);

                         
                        int index176_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 27;}

                         
                        input.seek(index176_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 176, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA181_eotS =
        "\77\uffff";
    static final String DFA181_eofS =
        "\1\2\76\uffff";
    static final String DFA181_minS =
        "\1\4\1\0\5\uffff\2\0\1\uffff\15\0\2\uffff\1\0\4\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\11\0\4\uffff\1\0\17\uffff";
    static final String DFA181_maxS =
        "\1\156\1\0\5\uffff\2\0\1\uffff\15\0\2\uffff\1\0\4\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\11\0\4\uffff\1\0\17\uffff";
    static final String DFA181_acceptS =
        "\2\uffff\1\2\53\uffff\1\1\1\uffff\17\1";
    static final String DFA181_specialS =
        "\1\0\1\1\5\uffff\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\2\uffff\1\21\4\uffff\1\22\1\uffff"+
        "\1\23\1\uffff\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\4\uffff"+
        "\1\35\17\uffff}>";
    static final String[] DFA181_transitionS = {
            "\1\52\1\2\1\13\1\73\1\75\1\52\1\51\1\40\1\46\3\2\3\uffff\1\15"+
            "\1\uffff\2\2\1\45\1\43\3\uffff\1\44\1\61\1\26\1\47\1\42\20\52"+
            "\1\56\1\36\1\31\1\2\1\57\1\12\1\14\6\2\1\uffff\1\2\6\uffff\1"+
            "\2\1\17\1\60\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1"+
            "\74\1\76\3\1\1\uffff\1\25\1\7\1\10\1\16\2\20\1\21\1\52\1\22"+
            "\1\52\1\50\1\23\1\24\11\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA181_eot = DFA.unpackEncodedString(DFA181_eotS);
    static final short[] DFA181_eof = DFA.unpackEncodedString(DFA181_eofS);
    static final char[] DFA181_min = DFA.unpackEncodedStringToUnsignedChars(DFA181_minS);
    static final char[] DFA181_max = DFA.unpackEncodedStringToUnsignedChars(DFA181_maxS);
    static final short[] DFA181_accept = DFA.unpackEncodedString(DFA181_acceptS);
    static final short[] DFA181_special = DFA.unpackEncodedString(DFA181_specialS);
    static final short[][] DFA181_transition;

    static {
        int numStates = DFA181_transitionS.length;
        DFA181_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA181_transition[i] = DFA.unpackEncodedString(DFA181_transitionS[i]);
        }
    }

    class DFA181 extends DFA {

        public DFA181(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 181;
            this.eot = DFA181_eot;
            this.eof = DFA181_eof;
            this.min = DFA181_min;
            this.max = DFA181_max;
            this.accept = DFA181_accept;
            this.special = DFA181_special;
            this.transition = DFA181_transition;
        }
        public String getDescription() {
            return "()* loopback of 865:12: ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA181_0 = input.LA(1);

                         
                        int index181_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA181_0>=WS && LA181_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA181_0==EOF||LA181_0==SEMI||(LA181_0>=LBRACE && LA181_0<=IMPORTANT_SYM)||(LA181_0>=RPAREN && LA181_0<=COLON)||LA181_0==GREATER||(LA181_0>=DOT && LA181_0<=PIPE)||LA181_0==LESS_AND||LA181_0==RBRACKET||LA181_0==AT_SIGN) ) {s = 2;}

                        else if ( (LA181_0==SASS_MIXIN) ) {s = 7;}

                        else if ( (LA181_0==SASS_INCLUDE) ) {s = 8;}

                        else if ( (LA181_0==HASH_SYMBOL) ) {s = 10;}

                        else if ( (LA181_0==IDENT) ) {s = 11;}

                        else if ( (LA181_0==HASH) ) {s = 12;}

                        else if ( (LA181_0==GEN) ) {s = 13;}

                        else if ( (LA181_0==SASS_EXTEND) ) {s = 14;}

                        else if ( (LA181_0==SASS_VAR) ) {s = 15;}

                        else if ( ((LA181_0>=SASS_DEBUG && LA181_0<=SASS_WARN)) ) {s = 16;}

                        else if ( (LA181_0==SASS_IF) ) {s = 17;}

                        else if ( (LA181_0==SASS_FOR) ) {s = 18;}

                        else if ( (LA181_0==SASS_EACH) ) {s = 19;}

                        else if ( (LA181_0==SASS_WHILE) ) {s = 20;}

                        else if ( (LA181_0==SASS_CONTENT) ) {s = 21;}

                        else if ( (LA181_0==PAGE_SYM) ) {s = 22;}

                        else if ( (LA181_0==PLUS) ) {s = 25;}

                        else if ( (LA181_0==MINUS) ) {s = 30;}

                        else if ( (LA181_0==COMMA) ) {s = 32;}

                        else if ( (LA181_0==FONT_FACE_SYM) ) {s = 34;}

                        else if ( (LA181_0==MOZ_DOCUMENT_SYM) ) {s = 35;}

                        else if ( (LA181_0==WEBKIT_KEYFRAMES_SYM) ) {s = 36;}

                        else if ( (LA181_0==AT_IDENT) ) {s = 37;}

                        else if ( (LA181_0==MEDIA_SYM) ) {s = 38;}

                        else if ( (LA181_0==COUNTER_STYLE_SYM) ) {s = 39;}

                        else if ( (LA181_0==SASS_RETURN) ) {s = 40;}

                        else if ( (LA181_0==IMPORT_SYM) ) {s = 41;}

                        else if ( (LA181_0==NAMESPACE_SYM||LA181_0==CHARSET_SYM||(LA181_0>=TOPLEFTCORNER_SYM && LA181_0<=RIGHTBOTTOM_SYM)||LA181_0==SASS_ELSE||LA181_0==SASS_FUNCTION) ) {s = 42;}

                        else if ( (LA181_0==SOLIDUS) && (synpred28_Css3())) {s = 46;}

                        else if ( (LA181_0==TILDE) ) {s = 47;}

                        else if ( (LA181_0==NUMBER) && (synpred28_Css3())) {s = 48;}

                        else if ( (LA181_0==PERCENTAGE) && (synpred28_Css3())) {s = 49;}

                        else if ( (LA181_0==LENGTH) && (synpred28_Css3())) {s = 50;}

                        else if ( (LA181_0==EMS) && (synpred28_Css3())) {s = 51;}

                        else if ( (LA181_0==REM) && (synpred28_Css3())) {s = 52;}

                        else if ( (LA181_0==EXS) && (synpred28_Css3())) {s = 53;}

                        else if ( (LA181_0==ANGLE) && (synpred28_Css3())) {s = 54;}

                        else if ( (LA181_0==TIME) && (synpred28_Css3())) {s = 55;}

                        else if ( (LA181_0==FREQ) && (synpred28_Css3())) {s = 56;}

                        else if ( (LA181_0==RESOLUTION) && (synpred28_Css3())) {s = 57;}

                        else if ( (LA181_0==DIMENSION) && (synpred28_Css3())) {s = 58;}

                        else if ( (LA181_0==STRING) && (synpred28_Css3())) {s = 59;}

                        else if ( (LA181_0==LESS_JS_STRING) && (synpred28_Css3())) {s = 60;}

                        else if ( (LA181_0==URI) && (synpred28_Css3())) {s = 61;}

                        else if ( (LA181_0==PERCENTAGE_SYMBOL) && (synpred28_Css3())) {s = 62;}

                         
                        input.seek(index181_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA181_1 = input.LA(1);

                         
                        int index181_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index181_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA181_7 = input.LA(1);

                         
                        int index181_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index181_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA181_8 = input.LA(1);

                         
                        int index181_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}

                         
                        input.seek(index181_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA181_10 = input.LA(1);

                         
                        int index181_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index181_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA181_11 = input.LA(1);

                         
                        int index181_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index181_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA181_12 = input.LA(1);

                         
                        int index181_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index181_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA181_13 = input.LA(1);

                         
                        int index181_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index181_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA181_14 = input.LA(1);

                         
                        int index181_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index181_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA181_15 = input.LA(1);

                         
                        int index181_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}

                         
                        input.seek(index181_15);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA181_16 = input.LA(1);

                         
                        int index181_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index181_16);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA181_17 = input.LA(1);

                         
                        int index181_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index181_17);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA181_18 = input.LA(1);

                         
                        int index181_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index181_18);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA181_19 = input.LA(1);

                         
                        int index181_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index181_19);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA181_20 = input.LA(1);

                         
                        int index181_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index181_20);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA181_21 = input.LA(1);

                         
                        int index181_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index181_21);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA181_22 = input.LA(1);

                         
                        int index181_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index181_22);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA181_25 = input.LA(1);

                         
                        int index181_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index181_25);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA181_30 = input.LA(1);

                         
                        int index181_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index181_30);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA181_32 = input.LA(1);

                         
                        int index181_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index181_32);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA181_34 = input.LA(1);

                         
                        int index181_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index181_34);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA181_35 = input.LA(1);

                         
                        int index181_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index181_35);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA181_36 = input.LA(1);

                         
                        int index181_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index181_36);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA181_37 = input.LA(1);

                         
                        int index181_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index181_37);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA181_38 = input.LA(1);

                         
                        int index181_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index181_38);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA181_39 = input.LA(1);

                         
                        int index181_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index181_39);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA181_40 = input.LA(1);

                         
                        int index181_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index181_40);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA181_41 = input.LA(1);

                         
                        int index181_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index181_41);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA181_42 = input.LA(1);

                         
                        int index181_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred28_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index181_42);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA181_47 = input.LA(1);

                         
                        int index181_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred28_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index181_47);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 181, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA180_eotS =
        "\5\uffff";
    static final String DFA180_eofS =
        "\5\uffff";
    static final String DFA180_minS =
        "\2\4\3\uffff";
    static final String DFA180_maxS =
        "\2\144\3\uffff";
    static final String DFA180_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA180_specialS =
        "\5\uffff}>";
    static final String[] DFA180_transitionS = {
            "\1\3\1\uffff\5\3\1\2\1\3\6\uffff\1\3\3\uffff\2\3\3\uffff\25"+
            "\3\1\2\2\3\1\uffff\3\3\17\uffff\15\3\3\1\1\uffff\15\3",
            "\1\4\1\uffff\5\4\1\2\1\4\6\uffff\1\4\3\uffff\2\4\3\uffff\25"+
            "\4\1\2\2\4\1\uffff\3\4\17\uffff\15\4\3\1\1\uffff\15\4",
            "",
            "",
            ""
    };

    static final short[] DFA180_eot = DFA.unpackEncodedString(DFA180_eotS);
    static final short[] DFA180_eof = DFA.unpackEncodedString(DFA180_eofS);
    static final char[] DFA180_min = DFA.unpackEncodedStringToUnsignedChars(DFA180_minS);
    static final char[] DFA180_max = DFA.unpackEncodedStringToUnsignedChars(DFA180_maxS);
    static final short[] DFA180_accept = DFA.unpackEncodedString(DFA180_acceptS);
    static final short[] DFA180_special = DFA.unpackEncodedString(DFA180_specialS);
    static final short[][] DFA180_transition;

    static {
        int numStates = DFA180_transitionS.length;
        DFA180_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA180_transition[i] = DFA.unpackEncodedString(DFA180_transitionS[i]);
        }
    }

    class DFA180 extends DFA {

        public DFA180(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 180;
            this.eot = DFA180_eot;
            this.eof = DFA180_eof;
            this.min = DFA180_min;
            this.max = DFA180_max;
            this.accept = DFA180_accept;
            this.special = DFA180_special;
            this.transition = DFA180_transition;
        }
        public String getDescription() {
            return "865:66: ( ws | ( ( ws )? operator ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA184_eotS =
        "\31\uffff";
    static final String DFA184_eofS =
        "\31\uffff";
    static final String DFA184_minS =
        "\1\4\1\0\27\uffff";
    static final String DFA184_maxS =
        "\1\144\1\0\27\uffff";
    static final String DFA184_acceptS =
        "\2\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
        "\1\17\1\20\1\21\1\22\1\23\1\24\1\uffff\1\25\1\26\1\1\1\2";
    static final String DFA184_specialS =
        "\1\uffff\1\0\27\uffff}>";
    static final String[] DFA184_transitionS = {
            "\1\23\1\uffff\1\1\1\15\1\21\2\23\1\uffff\1\23\6\uffff\1\20\3"+
            "\uffff\2\23\3\uffff\1\23\1\3\23\23\4\uffff\1\16\1\25\1\22\17"+
            "\uffff\1\23\1\2\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\17"+
            "\1\26\4\uffff\15\23",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA184_eot = DFA.unpackEncodedString(DFA184_eotS);
    static final short[] DFA184_eof = DFA.unpackEncodedString(DFA184_eofS);
    static final char[] DFA184_min = DFA.unpackEncodedStringToUnsignedChars(DFA184_minS);
    static final char[] DFA184_max = DFA.unpackEncodedStringToUnsignedChars(DFA184_maxS);
    static final short[] DFA184_accept = DFA.unpackEncodedString(DFA184_acceptS);
    static final short[] DFA184_special = DFA.unpackEncodedString(DFA184_specialS);
    static final short[][] DFA184_transition;

    static {
        int numStates = DFA184_transitionS.length;
        DFA184_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA184_transition[i] = DFA.unpackEncodedString(DFA184_transitionS[i]);
        }
    }

    class DFA184 extends DFA {

        public DFA184(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 184;
            this.eot = DFA184_eot;
            this.eof = DFA184_eof;
            this.min = DFA184_min;
            this.max = DFA184_max;
            this.accept = DFA184_accept;
            this.special = DFA184_special;
            this.transition = DFA184_transition;
        }
        public String getDescription() {
            return "871:5: ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | {...}? TILDE STRING | {...}? LESS_JS_STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var | {...}? cp_term_symbol )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA184_1 = input.LA(1);

                         
                        int index184_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index184_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 184, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA192_eotS =
        "\4\uffff";
    static final String DFA192_eofS =
        "\4\uffff";
    static final String DFA192_minS =
        "\2\13\2\uffff";
    static final String DFA192_maxS =
        "\2\126\2\uffff";
    static final String DFA192_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA192_specialS =
        "\4\uffff}>";
    static final String[] DFA192_transitionS = {
            "\1\3\11\uffff\1\2\76\uffff\3\1",
            "\1\3\11\uffff\1\2\76\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA192_eot = DFA.unpackEncodedString(DFA192_eotS);
    static final short[] DFA192_eof = DFA.unpackEncodedString(DFA192_eofS);
    static final char[] DFA192_min = DFA.unpackEncodedStringToUnsignedChars(DFA192_minS);
    static final char[] DFA192_max = DFA.unpackEncodedStringToUnsignedChars(DFA192_maxS);
    static final short[] DFA192_accept = DFA.unpackEncodedString(DFA192_acceptS);
    static final short[] DFA192_special = DFA.unpackEncodedString(DFA192_specialS);
    static final short[][] DFA192_transition;

    static {
        int numStates = DFA192_transitionS.length;
        DFA192_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA192_transition[i] = DFA.unpackEncodedString(DFA192_transitionS[i]);
        }
    }

    class DFA192 extends DFA {

        public DFA192(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 192;
            this.eot = DFA192_eot;
            this.eof = DFA192_eof;
            this.min = DFA192_min;
            this.max = DFA192_max;
            this.accept = DFA192_accept;
            this.special = DFA192_special;
            this.transition = DFA192_transition;
        }
        public String getDescription() {
            return "()* loopback of 928:17: ( ( ws )? COMMA ( ws )? fnAttribute )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA196_eotS =
        "\35\uffff";
    static final String DFA196_eofS =
        "\35\uffff";
    static final String DFA196_minS =
        "\1\4\3\0\1\uffff\24\0\4\uffff";
    static final String DFA196_maxS =
        "\1\144\3\0\1\uffff\24\0\4\uffff";
    static final String DFA196_acceptS =
        "\4\uffff\1\2\26\uffff\1\1\1\3";
    static final String DFA196_specialS =
        "\1\uffff\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\4\uffff}>";
    static final String[] DFA196_transitionS = {
            "\1\2\1\uffff\1\1\1\21\1\25\2\2\1\uffff\1\2\2\uffff\1\4\2\uffff"+
            "\1\4\1\24\1\4\2\uffff\2\2\3\uffff\1\2\1\7\23\2\1\uffff\2\5\1"+
            "\uffff\1\22\1\27\1\26\17\uffff\1\3\1\6\1\10\1\11\1\12\1\13\1"+
            "\14\1\15\1\16\1\17\1\20\1\23\1\30\4\uffff\15\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA196_eot = DFA.unpackEncodedString(DFA196_eotS);
    static final short[] DFA196_eof = DFA.unpackEncodedString(DFA196_eofS);
    static final char[] DFA196_min = DFA.unpackEncodedStringToUnsignedChars(DFA196_minS);
    static final char[] DFA196_max = DFA.unpackEncodedStringToUnsignedChars(DFA196_maxS);
    static final short[] DFA196_accept = DFA.unpackEncodedString(DFA196_acceptS);
    static final short[] DFA196_special = DFA.unpackEncodedString(DFA196_specialS);
    static final short[][] DFA196_transition;

    static {
        int numStates = DFA196_transitionS.length;
        DFA196_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA196_transition[i] = DFA.unpackEncodedString(DFA196_transitionS[i]);
        }
    }

    class DFA196 extends DFA {

        public DFA196(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 196;
            this.eot = DFA196_eot;
            this.eof = DFA196_eof;
            this.min = DFA196_min;
            this.max = DFA196_max;
            this.accept = DFA196_accept;
            this.special = DFA196_special;
            this.transition = DFA196_transition;
        }
        public String getDescription() {
            return "931:1: fnAttribute : ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | {...}? cp_expression | expression );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA196_1 = input.LA(1);

                         
                        int index196_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_Css3()) ) {s = 27;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index196_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA196_2 = input.LA(1);

                         
                        int index196_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 27;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 4;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 28;}

                         
                        input.seek(index196_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA196_3 = input.LA(1);

                         
                        int index196_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 27;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 4;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 28;}

                         
                        input.seek(index196_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA196_5 = input.LA(1);

                         
                        int index196_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index196_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA196_6 = input.LA(1);

                         
                        int index196_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index196_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA196_7 = input.LA(1);

                         
                        int index196_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index196_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA196_8 = input.LA(1);

                         
                        int index196_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index196_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA196_9 = input.LA(1);

                         
                        int index196_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index196_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA196_10 = input.LA(1);

                         
                        int index196_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index196_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA196_11 = input.LA(1);

                         
                        int index196_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index196_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA196_12 = input.LA(1);

                         
                        int index196_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index196_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA196_13 = input.LA(1);

                         
                        int index196_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index196_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA196_14 = input.LA(1);

                         
                        int index196_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index196_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA196_15 = input.LA(1);

                         
                        int index196_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index196_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA196_16 = input.LA(1);

                         
                        int index196_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index196_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA196_17 = input.LA(1);

                         
                        int index196_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index196_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA196_18 = input.LA(1);

                         
                        int index196_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 4;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 28;}

                         
                        input.seek(index196_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA196_19 = input.LA(1);

                         
                        int index196_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 4;}

                        else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 28;}

                         
                        input.seek(index196_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA196_20 = input.LA(1);

                         
                        int index196_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index196_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA196_21 = input.LA(1);

                         
                        int index196_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index196_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA196_22 = input.LA(1);

                         
                        int index196_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index196_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA196_23 = input.LA(1);

                         
                        int index196_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 28;}

                         
                        input.seek(index196_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA196_24 = input.LA(1);

                         
                        int index196_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 28;}

                         
                        input.seek(index196_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 196, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA203_eotS =
        "\33\uffff";
    static final String DFA203_eofS =
        "\33\uffff";
    static final String DFA203_minS =
        "\1\4\27\0\3\uffff";
    static final String DFA203_maxS =
        "\1\144\27\0\3\uffff";
    static final String DFA203_acceptS =
        "\30\uffff\1\2\1\uffff\1\1";
    static final String DFA203_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\3\uffff}>";
    static final String[] DFA203_transitionS = {
            "\1\24\1\uffff\1\2\1\16\1\22\2\24\1\uffff\1\24\2\uffff\1\30\3"+
            "\uffff\1\21\1\30\2\uffff\2\24\3\uffff\1\24\1\4\23\24\1\uffff"+
            "\2\1\1\uffff\1\17\1\26\1\23\17\uffff\1\25\1\3\1\5\1\6\1\7\1"+
            "\10\1\11\1\12\1\13\1\14\1\15\1\20\1\27\4\uffff\15\24",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA203_eot = DFA.unpackEncodedString(DFA203_eotS);
    static final short[] DFA203_eof = DFA.unpackEncodedString(DFA203_eofS);
    static final char[] DFA203_min = DFA.unpackEncodedStringToUnsignedChars(DFA203_minS);
    static final char[] DFA203_max = DFA.unpackEncodedStringToUnsignedChars(DFA203_maxS);
    static final short[] DFA203_accept = DFA.unpackEncodedString(DFA203_acceptS);
    static final short[] DFA203_special = DFA.unpackEncodedString(DFA203_specialS);
    static final short[][] DFA203_transition;

    static {
        int numStates = DFA203_transitionS.length;
        DFA203_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA203_transition[i] = DFA.unpackEncodedString(DFA203_transitionS[i]);
        }
    }

    class DFA203 extends DFA {

        public DFA203(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 203;
            this.eot = DFA203_eot;
            this.eof = DFA203_eof;
            this.min = DFA203_min;
            this.max = DFA203_max;
            this.accept = DFA203_accept;
            this.special = DFA203_special;
            this.transition = DFA203_transition;
        }
        public String getDescription() {
            return "944:1: fnAttributeValue : ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )* | {...}? cp_math_expression );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA203_1 = input.LA(1);

                         
                        int index203_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index203_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA203_2 = input.LA(1);

                         
                        int index203_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index203_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA203_3 = input.LA(1);

                         
                        int index203_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index203_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA203_4 = input.LA(1);

                         
                        int index203_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index203_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA203_5 = input.LA(1);

                         
                        int index203_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index203_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA203_6 = input.LA(1);

                         
                        int index203_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index203_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA203_7 = input.LA(1);

                         
                        int index203_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index203_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA203_8 = input.LA(1);

                         
                        int index203_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index203_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA203_9 = input.LA(1);

                         
                        int index203_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index203_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA203_10 = input.LA(1);

                         
                        int index203_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index203_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA203_11 = input.LA(1);

                         
                        int index203_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index203_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA203_12 = input.LA(1);

                         
                        int index203_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index203_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA203_13 = input.LA(1);

                         
                        int index203_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index203_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA203_14 = input.LA(1);

                         
                        int index203_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index203_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA203_15 = input.LA(1);

                         
                        int index203_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 26;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 24;}

                         
                        input.seek(index203_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA203_16 = input.LA(1);

                         
                        int index203_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 26;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 24;}

                         
                        input.seek(index203_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA203_17 = input.LA(1);

                         
                        int index203_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index203_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA203_18 = input.LA(1);

                         
                        int index203_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index203_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA203_19 = input.LA(1);

                         
                        int index203_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index203_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA203_20 = input.LA(1);

                         
                        int index203_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 26;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 24;}

                         
                        input.seek(index203_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA203_21 = input.LA(1);

                         
                        int index203_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 26;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 24;}

                         
                        input.seek(index203_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA203_22 = input.LA(1);

                         
                        int index203_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index203_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA203_23 = input.LA(1);

                         
                        int index203_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 26;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index203_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 203, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA202_eotS =
        "\41\uffff";
    static final String DFA202_eofS =
        "\41\uffff";
    static final String DFA202_minS =
        "\2\4\37\uffff";
    static final String DFA202_maxS =
        "\2\144\37\uffff";
    static final String DFA202_acceptS =
        "\2\uffff\1\2\36\1";
    static final String DFA202_specialS =
        "\1\0\1\1\37\uffff}>";
    static final String[] DFA202_transitionS = {
            "\1\27\1\uffff\1\5\1\21\1\25\2\27\1\2\1\27\6\uffff\1\24\1\uffff"+
            "\1\2\1\uffff\2\27\3\uffff\1\27\1\7\23\27\1\3\2\4\1\uffff\1\22"+
            "\1\31\1\26\17\uffff\1\30\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1"+
            "\16\1\17\1\20\1\23\1\32\3\1\1\uffff\15\27",
            "\1\35\1\uffff\1\5\1\21\1\25\2\35\1\2\1\35\6\uffff\1\24\1\uffff"+
            "\1\2\1\uffff\2\35\3\uffff\1\35\1\7\23\35\1\3\2\4\1\uffff\1\33"+
            "\1\37\1\26\17\uffff\1\36\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1"+
            "\16\1\17\1\20\1\34\1\40\3\1\1\uffff\15\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA202_eot = DFA.unpackEncodedString(DFA202_eotS);
    static final short[] DFA202_eof = DFA.unpackEncodedString(DFA202_eofS);
    static final char[] DFA202_min = DFA.unpackEncodedStringToUnsignedChars(DFA202_minS);
    static final char[] DFA202_max = DFA.unpackEncodedStringToUnsignedChars(DFA202_maxS);
    static final short[] DFA202_accept = DFA.unpackEncodedString(DFA202_acceptS);
    static final short[] DFA202_special = DFA.unpackEncodedString(DFA202_specialS);
    static final short[][] DFA202_transition;

    static {
        int numStates = DFA202_transitionS.length;
        DFA202_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA202_transition[i] = DFA.unpackEncodedString(DFA202_transitionS[i]);
        }
    }

    class DFA202 extends DFA {

        public DFA202(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 202;
            this.eot = DFA202_eot;
            this.eof = DFA202_eof;
            this.min = DFA202_min;
            this.max = DFA202_max;
            this.accept = DFA202_accept;
            this.special = DFA202_special;
            this.transition = DFA202_transition;
        }
        public String getDescription() {
            return "()* loopback of 946:18: ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA202_0 = input.LA(1);

                         
                        int index202_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA202_0>=WS && LA202_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA202_0==COMMA||LA202_0==RPAREN) ) {s = 2;}

                        else if ( (LA202_0==SOLIDUS) && (synpred31_Css3())) {s = 3;}

                        else if ( ((LA202_0>=MINUS && LA202_0<=PLUS)) && (synpred31_Css3())) {s = 4;}

                        else if ( (LA202_0==IDENT) && (synpred31_Css3())) {s = 5;}

                        else if ( (LA202_0==NUMBER) && (synpred31_Css3())) {s = 6;}

                        else if ( (LA202_0==PERCENTAGE) && (synpred31_Css3())) {s = 7;}

                        else if ( (LA202_0==LENGTH) && (synpred31_Css3())) {s = 8;}

                        else if ( (LA202_0==EMS) && (synpred31_Css3())) {s = 9;}

                        else if ( (LA202_0==REM) && (synpred31_Css3())) {s = 10;}

                        else if ( (LA202_0==EXS) && (synpred31_Css3())) {s = 11;}

                        else if ( (LA202_0==ANGLE) && (synpred31_Css3())) {s = 12;}

                        else if ( (LA202_0==TIME) && (synpred31_Css3())) {s = 13;}

                        else if ( (LA202_0==FREQ) && (synpred31_Css3())) {s = 14;}

                        else if ( (LA202_0==RESOLUTION) && (synpred31_Css3())) {s = 15;}

                        else if ( (LA202_0==DIMENSION) && (synpred31_Css3())) {s = 16;}

                        else if ( (LA202_0==STRING) && (synpred31_Css3())) {s = 17;}

                        else if ( (LA202_0==TILDE) && (synpred31_Css3())) {s = 18;}

                        else if ( (LA202_0==LESS_JS_STRING) && (synpred31_Css3())) {s = 19;}

                        else if ( (LA202_0==GEN) && (synpred31_Css3())) {s = 20;}

                        else if ( (LA202_0==URI) && (synpred31_Css3())) {s = 21;}

                        else if ( (LA202_0==HASH) && (synpred31_Css3())) {s = 22;}

                        else if ( (LA202_0==NAMESPACE_SYM||(LA202_0>=CHARSET_SYM && LA202_0<=IMPORT_SYM)||LA202_0==MEDIA_SYM||(LA202_0>=AT_IDENT && LA202_0<=MOZ_DOCUMENT_SYM)||LA202_0==WEBKIT_KEYFRAMES_SYM||(LA202_0>=PAGE_SYM && LA202_0<=RIGHTBOTTOM_SYM)||(LA202_0>=SASS_CONTENT && LA202_0<=SASS_WHILE)) && (synpred31_Css3())) {s = 23;}

                        else if ( (LA202_0==SASS_VAR) && (synpred31_Css3())) {s = 24;}

                        else if ( (LA202_0==HASH_SYMBOL) && (synpred31_Css3())) {s = 25;}

                        else if ( (LA202_0==PERCENTAGE_SYMBOL) && (synpred31_Css3())) {s = 26;}

                         
                        input.seek(index202_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA202_1 = input.LA(1);

                         
                        int index202_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA202_1==COMMA||LA202_1==RPAREN) ) {s = 2;}

                        else if ( ((LA202_1>=WS && LA202_1<=COMMENT)) ) {s = 1;}

                        else if ( ((LA202_1>=MINUS && LA202_1<=PLUS)) && (synpred31_Css3())) {s = 4;}

                        else if ( (LA202_1==IDENT) && (synpred31_Css3())) {s = 5;}

                        else if ( (LA202_1==NUMBER) && (synpred31_Css3())) {s = 6;}

                        else if ( (LA202_1==PERCENTAGE) && (synpred31_Css3())) {s = 7;}

                        else if ( (LA202_1==LENGTH) && (synpred31_Css3())) {s = 8;}

                        else if ( (LA202_1==EMS) && (synpred31_Css3())) {s = 9;}

                        else if ( (LA202_1==REM) && (synpred31_Css3())) {s = 10;}

                        else if ( (LA202_1==EXS) && (synpred31_Css3())) {s = 11;}

                        else if ( (LA202_1==ANGLE) && (synpred31_Css3())) {s = 12;}

                        else if ( (LA202_1==TIME) && (synpred31_Css3())) {s = 13;}

                        else if ( (LA202_1==FREQ) && (synpred31_Css3())) {s = 14;}

                        else if ( (LA202_1==RESOLUTION) && (synpred31_Css3())) {s = 15;}

                        else if ( (LA202_1==DIMENSION) && (synpred31_Css3())) {s = 16;}

                        else if ( (LA202_1==STRING) && (synpred31_Css3())) {s = 17;}

                        else if ( (LA202_1==TILDE) && (synpred31_Css3())) {s = 27;}

                        else if ( (LA202_1==LESS_JS_STRING) && (synpred31_Css3())) {s = 28;}

                        else if ( (LA202_1==GEN) && (synpred31_Css3())) {s = 20;}

                        else if ( (LA202_1==URI) && (synpred31_Css3())) {s = 21;}

                        else if ( (LA202_1==HASH) && (synpred31_Css3())) {s = 22;}

                        else if ( (LA202_1==NAMESPACE_SYM||(LA202_1>=CHARSET_SYM && LA202_1<=IMPORT_SYM)||LA202_1==MEDIA_SYM||(LA202_1>=AT_IDENT && LA202_1<=MOZ_DOCUMENT_SYM)||LA202_1==WEBKIT_KEYFRAMES_SYM||(LA202_1>=PAGE_SYM && LA202_1<=RIGHTBOTTOM_SYM)||(LA202_1>=SASS_CONTENT && LA202_1<=SASS_WHILE)) && (synpred31_Css3())) {s = 29;}

                        else if ( (LA202_1==SASS_VAR) && (synpred31_Css3())) {s = 30;}

                        else if ( (LA202_1==HASH_SYMBOL) && (synpred31_Css3())) {s = 31;}

                        else if ( (LA202_1==PERCENTAGE_SYMBOL) && (synpred31_Css3())) {s = 32;}

                        else if ( (LA202_1==SOLIDUS) && (synpred31_Css3())) {s = 3;}

                         
                        input.seek(index202_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 202, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA201_eotS =
        "\5\uffff";
    static final String DFA201_eofS =
        "\5\uffff";
    static final String DFA201_minS =
        "\2\4\3\uffff";
    static final String DFA201_maxS =
        "\2\144\3\uffff";
    static final String DFA201_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA201_specialS =
        "\5\uffff}>";
    static final String[] DFA201_transitionS = {
            "\1\3\1\uffff\5\3\1\uffff\1\3\6\uffff\1\3\3\uffff\2\3\3\uffff"+
            "\25\3\1\2\2\3\1\uffff\3\3\17\uffff\15\3\3\1\1\uffff\15\3",
            "\1\4\1\uffff\5\4\1\uffff\1\4\6\uffff\1\4\3\uffff\2\4\3\uffff"+
            "\25\4\1\2\2\4\1\uffff\3\4\17\uffff\15\4\3\1\1\uffff\15\4",
            "",
            "",
            ""
    };

    static final short[] DFA201_eot = DFA.unpackEncodedString(DFA201_eotS);
    static final short[] DFA201_eof = DFA.unpackEncodedString(DFA201_eofS);
    static final char[] DFA201_min = DFA.unpackEncodedStringToUnsignedChars(DFA201_minS);
    static final char[] DFA201_max = DFA.unpackEncodedStringToUnsignedChars(DFA201_maxS);
    static final short[] DFA201_accept = DFA.unpackEncodedString(DFA201_acceptS);
    static final short[] DFA201_special = DFA.unpackEncodedString(DFA201_specialS);
    static final short[][] DFA201_transition;

    static {
        int numStates = DFA201_transitionS.length;
        DFA201_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA201_transition[i] = DFA.unpackEncodedString(DFA201_transitionS[i]);
        }
    }

    class DFA201 extends DFA {

        public DFA201(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 201;
            this.eot = DFA201_eot;
            this.eof = DFA201_eof;
            this.min = DFA201_min;
            this.max = DFA201_max;
            this.accept = DFA201_accept;
            this.special = DFA201_special;
            this.transition = DFA201_transition;
        }
        public String getDescription() {
            return "946:71: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA210_eotS =
        "\4\uffff";
    static final String DFA210_eofS =
        "\2\3\2\uffff";
    static final String DFA210_minS =
        "\2\4\2\uffff";
    static final String DFA210_maxS =
        "\2\156\2\uffff";
    static final String DFA210_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA210_specialS =
        "\4\uffff}>";
    static final String[] DFA210_transitionS = {
            "\3\3\2\uffff\4\3\1\uffff\1\3\4\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\2\15\3\11\uffff\1\3",
            "\3\3\2\uffff\4\3\1\uffff\1\3\4\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\2\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA210_eot = DFA.unpackEncodedString(DFA210_eotS);
    static final short[] DFA210_eof = DFA.unpackEncodedString(DFA210_eofS);
    static final char[] DFA210_min = DFA.unpackEncodedStringToUnsignedChars(DFA210_minS);
    static final char[] DFA210_max = DFA.unpackEncodedStringToUnsignedChars(DFA210_maxS);
    static final short[] DFA210_accept = DFA.unpackEncodedString(DFA210_acceptS);
    static final short[] DFA210_special = DFA.unpackEncodedString(DFA210_specialS);
    static final short[][] DFA210_transition;

    static {
        int numStates = DFA210_transitionS.length;
        DFA210_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA210_transition[i] = DFA.unpackEncodedString(DFA210_transitionS[i]);
        }
    }

    class DFA210 extends DFA {

        public DFA210(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 210;
            this.eot = DFA210_eot;
            this.eof = DFA210_eof;
            this.min = DFA210_min;
            this.max = DFA210_max;
            this.accept = DFA210_accept;
            this.special = DFA210_special;
            this.transition = DFA210_transition;
        }
        public String getDescription() {
            return "965:72: ( ( ws )? SASS_DEFAULT )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA215_eotS =
        "\60\uffff";
    static final String DFA215_eofS =
        "\1\2\57\uffff";
    static final String DFA215_minS =
        "\1\4\1\0\34\uffff\1\0\21\uffff";
    static final String DFA215_maxS =
        "\1\156\1\0\34\uffff\1\0\21\uffff";
    static final String DFA215_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA215_specialS =
        "\1\uffff\1\0\34\uffff\1\1\21\uffff}>";
    static final String[] DFA215_transitionS = {
            "\3\2\2\uffff\2\2\1\36\3\2\4\uffff\1\2\1\uffff\4\2\3\uffff\1"+
            "\2\1\uffff\23\2\1\uffff\14\2\1\uffff\1\2\6\uffff\2\2\14\uffff"+
            "\3\1\16\2\11\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA215_eot = DFA.unpackEncodedString(DFA215_eotS);
    static final short[] DFA215_eof = DFA.unpackEncodedString(DFA215_eofS);
    static final char[] DFA215_min = DFA.unpackEncodedStringToUnsignedChars(DFA215_minS);
    static final char[] DFA215_max = DFA.unpackEncodedStringToUnsignedChars(DFA215_maxS);
    static final short[] DFA215_accept = DFA.unpackEncodedString(DFA215_acceptS);
    static final short[] DFA215_special = DFA.unpackEncodedString(DFA215_specialS);
    static final short[][] DFA215_transition;

    static {
        int numStates = DFA215_transitionS.length;
        DFA215_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA215_transition[i] = DFA.unpackEncodedString(DFA215_transitionS[i]);
        }
    }

    class DFA215 extends DFA {

        public DFA215(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 215;
            this.eot = DFA215_eot;
            this.eof = DFA215_eof;
            this.min = DFA215_min;
            this.max = DFA215_max;
            this.accept = DFA215_accept;
            this.special = DFA215_special;
            this.transition = DFA215_transition;
        }
        public String getDescription() {
            return "()* loopback of 981:5: ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA215_1 = input.LA(1);

                         
                        int index215_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_Css3()) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index215_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA215_30 = input.LA(1);

                         
                        int index215_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_Css3()) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index215_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 215, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA219_eotS =
        "\105\uffff";
    static final String DFA219_eofS =
        "\1\2\104\uffff";
    static final String DFA219_minS =
        "\1\4\1\0\5\uffff\2\0\1\uffff\16\0\1\uffff\1\0\4\uffff\1\0\3\uffff"+
        "\11\0\1\uffff\1\0\6\uffff\1\0\21\uffff";
    static final String DFA219_maxS =
        "\1\156\1\0\5\uffff\2\0\1\uffff\16\0\1\uffff\1\0\4\uffff\1\0\3\uffff"+
        "\11\0\1\uffff\1\0\6\uffff\1\0\21\uffff";
    static final String DFA219_acceptS =
        "\2\uffff\1\3\56\uffff\1\1\1\2\1\uffff\21\2";
    static final String DFA219_specialS =
        "\1\0\1\1\5\uffff\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\uffff\1\22\4\uffff\1\23\3"+
        "\uffff\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\uffff\1\35"+
        "\6\uffff\1\36\21\uffff}>";
    static final String[] DFA219_transitionS = {
            "\1\54\1\2\1\13\1\77\1\101\1\54\1\51\1\2\1\46\2\2\1\103\1\61"+
            "\1\uffff\1\62\1\15\1\104\2\2\1\45\1\43\3\uffff\1\44\1\65\1\26"+
            "\1\47\1\42\20\54\1\uffff\1\36\1\31\1\27\1\63\1\12\1\14\6\2\1"+
            "\uffff\1\2\6\uffff\1\2\1\17\1\64\1\66\1\67\1\70\1\71\1\72\1"+
            "\73\1\74\1\75\1\76\1\100\1\102\3\1\1\2\1\25\1\7\1\10\1\16\2"+
            "\20\1\21\1\54\1\22\1\52\1\50\1\23\1\24\6\61\2\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA219_eot = DFA.unpackEncodedString(DFA219_eotS);
    static final short[] DFA219_eof = DFA.unpackEncodedString(DFA219_eofS);
    static final char[] DFA219_min = DFA.unpackEncodedStringToUnsignedChars(DFA219_minS);
    static final char[] DFA219_max = DFA.unpackEncodedStringToUnsignedChars(DFA219_maxS);
    static final short[] DFA219_accept = DFA.unpackEncodedString(DFA219_acceptS);
    static final short[] DFA219_special = DFA.unpackEncodedString(DFA219_specialS);
    static final short[][] DFA219_transition;

    static {
        int numStates = DFA219_transitionS.length;
        DFA219_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA219_transition[i] = DFA.unpackEncodedString(DFA219_transitionS[i]);
        }
    }

    class DFA219 extends DFA {

        public DFA219(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 219;
            this.eot = DFA219_eot;
            this.eof = DFA219_eof;
            this.min = DFA219_min;
            this.max = DFA219_max;
            this.accept = DFA219_accept;
            this.special = DFA219_special;
            this.transition = DFA219_transition;
        }
        public String getDescription() {
            return "()* loopback of 997:5: ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA219_0 = input.LA(1);

                         
                        int index219_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA219_0>=WS && LA219_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA219_0==EOF||LA219_0==SEMI||LA219_0==COMMA||(LA219_0>=LBRACE && LA219_0<=RBRACE)||(LA219_0>=RPAREN && LA219_0<=COLON)||(LA219_0>=DOT && LA219_0<=PIPE)||LA219_0==LESS_AND||LA219_0==RBRACKET||LA219_0==SASS_DEFAULT||(LA219_0>=CP_DOTS && LA219_0<=LESS_REST)||LA219_0==AT_SIGN) ) {s = 2;}

                        else if ( (LA219_0==SASS_MIXIN) ) {s = 7;}

                        else if ( (LA219_0==SASS_INCLUDE) ) {s = 8;}

                        else if ( (LA219_0==HASH_SYMBOL) ) {s = 10;}

                        else if ( (LA219_0==IDENT) ) {s = 11;}

                        else if ( (LA219_0==HASH) ) {s = 12;}

                        else if ( (LA219_0==GEN) ) {s = 13;}

                        else if ( (LA219_0==SASS_EXTEND) ) {s = 14;}

                        else if ( (LA219_0==SASS_VAR) ) {s = 15;}

                        else if ( ((LA219_0>=SASS_DEBUG && LA219_0<=SASS_WARN)) ) {s = 16;}

                        else if ( (LA219_0==SASS_IF) ) {s = 17;}

                        else if ( (LA219_0==SASS_FOR) ) {s = 18;}

                        else if ( (LA219_0==SASS_EACH) ) {s = 19;}

                        else if ( (LA219_0==SASS_WHILE) ) {s = 20;}

                        else if ( (LA219_0==SASS_CONTENT) ) {s = 21;}

                        else if ( (LA219_0==PAGE_SYM) ) {s = 22;}

                        else if ( (LA219_0==GREATER) ) {s = 23;}

                        else if ( (LA219_0==PLUS) ) {s = 25;}

                        else if ( (LA219_0==MINUS) ) {s = 30;}

                        else if ( (LA219_0==FONT_FACE_SYM) ) {s = 34;}

                        else if ( (LA219_0==MOZ_DOCUMENT_SYM) ) {s = 35;}

                        else if ( (LA219_0==WEBKIT_KEYFRAMES_SYM) ) {s = 36;}

                        else if ( (LA219_0==AT_IDENT) ) {s = 37;}

                        else if ( (LA219_0==MEDIA_SYM) ) {s = 38;}

                        else if ( (LA219_0==COUNTER_STYLE_SYM) ) {s = 39;}

                        else if ( (LA219_0==SASS_RETURN) ) {s = 40;}

                        else if ( (LA219_0==IMPORT_SYM) ) {s = 41;}

                        else if ( (LA219_0==SASS_FUNCTION) ) {s = 42;}

                        else if ( (LA219_0==NAMESPACE_SYM||LA219_0==CHARSET_SYM||(LA219_0>=TOPLEFTCORNER_SYM && LA219_0<=RIGHTBOTTOM_SYM)||LA219_0==SASS_ELSE) ) {s = 44;}

                        else if ( (LA219_0==AND||(LA219_0>=OR && LA219_0<=GREATER_OR_EQ)) && (synpred33_Css3())) {s = 49;}

                        else if ( (LA219_0==NOT) && (synpred34_Css3())) {s = 50;}

                        else if ( (LA219_0==TILDE) ) {s = 51;}

                        else if ( (LA219_0==NUMBER) && (synpred34_Css3())) {s = 52;}

                        else if ( (LA219_0==PERCENTAGE) && (synpred34_Css3())) {s = 53;}

                        else if ( (LA219_0==LENGTH) && (synpred34_Css3())) {s = 54;}

                        else if ( (LA219_0==EMS) && (synpred34_Css3())) {s = 55;}

                        else if ( (LA219_0==REM) && (synpred34_Css3())) {s = 56;}

                        else if ( (LA219_0==EXS) && (synpred34_Css3())) {s = 57;}

                        else if ( (LA219_0==ANGLE) && (synpred34_Css3())) {s = 58;}

                        else if ( (LA219_0==TIME) && (synpred34_Css3())) {s = 59;}

                        else if ( (LA219_0==FREQ) && (synpred34_Css3())) {s = 60;}

                        else if ( (LA219_0==RESOLUTION) && (synpred34_Css3())) {s = 61;}

                        else if ( (LA219_0==DIMENSION) && (synpred34_Css3())) {s = 62;}

                        else if ( (LA219_0==STRING) && (synpred34_Css3())) {s = 63;}

                        else if ( (LA219_0==LESS_JS_STRING) && (synpred34_Css3())) {s = 64;}

                        else if ( (LA219_0==URI) && (synpred34_Css3())) {s = 65;}

                        else if ( (LA219_0==PERCENTAGE_SYMBOL) && (synpred34_Css3())) {s = 66;}

                        else if ( (LA219_0==IMPORTANT_SYM) && (synpred34_Css3())) {s = 67;}

                        else if ( (LA219_0==LPAREN) && (synpred34_Css3())) {s = 68;}

                         
                        input.seek(index219_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA219_1 = input.LA(1);

                         
                        int index219_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_Css3()) ) {s = 49;}

                        else if ( (synpred34_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index219_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA219_7 = input.LA(1);

                         
                        int index219_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred34_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index219_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA219_8 = input.LA(1);

                         
                        int index219_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred34_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index219_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA219_10 = input.LA(1);

                         
                        int index219_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred34_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index219_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA219_11 = input.LA(1);

                         
                        int index219_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index219_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA219_12 = input.LA(1);

                         
                        int index219_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index219_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA219_13 = input.LA(1);

                         
                        int index219_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index219_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA219_14 = input.LA(1);

                         
                        int index219_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred34_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index219_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA219_15 = input.LA(1);

                         
                        int index219_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred34_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}

                         
                        input.seek(index219_15);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA219_16 = input.LA(1);

                         
                        int index219_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred34_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index219_16);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA219_17 = input.LA(1);

                         
                        int index219_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred34_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index219_17);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA219_18 = input.LA(1);

                         
                        int index219_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred34_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index219_18);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA219_19 = input.LA(1);

                         
                        int index219_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred34_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index219_19);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA219_20 = input.LA(1);

                         
                        int index219_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred34_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index219_20);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA219_21 = input.LA(1);

                         
                        int index219_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred34_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index219_21);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA219_22 = input.LA(1);

                         
                        int index219_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred34_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index219_22);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA219_23 = input.LA(1);

                         
                        int index219_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_Css3()) ) {s = 49;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index219_23);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA219_25 = input.LA(1);

                         
                        int index219_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index219_25);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA219_30 = input.LA(1);

                         
                        int index219_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_Css3()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index219_30);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA219_34 = input.LA(1);

                         
                        int index219_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred34_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index219_34);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA219_35 = input.LA(1);

                         
                        int index219_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred34_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index219_35);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA219_36 = input.LA(1);

                         
                        int index219_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred34_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index219_36);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA219_37 = input.LA(1);

                         
                        int index219_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred34_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index219_37);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA219_38 = input.LA(1);

                         
                        int index219_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred34_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index219_38);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA219_39 = input.LA(1);

                         
                        int index219_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred34_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index219_39);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA219_40 = input.LA(1);

                         
                        int index219_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred34_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index219_40);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA219_41 = input.LA(1);

                         
                        int index219_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred34_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isLessSource(),"isLessSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index219_41);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA219_42 = input.LA(1);

                         
                        int index219_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred34_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index219_42);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA219_44 = input.LA(1);

                         
                        int index219_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred34_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 2;}

                         
                        input.seek(index219_44);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA219_51 = input.LA(1);

                         
                        int index219_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred34_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index219_51);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 219, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA224_eotS =
        "\33\uffff";
    static final String DFA224_eofS =
        "\33\uffff";
    static final String DFA224_minS =
        "\1\4\30\uffff\1\0\1\uffff";
    static final String DFA224_maxS =
        "\1\144\30\uffff\1\0\1\uffff";
    static final String DFA224_acceptS =
        "\1\uffff\30\1\1\uffff\1\2";
    static final String DFA224_specialS =
        "\1\0\30\uffff\1\1\1\uffff}>";
    static final String[] DFA224_transitionS = {
            "\1\24\1\uffff\1\2\1\16\1\22\2\24\1\uffff\1\24\2\uffff\1\30\3"+
            "\uffff\1\21\1\31\2\uffff\2\24\3\uffff\1\24\1\4\23\24\1\uffff"+
            "\2\1\1\uffff\1\17\1\26\1\23\17\uffff\1\25\1\3\1\5\1\6\1\7\1"+
            "\10\1\11\1\12\1\13\1\14\1\15\1\20\1\27\4\uffff\15\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA224_eot = DFA.unpackEncodedString(DFA224_eotS);
    static final short[] DFA224_eof = DFA.unpackEncodedString(DFA224_eofS);
    static final char[] DFA224_min = DFA.unpackEncodedStringToUnsignedChars(DFA224_minS);
    static final char[] DFA224_max = DFA.unpackEncodedStringToUnsignedChars(DFA224_maxS);
    static final short[] DFA224_accept = DFA.unpackEncodedString(DFA224_acceptS);
    static final short[] DFA224_special = DFA.unpackEncodedString(DFA224_specialS);
    static final short[][] DFA224_transition;

    static {
        int numStates = DFA224_transitionS.length;
        DFA224_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA224_transition[i] = DFA.unpackEncodedString(DFA224_transitionS[i]);
        }
    }

    class DFA224 extends DFA {

        public DFA224(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 224;
            this.eot = DFA224_eot;
            this.eof = DFA224_eof;
            this.min = DFA224_min;
            this.max = DFA224_max;
            this.accept = DFA224_accept;
            this.special = DFA224_special;
            this.transition = DFA224_transition;
        }
        public String getDescription() {
            return "1011:9: ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA224_0 = input.LA(1);

                         
                        int index224_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA224_0>=MINUS && LA224_0<=PLUS)) && (synpred35_Css3())) {s = 1;}

                        else if ( (LA224_0==IDENT) && (synpred35_Css3())) {s = 2;}

                        else if ( (LA224_0==NUMBER) && (synpred35_Css3())) {s = 3;}

                        else if ( (LA224_0==PERCENTAGE) && (synpred35_Css3())) {s = 4;}

                        else if ( (LA224_0==LENGTH) && (synpred35_Css3())) {s = 5;}

                        else if ( (LA224_0==EMS) && (synpred35_Css3())) {s = 6;}

                        else if ( (LA224_0==REM) && (synpred35_Css3())) {s = 7;}

                        else if ( (LA224_0==EXS) && (synpred35_Css3())) {s = 8;}

                        else if ( (LA224_0==ANGLE) && (synpred35_Css3())) {s = 9;}

                        else if ( (LA224_0==TIME) && (synpred35_Css3())) {s = 10;}

                        else if ( (LA224_0==FREQ) && (synpred35_Css3())) {s = 11;}

                        else if ( (LA224_0==RESOLUTION) && (synpred35_Css3())) {s = 12;}

                        else if ( (LA224_0==DIMENSION) && (synpred35_Css3())) {s = 13;}

                        else if ( (LA224_0==STRING) && (synpred35_Css3())) {s = 14;}

                        else if ( (LA224_0==TILDE) && (synpred35_Css3())) {s = 15;}

                        else if ( (LA224_0==LESS_JS_STRING) && (synpred35_Css3())) {s = 16;}

                        else if ( (LA224_0==GEN) && (synpred35_Css3())) {s = 17;}

                        else if ( (LA224_0==URI) && (synpred35_Css3())) {s = 18;}

                        else if ( (LA224_0==HASH) && (synpred35_Css3())) {s = 19;}

                        else if ( (LA224_0==NAMESPACE_SYM||(LA224_0>=CHARSET_SYM && LA224_0<=IMPORT_SYM)||LA224_0==MEDIA_SYM||(LA224_0>=AT_IDENT && LA224_0<=MOZ_DOCUMENT_SYM)||LA224_0==WEBKIT_KEYFRAMES_SYM||(LA224_0>=PAGE_SYM && LA224_0<=RIGHTBOTTOM_SYM)||(LA224_0>=SASS_CONTENT && LA224_0<=SASS_WHILE)) && (synpred35_Css3())) {s = 20;}

                        else if ( (LA224_0==SASS_VAR) && (synpred35_Css3())) {s = 21;}

                        else if ( (LA224_0==HASH_SYMBOL) && (synpred35_Css3())) {s = 22;}

                        else if ( (LA224_0==PERCENTAGE_SYMBOL) && (synpred35_Css3())) {s = 23;}

                        else if ( (LA224_0==IMPORTANT_SYM) && (synpred35_Css3())) {s = 24;}

                        else if ( (LA224_0==LPAREN) ) {s = 25;}

                         
                        input.seek(index224_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA224_25 = input.LA(1);

                         
                        int index224_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_Css3()) ) {s = 24;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index224_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 224, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA228_eotS =
        "\106\uffff";
    static final String DFA228_eofS =
        "\1\2\105\uffff";
    static final String DFA228_minS =
        "\1\4\1\0\4\uffff\1\0\35\uffff\2\0\40\uffff";
    static final String DFA228_maxS =
        "\1\156\1\0\4\uffff\1\0\35\uffff\2\0\40\uffff";
    static final String DFA228_acceptS =
        "\2\uffff\1\2\102\uffff\1\1";
    static final String DFA228_specialS =
        "\1\0\1\1\4\uffff\1\2\35\uffff\1\3\1\4\40\uffff}>";
    static final String[] DFA228_transitionS = {
            "\15\2\1\uffff\7\2\3\uffff\25\2\1\105\1\6\1\45\10\2\1\44\1\2"+
            "\1\uffff\1\2\6\uffff\16\2\3\1\26\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA228_eot = DFA.unpackEncodedString(DFA228_eotS);
    static final short[] DFA228_eof = DFA.unpackEncodedString(DFA228_eofS);
    static final char[] DFA228_min = DFA.unpackEncodedStringToUnsignedChars(DFA228_minS);
    static final char[] DFA228_max = DFA.unpackEncodedStringToUnsignedChars(DFA228_maxS);
    static final short[] DFA228_accept = DFA.unpackEncodedString(DFA228_acceptS);
    static final short[] DFA228_special = DFA.unpackEncodedString(DFA228_specialS);
    static final short[][] DFA228_transition;

    static {
        int numStates = DFA228_transitionS.length;
        DFA228_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA228_transition[i] = DFA.unpackEncodedString(DFA228_transitionS[i]);
        }
    }

    class DFA228 extends DFA {

        public DFA228(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 228;
            this.eot = DFA228_eot;
            this.eof = DFA228_eof;
            this.min = DFA228_min;
            this.max = DFA228_max;
            this.accept = DFA228_accept;
            this.special = DFA228_special;
            this.transition = DFA228_transition;
        }
        public String getDescription() {
            return "()* loopback of 1038:10: ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA228_0 = input.LA(1);

                         
                        int index228_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA228_0>=WS && LA228_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA228_0==EOF||(LA228_0>=NAMESPACE_SYM && LA228_0<=AND)||(LA228_0>=NOT && LA228_0<=MOZ_DOCUMENT_SYM)||(LA228_0>=WEBKIT_KEYFRAMES_SYM && LA228_0<=RIGHTBOTTOM_SYM)||(LA228_0>=GREATER && LA228_0<=SASS_EXTEND_ONLY_SELECTOR)||LA228_0==PIPE||LA228_0==LESS_AND||(LA228_0>=RBRACKET && LA228_0<=PERCENTAGE_SYMBOL)||(LA228_0>=SASS_DEFAULT && LA228_0<=LESS_REST)||LA228_0==AT_SIGN) ) {s = 2;}

                        else if ( (LA228_0==MINUS) ) {s = 6;}

                        else if ( (LA228_0==STAR) ) {s = 36;}

                        else if ( (LA228_0==PLUS) ) {s = 37;}

                        else if ( (LA228_0==SOLIDUS) && (synpred36_Css3())) {s = 69;}

                         
                        input.seek(index228_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA228_1 = input.LA(1);

                         
                        int index228_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_Css3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index228_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA228_6 = input.LA(1);

                         
                        int index228_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_Css3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index228_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA228_36 = input.LA(1);

                         
                        int index228_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_Css3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index228_36);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA228_37 = input.LA(1);

                         
                        int index228_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_Css3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index228_37);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 228, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA233_eotS =
        "\6\uffff";
    static final String DFA233_eofS =
        "\6\uffff";
    static final String DFA233_minS =
        "\2\4\3\uffff\1\4";
    static final String DFA233_maxS =
        "\2\144\3\uffff\1\144";
    static final String DFA233_acceptS =
        "\2\uffff\1\1\1\2\1\3\1\uffff";
    static final String DFA233_specialS =
        "\6\uffff}>";
    static final String[] DFA233_transitionS = {
            "\1\2\1\uffff\5\2\1\uffff\1\2\2\uffff\1\3\3\uffff\1\2\1\4\2\uffff"+
            "\2\2\3\uffff\25\2\1\uffff\2\1\1\uffff\3\2\17\uffff\15\2\4\uffff"+
            "\15\2",
            "\1\2\1\uffff\5\2\1\uffff\1\2\6\uffff\1\2\1\4\2\uffff\2\2\3"+
            "\uffff\25\2\4\uffff\3\2\17\uffff\15\2\3\5\1\uffff\15\2",
            "",
            "",
            "",
            "\1\2\1\uffff\5\2\1\uffff\1\2\6\uffff\1\2\1\4\2\uffff\2\2\3"+
            "\uffff\25\2\4\uffff\3\2\17\uffff\15\2\3\5\1\uffff\15\2"
    };

    static final short[] DFA233_eot = DFA.unpackEncodedString(DFA233_eotS);
    static final short[] DFA233_eof = DFA.unpackEncodedString(DFA233_eofS);
    static final char[] DFA233_min = DFA.unpackEncodedStringToUnsignedChars(DFA233_minS);
    static final char[] DFA233_max = DFA.unpackEncodedStringToUnsignedChars(DFA233_maxS);
    static final short[] DFA233_accept = DFA.unpackEncodedString(DFA233_acceptS);
    static final short[] DFA233_special = DFA.unpackEncodedString(DFA233_specialS);
    static final short[][] DFA233_transition;

    static {
        int numStates = DFA233_transitionS.length;
        DFA233_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA233_transition[i] = DFA.unpackEncodedString(DFA233_transitionS[i]);
        }
    }

    class DFA233 extends DFA {

        public DFA233(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 233;
            this.eot = DFA233_eot;
            this.eof = DFA233_eof;
            this.min = DFA233_min;
            this.max = DFA233_max;
            this.accept = DFA233_accept;
            this.special = DFA233_special;
            this.transition = DFA233_transition;
        }
        public String getDescription() {
            return "1043:1: cp_math_expression_atom : ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA238_eotS =
        "\4\uffff";
    static final String DFA238_eofS =
        "\4\uffff";
    static final String DFA238_minS =
        "\2\15\2\uffff";
    static final String DFA238_maxS =
        "\2\155\2\uffff";
    static final String DFA238_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA238_specialS =
        "\4\uffff}>";
    static final String[] DFA238_transitionS = {
            "\1\3\106\uffff\3\1\26\uffff\1\2",
            "\1\3\106\uffff\3\1\26\uffff\1\2",
            "",
            ""
    };

    static final short[] DFA238_eot = DFA.unpackEncodedString(DFA238_eotS);
    static final short[] DFA238_eof = DFA.unpackEncodedString(DFA238_eofS);
    static final char[] DFA238_min = DFA.unpackEncodedStringToUnsignedChars(DFA238_minS);
    static final char[] DFA238_max = DFA.unpackEncodedStringToUnsignedChars(DFA238_maxS);
    static final short[] DFA238_accept = DFA.unpackEncodedString(DFA238_acceptS);
    static final short[] DFA238_special = DFA.unpackEncodedString(DFA238_specialS);
    static final short[][] DFA238_transition;

    static {
        int numStates = DFA238_transitionS.length;
        DFA238_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA238_transition[i] = DFA.unpackEncodedString(DFA238_transitionS[i]);
        }
    }

    class DFA238 extends DFA {

        public DFA238(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 238;
            this.eot = DFA238_eot;
            this.eof = DFA238_eof;
            this.min = DFA238_min;
            this.max = DFA238_max;
            this.accept = DFA238_accept;
            this.special = DFA238_special;
            this.transition = DFA238_transition;
        }
        public String getDescription() {
            return "1059:81: ( ( ws )? less_mixin_guarded )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA242_eotS =
        "\4\uffff";
    static final String DFA242_eofS =
        "\4\uffff";
    static final String DFA242_minS =
        "\2\15\2\uffff";
    static final String DFA242_maxS =
        "\2\126\2\uffff";
    static final String DFA242_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA242_specialS =
        "\4\uffff}>";
    static final String[] DFA242_transitionS = {
            "\1\3\6\uffff\1\2\77\uffff\3\1",
            "\1\3\6\uffff\1\2\77\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA242_eot = DFA.unpackEncodedString(DFA242_eotS);
    static final short[] DFA242_eof = DFA.unpackEncodedString(DFA242_eofS);
    static final char[] DFA242_min = DFA.unpackEncodedStringToUnsignedChars(DFA242_minS);
    static final char[] DFA242_max = DFA.unpackEncodedStringToUnsignedChars(DFA242_maxS);
    static final short[] DFA242_accept = DFA.unpackEncodedString(DFA242_acceptS);
    static final short[] DFA242_special = DFA.unpackEncodedString(DFA242_specialS);
    static final short[][] DFA242_transition;

    static {
        int numStates = DFA242_transitionS.length;
        DFA242_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA242_transition[i] = DFA.unpackEncodedString(DFA242_transitionS[i]);
        }
    }

    class DFA242 extends DFA {

        public DFA242(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 242;
            this.eot = DFA242_eot;
            this.eof = DFA242_eof;
            this.min = DFA242_min;
            this.max = DFA242_max;
            this.accept = DFA242_accept;
            this.special = DFA242_special;
            this.transition = DFA242_transition;
        }
        public String getDescription() {
            return "1061:55: ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA248_eotS =
        "\4\uffff";
    static final String DFA248_eofS =
        "\2\3\2\uffff";
    static final String DFA248_minS =
        "\2\4\2\uffff";
    static final String DFA248_maxS =
        "\2\156\2\uffff";
    static final String DFA248_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA248_specialS =
        "\4\uffff}>";
    static final String[] DFA248_transitionS = {
            "\3\3\2\uffff\4\3\1\uffff\2\3\3\uffff\1\3\1\2\1\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\4\3\1\uffff\2\3\3\uffff\1\3\1\2\1\uffff\3\3\3"+
            "\uffff\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3"+
            "\14\uffff\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA248_eot = DFA.unpackEncodedString(DFA248_eotS);
    static final short[] DFA248_eof = DFA.unpackEncodedString(DFA248_eofS);
    static final char[] DFA248_min = DFA.unpackEncodedStringToUnsignedChars(DFA248_minS);
    static final char[] DFA248_max = DFA.unpackEncodedStringToUnsignedChars(DFA248_maxS);
    static final short[] DFA248_accept = DFA.unpackEncodedString(DFA248_acceptS);
    static final short[] DFA248_special = DFA.unpackEncodedString(DFA248_specialS);
    static final short[][] DFA248_transition;

    static {
        int numStates = DFA248_transitionS.length;
        DFA248_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA248_transition[i] = DFA.unpackEncodedString(DFA248_transitionS[i]);
        }
    }

    class DFA248 extends DFA {

        public DFA248(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 248;
            this.eot = DFA248_eot;
            this.eof = DFA248_eof;
            this.min = DFA248_min;
            this.max = DFA248_max;
            this.accept = DFA248_accept;
            this.special = DFA248_special;
            this.transition = DFA248_transition;
        }
        public String getDescription() {
            return "1071:45: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA252_eotS =
        "\4\uffff";
    static final String DFA252_eofS =
        "\2\3\2\uffff";
    static final String DFA252_minS =
        "\2\4\2\uffff";
    static final String DFA252_maxS =
        "\2\156\2\uffff";
    static final String DFA252_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA252_specialS =
        "\4\uffff}>";
    static final String[] DFA252_transitionS = {
            "\3\3\2\uffff\7\3\3\uffff\1\3\1\2\1\uffff\3\3\3\uffff\1\3\1\uffff"+
            "\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff\3\1\1\uffff"+
            "\15\3\11\uffff\1\3",
            "\3\3\2\uffff\7\3\3\uffff\1\3\1\2\1\uffff\3\3\3\uffff\1\3\1"+
            "\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff\3"+
            "\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA252_eot = DFA.unpackEncodedString(DFA252_eotS);
    static final short[] DFA252_eof = DFA.unpackEncodedString(DFA252_eofS);
    static final char[] DFA252_min = DFA.unpackEncodedStringToUnsignedChars(DFA252_minS);
    static final char[] DFA252_max = DFA.unpackEncodedStringToUnsignedChars(DFA252_maxS);
    static final short[] DFA252_accept = DFA.unpackEncodedString(DFA252_acceptS);
    static final short[] DFA252_special = DFA.unpackEncodedString(DFA252_specialS);
    static final short[][] DFA252_transition;

    static {
        int numStates = DFA252_transitionS.length;
        DFA252_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA252_transition[i] = DFA.unpackEncodedString(DFA252_transitionS[i]);
        }
    }

    class DFA252 extends DFA {

        public DFA252(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 252;
            this.eot = DFA252_eot;
            this.eof = DFA252_eof;
            this.min = DFA252_min;
            this.max = DFA252_max;
            this.accept = DFA252_accept;
            this.special = DFA252_special;
            this.transition = DFA252_transition;
        }
        public String getDescription() {
            return "1073:57: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA254_eotS =
        "\4\uffff";
    static final String DFA254_eofS =
        "\2\3\2\uffff";
    static final String DFA254_minS =
        "\2\4\2\uffff";
    static final String DFA254_maxS =
        "\2\156\2\uffff";
    static final String DFA254_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA254_specialS =
        "\4\uffff}>";
    static final String[] DFA254_transitionS = {
            "\3\3\2\uffff\4\3\1\2\2\3\3\uffff\1\3\2\uffff\3\3\3\uffff\1\3"+
            "\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "\3\3\2\uffff\4\3\1\2\2\3\3\uffff\1\3\2\uffff\3\3\3\uffff\1"+
            "\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA254_eot = DFA.unpackEncodedString(DFA254_eotS);
    static final short[] DFA254_eof = DFA.unpackEncodedString(DFA254_eofS);
    static final char[] DFA254_min = DFA.unpackEncodedStringToUnsignedChars(DFA254_minS);
    static final char[] DFA254_max = DFA.unpackEncodedStringToUnsignedChars(DFA254_maxS);
    static final short[] DFA254_accept = DFA.unpackEncodedString(DFA254_acceptS);
    static final short[] DFA254_special = DFA.unpackEncodedString(DFA254_specialS);
    static final short[][] DFA254_transition;

    static {
        int numStates = DFA254_transitionS.length;
        DFA254_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA254_transition[i] = DFA.unpackEncodedString(DFA254_transitionS[i]);
        }
    }

    class DFA254 extends DFA {

        public DFA254(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 254;
            this.eot = DFA254_eot;
            this.eof = DFA254_eof;
            this.min = DFA254_min;
            this.max = DFA254_max;
            this.accept = DFA254_accept;
            this.special = DFA254_special;
            this.transition = DFA254_transition;
        }
        public String getDescription() {
            return "1073:102: ( ( ws )? cp_mixin_block )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA263_eotS =
        "\7\uffff";
    static final String DFA263_eofS =
        "\7\uffff";
    static final String DFA263_minS =
        "\3\4\1\uffff\1\4\1\uffff\1\4";
    static final String DFA263_maxS =
        "\1\144\2\153\1\uffff\1\153\1\uffff\1\153";
    static final String DFA263_acceptS =
        "\3\uffff\1\2\1\uffff\1\1\1\uffff";
    static final String DFA263_specialS =
        "\7\uffff}>";
    static final String[] DFA263_transitionS = {
            "\1\1\1\uffff\3\3\2\1\1\uffff\1\1\2\uffff\1\3\2\uffff\3\3\2\uffff"+
            "\2\1\3\uffff\1\1\1\3\23\1\1\uffff\2\3\1\uffff\3\3\17\uffff\1"+
            "\2\14\3\4\uffff\15\1",
            "\11\3\2\uffff\2\3\1\uffff\4\3\1\5\2\3\3\uffff\34\3\4\uffff"+
            "\1\3\12\uffff\15\3\3\4\1\uffff\24\3",
            "\11\3\2\uffff\2\3\1\uffff\4\3\1\5\2\3\3\uffff\34\3\4\uffff"+
            "\1\3\12\uffff\15\3\3\6\1\uffff\24\3",
            "",
            "\11\3\2\uffff\2\3\1\uffff\4\3\1\5\2\3\3\uffff\34\3\4\uffff"+
            "\1\3\12\uffff\15\3\3\4\1\uffff\24\3",
            "",
            "\11\3\2\uffff\2\3\1\uffff\4\3\1\5\2\3\3\uffff\34\3\4\uffff"+
            "\1\3\12\uffff\15\3\3\6\1\uffff\24\3"
    };

    static final short[] DFA263_eot = DFA.unpackEncodedString(DFA263_eotS);
    static final short[] DFA263_eof = DFA.unpackEncodedString(DFA263_eofS);
    static final char[] DFA263_min = DFA.unpackEncodedStringToUnsignedChars(DFA263_minS);
    static final char[] DFA263_max = DFA.unpackEncodedStringToUnsignedChars(DFA263_maxS);
    static final short[] DFA263_accept = DFA.unpackEncodedString(DFA263_acceptS);
    static final short[] DFA263_special = DFA.unpackEncodedString(DFA263_specialS);
    static final short[][] DFA263_transition;

    static {
        int numStates = DFA263_transitionS.length;
        DFA263_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA263_transition[i] = DFA.unpackEncodedString(DFA263_transitionS[i]);
        }
    }

    class DFA263 extends DFA {

        public DFA263(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 263;
            this.eot = DFA263_eot;
            this.eof = DFA263_eof;
            this.min = DFA263_min;
            this.max = DFA263_max;
            this.accept = DFA263_accept;
            this.special = DFA263_special;
            this.transition = DFA263_transition;
        }
        public String getDescription() {
            return "1098:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA266_eotS =
        "\5\uffff";
    static final String DFA266_eofS =
        "\5\uffff";
    static final String DFA266_minS =
        "\1\5\1\4\1\uffff\1\4\1\uffff";
    static final String DFA266_maxS =
        "\2\154\1\uffff\1\154\1\uffff";
    static final String DFA266_acceptS =
        "\2\uffff\1\2\1\uffff\1\1";
    static final String DFA266_specialS =
        "\5\uffff}>";
    static final String[] DFA266_transitionS = {
            "\1\1\5\uffff\1\1\11\uffff\1\2\125\uffff\2\2",
            "\1\4\4\uffff\2\4\1\uffff\1\4\12\uffff\2\4\3\uffff\1\4\1\uffff"+
            "\23\4\26\uffff\1\4\14\uffff\3\3\1\uffff\15\4\6\uffff\2\2",
            "",
            "\1\4\4\uffff\2\4\1\uffff\1\4\12\uffff\2\4\3\uffff\1\4\1\uffff"+
            "\23\4\26\uffff\1\4\14\uffff\3\3\1\uffff\15\4\6\uffff\2\2",
            ""
    };

    static final short[] DFA266_eot = DFA.unpackEncodedString(DFA266_eotS);
    static final short[] DFA266_eof = DFA.unpackEncodedString(DFA266_eofS);
    static final char[] DFA266_min = DFA.unpackEncodedStringToUnsignedChars(DFA266_minS);
    static final char[] DFA266_max = DFA.unpackEncodedStringToUnsignedChars(DFA266_maxS);
    static final short[] DFA266_accept = DFA.unpackEncodedString(DFA266_acceptS);
    static final short[] DFA266_special = DFA.unpackEncodedString(DFA266_specialS);
    static final short[][] DFA266_transition;

    static {
        int numStates = DFA266_transitionS.length;
        DFA266_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA266_transition[i] = DFA.unpackEncodedString(DFA266_transitionS[i]);
        }
    }

    class DFA266 extends DFA {

        public DFA266(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 266;
            this.eot = DFA266_eot;
            this.eof = DFA266_eof;
            this.min = DFA266_min;
            this.max = DFA266_max;
            this.accept = DFA266_accept;
            this.special = DFA266_special;
            this.transition = DFA266_transition;
        }
        public String getDescription() {
            return "()* loopback of 1113:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA293_eotS =
        "\4\uffff";
    static final String DFA293_eofS =
        "\4\uffff";
    static final String DFA293_minS =
        "\2\6\2\uffff";
    static final String DFA293_maxS =
        "\2\126\2\uffff";
    static final String DFA293_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA293_specialS =
        "\4\uffff}>";
    static final String[] DFA293_transitionS = {
            "\1\3\4\uffff\1\3\1\uffff\1\2\10\uffff\1\3\33\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\4\3\2\uffff\1\3\2\uffff\1\3\6\uffff\1\3\15\uffff"+
            "\3\1",
            "\1\3\4\uffff\1\3\1\uffff\1\2\10\uffff\1\3\33\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\4\3\2\uffff\1\3\2\uffff\1\3\6\uffff\1\3\15\uffff"+
            "\3\1",
            "",
            ""
    };

    static final short[] DFA293_eot = DFA.unpackEncodedString(DFA293_eotS);
    static final short[] DFA293_eof = DFA.unpackEncodedString(DFA293_eofS);
    static final char[] DFA293_min = DFA.unpackEncodedStringToUnsignedChars(DFA293_minS);
    static final char[] DFA293_max = DFA.unpackEncodedStringToUnsignedChars(DFA293_maxS);
    static final short[] DFA293_accept = DFA.unpackEncodedString(DFA293_acceptS);
    static final short[] DFA293_special = DFA.unpackEncodedString(DFA293_specialS);
    static final short[][] DFA293_transition;

    static {
        int numStates = DFA293_transitionS.length;
        DFA293_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA293_transition[i] = DFA.unpackEncodedString(DFA293_transitionS[i]);
        }
    }

    class DFA293 extends DFA {

        public DFA293(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 293;
            this.eot = DFA293_eot;
            this.eof = DFA293_eof;
            this.min = DFA293_min;
            this.max = DFA293_max;
            this.accept = DFA293_accept;
            this.special = DFA293_special;
            this.transition = DFA293_transition;
        }
        public String getDescription() {
            return "()* loopback of 1177:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA297_eotS =
        "\4\uffff";
    static final String DFA297_eofS =
        "\4\uffff";
    static final String DFA297_minS =
        "\2\6\2\uffff";
    static final String DFA297_maxS =
        "\2\126\2\uffff";
    static final String DFA297_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA297_specialS =
        "\4\uffff}>";
    static final String[] DFA297_transitionS = {
            "\1\3\17\uffff\1\2\33\uffff\1\3\3\uffff\3\3\33\uffff\3\1",
            "\1\3\17\uffff\1\2\33\uffff\1\3\3\uffff\3\3\33\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA297_eot = DFA.unpackEncodedString(DFA297_eotS);
    static final short[] DFA297_eof = DFA.unpackEncodedString(DFA297_eofS);
    static final char[] DFA297_min = DFA.unpackEncodedStringToUnsignedChars(DFA297_minS);
    static final char[] DFA297_max = DFA.unpackEncodedStringToUnsignedChars(DFA297_maxS);
    static final short[] DFA297_accept = DFA.unpackEncodedString(DFA297_acceptS);
    static final short[] DFA297_special = DFA.unpackEncodedString(DFA297_specialS);
    static final short[][] DFA297_transition;

    static {
        int numStates = DFA297_transitionS.length;
        DFA297_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA297_transition[i] = DFA.unpackEncodedString(DFA297_transitionS[i]);
        }
    }

    class DFA297 extends DFA {

        public DFA297(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 297;
            this.eot = DFA297_eot;
            this.eof = DFA297_eof;
            this.min = DFA297_min;
            this.max = DFA297_max;
            this.accept = DFA297_accept;
            this.special = DFA297_special;
            this.transition = DFA297_transition;
        }
        public String getDescription() {
            return "()* loopback of 1195:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA305_eotS =
        "\4\uffff";
    static final String DFA305_eofS =
        "\4\uffff";
    static final String DFA305_minS =
        "\2\4\2\uffff";
    static final String DFA305_maxS =
        "\2\157\2\uffff";
    static final String DFA305_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA305_specialS =
        "\4\uffff}>";
    static final String[] DFA305_transitionS = {
            "\3\3\2\uffff\4\3\1\uffff\1\3\4\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3\1\2",
            "\3\3\2\uffff\4\3\1\uffff\1\3\4\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\15\3\11\uffff\1\3\1\2",
            "",
            ""
    };

    static final short[] DFA305_eot = DFA.unpackEncodedString(DFA305_eotS);
    static final short[] DFA305_eof = DFA.unpackEncodedString(DFA305_eofS);
    static final char[] DFA305_min = DFA.unpackEncodedStringToUnsignedChars(DFA305_minS);
    static final char[] DFA305_max = DFA.unpackEncodedStringToUnsignedChars(DFA305_maxS);
    static final short[] DFA305_accept = DFA.unpackEncodedString(DFA305_acceptS);
    static final short[] DFA305_special = DFA.unpackEncodedString(DFA305_specialS);
    static final short[][] DFA305_transition;

    static {
        int numStates = DFA305_transitionS.length;
        DFA305_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA305_transition[i] = DFA.unpackEncodedString(DFA305_transitionS[i]);
        }
    }

    class DFA305 extends DFA {

        public DFA305(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 305;
            this.eot = DFA305_eot;
            this.eof = DFA305_eof;
            this.min = DFA305_min;
            this.max = DFA305_max;
            this.accept = DFA305_accept;
            this.special = DFA305_special;
            this.transition = DFA305_transition;
        }
        public String getDescription() {
            return "1236:43: ( ( ws )? SASS_OPTIONAL )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA309_eotS =
        "\10\uffff";
    static final String DFA309_eofS =
        "\2\3\6\uffff";
    static final String DFA309_minS =
        "\2\4\1\6\1\uffff\2\6\1\uffff\1\6";
    static final String DFA309_maxS =
        "\2\156\1\126\1\uffff\2\126\1\uffff\1\126";
    static final String DFA309_acceptS =
        "\3\uffff\1\2\2\uffff\1\1\1\uffff";
    static final String DFA309_specialS =
        "\10\uffff}>";
    static final String[] DFA309_transitionS = {
            "\3\3\2\uffff\4\3\1\uffff\1\3\4\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\7\3\1\2\5\3\11\uffff\1\3",
            "\3\3\2\uffff\4\3\1\uffff\1\3\4\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\7\3\1\4\5\3\11\uffff\1\3",
            "\1\6\6\uffff\1\6\10\uffff\1\3\75\uffff\3\5",
            "",
            "\1\6\6\uffff\1\6\10\uffff\1\3\75\uffff\3\7",
            "\1\6\6\uffff\1\6\10\uffff\1\3\75\uffff\3\5",
            "",
            "\1\6\6\uffff\1\6\10\uffff\1\3\75\uffff\3\7"
    };

    static final short[] DFA309_eot = DFA.unpackEncodedString(DFA309_eotS);
    static final short[] DFA309_eof = DFA.unpackEncodedString(DFA309_eofS);
    static final char[] DFA309_min = DFA.unpackEncodedStringToUnsignedChars(DFA309_minS);
    static final char[] DFA309_max = DFA.unpackEncodedStringToUnsignedChars(DFA309_maxS);
    static final short[] DFA309_accept = DFA.unpackEncodedString(DFA309_acceptS);
    static final short[] DFA309_special = DFA.unpackEncodedString(DFA309_specialS);
    static final short[][] DFA309_transition;

    static {
        int numStates = DFA309_transitionS.length;
        DFA309_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA309_transition[i] = DFA.unpackEncodedString(DFA309_transitionS[i]);
        }
    }

    class DFA309 extends DFA {

        public DFA309(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 309;
            this.eot = DFA309_eot;
            this.eof = DFA309_eof;
            this.min = DFA309_min;
            this.max = DFA309_max;
            this.accept = DFA309_accept;
            this.special = DFA309_special;
            this.transition = DFA309_transition;
        }
        public String getDescription() {
            return "1256:63: ( ( ws )? sass_else )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA316_eotS =
        "\5\uffff";
    static final String DFA316_eofS =
        "\5\uffff";
    static final String DFA316_minS =
        "\1\137\2\6\2\uffff";
    static final String DFA316_maxS =
        "\1\137\2\126\2\uffff";
    static final String DFA316_acceptS =
        "\3\uffff\1\1\1\2";
    static final String DFA316_specialS =
        "\5\uffff}>";
    static final String[] DFA316_transitionS = {
            "\1\1",
            "\1\4\6\uffff\1\3\106\uffff\3\2",
            "\1\4\6\uffff\1\3\106\uffff\3\2",
            "",
            ""
    };

    static final short[] DFA316_eot = DFA.unpackEncodedString(DFA316_eotS);
    static final short[] DFA316_eof = DFA.unpackEncodedString(DFA316_eofS);
    static final char[] DFA316_min = DFA.unpackEncodedStringToUnsignedChars(DFA316_minS);
    static final char[] DFA316_max = DFA.unpackEncodedStringToUnsignedChars(DFA316_maxS);
    static final short[] DFA316_accept = DFA.unpackEncodedString(DFA316_acceptS);
    static final short[] DFA316_special = DFA.unpackEncodedString(DFA316_specialS);
    static final short[][] DFA316_transition;

    static {
        int numStates = DFA316_transitionS.length;
        DFA316_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA316_transition[i] = DFA.unpackEncodedString(DFA316_transitionS[i]);
        }
    }

    class DFA316 extends DFA {

        public DFA316(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 316;
            this.eot = DFA316_eot;
            this.eof = DFA316_eof;
            this.min = DFA316_min;
            this.max = DFA316_max;
            this.accept = DFA316_accept;
            this.special = DFA316_special;
            this.transition = DFA316_transition;
        }
        public String getDescription() {
            return "1259:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA315_eotS =
        "\10\uffff";
    static final String DFA315_eofS =
        "\2\3\6\uffff";
    static final String DFA315_minS =
        "\2\4\1\6\1\uffff\2\6\1\uffff\1\6";
    static final String DFA315_maxS =
        "\2\156\1\126\1\uffff\2\126\1\uffff\1\126";
    static final String DFA315_acceptS =
        "\3\uffff\1\2\2\uffff\1\1\1\uffff";
    static final String DFA315_specialS =
        "\10\uffff}>";
    static final String[] DFA315_transitionS = {
            "\3\3\2\uffff\4\3\1\uffff\1\3\4\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\7\3\1\2\5\3\11\uffff\1\3",
            "\3\3\2\uffff\4\3\1\uffff\1\3\4\uffff\1\3\2\uffff\3\3\3\uffff"+
            "\1\3\1\uffff\23\3\1\uffff\14\3\1\uffff\1\3\6\uffff\2\3\14\uffff"+
            "\3\1\1\uffff\7\3\1\4\5\3\11\uffff\1\3",
            "\1\6\6\uffff\1\6\10\uffff\1\3\75\uffff\3\5",
            "",
            "\1\6\6\uffff\1\6\10\uffff\1\3\75\uffff\3\7",
            "\1\6\6\uffff\1\6\10\uffff\1\3\75\uffff\3\5",
            "",
            "\1\6\6\uffff\1\6\10\uffff\1\3\75\uffff\3\7"
    };

    static final short[] DFA315_eot = DFA.unpackEncodedString(DFA315_eotS);
    static final short[] DFA315_eof = DFA.unpackEncodedString(DFA315_eofS);
    static final char[] DFA315_min = DFA.unpackEncodedStringToUnsignedChars(DFA315_minS);
    static final char[] DFA315_max = DFA.unpackEncodedStringToUnsignedChars(DFA315_maxS);
    static final short[] DFA315_accept = DFA.unpackEncodedString(DFA315_acceptS);
    static final short[] DFA315_special = DFA.unpackEncodedString(DFA315_specialS);
    static final short[][] DFA315_transition;

    static {
        int numStates = DFA315_transitionS.length;
        DFA315_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA315_transition[i] = DFA.unpackEncodedString(DFA315_transitionS[i]);
        }
    }

    class DFA315 extends DFA {

        public DFA315(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 315;
            this.eot = DFA315_eot;
            this.eof = DFA315_eof;
            this.min = DFA315_min;
            this.max = DFA315_max;
            this.accept = DFA315_accept;
            this.special = DFA315_special;
            this.transition = DFA315_transition;
        }
        public String getDescription() {
            return "1263:110: ( ( ws )? sass_else )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA335_eotS =
        "\4\uffff";
    static final String DFA335_eofS =
        "\4\uffff";
    static final String DFA335_minS =
        "\2\5\2\uffff";
    static final String DFA335_maxS =
        "\2\126\2\uffff";
    static final String DFA335_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA335_specialS =
        "\4\uffff}>";
    static final String[] DFA335_transitionS = {
            "\1\3\11\uffff\1\2\104\uffff\3\1",
            "\1\3\11\uffff\1\2\104\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA335_eot = DFA.unpackEncodedString(DFA335_eotS);
    static final short[] DFA335_eof = DFA.unpackEncodedString(DFA335_eofS);
    static final char[] DFA335_min = DFA.unpackEncodedStringToUnsignedChars(DFA335_minS);
    static final char[] DFA335_max = DFA.unpackEncodedStringToUnsignedChars(DFA335_maxS);
    static final short[] DFA335_accept = DFA.unpackEncodedString(DFA335_acceptS);
    static final short[] DFA335_special = DFA.unpackEncodedString(DFA335_specialS);
    static final short[][] DFA335_transition;

    static {
        int numStates = DFA335_transitionS.length;
        DFA335_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA335_transition[i] = DFA.unpackEncodedString(DFA335_transitionS[i]);
        }
    }

    class DFA335 extends DFA {

        public DFA335(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 335;
            this.eot = DFA335_eot;
            this.eof = DFA335_eof;
            this.min = DFA335_min;
            this.max = DFA335_max;
            this.accept = DFA335_accept;
            this.special = DFA335_special;
            this.transition = DFA335_transition;
        }
        public String getDescription() {
            return "391:22: ( ( ws )? IMPORTANT_SYM )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA356_eotS =
        "\4\uffff";
    static final String DFA356_eofS =
        "\4\uffff";
    static final String DFA356_minS =
        "\2\5\2\uffff";
    static final String DFA356_maxS =
        "\2\126\2\uffff";
    static final String DFA356_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA356_specialS =
        "\4\uffff}>";
    static final String[] DFA356_transitionS = {
            "\1\3\11\uffff\1\2\104\uffff\3\1",
            "\1\3\11\uffff\1\2\104\uffff\3\1",
            "",
            ""
    };

    static final short[] DFA356_eot = DFA.unpackEncodedString(DFA356_eotS);
    static final short[] DFA356_eof = DFA.unpackEncodedString(DFA356_eofS);
    static final char[] DFA356_min = DFA.unpackEncodedStringToUnsignedChars(DFA356_minS);
    static final char[] DFA356_max = DFA.unpackEncodedStringToUnsignedChars(DFA356_maxS);
    static final short[] DFA356_accept = DFA.unpackEncodedString(DFA356_acceptS);
    static final short[] DFA356_special = DFA.unpackEncodedString(DFA356_specialS);
    static final short[][] DFA356_transition;

    static {
        int numStates = DFA356_transitionS.length;
        DFA356_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA356_transition[i] = DFA.unpackEncodedString(DFA356_transitionS[i]);
        }
    }

    class DFA356 extends DFA {

        public DFA356(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 356;
            this.eot = DFA356_eot;
            this.eof = DFA356_eof;
            this.min = DFA356_min;
            this.max = DFA356_max;
            this.accept = DFA356_accept;
            this.special = DFA356_special;
            this.transition = DFA356_transition;
        }
        public String getDescription() {
            return "638:22: ( ( ws )? IMPORTANT_SYM )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA365_eotS =
        "\5\uffff";
    static final String DFA365_eofS =
        "\5\uffff";
    static final String DFA365_minS =
        "\2\4\3\uffff";
    static final String DFA365_maxS =
        "\2\144\3\uffff";
    static final String DFA365_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA365_specialS =
        "\5\uffff}>";
    static final String[] DFA365_transitionS = {
            "\1\3\1\uffff\5\3\1\2\1\3\6\uffff\1\3\3\uffff\2\3\3\uffff\25"+
            "\3\1\2\2\3\1\uffff\3\3\17\uffff\15\3\3\1\1\uffff\15\3",
            "\1\4\1\uffff\5\4\1\2\1\4\6\uffff\1\4\3\uffff\2\4\3\uffff\25"+
            "\4\1\2\2\4\1\uffff\3\4\17\uffff\15\4\3\1\1\uffff\15\4",
            "",
            "",
            ""
    };

    static final short[] DFA365_eot = DFA.unpackEncodedString(DFA365_eotS);
    static final short[] DFA365_eof = DFA.unpackEncodedString(DFA365_eofS);
    static final char[] DFA365_min = DFA.unpackEncodedStringToUnsignedChars(DFA365_minS);
    static final char[] DFA365_max = DFA.unpackEncodedStringToUnsignedChars(DFA365_maxS);
    static final short[] DFA365_accept = DFA.unpackEncodedString(DFA365_acceptS);
    static final short[] DFA365_special = DFA.unpackEncodedString(DFA365_specialS);
    static final short[][] DFA365_transition;

    static {
        int numStates = DFA365_transitionS.length;
        DFA365_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA365_transition[i] = DFA.unpackEncodedString(DFA365_transitionS[i]);
        }
    }

    class DFA365 extends DFA {

        public DFA365(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 365;
            this.eot = DFA365_eot;
            this.eof = DFA365_eof;
            this.min = DFA365_min;
            this.max = DFA365_max;
            this.accept = DFA365_accept;
            this.special = DFA365_special;
            this.transition = DFA365_transition;
        }
        public String getDescription() {
            return "865:15: ( ws | ( ( ws )? operator ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA370_eotS =
        "\5\uffff";
    static final String DFA370_eofS =
        "\5\uffff";
    static final String DFA370_minS =
        "\2\4\3\uffff";
    static final String DFA370_maxS =
        "\2\144\3\uffff";
    static final String DFA370_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA370_specialS =
        "\5\uffff}>";
    static final String[] DFA370_transitionS = {
            "\1\3\1\uffff\5\3\1\uffff\1\3\6\uffff\1\3\3\uffff\2\3\3\uffff"+
            "\25\3\1\2\2\3\1\uffff\3\3\17\uffff\15\3\3\1\1\uffff\15\3",
            "\1\4\1\uffff\5\4\1\uffff\1\4\6\uffff\1\4\3\uffff\2\4\3\uffff"+
            "\25\4\1\2\2\4\1\uffff\3\4\17\uffff\15\4\3\1\1\uffff\15\4",
            "",
            "",
            ""
    };

    static final short[] DFA370_eot = DFA.unpackEncodedString(DFA370_eotS);
    static final short[] DFA370_eof = DFA.unpackEncodedString(DFA370_eofS);
    static final char[] DFA370_min = DFA.unpackEncodedStringToUnsignedChars(DFA370_minS);
    static final char[] DFA370_max = DFA.unpackEncodedStringToUnsignedChars(DFA370_maxS);
    static final short[] DFA370_accept = DFA.unpackEncodedString(DFA370_acceptS);
    static final short[] DFA370_special = DFA.unpackEncodedString(DFA370_specialS);
    static final short[][] DFA370_transition;

    static {
        int numStates = DFA370_transitionS.length;
        DFA370_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA370_transition[i] = DFA.unpackEncodedString(DFA370_transitionS[i]);
        }
    }

    class DFA370 extends DFA {

        public DFA370(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 370;
            this.eot = DFA370_eot;
            this.eof = DFA370_eof;
            this.min = DFA370_min;
            this.max = DFA370_max;
            this.accept = DFA370_accept;
            this.special = DFA370_special;
            this.transition = DFA370_transition;
        }
        public String getDescription() {
            return "946:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
 

    public static final BitSet FOLLOW_ws_in_styleSheet125 = new BitSet(new long[]{0xBFFDFFFFD1C81E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_charSet_in_styleSheet135 = new BitSet(new long[]{0xBFFDFFFFD1C81E70L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_styleSheet137 = new BitSet(new long[]{0xBFFDFFFFD1C81E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_imports_in_styleSheet151 = new BitSet(new long[]{0xBFFDFFFFD1C81E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_namespaces_in_styleSheet162 = new BitSet(new long[]{0xBFFDFFFFD1C81E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_body_in_styleSheet174 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_styleSheet182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespace_in_namespaces199 = new BitSet(new long[]{0x0000000000000012L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_namespaces201 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_NAMESPACE_SYM_in_namespace217 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_namespace219 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_namespacePrefixName_in_namespace223 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_namespace225 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_namespace230 = new BitSet(new long[]{0x0000000000000020L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_namespace232 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_namespace235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_namespacePrefixName248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_resourceIdentifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARSET_SYM_in_charSet286 = new BitSet(new long[]{0x0000000000000080L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_charSet288 = new BitSet(new long[]{0x0000000000000080L,0x0000000000700000L});
    public static final BitSet FOLLOW_charSetValue_in_charSet291 = new BitSet(new long[]{0x0000000000000020L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_charSet293 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_charSet296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_charSetValue310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_imports324 = new BitSet(new long[]{0x0000000000000020L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_imports326 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_imports329 = new BitSet(new long[]{0x0000000000000402L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_imports331 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_IMPORT_SYM_in_importItem361 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_importItem363 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem366 = new BitSet(new long[]{0x0041FFFFD19E1652L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_ws_in_importItem376 = new BitSet(new long[]{0x0041FFFFD19E1650L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_mediaQueryList_in_importItem379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_SYM_in_importItem412 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_importItem414 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem417 = new BitSet(new long[]{0x0041FFFFD19E1E52L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_ws_in_importItem420 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_importItem423 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_importItem425 = new BitSet(new long[]{0x00000000000001C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem428 = new BitSet(new long[]{0x0041FFFFD19E1E52L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_ws_in_importItem440 = new BitSet(new long[]{0x0041FFFFD19E1650L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_mediaQueryList_in_importItem443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIA_SYM_in_media461 = new BitSet(new long[]{0x0041FFFFD19E1650L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_ws_in_media463 = new BitSet(new long[]{0x0041FFFFD19E1650L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_mediaQueryList_in_media482 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_media490 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_media497 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_media499 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_syncToFollow_in_media502 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_mediaBody_in_media512 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_media519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mediaBodyItem_in_mediaBody557 = new BitSet(new long[]{0xBFFDFFFFD1C81E72L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_mediaBody567 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_mediaBody570 = new BitSet(new long[]{0xBFFDFFFFD1C81E72L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_mediaBody574 = new BitSet(new long[]{0xBFFDFFFFD1C81E72L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_SEMI_in_mediaBody601 = new BitSet(new long[]{0xBFFDFFFFD1C81E72L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_mediaBody603 = new BitSet(new long[]{0xBFFDFFFFD1C81E72L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_cp_mixin_declaration_in_mediaBodyItem669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_mediaBodyItem703 = new BitSet(new long[]{0x0000000000008002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_mediaBodyItem706 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_mediaBodyItem709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_mediaBodyItem726 = new BitSet(new long[]{0x0000000000008002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_mediaBodyItem729 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_mediaBodyItem732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_mediaBodyItem771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_mediaBodyItem798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_extend_in_mediaBodyItem808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_debug_in_mediaBodyItem818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_control_in_mediaBodyItem828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_content_in_mediaBodyItem838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_mediaBodyItem846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_page_in_mediaBodyItem854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fontFace_in_mediaBodyItem862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vendorAtRule_in_mediaBodyItem870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_media_in_mediaBodyItem883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList897 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_mediaQueryList909 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_mediaQueryList912 = new BitSet(new long[]{0x0041FFFFD19E1650L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_ws_in_mediaQueryList914 = new BitSet(new long[]{0x0041FFFFD19E1650L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList917 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_mediaQueryOperator_in_mediaQuery938 = new BitSet(new long[]{0x00400000000E0040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery940 = new BitSet(new long[]{0x00400000000E0040L});
    public static final BitSet FOLLOW_mediaType_in_mediaQuery947 = new BitSet(new long[]{0x0000000000010002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery951 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_AND_in_mediaQuery954 = new BitSet(new long[]{0x0000000000100000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery956 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_mediaExpression_in_mediaQuery959 = new BitSet(new long[]{0x0000000000010002L,0x0000000000700000L});
    public static final BitSet FOLLOW_mediaExpression_in_mediaQuery970 = new BitSet(new long[]{0x0000000000010002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery974 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_AND_in_mediaQuery977 = new BitSet(new long[]{0x0000000000100000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery979 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_mediaExpression_in_mediaQuery982 = new BitSet(new long[]{0x0000000000010002L,0x0000000000700000L});
    public static final BitSet FOLLOW_cp_variable_in_mediaQuery995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_mediaQueryOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_mediaType1028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_mediaType1032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaType1038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_mediaExpression1058 = new BitSet(new long[]{0x0041FFFFD1881650L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_ws_in_mediaExpression1060 = new BitSet(new long[]{0x0041FFFFD1881650L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_mediaFeature_in_mediaExpression1063 = new BitSet(new long[]{0x0000000000600000L,0x0000000000700000L});
    public static final BitSet FOLLOW_mediaFeatureValue_in_mediaExpression1065 = new BitSet(new long[]{0x0000000000200000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_mediaExpression1068 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_mediaExpression1071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_mediaFeatureValue1096 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_COLON_in_mediaFeatureValue1099 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_mediaFeatureValue1101 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_mediaFeatureValue1121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_mediaFeatureValue1141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_mediaFeature1162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_mediaFeature1166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_mediaFeature1174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaFeature1178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bodyItem_in_body1215 = new BitSet(new long[]{0xBFFDFFFFD1C81E72L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_body1225 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_body1228 = new BitSet(new long[]{0xBFFDFFFFD1C81E72L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_body1232 = new BitSet(new long[]{0xBFFDFFFFD1C81E72L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_SEMI_in_body1259 = new BitSet(new long[]{0xBFFDFFFFD1C81E72L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_body1261 = new BitSet(new long[]{0xBFFDFFFFD1C81E72L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_cp_mixin_declaration_in_bodyItem1335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_bodyItem1368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_bodyItem1387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_bodyItem1396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_at_rule_in_bodyItem1408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_declaration_in_bodyItem1422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_bodyItem1445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_debug_in_bodyItem1459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_control_in_bodyItem1473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_function_declaration_in_bodyItem1487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_media_in_at_rule1517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_page_in_at_rule1525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_counterStyle_in_at_rule1533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fontFace_in_at_rule1541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vendorAtRule_in_at_rule1549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moz_document_in_vendorAtRule1566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_webkitKeyframes_in_vendorAtRule1570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_generic_at_rule_in_vendorAtRule1574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_atRuleId0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_IDENT_in_generic_at_rule1610 = new BitSet(new long[]{0x00000000000020C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_generic_at_rule1612 = new BitSet(new long[]{0x00000000000020C0L});
    public static final BitSet FOLLOW_atRuleId_in_generic_at_rule1617 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_generic_at_rule1619 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_generic_at_rule1634 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_syncTo_RBRACE_in_generic_at_rule1646 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_generic_at_rule1656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document1672 = new BitSet(new long[]{0x000000000E000100L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_moz_document1674 = new BitSet(new long[]{0x000000000E000100L,0x0000000000700000L});
    public static final BitSet FOLLOW_moz_document_function_in_moz_document1679 = new BitSet(new long[]{0x0000000000002800L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_moz_document1681 = new BitSet(new long[]{0x0000000000002800L});
    public static final BitSet FOLLOW_COMMA_in_moz_document1687 = new BitSet(new long[]{0x000000000E000100L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_moz_document1689 = new BitSet(new long[]{0x000000000E000100L,0x0000000000700000L});
    public static final BitSet FOLLOW_moz_document_function_in_moz_document1692 = new BitSet(new long[]{0x0000000000002800L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_moz_document1694 = new BitSet(new long[]{0x0000000000002800L});
    public static final BitSet FOLLOW_LBRACE_in_moz_document1701 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_moz_document1703 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_body_in_moz_document1708 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_moz_document1713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_moz_document_function0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes1754 = new BitSet(new long[]{0x00000000000000C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1756 = new BitSet(new long[]{0x00000000000000C0L});
    public static final BitSet FOLLOW_atRuleId_in_webkitKeyframes1759 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1761 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_webkitKeyframes1766 = new BitSet(new long[]{0x0000000020004040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1768 = new BitSet(new long[]{0x0000000020004040L});
    public static final BitSet FOLLOW_webkitKeyframesBlock_in_webkitKeyframes1775 = new BitSet(new long[]{0x0000000020004040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1777 = new BitSet(new long[]{0x0000000020004040L});
    public static final BitSet FOLLOW_RBRACE_in_webkitKeyframes1784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock1797 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock1799 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_webkitKeyframesBlock1803 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock1806 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_syncToFollow_in_webkitKeyframesBlock1809 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_declarations_in_webkitKeyframesBlock1813 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_webkitKeyframesBlock1817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_webkitKeyframeSelectors1832 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors1844 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_webkitKeyframeSelectors1847 = new BitSet(new long[]{0x0000000020000040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors1849 = new BitSet(new long[]{0x0000000020000040L});
    public static final BitSet FOLLOW_set_in_webkitKeyframeSelectors1852 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_PAGE_SYM_in_page1881 = new BitSet(new long[]{0x0000000000402040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_page1883 = new BitSet(new long[]{0x0000000000402040L});
    public static final BitSet FOLLOW_IDENT_in_page1888 = new BitSet(new long[]{0x0000000000402000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_page1890 = new BitSet(new long[]{0x0000000000402000L});
    public static final BitSet FOLLOW_pseudoPage_in_page1897 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_page1899 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_page1912 = new BitSet(new long[]{0x11C5FFFFD1885670L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_ws_in_page1914 = new BitSet(new long[]{0x11C5FFFFD1885670L,0x0000001FFF000080L});
    public static final BitSet FOLLOW_propertyDeclaration_in_page1957 = new BitSet(new long[]{0x0000000000004020L,0x0000000000700000L});
    public static final BitSet FOLLOW_margin_in_page1959 = new BitSet(new long[]{0x0000000000004020L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_page1962 = new BitSet(new long[]{0x0000000000004020L});
    public static final BitSet FOLLOW_SEMI_in_page1968 = new BitSet(new long[]{0x11C5FFFFD1885670L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_ws_in_page1970 = new BitSet(new long[]{0x11C5FFFFD1885670L,0x0000001FFF000080L});
    public static final BitSet FOLLOW_propertyDeclaration_in_page1975 = new BitSet(new long[]{0x0000000000004020L,0x0000000000700000L});
    public static final BitSet FOLLOW_margin_in_page1977 = new BitSet(new long[]{0x0000000000004020L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_page1980 = new BitSet(new long[]{0x0000000000004020L});
    public static final BitSet FOLLOW_RBRACE_in_page1995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNTER_STYLE_SYM_in_counterStyle2016 = new BitSet(new long[]{0x0000000000000040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_counterStyle2018 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_counterStyle2021 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_counterStyle2023 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_counterStyle2034 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_counterStyle2036 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_syncToDeclarationsRule_in_counterStyle2039 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_declarations_in_counterStyle2043 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_counterStyle2054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FONT_FACE_SYM_in_fontFace2075 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_fontFace2077 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_fontFace2088 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_fontFace2090 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_syncToDeclarationsRule_in_fontFace2093 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_declarations_in_fontFace2097 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_fontFace2108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_margin_sym_in_margin2123 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_margin2125 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_margin2128 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_margin2130 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_syncToDeclarationsRule_in_margin2133 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_declarations_in_margin2135 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_margin2138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_margin_sym0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_pseudoPage2367 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_pseudoPage2369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_unaryOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_declaration_interpolation_expression_in_property2484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_property2492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_property2501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_property2512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectorsGroup_in_rule2551 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_rule2553 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_rule2560 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_rule2562 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_syncToFollow_in_rule2565 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_declarations_in_rule2576 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_rule2583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_declarations2631 = new BitSet(new long[]{0xBFFDFFFFD1C81E72L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_declarations2641 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_declarations2644 = new BitSet(new long[]{0xBFFDFFFFD1C81E72L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_declarations2648 = new BitSet(new long[]{0xBFFDFFFFD1C81E72L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_SEMI_in_declarations2675 = new BitSet(new long[]{0xBFFDFFFFD1C81E72L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_declarations2677 = new BitSet(new long[]{0xBFFDFFFFD1C81E72L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_cp_variable_declaration_in_declaration2712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_nested_properties_in_declaration2725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_declaration2738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_declaration2778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_declaration_in_declaration2824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_declaration2858 = new BitSet(new long[]{0x0000000000008002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_declaration2861 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_declaration2864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_declaration2881 = new BitSet(new long[]{0x0000000000008002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_declaration2884 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_declaration2887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_declaration2906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_at_rule_in_declaration2917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_control_in_declaration2928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_extend_in_declaration2939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_debug_in_declaration2950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_content_in_declaration2961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_function_return_in_declaration2972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_declaration2983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_declaration2992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_selector_interpolation_expression_in_selectorsGroup3060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_in_selectorsGroup3073 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_selectorsGroup3076 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_selectorsGroup3079 = new BitSet(new long[]{0xBFFC000000480840L,0x0000400000700040L});
    public static final BitSet FOLLOW_ws_in_selectorsGroup3081 = new BitSet(new long[]{0xBFFC000000480840L,0x0000400000000040L});
    public static final BitSet FOLLOW_selector_in_selectorsGroup3084 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_combinator_in_selector3113 = new BitSet(new long[]{0xBFFC000000480840L,0x0000400000700040L});
    public static final BitSet FOLLOW_ws_in_selector3115 = new BitSet(new long[]{0xBFFC000000480840L,0x0000400000000040L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_selector3120 = new BitSet(new long[]{0xBFFC000000480842L,0x0000400000700040L});
    public static final BitSet FOLLOW_ws_in_selector3126 = new BitSet(new long[]{0x0038000000000000L});
    public static final BitSet FOLLOW_combinator_in_selector3129 = new BitSet(new long[]{0xBFFC000000480840L,0x0000400000700040L});
    public static final BitSet FOLLOW_ws_in_selector3131 = new BitSet(new long[]{0xBFFC000000480840L,0x0000400000000040L});
    public static final BitSet FOLLOW_ws_in_selector3135 = new BitSet(new long[]{0xBFFC000000480840L,0x0000400000000040L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_selector3139 = new BitSet(new long[]{0xBFFC000000480842L,0x0000400000700040L});
    public static final BitSet FOLLOW_set_in_combinator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeSelector_in_simpleSelectorSequence3192 = new BitSet(new long[]{0xBFFC000000480842L,0x0000400000700040L});
    public static final BitSet FOLLOW_ws_in_simpleSelectorSequence3202 = new BitSet(new long[]{0xBFFC000000480840L,0x0000400000000040L});
    public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence3205 = new BitSet(new long[]{0xBFFC000000480842L,0x0000400000700040L});
    public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence3216 = new BitSet(new long[]{0xBFFC000000480842L,0x0000400000700040L});
    public static final BitSet FOLLOW_ws_in_simpleSelectorSequence3226 = new BitSet(new long[]{0xBFFC000000480840L,0x0000400000000040L});
    public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence3229 = new BitSet(new long[]{0xBFFC000000480842L,0x0000400000700040L});
    public static final BitSet FOLLOW_set_in_esPred0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespacePrefix_in_typeSelector3342 = new BitSet(new long[]{0xB000000000080040L});
    public static final BitSet FOLLOW_elementName_in_typeSelector3346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespacePrefixName_in_namespacePrefix3361 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_STAR_in_namespacePrefix3365 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_PIPE_in_namespacePrefix3369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_extend_only_selector_in_elementSubsequent3408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_less_selector_interpolation_in_elementSubsequent3422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cssId_in_elementSubsequent3432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cssClass_in_elementSubsequent3441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_slAttribute_in_elementSubsequent3453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pseudo_in_elementSubsequent3465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_in_cssId3493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_cssId3515 = new BitSet(new long[]{0x4000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_NAME_in_cssId3532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_less_selector_interpolation_in_cssId3553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_cssClass3605 = new BitSet(new long[]{0x0000000000080040L,0x0000400000000000L});
    public static final BitSet FOLLOW_IDENT_in_cssClass3631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_cssClass3648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_less_selector_interpolation_in_cssClass3668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_elementName0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_slAttribute3739 = new BitSet(new long[]{0x3000000000000040L,0x0000000000700000L});
    public static final BitSet FOLLOW_namespacePrefix_in_slAttribute3746 = new BitSet(new long[]{0x3000000000000040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_slAttribute3749 = new BitSet(new long[]{0x3000000000000040L,0x0000000000700000L});
    public static final BitSet FOLLOW_slAttributeName_in_slAttribute3760 = new BitSet(new long[]{0x0000000000000000L,0x000000000070007FL});
    public static final BitSet FOLLOW_ws_in_slAttribute3762 = new BitSet(new long[]{0x0000000000000000L,0x000000000000007FL});
    public static final BitSet FOLLOW_set_in_slAttribute3804 = new BitSet(new long[]{0x00000000000000C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_slAttribute3984 = new BitSet(new long[]{0x00000000000000C0L,0x0000000000700000L});
    public static final BitSet FOLLOW_slAttributeValue_in_slAttribute4003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700040L});
    public static final BitSet FOLLOW_ws_in_slAttribute4021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RBRACKET_in_slAttribute4050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_slAttributeName4066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_slAttributeValue4080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_pseudo4140 = new BitSet(new long[]{0x00000000000C0040L});
    public static final BitSet FOLLOW_set_in_pseudo4204 = new BitSet(new long[]{0x0000000000100002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_pseudo4261 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_pseudo4264 = new BitSet(new long[]{0x10EDFFFFF1BC97D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_pseudo4266 = new BitSet(new long[]{0x10EDFFFFF1BC97D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_expression_in_pseudo4272 = new BitSet(new long[]{0x0000000000200000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_pseudo4274 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_STAR_in_pseudo4280 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_pseudo4285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_pseudo4364 = new BitSet(new long[]{0x0000000000100000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_pseudo4366 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_pseudo4369 = new BitSet(new long[]{0xBFFC000000680840L,0x0000400000700040L});
    public static final BitSet FOLLOW_ws_in_pseudo4371 = new BitSet(new long[]{0xBFFC000000680840L,0x0000400000000040L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_pseudo4374 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_pseudo4377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_propertyDeclaration4416 = new BitSet(new long[]{0x11C5FFFFD1881650L,0x0000001FFF000080L});
    public static final BitSet FOLLOW_property_in_propertyDeclaration4419 = new BitSet(new long[]{0x0000000000400000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4421 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_COLON_in_propertyDeclaration4424 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4426 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_propertyValue_in_propertyDeclaration4429 = new BitSet(new long[]{0x0000000000008002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4432 = new BitSet(new long[]{0x0000000000008000L,0x0000000000700000L});
    public static final BitSet FOLLOW_prio_in_propertyDeclaration4435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_propertyDeclaration4447 = new BitSet(new long[]{0x11C5FFFFD1881650L,0x0000001FFF000080L});
    public static final BitSet FOLLOW_property_in_propertyDeclaration4450 = new BitSet(new long[]{0x0000000000400000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4452 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_COLON_in_propertyDeclaration4455 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4457 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_cp_propertyValue_in_propertyDeclaration4460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_propertyValue4495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyValue_in_cp_propertyValue4503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertyValue4525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_expressionPredicate4561 = new BitSet(new long[]{0xEFFDFFFFFF7FDFF0L,0xFFFFFFFFFFFFFF7FL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_expressionPredicate4594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_syncTo_SEMI4712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_prio4767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_in_expression4788 = new BitSet(new long[]{0x00EFFFFFF1881FD2L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_expression4820 = new BitSet(new long[]{0x00EDFFFFF18817D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_ws_in_expression4825 = new BitSet(new long[]{0x0002000000000800L,0x0000000000700000L});
    public static final BitSet FOLLOW_operator_in_expression4828 = new BitSet(new long[]{0x00EDFFFFF18817D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_expression4830 = new BitSet(new long[]{0x00EDFFFFF18817D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_term_in_expression4839 = new BitSet(new long[]{0x00EFFFFFF1881FD2L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_unaryOperator_in_term4869 = new BitSet(new long[]{0x00EDFFFFF18817D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_term4871 = new BitSet(new long[]{0x00EDFFFFF18817D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_function_in_term4900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_term4913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_term4925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENTAGE_in_term4937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LENGTH_in_term4949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMS_in_term4961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REM_in_term4973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXS_in_term4985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANGLE_in_term4997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIME_in_term5009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FREQ_in_term5021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RESOLUTION_in_term5033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIMENSION_in_term5045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_term5062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_term5076 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_STRING_in_term5078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_JS_STRING_in_term5093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_term5105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_URI_in_term5117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hexColor_in_term5129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_term5143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_term5157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_term_symbol_in_term5171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENTAGE_SYMBOL_in_cp_term_symbol5198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionName_in_function5214 = new BitSet(new long[]{0x0000000000100000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_function5216 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_function5221 = new BitSet(new long[]{0x00EDFFFFF1BC97D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_function5223 = new BitSet(new long[]{0x00EDFFFFF1BC97D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_fnAttributes_in_function5250 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_function5281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_functionName5338 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_COLON_in_functionName5340 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_functionName5344 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_DOT_in_functionName5347 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_functionName5349 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_fnAttribute_in_fnAttributes5373 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_fnAttributes5376 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_fnAttributes5379 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_fnAttributes5381 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_fnAttribute_in_fnAttributes5384 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_fnAttributes5388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fnAttributeName_in_fnAttribute5426 = new BitSet(new long[]{0x0000000000400000L,0x0000000000700001L});
    public static final BitSet FOLLOW_ws_in_fnAttribute5428 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000001L});
    public static final BitSet FOLLOW_set_in_fnAttribute5431 = new BitSet(new long[]{0x00EDFFFFF19897D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_fnAttribute5437 = new BitSet(new long[]{0x00EDFFFFF19897D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_fnAttributeValue_in_fnAttribute5440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_in_fnAttribute5454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_fnAttribute5466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_fnAttributeName5494 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_DOT_in_fnAttributeName5497 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_fnAttributeName5499 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_fnAttributeName5519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_in_fnAttributeValue5544 = new BitSet(new long[]{0x00EFFFFFF18817D2L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_fnAttributeValue5576 = new BitSet(new long[]{0x00EDFFFFF18817D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_ws_in_fnAttributeValue5581 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_SOLIDUS_in_fnAttributeValue5584 = new BitSet(new long[]{0x00EDFFFFF18817D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_fnAttributeValue5586 = new BitSet(new long[]{0x00EDFFFFF18817D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_term_in_fnAttributeValue5595 = new BitSet(new long[]{0x00EFFFFFF18817D2L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_fnAttributeValue5616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_in_hexColor5634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ws5655 = new BitSet(new long[]{0x0000000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration5703 = new BitSet(new long[]{0x0000000000400000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5705 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_COLON_in_cp_variable_declaration5708 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5710 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration5713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration5736 = new BitSet(new long[]{0x0000000000400000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5738 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_COLON_in_cp_variable_declaration5741 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5743 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration5746 = new BitSet(new long[]{0x0000000000000002L,0x0000000000F00000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5749 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_SASS_DEFAULT_in_cp_variable_declaration5752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_cp_variable5792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_VAR_in_cp_variable5973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_in_cp_expression_list6001 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_expression_list6020 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_cp_expression_list6023 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression_list6025 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_cp_expression_list6028 = new BitSet(new long[]{0x0000000000000802L,0x0000000000700000L});
    public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression6065 = new BitSet(new long[]{0x00FDFFFFF19D97D2L,0x000007FFFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression6091 = new BitSet(new long[]{0x0010000000010000L,0x000007E000700000L});
    public static final BitSet FOLLOW_cp_expression_operator_in_cp_expression6094 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression6096 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression6100 = new BitSet(new long[]{0x00FDFFFFF19D97D2L,0x000007FFFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression6120 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression6123 = new BitSet(new long[]{0x00FDFFFFF19D97D2L,0x000007FFFF7FFF80L});
    public static final BitSet FOLLOW_set_in_cp_expression_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_cp_expression_atom6214 = new BitSet(new long[]{0x00EDFFFFF19897D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression_atom6216 = new BitSet(new long[]{0x00EDFFFFF19897D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_expression_atom6248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_cp_expression_atom6264 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression_atom6266 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_expression_atom6269 = new BitSet(new long[]{0x0000000000200000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_expression_atom6271 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_expression_atom6274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expressions6306 = new BitSet(new long[]{0x0000000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expressions6313 = new BitSet(new long[]{0x00EDFFFFF19897D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expressions6315 = new BitSet(new long[]{0x0000000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_cp_math_expression_atom_in_cp_math_expression6349 = new BitSet(new long[]{0x100E000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression6392 = new BitSet(new long[]{0x100E000000000000L});
    public static final BitSet FOLLOW_set_in_cp_math_expression6395 = new BitSet(new long[]{0x00EDFFFFF19897D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression6405 = new BitSet(new long[]{0x00EDFFFFF19897D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_atom_in_cp_math_expression6408 = new BitSet(new long[]{0x100E000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_term_in_cp_math_expression_atom6446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_cp_math_expression_atom6454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryOperator_in_cp_math_expression_atom6465 = new BitSet(new long[]{0x0000000000100000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression_atom6467 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_math_expression_atom6473 = new BitSet(new long[]{0x00EDFFFFF19897D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression_atom6475 = new BitSet(new long[]{0x00EDFFFFF19897D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expression_atom6478 = new BitSet(new long[]{0x0000000000200000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression_atom6480 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_math_expression_atom6483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_cp_mixin_declaration6523 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration6525 = new BitSet(new long[]{0x0000000000100000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6527 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration6530 = new BitSet(new long[]{0x0001FFFFD1A01610L,0x0000181FFF700080L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6532 = new BitSet(new long[]{0x0001FFFFD1A01610L,0x0000181FFF000080L});
    public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration6535 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration6538 = new BitSet(new long[]{0x0000000000002000L,0x0000200000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6541 = new BitSet(new long[]{0x0000000000000000L,0x0000200000700000L});
    public static final BitSet FOLLOW_less_mixin_guarded_in_cp_mixin_declaration6544 = new BitSet(new long[]{0x0000000000002000L,0x0000200000700000L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_cp_mixin_declaration6568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6570 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration6572 = new BitSet(new long[]{0x0000000000102000L,0x0000200000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6575 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration6578 = new BitSet(new long[]{0x0001FFFFD1A01610L,0x0000181FFF700080L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6580 = new BitSet(new long[]{0x0001FFFFD1A01610L,0x0000181FFF000080L});
    public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration6583 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration6586 = new BitSet(new long[]{0x0000000000002000L,0x0000200000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6600 = new BitSet(new long[]{0x0000000000002000L,0x0000200000700000L});
    public static final BitSet FOLLOW_cp_mixin_block_in_cp_mixin_declaration6603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_cp_mixin_call6643 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call6645 = new BitSet(new long[]{0x0000000000100002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6648 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_call6651 = new BitSet(new long[]{0x00EDFFFFF1BC97D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6653 = new BitSet(new long[]{0x00EDFFFFF1BC97D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_mixin_call_args_in_cp_mixin_call6656 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_call6659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_INCLUDE_in_cp_mixin_call6683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6685 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call6687 = new BitSet(new long[]{0x0000000000102002L,0x0000200000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6690 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_call6693 = new BitSet(new long[]{0x00EDFFFFF1BC97D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6695 = new BitSet(new long[]{0x00EDFFFFF1BC97D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_mixin_call_args_in_cp_mixin_call6698 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_call6701 = new BitSet(new long[]{0x0000000000002002L,0x0000200000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6706 = new BitSet(new long[]{0x0000000000002000L,0x0000200000700000L});
    public static final BitSet FOLLOW_cp_mixin_block_in_cp_mixin_call6709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_cp_mixin_block6742 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_block6744 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_syncToFollow_in_cp_mixin_block6747 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_declarations_in_cp_mixin_block6757 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_cp_mixin_block6764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_cp_mixin_name6793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6829 = new BitSet(new long[]{0x0000000000000822L,0x0000080000000000L});
    public static final BitSet FOLLOW_set_in_cp_mixin_call_args6833 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_args6841 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6844 = new BitSet(new long[]{0x0000000000000822L,0x0000080000000000L});
    public static final BitSet FOLLOW_CP_DOTS_in_cp_mixin_call_args6849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_cp_mixin_call_arg6888 = new BitSet(new long[]{0x0000000000400000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6890 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_COLON_in_cp_mixin_call_arg6893 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6895 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg6898 = new BitSet(new long[]{0x0000000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg6910 = new BitSet(new long[]{0x0000000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_arg_in_cp_args_list6970 = new BitSet(new long[]{0x0000000000000822L,0x0000180000000000L});
    public static final BitSet FOLLOW_set_in_cp_args_list6974 = new BitSet(new long[]{0x0001FFFFD1801610L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_ws_in_cp_args_list6984 = new BitSet(new long[]{0x0001FFFFD1801610L,0x0000001FFF000080L});
    public static final BitSet FOLLOW_cp_arg_in_cp_args_list6987 = new BitSet(new long[]{0x0000000000000822L,0x0000180000000000L});
    public static final BitSet FOLLOW_set_in_cp_args_list6995 = new BitSet(new long[]{0x0000000000000000L,0x0000180000700000L});
    public static final BitSet FOLLOW_ws_in_cp_args_list7003 = new BitSet(new long[]{0x0000000000000000L,0x0000180000000000L});
    public static final BitSet FOLLOW_set_in_cp_args_list7009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_cp_args_list7031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_cp_arg7063 = new BitSet(new long[]{0x0000000000400002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_arg7065 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_COLON_in_cp_arg7070 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_arg7072 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_cp_arg7075 = new BitSet(new long[]{0x0000000000000002L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_cp_arg7077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_WHEN_in_less_mixin_guarded7103 = new BitSet(new long[]{0x0000000000140000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_less_mixin_guarded7105 = new BitSet(new long[]{0x0000000000140000L,0x0000000000700000L});
    public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded7108 = new BitSet(new long[]{0x0000000000010802L});
    public static final BitSet FOLLOW_set_in_less_mixin_guarded7112 = new BitSet(new long[]{0x0000000000140000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_less_mixin_guarded7120 = new BitSet(new long[]{0x0000000000140000L,0x0000000000700000L});
    public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded7123 = new BitSet(new long[]{0x0000000000010802L});
    public static final BitSet FOLLOW_NOT_in_less_condition7153 = new BitSet(new long[]{0x0000000000100000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_less_condition7155 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_less_condition7164 = new BitSet(new long[]{0x0001FFFFD1801650L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_ws_in_less_condition7166 = new BitSet(new long[]{0x0001FFFFD1801650L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_cp_variable_in_less_condition7194 = new BitSet(new long[]{0x0010000000200000L,0x0000070000700001L});
    public static final BitSet FOLLOW_less_function_in_condition_in_less_condition7198 = new BitSet(new long[]{0x0010000000200000L,0x0000070000700001L});
    public static final BitSet FOLLOW_ws_in_less_condition7201 = new BitSet(new long[]{0x0010000000200000L,0x0000070000000001L});
    public static final BitSet FOLLOW_less_condition_operator_in_less_condition7205 = new BitSet(new long[]{0x00EDFFFFF19897D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_less_condition7207 = new BitSet(new long[]{0x00EDFFFFF19897D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_less_condition7210 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_less_condition7236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_less_fn_name_in_less_function_in_condition7262 = new BitSet(new long[]{0x0000000000100000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_less_function_in_condition7264 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_less_function_in_condition7267 = new BitSet(new long[]{0x0001FFFFD1801610L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_ws_in_less_function_in_condition7269 = new BitSet(new long[]{0x0001FFFFD1801610L,0x0000001FFF000080L});
    public static final BitSet FOLLOW_cp_variable_in_less_function_in_condition7272 = new BitSet(new long[]{0x0000000000200000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_less_function_in_condition7274 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_less_function_in_condition7277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_less_fn_name7299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_less_condition_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_SIGN_in_less_selector_interpolation7361 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_less_selector_interpolation7363 = new BitSet(new long[]{0x0000000000000040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_less_selector_interpolation7365 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_less_selector_interpolation7368 = new BitSet(new long[]{0x0000000000004000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_less_selector_interpolation7370 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_less_selector_interpolation7373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7422 = new BitSet(new long[]{0x93D4000000400842L,0x0000000000700040L});
    public static final BitSet FOLLOW_set_in_sass_selector_interpolation_expression7450 = new BitSet(new long[]{0x93D4000000400842L,0x0000000000700040L});
    public static final BitSet FOLLOW_ws_in_sass_selector_interpolation_expression7532 = new BitSet(new long[]{0x93D4000000400840L,0x0000000000000040L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7569 = new BitSet(new long[]{0x93D4000000400842L,0x0000000000700040L});
    public static final BitSet FOLLOW_set_in_sass_selector_interpolation_expression7605 = new BitSet(new long[]{0x93D4000000400842L,0x0000000000700040L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7725 = new BitSet(new long[]{0x01C4000000000042L,0x0000000000700000L});
    public static final BitSet FOLLOW_set_in_sass_declaration_interpolation_expression7753 = new BitSet(new long[]{0x01C4000000000042L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_declaration_interpolation_expression7806 = new BitSet(new long[]{0x01C4000000000040L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7843 = new BitSet(new long[]{0x01C4000000000042L,0x0000000000700000L});
    public static final BitSet FOLLOW_set_in_sass_declaration_interpolation_expression7879 = new BitSet(new long[]{0x01C4000000000042L,0x0000000000700000L});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var7952 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_sass_interpolation_expression_var7954 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_sass_interpolation_expression_var7956 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_interpolation_expression_var7958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_sass_nested_properties8002 = new BitSet(new long[]{0x0000000000400000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties8004 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_COLON_in_sass_nested_properties8007 = new BitSet(new long[]{0x00EDFFFFF19CB7D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties8009 = new BitSet(new long[]{0x00EDFFFFF19CB7D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_propertyValue_in_sass_nested_properties8013 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties8015 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_sass_nested_properties8020 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties8022 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_syncToFollow_in_sass_nested_properties8025 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_declarations_in_sass_nested_properties8027 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_nested_properties8030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_EXTEND_in_sass_extend8051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_extend8053 = new BitSet(new long[]{0xBFFC000000480840L,0x0000400000000040L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_sass_extend8055 = new BitSet(new long[]{0x0000000000000002L,0x0000800000700000L});
    public static final BitSet FOLLOW_ws_in_sass_extend8058 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_SASS_OPTIONAL_in_sass_extend8061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector8088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_sass_debug8109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_debug8119 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_sass_debug8121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_if_in_sass_control8146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_for_in_sass_control8150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_each_in_sass_control8154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_while_in_sass_control8158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_IF_in_sass_if8179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_if8181 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_sass_control_expression_in_sass_if8183 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_if8185 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_if8188 = new BitSet(new long[]{0x0000000000000002L,0x0000000080700000L});
    public static final BitSet FOLLOW_ws_in_sass_if8191 = new BitSet(new long[]{0x0000000000000000L,0x0000000080700000L});
    public static final BitSet FOLLOW_sass_else_in_sass_if8194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_ELSE_in_sass_else8221 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_else8223 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_else8226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_ELSE_in_sass_else8239 = new BitSet(new long[]{0x0000000000000040L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_else8241 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_else8246 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_sass_else8250 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_sass_control_expression_in_sass_else8253 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_else8255 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_else8258 = new BitSet(new long[]{0x0000000000000002L,0x0000000080700000L});
    public static final BitSet FOLLOW_ws_in_sass_else8261 = new BitSet(new long[]{0x0000000000000000L,0x0000000080700000L});
    public static final BitSet FOLLOW_sass_else_in_sass_else8264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_in_sass_control_expression8287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_FOR_in_sass_for8312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_for8314 = new BitSet(new long[]{0x0001FFFFD1801610L,0x0000001FFF000080L});
    public static final BitSet FOLLOW_cp_variable_in_sass_for8316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_for8318 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_for8322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_for8326 = new BitSet(new long[]{0x00EDFFFFF19897D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_sass_for8328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_for8330 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_for8334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_for8338 = new BitSet(new long[]{0x00EDFFFFF19897D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_sass_for8340 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_for8342 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_for8345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_EACH_in_sass_each8366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_each8368 = new BitSet(new long[]{0x0001FFFFD1801610L,0x0000001FFF000080L});
    public static final BitSet FOLLOW_cp_variable_in_sass_each8370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_each8372 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_each8376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_each8380 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_list_in_sass_each8382 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_each8384 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_each8387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_WHILE_in_sass_while8412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_while8414 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_sass_control_expression_in_sass_while8416 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_while8418 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_while8421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_sass_control_block8442 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_sass_control_block8444 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_declarations_in_sass_control_block8447 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_control_block8450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_FUNCTION_in_sass_function_declaration8496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration8498 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_sass_function_name_in_sass_function_declaration8500 = new BitSet(new long[]{0x0000000000100000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration8502 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_sass_function_declaration8505 = new BitSet(new long[]{0x0001FFFFD1A01610L,0x0000181FFF000080L});
    public static final BitSet FOLLOW_cp_args_list_in_sass_function_declaration8507 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_RPAREN_in_sass_function_declaration8510 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration8512 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_sass_function_declaration8515 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF7000C0L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration8517 = new BitSet(new long[]{0xBFFDFFFFD1C85E70L,0x0000401FFF0000C0L});
    public static final BitSet FOLLOW_declarations_in_sass_function_declaration8520 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_function_declaration8523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_sass_function_name8548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_RETURN_in_sass_function_return8569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_sass_function_return8571 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_sass_function_return8573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_CONTENT_in_sass_content8598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred1_Css3370 = new BitSet(new long[]{0x0041FFFFD19E1650L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_mediaQueryList_in_synpred1_Css3373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred2_Css3434 = new BitSet(new long[]{0x0041FFFFD19E1650L,0x0000001FFF700080L});
    public static final BitSet FOLLOW_mediaQueryList_in_synpred2_Css3437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred3_Css3561 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred3_Css3564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_synpred4_Css3635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred4_Css3640 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_synpred4_Css3642 = new BitSet(new long[]{0x0000000000100000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_synpred4_Css3644 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred4_Css3647 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred4_Css3650 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_RPAREN_in_synpred4_Css3655 = new BitSet(new long[]{0xFFFFFFFFFFFFFFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred4_Css3657 = new BitSet(new long[]{0xFFFFFFFFFFFFFFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_LBRACE_in_synpred4_Css3665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred5_Css3684 = new BitSet(new long[]{0x0000000000008020L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_synpred5_Css3687 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_synpred5_Css3690 = new BitSet(new long[]{0x0000000000000020L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_synpred5_Css3694 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred5_Css3697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred6_Css3720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred7_Css3743 = new BitSet(new long[]{0xFFFFFFFFFFFF9FD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_COLON_in_synpred7_Css3755 = new BitSet(new long[]{0xFFFFFFFFFFFF9FD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred7_Css3757 = new BitSet(new long[]{0xFFFFFFFFFFFF9FF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_SEMI_in_synpred7_Css3767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_declaration_interpolation_expression_in_synpred8_Css3780 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_COLON_in_synpred8_Css3782 = new BitSet(new long[]{0xFFFFFFFFFFFF9FD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred8_Css3784 = new BitSet(new long[]{0xFFFFFFFFFFFF9FF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_SEMI_in_synpred8_Css3794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred9_Css3902 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred9_Css3905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred10_Css31219 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred10_Css31222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_synpred11_Css31299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred11_Css31304 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_synpred11_Css31306 = new BitSet(new long[]{0x0000000000100000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_synpred11_Css31308 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred11_Css31311 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred11_Css31314 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_RPAREN_in_synpred11_Css31319 = new BitSet(new long[]{0xFFFFFFFFFFFFBFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred11_Css31321 = new BitSet(new long[]{0xFFFFFFFFFFFFBFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_LBRACE_in_synpred11_Css31331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred12_Css31357 = new BitSet(new long[]{0x0000000000000020L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_synpred12_Css31359 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred12_Css31362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred13_Css31381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred14_Css32471 = new BitSet(new long[]{0xFFFFFFFFFFBFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_synpred14_Css32479 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred14_Css32481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred15_Css32635 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred15_Css32638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_declaration_in_synpred16_Css32709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_nested_properties_in_synpred17_Css32722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_synpred18_Css32735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_synpred19_Css32753 = new BitSet(new long[]{0x0000000000400000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_synpred19_Css32755 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_COLON_in_synpred19_Css32758 = new BitSet(new long[]{0xFFFFFFFFFFFFDFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred19_Css32760 = new BitSet(new long[]{0xFFFFFFFFFFFFDFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred19_Css32770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_synpred20_Css32788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred20_Css32793 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_synpred20_Css32795 = new BitSet(new long[]{0x0000000000100000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_synpred20_Css32797 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred20_Css32800 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred20_Css32803 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_RPAREN_in_synpred20_Css32808 = new BitSet(new long[]{0xFFFFFFFFFFFFBFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_set_in_synpred20_Css32810 = new BitSet(new long[]{0xFFFFFFFFFFFFBFD0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_LBRACE_in_synpred20_Css32820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred21_Css32839 = new BitSet(new long[]{0x0000000000008020L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_synpred21_Css32842 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_synpred21_Css32845 = new BitSet(new long[]{0x0000000000000020L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_synpred21_Css32849 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred21_Css32852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred22_Css32875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectorsGroup_in_synpred23_Css32898 = new BitSet(new long[]{0x0000000000002000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_synpred23_Css32900 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred23_Css32903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred24_Css33042 = new BitSet(new long[]{0xFFFFFFFFFFFFDFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_synpred24_Css33054 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred24_Css33056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred25_Css33196 = new BitSet(new long[]{0x0FC0000000400000L});
    public static final BitSet FOLLOW_esPred_in_synpred25_Css33199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred26_Css33220 = new BitSet(new long[]{0x0FC0000000400000L});
    public static final BitSet FOLLOW_esPred_in_synpred26_Css33223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred27_Css33330 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_PIPE_in_synpred27_Css33339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred28_Css34795 = new BitSet(new long[]{0x00EDFFFFF18817D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_ws_in_synpred28_Css34800 = new BitSet(new long[]{0x0002000000000800L,0x0000000000700000L});
    public static final BitSet FOLLOW_operator_in_synpred28_Css34803 = new BitSet(new long[]{0x00EDFFFFF18817D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_synpred28_Css34805 = new BitSet(new long[]{0x00EDFFFFF18817D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_term_in_synpred28_Css34814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionName_in_synpred29_Css34892 = new BitSet(new long[]{0x0000000000100000L,0x0000000000700000L});
    public static final BitSet FOLLOW_ws_in_synpred29_Css34894 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred29_Css34897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fnAttributeName_in_synpred30_Css35413 = new BitSet(new long[]{0x0000000000400000L,0x0000000000700001L});
    public static final BitSet FOLLOW_ws_in_synpred30_Css35415 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000001L});
    public static final BitSet FOLLOW_set_in_synpred30_Css35418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred31_Css35551 = new BitSet(new long[]{0x00EDFFFFF18817D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_ws_in_synpred31_Css35556 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_SOLIDUS_in_synpred31_Css35559 = new BitSet(new long[]{0x00EDFFFFF18817D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_synpred31_Css35561 = new BitSet(new long[]{0x00EDFFFFF18817D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_term_in_synpred31_Css35570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred32_Css36009 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred32_Css36012 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF7FFF80L});
    public static final BitSet FOLLOW_ws_in_synpred32_Css36014 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_synpred32_Css36017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred33_Css36084 = new BitSet(new long[]{0x0010000000010000L,0x000007E000700000L});
    public static final BitSet FOLLOW_cp_expression_operator_in_synpred33_Css36087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred34_Css36114 = new BitSet(new long[]{0x00EDFFFFF19C97D0L,0x0000001FFF0FFF80L});
    public static final BitSet FOLLOW_cp_expression_atom_in_synpred34_Css36117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_math_expression_in_synpred35_Css36245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred36_Css36376 = new BitSet(new long[]{0x100E000000000000L});
    public static final BitSet FOLLOW_set_in_synpred36_Css36379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred37_Css37419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred38_Css37566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred39_Css37722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred40_Css37840 = new BitSet(new long[]{0x0000000000000002L});

}