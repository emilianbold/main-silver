// $ANTLR 3.5.2 /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g 2014-07-09 10:12:33

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2011 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2011 Sun Microsystems, Inc.
 */
package org.netbeans.modules.css.lib;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.debug.*;
import java.io.IOException;
@SuppressWarnings("all")
public class Css3Parser extends DebugParser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "AND", "ANGLE", "AT_IDENT", 
		"AT_SIGN", "B", "BEGINS", "BOTTOMCENTER_SYM", "BOTTOMLEFTCORNER_SYM", 
		"BOTTOMLEFT_SYM", "BOTTOMRIGHTCORNER_SYM", "BOTTOMRIGHT_SYM", "C", "CDC", 
		"CDO", "CHARSET_SYM", "COLON", "COMMA", "COMMENT", "CONTAINS", "COUNTER_STYLE_SYM", 
		"CP_DOTS", "CP_EQ", "CP_NOT_EQ", "D", "DASHMATCH", "DCOLON", "DIMENSION", 
		"DOT", "E", "EMS", "ENDS", "ESCAPE", "EXCLAMATION_MARK", "EXS", "F", "FONT_FACE_SYM", 
		"FREQ", "G", "GEN", "GREATER", "GREATER_OR_EQ", "H", "HASH", "HASH_SYMBOL", 
		"HEXCHAR", "I", "IDENT", "IMPORTANT_SYM", "IMPORT_SYM", "INCLUDES", "INVALID", 
		"J", "K", "L", "LBRACE", "LBRACKET", "LEFTBOTTOM_SYM", "LEFTMIDDLE_SYM", 
		"LEFTTOP_SYM", "LENGTH", "LESS", "LESS_AND", "LESS_IMPORT_TYPE", "LESS_JS_STRING", 
		"LESS_OR_EQ", "LESS_REST", "LESS_WHEN", "LINE_COMMENT", "LPAREN", "M", 
		"MEDIA_SYM", "MINUS", "MOZ_DOCUMENT_SYM", "MOZ_DOMAIN", "MOZ_REGEXP", 
		"MOZ_URL_PREFIX", "N", "NAME", "NAMESPACE_SYM", "NL", "NMCHAR", "NMSTART", 
		"NONASCII", "NOT", "NUMBER", "O", "ONLY", "OPEQ", "OR", "P", "PAGE_SYM", 
		"PERCENTAGE", "PERCENTAGE_SYMBOL", "PIPE", "PLUS", "Q", "R", "RBRACE", 
		"RBRACKET", "REM", "RESOLUTION", "RIGHTBOTTOM_SYM", "RIGHTMIDDLE_SYM", 
		"RIGHTTOP_SYM", "RPAREN", "S", "SASS_CONTENT", "SASS_DEBUG", "SASS_DEFAULT", 
		"SASS_EACH", "SASS_ELSE", "SASS_EXTEND", "SASS_EXTEND_ONLY_SELECTOR", 
		"SASS_FOR", "SASS_FUNCTION", "SASS_IF", "SASS_INCLUDE", "SASS_MIXIN", 
		"SASS_OPTIONAL", "SASS_RETURN", "SASS_VAR", "SASS_WARN", "SASS_WHILE", 
		"SEMI", "SOLIDUS", "STAR", "STRING", "T", "TILDE", "TIME", "TOPCENTER_SYM", 
		"TOPLEFTCORNER_SYM", "TOPLEFT_SYM", "TOPRIGHTCORNER_SYM", "TOPRIGHT_SYM", 
		"U", "UNICODE", "URI", "URL", "V", "W", "WEBKIT_KEYFRAMES_SYM", "WS", 
		"X", "Y", "Z"
	};
	public static final int EOF=-1;
	public static final int A=4;
	public static final int AND=5;
	public static final int ANGLE=6;
	public static final int AT_IDENT=7;
	public static final int AT_SIGN=8;
	public static final int B=9;
	public static final int BEGINS=10;
	public static final int BOTTOMCENTER_SYM=11;
	public static final int BOTTOMLEFTCORNER_SYM=12;
	public static final int BOTTOMLEFT_SYM=13;
	public static final int BOTTOMRIGHTCORNER_SYM=14;
	public static final int BOTTOMRIGHT_SYM=15;
	public static final int C=16;
	public static final int CDC=17;
	public static final int CDO=18;
	public static final int CHARSET_SYM=19;
	public static final int COLON=20;
	public static final int COMMA=21;
	public static final int COMMENT=22;
	public static final int CONTAINS=23;
	public static final int COUNTER_STYLE_SYM=24;
	public static final int CP_DOTS=25;
	public static final int CP_EQ=26;
	public static final int CP_NOT_EQ=27;
	public static final int D=28;
	public static final int DASHMATCH=29;
	public static final int DCOLON=30;
	public static final int DIMENSION=31;
	public static final int DOT=32;
	public static final int E=33;
	public static final int EMS=34;
	public static final int ENDS=35;
	public static final int ESCAPE=36;
	public static final int EXCLAMATION_MARK=37;
	public static final int EXS=38;
	public static final int F=39;
	public static final int FONT_FACE_SYM=40;
	public static final int FREQ=41;
	public static final int G=42;
	public static final int GEN=43;
	public static final int GREATER=44;
	public static final int GREATER_OR_EQ=45;
	public static final int H=46;
	public static final int HASH=47;
	public static final int HASH_SYMBOL=48;
	public static final int HEXCHAR=49;
	public static final int I=50;
	public static final int IDENT=51;
	public static final int IMPORTANT_SYM=52;
	public static final int IMPORT_SYM=53;
	public static final int INCLUDES=54;
	public static final int INVALID=55;
	public static final int J=56;
	public static final int K=57;
	public static final int L=58;
	public static final int LBRACE=59;
	public static final int LBRACKET=60;
	public static final int LEFTBOTTOM_SYM=61;
	public static final int LEFTMIDDLE_SYM=62;
	public static final int LEFTTOP_SYM=63;
	public static final int LENGTH=64;
	public static final int LESS=65;
	public static final int LESS_AND=66;
	public static final int LESS_IMPORT_TYPE=67;
	public static final int LESS_JS_STRING=68;
	public static final int LESS_OR_EQ=69;
	public static final int LESS_REST=70;
	public static final int LESS_WHEN=71;
	public static final int LINE_COMMENT=72;
	public static final int LPAREN=73;
	public static final int M=74;
	public static final int MEDIA_SYM=75;
	public static final int MINUS=76;
	public static final int MOZ_DOCUMENT_SYM=77;
	public static final int MOZ_DOMAIN=78;
	public static final int MOZ_REGEXP=79;
	public static final int MOZ_URL_PREFIX=80;
	public static final int N=81;
	public static final int NAME=82;
	public static final int NAMESPACE_SYM=83;
	public static final int NL=84;
	public static final int NMCHAR=85;
	public static final int NMSTART=86;
	public static final int NONASCII=87;
	public static final int NOT=88;
	public static final int NUMBER=89;
	public static final int O=90;
	public static final int ONLY=91;
	public static final int OPEQ=92;
	public static final int OR=93;
	public static final int P=94;
	public static final int PAGE_SYM=95;
	public static final int PERCENTAGE=96;
	public static final int PERCENTAGE_SYMBOL=97;
	public static final int PIPE=98;
	public static final int PLUS=99;
	public static final int Q=100;
	public static final int R=101;
	public static final int RBRACE=102;
	public static final int RBRACKET=103;
	public static final int REM=104;
	public static final int RESOLUTION=105;
	public static final int RIGHTBOTTOM_SYM=106;
	public static final int RIGHTMIDDLE_SYM=107;
	public static final int RIGHTTOP_SYM=108;
	public static final int RPAREN=109;
	public static final int S=110;
	public static final int SASS_CONTENT=111;
	public static final int SASS_DEBUG=112;
	public static final int SASS_DEFAULT=113;
	public static final int SASS_EACH=114;
	public static final int SASS_ELSE=115;
	public static final int SASS_EXTEND=116;
	public static final int SASS_EXTEND_ONLY_SELECTOR=117;
	public static final int SASS_FOR=118;
	public static final int SASS_FUNCTION=119;
	public static final int SASS_IF=120;
	public static final int SASS_INCLUDE=121;
	public static final int SASS_MIXIN=122;
	public static final int SASS_OPTIONAL=123;
	public static final int SASS_RETURN=124;
	public static final int SASS_VAR=125;
	public static final int SASS_WARN=126;
	public static final int SASS_WHILE=127;
	public static final int SEMI=128;
	public static final int SOLIDUS=129;
	public static final int STAR=130;
	public static final int STRING=131;
	public static final int T=132;
	public static final int TILDE=133;
	public static final int TIME=134;
	public static final int TOPCENTER_SYM=135;
	public static final int TOPLEFTCORNER_SYM=136;
	public static final int TOPLEFT_SYM=137;
	public static final int TOPRIGHTCORNER_SYM=138;
	public static final int TOPRIGHT_SYM=139;
	public static final int U=140;
	public static final int UNICODE=141;
	public static final int URI=142;
	public static final int URL=143;
	public static final int V=144;
	public static final int W=145;
	public static final int WEBKIT_KEYFRAMES_SYM=146;
	public static final int WS=147;
	public static final int X=148;
	public static final int Y=149;
	public static final int Z=150;

	// delegates
	public Parser[] getDelegates() {
		return new Parser[] {};
	}

	// delegators


	public static final String[] ruleNames = new String[] {
		"invalidRule", "esPred", "sass_if", "rule", "synpred38_Css3", "cssId", 
		"synpred34_Css3", "mediaFeature", "less_fn_name", "mediaQuery", "cssClass", 
		"fontFace", "less_selector_interpolation", "synpred14_Css3", "less_condition_operator", 
		"synpred16_Css3", "fnAttributeValue", "elementName", "mediaFeatureValue", 
		"synpred40_Css3", "synpred26_Css3", "synpred41_Css3", "synpred1_Css3", 
		"synpred4_Css3", "synpred10_Css3", "synpred37_Css3", "moz_document", "synpred21_Css3", 
		"cp_mixin_call_args", "synpred27_Css3", "cp_term_symbol", "cp_mixin_name", 
		"vendorAtRule", "page", "margin_sym", "webkitKeyframeSelectors", "hexColor", 
		"cp_math_expression", "imports", "generic_at_rule", "fnAttributes", "cp_variable_declaration", 
		"sass_function_name", "namespace", "moz_document_function", "synpred13_Css3", 
		"namespaces", "cp_mixin_block", "sass_declaration_interpolation_expression", 
		"webkitKeyframesBlock", "fnAttributeName", "unaryOperator", "less_condition", 
		"synpred2_Css3", "synpred18_Css3", "synpred19_Css3", "propertyDeclaration", 
		"synpred29_Css3", "mediaExpression", "cp_expression", "less_function_in_condition", 
		"synpred5_Css3", "elementSubsequent", "synpred24_Css3", "synpred36_Css3", 
		"prio", "counterStyle", "functionName", "sass_nested_properties", "cp_expression_atom", 
		"synpred12_Css3", "mediaBody", "styleSheet", "cp_math_expressions", "sass_extend", 
		"synpred23_Css3", "namespacePrefix", "slAttributeName", "cp_expression_list", 
		"sass_function_declaration", "synpred15_Css3", "atRuleId", "declarations", 
		"sass_else", "combinator", "cp_mixin_declaration", "syncTo_SEMI", "sass_while", 
		"expression", "sass_selector_interpolation_expression", "sass_debug", 
		"mediaBodyItem", "slAttribute", "synpred28_Css3", "propertyValue", "cp_variable", 
		"cp_expression_operator", "cp_mixin_call", "cp_args_list", "declaration", 
		"synpred39_Css3", "sass_extend_only_selector", "syncToFollow", "synpred33_Css3", 
		"sass_control_expression", "synpred20_Css3", "typeSelector", "sass_for", 
		"synpred11_Css3", "at_rule", "webkitKeyframes", "synpred35_Css3", "synpred30_Css3", 
		"syncToDeclarationsRule", "less_mixin_guarded", "synpred31_Css3", "cp_propertyValue", 
		"cp_arg", "selector", "sass_content", "pseudoPage", "synpred6_Css3", "synpred7_Css3", 
		"media", "sass_control_block", "term", "ws", "property", "mediaType", 
		"charSetValue", "resourceIdentifier", "mediaQueryList", "charSet", "synpred32_Css3", 
		"bodyItem", "pseudo", "cp_math_expression_atom", "synpred25_Css3", "fnAttribute", 
		"sass_function_return", "synpred9_Css3", "slAttributeValue", "synpred8_Css3", 
		"cp_mixin_call_arg", "expressionPredicate", "operator", "namespacePrefixName", 
		"body", "margin", "sass_each", "synpred17_Css3", "synpred3_Css3", "mediaQueryOperator", 
		"selectorsGroup", "function", "sass_interpolation_expression_var", "simpleSelectorSequence", 
		"synpred22_Css3", "importItem", "syncTo_RBRACE", "sass_control"
	};

	public static final boolean[] decisionCanBacktrack = new boolean[] {
		false, // invalid decision
		false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, true, 
		    false, false, false, false, false, true, false, false, false, false, 
		    true, false, false, false, false, false, false, true, false, false, 
		    false, false, false, false, false, true, false, false, true, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, true, false, 
		    false, false, true, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    true, false, false, false, false, true, false, false, false, false, 
		    false, false, false, true, false, false, false, true, false, false, 
		    false, false, false, false, false, false, true, false, true, false, 
		    true, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, true, false, false, true, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    true, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, true, 
		    false, false, false, true, false, false, false, false, false, true, 
		    false, false, false, true, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, true, 
		    false, true, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false
	};

 
	public int ruleLevel = 0;
	public int getRuleLevel() { return ruleLevel; }
	public void incRuleLevel() { ruleLevel++; }
	public void decRuleLevel() { ruleLevel--; }
	public Css3Parser(TokenStream input) {
		this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT, new RecognizerSharedState());
	}
	public Css3Parser(TokenStream input, int port, RecognizerSharedState state) {
		super(input, state);
		DebugEventSocketProxy proxy =
			new DebugEventSocketProxy(this, port, null);

		setDebugListener(proxy);
		try {
			proxy.handshake();
		}
		catch (IOException ioe) {
			reportError(ioe);
		}
	}

	public Css3Parser(TokenStream input, DebugEventListener dbg) {
		super(input, dbg, new RecognizerSharedState());
	}

	protected boolean evalPredicate(boolean result, String predicate) {
		dbg.semanticPredicate(result, predicate);
		return result;
	}

	@Override public String[] getTokenNames() { return Css3Parser.tokenNames; }
	@Override public String getGrammarFileName() { return "/Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g"; }



	    protected boolean isLessSource() {
	        return false;
	    }

	    protected boolean isScssSource() {
	        return false;
	    }

	    private boolean isCssPreprocessorSource() {
	        return isLessSource() || isScssSource();
	    }

	    private boolean tokenNameEquals(String tokenImage) {
	        return tokenImage.equalsIgnoreCase(input.LT(1).getText());
	    }

	/**
	     * Use the current stacked followset to work out the valid tokens that
	     * can follow on from the current point in the parse, then recover by
	     * eating tokens that are not a member of the follow set we compute.
	     *
	     * This method is used whenever we wish to force a sync, even though
	     * the parser has not yet checked LA(1) for alt selection. This is useful
	     * in situations where only a subset of tokens can begin a new construct
	     * (such as the start of a new statement in a block) and we want to
	     * proactively detect garbage so that the current rule does not exit on
	     * on an exception.
	     *
	     * We could override recover() to make this the default behavior but that
	     * is too much like using a sledge hammer to crack a nut. We want finer
	     * grained control of the recovery and error mechanisms.
	     */
	    protected void syncToSet()
	    {
	        // Compute the followset that is in context wherever we are in the
	        // rule chain/stack
	        //
	         BitSet follow = state.following[state._fsp]; //computeContextSensitiveRuleFOLLOW();

	         syncToSet(follow);
	    }

	    protected void syncToSet(BitSet follow)
	    {
	        int mark = -1;

	        //create error-recovery node
	        dbg.enterRule(getGrammarFileName(), "recovery");

	        try {

	            mark = input.mark();

	            // Consume all tokens in the stream until we find a member of the follow
	            // set, which means the next production should be guaranteed to be happy.
	            //
	            while (! follow.member(input.LA(1)) ) {

	                if  (input.LA(1) == Token.EOF) {

	                    // Looks like we didn't find anything at all that can help us here
	                    // so we need to rewind to where we were and let normal error handling
	                    // bail out.
	                    //
	                    input.rewind();
	                    mark = -1;
	                    return;
	                }
	                input.consume();

	                // Now here, because you are consuming some tokens, yu will probably want
	                // to raise an error message such as "Spurious elements after the class member were discarded"
	                // using whatever your override of displayRecognitionError() routine does to record
	                // error messages. The exact error my depend on context etc.
	                //
	            }
	        } catch (Exception e) {

	          // Just ignore any errors here, we will just let the recognizer
	          // try to resync as normal - something must be very screwed.
	          //
	        }
	        finally {
	            dbg.exitRule(getGrammarFileName(), "recovery");

	            // Always release the mark we took
	            //
	            if  (mark != -1) {
	                input.release(mark);
	            }
	        }
	    }

	    /**
	         * synces to next RBRACE "}" taking nesting into account
	         */
	        protected void syncToRBRACE(int nest)
	            {

	                int mark = -1;
	                //create error-recovery node
	                //dbg.enterRule(getGrammarFileName(), "recovery");

	                try {
	                    mark = input.mark();
	                    for(;;) {
	                        //read char
	                        int c = input.LA(1);

	                        switch(c) {
	                            case Token.EOF:
	                                input.rewind();
	                                mark = -1;
	                                return ;
	                            case Css3Lexer.LBRACE:
	                                nest++;
	                                break;
	                            case Css3Lexer.RBRACE:
	                                nest--;
	                                if(nest == 0) {
	                                    //do not eat the final RBRACE
	                                    return ;
	                                }
	                        }

	                        input.consume();

	                    }

	                } catch (Exception e) {

	                  // Just ignore any errors here, we will just let the recognizer
	                  // try to resync as normal - something must be very screwed.
	                  //
	                }
	                finally {
	                    if  (mark != -1) {
	                        input.release(mark);
	                    }
	                    //dbg.exitRule(getGrammarFileName(), "recovery");
	                }
	            }




	// $ANTLR start "styleSheet"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:321:1: styleSheet : ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF ;
	public final void styleSheet() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "styleSheet");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(321, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:322:5: ( ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:6: ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF
			{
			dbg.location(323,6);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:6: ( ws )?
			int alt1=2;
			try { dbg.enterSubRule(1);
			try { dbg.enterDecision(1, decisionCanBacktrack[1]);

			int LA1_0 = input.LA(1);
			if ( (LA1_0==COMMENT||LA1_0==NL||LA1_0==WS) ) {
				alt1=1;
			}
			} finally {dbg.exitDecision(1);}

			switch (alt1) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:6: ws
					{
					dbg.location(323,6);
					pushFollow(FOLLOW_ws_in_styleSheet120);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(1);}
			dbg.location(324,6);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:6: ( charSet ( ws )? )?
			int alt3=2;
			try { dbg.enterSubRule(3);
			try { dbg.enterDecision(3, decisionCanBacktrack[3]);

			try {
				isCyclicDecision = true;
				alt3 = dfa3.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(3);}

			switch (alt3) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:8: charSet ( ws )?
					{
					dbg.location(324,8);
					pushFollow(FOLLOW_charSet_in_styleSheet130);
					charSet();
					state._fsp--;
					if (state.failed) return;dbg.location(324,16);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:16: ( ws )?
					int alt2=2;
					try { dbg.enterSubRule(2);
					try { dbg.enterDecision(2, decisionCanBacktrack[2]);

					int LA2_0 = input.LA(1);
					if ( (LA2_0==COMMENT||LA2_0==NL||LA2_0==WS) ) {
						alt2=1;
					}
					} finally {dbg.exitDecision(2);}

					switch (alt2) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:16: ws
							{
							dbg.location(324,16);
							pushFollow(FOLLOW_ws_in_styleSheet132);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(2);}

					}
					break;

			}
			} finally {dbg.exitSubRule(3);}
			dbg.location(325,9);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:9: ( imports )?
			int alt4=2;
			try { dbg.enterSubRule(4);
			try { dbg.enterDecision(4, decisionCanBacktrack[4]);

			int LA4_0 = input.LA(1);
			if ( (LA4_0==IMPORT_SYM) ) {
				int LA4_1 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt4=1;
				}
			}
			} finally {dbg.exitDecision(4);}

			switch (alt4) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:9: imports
					{
					dbg.location(325,9);
					pushFollow(FOLLOW_imports_in_styleSheet146);
					imports();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(4);}
			dbg.location(326,9);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:326:9: ( namespaces )?
			int alt5=2;
			try { dbg.enterSubRule(5);
			try { dbg.enterDecision(5, decisionCanBacktrack[5]);

			try {
				isCyclicDecision = true;
				alt5 = dfa5.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(5);}

			switch (alt5) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:326:9: namespaces
					{
					dbg.location(326,9);
					pushFollow(FOLLOW_namespaces_in_styleSheet157);
					namespaces();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(5);}
			dbg.location(327,9);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:9: ( body )?
			int alt6=2;
			try { dbg.enterSubRule(6);
			try { dbg.enterDecision(6, decisionCanBacktrack[6]);

			int LA6_0 = input.LA(1);
			if ( ((LA6_0 >= AT_IDENT && LA6_0 <= AT_SIGN)||(LA6_0 >= BOTTOMCENTER_SYM && LA6_0 <= BOTTOMRIGHT_SYM)||(LA6_0 >= CHARSET_SYM && LA6_0 <= COMMA)||LA6_0==COUNTER_STYLE_SYM||LA6_0==DCOLON||LA6_0==DOT||LA6_0==FONT_FACE_SYM||(LA6_0 >= GEN && LA6_0 <= GREATER)||(LA6_0 >= HASH && LA6_0 <= HASH_SYMBOL)||LA6_0==IDENT||LA6_0==IMPORT_SYM||(LA6_0 >= LBRACKET && LA6_0 <= LEFTTOP_SYM)||LA6_0==LESS_AND||(LA6_0 >= MEDIA_SYM && LA6_0 <= MOZ_DOCUMENT_SYM)||LA6_0==NAMESPACE_SYM||LA6_0==PAGE_SYM||(LA6_0 >= PIPE && LA6_0 <= PLUS)||LA6_0==RBRACKET||(LA6_0 >= RIGHTBOTTOM_SYM && LA6_0 <= RIGHTTOP_SYM)||(LA6_0 >= SASS_CONTENT && LA6_0 <= SASS_DEBUG)||(LA6_0 >= SASS_EACH && LA6_0 <= SASS_MIXIN)||(LA6_0 >= SASS_RETURN && LA6_0 <= SEMI)||LA6_0==STAR||LA6_0==TILDE||(LA6_0 >= TOPCENTER_SYM && LA6_0 <= TOPRIGHT_SYM)||LA6_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt6=1;
			}
			} finally {dbg.exitDecision(6);}

			switch (alt6) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:9: body
					{
					dbg.location(327,9);
					pushFollow(FOLLOW_body_in_styleSheet168);
					body();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(6);}
			dbg.location(328,6);
			match(input,EOF,FOLLOW_EOF_in_styleSheet176); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(329, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "styleSheet");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "styleSheet"



	// $ANTLR start "namespaces"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:331:1: namespaces : ( namespace ( ws )? )+ ;
	public final void namespaces() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "namespaces");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(331, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:332:2: ( ( namespace ( ws )? )+ )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:2: ( namespace ( ws )? )+
			{
			dbg.location(333,2);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:2: ( namespace ( ws )? )+
			int cnt8=0;
			try { dbg.enterSubRule(8);

			loop8:
			while (true) {
				int alt8=2;
				try { dbg.enterDecision(8, decisionCanBacktrack[8]);

				try {
					isCyclicDecision = true;
					alt8 = dfa8.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(8);}

				switch (alt8) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:4: namespace ( ws )?
					{
					dbg.location(333,4);
					pushFollow(FOLLOW_namespace_in_namespaces193);
					namespace();
					state._fsp--;
					if (state.failed) return;dbg.location(333,14);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:14: ( ws )?
					int alt7=2;
					try { dbg.enterSubRule(7);
					try { dbg.enterDecision(7, decisionCanBacktrack[7]);

					int LA7_0 = input.LA(1);
					if ( (LA7_0==COMMENT||LA7_0==NL||LA7_0==WS) ) {
						alt7=1;
					}
					} finally {dbg.exitDecision(7);}

					switch (alt7) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:14: ws
							{
							dbg.location(333,14);
							pushFollow(FOLLOW_ws_in_namespaces195);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(7);}

					}
					break;

				default :
					if ( cnt8 >= 1 ) break loop8;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(8, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt8++;
			}
			} finally {dbg.exitSubRule(8);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(334, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "namespaces");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "namespaces"



	// $ANTLR start "namespace"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:1: namespace : NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI ;
	public final void namespace() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "namespace");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(336, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:3: ( NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:5: NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI
			{
			dbg.location(337,5);
			match(input,NAMESPACE_SYM,FOLLOW_NAMESPACE_SYM_in_namespace211); if (state.failed) return;dbg.location(337,19);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:19: ( ws )?
			int alt9=2;
			try { dbg.enterSubRule(9);
			try { dbg.enterDecision(9, decisionCanBacktrack[9]);

			int LA9_0 = input.LA(1);
			if ( (LA9_0==COMMENT||LA9_0==NL||LA9_0==WS) ) {
				alt9=1;
			}
			} finally {dbg.exitDecision(9);}

			switch (alt9) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:19: ws
					{
					dbg.location(337,19);
					pushFollow(FOLLOW_ws_in_namespace213);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(9);}
			dbg.location(337,23);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:23: ( namespacePrefixName ( ws )? )?
			int alt11=2;
			try { dbg.enterSubRule(11);
			try { dbg.enterDecision(11, decisionCanBacktrack[11]);

			int LA11_0 = input.LA(1);
			if ( (LA11_0==IDENT) ) {
				alt11=1;
			}
			} finally {dbg.exitDecision(11);}

			switch (alt11) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:24: namespacePrefixName ( ws )?
					{
					dbg.location(337,24);
					pushFollow(FOLLOW_namespacePrefixName_in_namespace217);
					namespacePrefixName();
					state._fsp--;
					if (state.failed) return;dbg.location(337,44);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:44: ( ws )?
					int alt10=2;
					try { dbg.enterSubRule(10);
					try { dbg.enterDecision(10, decisionCanBacktrack[10]);

					int LA10_0 = input.LA(1);
					if ( (LA10_0==COMMENT||LA10_0==NL||LA10_0==WS) ) {
						alt10=1;
					}
					} finally {dbg.exitDecision(10);}

					switch (alt10) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:44: ws
							{
							dbg.location(337,44);
							pushFollow(FOLLOW_ws_in_namespace219);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(10);}

					}
					break;

			}
			} finally {dbg.exitSubRule(11);}
			dbg.location(337,50);
			pushFollow(FOLLOW_resourceIdentifier_in_namespace224);
			resourceIdentifier();
			state._fsp--;
			if (state.failed) return;dbg.location(337,69);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:69: ( ws )?
			int alt12=2;
			try { dbg.enterSubRule(12);
			try { dbg.enterDecision(12, decisionCanBacktrack[12]);

			int LA12_0 = input.LA(1);
			if ( (LA12_0==COMMENT||LA12_0==NL||LA12_0==WS) ) {
				alt12=1;
			}
			} finally {dbg.exitDecision(12);}

			switch (alt12) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:69: ws
					{
					dbg.location(337,69);
					pushFollow(FOLLOW_ws_in_namespace226);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(12);}
			dbg.location(337,73);
			match(input,SEMI,FOLLOW_SEMI_in_namespace229); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(338, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "namespace");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "namespace"



	// $ANTLR start "namespacePrefixName"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:340:1: namespacePrefixName : IDENT ;
	public final void namespacePrefixName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "namespacePrefixName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(340, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:341:3: ( IDENT )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:341:5: IDENT
			{
			dbg.location(341,5);
			match(input,IDENT,FOLLOW_IDENT_in_namespacePrefixName242); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(342, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "namespacePrefixName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "namespacePrefixName"



	// $ANTLR start "resourceIdentifier"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:344:1: resourceIdentifier : ( STRING | URI );
	public final void resourceIdentifier() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "resourceIdentifier");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(344, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:345:3: ( STRING | URI )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(345,3);
			if ( input.LA(1)==STRING||input.LA(1)==URI ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(346, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "resourceIdentifier");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "resourceIdentifier"



	// $ANTLR start "charSet"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:348:1: charSet : CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI ;
	public final void charSet() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "charSet");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(348, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:5: ( CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:9: CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI
			{
			dbg.location(349,9);
			match(input,CHARSET_SYM,FOLLOW_CHARSET_SYM_in_charSet276); if (state.failed) return;dbg.location(349,21);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:21: ( ws )?
			int alt13=2;
			try { dbg.enterSubRule(13);
			try { dbg.enterDecision(13, decisionCanBacktrack[13]);

			int LA13_0 = input.LA(1);
			if ( (LA13_0==COMMENT||LA13_0==NL||LA13_0==WS) ) {
				alt13=1;
			}
			} finally {dbg.exitDecision(13);}

			switch (alt13) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:21: ws
					{
					dbg.location(349,21);
					pushFollow(FOLLOW_ws_in_charSet278);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(13);}
			dbg.location(349,25);
			pushFollow(FOLLOW_charSetValue_in_charSet281);
			charSetValue();
			state._fsp--;
			if (state.failed) return;dbg.location(349,38);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:38: ( ws )?
			int alt14=2;
			try { dbg.enterSubRule(14);
			try { dbg.enterDecision(14, decisionCanBacktrack[14]);

			int LA14_0 = input.LA(1);
			if ( (LA14_0==COMMENT||LA14_0==NL||LA14_0==WS) ) {
				alt14=1;
			}
			} finally {dbg.exitDecision(14);}

			switch (alt14) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:38: ws
					{
					dbg.location(349,38);
					pushFollow(FOLLOW_ws_in_charSet283);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(14);}
			dbg.location(349,42);
			match(input,SEMI,FOLLOW_SEMI_in_charSet286); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(350, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "charSet");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "charSet"



	// $ANTLR start "charSetValue"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:352:1: charSetValue : STRING ;
	public final void charSetValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "charSetValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(352, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:353:2: ( STRING )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:353:4: STRING
			{
			dbg.location(353,4);
			match(input,STRING,FOLLOW_STRING_in_charSetValue300); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(354, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "charSetValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "charSetValue"



	// $ANTLR start "imports"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:356:1: imports : ( importItem ( ws )? SEMI ( ws )? )+ ;
	public final void imports() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "imports");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(356, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:357:2: ( ( importItem ( ws )? SEMI ( ws )? )+ )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:2: ( importItem ( ws )? SEMI ( ws )? )+
			{
			dbg.location(358,2);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:2: ( importItem ( ws )? SEMI ( ws )? )+
			int cnt17=0;
			try { dbg.enterSubRule(17);

			loop17:
			while (true) {
				int alt17=2;
				try { dbg.enterDecision(17, decisionCanBacktrack[17]);

				int LA17_0 = input.LA(1);
				if ( (LA17_0==IMPORT_SYM) ) {
					int LA17_27 = input.LA(2);
					if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
						alt17=1;
					}

				}

				} finally {dbg.exitDecision(17);}

				switch (alt17) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:4: importItem ( ws )? SEMI ( ws )?
					{
					dbg.location(358,4);
					pushFollow(FOLLOW_importItem_in_imports314);
					importItem();
					state._fsp--;
					if (state.failed) return;dbg.location(358,15);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:15: ( ws )?
					int alt15=2;
					try { dbg.enterSubRule(15);
					try { dbg.enterDecision(15, decisionCanBacktrack[15]);

					int LA15_0 = input.LA(1);
					if ( (LA15_0==COMMENT||LA15_0==NL||LA15_0==WS) ) {
						alt15=1;
					}
					} finally {dbg.exitDecision(15);}

					switch (alt15) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:15: ws
							{
							dbg.location(358,15);
							pushFollow(FOLLOW_ws_in_imports316);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(15);}
					dbg.location(358,19);
					match(input,SEMI,FOLLOW_SEMI_in_imports319); if (state.failed) return;dbg.location(358,24);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:24: ( ws )?
					int alt16=2;
					try { dbg.enterSubRule(16);
					try { dbg.enterDecision(16, decisionCanBacktrack[16]);

					int LA16_0 = input.LA(1);
					if ( (LA16_0==COMMENT||LA16_0==NL||LA16_0==WS) ) {
						alt16=1;
					}
					} finally {dbg.exitDecision(16);}

					switch (alt16) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:24: ws
							{
							dbg.location(358,24);
							pushFollow(FOLLOW_ws_in_imports321);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(16);}

					}
					break;

				default :
					if ( cnt17 >= 1 ) break loop17;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(17, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt17++;
			}
			} finally {dbg.exitSubRule(17);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(359, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "imports");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "imports"



	// $ANTLR start "importItem"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:361:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? ( LPAREN LESS_IMPORT_TYPE RPAREN ( ws )? )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? );
	public final void importItem() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "importItem");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(361, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:362:5: ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? ( LPAREN LESS_IMPORT_TYPE RPAREN ( ws )? )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? )
			int alt32=3;
			try { dbg.enterDecision(32, decisionCanBacktrack[32]);

			try {
				isCyclicDecision = true;
				alt32 = dfa32.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(32);}

			switch (alt32) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:9: IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					{
					dbg.location(363,9);
					match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem347); if (state.failed) return;dbg.location(363,20);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:20: ( ws )?
					int alt18=2;
					try { dbg.enterSubRule(18);
					try { dbg.enterDecision(18, decisionCanBacktrack[18]);

					int LA18_0 = input.LA(1);
					if ( (LA18_0==COMMENT||LA18_0==NL||LA18_0==WS) ) {
						alt18=1;
					}
					} finally {dbg.exitDecision(18);}

					switch (alt18) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:20: ws
							{
							dbg.location(363,20);
							pushFollow(FOLLOW_ws_in_importItem349);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(18);}
					dbg.location(363,24);
					pushFollow(FOLLOW_resourceIdentifier_in_importItem352);
					resourceIdentifier();
					state._fsp--;
					if (state.failed) return;dbg.location(363,43);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:43: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					int alt20=2;
					try { dbg.enterSubRule(20);
					try { dbg.enterDecision(20, decisionCanBacktrack[20]);

					int LA20_0 = input.LA(1);
					if ( (LA20_0==COMMENT||LA20_0==NL||LA20_0==WS) ) {
						int LA20_1 = input.LA(2);
						if ( (synpred1_Css3()) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==NOT||LA20_0==ONLY) && (synpred1_Css3())) {
						alt20=1;
					}
					else if ( (LA20_0==IDENT) ) {
						int LA20_3 = input.LA(2);
						if ( (synpred1_Css3()) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==GEN) ) {
						int LA20_4 = input.LA(2);
						if ( (synpred1_Css3()) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==HASH_SYMBOL) ) {
						int LA20_5 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==LPAREN) && (synpred1_Css3())) {
						alt20=1;
					}
					else if ( (LA20_0==SASS_MIXIN) ) {
						int LA20_7 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==SASS_VAR) ) {
						int LA20_8 = input.LA(2);
						if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==SASS_INCLUDE) ) {
						int LA20_12 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==SASS_EXTEND) ) {
						int LA20_13 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==SASS_DEBUG||LA20_0==SASS_WARN) ) {
						int LA20_16 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==SASS_IF) ) {
						int LA20_17 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==SASS_FOR) ) {
						int LA20_18 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==SASS_EACH) ) {
						int LA20_19 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==SASS_WHILE) ) {
						int LA20_20 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==SASS_CONTENT) ) {
						int LA20_21 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==IMPORT_SYM) ) {
						int LA20_22 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==PAGE_SYM) ) {
						int LA20_23 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==FONT_FACE_SYM) ) {
						int LA20_35 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==MOZ_DOCUMENT_SYM) ) {
						int LA20_36 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==WEBKIT_KEYFRAMES_SYM) ) {
						int LA20_37 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==AT_IDENT) ) {
						int LA20_38 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==MEDIA_SYM) ) {
						int LA20_39 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==COUNTER_STYLE_SYM) ) {
						int LA20_40 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==SASS_FUNCTION) ) {
						int LA20_42 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==SASS_RETURN) ) {
						int LA20_43 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( ((LA20_0 >= BOTTOMCENTER_SYM && LA20_0 <= BOTTOMRIGHT_SYM)||LA20_0==CHARSET_SYM||(LA20_0 >= LEFTBOTTOM_SYM && LA20_0 <= LEFTTOP_SYM)||LA20_0==NAMESPACE_SYM||(LA20_0 >= RIGHTBOTTOM_SYM && LA20_0 <= RIGHTTOP_SYM)||LA20_0==SASS_ELSE||(LA20_0 >= TOPCENTER_SYM && LA20_0 <= TOPRIGHT_SYM)) ) {
						int LA20_44 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					} finally {dbg.exitDecision(20);}

					switch (alt20) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:44: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
							{
							dbg.location(363,66);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:66: ( ws )?
							int alt19=2;
							try { dbg.enterSubRule(19);
							try { dbg.enterDecision(19, decisionCanBacktrack[19]);

							int LA19_0 = input.LA(1);
							if ( (LA19_0==COMMENT||LA19_0==NL||LA19_0==WS) ) {
								alt19=1;
							}
							} finally {dbg.exitDecision(19);}

							switch (alt19) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:66: ws
									{
									dbg.location(363,66);
									pushFollow(FOLLOW_ws_in_importItem362);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(19);}
							dbg.location(363,70);
							pushFollow(FOLLOW_mediaQueryList_in_importItem365);
							mediaQueryList();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(20);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:9: {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					{
					dbg.location(366,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "importItem", "isScssSource()");
					}dbg.location(366,27);
					match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem398); if (state.failed) return;dbg.location(366,38);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:38: ( ws )?
					int alt21=2;
					try { dbg.enterSubRule(21);
					try { dbg.enterDecision(21, decisionCanBacktrack[21]);

					int LA21_0 = input.LA(1);
					if ( (LA21_0==COMMENT||LA21_0==NL||LA21_0==WS) ) {
						alt21=1;
					}
					} finally {dbg.exitDecision(21);}

					switch (alt21) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:38: ws
							{
							dbg.location(366,38);
							pushFollow(FOLLOW_ws_in_importItem400);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(21);}
					dbg.location(366,42);
					pushFollow(FOLLOW_resourceIdentifier_in_importItem403);
					resourceIdentifier();
					state._fsp--;
					if (state.failed) return;dbg.location(366,61);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:61: ( ( ws )? COMMA ( ws )? resourceIdentifier )*
					try { dbg.enterSubRule(24);

					loop24:
					while (true) {
						int alt24=2;
						try { dbg.enterDecision(24, decisionCanBacktrack[24]);

						try {
							isCyclicDecision = true;
							alt24 = dfa24.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(24);}

						switch (alt24) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:62: ( ws )? COMMA ( ws )? resourceIdentifier
							{
							dbg.location(366,62);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:62: ( ws )?
							int alt22=2;
							try { dbg.enterSubRule(22);
							try { dbg.enterDecision(22, decisionCanBacktrack[22]);

							int LA22_0 = input.LA(1);
							if ( (LA22_0==COMMENT||LA22_0==NL||LA22_0==WS) ) {
								alt22=1;
							}
							} finally {dbg.exitDecision(22);}

							switch (alt22) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:62: ws
									{
									dbg.location(366,62);
									pushFollow(FOLLOW_ws_in_importItem406);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(22);}
							dbg.location(366,66);
							match(input,COMMA,FOLLOW_COMMA_in_importItem409); if (state.failed) return;dbg.location(366,72);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:72: ( ws )?
							int alt23=2;
							try { dbg.enterSubRule(23);
							try { dbg.enterDecision(23, decisionCanBacktrack[23]);

							int LA23_0 = input.LA(1);
							if ( (LA23_0==COMMENT||LA23_0==NL||LA23_0==WS) ) {
								alt23=1;
							}
							} finally {dbg.exitDecision(23);}

							switch (alt23) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:72: ws
									{
									dbg.location(366,72);
									pushFollow(FOLLOW_ws_in_importItem411);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(23);}
							dbg.location(366,76);
							pushFollow(FOLLOW_resourceIdentifier_in_importItem414);
							resourceIdentifier();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop24;
						}
					}
					} finally {dbg.exitSubRule(24);}
					dbg.location(366,97);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:97: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					int alt26=2;
					try { dbg.enterSubRule(26);
					try { dbg.enterDecision(26, decisionCanBacktrack[26]);

					int LA26_0 = input.LA(1);
					if ( (LA26_0==COMMENT||LA26_0==NL||LA26_0==WS) ) {
						int LA26_1 = input.LA(2);
						if ( (synpred2_Css3()) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==NOT||LA26_0==ONLY) && (synpred2_Css3())) {
						alt26=1;
					}
					else if ( (LA26_0==IDENT) ) {
						int LA26_3 = input.LA(2);
						if ( (synpred2_Css3()) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==GEN) ) {
						int LA26_4 = input.LA(2);
						if ( (synpred2_Css3()) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==HASH_SYMBOL) ) {
						int LA26_5 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==LPAREN) && (synpred2_Css3())) {
						alt26=1;
					}
					else if ( (LA26_0==SASS_MIXIN) ) {
						int LA26_7 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==SASS_VAR) ) {
						int LA26_8 = input.LA(2);
						if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==SASS_INCLUDE) ) {
						int LA26_12 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==SASS_EXTEND) ) {
						int LA26_13 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==SASS_DEBUG||LA26_0==SASS_WARN) ) {
						int LA26_16 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==SASS_IF) ) {
						int LA26_17 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==SASS_FOR) ) {
						int LA26_18 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==SASS_EACH) ) {
						int LA26_19 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==SASS_WHILE) ) {
						int LA26_20 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==SASS_CONTENT) ) {
						int LA26_21 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==IMPORT_SYM) ) {
						int LA26_22 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==PAGE_SYM) ) {
						int LA26_23 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==FONT_FACE_SYM) ) {
						int LA26_35 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==MOZ_DOCUMENT_SYM) ) {
						int LA26_36 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==WEBKIT_KEYFRAMES_SYM) ) {
						int LA26_37 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==AT_IDENT) ) {
						int LA26_38 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==MEDIA_SYM) ) {
						int LA26_39 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==COUNTER_STYLE_SYM) ) {
						int LA26_40 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==SASS_FUNCTION) ) {
						int LA26_42 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==SASS_RETURN) ) {
						int LA26_43 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( ((LA26_0 >= BOTTOMCENTER_SYM && LA26_0 <= BOTTOMRIGHT_SYM)||LA26_0==CHARSET_SYM||(LA26_0 >= LEFTBOTTOM_SYM && LA26_0 <= LEFTTOP_SYM)||LA26_0==NAMESPACE_SYM||(LA26_0 >= RIGHTBOTTOM_SYM && LA26_0 <= RIGHTTOP_SYM)||LA26_0==SASS_ELSE||(LA26_0 >= TOPCENTER_SYM && LA26_0 <= TOPRIGHT_SYM)) ) {
						int LA26_44 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					} finally {dbg.exitDecision(26);}

					switch (alt26) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:98: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
							{
							dbg.location(366,120);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:120: ( ws )?
							int alt25=2;
							try { dbg.enterSubRule(25);
							try { dbg.enterDecision(25, decisionCanBacktrack[25]);

							int LA25_0 = input.LA(1);
							if ( (LA25_0==COMMENT||LA25_0==NL||LA25_0==WS) ) {
								alt25=1;
							}
							} finally {dbg.exitDecision(25);}

							switch (alt25) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:120: ws
									{
									dbg.location(366,120);
									pushFollow(FOLLOW_ws_in_importItem426);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(25);}
							dbg.location(366,124);
							pushFollow(FOLLOW_mediaQueryList_in_importItem429);
							mediaQueryList();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(26);}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:9: {...}? IMPORT_SYM ( ws )? ( LPAREN LESS_IMPORT_TYPE RPAREN ( ws )? )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					{
					dbg.location(368,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "importItem", "isLessSource()");
					}dbg.location(368,27);
					match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem453); if (state.failed) return;dbg.location(368,38);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:38: ( ws )?
					int alt27=2;
					try { dbg.enterSubRule(27);
					try { dbg.enterDecision(27, decisionCanBacktrack[27]);

					int LA27_0 = input.LA(1);
					if ( (LA27_0==COMMENT||LA27_0==NL||LA27_0==WS) ) {
						alt27=1;
					}
					} finally {dbg.exitDecision(27);}

					switch (alt27) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:38: ws
							{
							dbg.location(368,38);
							pushFollow(FOLLOW_ws_in_importItem455);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(27);}
					dbg.location(368,42);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:42: ( LPAREN LESS_IMPORT_TYPE RPAREN ( ws )? )?
					int alt29=2;
					try { dbg.enterSubRule(29);
					try { dbg.enterDecision(29, decisionCanBacktrack[29]);

					int LA29_0 = input.LA(1);
					if ( (LA29_0==LPAREN) ) {
						alt29=1;
					}
					} finally {dbg.exitDecision(29);}

					switch (alt29) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:43: LPAREN LESS_IMPORT_TYPE RPAREN ( ws )?
							{
							dbg.location(368,43);
							match(input,LPAREN,FOLLOW_LPAREN_in_importItem459); if (state.failed) return;dbg.location(368,50);
							match(input,LESS_IMPORT_TYPE,FOLLOW_LESS_IMPORT_TYPE_in_importItem461); if (state.failed) return;dbg.location(368,67);
							match(input,RPAREN,FOLLOW_RPAREN_in_importItem463); if (state.failed) return;dbg.location(368,74);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:74: ( ws )?
							int alt28=2;
							try { dbg.enterSubRule(28);
							try { dbg.enterDecision(28, decisionCanBacktrack[28]);

							int LA28_0 = input.LA(1);
							if ( (LA28_0==COMMENT||LA28_0==NL||LA28_0==WS) ) {
								alt28=1;
							}
							} finally {dbg.exitDecision(28);}

							switch (alt28) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:74: ws
									{
									dbg.location(368,74);
									pushFollow(FOLLOW_ws_in_importItem465);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(28);}

							}
							break;

					}
					} finally {dbg.exitSubRule(29);}
					dbg.location(368,80);
					pushFollow(FOLLOW_resourceIdentifier_in_importItem470);
					resourceIdentifier();
					state._fsp--;
					if (state.failed) return;dbg.location(368,99);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:99: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					int alt31=2;
					try { dbg.enterSubRule(31);
					try { dbg.enterDecision(31, decisionCanBacktrack[31]);

					int LA31_0 = input.LA(1);
					if ( (LA31_0==COMMENT||LA31_0==NL||LA31_0==WS) ) {
						int LA31_1 = input.LA(2);
						if ( (synpred3_Css3()) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==NOT||LA31_0==ONLY) && (synpred3_Css3())) {
						alt31=1;
					}
					else if ( (LA31_0==IDENT) ) {
						int LA31_3 = input.LA(2);
						if ( (synpred3_Css3()) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==GEN) ) {
						int LA31_4 = input.LA(2);
						if ( (synpred3_Css3()) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==HASH_SYMBOL) ) {
						int LA31_5 = input.LA(2);
						if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==LPAREN) && (synpred3_Css3())) {
						alt31=1;
					}
					else if ( (LA31_0==SASS_MIXIN) ) {
						int LA31_7 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==SASS_VAR) ) {
						int LA31_8 = input.LA(2);
						if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==SASS_INCLUDE) ) {
						int LA31_12 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==SASS_EXTEND) ) {
						int LA31_13 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==SASS_DEBUG||LA31_0==SASS_WARN) ) {
						int LA31_16 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==SASS_IF) ) {
						int LA31_17 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==SASS_FOR) ) {
						int LA31_18 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==SASS_EACH) ) {
						int LA31_19 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==SASS_WHILE) ) {
						int LA31_20 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==SASS_CONTENT) ) {
						int LA31_21 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==IMPORT_SYM) ) {
						int LA31_22 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==PAGE_SYM) ) {
						int LA31_23 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==FONT_FACE_SYM) ) {
						int LA31_35 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==MOZ_DOCUMENT_SYM) ) {
						int LA31_36 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==WEBKIT_KEYFRAMES_SYM) ) {
						int LA31_37 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==AT_IDENT) ) {
						int LA31_38 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==MEDIA_SYM) ) {
						int LA31_39 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==COUNTER_STYLE_SYM) ) {
						int LA31_40 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==SASS_FUNCTION) ) {
						int LA31_42 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==SASS_RETURN) ) {
						int LA31_43 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( ((LA31_0 >= BOTTOMCENTER_SYM && LA31_0 <= BOTTOMRIGHT_SYM)||LA31_0==CHARSET_SYM||(LA31_0 >= LEFTBOTTOM_SYM && LA31_0 <= LEFTTOP_SYM)||LA31_0==NAMESPACE_SYM||(LA31_0 >= RIGHTBOTTOM_SYM && LA31_0 <= RIGHTTOP_SYM)||LA31_0==SASS_ELSE||(LA31_0 >= TOPCENTER_SYM && LA31_0 <= TOPRIGHT_SYM)) ) {
						int LA31_44 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					} finally {dbg.exitDecision(31);}

					switch (alt31) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:100: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
							{
							dbg.location(368,122);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:122: ( ws )?
							int alt30=2;
							try { dbg.enterSubRule(30);
							try { dbg.enterDecision(30, decisionCanBacktrack[30]);

							int LA30_0 = input.LA(1);
							if ( (LA30_0==COMMENT||LA30_0==NL||LA30_0==WS) ) {
								alt30=1;
							}
							} finally {dbg.exitDecision(30);}

							switch (alt30) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:122: ws
									{
									dbg.location(368,122);
									pushFollow(FOLLOW_ws_in_importItem480);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(30);}
							dbg.location(368,126);
							pushFollow(FOLLOW_mediaQueryList_in_importItem483);
							mediaQueryList();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(31);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(369, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "importItem");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "importItem"



	// $ANTLR start "media"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:370:1: media : MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE ;
	public final void media() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "media");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(370, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:371:5: ( MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:371:7: MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE
			{
			dbg.location(371,7);
			match(input,MEDIA_SYM,FOLLOW_MEDIA_SYM_in_media501); if (state.failed) return;dbg.location(371,17);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:371:17: ( ws )?
			int alt33=2;
			try { dbg.enterSubRule(33);
			try { dbg.enterDecision(33, decisionCanBacktrack[33]);

			int LA33_0 = input.LA(1);
			if ( (LA33_0==COMMENT||LA33_0==NL||LA33_0==WS) ) {
				alt33=1;
			}
			} finally {dbg.exitDecision(33);}

			switch (alt33) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:371:17: ws
					{
					dbg.location(371,17);
					pushFollow(FOLLOW_ws_in_media503);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(33);}
			dbg.location(372,5);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:5: ( mediaQueryList )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:10: mediaQueryList
			{
			dbg.location(373,10);
			pushFollow(FOLLOW_mediaQueryList_in_media521);
			mediaQueryList();
			state._fsp--;
			if (state.failed) return;
			}
			dbg.location(374,7);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:374:7: ( ws )?
			int alt34=2;
			try { dbg.enterSubRule(34);
			try { dbg.enterDecision(34, decisionCanBacktrack[34]);

			int LA34_0 = input.LA(1);
			if ( (LA34_0==COMMENT||LA34_0==NL||LA34_0==WS) ) {
				alt34=1;
			}
			} finally {dbg.exitDecision(34);}

			switch (alt34) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:374:7: ws
					{
					dbg.location(374,7);
					pushFollow(FOLLOW_ws_in_media529);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(34);}
			dbg.location(375,5);
			match(input,LBRACE,FOLLOW_LBRACE_in_media536); if (state.failed) return;dbg.location(375,12);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:375:12: ( ws )?
			int alt35=2;
			try { dbg.enterSubRule(35);
			try { dbg.enterDecision(35, decisionCanBacktrack[35]);

			int LA35_0 = input.LA(1);
			if ( (LA35_0==COMMENT||LA35_0==NL||LA35_0==WS) ) {
				alt35=1;
			}
			} finally {dbg.exitDecision(35);}

			switch (alt35) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:375:12: ws
					{
					dbg.location(375,12);
					pushFollow(FOLLOW_ws_in_media538);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(35);}
			dbg.location(375,16);
			pushFollow(FOLLOW_syncToFollow_in_media541);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(376,9);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:376:9: ( mediaBody )?
			int alt36=2;
			try { dbg.enterSubRule(36);
			try { dbg.enterDecision(36, decisionCanBacktrack[36]);

			int LA36_0 = input.LA(1);
			if ( ((LA36_0 >= AT_IDENT && LA36_0 <= AT_SIGN)||(LA36_0 >= BOTTOMCENTER_SYM && LA36_0 <= BOTTOMRIGHT_SYM)||(LA36_0 >= CHARSET_SYM && LA36_0 <= COMMA)||LA36_0==COUNTER_STYLE_SYM||LA36_0==DCOLON||LA36_0==DOT||LA36_0==FONT_FACE_SYM||(LA36_0 >= GEN && LA36_0 <= GREATER)||(LA36_0 >= HASH && LA36_0 <= HASH_SYMBOL)||LA36_0==IDENT||LA36_0==IMPORT_SYM||(LA36_0 >= LBRACKET && LA36_0 <= LEFTTOP_SYM)||LA36_0==LESS_AND||(LA36_0 >= MEDIA_SYM && LA36_0 <= MOZ_DOCUMENT_SYM)||LA36_0==NAMESPACE_SYM||LA36_0==PAGE_SYM||(LA36_0 >= PIPE && LA36_0 <= PLUS)||LA36_0==RBRACKET||(LA36_0 >= RIGHTBOTTOM_SYM && LA36_0 <= RIGHTTOP_SYM)||(LA36_0 >= SASS_CONTENT && LA36_0 <= SASS_DEBUG)||(LA36_0 >= SASS_EACH && LA36_0 <= SASS_MIXIN)||(LA36_0 >= SASS_RETURN && LA36_0 <= SEMI)||LA36_0==STAR||LA36_0==TILDE||(LA36_0 >= TOPCENTER_SYM && LA36_0 <= TOPRIGHT_SYM)||LA36_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt36=1;
			}
			} finally {dbg.exitDecision(36);}

			switch (alt36) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:376:9: mediaBody
					{
					dbg.location(376,9);
					pushFollow(FOLLOW_mediaBody_in_media551);
					mediaBody();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(36);}
			dbg.location(377,5);
			match(input,RBRACE,FOLLOW_RBRACE_in_media558); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(378, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "media");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "media"



	// $ANTLR start "mediaBody"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:380:1: mediaBody : ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
	public final void mediaBody() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaBody");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(380, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:5: ( ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:382:5: ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
			{
			dbg.location(382,5);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:382:5: ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
			int cnt41=0;
			try { dbg.enterSubRule(41);

			loop41:
			while (true) {
				int alt41=3;
				try { dbg.enterDecision(41, decisionCanBacktrack[41]);

				int LA41_0 = input.LA(1);
				if ( ((LA41_0 >= AT_IDENT && LA41_0 <= AT_SIGN)||(LA41_0 >= BOTTOMCENTER_SYM && LA41_0 <= BOTTOMRIGHT_SYM)||(LA41_0 >= CHARSET_SYM && LA41_0 <= COMMA)||LA41_0==COUNTER_STYLE_SYM||LA41_0==DCOLON||LA41_0==DOT||LA41_0==FONT_FACE_SYM||(LA41_0 >= GEN && LA41_0 <= GREATER)||(LA41_0 >= HASH && LA41_0 <= HASH_SYMBOL)||LA41_0==IDENT||LA41_0==IMPORT_SYM||(LA41_0 >= LBRACKET && LA41_0 <= LEFTTOP_SYM)||LA41_0==LESS_AND||(LA41_0 >= MEDIA_SYM && LA41_0 <= MOZ_DOCUMENT_SYM)||LA41_0==NAMESPACE_SYM||LA41_0==PAGE_SYM||(LA41_0 >= PIPE && LA41_0 <= PLUS)||LA41_0==RBRACKET||(LA41_0 >= RIGHTBOTTOM_SYM && LA41_0 <= RIGHTTOP_SYM)||(LA41_0 >= SASS_CONTENT && LA41_0 <= SASS_DEBUG)||(LA41_0 >= SASS_EACH && LA41_0 <= SASS_MIXIN)||(LA41_0 >= SASS_RETURN && LA41_0 <= SASS_WHILE)||LA41_0==STAR||LA41_0==TILDE||(LA41_0 >= TOPCENTER_SYM && LA41_0 <= TOPRIGHT_SYM)||LA41_0==WEBKIT_KEYFRAMES_SYM) ) {
					alt41=1;
				}
				else if ( (LA41_0==SEMI) ) {
					alt41=2;
				}

				} finally {dbg.exitDecision(41);}

				switch (alt41) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:10: ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
					{
					dbg.location(383,10);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:10: ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:12: mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
					{
					dbg.location(383,12);
					pushFollow(FOLLOW_mediaBodyItem_in_mediaBody592);
					mediaBodyItem();
					state._fsp--;
					if (state.failed) return;dbg.location(383,26);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:26: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
					int alt38=2;
					try { dbg.enterSubRule(38);
					try { dbg.enterDecision(38, decisionCanBacktrack[38]);

					try {
						isCyclicDecision = true;
						alt38 = dfa38.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(38);}

					switch (alt38) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:27: ( ( ws )? SEMI )=> ( ws )? SEMI
							{
							dbg.location(383,39);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:39: ( ws )?
							int alt37=2;
							try { dbg.enterSubRule(37);
							try { dbg.enterDecision(37, decisionCanBacktrack[37]);

							int LA37_0 = input.LA(1);
							if ( (LA37_0==COMMENT||LA37_0==NL||LA37_0==WS) ) {
								alt37=1;
							}
							} finally {dbg.exitDecision(37);}

							switch (alt37) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:39: ws
									{
									dbg.location(383,39);
									pushFollow(FOLLOW_ws_in_mediaBody602);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(37);}
							dbg.location(383,43);
							match(input,SEMI,FOLLOW_SEMI_in_mediaBody605); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(38);}
					dbg.location(383,50);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:50: ( ws )?
					int alt39=2;
					try { dbg.enterSubRule(39);
					try { dbg.enterDecision(39, decisionCanBacktrack[39]);

					int LA39_0 = input.LA(1);
					if ( (LA39_0==COMMENT||LA39_0==NL||LA39_0==WS) ) {
						alt39=1;
					}
					} finally {dbg.exitDecision(39);}

					switch (alt39) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:50: ws
							{
							dbg.location(383,50);
							pushFollow(FOLLOW_ws_in_mediaBody609);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(39);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:10: ( SEMI ( ws )? )
					{
					dbg.location(385,10);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:10: ( SEMI ( ws )? )
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:12: SEMI ( ws )?
					{
					dbg.location(385,12);
					match(input,SEMI,FOLLOW_SEMI_in_mediaBody636); if (state.failed) return;dbg.location(385,17);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:17: ( ws )?
					int alt40=2;
					try { dbg.enterSubRule(40);
					try { dbg.enterDecision(40, decisionCanBacktrack[40]);

					int LA40_0 = input.LA(1);
					if ( (LA40_0==COMMENT||LA40_0==NL||LA40_0==WS) ) {
						alt40=1;
					}
					} finally {dbg.exitDecision(40);}

					switch (alt40) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:385:17: ws
							{
							dbg.location(385,17);
							pushFollow(FOLLOW_ws_in_mediaBody638);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(40);}

					}

					}
					break;

				default :
					if ( cnt41 >= 1 ) break loop41;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(41, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt41++;
			}
			} finally {dbg.exitSubRule(41);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(387, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaBody");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaBody"



	// $ANTLR start "mediaBodyItem"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:1: mediaBodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration |{...}? sass_extend |{...}? sass_debug |{...}? sass_control |{...}? sass_content |{...}? importItem | rule | page | fontFace | vendorAtRule | media );
	public final void mediaBodyItem() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaBodyItem");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(389, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:390:5: ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration | ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration |{...}? sass_extend |{...}? sass_debug |{...}? sass_control |{...}? sass_content |{...}? importItem | rule | page | fontFace | vendorAtRule | media )
			int alt46=15;
			try { dbg.enterDecision(46, decisionCanBacktrack[46]);

			switch ( input.LA(1) ) {
			case DOT:
				{
				int LA46_1 = input.LA(2);
				if ( ((synpred5_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt46=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred6_Css3())) ) {
					alt46=2;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred7_Css3())) ) {
					alt46=3;
				}
				else if ( (synpred8_Css3()) ) {
					alt46=4;
				}
				else if ( (synpred9_Css3()) ) {
					alt46=5;
				}
				else if ( (true) ) {
					alt46=11;
				}

				}
				break;
			case SASS_MIXIN:
				{
				int LA46_2 = input.LA(2);
				if ( ((synpred5_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt46=1;
				}
				else if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt46=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt46=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 46, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_INCLUDE:
				{
				int LA46_3 = input.LA(2);
				if ( (((evalPredicate(isLessSource(),"isLessSource()")&&synpred6_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt46=2;
				}
				else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred7_Css3())) ) {
					alt46=3;
				}
				else if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt46=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt46=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 46, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case STAR:
				{
				int LA46_4 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt46=4;
				}
				else if ( (synpred9_Css3()) ) {
					alt46=5;
				}
				else if ( (true) ) {
					alt46=11;
				}

				}
				break;
			case HASH_SYMBOL:
				{
				int LA46_5 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt46=4;
				}
				else if ( (synpred9_Css3()) ) {
					alt46=5;
				}
				else if ( (true) ) {
					alt46=11;
				}

				}
				break;
			case IDENT:
				{
				int LA46_6 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt46=4;
				}
				else if ( (synpred9_Css3()) ) {
					alt46=5;
				}
				else if ( (true) ) {
					alt46=11;
				}

				}
				break;
			case HASH:
				{
				int LA46_7 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt46=4;
				}
				else if ( (synpred9_Css3()) ) {
					alt46=5;
				}
				else if ( (true) ) {
					alt46=11;
				}

				}
				break;
			case GEN:
				{
				int LA46_8 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt46=4;
				}
				else if ( (synpred9_Css3()) ) {
					alt46=5;
				}
				else if ( (true) ) {
					alt46=11;
				}

				}
				break;
			case SASS_EXTEND:
				{
				int LA46_9 = input.LA(2);
				if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt46=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt46=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt46=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 46, 9, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA46_10 = input.LA(2);
				if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt46=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&synpred9_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt46=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 46, 10, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_DEBUG:
			case SASS_WARN:
				{
				int LA46_11 = input.LA(2);
				if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt46=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt46=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt46=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 46, 11, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_IF:
				{
				int LA46_12 = input.LA(2);
				if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt46=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt46=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt46=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 46, 12, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_FOR:
				{
				int LA46_13 = input.LA(2);
				if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt46=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt46=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt46=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 46, 13, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_EACH:
				{
				int LA46_14 = input.LA(2);
				if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt46=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt46=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt46=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 46, 14, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_WHILE:
				{
				int LA46_15 = input.LA(2);
				if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt46=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt46=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt46=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 46, 15, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_CONTENT:
				{
				int LA46_16 = input.LA(2);
				if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt46=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt46=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt46=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 46, 16, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case IMPORT_SYM:
				{
				int LA46_17 = input.LA(2);
				if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt46=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt46=5;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt46=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 46, 17, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PAGE_SYM:
				{
				int LA46_18 = input.LA(2);
				if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt46=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt46=5;
				}
				else if ( (true) ) {
					alt46=12;
				}

				}
				break;
			case AT_SIGN:
			case COLON:
			case COMMA:
			case DCOLON:
			case GREATER:
			case LBRACKET:
			case LESS_AND:
			case PIPE:
			case PLUS:
			case RBRACKET:
			case SASS_EXTEND_ONLY_SELECTOR:
			case TILDE:
				{
				alt46=11;
				}
				break;
			case MINUS:
				{
				int LA46_26 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt46=4;
				}
				else if ( (synpred9_Css3()) ) {
					alt46=5;
				}
				else if ( (true) ) {
					alt46=11;
				}

				}
				break;
			case FONT_FACE_SYM:
				{
				int LA46_30 = input.LA(2);
				if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt46=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt46=5;
				}
				else if ( (true) ) {
					alt46=13;
				}

				}
				break;
			case MOZ_DOCUMENT_SYM:
				{
				int LA46_31 = input.LA(2);
				if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt46=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt46=5;
				}
				else if ( (true) ) {
					alt46=14;
				}

				}
				break;
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA46_32 = input.LA(2);
				if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt46=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt46=5;
				}
				else if ( (true) ) {
					alt46=14;
				}

				}
				break;
			case AT_IDENT:
				{
				int LA46_33 = input.LA(2);
				if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt46=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt46=5;
				}
				else if ( (true) ) {
					alt46=14;
				}

				}
				break;
			case MEDIA_SYM:
				{
				int LA46_34 = input.LA(2);
				if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt46=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt46=5;
				}
				else if ( (true) ) {
					alt46=15;
				}

				}
				break;
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case NAMESPACE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_ELSE:
			case SASS_FUNCTION:
			case SASS_RETURN:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
				{
				int LA46_35 = input.LA(2);
				if ( (((synpred8_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt46=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt46=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 46, 35, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 46, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(46);}

			switch (alt46) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:5: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration
					{
					dbg.location(391,85);
					pushFollow(FOLLOW_cp_mixin_declaration_in_mediaBodyItem704);
					cp_mixin_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:7: ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
					{
					dbg.location(393,55);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isLessSource()");
					}dbg.location(393,73);
					pushFollow(FOLLOW_cp_mixin_call_in_mediaBodyItem737);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;dbg.location(393,87);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:87: ( ( ws )? IMPORTANT_SYM )?
					int alt43=2;
					try { dbg.enterSubRule(43);
					try { dbg.enterDecision(43, decisionCanBacktrack[43]);

					try {
						isCyclicDecision = true;
						alt43 = dfa43.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(43);}

					switch (alt43) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:88: ( ws )? IMPORTANT_SYM
							{
							dbg.location(393,88);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:88: ( ws )?
							int alt42=2;
							try { dbg.enterSubRule(42);
							try { dbg.enterDecision(42, decisionCanBacktrack[42]);

							int LA42_0 = input.LA(1);
							if ( (LA42_0==COMMENT||LA42_0==NL||LA42_0==WS) ) {
								alt42=1;
							}
							} finally {dbg.exitDecision(42);}

							switch (alt42) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:88: ws
									{
									dbg.location(393,88);
									pushFollow(FOLLOW_ws_in_mediaBodyItem740);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(42);}
							dbg.location(393,92);
							match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_mediaBodyItem743); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(43);}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:7: ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
					{
					dbg.location(394,25);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
					}dbg.location(394,43);
					pushFollow(FOLLOW_cp_mixin_call_in_mediaBodyItem760);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;dbg.location(394,57);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:57: ( ( ws )? IMPORTANT_SYM )?
					int alt45=2;
					try { dbg.enterSubRule(45);
					try { dbg.enterDecision(45, decisionCanBacktrack[45]);

					try {
						isCyclicDecision = true;
						alt45 = dfa45.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(45);}

					switch (alt45) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:58: ( ws )? IMPORTANT_SYM
							{
							dbg.location(394,58);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:58: ( ws )?
							int alt44=2;
							try { dbg.enterSubRule(44);
							try { dbg.enterDecision(44, decisionCanBacktrack[44]);

							int LA44_0 = input.LA(1);
							if ( (LA44_0==COMMENT||LA44_0==NL||LA44_0==WS) ) {
								alt44=1;
							}
							} finally {dbg.exitDecision(44);}

							switch (alt44) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:58: ws
									{
									dbg.location(394,58);
									pushFollow(FOLLOW_ws_in_mediaBodyItem763);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(44);}
							dbg.location(394,62);
							match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_mediaBodyItem766); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(45);}

					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:6: ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration
					{
					dbg.location(395,74);
					pushFollow(FOLLOW_propertyDeclaration_in_mediaBodyItem805);
					propertyDeclaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:396:6: ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )=> propertyDeclaration
					{
					dbg.location(396,87);
					pushFollow(FOLLOW_propertyDeclaration_in_mediaBodyItem832);
					propertyDeclaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:397:7: {...}? sass_extend
					{
					dbg.location(397,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
					}dbg.location(397,25);
					pushFollow(FOLLOW_sass_extend_in_mediaBodyItem842);
					sass_extend();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:398:7: {...}? sass_debug
					{
					dbg.location(398,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
					}dbg.location(398,25);
					pushFollow(FOLLOW_sass_debug_in_mediaBodyItem852);
					sass_debug();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:399:7: {...}? sass_control
					{
					dbg.location(399,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
					}dbg.location(399,25);
					pushFollow(FOLLOW_sass_control_in_mediaBodyItem862);
					sass_control();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 9 :
					dbg.enterAlt(9);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:400:7: {...}? sass_content
					{
					dbg.location(400,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
					}dbg.location(400,25);
					pushFollow(FOLLOW_sass_content_in_mediaBodyItem872);
					sass_content();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 10 :
					dbg.enterAlt(10);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:401:7: {...}? importItem
					{
					dbg.location(401,7);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isCssPreprocessorSource()");
					}dbg.location(401,36);
					pushFollow(FOLLOW_importItem_in_mediaBodyItem882);
					importItem();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 11 :
					dbg.enterAlt(11);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:402:7: rule
					{
					dbg.location(402,7);
					pushFollow(FOLLOW_rule_in_mediaBodyItem890);
					rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 12 :
					dbg.enterAlt(12);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:403:7: page
					{
					dbg.location(403,7);
					pushFollow(FOLLOW_page_in_mediaBodyItem898);
					page();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 13 :
					dbg.enterAlt(13);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:404:7: fontFace
					{
					dbg.location(404,7);
					pushFollow(FOLLOW_fontFace_in_mediaBodyItem906);
					fontFace();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 14 :
					dbg.enterAlt(14);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:405:7: vendorAtRule
					{
					dbg.location(405,7);
					pushFollow(FOLLOW_vendorAtRule_in_mediaBodyItem914);
					vendorAtRule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 15 :
					dbg.enterAlt(15);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:407:7: media
					{
					dbg.location(407,7);
					pushFollow(FOLLOW_media_in_mediaBodyItem927);
					media();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(408, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaBodyItem");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaBodyItem"



	// $ANTLR start "mediaQueryList"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:1: mediaQueryList : mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )* ;
	public final void mediaQueryList() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaQueryList");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(410, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:2: ( mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )* )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:4: mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*
			{
			dbg.location(411,4);
			pushFollow(FOLLOW_mediaQuery_in_mediaQueryList941);
			mediaQuery();
			state._fsp--;
			if (state.failed) return;dbg.location(411,15);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:15: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*
			try { dbg.enterSubRule(49);

			loop49:
			while (true) {
				int alt49=2;
				try { dbg.enterDecision(49, decisionCanBacktrack[49]);

				int LA49_0 = input.LA(1);
				if ( (LA49_0==COMMENT||LA49_0==NL||LA49_0==WS) ) {
					int LA49_1 = input.LA(2);
					if ( (synpred10_Css3()) ) {
						alt49=1;
					}

				}
				else if ( (LA49_0==COMMA) ) {
					int LA49_31 = input.LA(2);
					if ( (synpred10_Css3()) ) {
						alt49=1;
					}

				}

				} finally {dbg.exitDecision(49);}

				switch (alt49) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:17: ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery
					{
					dbg.location(411,31);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:31: ( ws )?
					int alt47=2;
					try { dbg.enterSubRule(47);
					try { dbg.enterDecision(47, decisionCanBacktrack[47]);

					int LA47_0 = input.LA(1);
					if ( (LA47_0==COMMENT||LA47_0==NL||LA47_0==WS) ) {
						alt47=1;
					}
					} finally {dbg.exitDecision(47);}

					switch (alt47) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:31: ws
							{
							dbg.location(411,31);
							pushFollow(FOLLOW_ws_in_mediaQueryList953);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(47);}
					dbg.location(411,35);
					match(input,COMMA,FOLLOW_COMMA_in_mediaQueryList956); if (state.failed) return;dbg.location(411,41);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:41: ( ws )?
					int alt48=2;
					try { dbg.enterSubRule(48);
					try { dbg.enterDecision(48, decisionCanBacktrack[48]);

					int LA48_0 = input.LA(1);
					if ( (LA48_0==COMMENT||LA48_0==NL||LA48_0==WS) ) {
						alt48=1;
					}
					} finally {dbg.exitDecision(48);}

					switch (alt48) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:41: ws
							{
							dbg.location(411,41);
							pushFollow(FOLLOW_ws_in_mediaQueryList958);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(48);}
					dbg.location(411,45);
					pushFollow(FOLLOW_mediaQuery_in_mediaQueryList961);
					mediaQuery();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop49;
				}
			}
			} finally {dbg.exitSubRule(49);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(412, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaQueryList");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaQueryList"



	// $ANTLR start "mediaQuery"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:1: mediaQuery : ( ( mediaQueryOperator ( ws )? )? mediaType ( ( ws )? AND ( ws )? mediaExpression )* | mediaExpression ( ( ws )? AND ( ws )? mediaExpression )* |{...}? cp_variable );
	public final void mediaQuery() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaQuery");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(414, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:415:2: ( ( mediaQueryOperator ( ws )? )? mediaType ( ( ws )? AND ( ws )? mediaExpression )* | mediaExpression ( ( ws )? AND ( ws )? mediaExpression )* |{...}? cp_variable )
			int alt58=3;
			try { dbg.enterDecision(58, decisionCanBacktrack[58]);

			switch ( input.LA(1) ) {
			case GEN:
			case HASH_SYMBOL:
			case IDENT:
			case NOT:
			case ONLY:
				{
				alt58=1;
				}
				break;
			case LPAREN:
				{
				alt58=2;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt58=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 58, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(58);}

			switch (alt58) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:5: ( mediaQueryOperator ( ws )? )? mediaType ( ( ws )? AND ( ws )? mediaExpression )*
					{
					dbg.location(416,5);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:5: ( mediaQueryOperator ( ws )? )?
					int alt51=2;
					try { dbg.enterSubRule(51);
					try { dbg.enterDecision(51, decisionCanBacktrack[51]);

					int LA51_0 = input.LA(1);
					if ( (LA51_0==NOT||LA51_0==ONLY) ) {
						alt51=1;
					}
					} finally {dbg.exitDecision(51);}

					switch (alt51) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:6: mediaQueryOperator ( ws )?
							{
							dbg.location(416,6);
							pushFollow(FOLLOW_mediaQueryOperator_in_mediaQuery980);
							mediaQueryOperator();
							state._fsp--;
							if (state.failed) return;dbg.location(416,25);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:25: ( ws )?
							int alt50=2;
							try { dbg.enterSubRule(50);
							try { dbg.enterDecision(50, decisionCanBacktrack[50]);

							int LA50_0 = input.LA(1);
							if ( (LA50_0==COMMENT||LA50_0==NL||LA50_0==WS) ) {
								alt50=1;
							}
							} finally {dbg.exitDecision(50);}

							switch (alt50) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:25: ws
									{
									dbg.location(416,25);
									pushFollow(FOLLOW_ws_in_mediaQuery982);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(50);}

							}
							break;

					}
					} finally {dbg.exitSubRule(51);}
					dbg.location(416,33);
					pushFollow(FOLLOW_mediaType_in_mediaQuery989);
					mediaType();
					state._fsp--;
					if (state.failed) return;dbg.location(416,43);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:43: ( ( ws )? AND ( ws )? mediaExpression )*
					try { dbg.enterSubRule(54);

					loop54:
					while (true) {
						int alt54=2;
						try { dbg.enterDecision(54, decisionCanBacktrack[54]);

						try {
							isCyclicDecision = true;
							alt54 = dfa54.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(54);}

						switch (alt54) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:45: ( ws )? AND ( ws )? mediaExpression
							{
							dbg.location(416,45);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:45: ( ws )?
							int alt52=2;
							try { dbg.enterSubRule(52);
							try { dbg.enterDecision(52, decisionCanBacktrack[52]);

							int LA52_0 = input.LA(1);
							if ( (LA52_0==COMMENT||LA52_0==NL||LA52_0==WS) ) {
								alt52=1;
							}
							} finally {dbg.exitDecision(52);}

							switch (alt52) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:45: ws
									{
									dbg.location(416,45);
									pushFollow(FOLLOW_ws_in_mediaQuery993);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(52);}
							dbg.location(416,49);
							match(input,AND,FOLLOW_AND_in_mediaQuery996); if (state.failed) return;dbg.location(416,53);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:53: ( ws )?
							int alt53=2;
							try { dbg.enterSubRule(53);
							try { dbg.enterDecision(53, decisionCanBacktrack[53]);

							int LA53_0 = input.LA(1);
							if ( (LA53_0==COMMENT||LA53_0==NL||LA53_0==WS) ) {
								alt53=1;
							}
							} finally {dbg.exitDecision(53);}

							switch (alt53) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:416:53: ws
									{
									dbg.location(416,53);
									pushFollow(FOLLOW_ws_in_mediaQuery998);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(53);}
							dbg.location(416,57);
							pushFollow(FOLLOW_mediaExpression_in_mediaQuery1001);
							mediaExpression();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop54;
						}
					}
					} finally {dbg.exitSubRule(54);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:7: mediaExpression ( ( ws )? AND ( ws )? mediaExpression )*
					{
					dbg.location(417,7);
					pushFollow(FOLLOW_mediaExpression_in_mediaQuery1012);
					mediaExpression();
					state._fsp--;
					if (state.failed) return;dbg.location(417,23);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:23: ( ( ws )? AND ( ws )? mediaExpression )*
					try { dbg.enterSubRule(57);

					loop57:
					while (true) {
						int alt57=2;
						try { dbg.enterDecision(57, decisionCanBacktrack[57]);

						try {
							isCyclicDecision = true;
							alt57 = dfa57.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(57);}

						switch (alt57) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:25: ( ws )? AND ( ws )? mediaExpression
							{
							dbg.location(417,25);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:25: ( ws )?
							int alt55=2;
							try { dbg.enterSubRule(55);
							try { dbg.enterDecision(55, decisionCanBacktrack[55]);

							int LA55_0 = input.LA(1);
							if ( (LA55_0==COMMENT||LA55_0==NL||LA55_0==WS) ) {
								alt55=1;
							}
							} finally {dbg.exitDecision(55);}

							switch (alt55) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:25: ws
									{
									dbg.location(417,25);
									pushFollow(FOLLOW_ws_in_mediaQuery1016);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(55);}
							dbg.location(417,29);
							match(input,AND,FOLLOW_AND_in_mediaQuery1019); if (state.failed) return;dbg.location(417,33);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:33: ( ws )?
							int alt56=2;
							try { dbg.enterSubRule(56);
							try { dbg.enterDecision(56, decisionCanBacktrack[56]);

							int LA56_0 = input.LA(1);
							if ( (LA56_0==COMMENT||LA56_0==NL||LA56_0==WS) ) {
								alt56=1;
							}
							} finally {dbg.exitDecision(56);}

							switch (alt56) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:33: ws
									{
									dbg.location(417,33);
									pushFollow(FOLLOW_ws_in_mediaQuery1021);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(56);}
							dbg.location(417,37);
							pushFollow(FOLLOW_mediaExpression_in_mediaQuery1024);
							mediaExpression();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop57;
						}
					}
					} finally {dbg.exitSubRule(57);}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:418:7: {...}? cp_variable
					{
					dbg.location(418,7);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaQuery", "isLessSource()");
					}dbg.location(418,25);
					pushFollow(FOLLOW_cp_variable_in_mediaQuery1037);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(419, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaQuery");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaQuery"



	// $ANTLR start "mediaQueryOperator"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:1: mediaQueryOperator : ( ONLY | NOT );
	public final void mediaQueryOperator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaQueryOperator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(421, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:3: ( ONLY | NOT )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(422,3);
			if ( input.LA(1)==NOT||input.LA(1)==ONLY ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(423, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaQueryOperator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaQueryOperator"



	// $ANTLR start "mediaType"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:425:1: mediaType : ( IDENT | GEN |{...}? sass_interpolation_expression_var );
	public final void mediaType() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaType");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(425, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:2: ( IDENT | GEN |{...}? sass_interpolation_expression_var )
			int alt59=3;
			try { dbg.enterDecision(59, decisionCanBacktrack[59]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				alt59=1;
				}
				break;
			case GEN:
				{
				alt59=2;
				}
				break;
			case HASH_SYMBOL:
				{
				alt59=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 59, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(59);}

			switch (alt59) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:4: IDENT
					{
					dbg.location(426,4);
					match(input,IDENT,FOLLOW_IDENT_in_mediaType1065); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:12: GEN
					{
					dbg.location(426,12);
					match(input,GEN,FOLLOW_GEN_in_mediaType1069); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:18: {...}? sass_interpolation_expression_var
					{
					dbg.location(426,18);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaType", "isCssPreprocessorSource()");
					}dbg.location(426,47);
					pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaType1075);
					sass_interpolation_expression_var();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(427, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaType");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaType"



	// $ANTLR start "mediaExpression"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:429:1: mediaExpression : LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN ;
	public final void mediaExpression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaExpression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(429, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:430:5: ( LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:5: LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN
			{
			dbg.location(431,5);
			match(input,LPAREN,FOLLOW_LPAREN_in_mediaExpression1093); if (state.failed) return;dbg.location(431,12);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:12: ( ws )?
			int alt60=2;
			try { dbg.enterSubRule(60);
			try { dbg.enterDecision(60, decisionCanBacktrack[60]);

			int LA60_0 = input.LA(1);
			if ( (LA60_0==COMMENT||LA60_0==NL||LA60_0==WS) ) {
				alt60=1;
			}
			} finally {dbg.exitDecision(60);}

			switch (alt60) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:12: ws
					{
					dbg.location(431,12);
					pushFollow(FOLLOW_ws_in_mediaExpression1095);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(60);}
			dbg.location(431,16);
			pushFollow(FOLLOW_mediaFeature_in_mediaExpression1098);
			mediaFeature();
			state._fsp--;
			if (state.failed) return;dbg.location(431,29);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:29: ( mediaFeatureValue )?
			int alt61=2;
			try { dbg.enterSubRule(61);
			try { dbg.enterDecision(61, decisionCanBacktrack[61]);

			try {
				isCyclicDecision = true;
				alt61 = dfa61.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(61);}

			switch (alt61) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:29: mediaFeatureValue
					{
					dbg.location(431,29);
					pushFollow(FOLLOW_mediaFeatureValue_in_mediaExpression1100);
					mediaFeatureValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(61);}
			dbg.location(431,48);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:48: ( ws )?
			int alt62=2;
			try { dbg.enterSubRule(62);
			try { dbg.enterDecision(62, decisionCanBacktrack[62]);

			int LA62_0 = input.LA(1);
			if ( (LA62_0==COMMENT||LA62_0==NL||LA62_0==WS) ) {
				alt62=1;
			}
			} finally {dbg.exitDecision(62);}

			switch (alt62) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:48: ws
					{
					dbg.location(431,48);
					pushFollow(FOLLOW_ws_in_mediaExpression1103);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(62);}
			dbg.location(431,52);
			match(input,RPAREN,FOLLOW_RPAREN_in_mediaExpression1106); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(432, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaExpression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaExpression"



	// $ANTLR start "mediaFeatureValue"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:434:1: mediaFeatureValue : ( ws )? COLON ( ws )? ({...}? cp_expression | expression ) ;
	public final void mediaFeatureValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaFeatureValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(434, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:435:5: ( ( ws )? COLON ( ws )? ({...}? cp_expression | expression ) )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:436:5: ( ws )? COLON ( ws )? ({...}? cp_expression | expression )
			{
			dbg.location(436,5);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:436:5: ( ws )?
			int alt63=2;
			try { dbg.enterSubRule(63);
			try { dbg.enterDecision(63, decisionCanBacktrack[63]);

			int LA63_0 = input.LA(1);
			if ( (LA63_0==COMMENT||LA63_0==NL||LA63_0==WS) ) {
				alt63=1;
			}
			} finally {dbg.exitDecision(63);}

			switch (alt63) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:436:5: ws
					{
					dbg.location(436,5);
					pushFollow(FOLLOW_ws_in_mediaFeatureValue1127);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(63);}
			dbg.location(436,9);
			match(input,COLON,FOLLOW_COLON_in_mediaFeatureValue1130); if (state.failed) return;dbg.location(436,15);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:436:15: ( ws )?
			int alt64=2;
			try { dbg.enterSubRule(64);
			try { dbg.enterDecision(64, decisionCanBacktrack[64]);

			int LA64_0 = input.LA(1);
			if ( (LA64_0==COMMENT||LA64_0==NL||LA64_0==WS) ) {
				alt64=1;
			}
			} finally {dbg.exitDecision(64);}

			switch (alt64) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:436:15: ws
					{
					dbg.location(436,15);
					pushFollow(FOLLOW_ws_in_mediaFeatureValue1132);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(64);}
			dbg.location(437,5);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:437:5: ({...}? cp_expression | expression )
			int alt65=2;
			try { dbg.enterSubRule(65);
			try { dbg.enterDecision(65, decisionCanBacktrack[65]);

			switch ( input.LA(1) ) {
			case IMPORTANT_SYM:
			case LPAREN:
			case NOT:
				{
				alt65=1;
				}
				break;
			case MINUS:
			case PLUS:
				{
				int LA65_2 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt65=1;
				}
				else if ( (true) ) {
					alt65=2;
				}

				}
				break;
			case IDENT:
				{
				int LA65_3 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt65=1;
				}
				else if ( (true) ) {
					alt65=2;
				}

				}
				break;
			case NUMBER:
				{
				int LA65_4 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt65=1;
				}
				else if ( (true) ) {
					alt65=2;
				}

				}
				break;
			case PERCENTAGE:
				{
				int LA65_5 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt65=1;
				}
				else if ( (true) ) {
					alt65=2;
				}

				}
				break;
			case LENGTH:
				{
				int LA65_6 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt65=1;
				}
				else if ( (true) ) {
					alt65=2;
				}

				}
				break;
			case EMS:
				{
				int LA65_7 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt65=1;
				}
				else if ( (true) ) {
					alt65=2;
				}

				}
				break;
			case REM:
				{
				int LA65_8 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt65=1;
				}
				else if ( (true) ) {
					alt65=2;
				}

				}
				break;
			case EXS:
				{
				int LA65_9 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt65=1;
				}
				else if ( (true) ) {
					alt65=2;
				}

				}
				break;
			case ANGLE:
				{
				int LA65_10 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt65=1;
				}
				else if ( (true) ) {
					alt65=2;
				}

				}
				break;
			case TIME:
				{
				int LA65_11 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt65=1;
				}
				else if ( (true) ) {
					alt65=2;
				}

				}
				break;
			case FREQ:
				{
				int LA65_12 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt65=1;
				}
				else if ( (true) ) {
					alt65=2;
				}

				}
				break;
			case RESOLUTION:
				{
				int LA65_13 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt65=1;
				}
				else if ( (true) ) {
					alt65=2;
				}

				}
				break;
			case DIMENSION:
				{
				int LA65_14 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt65=1;
				}
				else if ( (true) ) {
					alt65=2;
				}

				}
				break;
			case STRING:
				{
				int LA65_15 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt65=1;
				}
				else if ( (true) ) {
					alt65=2;
				}

				}
				break;
			case TILDE:
				{
				int LA65_16 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt65=1;
				}
				else if ( (true) ) {
					alt65=2;
				}

				}
				break;
			case LESS_JS_STRING:
				{
				int LA65_17 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt65=1;
				}
				else if ( (true) ) {
					alt65=2;
				}

				}
				break;
			case GEN:
				{
				int LA65_18 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt65=1;
				}
				else if ( (true) ) {
					alt65=2;
				}

				}
				break;
			case URI:
				{
				int LA65_19 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt65=1;
				}
				else if ( (true) ) {
					alt65=2;
				}

				}
				break;
			case HASH:
				{
				int LA65_20 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt65=1;
				}
				else if ( (true) ) {
					alt65=2;
				}

				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA65_21 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt65=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt65=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 65, 21, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA65_22 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt65=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt65=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 65, 22, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH_SYMBOL:
				{
				int LA65_23 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt65=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt65=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 65, 23, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PERCENTAGE_SYMBOL:
				{
				int LA65_24 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt65=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt65=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 65, 24, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 65, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(65);}

			switch (alt65) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:9: {...}? cp_expression
					{
					dbg.location(438,9);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaFeatureValue", "isCssPreprocessorSource()");
					}dbg.location(438,38);
					pushFollow(FOLLOW_cp_expression_in_mediaFeatureValue1151);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:440:9: expression
					{
					dbg.location(440,9);
					pushFollow(FOLLOW_expression_in_mediaFeatureValue1171);
					expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(65);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(442, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaFeatureValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaFeatureValue"



	// $ANTLR start "mediaFeature"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:1: mediaFeature : ( IDENT | GEN |{...}? ( cp_variable | sass_interpolation_expression_var ) );
	public final void mediaFeature() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaFeature");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(444, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:2: ( IDENT | GEN |{...}? ( cp_variable | sass_interpolation_expression_var ) )
			int alt67=3;
			try { dbg.enterDecision(67, decisionCanBacktrack[67]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				alt67=1;
				}
				break;
			case GEN:
				{
				alt67=2;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case HASH_SYMBOL:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt67=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 67, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(67);}

			switch (alt67) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:4: IDENT
					{
					dbg.location(445,4);
					match(input,IDENT,FOLLOW_IDENT_in_mediaFeature1191); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:12: GEN
					{
					dbg.location(445,12);
					match(input,GEN,FOLLOW_GEN_in_mediaFeature1195); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:18: {...}? ( cp_variable | sass_interpolation_expression_var )
					{
					dbg.location(445,18);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaFeature", "isCssPreprocessorSource()");
					}dbg.location(445,47);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:47: ( cp_variable | sass_interpolation_expression_var )
					int alt66=2;
					try { dbg.enterSubRule(66);
					try { dbg.enterDecision(66, decisionCanBacktrack[66]);

					int LA66_0 = input.LA(1);
					if ( (LA66_0==AT_IDENT||(LA66_0 >= BOTTOMCENTER_SYM && LA66_0 <= BOTTOMRIGHT_SYM)||LA66_0==CHARSET_SYM||LA66_0==COUNTER_STYLE_SYM||LA66_0==FONT_FACE_SYM||LA66_0==IMPORT_SYM||(LA66_0 >= LEFTBOTTOM_SYM && LA66_0 <= LEFTTOP_SYM)||LA66_0==MEDIA_SYM||LA66_0==MOZ_DOCUMENT_SYM||LA66_0==NAMESPACE_SYM||LA66_0==PAGE_SYM||(LA66_0 >= RIGHTBOTTOM_SYM && LA66_0 <= RIGHTTOP_SYM)||(LA66_0 >= SASS_CONTENT && LA66_0 <= SASS_DEBUG)||(LA66_0 >= SASS_EACH && LA66_0 <= SASS_EXTEND)||(LA66_0 >= SASS_FOR && LA66_0 <= SASS_MIXIN)||(LA66_0 >= SASS_RETURN && LA66_0 <= SASS_WHILE)||(LA66_0 >= TOPCENTER_SYM && LA66_0 <= TOPRIGHT_SYM)||LA66_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt66=1;
					}
					else if ( (LA66_0==HASH_SYMBOL) ) {
						alt66=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 66, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(66);}

					switch (alt66) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:49: cp_variable
							{
							dbg.location(445,49);
							pushFollow(FOLLOW_cp_variable_in_mediaFeature1203);
							cp_variable();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:63: sass_interpolation_expression_var
							{
							dbg.location(445,63);
							pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaFeature1207);
							sass_interpolation_expression_var();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(66);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(446, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaFeature");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaFeature"



	// $ANTLR start "body"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:2: body : ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
	public final void body() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "body");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(448, 1);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:449:5: ( ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:450:5: ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
			{
			dbg.location(450,5);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:450:5: ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
			int cnt72=0;
			try { dbg.enterSubRule(72);

			loop72:
			while (true) {
				int alt72=3;
				try { dbg.enterDecision(72, decisionCanBacktrack[72]);

				int LA72_0 = input.LA(1);
				if ( ((LA72_0 >= AT_IDENT && LA72_0 <= AT_SIGN)||(LA72_0 >= BOTTOMCENTER_SYM && LA72_0 <= BOTTOMRIGHT_SYM)||(LA72_0 >= CHARSET_SYM && LA72_0 <= COMMA)||LA72_0==COUNTER_STYLE_SYM||LA72_0==DCOLON||LA72_0==DOT||LA72_0==FONT_FACE_SYM||(LA72_0 >= GEN && LA72_0 <= GREATER)||(LA72_0 >= HASH && LA72_0 <= HASH_SYMBOL)||LA72_0==IDENT||LA72_0==IMPORT_SYM||(LA72_0 >= LBRACKET && LA72_0 <= LEFTTOP_SYM)||LA72_0==LESS_AND||(LA72_0 >= MEDIA_SYM && LA72_0 <= MOZ_DOCUMENT_SYM)||LA72_0==NAMESPACE_SYM||LA72_0==PAGE_SYM||(LA72_0 >= PIPE && LA72_0 <= PLUS)||LA72_0==RBRACKET||(LA72_0 >= RIGHTBOTTOM_SYM && LA72_0 <= RIGHTTOP_SYM)||(LA72_0 >= SASS_CONTENT && LA72_0 <= SASS_DEBUG)||(LA72_0 >= SASS_EACH && LA72_0 <= SASS_MIXIN)||(LA72_0 >= SASS_RETURN && LA72_0 <= SASS_WHILE)||LA72_0==STAR||LA72_0==TILDE||(LA72_0 >= TOPCENTER_SYM && LA72_0 <= TOPRIGHT_SYM)||LA72_0==WEBKIT_KEYFRAMES_SYM) ) {
					alt72=1;
				}
				else if ( (LA72_0==SEMI) ) {
					alt72=2;
				}

				} finally {dbg.exitDecision(72);}

				switch (alt72) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:10: ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
					{
					dbg.location(451,10);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:10: ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:12: bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
					{
					dbg.location(451,12);
					pushFollow(FOLLOW_bodyItem_in_body1241);
					bodyItem();
					state._fsp--;
					if (state.failed) return;dbg.location(451,21);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:21: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
					int alt69=2;
					try { dbg.enterSubRule(69);
					try { dbg.enterDecision(69, decisionCanBacktrack[69]);

					try {
						isCyclicDecision = true;
						alt69 = dfa69.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(69);}

					switch (alt69) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:22: ( ( ws )? SEMI )=> ( ws )? SEMI
							{
							dbg.location(451,34);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:34: ( ws )?
							int alt68=2;
							try { dbg.enterSubRule(68);
							try { dbg.enterDecision(68, decisionCanBacktrack[68]);

							int LA68_0 = input.LA(1);
							if ( (LA68_0==COMMENT||LA68_0==NL||LA68_0==WS) ) {
								alt68=1;
							}
							} finally {dbg.exitDecision(68);}

							switch (alt68) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:34: ws
									{
									dbg.location(451,34);
									pushFollow(FOLLOW_ws_in_body1251);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(68);}
							dbg.location(451,38);
							match(input,SEMI,FOLLOW_SEMI_in_body1254); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(69);}
					dbg.location(451,45);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:45: ( ws )?
					int alt70=2;
					try { dbg.enterSubRule(70);
					try { dbg.enterDecision(70, decisionCanBacktrack[70]);

					int LA70_0 = input.LA(1);
					if ( (LA70_0==COMMENT||LA70_0==NL||LA70_0==WS) ) {
						alt70=1;
					}
					} finally {dbg.exitDecision(70);}

					switch (alt70) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:45: ws
							{
							dbg.location(451,45);
							pushFollow(FOLLOW_ws_in_body1258);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(70);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:10: ( SEMI ( ws )? )
					{
					dbg.location(453,10);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:10: ( SEMI ( ws )? )
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:12: SEMI ( ws )?
					{
					dbg.location(453,12);
					match(input,SEMI,FOLLOW_SEMI_in_body1285); if (state.failed) return;dbg.location(453,17);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:17: ( ws )?
					int alt71=2;
					try { dbg.enterSubRule(71);
					try { dbg.enterDecision(71, decisionCanBacktrack[71]);

					int LA71_0 = input.LA(1);
					if ( (LA71_0==COMMENT||LA71_0==NL||LA71_0==WS) ) {
						alt71=1;
					}
					} finally {dbg.exitDecision(71);}

					switch (alt71) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:17: ws
							{
							dbg.location(453,17);
							pushFollow(FOLLOW_ws_in_body1287);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(71);}

					}

					}
					break;

				default :
					if ( cnt72 >= 1 ) break loop72;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(72, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt72++;
			}
			} finally {dbg.exitSubRule(72);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(455, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "body");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "body"



	// $ANTLR start "bodyItem"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:457:1: bodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call | ( cp_mixin_call )=>{...}? cp_mixin_call | rule | at_rule |{...}? cp_variable_declaration |{...}? importItem |{...}? sass_debug |{...}? sass_control |{...}? sass_function_declaration );
	public final void bodyItem() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "bodyItem");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(457, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:458:5: ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call | ( cp_mixin_call )=>{...}? cp_mixin_call | rule | at_rule |{...}? cp_variable_declaration |{...}? importItem |{...}? sass_debug |{...}? sass_control |{...}? sass_function_declaration )
			int alt73=10;
			try { dbg.enterDecision(73, decisionCanBacktrack[73]);

			try {
				isCyclicDecision = true;
				alt73 = dfa73.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(73);}

			switch (alt73) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:9: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration
					{
					dbg.location(459,96);
					pushFollow(FOLLOW_cp_mixin_declaration_in_bodyItem1359);
					cp_mixin_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:461:11: ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call
					{
					dbg.location(461,38);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isLessSource()");
					}dbg.location(461,56);
					pushFollow(FOLLOW_cp_mixin_call_in_bodyItem1392);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:11: ( cp_mixin_call )=>{...}? cp_mixin_call
					{
					dbg.location(462,29);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
					}dbg.location(462,47);
					pushFollow(FOLLOW_cp_mixin_call_in_bodyItem1411);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:463:8: rule
					{
					dbg.location(463,8);
					pushFollow(FOLLOW_rule_in_bodyItem1420);
					rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:464:11: at_rule
					{
					dbg.location(464,11);
					pushFollow(FOLLOW_at_rule_in_bodyItem1432);
					at_rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:465:11: {...}? cp_variable_declaration
					{
					dbg.location(465,11);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isCssPreprocessorSource()");
					}dbg.location(465,40);
					pushFollow(FOLLOW_cp_variable_declaration_in_bodyItem1446);
					cp_variable_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:467:11: {...}? importItem
					{
					dbg.location(467,11);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isCssPreprocessorSource()");
					}dbg.location(467,40);
					pushFollow(FOLLOW_importItem_in_bodyItem1469);
					importItem();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:468:11: {...}? sass_debug
					{
					dbg.location(468,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
					}dbg.location(468,29);
					pushFollow(FOLLOW_sass_debug_in_bodyItem1483);
					sass_debug();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 9 :
					dbg.enterAlt(9);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:469:11: {...}? sass_control
					{
					dbg.location(469,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
					}dbg.location(469,29);
					pushFollow(FOLLOW_sass_control_in_bodyItem1497);
					sass_control();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 10 :
					dbg.enterAlt(10);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:470:11: {...}? sass_function_declaration
					{
					dbg.location(470,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
					}dbg.location(470,29);
					pushFollow(FOLLOW_sass_function_declaration_in_bodyItem1511);
					sass_function_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(NL));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(471, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "bodyItem");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "bodyItem"



	// $ANTLR start "at_rule"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:476:1: at_rule : ( media | page | counterStyle | fontFace | vendorAtRule );
	public final void at_rule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "at_rule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(476, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:477:5: ( media | page | counterStyle | fontFace | vendorAtRule )
			int alt74=5;
			try { dbg.enterDecision(74, decisionCanBacktrack[74]);

			switch ( input.LA(1) ) {
			case MEDIA_SYM:
				{
				alt74=1;
				}
				break;
			case PAGE_SYM:
				{
				alt74=2;
				}
				break;
			case COUNTER_STYLE_SYM:
				{
				alt74=3;
				}
				break;
			case FONT_FACE_SYM:
				{
				alt74=4;
				}
				break;
			case AT_IDENT:
			case MOZ_DOCUMENT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt74=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 74, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(74);}

			switch (alt74) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:478:5: media
					{
					dbg.location(478,5);
					pushFollow(FOLLOW_media_in_at_rule1537);
					media();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:479:7: page
					{
					dbg.location(479,7);
					pushFollow(FOLLOW_page_in_at_rule1545);
					page();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:480:7: counterStyle
					{
					dbg.location(480,7);
					pushFollow(FOLLOW_counterStyle_in_at_rule1553);
					counterStyle();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:481:7: fontFace
					{
					dbg.location(481,7);
					pushFollow(FOLLOW_fontFace_in_at_rule1561);
					fontFace();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:482:7: vendorAtRule
					{
					dbg.location(482,7);
					pushFollow(FOLLOW_vendorAtRule_in_at_rule1569);
					vendorAtRule();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(483, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "at_rule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "at_rule"



	// $ANTLR start "vendorAtRule"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:485:1: vendorAtRule : ( moz_document | webkitKeyframes | generic_at_rule );
	public final void vendorAtRule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "vendorAtRule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(485, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:3: ( moz_document | webkitKeyframes | generic_at_rule )
			int alt75=3;
			try { dbg.enterDecision(75, decisionCanBacktrack[75]);

			switch ( input.LA(1) ) {
			case MOZ_DOCUMENT_SYM:
				{
				alt75=1;
				}
				break;
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt75=2;
				}
				break;
			case AT_IDENT:
				{
				alt75=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 75, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(75);}

			switch (alt75) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:3: moz_document
					{
					dbg.location(486,3);
					pushFollow(FOLLOW_moz_document_in_vendorAtRule1582);
					moz_document();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:18: webkitKeyframes
					{
					dbg.location(486,18);
					pushFollow(FOLLOW_webkitKeyframes_in_vendorAtRule1586);
					webkitKeyframes();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:36: generic_at_rule
					{
					dbg.location(486,36);
					pushFollow(FOLLOW_generic_at_rule_in_vendorAtRule1590);
					generic_at_rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(486, 50);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "vendorAtRule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "vendorAtRule"



	// $ANTLR start "atRuleId"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:1: atRuleId : ( IDENT | STRING );
	public final void atRuleId() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "atRuleId");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(488, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:489:2: ( IDENT | STRING )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(489,2);
			if ( input.LA(1)==IDENT||input.LA(1)==STRING ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(491, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "atRuleId");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "atRuleId"



	// $ANTLR start "generic_at_rule"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:493:1: generic_at_rule : AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE ;
	public final void generic_at_rule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "generic_at_rule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(493, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:5: ( AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:7: AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE
			{
			dbg.location(494,7);
			match(input,AT_IDENT,FOLLOW_AT_IDENT_in_generic_at_rule1618); if (state.failed) return;dbg.location(494,16);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:16: ( ws )?
			int alt76=2;
			try { dbg.enterSubRule(76);
			try { dbg.enterDecision(76, decisionCanBacktrack[76]);

			int LA76_0 = input.LA(1);
			if ( (LA76_0==COMMENT||LA76_0==NL||LA76_0==WS) ) {
				alt76=1;
			}
			} finally {dbg.exitDecision(76);}

			switch (alt76) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:16: ws
					{
					dbg.location(494,16);
					pushFollow(FOLLOW_ws_in_generic_at_rule1620);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(76);}
			dbg.location(494,20);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:20: ( atRuleId ( ws )? )?
			int alt78=2;
			try { dbg.enterSubRule(78);
			try { dbg.enterDecision(78, decisionCanBacktrack[78]);

			int LA78_0 = input.LA(1);
			if ( (LA78_0==IDENT||LA78_0==STRING) ) {
				alt78=1;
			}
			} finally {dbg.exitDecision(78);}

			switch (alt78) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:22: atRuleId ( ws )?
					{
					dbg.location(494,22);
					pushFollow(FOLLOW_atRuleId_in_generic_at_rule1625);
					atRuleId();
					state._fsp--;
					if (state.failed) return;dbg.location(494,31);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:31: ( ws )?
					int alt77=2;
					try { dbg.enterSubRule(77);
					try { dbg.enterDecision(77, decisionCanBacktrack[77]);

					int LA77_0 = input.LA(1);
					if ( (LA77_0==COMMENT||LA77_0==NL||LA77_0==WS) ) {
						alt77=1;
					}
					} finally {dbg.exitDecision(77);}

					switch (alt77) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:494:31: ws
							{
							dbg.location(494,31);
							pushFollow(FOLLOW_ws_in_generic_at_rule1627);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(77);}

					}
					break;

			}
			} finally {dbg.exitSubRule(78);}
			dbg.location(495,9);
			match(input,LBRACE,FOLLOW_LBRACE_in_generic_at_rule1641); if (state.failed) return;dbg.location(496,10);
			pushFollow(FOLLOW_syncTo_RBRACE_in_generic_at_rule1652);
			syncTo_RBRACE();
			state._fsp--;
			if (state.failed) return;dbg.location(497,9);
			match(input,RBRACE,FOLLOW_RBRACE_in_generic_at_rule1662); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(498, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "generic_at_rule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "generic_at_rule"



	// $ANTLR start "moz_document"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:499:1: moz_document : MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE ;
	public final void moz_document() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "moz_document");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(499, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:500:2: ( MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:501:2: MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE
			{
			dbg.location(501,2);
			match(input,MOZ_DOCUMENT_SYM,FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document1673); if (state.failed) return;dbg.location(501,19);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:501:19: ( ws )?
			int alt79=2;
			try { dbg.enterSubRule(79);
			try { dbg.enterDecision(79, decisionCanBacktrack[79]);

			int LA79_0 = input.LA(1);
			if ( (LA79_0==COMMENT||LA79_0==NL||LA79_0==WS) ) {
				alt79=1;
			}
			} finally {dbg.exitDecision(79);}

			switch (alt79) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:501:19: ws
					{
					dbg.location(501,19);
					pushFollow(FOLLOW_ws_in_moz_document1675);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(79);}
			dbg.location(501,23);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:501:23: ( moz_document_function ( ws )? )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:501:25: moz_document_function ( ws )?
			{
			dbg.location(501,25);
			pushFollow(FOLLOW_moz_document_function_in_moz_document1680);
			moz_document_function();
			state._fsp--;
			if (state.failed) return;dbg.location(501,47);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:501:47: ( ws )?
			int alt80=2;
			try { dbg.enterSubRule(80);
			try { dbg.enterDecision(80, decisionCanBacktrack[80]);

			int LA80_0 = input.LA(1);
			if ( (LA80_0==COMMENT||LA80_0==NL||LA80_0==WS) ) {
				alt80=1;
			}
			} finally {dbg.exitDecision(80);}

			switch (alt80) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:501:47: ws
					{
					dbg.location(501,47);
					pushFollow(FOLLOW_ws_in_moz_document1682);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(80);}

			}
			dbg.location(501,52);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:501:52: ( COMMA ( ws )? moz_document_function ( ws )? )*
			try { dbg.enterSubRule(83);

			loop83:
			while (true) {
				int alt83=2;
				try { dbg.enterDecision(83, decisionCanBacktrack[83]);

				int LA83_0 = input.LA(1);
				if ( (LA83_0==COMMA) ) {
					alt83=1;
				}

				} finally {dbg.exitDecision(83);}

				switch (alt83) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:501:54: COMMA ( ws )? moz_document_function ( ws )?
					{
					dbg.location(501,54);
					match(input,COMMA,FOLLOW_COMMA_in_moz_document1688); if (state.failed) return;dbg.location(501,60);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:501:60: ( ws )?
					int alt81=2;
					try { dbg.enterSubRule(81);
					try { dbg.enterDecision(81, decisionCanBacktrack[81]);

					int LA81_0 = input.LA(1);
					if ( (LA81_0==COMMENT||LA81_0==NL||LA81_0==WS) ) {
						alt81=1;
					}
					} finally {dbg.exitDecision(81);}

					switch (alt81) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:501:60: ws
							{
							dbg.location(501,60);
							pushFollow(FOLLOW_ws_in_moz_document1690);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(81);}
					dbg.location(501,64);
					pushFollow(FOLLOW_moz_document_function_in_moz_document1693);
					moz_document_function();
					state._fsp--;
					if (state.failed) return;dbg.location(501,86);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:501:86: ( ws )?
					int alt82=2;
					try { dbg.enterSubRule(82);
					try { dbg.enterDecision(82, decisionCanBacktrack[82]);

					int LA82_0 = input.LA(1);
					if ( (LA82_0==COMMENT||LA82_0==NL||LA82_0==WS) ) {
						alt82=1;
					}
					} finally {dbg.exitDecision(82);}

					switch (alt82) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:501:86: ws
							{
							dbg.location(501,86);
							pushFollow(FOLLOW_ws_in_moz_document1695);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(82);}

					}
					break;

				default :
					break loop83;
				}
			}
			} finally {dbg.exitSubRule(83);}
			dbg.location(502,2);
			match(input,LBRACE,FOLLOW_LBRACE_in_moz_document1702); if (state.failed) return;dbg.location(502,9);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:9: ( ws )?
			int alt84=2;
			try { dbg.enterSubRule(84);
			try { dbg.enterDecision(84, decisionCanBacktrack[84]);

			int LA84_0 = input.LA(1);
			if ( (LA84_0==COMMENT||LA84_0==NL||LA84_0==WS) ) {
				alt84=1;
			}
			} finally {dbg.exitDecision(84);}

			switch (alt84) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:9: ws
					{
					dbg.location(502,9);
					pushFollow(FOLLOW_ws_in_moz_document1704);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(84);}
			dbg.location(503,3);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:503:3: ( body )?
			int alt85=2;
			try { dbg.enterSubRule(85);
			try { dbg.enterDecision(85, decisionCanBacktrack[85]);

			int LA85_0 = input.LA(1);
			if ( ((LA85_0 >= AT_IDENT && LA85_0 <= AT_SIGN)||(LA85_0 >= BOTTOMCENTER_SYM && LA85_0 <= BOTTOMRIGHT_SYM)||(LA85_0 >= CHARSET_SYM && LA85_0 <= COMMA)||LA85_0==COUNTER_STYLE_SYM||LA85_0==DCOLON||LA85_0==DOT||LA85_0==FONT_FACE_SYM||(LA85_0 >= GEN && LA85_0 <= GREATER)||(LA85_0 >= HASH && LA85_0 <= HASH_SYMBOL)||LA85_0==IDENT||LA85_0==IMPORT_SYM||(LA85_0 >= LBRACKET && LA85_0 <= LEFTTOP_SYM)||LA85_0==LESS_AND||(LA85_0 >= MEDIA_SYM && LA85_0 <= MOZ_DOCUMENT_SYM)||LA85_0==NAMESPACE_SYM||LA85_0==PAGE_SYM||(LA85_0 >= PIPE && LA85_0 <= PLUS)||LA85_0==RBRACKET||(LA85_0 >= RIGHTBOTTOM_SYM && LA85_0 <= RIGHTTOP_SYM)||(LA85_0 >= SASS_CONTENT && LA85_0 <= SASS_DEBUG)||(LA85_0 >= SASS_EACH && LA85_0 <= SASS_MIXIN)||(LA85_0 >= SASS_RETURN && LA85_0 <= SEMI)||LA85_0==STAR||LA85_0==TILDE||(LA85_0 >= TOPCENTER_SYM && LA85_0 <= TOPRIGHT_SYM)||LA85_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt85=1;
			}
			} finally {dbg.exitDecision(85);}

			switch (alt85) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:503:3: body
					{
					dbg.location(503,3);
					pushFollow(FOLLOW_body_in_moz_document1709);
					body();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(85);}
			dbg.location(504,2);
			match(input,RBRACE,FOLLOW_RBRACE_in_moz_document1714); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(505, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "moz_document");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "moz_document"



	// $ANTLR start "moz_document_function"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:507:1: moz_document_function : ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP );
	public final void moz_document_function() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "moz_document_function");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(507, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:2: ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(508,2);
			if ( (input.LA(1) >= MOZ_DOMAIN && input.LA(1) <= MOZ_URL_PREFIX)||input.LA(1)==URI ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(510, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "moz_document_function");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "moz_document_function"



	// $ANTLR start "webkitKeyframes"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:513:1: webkitKeyframes : WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE ;
	public final void webkitKeyframes() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "webkitKeyframes");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(513, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:514:2: ( WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:515:2: WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE
			{
			dbg.location(515,2);
			match(input,WEBKIT_KEYFRAMES_SYM,FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes1751); if (state.failed) return;dbg.location(515,23);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:515:23: ( ws )?
			int alt86=2;
			try { dbg.enterSubRule(86);
			try { dbg.enterDecision(86, decisionCanBacktrack[86]);

			int LA86_0 = input.LA(1);
			if ( (LA86_0==COMMENT||LA86_0==NL||LA86_0==WS) ) {
				alt86=1;
			}
			} finally {dbg.exitDecision(86);}

			switch (alt86) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:515:23: ws
					{
					dbg.location(515,23);
					pushFollow(FOLLOW_ws_in_webkitKeyframes1753);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(86);}
			dbg.location(515,27);
			pushFollow(FOLLOW_atRuleId_in_webkitKeyframes1756);
			atRuleId();
			state._fsp--;
			if (state.failed) return;dbg.location(515,36);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:515:36: ( ws )?
			int alt87=2;
			try { dbg.enterSubRule(87);
			try { dbg.enterDecision(87, decisionCanBacktrack[87]);

			int LA87_0 = input.LA(1);
			if ( (LA87_0==COMMENT||LA87_0==NL||LA87_0==WS) ) {
				alt87=1;
			}
			} finally {dbg.exitDecision(87);}

			switch (alt87) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:515:36: ws
					{
					dbg.location(515,36);
					pushFollow(FOLLOW_ws_in_webkitKeyframes1758);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(87);}
			dbg.location(516,2);
			match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframes1762); if (state.failed) return;dbg.location(516,9);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:9: ( ws )?
			int alt88=2;
			try { dbg.enterSubRule(88);
			try { dbg.enterDecision(88, decisionCanBacktrack[88]);

			int LA88_0 = input.LA(1);
			if ( (LA88_0==COMMENT||LA88_0==NL||LA88_0==WS) ) {
				alt88=1;
			}
			} finally {dbg.exitDecision(88);}

			switch (alt88) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:9: ws
					{
					dbg.location(516,9);
					pushFollow(FOLLOW_ws_in_webkitKeyframes1764);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(88);}
			dbg.location(517,3);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:517:3: ( webkitKeyframesBlock ( ws )? )*
			try { dbg.enterSubRule(90);

			loop90:
			while (true) {
				int alt90=2;
				try { dbg.enterDecision(90, decisionCanBacktrack[90]);

				int LA90_0 = input.LA(1);
				if ( (LA90_0==IDENT||LA90_0==PERCENTAGE) ) {
					alt90=1;
				}

				} finally {dbg.exitDecision(90);}

				switch (alt90) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:517:5: webkitKeyframesBlock ( ws )?
					{
					dbg.location(517,5);
					pushFollow(FOLLOW_webkitKeyframesBlock_in_webkitKeyframes1771);
					webkitKeyframesBlock();
					state._fsp--;
					if (state.failed) return;dbg.location(517,26);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:517:26: ( ws )?
					int alt89=2;
					try { dbg.enterSubRule(89);
					try { dbg.enterDecision(89, decisionCanBacktrack[89]);

					int LA89_0 = input.LA(1);
					if ( (LA89_0==COMMENT||LA89_0==NL||LA89_0==WS) ) {
						alt89=1;
					}
					} finally {dbg.exitDecision(89);}

					switch (alt89) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:517:26: ws
							{
							dbg.location(517,26);
							pushFollow(FOLLOW_ws_in_webkitKeyframes1773);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(89);}

					}
					break;

				default :
					break loop90;
				}
			}
			} finally {dbg.exitSubRule(90);}
			dbg.location(518,2);
			match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframes1780); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(519, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "webkitKeyframes");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "webkitKeyframes"



	// $ANTLR start "webkitKeyframesBlock"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:521:1: webkitKeyframesBlock : webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
	public final void webkitKeyframesBlock() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "webkitKeyframesBlock");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(521, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:522:2: ( webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:523:2: webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
			{
			dbg.location(523,2);
			pushFollow(FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock1792);
			webkitKeyframeSelectors();
			state._fsp--;
			if (state.failed) return;dbg.location(523,26);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:523:26: ( ws )?
			int alt91=2;
			try { dbg.enterSubRule(91);
			try { dbg.enterDecision(91, decisionCanBacktrack[91]);

			int LA91_0 = input.LA(1);
			if ( (LA91_0==COMMENT||LA91_0==NL||LA91_0==WS) ) {
				alt91=1;
			}
			} finally {dbg.exitDecision(91);}

			switch (alt91) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:523:26: ws
					{
					dbg.location(523,26);
					pushFollow(FOLLOW_ws_in_webkitKeyframesBlock1794);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(91);}
			dbg.location(524,2);
			match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframesBlock1798); if (state.failed) return;dbg.location(524,10);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:10: ( ws )?
			int alt92=2;
			try { dbg.enterSubRule(92);
			try { dbg.enterDecision(92, decisionCanBacktrack[92]);

			int LA92_0 = input.LA(1);
			if ( (LA92_0==COMMENT||LA92_0==NL||LA92_0==WS) ) {
				alt92=1;
			}
			} finally {dbg.exitDecision(92);}

			switch (alt92) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:10: ws
					{
					dbg.location(524,10);
					pushFollow(FOLLOW_ws_in_webkitKeyframesBlock1801);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(92);}
			dbg.location(524,14);
			pushFollow(FOLLOW_syncToFollow_in_webkitKeyframesBlock1804);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(525,3);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:525:3: ( declarations )?
			int alt93=2;
			try { dbg.enterSubRule(93);
			try { dbg.enterDecision(93, decisionCanBacktrack[93]);

			int LA93_0 = input.LA(1);
			if ( ((LA93_0 >= AT_IDENT && LA93_0 <= AT_SIGN)||(LA93_0 >= BOTTOMCENTER_SYM && LA93_0 <= BOTTOMRIGHT_SYM)||(LA93_0 >= CHARSET_SYM && LA93_0 <= COMMA)||LA93_0==COUNTER_STYLE_SYM||LA93_0==DCOLON||LA93_0==DOT||LA93_0==FONT_FACE_SYM||(LA93_0 >= GEN && LA93_0 <= GREATER)||(LA93_0 >= HASH && LA93_0 <= HASH_SYMBOL)||LA93_0==IDENT||LA93_0==IMPORT_SYM||(LA93_0 >= LBRACKET && LA93_0 <= LEFTTOP_SYM)||LA93_0==LESS_AND||(LA93_0 >= MEDIA_SYM && LA93_0 <= MOZ_DOCUMENT_SYM)||LA93_0==NAMESPACE_SYM||LA93_0==PAGE_SYM||(LA93_0 >= PIPE && LA93_0 <= PLUS)||LA93_0==RBRACKET||(LA93_0 >= RIGHTBOTTOM_SYM && LA93_0 <= RIGHTTOP_SYM)||(LA93_0 >= SASS_CONTENT && LA93_0 <= SASS_DEBUG)||(LA93_0 >= SASS_EACH && LA93_0 <= SASS_MIXIN)||(LA93_0 >= SASS_RETURN && LA93_0 <= SEMI)||LA93_0==STAR||LA93_0==TILDE||(LA93_0 >= TOPCENTER_SYM && LA93_0 <= TOPRIGHT_SYM)||LA93_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt93=1;
			}
			} finally {dbg.exitDecision(93);}

			switch (alt93) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:525:3: declarations
					{
					dbg.location(525,3);
					pushFollow(FOLLOW_declarations_in_webkitKeyframesBlock1808);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(93);}
			dbg.location(526,2);
			match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframesBlock1812); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(527, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "webkitKeyframesBlock");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "webkitKeyframesBlock"



	// $ANTLR start "webkitKeyframeSelectors"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:529:1: webkitKeyframeSelectors : ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )* ;
	public final void webkitKeyframeSelectors() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "webkitKeyframeSelectors");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(529, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:2: ( ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )* )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:531:2: ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*
			{
			dbg.location(531,2);
			if ( input.LA(1)==IDENT||input.LA(1)==PERCENTAGE ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}dbg.location(531,25);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:531:25: ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*
			try { dbg.enterSubRule(96);

			loop96:
			while (true) {
				int alt96=2;
				try { dbg.enterDecision(96, decisionCanBacktrack[96]);

				try {
					isCyclicDecision = true;
					alt96 = dfa96.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(96);}

				switch (alt96) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:531:27: ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE )
					{
					dbg.location(531,27);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:531:27: ( ws )?
					int alt94=2;
					try { dbg.enterSubRule(94);
					try { dbg.enterDecision(94, decisionCanBacktrack[94]);

					int LA94_0 = input.LA(1);
					if ( (LA94_0==COMMENT||LA94_0==NL||LA94_0==WS) ) {
						alt94=1;
					}
					} finally {dbg.exitDecision(94);}

					switch (alt94) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:531:27: ws
							{
							dbg.location(531,27);
							pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors1836);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(94);}
					dbg.location(531,31);
					match(input,COMMA,FOLLOW_COMMA_in_webkitKeyframeSelectors1839); if (state.failed) return;dbg.location(531,37);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:531:37: ( ws )?
					int alt95=2;
					try { dbg.enterSubRule(95);
					try { dbg.enterDecision(95, decisionCanBacktrack[95]);

					int LA95_0 = input.LA(1);
					if ( (LA95_0==COMMENT||LA95_0==NL||LA95_0==WS) ) {
						alt95=1;
					}
					} finally {dbg.exitDecision(95);}

					switch (alt95) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:531:37: ws
							{
							dbg.location(531,37);
							pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors1841);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(95);}
					dbg.location(531,41);
					if ( input.LA(1)==IDENT||input.LA(1)==PERCENTAGE ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;

				default :
					break loop96;
				}
			}
			} finally {dbg.exitSubRule(96);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(532, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "webkitKeyframeSelectors");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "webkitKeyframeSelectors"



	// $ANTLR start "page"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:534:1: page : PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )* RBRACE ;
	public final void page() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "page");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(534, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:535:5: ( PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )* RBRACE )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:535:7: PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )* RBRACE
			{
			dbg.location(535,7);
			match(input,PAGE_SYM,FOLLOW_PAGE_SYM_in_page1869); if (state.failed) return;dbg.location(535,16);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:535:16: ( ws )?
			int alt97=2;
			try { dbg.enterSubRule(97);
			try { dbg.enterDecision(97, decisionCanBacktrack[97]);

			int LA97_0 = input.LA(1);
			if ( (LA97_0==COMMENT||LA97_0==NL||LA97_0==WS) ) {
				alt97=1;
			}
			} finally {dbg.exitDecision(97);}

			switch (alt97) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:535:16: ws
					{
					dbg.location(535,16);
					pushFollow(FOLLOW_ws_in_page1871);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(97);}
			dbg.location(535,20);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:535:20: ( IDENT ( ws )? )?
			int alt99=2;
			try { dbg.enterSubRule(99);
			try { dbg.enterDecision(99, decisionCanBacktrack[99]);

			int LA99_0 = input.LA(1);
			if ( (LA99_0==IDENT) ) {
				alt99=1;
			}
			} finally {dbg.exitDecision(99);}

			switch (alt99) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:535:22: IDENT ( ws )?
					{
					dbg.location(535,22);
					match(input,IDENT,FOLLOW_IDENT_in_page1876); if (state.failed) return;dbg.location(535,28);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:535:28: ( ws )?
					int alt98=2;
					try { dbg.enterSubRule(98);
					try { dbg.enterDecision(98, decisionCanBacktrack[98]);

					int LA98_0 = input.LA(1);
					if ( (LA98_0==COMMENT||LA98_0==NL||LA98_0==WS) ) {
						alt98=1;
					}
					} finally {dbg.exitDecision(98);}

					switch (alt98) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:535:28: ws
							{
							dbg.location(535,28);
							pushFollow(FOLLOW_ws_in_page1878);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(98);}

					}
					break;

			}
			} finally {dbg.exitSubRule(99);}
			dbg.location(535,35);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:535:35: ( pseudoPage ( ws )? )?
			int alt101=2;
			try { dbg.enterSubRule(101);
			try { dbg.enterDecision(101, decisionCanBacktrack[101]);

			int LA101_0 = input.LA(1);
			if ( (LA101_0==COLON) ) {
				alt101=1;
			}
			} finally {dbg.exitDecision(101);}

			switch (alt101) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:535:36: pseudoPage ( ws )?
					{
					dbg.location(535,36);
					pushFollow(FOLLOW_pseudoPage_in_page1885);
					pseudoPage();
					state._fsp--;
					if (state.failed) return;dbg.location(535,47);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:535:47: ( ws )?
					int alt100=2;
					try { dbg.enterSubRule(100);
					try { dbg.enterDecision(100, decisionCanBacktrack[100]);

					int LA100_0 = input.LA(1);
					if ( (LA100_0==COMMENT||LA100_0==NL||LA100_0==WS) ) {
						alt100=1;
					}
					} finally {dbg.exitDecision(100);}

					switch (alt100) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:535:47: ws
							{
							dbg.location(535,47);
							pushFollow(FOLLOW_ws_in_page1887);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(100);}

					}
					break;

			}
			} finally {dbg.exitSubRule(101);}
			dbg.location(536,9);
			match(input,LBRACE,FOLLOW_LBRACE_in_page1900); if (state.failed) return;dbg.location(536,16);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:16: ( ws )?
			int alt102=2;
			try { dbg.enterSubRule(102);
			try { dbg.enterDecision(102, decisionCanBacktrack[102]);

			int LA102_0 = input.LA(1);
			if ( (LA102_0==COMMENT||LA102_0==NL||LA102_0==WS) ) {
				alt102=1;
			}
			} finally {dbg.exitDecision(102);}

			switch (alt102) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:16: ws
					{
					dbg.location(536,16);
					pushFollow(FOLLOW_ws_in_page1902);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(102);}
			dbg.location(539,13);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:13: ( ( propertyDeclaration | margin ) ( ws )? )?
			int alt105=2;
			try { dbg.enterSubRule(105);
			try { dbg.enterDecision(105, decisionCanBacktrack[105]);

			int LA105_0 = input.LA(1);
			if ( (LA105_0==AT_IDENT||(LA105_0 >= BOTTOMCENTER_SYM && LA105_0 <= BOTTOMRIGHT_SYM)||LA105_0==CHARSET_SYM||LA105_0==COUNTER_STYLE_SYM||LA105_0==DOT||LA105_0==FONT_FACE_SYM||LA105_0==GEN||(LA105_0 >= HASH && LA105_0 <= HASH_SYMBOL)||LA105_0==IDENT||LA105_0==IMPORT_SYM||(LA105_0 >= LEFTBOTTOM_SYM && LA105_0 <= LEFTTOP_SYM)||(LA105_0 >= MEDIA_SYM && LA105_0 <= MOZ_DOCUMENT_SYM)||LA105_0==NAMESPACE_SYM||LA105_0==PAGE_SYM||(LA105_0 >= RIGHTBOTTOM_SYM && LA105_0 <= RIGHTTOP_SYM)||(LA105_0 >= SASS_CONTENT && LA105_0 <= SASS_DEBUG)||(LA105_0 >= SASS_EACH && LA105_0 <= SASS_EXTEND)||(LA105_0 >= SASS_FOR && LA105_0 <= SASS_MIXIN)||(LA105_0 >= SASS_RETURN && LA105_0 <= SASS_WHILE)||LA105_0==STAR||(LA105_0 >= TOPCENTER_SYM && LA105_0 <= TOPRIGHT_SYM)||LA105_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt105=1;
			}
			} finally {dbg.exitDecision(105);}

			switch (alt105) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:14: ( propertyDeclaration | margin ) ( ws )?
					{
					dbg.location(539,14);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:14: ( propertyDeclaration | margin )
					int alt103=2;
					try { dbg.enterSubRule(103);
					try { dbg.enterDecision(103, decisionCanBacktrack[103]);

					try {
						isCyclicDecision = true;
						alt103 = dfa103.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(103);}

					switch (alt103) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:15: propertyDeclaration
							{
							dbg.location(539,15);
							pushFollow(FOLLOW_propertyDeclaration_in_page1945);
							propertyDeclaration();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:35: margin
							{
							dbg.location(539,35);
							pushFollow(FOLLOW_margin_in_page1947);
							margin();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(103);}
					dbg.location(539,43);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:43: ( ws )?
					int alt104=2;
					try { dbg.enterSubRule(104);
					try { dbg.enterDecision(104, decisionCanBacktrack[104]);

					int LA104_0 = input.LA(1);
					if ( (LA104_0==COMMENT||LA104_0==NL||LA104_0==WS) ) {
						alt104=1;
					}
					} finally {dbg.exitDecision(104);}

					switch (alt104) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:43: ws
							{
							dbg.location(539,43);
							pushFollow(FOLLOW_ws_in_page1950);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(104);}

					}
					break;

			}
			} finally {dbg.exitSubRule(105);}
			dbg.location(539,49);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:49: ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )*
			try { dbg.enterSubRule(110);

			loop110:
			while (true) {
				int alt110=2;
				try { dbg.enterDecision(110, decisionCanBacktrack[110]);

				int LA110_0 = input.LA(1);
				if ( (LA110_0==SEMI) ) {
					alt110=1;
				}

				} finally {dbg.exitDecision(110);}

				switch (alt110) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:50: SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )?
					{
					dbg.location(539,50);
					match(input,SEMI,FOLLOW_SEMI_in_page1956); if (state.failed) return;dbg.location(539,55);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:55: ( ws )?
					int alt106=2;
					try { dbg.enterSubRule(106);
					try { dbg.enterDecision(106, decisionCanBacktrack[106]);

					int LA106_0 = input.LA(1);
					if ( (LA106_0==COMMENT||LA106_0==NL||LA106_0==WS) ) {
						alt106=1;
					}
					} finally {dbg.exitDecision(106);}

					switch (alt106) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:55: ws
							{
							dbg.location(539,55);
							pushFollow(FOLLOW_ws_in_page1958);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(106);}
					dbg.location(539,59);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:59: ( ( propertyDeclaration | margin ) ( ws )? )?
					int alt109=2;
					try { dbg.enterSubRule(109);
					try { dbg.enterDecision(109, decisionCanBacktrack[109]);

					int LA109_0 = input.LA(1);
					if ( (LA109_0==AT_IDENT||(LA109_0 >= BOTTOMCENTER_SYM && LA109_0 <= BOTTOMRIGHT_SYM)||LA109_0==CHARSET_SYM||LA109_0==COUNTER_STYLE_SYM||LA109_0==DOT||LA109_0==FONT_FACE_SYM||LA109_0==GEN||(LA109_0 >= HASH && LA109_0 <= HASH_SYMBOL)||LA109_0==IDENT||LA109_0==IMPORT_SYM||(LA109_0 >= LEFTBOTTOM_SYM && LA109_0 <= LEFTTOP_SYM)||(LA109_0 >= MEDIA_SYM && LA109_0 <= MOZ_DOCUMENT_SYM)||LA109_0==NAMESPACE_SYM||LA109_0==PAGE_SYM||(LA109_0 >= RIGHTBOTTOM_SYM && LA109_0 <= RIGHTTOP_SYM)||(LA109_0 >= SASS_CONTENT && LA109_0 <= SASS_DEBUG)||(LA109_0 >= SASS_EACH && LA109_0 <= SASS_EXTEND)||(LA109_0 >= SASS_FOR && LA109_0 <= SASS_MIXIN)||(LA109_0 >= SASS_RETURN && LA109_0 <= SASS_WHILE)||LA109_0==STAR||(LA109_0 >= TOPCENTER_SYM && LA109_0 <= TOPRIGHT_SYM)||LA109_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt109=1;
					}
					} finally {dbg.exitDecision(109);}

					switch (alt109) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:60: ( propertyDeclaration | margin ) ( ws )?
							{
							dbg.location(539,60);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:60: ( propertyDeclaration | margin )
							int alt107=2;
							try { dbg.enterSubRule(107);
							try { dbg.enterDecision(107, decisionCanBacktrack[107]);

							try {
								isCyclicDecision = true;
								alt107 = dfa107.predict(input);
							}
							catch (NoViableAltException nvae) {
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(107);}

							switch (alt107) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:61: propertyDeclaration
									{
									dbg.location(539,61);
									pushFollow(FOLLOW_propertyDeclaration_in_page1963);
									propertyDeclaration();
									state._fsp--;
									if (state.failed) return;
									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:81: margin
									{
									dbg.location(539,81);
									pushFollow(FOLLOW_margin_in_page1965);
									margin();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(107);}
							dbg.location(539,89);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:89: ( ws )?
							int alt108=2;
							try { dbg.enterSubRule(108);
							try { dbg.enterDecision(108, decisionCanBacktrack[108]);

							int LA108_0 = input.LA(1);
							if ( (LA108_0==COMMENT||LA108_0==NL||LA108_0==WS) ) {
								alt108=1;
							}
							} finally {dbg.exitDecision(108);}

							switch (alt108) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:539:89: ws
									{
									dbg.location(539,89);
									pushFollow(FOLLOW_ws_in_page1968);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(108);}

							}
							break;

					}
					} finally {dbg.exitSubRule(109);}

					}
					break;

				default :
					break loop110;
				}
			}
			} finally {dbg.exitSubRule(110);}
			dbg.location(540,9);
			match(input,RBRACE,FOLLOW_RBRACE_in_page1983); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(541, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "page");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "page"



	// $ANTLR start "counterStyle"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:543:1: counterStyle : COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
	public final void counterStyle() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "counterStyle");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(543, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:544:5: ( COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:544:7: COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
			{
			dbg.location(544,7);
			match(input,COUNTER_STYLE_SYM,FOLLOW_COUNTER_STYLE_SYM_in_counterStyle2000); if (state.failed) return;dbg.location(544,25);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:544:25: ( ws )?
			int alt111=2;
			try { dbg.enterSubRule(111);
			try { dbg.enterDecision(111, decisionCanBacktrack[111]);

			int LA111_0 = input.LA(1);
			if ( (LA111_0==COMMENT||LA111_0==NL||LA111_0==WS) ) {
				alt111=1;
			}
			} finally {dbg.exitDecision(111);}

			switch (alt111) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:544:25: ws
					{
					dbg.location(544,25);
					pushFollow(FOLLOW_ws_in_counterStyle2002);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(111);}
			dbg.location(544,29);
			match(input,IDENT,FOLLOW_IDENT_in_counterStyle2005); if (state.failed) return;dbg.location(544,35);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:544:35: ( ws )?
			int alt112=2;
			try { dbg.enterSubRule(112);
			try { dbg.enterDecision(112, decisionCanBacktrack[112]);

			int LA112_0 = input.LA(1);
			if ( (LA112_0==COMMENT||LA112_0==NL||LA112_0==WS) ) {
				alt112=1;
			}
			} finally {dbg.exitDecision(112);}

			switch (alt112) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:544:35: ws
					{
					dbg.location(544,35);
					pushFollow(FOLLOW_ws_in_counterStyle2007);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(112);}
			dbg.location(545,9);
			match(input,LBRACE,FOLLOW_LBRACE_in_counterStyle2018); if (state.failed) return;dbg.location(545,16);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:545:16: ( ws )?
			int alt113=2;
			try { dbg.enterSubRule(113);
			try { dbg.enterDecision(113, decisionCanBacktrack[113]);

			int LA113_0 = input.LA(1);
			if ( (LA113_0==COMMENT||LA113_0==NL||LA113_0==WS) ) {
				alt113=1;
			}
			} finally {dbg.exitDecision(113);}

			switch (alt113) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:545:16: ws
					{
					dbg.location(545,16);
					pushFollow(FOLLOW_ws_in_counterStyle2020);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(113);}
			dbg.location(545,20);
			pushFollow(FOLLOW_syncToDeclarationsRule_in_counterStyle2023);
			syncToDeclarationsRule();
			state._fsp--;
			if (state.failed) return;dbg.location(546,3);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:546:3: ( declarations )?
			int alt114=2;
			try { dbg.enterSubRule(114);
			try { dbg.enterDecision(114, decisionCanBacktrack[114]);

			int LA114_0 = input.LA(1);
			if ( ((LA114_0 >= AT_IDENT && LA114_0 <= AT_SIGN)||(LA114_0 >= BOTTOMCENTER_SYM && LA114_0 <= BOTTOMRIGHT_SYM)||(LA114_0 >= CHARSET_SYM && LA114_0 <= COMMA)||LA114_0==COUNTER_STYLE_SYM||LA114_0==DCOLON||LA114_0==DOT||LA114_0==FONT_FACE_SYM||(LA114_0 >= GEN && LA114_0 <= GREATER)||(LA114_0 >= HASH && LA114_0 <= HASH_SYMBOL)||LA114_0==IDENT||LA114_0==IMPORT_SYM||(LA114_0 >= LBRACKET && LA114_0 <= LEFTTOP_SYM)||LA114_0==LESS_AND||(LA114_0 >= MEDIA_SYM && LA114_0 <= MOZ_DOCUMENT_SYM)||LA114_0==NAMESPACE_SYM||LA114_0==PAGE_SYM||(LA114_0 >= PIPE && LA114_0 <= PLUS)||LA114_0==RBRACKET||(LA114_0 >= RIGHTBOTTOM_SYM && LA114_0 <= RIGHTTOP_SYM)||(LA114_0 >= SASS_CONTENT && LA114_0 <= SASS_DEBUG)||(LA114_0 >= SASS_EACH && LA114_0 <= SASS_MIXIN)||(LA114_0 >= SASS_RETURN && LA114_0 <= SEMI)||LA114_0==STAR||LA114_0==TILDE||(LA114_0 >= TOPCENTER_SYM && LA114_0 <= TOPRIGHT_SYM)||LA114_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt114=1;
			}
			} finally {dbg.exitDecision(114);}

			switch (alt114) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:546:3: declarations
					{
					dbg.location(546,3);
					pushFollow(FOLLOW_declarations_in_counterStyle2027);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(114);}
			dbg.location(547,9);
			match(input,RBRACE,FOLLOW_RBRACE_in_counterStyle2038); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(548, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "counterStyle");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "counterStyle"



	// $ANTLR start "fontFace"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:550:1: fontFace : FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
	public final void fontFace() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fontFace");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(550, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:551:5: ( FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:551:7: FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
			{
			dbg.location(551,7);
			match(input,FONT_FACE_SYM,FOLLOW_FONT_FACE_SYM_in_fontFace2055); if (state.failed) return;dbg.location(551,21);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:551:21: ( ws )?
			int alt115=2;
			try { dbg.enterSubRule(115);
			try { dbg.enterDecision(115, decisionCanBacktrack[115]);

			int LA115_0 = input.LA(1);
			if ( (LA115_0==COMMENT||LA115_0==NL||LA115_0==WS) ) {
				alt115=1;
			}
			} finally {dbg.exitDecision(115);}

			switch (alt115) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:551:21: ws
					{
					dbg.location(551,21);
					pushFollow(FOLLOW_ws_in_fontFace2057);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(115);}
			dbg.location(552,9);
			match(input,LBRACE,FOLLOW_LBRACE_in_fontFace2068); if (state.failed) return;dbg.location(552,16);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:552:16: ( ws )?
			int alt116=2;
			try { dbg.enterSubRule(116);
			try { dbg.enterDecision(116, decisionCanBacktrack[116]);

			int LA116_0 = input.LA(1);
			if ( (LA116_0==COMMENT||LA116_0==NL||LA116_0==WS) ) {
				alt116=1;
			}
			} finally {dbg.exitDecision(116);}

			switch (alt116) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:552:16: ws
					{
					dbg.location(552,16);
					pushFollow(FOLLOW_ws_in_fontFace2070);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(116);}
			dbg.location(552,20);
			pushFollow(FOLLOW_syncToDeclarationsRule_in_fontFace2073);
			syncToDeclarationsRule();
			state._fsp--;
			if (state.failed) return;dbg.location(553,3);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:553:3: ( declarations )?
			int alt117=2;
			try { dbg.enterSubRule(117);
			try { dbg.enterDecision(117, decisionCanBacktrack[117]);

			int LA117_0 = input.LA(1);
			if ( ((LA117_0 >= AT_IDENT && LA117_0 <= AT_SIGN)||(LA117_0 >= BOTTOMCENTER_SYM && LA117_0 <= BOTTOMRIGHT_SYM)||(LA117_0 >= CHARSET_SYM && LA117_0 <= COMMA)||LA117_0==COUNTER_STYLE_SYM||LA117_0==DCOLON||LA117_0==DOT||LA117_0==FONT_FACE_SYM||(LA117_0 >= GEN && LA117_0 <= GREATER)||(LA117_0 >= HASH && LA117_0 <= HASH_SYMBOL)||LA117_0==IDENT||LA117_0==IMPORT_SYM||(LA117_0 >= LBRACKET && LA117_0 <= LEFTTOP_SYM)||LA117_0==LESS_AND||(LA117_0 >= MEDIA_SYM && LA117_0 <= MOZ_DOCUMENT_SYM)||LA117_0==NAMESPACE_SYM||LA117_0==PAGE_SYM||(LA117_0 >= PIPE && LA117_0 <= PLUS)||LA117_0==RBRACKET||(LA117_0 >= RIGHTBOTTOM_SYM && LA117_0 <= RIGHTTOP_SYM)||(LA117_0 >= SASS_CONTENT && LA117_0 <= SASS_DEBUG)||(LA117_0 >= SASS_EACH && LA117_0 <= SASS_MIXIN)||(LA117_0 >= SASS_RETURN && LA117_0 <= SEMI)||LA117_0==STAR||LA117_0==TILDE||(LA117_0 >= TOPCENTER_SYM && LA117_0 <= TOPRIGHT_SYM)||LA117_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt117=1;
			}
			} finally {dbg.exitDecision(117);}

			switch (alt117) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:553:3: declarations
					{
					dbg.location(553,3);
					pushFollow(FOLLOW_declarations_in_fontFace2077);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(117);}
			dbg.location(554,9);
			match(input,RBRACE,FOLLOW_RBRACE_in_fontFace2088); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(555, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fontFace");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fontFace"



	// $ANTLR start "margin"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:557:1: margin : margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
	public final void margin() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "margin");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(557, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:558:2: ( margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:558:4: margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
			{
			dbg.location(558,4);
			pushFollow(FOLLOW_margin_sym_in_margin2102);
			margin_sym();
			state._fsp--;
			if (state.failed) return;dbg.location(558,15);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:558:15: ( ws )?
			int alt118=2;
			try { dbg.enterSubRule(118);
			try { dbg.enterDecision(118, decisionCanBacktrack[118]);

			int LA118_0 = input.LA(1);
			if ( (LA118_0==COMMENT||LA118_0==NL||LA118_0==WS) ) {
				alt118=1;
			}
			} finally {dbg.exitDecision(118);}

			switch (alt118) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:558:15: ws
					{
					dbg.location(558,15);
					pushFollow(FOLLOW_ws_in_margin2104);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(118);}
			dbg.location(558,19);
			match(input,LBRACE,FOLLOW_LBRACE_in_margin2107); if (state.failed) return;dbg.location(558,26);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:558:26: ( ws )?
			int alt119=2;
			try { dbg.enterSubRule(119);
			try { dbg.enterDecision(119, decisionCanBacktrack[119]);

			int LA119_0 = input.LA(1);
			if ( (LA119_0==COMMENT||LA119_0==NL||LA119_0==WS) ) {
				alt119=1;
			}
			} finally {dbg.exitDecision(119);}

			switch (alt119) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:558:26: ws
					{
					dbg.location(558,26);
					pushFollow(FOLLOW_ws_in_margin2109);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(119);}
			dbg.location(558,30);
			pushFollow(FOLLOW_syncToDeclarationsRule_in_margin2112);
			syncToDeclarationsRule();
			state._fsp--;
			if (state.failed) return;dbg.location(558,53);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:558:53: ( declarations )?
			int alt120=2;
			try { dbg.enterSubRule(120);
			try { dbg.enterDecision(120, decisionCanBacktrack[120]);

			int LA120_0 = input.LA(1);
			if ( ((LA120_0 >= AT_IDENT && LA120_0 <= AT_SIGN)||(LA120_0 >= BOTTOMCENTER_SYM && LA120_0 <= BOTTOMRIGHT_SYM)||(LA120_0 >= CHARSET_SYM && LA120_0 <= COMMA)||LA120_0==COUNTER_STYLE_SYM||LA120_0==DCOLON||LA120_0==DOT||LA120_0==FONT_FACE_SYM||(LA120_0 >= GEN && LA120_0 <= GREATER)||(LA120_0 >= HASH && LA120_0 <= HASH_SYMBOL)||LA120_0==IDENT||LA120_0==IMPORT_SYM||(LA120_0 >= LBRACKET && LA120_0 <= LEFTTOP_SYM)||LA120_0==LESS_AND||(LA120_0 >= MEDIA_SYM && LA120_0 <= MOZ_DOCUMENT_SYM)||LA120_0==NAMESPACE_SYM||LA120_0==PAGE_SYM||(LA120_0 >= PIPE && LA120_0 <= PLUS)||LA120_0==RBRACKET||(LA120_0 >= RIGHTBOTTOM_SYM && LA120_0 <= RIGHTTOP_SYM)||(LA120_0 >= SASS_CONTENT && LA120_0 <= SASS_DEBUG)||(LA120_0 >= SASS_EACH && LA120_0 <= SASS_MIXIN)||(LA120_0 >= SASS_RETURN && LA120_0 <= SEMI)||LA120_0==STAR||LA120_0==TILDE||(LA120_0 >= TOPCENTER_SYM && LA120_0 <= TOPRIGHT_SYM)||LA120_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt120=1;
			}
			} finally {dbg.exitDecision(120);}

			switch (alt120) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:558:53: declarations
					{
					dbg.location(558,53);
					pushFollow(FOLLOW_declarations_in_margin2114);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(120);}
			dbg.location(558,67);
			match(input,RBRACE,FOLLOW_RBRACE_in_margin2117); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(559, 7);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "margin");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "margin"



	// $ANTLR start "margin_sym"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:561:1: margin_sym : ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM );
	public final void margin_sym() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "margin_sym");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(561, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:562:2: ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(562,2);
			if ( (input.LA(1) >= BOTTOMCENTER_SYM && input.LA(1) <= BOTTOMRIGHT_SYM)||(input.LA(1) >= LEFTBOTTOM_SYM && input.LA(1) <= LEFTTOP_SYM)||(input.LA(1) >= RIGHTBOTTOM_SYM && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= TOPCENTER_SYM && input.LA(1) <= TOPRIGHT_SYM) ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(579, 7);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "margin_sym");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "margin_sym"



	// $ANTLR start "pseudoPage"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:581:1: pseudoPage : COLON IDENT ;
	public final void pseudoPage() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "pseudoPage");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(581, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:582:5: ( COLON IDENT )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:582:7: COLON IDENT
			{
			dbg.location(582,7);
			match(input,COLON,FOLLOW_COLON_in_pseudoPage2326); if (state.failed) return;dbg.location(582,13);
			match(input,IDENT,FOLLOW_IDENT_in_pseudoPage2328); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(583, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "pseudoPage");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "pseudoPage"



	// $ANTLR start "operator"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:585:1: operator : ( SOLIDUS | COMMA );
	public final void operator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "operator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(585, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:586:5: ( SOLIDUS | COMMA )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(586,5);
			if ( input.LA(1)==COMMA||input.LA(1)==SOLIDUS ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(588, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "operator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "operator"



	// $ANTLR start "unaryOperator"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:590:1: unaryOperator : ( MINUS | PLUS );
	public final void unaryOperator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "unaryOperator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(590, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:591:5: ( MINUS | PLUS )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(591,5);
			if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(593, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "unaryOperator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "unaryOperator"



	// $ANTLR start "property"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:595:1: property : ( ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression | IDENT | GEN |{...}? cp_variable );
	public final void property() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "property");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(595, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:596:5: ( ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression | IDENT | GEN |{...}? cp_variable )
			int alt121=4;
			try { dbg.enterDecision(121, decisionCanBacktrack[121]);

			int LA121_0 = input.LA(1);
			if ( (LA121_0==HASH_SYMBOL) && (synpred15_Css3())) {
				alt121=1;
			}
			else if ( (LA121_0==IDENT) ) {
				int LA121_2 = input.LA(2);
				if ( (synpred15_Css3()) ) {
					alt121=1;
				}
				else if ( (true) ) {
					alt121=2;
				}

			}
			else if ( (LA121_0==DOT||LA121_0==HASH||LA121_0==MINUS) && (synpred15_Css3())) {
				alt121=1;
			}
			else if ( (LA121_0==GEN) ) {
				alt121=3;
			}
			else if ( (LA121_0==AT_IDENT||(LA121_0 >= BOTTOMCENTER_SYM && LA121_0 <= BOTTOMRIGHT_SYM)||LA121_0==CHARSET_SYM||LA121_0==COUNTER_STYLE_SYM||LA121_0==FONT_FACE_SYM||LA121_0==IMPORT_SYM||(LA121_0 >= LEFTBOTTOM_SYM && LA121_0 <= LEFTTOP_SYM)||LA121_0==MEDIA_SYM||LA121_0==MOZ_DOCUMENT_SYM||LA121_0==NAMESPACE_SYM||LA121_0==PAGE_SYM||(LA121_0 >= RIGHTBOTTOM_SYM && LA121_0 <= RIGHTTOP_SYM)||(LA121_0 >= SASS_CONTENT && LA121_0 <= SASS_DEBUG)||(LA121_0 >= SASS_EACH && LA121_0 <= SASS_EXTEND)||(LA121_0 >= SASS_FOR && LA121_0 <= SASS_MIXIN)||(LA121_0 >= SASS_RETURN && LA121_0 <= SASS_WHILE)||(LA121_0 >= TOPCENTER_SYM && LA121_0 <= TOPRIGHT_SYM)||LA121_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt121=4;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 121, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(121);}

			switch (alt121) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:600:5: ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression
					{
					dbg.location(600,49);
					pushFollow(FOLLOW_sass_declaration_interpolation_expression_in_property2424);
					sass_declaration_interpolation_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:601:7: IDENT
					{
					dbg.location(601,7);
					match(input,IDENT,FOLLOW_IDENT_in_property2432); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:602:7: GEN
					{
					dbg.location(602,7);
					match(input,GEN,FOLLOW_GEN_in_property2440); if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:603:7: {...}? cp_variable
					{
					dbg.location(603,7);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "property", "isCssPreprocessorSource()");
					}dbg.location(603,36);
					pushFollow(FOLLOW_cp_variable_in_property2450);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(COLON));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(605, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "property");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "property"



	// $ANTLR start "rule"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:610:1: rule : selectorsGroup ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
	public final void rule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "rule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(610, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:611:5: ( selectorsGroup ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:612:5: selectorsGroup ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
			{
			dbg.location(612,5);
			pushFollow(FOLLOW_selectorsGroup_in_rule2477);
			selectorsGroup();
			state._fsp--;
			if (state.failed) return;dbg.location(612,20);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:612:20: ( ws )?
			int alt122=2;
			try { dbg.enterSubRule(122);
			try { dbg.enterDecision(122, decisionCanBacktrack[122]);

			int LA122_0 = input.LA(1);
			if ( (LA122_0==COMMENT||LA122_0==NL||LA122_0==WS) ) {
				alt122=1;
			}
			} finally {dbg.exitDecision(122);}

			switch (alt122) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:612:20: ws
					{
					dbg.location(612,20);
					pushFollow(FOLLOW_ws_in_rule2479);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(122);}
			dbg.location(613,5);
			match(input,LBRACE,FOLLOW_LBRACE_in_rule2486); if (state.failed) return;dbg.location(613,12);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:12: ( ws )?
			int alt123=2;
			try { dbg.enterSubRule(123);
			try { dbg.enterDecision(123, decisionCanBacktrack[123]);

			int LA123_0 = input.LA(1);
			if ( (LA123_0==COMMENT||LA123_0==NL||LA123_0==WS) ) {
				alt123=1;
			}
			} finally {dbg.exitDecision(123);}

			switch (alt123) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:12: ws
					{
					dbg.location(613,12);
					pushFollow(FOLLOW_ws_in_rule2488);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(123);}
			dbg.location(613,16);
			pushFollow(FOLLOW_syncToFollow_in_rule2491);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(614,9);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:614:9: ( declarations )?
			int alt124=2;
			try { dbg.enterSubRule(124);
			try { dbg.enterDecision(124, decisionCanBacktrack[124]);

			int LA124_0 = input.LA(1);
			if ( ((LA124_0 >= AT_IDENT && LA124_0 <= AT_SIGN)||(LA124_0 >= BOTTOMCENTER_SYM && LA124_0 <= BOTTOMRIGHT_SYM)||(LA124_0 >= CHARSET_SYM && LA124_0 <= COMMA)||LA124_0==COUNTER_STYLE_SYM||LA124_0==DCOLON||LA124_0==DOT||LA124_0==FONT_FACE_SYM||(LA124_0 >= GEN && LA124_0 <= GREATER)||(LA124_0 >= HASH && LA124_0 <= HASH_SYMBOL)||LA124_0==IDENT||LA124_0==IMPORT_SYM||(LA124_0 >= LBRACKET && LA124_0 <= LEFTTOP_SYM)||LA124_0==LESS_AND||(LA124_0 >= MEDIA_SYM && LA124_0 <= MOZ_DOCUMENT_SYM)||LA124_0==NAMESPACE_SYM||LA124_0==PAGE_SYM||(LA124_0 >= PIPE && LA124_0 <= PLUS)||LA124_0==RBRACKET||(LA124_0 >= RIGHTBOTTOM_SYM && LA124_0 <= RIGHTTOP_SYM)||(LA124_0 >= SASS_CONTENT && LA124_0 <= SASS_DEBUG)||(LA124_0 >= SASS_EACH && LA124_0 <= SASS_MIXIN)||(LA124_0 >= SASS_RETURN && LA124_0 <= SEMI)||LA124_0==STAR||LA124_0==TILDE||(LA124_0 >= TOPCENTER_SYM && LA124_0 <= TOPRIGHT_SYM)||LA124_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt124=1;
			}
			} finally {dbg.exitDecision(124);}

			switch (alt124) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:614:9: declarations
					{
					dbg.location(614,9);
					pushFollow(FOLLOW_declarations_in_rule2501);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(124);}
			dbg.location(615,5);
			match(input,RBRACE,FOLLOW_RBRACE_in_rule2508); if (state.failed) return;
			}

		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(RBRACE));
			        input.consume(); //consume the RBRACE as well
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(616, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "rule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "rule"



	// $ANTLR start "declarations"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:1: declarations : ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
	public final void declarations() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "declarations");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(623, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:624:5: ( ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:625:5: ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
			{
			dbg.location(625,5);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:625:5: ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
			int cnt129=0;
			try { dbg.enterSubRule(129);

			loop129:
			while (true) {
				int alt129=3;
				try { dbg.enterDecision(129, decisionCanBacktrack[129]);

				int LA129_0 = input.LA(1);
				if ( ((LA129_0 >= AT_IDENT && LA129_0 <= AT_SIGN)||(LA129_0 >= BOTTOMCENTER_SYM && LA129_0 <= BOTTOMRIGHT_SYM)||(LA129_0 >= CHARSET_SYM && LA129_0 <= COMMA)||LA129_0==COUNTER_STYLE_SYM||LA129_0==DCOLON||LA129_0==DOT||LA129_0==FONT_FACE_SYM||(LA129_0 >= GEN && LA129_0 <= GREATER)||(LA129_0 >= HASH && LA129_0 <= HASH_SYMBOL)||LA129_0==IDENT||LA129_0==IMPORT_SYM||(LA129_0 >= LBRACKET && LA129_0 <= LEFTTOP_SYM)||LA129_0==LESS_AND||(LA129_0 >= MEDIA_SYM && LA129_0 <= MOZ_DOCUMENT_SYM)||LA129_0==NAMESPACE_SYM||LA129_0==PAGE_SYM||(LA129_0 >= PIPE && LA129_0 <= PLUS)||LA129_0==RBRACKET||(LA129_0 >= RIGHTBOTTOM_SYM && LA129_0 <= RIGHTTOP_SYM)||(LA129_0 >= SASS_CONTENT && LA129_0 <= SASS_DEBUG)||(LA129_0 >= SASS_EACH && LA129_0 <= SASS_MIXIN)||(LA129_0 >= SASS_RETURN && LA129_0 <= SASS_WHILE)||LA129_0==STAR||LA129_0==TILDE||(LA129_0 >= TOPCENTER_SYM && LA129_0 <= TOPRIGHT_SYM)||LA129_0==WEBKIT_KEYFRAMES_SYM) ) {
					alt129=1;
				}
				else if ( (LA129_0==SEMI) ) {
					alt129=2;
				}

				} finally {dbg.exitDecision(129);}

				switch (alt129) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:626:10: ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
					{
					dbg.location(626,10);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:626:10: ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:626:12: declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
					{
					dbg.location(626,12);
					pushFollow(FOLLOW_declaration_in_declarations2551);
					declaration();
					state._fsp--;
					if (state.failed) return;dbg.location(626,24);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:626:24: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
					int alt126=2;
					try { dbg.enterSubRule(126);
					try { dbg.enterDecision(126, decisionCanBacktrack[126]);

					try {
						isCyclicDecision = true;
						alt126 = dfa126.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(126);}

					switch (alt126) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:626:25: ( ( ws )? SEMI )=> ( ws )? SEMI
							{
							dbg.location(626,37);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:626:37: ( ws )?
							int alt125=2;
							try { dbg.enterSubRule(125);
							try { dbg.enterDecision(125, decisionCanBacktrack[125]);

							int LA125_0 = input.LA(1);
							if ( (LA125_0==COMMENT||LA125_0==NL||LA125_0==WS) ) {
								alt125=1;
							}
							} finally {dbg.exitDecision(125);}

							switch (alt125) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:626:37: ws
									{
									dbg.location(626,37);
									pushFollow(FOLLOW_ws_in_declarations2561);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(125);}
							dbg.location(626,41);
							match(input,SEMI,FOLLOW_SEMI_in_declarations2564); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(126);}
					dbg.location(626,48);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:626:48: ( ws )?
					int alt127=2;
					try { dbg.enterSubRule(127);
					try { dbg.enterDecision(127, decisionCanBacktrack[127]);

					int LA127_0 = input.LA(1);
					if ( (LA127_0==COMMENT||LA127_0==NL||LA127_0==WS) ) {
						alt127=1;
					}
					} finally {dbg.exitDecision(127);}

					switch (alt127) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:626:48: ws
							{
							dbg.location(626,48);
							pushFollow(FOLLOW_ws_in_declarations2568);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(127);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:628:10: ( SEMI ( ws )? )
					{
					dbg.location(628,10);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:628:10: ( SEMI ( ws )? )
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:628:12: SEMI ( ws )?
					{
					dbg.location(628,12);
					match(input,SEMI,FOLLOW_SEMI_in_declarations2595); if (state.failed) return;dbg.location(628,17);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:628:17: ( ws )?
					int alt128=2;
					try { dbg.enterSubRule(128);
					try { dbg.enterDecision(128, decisionCanBacktrack[128]);

					int LA128_0 = input.LA(1);
					if ( (LA128_0==COMMENT||LA128_0==NL||LA128_0==WS) ) {
						alt128=1;
					}
					} finally {dbg.exitDecision(128);}

					switch (alt128) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:628:17: ws
							{
							dbg.location(628,17);
							pushFollow(FOLLOW_ws_in_declarations2597);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(128);}

					}

					}
					break;

				default :
					if ( cnt129 >= 1 ) break loop129;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(129, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt129++;
			}
			} finally {dbg.exitSubRule(129);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(630, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "declarations");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "declarations"



	// $ANTLR start "declaration"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:1: declaration : ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_nested_properties )=> sass_nested_properties | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( selectorsGroup ( ws )? LBRACE )=> rule |{...}? at_rule |{...}? sass_control |{...}? sass_extend |{...}? sass_debug |{...}? sass_content |{...}? sass_function_return |{...}? importItem | GEN );
	public final void declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(632, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:633:5: ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_nested_properties )=> sass_nested_properties | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( selectorsGroup ( ws )? LBRACE )=> rule |{...}? at_rule |{...}? sass_control |{...}? sass_extend |{...}? sass_debug |{...}? sass_content |{...}? sass_function_return |{...}? importItem | GEN )
			int alt134=16;
			try { dbg.enterDecision(134, decisionCanBacktrack[134]);

			int LA134_0 = input.LA(1);
			if ( (LA134_0==SASS_MIXIN) ) {
				int LA134_1 = input.LA(2);
				if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=1;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=2;
				}
				else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred20_Css3())) ) {
					alt134=4;
				}
				else if ( ((synpred21_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt134=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==SASS_VAR) ) {
				int LA134_2 = input.LA(2);
				if ( ((synpred17_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt134=1;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt134=2;
				}
				else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt134=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred20_Css3())) ) {
					alt134=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==HASH_SYMBOL) ) {
				int LA134_3 = input.LA(2);
				if ( (synpred18_Css3()) ) {
					alt134=2;
				}
				else if ( (synpred19_Css3()) ) {
					alt134=3;
				}
				else if ( (synpred20_Css3()) ) {
					alt134=4;
				}
				else if ( (synpred24_Css3()) ) {
					alt134=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==IDENT) ) {
				int LA134_4 = input.LA(2);
				if ( (synpred18_Css3()) ) {
					alt134=2;
				}
				else if ( (synpred19_Css3()) ) {
					alt134=3;
				}
				else if ( (synpred20_Css3()) ) {
					alt134=4;
				}
				else if ( (synpred24_Css3()) ) {
					alt134=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==DOT) ) {
				int LA134_5 = input.LA(2);
				if ( (synpred18_Css3()) ) {
					alt134=2;
				}
				else if ( (synpred19_Css3()) ) {
					alt134=3;
				}
				else if ( (synpred20_Css3()) ) {
					alt134=4;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred21_Css3())) ) {
					alt134=5;
				}
				else if ( ((synpred22_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=6;
				}
				else if ( (((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt134=7;
				}
				else if ( (synpred24_Css3()) ) {
					alt134=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 5, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==GEN) ) {
				int LA134_6 = input.LA(2);
				if ( (synpred18_Css3()) ) {
					alt134=2;
				}
				else if ( (synpred19_Css3()) ) {
					alt134=3;
				}
				else if ( (synpred20_Css3()) ) {
					alt134=4;
				}
				else if ( (synpred24_Css3()) ) {
					alt134=8;
				}
				else if ( (true) ) {
					alt134=16;
				}

			}
			else if ( (LA134_0==STAR) ) {
				int LA134_7 = input.LA(2);
				if ( (synpred19_Css3()) ) {
					alt134=3;
				}
				else if ( (synpred20_Css3()) ) {
					alt134=4;
				}
				else if ( (synpred24_Css3()) ) {
					alt134=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 7, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==HASH) ) {
				int LA134_8 = input.LA(2);
				if ( (synpred18_Css3()) ) {
					alt134=2;
				}
				else if ( (synpred19_Css3()) ) {
					alt134=3;
				}
				else if ( (synpred20_Css3()) ) {
					alt134=4;
				}
				else if ( (synpred24_Css3()) ) {
					alt134=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 8, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==SASS_INCLUDE) ) {
				int LA134_9 = input.LA(2);
				if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=1;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=2;
				}
				else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred20_Css3())) ) {
					alt134=4;
				}
				else if ( (((synpred22_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt134=6;
				}
				else if ( ((synpred23_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt134=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 9, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==MEDIA_SYM) ) {
				int LA134_10 = input.LA(2);
				if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=1;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=2;
				}
				else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred20_Css3())) ) {
					alt134=4;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt134=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 10, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==GREATER) && (synpred24_Css3())) {
				alt134=8;
			}
			else if ( (LA134_0==LESS_AND) && (synpred24_Css3())) {
				alt134=8;
			}
			else if ( (LA134_0==PLUS||LA134_0==TILDE) && (synpred24_Css3())) {
				alt134=8;
			}
			else if ( (LA134_0==PIPE) && (synpred24_Css3())) {
				alt134=8;
			}
			else if ( (LA134_0==LBRACKET) && (synpred24_Css3())) {
				alt134=8;
			}
			else if ( (LA134_0==SASS_EXTEND_ONLY_SELECTOR) && (synpred24_Css3())) {
				alt134=8;
			}
			else if ( (LA134_0==AT_SIGN) && (synpred24_Css3())) {
				alt134=8;
			}
			else if ( (LA134_0==MINUS) ) {
				int LA134_18 = input.LA(2);
				if ( (synpred18_Css3()) ) {
					alt134=2;
				}
				else if ( (synpred19_Css3()) ) {
					alt134=3;
				}
				else if ( (synpred20_Css3()) ) {
					alt134=4;
				}
				else if ( (synpred24_Css3()) ) {
					alt134=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 18, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==COLON) && (synpred24_Css3())) {
				alt134=8;
			}
			else if ( (LA134_0==COMMA||LA134_0==RBRACKET) && (synpred24_Css3())) {
				alt134=8;
			}
			else if ( (LA134_0==DCOLON) && (synpred24_Css3())) {
				alt134=8;
			}
			else if ( (LA134_0==PAGE_SYM) ) {
				int LA134_22 = input.LA(2);
				if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=1;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=2;
				}
				else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred20_Css3())) ) {
					alt134=4;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt134=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 22, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==COUNTER_STYLE_SYM) ) {
				int LA134_23 = input.LA(2);
				if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=1;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=2;
				}
				else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred20_Css3())) ) {
					alt134=4;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt134=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 23, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==FONT_FACE_SYM) ) {
				int LA134_24 = input.LA(2);
				if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=1;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=2;
				}
				else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred20_Css3())) ) {
					alt134=4;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt134=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 24, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==MOZ_DOCUMENT_SYM) ) {
				int LA134_25 = input.LA(2);
				if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=1;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=2;
				}
				else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred20_Css3())) ) {
					alt134=4;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt134=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 25, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==WEBKIT_KEYFRAMES_SYM) ) {
				int LA134_26 = input.LA(2);
				if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=1;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=2;
				}
				else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred20_Css3())) ) {
					alt134=4;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt134=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 26, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==AT_IDENT) ) {
				int LA134_27 = input.LA(2);
				if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=1;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=2;
				}
				else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred20_Css3())) ) {
					alt134=4;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt134=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 27, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==SASS_IF) ) {
				int LA134_28 = input.LA(2);
				if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=1;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=2;
				}
				else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred20_Css3())) ) {
					alt134=4;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt134=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==SASS_FOR) ) {
				int LA134_29 = input.LA(2);
				if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=1;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=2;
				}
				else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred20_Css3())) ) {
					alt134=4;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt134=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 29, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==SASS_EACH) ) {
				int LA134_30 = input.LA(2);
				if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=1;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=2;
				}
				else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred20_Css3())) ) {
					alt134=4;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt134=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 30, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==SASS_WHILE) ) {
				int LA134_31 = input.LA(2);
				if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=1;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=2;
				}
				else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred20_Css3())) ) {
					alt134=4;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt134=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 31, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==SASS_EXTEND) ) {
				int LA134_32 = input.LA(2);
				if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=1;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=2;
				}
				else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred20_Css3())) ) {
					alt134=4;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt134=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 32, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==SASS_DEBUG||LA134_0==SASS_WARN) ) {
				int LA134_33 = input.LA(2);
				if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=1;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=2;
				}
				else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred20_Css3())) ) {
					alt134=4;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt134=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 33, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==SASS_CONTENT) ) {
				int LA134_34 = input.LA(2);
				if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=1;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=2;
				}
				else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred20_Css3())) ) {
					alt134=4;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt134=13;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 34, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==SASS_RETURN) ) {
				int LA134_35 = input.LA(2);
				if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=1;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=2;
				}
				else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred20_Css3())) ) {
					alt134=4;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt134=14;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 35, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==IMPORT_SYM) ) {
				int LA134_36 = input.LA(2);
				if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=1;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=2;
				}
				else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred20_Css3())) ) {
					alt134=4;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt134=15;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 36, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( ((LA134_0 >= BOTTOMCENTER_SYM && LA134_0 <= BOTTOMRIGHT_SYM)||LA134_0==CHARSET_SYM||(LA134_0 >= LEFTBOTTOM_SYM && LA134_0 <= LEFTTOP_SYM)||LA134_0==NAMESPACE_SYM||(LA134_0 >= RIGHTBOTTOM_SYM && LA134_0 <= RIGHTTOP_SYM)||LA134_0==SASS_ELSE||LA134_0==SASS_FUNCTION||(LA134_0 >= TOPCENTER_SYM && LA134_0 <= TOPRIGHT_SYM)) ) {
				int LA134_37 = input.LA(2);
				if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=1;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=2;
				}
				else if ( (((synpred19_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt134=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred20_Css3())) ) {
					alt134=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 37, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 134, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(134);}

			switch (alt134) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:634:5: ( cp_variable_declaration )=> cp_variable_declaration
					{
					dbg.location(634,32);
					pushFollow(FOLLOW_cp_variable_declaration_in_declaration2632);
					cp_variable_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:7: ( sass_nested_properties )=> sass_nested_properties
					{
					dbg.location(635,33);
					pushFollow(FOLLOW_sass_nested_properties_in_declaration2644);
					sass_nested_properties();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:7: ( propertyDeclaration )=> propertyDeclaration
					{
					dbg.location(636,30);
					pushFollow(FOLLOW_propertyDeclaration_in_declaration2656);
					propertyDeclaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:638:7: ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration
					{
					dbg.location(638,67);
					pushFollow(FOLLOW_propertyDeclaration_in_declaration2695);
					propertyDeclaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:7: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )=> cp_mixin_declaration
					{
					dbg.location(639,94);
					pushFollow(FOLLOW_cp_mixin_declaration_in_declaration2740);
					cp_mixin_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:641:7: ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
					{
					dbg.location(641,55);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isLessSource()");
					}dbg.location(641,73);
					pushFollow(FOLLOW_cp_mixin_call_in_declaration2773);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;dbg.location(641,87);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:641:87: ( ( ws )? IMPORTANT_SYM )?
					int alt131=2;
					try { dbg.enterSubRule(131);
					try { dbg.enterDecision(131, decisionCanBacktrack[131]);

					try {
						isCyclicDecision = true;
						alt131 = dfa131.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(131);}

					switch (alt131) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:641:88: ( ws )? IMPORTANT_SYM
							{
							dbg.location(641,88);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:641:88: ( ws )?
							int alt130=2;
							try { dbg.enterSubRule(130);
							try { dbg.enterDecision(130, decisionCanBacktrack[130]);

							int LA130_0 = input.LA(1);
							if ( (LA130_0==COMMENT||LA130_0==NL||LA130_0==WS) ) {
								alt130=1;
							}
							} finally {dbg.exitDecision(130);}

							switch (alt130) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:641:88: ws
									{
									dbg.location(641,88);
									pushFollow(FOLLOW_ws_in_declaration2776);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(130);}
							dbg.location(641,92);
							match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_declaration2779); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(131);}

					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:642:7: ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
					{
					dbg.location(642,25);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(642,43);
					pushFollow(FOLLOW_cp_mixin_call_in_declaration2796);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;dbg.location(642,57);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:642:57: ( ( ws )? IMPORTANT_SYM )?
					int alt133=2;
					try { dbg.enterSubRule(133);
					try { dbg.enterDecision(133, decisionCanBacktrack[133]);

					try {
						isCyclicDecision = true;
						alt133 = dfa133.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(133);}

					switch (alt133) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:642:58: ( ws )? IMPORTANT_SYM
							{
							dbg.location(642,58);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:642:58: ( ws )?
							int alt132=2;
							try { dbg.enterSubRule(132);
							try { dbg.enterDecision(132, decisionCanBacktrack[132]);

							int LA132_0 = input.LA(1);
							if ( (LA132_0==COMMENT||LA132_0==NL||LA132_0==WS) ) {
								alt132=1;
							}
							} finally {dbg.exitDecision(132);}

							switch (alt132) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:642:58: ws
									{
									dbg.location(642,58);
									pushFollow(FOLLOW_ws_in_declaration2799);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(132);}
							dbg.location(642,62);
							match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_declaration2802); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(133);}

					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:7: ( selectorsGroup ( ws )? LBRACE )=> rule
					{
					dbg.location(643,36);
					pushFollow(FOLLOW_rule_in_declaration2821);
					rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 9 :
					dbg.enterAlt(9);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:644:7: {...}? at_rule
					{
					dbg.location(644,7);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isCssPreprocessorSource()");
					}dbg.location(644,36);
					pushFollow(FOLLOW_at_rule_in_declaration2831);
					at_rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 10 :
					dbg.enterAlt(10);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:645:7: {...}? sass_control
					{
					dbg.location(645,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(645,25);
					pushFollow(FOLLOW_sass_control_in_declaration2841);
					sass_control();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 11 :
					dbg.enterAlt(11);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:646:7: {...}? sass_extend
					{
					dbg.location(646,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(646,25);
					pushFollow(FOLLOW_sass_extend_in_declaration2851);
					sass_extend();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 12 :
					dbg.enterAlt(12);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:647:7: {...}? sass_debug
					{
					dbg.location(647,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(647,25);
					pushFollow(FOLLOW_sass_debug_in_declaration2861);
					sass_debug();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 13 :
					dbg.enterAlt(13);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:648:7: {...}? sass_content
					{
					dbg.location(648,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(648,25);
					pushFollow(FOLLOW_sass_content_in_declaration2871);
					sass_content();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 14 :
					dbg.enterAlt(14);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:649:7: {...}? sass_function_return
					{
					dbg.location(649,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(649,25);
					pushFollow(FOLLOW_sass_function_return_in_declaration2881);
					sass_function_return();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 15 :
					dbg.enterAlt(15);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:650:7: {...}? importItem
					{
					dbg.location(650,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(650,25);
					pushFollow(FOLLOW_importItem_in_declaration2891);
					importItem();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 16 :
					dbg.enterAlt(16);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:651:7: GEN
					{
					dbg.location(651,7);
					match(input,GEN,FOLLOW_GEN_in_declaration2899); if (state.failed) return;
					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(SEMI));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(652, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "declaration"



	// $ANTLR start "selectorsGroup"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:1: selectorsGroup : ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression | selector ( ( ws )? COMMA ( ws )? selector )* );
	public final void selectorsGroup() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "selectorsGroup");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(658, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:659:5: ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression | selector ( ( ws )? COMMA ( ws )? selector )* )
			int alt138=2;
			try { dbg.enterDecision(138, decisionCanBacktrack[138]);

			try {
				isCyclicDecision = true;
				alt138 = dfa138.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(138);}

			switch (alt138) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:661:9: ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression
					{
					dbg.location(661,60);
					pushFollow(FOLLOW_sass_selector_interpolation_expression_in_selectorsGroup2962);
					sass_selector_interpolation_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:663:9: selector ( ( ws )? COMMA ( ws )? selector )*
					{
					dbg.location(663,9);
					pushFollow(FOLLOW_selector_in_selectorsGroup2975);
					selector();
					state._fsp--;
					if (state.failed) return;dbg.location(663,18);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:663:18: ( ( ws )? COMMA ( ws )? selector )*
					try { dbg.enterSubRule(137);

					loop137:
					while (true) {
						int alt137=2;
						try { dbg.enterDecision(137, decisionCanBacktrack[137]);

						try {
							isCyclicDecision = true;
							alt137 = dfa137.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(137);}

						switch (alt137) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:663:19: ( ws )? COMMA ( ws )? selector
							{
							dbg.location(663,19);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:663:19: ( ws )?
							int alt135=2;
							try { dbg.enterSubRule(135);
							try { dbg.enterDecision(135, decisionCanBacktrack[135]);

							int LA135_0 = input.LA(1);
							if ( (LA135_0==COMMENT||LA135_0==NL||LA135_0==WS) ) {
								alt135=1;
							}
							} finally {dbg.exitDecision(135);}

							switch (alt135) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:663:19: ws
									{
									dbg.location(663,19);
									pushFollow(FOLLOW_ws_in_selectorsGroup2978);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(135);}
							dbg.location(663,23);
							match(input,COMMA,FOLLOW_COMMA_in_selectorsGroup2981); if (state.failed) return;dbg.location(663,29);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:663:29: ( ws )?
							int alt136=2;
							try { dbg.enterSubRule(136);
							try { dbg.enterDecision(136, decisionCanBacktrack[136]);

							int LA136_0 = input.LA(1);
							if ( (LA136_0==COMMENT||LA136_0==NL||LA136_0==WS) ) {
								alt136=1;
							}
							} finally {dbg.exitDecision(136);}

							switch (alt136) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:663:29: ws
									{
									dbg.location(663,29);
									pushFollow(FOLLOW_ws_in_selectorsGroup2983);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(136);}
							dbg.location(663,33);
							pushFollow(FOLLOW_selector_in_selectorsGroup2986);
							selector();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop137;
						}
					}
					} finally {dbg.exitSubRule(137);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(664, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "selectorsGroup");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "selectorsGroup"



	// $ANTLR start "selector"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:666:1: selector : ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )* ;
	public final void selector() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "selector");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(666, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:5: ( ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )* )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:8: ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )*
			{
			dbg.location(667,8);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:8: ( combinator ( ws )? )?
			int alt140=2;
			try { dbg.enterSubRule(140);
			try { dbg.enterDecision(140, decisionCanBacktrack[140]);

			int LA140_0 = input.LA(1);
			if ( (LA140_0==GREATER||LA140_0==PLUS||LA140_0==TILDE) ) {
				alt140=1;
			}
			} finally {dbg.exitDecision(140);}

			switch (alt140) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:9: combinator ( ws )?
					{
					dbg.location(667,9);
					pushFollow(FOLLOW_combinator_in_selector3007);
					combinator();
					state._fsp--;
					if (state.failed) return;dbg.location(667,20);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:20: ( ws )?
					int alt139=2;
					try { dbg.enterSubRule(139);
					try { dbg.enterDecision(139, decisionCanBacktrack[139]);

					int LA139_0 = input.LA(1);
					if ( (LA139_0==COMMENT||LA139_0==NL||LA139_0==WS) ) {
						alt139=1;
					}
					} finally {dbg.exitDecision(139);}

					switch (alt139) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:20: ws
							{
							dbg.location(667,20);
							pushFollow(FOLLOW_ws_in_selector3009);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(139);}

					}
					break;

			}
			} finally {dbg.exitSubRule(140);}
			dbg.location(667,26);
			pushFollow(FOLLOW_simpleSelectorSequence_in_selector3014);
			simpleSelectorSequence();
			state._fsp--;
			if (state.failed) return;dbg.location(667,49);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:49: ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )*
			try { dbg.enterSubRule(145);

			loop145:
			while (true) {
				int alt145=2;
				try { dbg.enterDecision(145, decisionCanBacktrack[145]);

				try {
					isCyclicDecision = true;
					alt145 = dfa145.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(145);}

				switch (alt145) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:51: ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence
					{
					dbg.location(667,51);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:51: ( ( ( ws )? combinator ( ws )? ) | ( ws )? )
					int alt144=2;
					try { dbg.enterSubRule(144);
					try { dbg.enterDecision(144, decisionCanBacktrack[144]);

					try {
						isCyclicDecision = true;
						alt144 = dfa144.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(144);}

					switch (alt144) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:52: ( ( ws )? combinator ( ws )? )
							{
							dbg.location(667,52);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:52: ( ( ws )? combinator ( ws )? )
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:53: ( ws )? combinator ( ws )?
							{
							dbg.location(667,53);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:53: ( ws )?
							int alt141=2;
							try { dbg.enterSubRule(141);
							try { dbg.enterDecision(141, decisionCanBacktrack[141]);

							int LA141_0 = input.LA(1);
							if ( (LA141_0==COMMENT||LA141_0==NL||LA141_0==WS) ) {
								alt141=1;
							}
							} finally {dbg.exitDecision(141);}

							switch (alt141) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:53: ws
									{
									dbg.location(667,53);
									pushFollow(FOLLOW_ws_in_selector3020);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(141);}
							dbg.location(667,57);
							pushFollow(FOLLOW_combinator_in_selector3023);
							combinator();
							state._fsp--;
							if (state.failed) return;dbg.location(667,68);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:68: ( ws )?
							int alt142=2;
							try { dbg.enterSubRule(142);
							try { dbg.enterDecision(142, decisionCanBacktrack[142]);

							int LA142_0 = input.LA(1);
							if ( (LA142_0==COMMENT||LA142_0==NL||LA142_0==WS) ) {
								alt142=1;
							}
							} finally {dbg.exitDecision(142);}

							switch (alt142) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:68: ws
									{
									dbg.location(667,68);
									pushFollow(FOLLOW_ws_in_selector3025);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(142);}

							}

							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:73: ( ws )?
							{
							dbg.location(667,73);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:73: ( ws )?
							int alt143=2;
							try { dbg.enterSubRule(143);
							try { dbg.enterDecision(143, decisionCanBacktrack[143]);

							int LA143_0 = input.LA(1);
							if ( (LA143_0==COMMENT||LA143_0==NL||LA143_0==WS) ) {
								alt143=1;
							}
							} finally {dbg.exitDecision(143);}

							switch (alt143) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:667:73: ws
									{
									dbg.location(667,73);
									pushFollow(FOLLOW_ws_in_selector3029);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(143);}

							}
							break;

					}
					} finally {dbg.exitSubRule(144);}
					dbg.location(667,78);
					pushFollow(FOLLOW_simpleSelectorSequence_in_selector3033);
					simpleSelectorSequence();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop145;
				}
			}
			} finally {dbg.exitSubRule(145);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(668, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "selector");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "selector"



	// $ANTLR start "combinator"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:1: combinator : ( PLUS | GREATER | TILDE );
	public final void combinator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "combinator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(670, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:671:5: ( PLUS | GREATER | TILDE )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(671,5);
			if ( input.LA(1)==GREATER||input.LA(1)==PLUS||input.LA(1)==TILDE ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(673, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "combinator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "combinator"



	// $ANTLR start "simpleSelectorSequence"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:675:1: simpleSelectorSequence : ( ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* ) | elementSubsequent ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* );
	public final void simpleSelectorSequence() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "simpleSelectorSequence");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(675, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:676:2: ( ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* ) | elementSubsequent ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* )
			int alt150=2;
			try { dbg.enterDecision(150, decisionCanBacktrack[150]);

			int LA150_0 = input.LA(1);
			if ( (LA150_0==GEN||LA150_0==IDENT||LA150_0==LESS_AND||LA150_0==PIPE||LA150_0==STAR) ) {
				alt150=1;
			}
			else if ( (LA150_0==AT_SIGN||LA150_0==COLON||LA150_0==DCOLON||LA150_0==DOT||(LA150_0 >= HASH && LA150_0 <= HASH_SYMBOL)||LA150_0==LBRACKET||LA150_0==SASS_EXTEND_ONLY_SELECTOR) ) {
				alt150=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 150, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(150);}

			switch (alt150) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:677:2: ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* )
					{
					dbg.location(677,2);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:677:2: ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* )
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:677:4: typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
					{
					dbg.location(677,4);
					pushFollow(FOLLOW_typeSelector_in_simpleSelectorSequence3081);
					typeSelector();
					state._fsp--;
					if (state.failed) return;dbg.location(677,17);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:677:17: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
					try { dbg.enterSubRule(147);

					loop147:
					while (true) {
						int alt147=2;
						try { dbg.enterDecision(147, decisionCanBacktrack[147]);

						switch ( input.LA(1) ) {
						case COMMENT:
						case NL:
						case WS:
							{
							int LA147_1 = input.LA(2);
							if ( (synpred26_Css3()) ) {
								alt147=1;
							}

							}
							break;
						case SASS_EXTEND_ONLY_SELECTOR:
							{
							int LA147_7 = input.LA(2);
							if ( ((synpred26_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
								alt147=1;
							}

							}
							break;
						case AT_SIGN:
							{
							int LA147_8 = input.LA(2);
							if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
								alt147=1;
							}

							}
							break;
						case HASH:
							{
							int LA147_9 = input.LA(2);
							if ( (synpred26_Css3()) ) {
								alt147=1;
							}

							}
							break;
						case HASH_SYMBOL:
							{
							int LA147_10 = input.LA(2);
							if ( (synpred26_Css3()) ) {
								alt147=1;
							}

							}
							break;
						case DOT:
							{
							int LA147_11 = input.LA(2);
							if ( (synpred26_Css3()) ) {
								alt147=1;
							}

							}
							break;
						case LBRACKET:
							{
							int LA147_12 = input.LA(2);
							if ( (synpred26_Css3()) ) {
								alt147=1;
							}

							}
							break;
						case COLON:
							{
							int LA147_13 = input.LA(2);
							if ( (synpred26_Css3()) ) {
								alt147=1;
							}

							}
							break;
						case DCOLON:
							{
							int LA147_35 = input.LA(2);
							if ( (synpred26_Css3()) ) {
								alt147=1;
							}

							}
							break;
						}
						} finally {dbg.exitDecision(147);}

						switch (alt147) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:677:18: ( ( ws )? esPred )=> ( ws )? elementSubsequent
							{
							dbg.location(677,32);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:677:32: ( ws )?
							int alt146=2;
							try { dbg.enterSubRule(146);
							try { dbg.enterDecision(146, decisionCanBacktrack[146]);

							int LA146_0 = input.LA(1);
							if ( (LA146_0==COMMENT||LA146_0==NL||LA146_0==WS) ) {
								alt146=1;
							}
							} finally {dbg.exitDecision(146);}

							switch (alt146) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:677:32: ws
									{
									dbg.location(677,32);
									pushFollow(FOLLOW_ws_in_simpleSelectorSequence3091);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(146);}
							dbg.location(677,36);
							pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence3094);
							elementSubsequent();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop147;
						}
					}
					} finally {dbg.exitSubRule(147);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:679:2: elementSubsequent ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
					{
					dbg.location(679,2);
					pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence3104);
					elementSubsequent();
					state._fsp--;
					if (state.failed) return;dbg.location(679,20);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:679:20: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
					try { dbg.enterSubRule(149);

					loop149:
					while (true) {
						int alt149=2;
						try { dbg.enterDecision(149, decisionCanBacktrack[149]);

						switch ( input.LA(1) ) {
						case COMMENT:
						case NL:
						case WS:
							{
							int LA149_1 = input.LA(2);
							if ( (synpred27_Css3()) ) {
								alt149=1;
							}

							}
							break;
						case SASS_EXTEND_ONLY_SELECTOR:
							{
							int LA149_7 = input.LA(2);
							if ( ((synpred27_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
								alt149=1;
							}

							}
							break;
						case AT_SIGN:
							{
							int LA149_8 = input.LA(2);
							if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred27_Css3())) ) {
								alt149=1;
							}

							}
							break;
						case HASH:
							{
							int LA149_9 = input.LA(2);
							if ( (synpred27_Css3()) ) {
								alt149=1;
							}

							}
							break;
						case HASH_SYMBOL:
							{
							int LA149_10 = input.LA(2);
							if ( (synpred27_Css3()) ) {
								alt149=1;
							}

							}
							break;
						case DOT:
							{
							int LA149_11 = input.LA(2);
							if ( (synpred27_Css3()) ) {
								alt149=1;
							}

							}
							break;
						case LBRACKET:
							{
							int LA149_12 = input.LA(2);
							if ( (synpred27_Css3()) ) {
								alt149=1;
							}

							}
							break;
						case COLON:
							{
							int LA149_13 = input.LA(2);
							if ( (synpred27_Css3()) ) {
								alt149=1;
							}

							}
							break;
						case DCOLON:
							{
							int LA149_35 = input.LA(2);
							if ( (synpred27_Css3()) ) {
								alt149=1;
							}

							}
							break;
						}
						} finally {dbg.exitDecision(149);}

						switch (alt149) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:679:21: ( ( ws )? esPred )=> ( ws )? elementSubsequent
							{
							dbg.location(679,35);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:679:35: ( ws )?
							int alt148=2;
							try { dbg.enterSubRule(148);
							try { dbg.enterDecision(148, decisionCanBacktrack[148]);

							int LA148_0 = input.LA(1);
							if ( (LA148_0==COMMENT||LA148_0==NL||LA148_0==WS) ) {
								alt148=1;
							}
							} finally {dbg.exitDecision(148);}

							switch (alt148) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:679:35: ws
									{
									dbg.location(679,35);
									pushFollow(FOLLOW_ws_in_simpleSelectorSequence3114);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(148);}
							dbg.location(679,39);
							pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence3117);
							elementSubsequent();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop149;
						}
					}
					} finally {dbg.exitSubRule(149);}

					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			            reportError(rce);
			            consumeUntil(input, BitSet.of(LBRACE));
			        
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(680, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "simpleSelectorSequence");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "simpleSelectorSequence"



	// $ANTLR start "esPred"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:687:1: esPred : ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR );
	public final void esPred() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "esPred");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(687, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:688:5: ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(688,5);
			if ( input.LA(1)==COLON||input.LA(1)==DCOLON||input.LA(1)==DOT||(input.LA(1) >= HASH && input.LA(1) <= HASH_SYMBOL)||input.LA(1)==LBRACKET||input.LA(1)==SASS_EXTEND_ONLY_SELECTOR ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(689, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "esPred");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "esPred"



	// $ANTLR start "typeSelector"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:691:1: typeSelector options {k=2; } : ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName ;
	public final void typeSelector() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "typeSelector");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(691, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:693:3: ( ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:693:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName
			{
			dbg.location(693,6);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:693:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )?
			int alt151=2;
			try { dbg.enterSubRule(151);
			try { dbg.enterDecision(151, decisionCanBacktrack[151]);

			int LA151_0 = input.LA(1);
			if ( (LA151_0==IDENT) ) {
				int LA151_1 = input.LA(2);
				if ( (synpred28_Css3()) ) {
					alt151=1;
				}
			}
			else if ( (LA151_0==STAR) ) {
				int LA151_2 = input.LA(2);
				if ( (synpred28_Css3()) ) {
					alt151=1;
				}
			}
			else if ( (LA151_0==PIPE) && (synpred28_Css3())) {
				alt151=1;
			}
			} finally {dbg.exitDecision(151);}

			switch (alt151) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:693:7: ( ( IDENT | STAR )? PIPE )=> namespacePrefix
					{
					dbg.location(693,31);
					pushFollow(FOLLOW_namespacePrefix_in_typeSelector3206);
					namespacePrefix();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(151);}
			dbg.location(693,49);
			pushFollow(FOLLOW_elementName_in_typeSelector3210);
			elementName();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(694, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "typeSelector");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "typeSelector"



	// $ANTLR start "namespacePrefix"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:1: namespacePrefix : ( namespacePrefixName | STAR )? PIPE ;
	public final void namespacePrefix() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "namespacePrefix");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(696, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:697:3: ( ( namespacePrefixName | STAR )? PIPE )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:697:5: ( namespacePrefixName | STAR )? PIPE
			{
			dbg.location(697,5);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:697:5: ( namespacePrefixName | STAR )?
			int alt152=3;
			try { dbg.enterSubRule(152);
			try { dbg.enterDecision(152, decisionCanBacktrack[152]);

			int LA152_0 = input.LA(1);
			if ( (LA152_0==IDENT) ) {
				alt152=1;
			}
			else if ( (LA152_0==STAR) ) {
				alt152=2;
			}
			} finally {dbg.exitDecision(152);}

			switch (alt152) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:697:7: namespacePrefixName
					{
					dbg.location(697,7);
					pushFollow(FOLLOW_namespacePrefixName_in_namespacePrefix3225);
					namespacePrefixName();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:697:29: STAR
					{
					dbg.location(697,29);
					match(input,STAR,FOLLOW_STAR_in_namespacePrefix3229); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(152);}
			dbg.location(697,36);
			match(input,PIPE,FOLLOW_PIPE_in_namespacePrefix3233); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(698, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "namespacePrefix");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "namespacePrefix"



	// $ANTLR start "elementSubsequent"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:701:1: elementSubsequent : ({...}? sass_extend_only_selector |{...}? less_selector_interpolation | cssId | cssClass | slAttribute | pseudo ) ;
	public final void elementSubsequent() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "elementSubsequent");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(701, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:702:5: ( ({...}? sass_extend_only_selector |{...}? less_selector_interpolation | cssId | cssClass | slAttribute | pseudo ) )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:703:5: ({...}? sass_extend_only_selector |{...}? less_selector_interpolation | cssId | cssClass | slAttribute | pseudo )
			{
			dbg.location(703,5);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:703:5: ({...}? sass_extend_only_selector |{...}? less_selector_interpolation | cssId | cssClass | slAttribute | pseudo )
			int alt153=6;
			try { dbg.enterSubRule(153);
			try { dbg.enterDecision(153, decisionCanBacktrack[153]);

			switch ( input.LA(1) ) {
			case SASS_EXTEND_ONLY_SELECTOR:
				{
				alt153=1;
				}
				break;
			case AT_SIGN:
				{
				alt153=2;
				}
				break;
			case HASH:
			case HASH_SYMBOL:
				{
				alt153=3;
				}
				break;
			case DOT:
				{
				alt153=4;
				}
				break;
			case LBRACKET:
				{
				alt153=5;
				}
				break;
			case COLON:
			case DCOLON:
				{
				alt153=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 153, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(153);}

			switch (alt153) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:704:9: {...}? sass_extend_only_selector
					{
					dbg.location(704,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "elementSubsequent", "isScssSource()");
					}dbg.location(704,27);
					pushFollow(FOLLOW_sass_extend_only_selector_in_elementSubsequent3265);
					sass_extend_only_selector();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:705:11: {...}? less_selector_interpolation
					{
					dbg.location(705,11);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "elementSubsequent", "isLessSource()");
					}dbg.location(705,29);
					pushFollow(FOLLOW_less_selector_interpolation_in_elementSubsequent3279);
					less_selector_interpolation();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:706:8: cssId
					{
					dbg.location(706,8);
					pushFollow(FOLLOW_cssId_in_elementSubsequent3289);
					cssId();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:707:8: cssClass
					{
					dbg.location(707,8);
					pushFollow(FOLLOW_cssClass_in_elementSubsequent3298);
					cssClass();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:708:11: slAttribute
					{
					dbg.location(708,11);
					pushFollow(FOLLOW_slAttribute_in_elementSubsequent3310);
					slAttribute();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:709:11: pseudo
					{
					dbg.location(709,11);
					pushFollow(FOLLOW_pseudo_in_elementSubsequent3322);
					pseudo();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(153);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(711, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "elementSubsequent");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "elementSubsequent"



	// $ANTLR start "cssId"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:714:1: cssId : ( HASH | ( HASH_SYMBOL ( NAME |{...}? less_selector_interpolation ) ) );
	public final void cssId() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cssId");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(714, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:715:5: ( HASH | ( HASH_SYMBOL ( NAME |{...}? less_selector_interpolation ) ) )
			int alt155=2;
			try { dbg.enterDecision(155, decisionCanBacktrack[155]);

			int LA155_0 = input.LA(1);
			if ( (LA155_0==HASH) ) {
				alt155=1;
			}
			else if ( (LA155_0==HASH_SYMBOL) ) {
				alt155=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 155, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(155);}

			switch (alt155) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:715:7: HASH
					{
					dbg.location(715,7);
					match(input,HASH,FOLLOW_HASH_in_cssId3346); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:717:9: ( HASH_SYMBOL ( NAME |{...}? less_selector_interpolation ) )
					{
					dbg.location(717,9);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:717:9: ( HASH_SYMBOL ( NAME |{...}? less_selector_interpolation ) )
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:717:11: HASH_SYMBOL ( NAME |{...}? less_selector_interpolation )
					{
					dbg.location(717,11);
					match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_cssId3366); if (state.failed) return;dbg.location(718,13);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:718:13: ( NAME |{...}? less_selector_interpolation )
					int alt154=2;
					try { dbg.enterSubRule(154);
					try { dbg.enterDecision(154, decisionCanBacktrack[154]);

					int LA154_0 = input.LA(1);
					if ( (LA154_0==NAME) ) {
						alt154=1;
					}
					else if ( (LA154_0==AT_SIGN) ) {
						alt154=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 154, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(154);}

					switch (alt154) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:718:15: NAME
							{
							dbg.location(718,15);
							match(input,NAME,FOLLOW_NAME_in_cssId3382); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:719:17: {...}? less_selector_interpolation
							{
							dbg.location(719,17);
							if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "cssId", "isLessSource()");
							}dbg.location(719,35);
							pushFollow(FOLLOW_less_selector_interpolation_in_cssId3402);
							less_selector_interpolation();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(154);}

					}

					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(WS, IDENT, LBRACE));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(722, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cssId");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cssId"



	// $ANTLR start "cssClass"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:728:1: cssClass : DOT ( IDENT | LESS_IMPORT_TYPE | GEN |{...}? less_selector_interpolation ) ;
	public final void cssClass() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cssClass");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(728, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:729:5: ( DOT ( IDENT | LESS_IMPORT_TYPE | GEN |{...}? less_selector_interpolation ) )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:729:7: DOT ( IDENT | LESS_IMPORT_TYPE | GEN |{...}? less_selector_interpolation )
			{
			dbg.location(729,7);
			match(input,DOT,FOLLOW_DOT_in_cssClass3453); if (state.failed) return;dbg.location(730,9);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:9: ( IDENT | LESS_IMPORT_TYPE | GEN |{...}? less_selector_interpolation )
			int alt156=4;
			try { dbg.enterSubRule(156);
			try { dbg.enterDecision(156, decisionCanBacktrack[156]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				alt156=1;
				}
				break;
			case LESS_IMPORT_TYPE:
				{
				alt156=2;
				}
				break;
			case GEN:
				{
				alt156=3;
				}
				break;
			case AT_SIGN:
				{
				alt156=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 156, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(156);}

			switch (alt156) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:731:13: IDENT
					{
					dbg.location(731,13);
					match(input,IDENT,FOLLOW_IDENT_in_cssClass3477); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:732:15: LESS_IMPORT_TYPE
					{
					dbg.location(732,15);
					match(input,LESS_IMPORT_TYPE,FOLLOW_LESS_IMPORT_TYPE_in_cssClass3493); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:733:15: GEN
					{
					dbg.location(733,15);
					match(input,GEN,FOLLOW_GEN_in_cssClass3509); if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:734:15: {...}? less_selector_interpolation
					{
					dbg.location(734,15);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cssClass", "isLessSource()");
					}dbg.location(734,33);
					pushFollow(FOLLOW_less_selector_interpolation_in_cssClass3527);
					less_selector_interpolation();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(156);}

			}

		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(WS, IDENT, LBRACE));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(736, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cssClass");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cssClass"



	// $ANTLR start "elementName"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:743:1: elementName : ( IDENT | GEN | LESS_AND | STAR );
	public final void elementName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "elementName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(743, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:744:5: ( IDENT | GEN | LESS_AND | STAR )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(744,5);
			if ( input.LA(1)==GEN||input.LA(1)==IDENT||input.LA(1)==LESS_AND||input.LA(1)==STAR ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(745, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "elementName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "elementName"



	// $ANTLR start "slAttribute"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:747:1: slAttribute : LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET ;
	public final void slAttribute() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "slAttribute");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(747, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:748:5: ( LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:748:7: LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET
			{
			dbg.location(748,7);
			match(input,LBRACKET,FOLLOW_LBRACKET_in_slAttribute3594); if (state.failed) return;dbg.location(749,6);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:749:6: ( namespacePrefix )?
			int alt157=2;
			try { dbg.enterSubRule(157);
			try { dbg.enterDecision(157, decisionCanBacktrack[157]);

			int LA157_0 = input.LA(1);
			if ( (LA157_0==IDENT) ) {
				int LA157_1 = input.LA(2);
				if ( (LA157_1==PIPE) ) {
					alt157=1;
				}
			}
			else if ( (LA157_0==PIPE||LA157_0==STAR) ) {
				alt157=1;
			}
			} finally {dbg.exitDecision(157);}

			switch (alt157) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:749:6: namespacePrefix
					{
					dbg.location(749,6);
					pushFollow(FOLLOW_namespacePrefix_in_slAttribute3601);
					namespacePrefix();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(157);}
			dbg.location(749,23);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:749:23: ( ws )?
			int alt158=2;
			try { dbg.enterSubRule(158);
			try { dbg.enterDecision(158, decisionCanBacktrack[158]);

			int LA158_0 = input.LA(1);
			if ( (LA158_0==COMMENT||LA158_0==NL||LA158_0==WS) ) {
				alt158=1;
			}
			} finally {dbg.exitDecision(158);}

			switch (alt158) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:749:23: ws
					{
					dbg.location(749,23);
					pushFollow(FOLLOW_ws_in_slAttribute3604);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(158);}
			dbg.location(750,9);
			pushFollow(FOLLOW_slAttributeName_in_slAttribute3615);
			slAttributeName();
			state._fsp--;
			if (state.failed) return;dbg.location(750,25);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:750:25: ( ws )?
			int alt159=2;
			try { dbg.enterSubRule(159);
			try { dbg.enterDecision(159, decisionCanBacktrack[159]);

			int LA159_0 = input.LA(1);
			if ( (LA159_0==COMMENT||LA159_0==NL||LA159_0==WS) ) {
				alt159=1;
			}
			} finally {dbg.exitDecision(159);}

			switch (alt159) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:750:25: ws
					{
					dbg.location(750,25);
					pushFollow(FOLLOW_ws_in_slAttribute3617);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(159);}
			dbg.location(752,13);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:752:13: ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )?
			int alt162=2;
			try { dbg.enterSubRule(162);
			try { dbg.enterDecision(162, decisionCanBacktrack[162]);

			int LA162_0 = input.LA(1);
			if ( (LA162_0==BEGINS||LA162_0==CONTAINS||LA162_0==DASHMATCH||LA162_0==ENDS||LA162_0==INCLUDES||LA162_0==OPEQ) ) {
				alt162=1;
			}
			} finally {dbg.exitDecision(162);}

			switch (alt162) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:753:17: ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )?
					{
					dbg.location(753,17);
					if ( input.LA(1)==BEGINS||input.LA(1)==CONTAINS||input.LA(1)==DASHMATCH||input.LA(1)==ENDS||input.LA(1)==INCLUDES||input.LA(1)==OPEQ ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(761,17);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:761:17: ( ws )?
					int alt160=2;
					try { dbg.enterSubRule(160);
					try { dbg.enterDecision(160, decisionCanBacktrack[160]);

					int LA160_0 = input.LA(1);
					if ( (LA160_0==COMMENT||LA160_0==NL||LA160_0==WS) ) {
						alt160=1;
					}
					} finally {dbg.exitDecision(160);}

					switch (alt160) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:761:17: ws
							{
							dbg.location(761,17);
							pushFollow(FOLLOW_ws_in_slAttribute3831);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(160);}
					dbg.location(762,17);
					pushFollow(FOLLOW_slAttributeValue_in_slAttribute3850);
					slAttributeValue();
					state._fsp--;
					if (state.failed) return;dbg.location(763,17);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:17: ( ws )?
					int alt161=2;
					try { dbg.enterSubRule(161);
					try { dbg.enterDecision(161, decisionCanBacktrack[161]);

					int LA161_0 = input.LA(1);
					if ( (LA161_0==COMMENT||LA161_0==NL||LA161_0==WS) ) {
						alt161=1;
					}
					} finally {dbg.exitDecision(161);}

					switch (alt161) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:763:17: ws
							{
							dbg.location(763,17);
							pushFollow(FOLLOW_ws_in_slAttribute3868);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(161);}

					}
					break;

			}
			} finally {dbg.exitSubRule(162);}
			dbg.location(766,7);
			match(input,RBRACKET,FOLLOW_RBRACKET_in_slAttribute3893); if (state.failed) return;
			}

		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(IDENT, LBRACE));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(767, 0);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "slAttribute");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "slAttribute"



	// $ANTLR start "slAttributeName"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:774:1: slAttributeName : IDENT ;
	public final void slAttributeName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "slAttributeName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(774, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:775:2: ( IDENT )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:775:4: IDENT
			{
			dbg.location(775,4);
			match(input,IDENT,FOLLOW_IDENT_in_slAttributeName3909); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(776, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "slAttributeName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "slAttributeName"



	// $ANTLR start "slAttributeValue"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:778:1: slAttributeValue : ( IDENT | STRING ) ;
	public final void slAttributeValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "slAttributeValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(778, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:779:2: ( ( IDENT | STRING ) )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(779,2);
			if ( input.LA(1)==IDENT||input.LA(1)==STRING ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(784, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "slAttributeValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "slAttributeValue"



	// $ANTLR start "pseudo"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:786:1: pseudo : ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) ) ;
	public final void pseudo() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "pseudo");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(786, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:787:5: ( ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) ) )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:787:7: ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) )
			{
			dbg.location(787,7);
			if ( input.LA(1)==COLON||input.LA(1)==DCOLON ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}dbg.location(788,14);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:14: ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) )
			int alt171=2;
			try { dbg.enterSubRule(171);
			try { dbg.enterDecision(171, decisionCanBacktrack[171]);

			int LA171_0 = input.LA(1);
			if ( (LA171_0==GEN||LA171_0==IDENT) ) {
				alt171=1;
			}
			else if ( (LA171_0==NOT) ) {
				alt171=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 171, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(171);}

			switch (alt171) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:789:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
					{
					dbg.location(789,17);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:789:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:790:21: ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
					{
					dbg.location(790,21);
					if ( input.LA(1)==GEN||input.LA(1)==IDENT ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(791,21);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:791:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
					int alt167=2;
					try { dbg.enterSubRule(167);
					try { dbg.enterDecision(167, decisionCanBacktrack[167]);

					try {
						isCyclicDecision = true;
						alt167 = dfa167.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(167);}

					switch (alt167) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:25: ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN
							{
							dbg.location(792,25);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:25: ( ws )?
							int alt163=2;
							try { dbg.enterSubRule(163);
							try { dbg.enterDecision(163, decisionCanBacktrack[163]);

							int LA163_0 = input.LA(1);
							if ( (LA163_0==COMMENT||LA163_0==NL||LA163_0==WS) ) {
								alt163=1;
							}
							} finally {dbg.exitDecision(163);}

							switch (alt163) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:25: ws
									{
									dbg.location(792,25);
									pushFollow(FOLLOW_ws_in_pseudo4101);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(163);}
							dbg.location(792,29);
							match(input,LPAREN,FOLLOW_LPAREN_in_pseudo4104); if (state.failed) return;dbg.location(792,36);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:36: ( ws )?
							int alt164=2;
							try { dbg.enterSubRule(164);
							try { dbg.enterDecision(164, decisionCanBacktrack[164]);

							int LA164_0 = input.LA(1);
							if ( (LA164_0==COMMENT||LA164_0==NL||LA164_0==WS) ) {
								alt164=1;
							}
							} finally {dbg.exitDecision(164);}

							switch (alt164) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:36: ws
									{
									dbg.location(792,36);
									pushFollow(FOLLOW_ws_in_pseudo4106);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(164);}
							dbg.location(792,40);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:40: ( ( expression ( ws )? ) | STAR )?
							int alt166=3;
							try { dbg.enterSubRule(166);
							try { dbg.enterDecision(166, decisionCanBacktrack[166]);

							int LA166_0 = input.LA(1);
							if ( ((LA166_0 >= ANGLE && LA166_0 <= AT_IDENT)||(LA166_0 >= BOTTOMCENTER_SYM && LA166_0 <= BOTTOMRIGHT_SYM)||LA166_0==CHARSET_SYM||LA166_0==COUNTER_STYLE_SYM||LA166_0==DIMENSION||LA166_0==EMS||LA166_0==EXS||(LA166_0 >= FONT_FACE_SYM && LA166_0 <= FREQ)||LA166_0==GEN||(LA166_0 >= HASH && LA166_0 <= HASH_SYMBOL)||LA166_0==IDENT||LA166_0==IMPORT_SYM||(LA166_0 >= LEFTBOTTOM_SYM && LA166_0 <= LENGTH)||LA166_0==LESS_JS_STRING||(LA166_0 >= MEDIA_SYM && LA166_0 <= MOZ_DOCUMENT_SYM)||LA166_0==NAMESPACE_SYM||LA166_0==NUMBER||(LA166_0 >= PAGE_SYM && LA166_0 <= PERCENTAGE_SYMBOL)||LA166_0==PLUS||(LA166_0 >= REM && LA166_0 <= RIGHTTOP_SYM)||(LA166_0 >= SASS_CONTENT && LA166_0 <= SASS_DEBUG)||(LA166_0 >= SASS_EACH && LA166_0 <= SASS_EXTEND)||(LA166_0 >= SASS_FOR && LA166_0 <= SASS_MIXIN)||(LA166_0 >= SASS_RETURN && LA166_0 <= SASS_WHILE)||LA166_0==STRING||(LA166_0 >= TILDE && LA166_0 <= TOPRIGHT_SYM)||LA166_0==URI||LA166_0==WEBKIT_KEYFRAMES_SYM) ) {
								alt166=1;
							}
							else if ( (LA166_0==STAR) ) {
								alt166=2;
							}
							} finally {dbg.exitDecision(166);}

							switch (alt166) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:42: ( expression ( ws )? )
									{
									dbg.location(792,42);
									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:42: ( expression ( ws )? )
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:43: expression ( ws )?
									{
									dbg.location(792,43);
									pushFollow(FOLLOW_expression_in_pseudo4112);
									expression();
									state._fsp--;
									if (state.failed) return;dbg.location(792,54);
									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:54: ( ws )?
									int alt165=2;
									try { dbg.enterSubRule(165);
									try { dbg.enterDecision(165, decisionCanBacktrack[165]);

									int LA165_0 = input.LA(1);
									if ( (LA165_0==COMMENT||LA165_0==NL||LA165_0==WS) ) {
										alt165=1;
									}
									} finally {dbg.exitDecision(165);}

									switch (alt165) {
										case 1 :
											dbg.enterAlt(1);

											// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:54: ws
											{
											dbg.location(792,54);
											pushFollow(FOLLOW_ws_in_pseudo4114);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(165);}

									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:792:61: STAR
									{
									dbg.location(792,61);
									match(input,STAR,FOLLOW_STAR_in_pseudo4120); if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(166);}
							dbg.location(792,69);
							match(input,RPAREN,FOLLOW_RPAREN_in_pseudo4125); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(167);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:796:17: ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN )
					{
					dbg.location(796,17);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:796:17: ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN )
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:796:19: NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN
					{
					dbg.location(796,19);
					match(input,NOT,FOLLOW_NOT_in_pseudo4204); if (state.failed) return;dbg.location(796,23);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:796:23: ( ws )?
					int alt168=2;
					try { dbg.enterSubRule(168);
					try { dbg.enterDecision(168, decisionCanBacktrack[168]);

					int LA168_0 = input.LA(1);
					if ( (LA168_0==COMMENT||LA168_0==NL||LA168_0==WS) ) {
						alt168=1;
					}
					} finally {dbg.exitDecision(168);}

					switch (alt168) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:796:23: ws
							{
							dbg.location(796,23);
							pushFollow(FOLLOW_ws_in_pseudo4206);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(168);}
					dbg.location(796,27);
					match(input,LPAREN,FOLLOW_LPAREN_in_pseudo4209); if (state.failed) return;dbg.location(796,34);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:796:34: ( ws )?
					int alt169=2;
					try { dbg.enterSubRule(169);
					try { dbg.enterDecision(169, decisionCanBacktrack[169]);

					int LA169_0 = input.LA(1);
					if ( (LA169_0==COMMENT||LA169_0==NL||LA169_0==WS) ) {
						alt169=1;
					}
					} finally {dbg.exitDecision(169);}

					switch (alt169) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:796:34: ws
							{
							dbg.location(796,34);
							pushFollow(FOLLOW_ws_in_pseudo4211);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(169);}
					dbg.location(796,38);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:796:38: ( simpleSelectorSequence )?
					int alt170=2;
					try { dbg.enterSubRule(170);
					try { dbg.enterDecision(170, decisionCanBacktrack[170]);

					int LA170_0 = input.LA(1);
					if ( (LA170_0==AT_SIGN||LA170_0==COLON||LA170_0==DCOLON||LA170_0==DOT||LA170_0==GEN||(LA170_0 >= HASH && LA170_0 <= HASH_SYMBOL)||LA170_0==IDENT||LA170_0==LBRACKET||LA170_0==LESS_AND||LA170_0==PIPE||LA170_0==SASS_EXTEND_ONLY_SELECTOR||LA170_0==STAR) ) {
						alt170=1;
					}
					} finally {dbg.exitDecision(170);}

					switch (alt170) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:796:38: simpleSelectorSequence
							{
							dbg.location(796,38);
							pushFollow(FOLLOW_simpleSelectorSequence_in_pseudo4214);
							simpleSelectorSequence();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(170);}
					dbg.location(796,62);
					match(input,RPAREN,FOLLOW_RPAREN_in_pseudo4217); if (state.failed) return;
					}

					}
					break;

			}
			} finally {dbg.exitSubRule(171);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(798, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "pseudo");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "pseudo"



	// $ANTLR start "propertyDeclaration"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:800:1: propertyDeclaration : ( ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? |{...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue );
	public final void propertyDeclaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "propertyDeclaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(800, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:801:5: ( ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? |{...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue )
			int alt180=2;
			try { dbg.enterDecision(180, decisionCanBacktrack[180]);

			switch ( input.LA(1) ) {
			case STAR:
				{
				int LA180_1 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt180=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt180=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 180, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH_SYMBOL:
				{
				int LA180_2 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt180=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt180=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 180, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case IDENT:
				{
				int LA180_3 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt180=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt180=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 180, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DOT:
			case HASH:
			case MINUS:
				{
				int LA180_4 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt180=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt180=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 180, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GEN:
				{
				int LA180_5 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt180=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt180=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 180, 5, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA180_6 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt180=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt180=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 180, 6, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA180_7 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt180=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt180=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 180, 7, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 180, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(180);}

			switch (alt180) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:802:5: ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )?
					{
					dbg.location(802,5);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:802:5: ( STAR )?
					int alt172=2;
					try { dbg.enterSubRule(172);
					try { dbg.enterDecision(172, decisionCanBacktrack[172]);

					int LA172_0 = input.LA(1);
					if ( (LA172_0==STAR) ) {
						alt172=1;
					}
					} finally {dbg.exitDecision(172);}

					switch (alt172) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:802:5: STAR
							{
							dbg.location(802,5);
							match(input,STAR,FOLLOW_STAR_in_propertyDeclaration4255); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(172);}
					dbg.location(802,11);
					pushFollow(FOLLOW_property_in_propertyDeclaration4258);
					property();
					state._fsp--;
					if (state.failed) return;dbg.location(802,20);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:802:20: ( ws )?
					int alt173=2;
					try { dbg.enterSubRule(173);
					try { dbg.enterDecision(173, decisionCanBacktrack[173]);

					int LA173_0 = input.LA(1);
					if ( (LA173_0==COMMENT||LA173_0==NL||LA173_0==WS) ) {
						alt173=1;
					}
					} finally {dbg.exitDecision(173);}

					switch (alt173) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:802:20: ws
							{
							dbg.location(802,20);
							pushFollow(FOLLOW_ws_in_propertyDeclaration4260);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(173);}
					dbg.location(802,24);
					match(input,COLON,FOLLOW_COLON_in_propertyDeclaration4263); if (state.failed) return;dbg.location(802,30);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:802:30: ( ws )?
					int alt174=2;
					try { dbg.enterSubRule(174);
					try { dbg.enterDecision(174, decisionCanBacktrack[174]);

					int LA174_0 = input.LA(1);
					if ( (LA174_0==COMMENT||LA174_0==NL||LA174_0==WS) ) {
						alt174=1;
					}
					} finally {dbg.exitDecision(174);}

					switch (alt174) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:802:30: ws
							{
							dbg.location(802,30);
							pushFollow(FOLLOW_ws_in_propertyDeclaration4265);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(174);}
					dbg.location(802,34);
					pushFollow(FOLLOW_propertyValue_in_propertyDeclaration4268);
					propertyValue();
					state._fsp--;
					if (state.failed) return;dbg.location(802,48);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:802:48: ( ( ws )? prio )?
					int alt176=2;
					try { dbg.enterSubRule(176);
					try { dbg.enterDecision(176, decisionCanBacktrack[176]);

					try {
						isCyclicDecision = true;
						alt176 = dfa176.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(176);}

					switch (alt176) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:802:49: ( ws )? prio
							{
							dbg.location(802,49);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:802:49: ( ws )?
							int alt175=2;
							try { dbg.enterSubRule(175);
							try { dbg.enterDecision(175, decisionCanBacktrack[175]);

							int LA175_0 = input.LA(1);
							if ( (LA175_0==COMMENT||LA175_0==NL||LA175_0==WS) ) {
								alt175=1;
							}
							} finally {dbg.exitDecision(175);}

							switch (alt175) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:802:49: ws
									{
									dbg.location(802,49);
									pushFollow(FOLLOW_ws_in_propertyDeclaration4271);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(175);}
							dbg.location(802,53);
							pushFollow(FOLLOW_prio_in_propertyDeclaration4274);
							prio();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(176);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:803:7: {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue
					{
					dbg.location(803,7);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "propertyDeclaration", "isCssPreprocessorSource()");
					}dbg.location(803,36);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:803:36: ( STAR )?
					int alt177=2;
					try { dbg.enterSubRule(177);
					try { dbg.enterDecision(177, decisionCanBacktrack[177]);

					int LA177_0 = input.LA(1);
					if ( (LA177_0==STAR) ) {
						alt177=1;
					}
					} finally {dbg.exitDecision(177);}

					switch (alt177) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:803:36: STAR
							{
							dbg.location(803,36);
							match(input,STAR,FOLLOW_STAR_in_propertyDeclaration4286); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(177);}
					dbg.location(803,42);
					pushFollow(FOLLOW_property_in_propertyDeclaration4289);
					property();
					state._fsp--;
					if (state.failed) return;dbg.location(803,51);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:803:51: ( ws )?
					int alt178=2;
					try { dbg.enterSubRule(178);
					try { dbg.enterDecision(178, decisionCanBacktrack[178]);

					int LA178_0 = input.LA(1);
					if ( (LA178_0==COMMENT||LA178_0==NL||LA178_0==WS) ) {
						alt178=1;
					}
					} finally {dbg.exitDecision(178);}

					switch (alt178) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:803:51: ws
							{
							dbg.location(803,51);
							pushFollow(FOLLOW_ws_in_propertyDeclaration4291);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(178);}
					dbg.location(803,55);
					match(input,COLON,FOLLOW_COLON_in_propertyDeclaration4294); if (state.failed) return;dbg.location(803,61);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:803:61: ( ws )?
					int alt179=2;
					try { dbg.enterSubRule(179);
					try { dbg.enterDecision(179, decisionCanBacktrack[179]);

					int LA179_0 = input.LA(1);
					if ( (LA179_0==COMMENT||LA179_0==NL||LA179_0==WS) ) {
						alt179=1;
					}
					} finally {dbg.exitDecision(179);}

					switch (alt179) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:803:61: ws
							{
							dbg.location(803,61);
							pushFollow(FOLLOW_ws_in_propertyDeclaration4296);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(179);}
					dbg.location(803,65);
					pushFollow(FOLLOW_cp_propertyValue_in_propertyDeclaration4299);
					cp_propertyValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        //recovery: if an mismatched token occures inside a declaration is found,
			        //then skip all tokens until an end of the rule is found represented by right curly brace
			        consumeUntil(input, BitSet.of(SEMI, RBRACE));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(804, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "propertyDeclaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "propertyDeclaration"



	// $ANTLR start "cp_propertyValue"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:813:1: cp_propertyValue : ({...}? cp_expression_list | propertyValue );
	public final void cp_propertyValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_propertyValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(813, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:814:5: ({...}? cp_expression_list | propertyValue )
			int alt181=2;
			try { dbg.enterDecision(181, decisionCanBacktrack[181]);

			switch ( input.LA(1) ) {
			case IMPORTANT_SYM:
			case LPAREN:
			case NOT:
				{
				alt181=1;
				}
				break;
			case MINUS:
			case PLUS:
				{
				int LA181_2 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt181=1;
				}
				else if ( (true) ) {
					alt181=2;
				}

				}
				break;
			case IDENT:
				{
				int LA181_3 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt181=1;
				}
				else if ( (true) ) {
					alt181=2;
				}

				}
				break;
			case NUMBER:
				{
				int LA181_4 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt181=1;
				}
				else if ( (true) ) {
					alt181=2;
				}

				}
				break;
			case PERCENTAGE:
				{
				int LA181_5 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt181=1;
				}
				else if ( (true) ) {
					alt181=2;
				}

				}
				break;
			case LENGTH:
				{
				int LA181_6 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt181=1;
				}
				else if ( (true) ) {
					alt181=2;
				}

				}
				break;
			case EMS:
				{
				int LA181_7 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt181=1;
				}
				else if ( (true) ) {
					alt181=2;
				}

				}
				break;
			case REM:
				{
				int LA181_8 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt181=1;
				}
				else if ( (true) ) {
					alt181=2;
				}

				}
				break;
			case EXS:
				{
				int LA181_9 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt181=1;
				}
				else if ( (true) ) {
					alt181=2;
				}

				}
				break;
			case ANGLE:
				{
				int LA181_10 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt181=1;
				}
				else if ( (true) ) {
					alt181=2;
				}

				}
				break;
			case TIME:
				{
				int LA181_11 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt181=1;
				}
				else if ( (true) ) {
					alt181=2;
				}

				}
				break;
			case FREQ:
				{
				int LA181_12 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt181=1;
				}
				else if ( (true) ) {
					alt181=2;
				}

				}
				break;
			case RESOLUTION:
				{
				int LA181_13 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt181=1;
				}
				else if ( (true) ) {
					alt181=2;
				}

				}
				break;
			case DIMENSION:
				{
				int LA181_14 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt181=1;
				}
				else if ( (true) ) {
					alt181=2;
				}

				}
				break;
			case STRING:
				{
				int LA181_15 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt181=1;
				}
				else if ( (true) ) {
					alt181=2;
				}

				}
				break;
			case TILDE:
				{
				int LA181_16 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt181=1;
				}
				else if ( (true) ) {
					alt181=2;
				}

				}
				break;
			case LESS_JS_STRING:
				{
				int LA181_17 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt181=1;
				}
				else if ( (true) ) {
					alt181=2;
				}

				}
				break;
			case GEN:
				{
				int LA181_18 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt181=1;
				}
				else if ( (true) ) {
					alt181=2;
				}

				}
				break;
			case URI:
				{
				int LA181_19 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt181=1;
				}
				else if ( (true) ) {
					alt181=2;
				}

				}
				break;
			case HASH:
				{
				int LA181_20 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt181=1;
				}
				else if ( (true) ) {
					alt181=2;
				}

				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA181_21 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt181=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt181=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 181, 21, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA181_22 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt181=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt181=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 181, 22, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH_SYMBOL:
				{
				int LA181_23 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt181=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt181=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 181, 23, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PERCENTAGE_SYMBOL:
				{
				int LA181_24 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt181=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt181=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 181, 24, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 181, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(181);}

			switch (alt181) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:815:5: {...}? cp_expression_list
					{
					dbg.location(815,5);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_propertyValue", "isCssPreprocessorSource()");
					}dbg.location(815,34);
					pushFollow(FOLLOW_cp_expression_list_in_cp_propertyValue4333);
					cp_expression_list();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:816:7: propertyValue
					{
					dbg.location(816,7);
					pushFollow(FOLLOW_propertyValue_in_cp_propertyValue4341);
					propertyValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(817, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_propertyValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_propertyValue"



	// $ANTLR start "propertyValue"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:819:1: propertyValue : expression ;
	public final void propertyValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "propertyValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(819, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:820:2: ( expression )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:9: expression
			{
			dbg.location(821,9);
			pushFollow(FOLLOW_expression_in_propertyValue4363);
			expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(822, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "propertyValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "propertyValue"



	// $ANTLR start "expressionPredicate"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:825:1: expressionPredicate options {k=1; } : (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) ;
	public final void expressionPredicate() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "expressionPredicate");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(825, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:827:5: ( (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:828:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE )
			{
			dbg.location(828,5);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:828:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+
			int cnt182=0;
			try { dbg.enterSubRule(182);

			loop182:
			while (true) {
				int alt182=2;
				try { dbg.enterDecision(182, decisionCanBacktrack[182]);

				int LA182_0 = input.LA(1);
				if ( ((LA182_0 >= A && LA182_0 <= ANGLE)||(LA182_0 >= AT_SIGN && LA182_0 <= L)||(LA182_0 >= LBRACKET && LA182_0 <= R)||(LA182_0 >= RBRACKET && LA182_0 <= SASS_RETURN)||(LA182_0 >= SASS_WARN && LA182_0 <= SASS_WHILE)||(LA182_0 >= STRING && LA182_0 <= Z)) ) {
					alt182=1;
				}

				} finally {dbg.exitDecision(182);}

				switch (alt182) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
					{
					dbg.location(828,5);
					if ( (input.LA(1) >= A && input.LA(1) <= ANGLE)||(input.LA(1) >= AT_SIGN && input.LA(1) <= L)||(input.LA(1) >= LBRACKET && input.LA(1) <= R)||(input.LA(1) >= RBRACKET && input.LA(1) <= SASS_RETURN)||(input.LA(1) >= SASS_WARN && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= STRING && input.LA(1) <= Z) ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;

				default :
					if ( cnt182 >= 1 ) break loop182;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(182, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt182++;
			}
			} finally {dbg.exitSubRule(182);}
			dbg.location(828,76);
			if ( input.LA(1)==RBRACE||input.LA(1)==SEMI ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(829, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "expressionPredicate");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "expressionPredicate"



	// $ANTLR start "syncToDeclarationsRule"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:833:1: syncToDeclarationsRule :;
	public final void syncToDeclarationsRule() throws RecognitionException {

		        //why sync to DOT? - LESS allows class rules nested
		        syncToSet(BitSet.of(IDENT, RBRACE, STAR, DOT));
		    
		try { dbg.enterRule(getGrammarFileName(), "syncToDeclarationsRule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(833, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:6: ()
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:839:6: 
			{
			}

		}
		finally {
			// do for sure before leaving
		}
		dbg.location(839, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "syncToDeclarationsRule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "syncToDeclarationsRule"



	// $ANTLR start "syncTo_RBRACE"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:841:1: syncTo_RBRACE :;
	public final void syncTo_RBRACE() throws RecognitionException {

		        syncToRBRACE(1); //initial nest == 1
		    
		try { dbg.enterRule(getGrammarFileName(), "syncTo_RBRACE");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(841, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:845:6: ()
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:846:6: 
			{
			}

		}
		finally {
			// do for sure before leaving
		}
		dbg.location(846, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "syncTo_RBRACE");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "syncTo_RBRACE"



	// $ANTLR start "syncTo_SEMI"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:848:1: syncTo_SEMI : SEMI ;
	public final void syncTo_SEMI() throws RecognitionException {

		        syncToSet(BitSet.of(SEMI));
		    
		try { dbg.enterRule(getGrammarFileName(), "syncTo_SEMI");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(848, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:852:6: ( SEMI )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:853:13: SEMI
			{
			dbg.location(853,13);
			match(input,SEMI,FOLLOW_SEMI_in_syncTo_SEMI4533); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(854, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "syncTo_SEMI");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "syncTo_SEMI"



	// $ANTLR start "syncToFollow"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:857:1: syncToFollow :;
	public final void syncToFollow() throws RecognitionException {

		        syncToSet();
		    
		try { dbg.enterRule(getGrammarFileName(), "syncToFollow");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(857, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:6: ()
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:862:6: 
			{
			}

		}
		finally {
			// do for sure before leaving
		}
		dbg.location(862, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "syncToFollow");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "syncToFollow"



	// $ANTLR start "prio"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:864:1: prio : IMPORTANT_SYM ;
	public final void prio() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "prio");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(864, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:5: ( IMPORTANT_SYM )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:865:7: IMPORTANT_SYM
			{
			dbg.location(865,7);
			match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_prio4578); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(866, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "prio");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "prio"



	// $ANTLR start "expression"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:868:1: expression : term ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )* ;
	public final void expression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "expression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(868, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:5: ( term ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )* )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:7: term ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )*
			{
			dbg.location(869,7);
			pushFollow(FOLLOW_term_in_expression4595);
			term();
			state._fsp--;
			if (state.failed) return;dbg.location(869,12);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:12: ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )*
			try { dbg.enterSubRule(186);

			loop186:
			while (true) {
				int alt186=2;
				try { dbg.enterDecision(186, decisionCanBacktrack[186]);

				try {
					isCyclicDecision = true;
					alt186 = dfa186.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(186);}

				switch (alt186) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:14: ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term
					{
					dbg.location(869,66);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:66: ( ws | ( ( ws )? operator ( ws )? ) |)
					int alt185=3;
					try { dbg.enterSubRule(185);
					try { dbg.enterDecision(185, decisionCanBacktrack[185]);

					try {
						isCyclicDecision = true;
						alt185 = dfa185.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(185);}

					switch (alt185) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:68: ws
							{
							dbg.location(869,68);
							pushFollow(FOLLOW_ws_in_expression4627);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:73: ( ( ws )? operator ( ws )? )
							{
							dbg.location(869,73);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:73: ( ( ws )? operator ( ws )? )
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:74: ( ws )? operator ( ws )?
							{
							dbg.location(869,74);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:74: ( ws )?
							int alt183=2;
							try { dbg.enterSubRule(183);
							try { dbg.enterDecision(183, decisionCanBacktrack[183]);

							int LA183_0 = input.LA(1);
							if ( (LA183_0==COMMENT||LA183_0==NL||LA183_0==WS) ) {
								alt183=1;
							}
							} finally {dbg.exitDecision(183);}

							switch (alt183) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:74: ws
									{
									dbg.location(869,74);
									pushFollow(FOLLOW_ws_in_expression4632);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(183);}
							dbg.location(869,78);
							pushFollow(FOLLOW_operator_in_expression4635);
							operator();
							state._fsp--;
							if (state.failed) return;dbg.location(869,87);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:87: ( ws )?
							int alt184=2;
							try { dbg.enterSubRule(184);
							try { dbg.enterDecision(184, decisionCanBacktrack[184]);

							int LA184_0 = input.LA(1);
							if ( (LA184_0==COMMENT||LA184_0==NL||LA184_0==WS) ) {
								alt184=1;
							}
							} finally {dbg.exitDecision(184);}

							switch (alt184) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:87: ws
									{
									dbg.location(869,87);
									pushFollow(FOLLOW_ws_in_expression4637);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(184);}

							}

							}
							break;
						case 3 :
							dbg.enterAlt(3);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:107: 
							{
							}
							break;

					}
					} finally {dbg.exitSubRule(185);}
					dbg.location(869,109);
					pushFollow(FOLLOW_term_in_expression4646);
					term();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop186;
				}
			}
			} finally {dbg.exitSubRule(186);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(870, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "expression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "expression"



	// $ANTLR start "term"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:872:1: term : ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor |{...}? cp_variable |{...}? sass_interpolation_expression_var |{...}? cp_term_symbol ) ;
	public final void term() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "term");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(872, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:873:5: ( ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor |{...}? cp_variable |{...}? sass_interpolation_expression_var |{...}? cp_term_symbol ) )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:874:5: ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor |{...}? cp_variable |{...}? sass_interpolation_expression_var |{...}? cp_term_symbol )
			{
			dbg.location(874,5);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:874:5: ( unaryOperator ( ws )? )?
			int alt188=2;
			try { dbg.enterSubRule(188);
			try { dbg.enterDecision(188, decisionCanBacktrack[188]);

			int LA188_0 = input.LA(1);
			if ( (LA188_0==MINUS||LA188_0==PLUS) ) {
				alt188=1;
			}
			} finally {dbg.exitDecision(188);}

			switch (alt188) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:874:7: unaryOperator ( ws )?
					{
					dbg.location(874,7);
					pushFollow(FOLLOW_unaryOperator_in_term4671);
					unaryOperator();
					state._fsp--;
					if (state.failed) return;dbg.location(874,21);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:874:21: ( ws )?
					int alt187=2;
					try { dbg.enterSubRule(187);
					try { dbg.enterDecision(187, decisionCanBacktrack[187]);

					int LA187_0 = input.LA(1);
					if ( (LA187_0==COMMENT||LA187_0==NL||LA187_0==WS) ) {
						alt187=1;
					}
					} finally {dbg.exitDecision(187);}

					switch (alt187) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:874:21: ws
							{
							dbg.location(874,21);
							pushFollow(FOLLOW_ws_in_term4673);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(187);}

					}
					break;

			}
			} finally {dbg.exitSubRule(188);}
			dbg.location(875,5);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:875:5: ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor |{...}? cp_variable |{...}? sass_interpolation_expression_var |{...}? cp_term_symbol )
			int alt189=22;
			try { dbg.enterSubRule(189);
			try { dbg.enterDecision(189, decisionCanBacktrack[189]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA189_1 = input.LA(2);
				if ( (synpred30_Css3()) ) {
					alt189=1;
				}
				else if ( (true) ) {
					alt189=2;
				}

				}
				break;
			case NUMBER:
				{
				alt189=3;
				}
				break;
			case PERCENTAGE:
				{
				alt189=4;
				}
				break;
			case LENGTH:
				{
				alt189=5;
				}
				break;
			case EMS:
				{
				alt189=6;
				}
				break;
			case REM:
				{
				alt189=7;
				}
				break;
			case EXS:
				{
				alt189=8;
				}
				break;
			case ANGLE:
				{
				alt189=9;
				}
				break;
			case TIME:
				{
				alt189=10;
				}
				break;
			case FREQ:
				{
				alt189=11;
				}
				break;
			case RESOLUTION:
				{
				alt189=12;
				}
				break;
			case DIMENSION:
				{
				alt189=13;
				}
				break;
			case STRING:
				{
				alt189=14;
				}
				break;
			case TILDE:
				{
				alt189=15;
				}
				break;
			case LESS_JS_STRING:
				{
				alt189=16;
				}
				break;
			case GEN:
				{
				alt189=17;
				}
				break;
			case URI:
				{
				alt189=18;
				}
				break;
			case HASH:
				{
				alt189=19;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt189=20;
				}
				break;
			case HASH_SYMBOL:
				{
				alt189=21;
				}
				break;
			case PERCENTAGE_SYMBOL:
				{
				alt189=22;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 189, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(189);}

			switch (alt189) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:876:9: ( functionName ( ws )? LPAREN )=> function
					{
					dbg.location(876,36);
					pushFollow(FOLLOW_function_in_term4702);
					function();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:877:11: IDENT
					{
					dbg.location(877,11);
					match(input,IDENT,FOLLOW_IDENT_in_term4715); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:878:11: NUMBER
					{
					dbg.location(878,11);
					match(input,NUMBER,FOLLOW_NUMBER_in_term4727); if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:879:11: PERCENTAGE
					{
					dbg.location(879,11);
					match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_term4739); if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:880:11: LENGTH
					{
					dbg.location(880,11);
					match(input,LENGTH,FOLLOW_LENGTH_in_term4751); if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:881:11: EMS
					{
					dbg.location(881,11);
					match(input,EMS,FOLLOW_EMS_in_term4763); if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:882:11: REM
					{
					dbg.location(882,11);
					match(input,REM,FOLLOW_REM_in_term4775); if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:883:11: EXS
					{
					dbg.location(883,11);
					match(input,EXS,FOLLOW_EXS_in_term4787); if (state.failed) return;
					}
					break;
				case 9 :
					dbg.enterAlt(9);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:884:11: ANGLE
					{
					dbg.location(884,11);
					match(input,ANGLE,FOLLOW_ANGLE_in_term4799); if (state.failed) return;
					}
					break;
				case 10 :
					dbg.enterAlt(10);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:885:11: TIME
					{
					dbg.location(885,11);
					match(input,TIME,FOLLOW_TIME_in_term4811); if (state.failed) return;
					}
					break;
				case 11 :
					dbg.enterAlt(11);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:886:11: FREQ
					{
					dbg.location(886,11);
					match(input,FREQ,FOLLOW_FREQ_in_term4823); if (state.failed) return;
					}
					break;
				case 12 :
					dbg.enterAlt(12);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:887:11: RESOLUTION
					{
					dbg.location(887,11);
					match(input,RESOLUTION,FOLLOW_RESOLUTION_in_term4835); if (state.failed) return;
					}
					break;
				case 13 :
					dbg.enterAlt(13);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:888:11: DIMENSION
					{
					dbg.location(888,11);
					match(input,DIMENSION,FOLLOW_DIMENSION_in_term4847); if (state.failed) return;
					}
					break;
				case 14 :
					dbg.enterAlt(14);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:889:11: STRING
					{
					dbg.location(889,11);
					match(input,STRING,FOLLOW_STRING_in_term4864); if (state.failed) return;
					}
					break;
				case 15 :
					dbg.enterAlt(15);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:890:11: TILDE ( STRING | LESS_JS_STRING )
					{
					dbg.location(890,11);
					match(input,TILDE,FOLLOW_TILDE_in_term4876); if (state.failed) return;dbg.location(890,17);
					if ( input.LA(1)==LESS_JS_STRING||input.LA(1)==STRING ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;
				case 16 :
					dbg.enterAlt(16);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:891:11: LESS_JS_STRING
					{
					dbg.location(891,11);
					match(input,LESS_JS_STRING,FOLLOW_LESS_JS_STRING_in_term4899); if (state.failed) return;
					}
					break;
				case 17 :
					dbg.enterAlt(17);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:892:11: GEN
					{
					dbg.location(892,11);
					match(input,GEN,FOLLOW_GEN_in_term4914); if (state.failed) return;
					}
					break;
				case 18 :
					dbg.enterAlt(18);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:893:11: URI
					{
					dbg.location(893,11);
					match(input,URI,FOLLOW_URI_in_term4926); if (state.failed) return;
					}
					break;
				case 19 :
					dbg.enterAlt(19);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:894:11: hexColor
					{
					dbg.location(894,11);
					pushFollow(FOLLOW_hexColor_in_term4938);
					hexColor();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 20 :
					dbg.enterAlt(20);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:895:11: {...}? cp_variable
					{
					dbg.location(895,11);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
					}dbg.location(895,40);
					pushFollow(FOLLOW_cp_variable_in_term4952);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 21 :
					dbg.enterAlt(21);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:896:11: {...}? sass_interpolation_expression_var
					{
					dbg.location(896,11);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
					}dbg.location(896,40);
					pushFollow(FOLLOW_sass_interpolation_expression_var_in_term4966);
					sass_interpolation_expression_var();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 22 :
					dbg.enterAlt(22);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:897:11: {...}? cp_term_symbol
					{
					dbg.location(897,11);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
					}dbg.location(897,40);
					pushFollow(FOLLOW_cp_term_symbol_in_term4980);
					cp_term_symbol();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(189);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(899, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "term");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "term"



	// $ANTLR start "cp_term_symbol"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:904:1: cp_term_symbol : PERCENTAGE_SYMBOL ;
	public final void cp_term_symbol() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_term_symbol");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(904, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:5: ( PERCENTAGE_SYMBOL )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:905:7: PERCENTAGE_SYMBOL
			{
			dbg.location(905,7);
			match(input,PERCENTAGE_SYMBOL,FOLLOW_PERCENTAGE_SYMBOL_in_cp_term_symbol5007); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(906, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_term_symbol");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_term_symbol"



	// $ANTLR start "function"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:908:1: function : functionName ( ws )? LPAREN ( ws )? ( fnAttributes |) RPAREN ;
	public final void function() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "function");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(908, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:2: ( functionName ( ws )? LPAREN ( ws )? ( fnAttributes |) RPAREN )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:5: functionName ( ws )? LPAREN ( ws )? ( fnAttributes |) RPAREN
			{
			dbg.location(909,5);
			pushFollow(FOLLOW_functionName_in_function5023);
			functionName();
			state._fsp--;
			if (state.failed) return;dbg.location(909,18);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:18: ( ws )?
			int alt190=2;
			try { dbg.enterSubRule(190);
			try { dbg.enterDecision(190, decisionCanBacktrack[190]);

			int LA190_0 = input.LA(1);
			if ( (LA190_0==COMMENT||LA190_0==NL||LA190_0==WS) ) {
				alt190=1;
			}
			} finally {dbg.exitDecision(190);}

			switch (alt190) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:18: ws
					{
					dbg.location(909,18);
					pushFollow(FOLLOW_ws_in_function5025);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(190);}
			dbg.location(910,3);
			match(input,LPAREN,FOLLOW_LPAREN_in_function5030); if (state.failed) return;dbg.location(910,10);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:910:10: ( ws )?
			int alt191=2;
			try { dbg.enterSubRule(191);
			try { dbg.enterDecision(191, decisionCanBacktrack[191]);

			int LA191_0 = input.LA(1);
			if ( (LA191_0==COMMENT||LA191_0==NL||LA191_0==WS) ) {
				alt191=1;
			}
			} finally {dbg.exitDecision(191);}

			switch (alt191) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:910:10: ws
					{
					dbg.location(910,10);
					pushFollow(FOLLOW_ws_in_function5032);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(191);}
			dbg.location(911,3);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:911:3: ( fnAttributes |)
			int alt192=2;
			try { dbg.enterSubRule(192);
			try { dbg.enterDecision(192, decisionCanBacktrack[192]);

			int LA192_0 = input.LA(1);
			if ( ((LA192_0 >= ANGLE && LA192_0 <= AT_IDENT)||(LA192_0 >= BOTTOMCENTER_SYM && LA192_0 <= BOTTOMRIGHT_SYM)||LA192_0==CHARSET_SYM||LA192_0==COUNTER_STYLE_SYM||LA192_0==DIMENSION||LA192_0==EMS||LA192_0==EXS||(LA192_0 >= FONT_FACE_SYM && LA192_0 <= FREQ)||LA192_0==GEN||(LA192_0 >= HASH && LA192_0 <= HASH_SYMBOL)||(LA192_0 >= IDENT && LA192_0 <= IMPORT_SYM)||(LA192_0 >= LEFTBOTTOM_SYM && LA192_0 <= LENGTH)||LA192_0==LESS_JS_STRING||LA192_0==LPAREN||(LA192_0 >= MEDIA_SYM && LA192_0 <= MOZ_DOCUMENT_SYM)||LA192_0==NAMESPACE_SYM||(LA192_0 >= NOT && LA192_0 <= NUMBER)||(LA192_0 >= PAGE_SYM && LA192_0 <= PERCENTAGE_SYMBOL)||LA192_0==PLUS||(LA192_0 >= REM && LA192_0 <= RIGHTTOP_SYM)||(LA192_0 >= SASS_CONTENT && LA192_0 <= SASS_DEBUG)||(LA192_0 >= SASS_EACH && LA192_0 <= SASS_EXTEND)||(LA192_0 >= SASS_FOR && LA192_0 <= SASS_MIXIN)||(LA192_0 >= SASS_RETURN && LA192_0 <= SASS_WHILE)||LA192_0==STRING||(LA192_0 >= TILDE && LA192_0 <= TOPRIGHT_SYM)||LA192_0==URI||LA192_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt192=1;
			}
			else if ( (LA192_0==RPAREN) ) {
				alt192=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 192, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(192);}

			switch (alt192) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:912:21: fnAttributes
					{
					dbg.location(912,21);
					pushFollow(FOLLOW_fnAttributes_in_function5059);
					fnAttributes();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:914:3: 
					{
					}
					break;

			}
			} finally {dbg.exitSubRule(192);}
			dbg.location(915,3);
			match(input,RPAREN,FOLLOW_RPAREN_in_function5090); if (state.failed) return;
			}

		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(RPAREN, SEMI, RBRACE));

		}

		finally {
			// do for sure before leaving
		}
		dbg.location(916, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "function");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "function"



	// $ANTLR start "functionName"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:922:1: functionName : ( IDENT COLON )? IDENT ( DOT IDENT )* ;
	public final void functionName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "functionName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(922, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:926:2: ( ( IDENT COLON )? IDENT ( DOT IDENT )* )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:927:9: ( IDENT COLON )? IDENT ( DOT IDENT )*
			{
			dbg.location(927,9);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:927:9: ( IDENT COLON )?
			int alt193=2;
			try { dbg.enterSubRule(193);
			try { dbg.enterDecision(193, decisionCanBacktrack[193]);

			int LA193_0 = input.LA(1);
			if ( (LA193_0==IDENT) ) {
				int LA193_1 = input.LA(2);
				if ( (LA193_1==COLON) ) {
					alt193=1;
				}
			}
			} finally {dbg.exitDecision(193);}

			switch (alt193) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:927:10: IDENT COLON
					{
					dbg.location(927,10);
					match(input,IDENT,FOLLOW_IDENT_in_functionName5142); if (state.failed) return;dbg.location(927,16);
					match(input,COLON,FOLLOW_COLON_in_functionName5144); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(193);}
			dbg.location(927,24);
			match(input,IDENT,FOLLOW_IDENT_in_functionName5148); if (state.failed) return;dbg.location(927,30);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:927:30: ( DOT IDENT )*
			try { dbg.enterSubRule(194);

			loop194:
			while (true) {
				int alt194=2;
				try { dbg.enterDecision(194, decisionCanBacktrack[194]);

				int LA194_0 = input.LA(1);
				if ( (LA194_0==DOT) ) {
					alt194=1;
				}

				} finally {dbg.exitDecision(194);}

				switch (alt194) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:927:31: DOT IDENT
					{
					dbg.location(927,31);
					match(input,DOT,FOLLOW_DOT_in_functionName5151); if (state.failed) return;dbg.location(927,35);
					match(input,IDENT,FOLLOW_IDENT_in_functionName5153); if (state.failed) return;
					}
					break;

				default :
					break loop194;
				}
			}
			} finally {dbg.exitSubRule(194);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(928, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "functionName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "functionName"



	// $ANTLR start "fnAttributes"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:930:1: fnAttributes : fnAttribute ( ( ws )? COMMA ( ws )? fnAttribute )* ( ws )? ;
	public final void fnAttributes() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fnAttributes");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(930, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:931:5: ( fnAttribute ( ( ws )? COMMA ( ws )? fnAttribute )* ( ws )? )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:932:5: fnAttribute ( ( ws )? COMMA ( ws )? fnAttribute )* ( ws )?
			{
			dbg.location(932,5);
			pushFollow(FOLLOW_fnAttribute_in_fnAttributes5177);
			fnAttribute();
			state._fsp--;
			if (state.failed) return;dbg.location(932,17);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:932:17: ( ( ws )? COMMA ( ws )? fnAttribute )*
			try { dbg.enterSubRule(197);

			loop197:
			while (true) {
				int alt197=2;
				try { dbg.enterDecision(197, decisionCanBacktrack[197]);

				try {
					isCyclicDecision = true;
					alt197 = dfa197.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(197);}

				switch (alt197) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:932:18: ( ws )? COMMA ( ws )? fnAttribute
					{
					dbg.location(932,18);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:932:18: ( ws )?
					int alt195=2;
					try { dbg.enterSubRule(195);
					try { dbg.enterDecision(195, decisionCanBacktrack[195]);

					int LA195_0 = input.LA(1);
					if ( (LA195_0==COMMENT||LA195_0==NL||LA195_0==WS) ) {
						alt195=1;
					}
					} finally {dbg.exitDecision(195);}

					switch (alt195) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:932:18: ws
							{
							dbg.location(932,18);
							pushFollow(FOLLOW_ws_in_fnAttributes5180);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(195);}
					dbg.location(932,22);
					match(input,COMMA,FOLLOW_COMMA_in_fnAttributes5183); if (state.failed) return;dbg.location(932,28);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:932:28: ( ws )?
					int alt196=2;
					try { dbg.enterSubRule(196);
					try { dbg.enterDecision(196, decisionCanBacktrack[196]);

					int LA196_0 = input.LA(1);
					if ( (LA196_0==COMMENT||LA196_0==NL||LA196_0==WS) ) {
						alt196=1;
					}
					} finally {dbg.exitDecision(196);}

					switch (alt196) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:932:28: ws
							{
							dbg.location(932,28);
							pushFollow(FOLLOW_ws_in_fnAttributes5185);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(196);}
					dbg.location(932,32);
					pushFollow(FOLLOW_fnAttribute_in_fnAttributes5188);
					fnAttribute();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop197;
				}
			}
			} finally {dbg.exitSubRule(197);}
			dbg.location(932,46);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:932:46: ( ws )?
			int alt198=2;
			try { dbg.enterSubRule(198);
			try { dbg.enterDecision(198, decisionCanBacktrack[198]);

			int LA198_0 = input.LA(1);
			if ( (LA198_0==COMMENT||LA198_0==NL||LA198_0==WS) ) {
				alt198=1;
			}
			} finally {dbg.exitDecision(198);}

			switch (alt198) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:932:46: ws
					{
					dbg.location(932,46);
					pushFollow(FOLLOW_ws_in_fnAttributes5192);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(198);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(933, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fnAttributes");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fnAttributes"



	// $ANTLR start "fnAttribute"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:935:1: fnAttribute : ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue |{...}? cp_expression | expression );
	public final void fnAttribute() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fnAttribute");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(935, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:936:2: ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue |{...}? cp_expression | expression )
			int alt201=3;
			try { dbg.enterDecision(201, decisionCanBacktrack[201]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA201_1 = input.LA(2);
				if ( (synpred31_Css3()) ) {
					alt201=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt201=2;
				}
				else if ( (true) ) {
					alt201=3;
				}

				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA201_2 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred31_Css3())) ) {
					alt201=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt201=2;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt201=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 201, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA201_3 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&synpred31_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt201=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt201=2;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt201=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 201, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case IMPORTANT_SYM:
			case LPAREN:
			case NOT:
				{
				alt201=2;
				}
				break;
			case MINUS:
			case PLUS:
				{
				int LA201_5 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt201=2;
				}
				else if ( (true) ) {
					alt201=3;
				}

				}
				break;
			case NUMBER:
				{
				int LA201_6 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt201=2;
				}
				else if ( (true) ) {
					alt201=3;
				}

				}
				break;
			case PERCENTAGE:
				{
				int LA201_7 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt201=2;
				}
				else if ( (true) ) {
					alt201=3;
				}

				}
				break;
			case LENGTH:
				{
				int LA201_8 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt201=2;
				}
				else if ( (true) ) {
					alt201=3;
				}

				}
				break;
			case EMS:
				{
				int LA201_9 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt201=2;
				}
				else if ( (true) ) {
					alt201=3;
				}

				}
				break;
			case REM:
				{
				int LA201_10 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt201=2;
				}
				else if ( (true) ) {
					alt201=3;
				}

				}
				break;
			case EXS:
				{
				int LA201_11 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt201=2;
				}
				else if ( (true) ) {
					alt201=3;
				}

				}
				break;
			case ANGLE:
				{
				int LA201_12 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt201=2;
				}
				else if ( (true) ) {
					alt201=3;
				}

				}
				break;
			case TIME:
				{
				int LA201_13 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt201=2;
				}
				else if ( (true) ) {
					alt201=3;
				}

				}
				break;
			case FREQ:
				{
				int LA201_14 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt201=2;
				}
				else if ( (true) ) {
					alt201=3;
				}

				}
				break;
			case RESOLUTION:
				{
				int LA201_15 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt201=2;
				}
				else if ( (true) ) {
					alt201=3;
				}

				}
				break;
			case DIMENSION:
				{
				int LA201_16 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt201=2;
				}
				else if ( (true) ) {
					alt201=3;
				}

				}
				break;
			case STRING:
				{
				int LA201_17 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt201=2;
				}
				else if ( (true) ) {
					alt201=3;
				}

				}
				break;
			case TILDE:
				{
				int LA201_18 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt201=2;
				}
				else if ( (true) ) {
					alt201=3;
				}

				}
				break;
			case LESS_JS_STRING:
				{
				int LA201_19 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt201=2;
				}
				else if ( (true) ) {
					alt201=3;
				}

				}
				break;
			case GEN:
				{
				int LA201_20 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt201=2;
				}
				else if ( (true) ) {
					alt201=3;
				}

				}
				break;
			case URI:
				{
				int LA201_21 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt201=2;
				}
				else if ( (true) ) {
					alt201=3;
				}

				}
				break;
			case HASH:
				{
				int LA201_22 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt201=2;
				}
				else if ( (true) ) {
					alt201=3;
				}

				}
				break;
			case HASH_SYMBOL:
				{
				int LA201_23 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt201=2;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt201=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 201, 23, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PERCENTAGE_SYMBOL:
				{
				int LA201_24 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt201=2;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt201=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 201, 24, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 201, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(201);}

			switch (alt201) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:937:9: ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue
					{
					dbg.location(937,46);
					pushFollow(FOLLOW_fnAttributeName_in_fnAttribute5229);
					fnAttributeName();
					state._fsp--;
					if (state.failed) return;dbg.location(937,62);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:937:62: ( ws )?
					int alt199=2;
					try { dbg.enterSubRule(199);
					try { dbg.enterDecision(199, decisionCanBacktrack[199]);

					int LA199_0 = input.LA(1);
					if ( (LA199_0==COMMENT||LA199_0==NL||LA199_0==WS) ) {
						alt199=1;
					}
					} finally {dbg.exitDecision(199);}

					switch (alt199) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:937:62: ws
							{
							dbg.location(937,62);
							pushFollow(FOLLOW_ws_in_fnAttribute5231);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(199);}
					dbg.location(937,66);
					if ( input.LA(1)==COLON||input.LA(1)==OPEQ ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(937,79);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:937:79: ( ws )?
					int alt200=2;
					try { dbg.enterSubRule(200);
					try { dbg.enterDecision(200, decisionCanBacktrack[200]);

					int LA200_0 = input.LA(1);
					if ( (LA200_0==COMMENT||LA200_0==NL||LA200_0==WS) ) {
						alt200=1;
					}
					} finally {dbg.exitDecision(200);}

					switch (alt200) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:937:79: ws
							{
							dbg.location(937,79);
							pushFollow(FOLLOW_ws_in_fnAttribute5240);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(200);}
					dbg.location(937,83);
					pushFollow(FOLLOW_fnAttributeValue_in_fnAttribute5243);
					fnAttributeValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:938:11: {...}? cp_expression
					{
					dbg.location(938,11);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "fnAttribute", "isCssPreprocessorSource()");
					}dbg.location(938,40);
					pushFollow(FOLLOW_cp_expression_in_fnAttribute5257);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:939:11: expression
					{
					dbg.location(939,11);
					pushFollow(FOLLOW_expression_in_fnAttribute5269);
					expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(940, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fnAttribute");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fnAttribute"



	// $ANTLR start "fnAttributeName"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:1: fnAttributeName : ( IDENT ( DOT IDENT )* |{...}? cp_variable );
	public final void fnAttributeName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fnAttributeName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(942, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:2: ( IDENT ( DOT IDENT )* |{...}? cp_variable )
			int alt203=2;
			try { dbg.enterDecision(203, decisionCanBacktrack[203]);

			int LA203_0 = input.LA(1);
			if ( (LA203_0==IDENT) ) {
				alt203=1;
			}
			else if ( (LA203_0==AT_IDENT||(LA203_0 >= BOTTOMCENTER_SYM && LA203_0 <= BOTTOMRIGHT_SYM)||LA203_0==CHARSET_SYM||LA203_0==COUNTER_STYLE_SYM||LA203_0==FONT_FACE_SYM||LA203_0==IMPORT_SYM||(LA203_0 >= LEFTBOTTOM_SYM && LA203_0 <= LEFTTOP_SYM)||LA203_0==MEDIA_SYM||LA203_0==MOZ_DOCUMENT_SYM||LA203_0==NAMESPACE_SYM||LA203_0==PAGE_SYM||(LA203_0 >= RIGHTBOTTOM_SYM && LA203_0 <= RIGHTTOP_SYM)||(LA203_0 >= SASS_CONTENT && LA203_0 <= SASS_DEBUG)||(LA203_0 >= SASS_EACH && LA203_0 <= SASS_EXTEND)||(LA203_0 >= SASS_FOR && LA203_0 <= SASS_MIXIN)||(LA203_0 >= SASS_RETURN && LA203_0 <= SASS_WHILE)||(LA203_0 >= TOPCENTER_SYM && LA203_0 <= TOPRIGHT_SYM)||LA203_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt203=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 203, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(203);}

			switch (alt203) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:944:13: IDENT ( DOT IDENT )*
					{
					dbg.location(944,13);
					match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName5292); if (state.failed) return;dbg.location(944,19);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:944:19: ( DOT IDENT )*
					try { dbg.enterSubRule(202);

					loop202:
					while (true) {
						int alt202=2;
						try { dbg.enterDecision(202, decisionCanBacktrack[202]);

						int LA202_0 = input.LA(1);
						if ( (LA202_0==DOT) ) {
							alt202=1;
						}

						} finally {dbg.exitDecision(202);}

						switch (alt202) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:944:20: DOT IDENT
							{
							dbg.location(944,20);
							match(input,DOT,FOLLOW_DOT_in_fnAttributeName5295); if (state.failed) return;dbg.location(944,24);
							match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName5297); if (state.failed) return;
							}
							break;

						default :
							break loop202;
						}
					}
					} finally {dbg.exitSubRule(202);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:945:15: {...}? cp_variable
					{
					dbg.location(945,15);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "fnAttributeName", "isCssPreprocessorSource()");
					}dbg.location(945,44);
					pushFollow(FOLLOW_cp_variable_in_fnAttributeName5317);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(946, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fnAttributeName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fnAttributeName"



	// $ANTLR start "fnAttributeValue"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:948:1: fnAttributeValue : ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )* |{...}? cp_math_expression );
	public final void fnAttributeValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fnAttributeValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(948, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:949:2: ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )* |{...}? cp_math_expression )
			int alt208=2;
			try { dbg.enterDecision(208, decisionCanBacktrack[208]);

			switch ( input.LA(1) ) {
			case MINUS:
			case PLUS:
				{
				int LA208_1 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt208=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt208=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 208, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case IDENT:
				{
				int LA208_2 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt208=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt208=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 208, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NUMBER:
				{
				int LA208_3 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt208=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt208=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 208, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PERCENTAGE:
				{
				int LA208_4 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt208=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt208=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 208, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LENGTH:
				{
				int LA208_5 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt208=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt208=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 208, 5, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EMS:
				{
				int LA208_6 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt208=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt208=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 208, 6, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case REM:
				{
				int LA208_7 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt208=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt208=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 208, 7, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EXS:
				{
				int LA208_8 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt208=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt208=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 208, 8, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ANGLE:
				{
				int LA208_9 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt208=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt208=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 208, 9, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TIME:
				{
				int LA208_10 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt208=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt208=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 208, 10, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case FREQ:
				{
				int LA208_11 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt208=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt208=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 208, 11, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case RESOLUTION:
				{
				int LA208_12 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt208=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt208=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 208, 12, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DIMENSION:
				{
				int LA208_13 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt208=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt208=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 208, 13, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case STRING:
				{
				int LA208_14 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt208=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt208=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 208, 14, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TILDE:
				{
				int LA208_15 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt208=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt208=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 208, 15, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LESS_JS_STRING:
				{
				int LA208_16 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt208=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt208=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 208, 16, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GEN:
				{
				int LA208_17 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt208=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt208=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 208, 17, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case URI:
				{
				int LA208_18 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt208=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt208=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 208, 18, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH:
				{
				int LA208_19 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt208=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt208=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 208, 19, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA208_20 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt208=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt208=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 208, 20, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA208_21 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt208=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt208=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 208, 21, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH_SYMBOL:
				{
				int LA208_22 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt208=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt208=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 208, 22, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PERCENTAGE_SYMBOL:
				{
				int LA208_23 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt208=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt208=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 208, 23, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case IMPORTANT_SYM:
			case LPAREN:
				{
				alt208=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 208, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(208);}

			switch (alt208) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:13: term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )*
					{
					dbg.location(950,13);
					pushFollow(FOLLOW_term_in_fnAttributeValue5340);
					term();
					state._fsp--;
					if (state.failed) return;dbg.location(950,18);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:18: ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )*
					try { dbg.enterSubRule(207);

					loop207:
					while (true) {
						int alt207=2;
						try { dbg.enterDecision(207, decisionCanBacktrack[207]);

						try {
							isCyclicDecision = true;
							alt207 = dfa207.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(207);}

						switch (alt207) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:20: ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term
							{
							dbg.location(950,71);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:71: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |)
							int alt206=3;
							try { dbg.enterSubRule(206);
							try { dbg.enterDecision(206, decisionCanBacktrack[206]);

							try {
								isCyclicDecision = true;
								alt206 = dfa206.predict(input);
							}
							catch (NoViableAltException nvae) {
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(206);}

							switch (alt206) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:73: ws
									{
									dbg.location(950,73);
									pushFollow(FOLLOW_ws_in_fnAttributeValue5372);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:78: ( ( ws )? SOLIDUS ( ws )? )
									{
									dbg.location(950,78);
									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:78: ( ( ws )? SOLIDUS ( ws )? )
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:79: ( ws )? SOLIDUS ( ws )?
									{
									dbg.location(950,79);
									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:79: ( ws )?
									int alt204=2;
									try { dbg.enterSubRule(204);
									try { dbg.enterDecision(204, decisionCanBacktrack[204]);

									int LA204_0 = input.LA(1);
									if ( (LA204_0==COMMENT||LA204_0==NL||LA204_0==WS) ) {
										alt204=1;
									}
									} finally {dbg.exitDecision(204);}

									switch (alt204) {
										case 1 :
											dbg.enterAlt(1);

											// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:79: ws
											{
											dbg.location(950,79);
											pushFollow(FOLLOW_ws_in_fnAttributeValue5377);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(204);}
									dbg.location(950,83);
									match(input,SOLIDUS,FOLLOW_SOLIDUS_in_fnAttributeValue5380); if (state.failed) return;dbg.location(950,91);
									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:91: ( ws )?
									int alt205=2;
									try { dbg.enterSubRule(205);
									try { dbg.enterDecision(205, decisionCanBacktrack[205]);

									int LA205_0 = input.LA(1);
									if ( (LA205_0==COMMENT||LA205_0==NL||LA205_0==WS) ) {
										alt205=1;
									}
									} finally {dbg.exitDecision(205);}

									switch (alt205) {
										case 1 :
											dbg.enterAlt(1);

											// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:91: ws
											{
											dbg.location(950,91);
											pushFollow(FOLLOW_ws_in_fnAttributeValue5382);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(205);}

									}

									}
									break;
								case 3 :
									dbg.enterAlt(3);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:111: 
									{
									}
									break;

							}
							} finally {dbg.exitSubRule(206);}
							dbg.location(950,113);
							pushFollow(FOLLOW_term_in_fnAttributeValue5391);
							term();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop207;
						}
					}
					} finally {dbg.exitSubRule(207);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:951:15: {...}? cp_math_expression
					{
					dbg.location(951,15);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "fnAttributeValue", "isCssPreprocessorSource()");
					}dbg.location(951,44);
					pushFollow(FOLLOW_cp_math_expression_in_fnAttributeValue5412);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(952, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fnAttributeValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fnAttributeValue"



	// $ANTLR start "hexColor"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:954:1: hexColor : HASH ;
	public final void hexColor() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "hexColor");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(954, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:955:5: ( HASH )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:955:7: HASH
			{
			dbg.location(955,7);
			match(input,HASH,FOLLOW_HASH_in_hexColor5426); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(956, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "hexColor");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "hexColor"



	// $ANTLR start "ws"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:958:1: ws : ( WS | NL | COMMENT )+ ;
	public final void ws() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "ws");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(958, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:959:5: ( ( WS | NL | COMMENT )+ )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:959:7: ( WS | NL | COMMENT )+
			{
			dbg.location(959,7);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:959:7: ( WS | NL | COMMENT )+
			int cnt209=0;
			try { dbg.enterSubRule(209);

			loop209:
			while (true) {
				int alt209=2;
				try { dbg.enterDecision(209, decisionCanBacktrack[209]);

				int LA209_0 = input.LA(1);
				if ( (LA209_0==COMMENT||LA209_0==NL||LA209_0==WS) ) {
					alt209=1;
				}

				} finally {dbg.exitDecision(209);}

				switch (alt209) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
					{
					dbg.location(959,7);
					if ( input.LA(1)==COMMENT||input.LA(1)==NL||input.LA(1)==WS ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;

				default :
					if ( cnt209 >= 1 ) break loop209;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(209, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt209++;
			}
			} finally {dbg.exitSubRule(209);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(960, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "ws");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "ws"



	// $ANTLR start "cp_variable_declaration"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:965:1: cp_variable_declaration : ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list |{...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ws )? SASS_DEFAULT )? );
	public final void cp_variable_declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_variable_declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(965, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:966:5: ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list |{...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ws )? SASS_DEFAULT )? )
			int alt216=2;
			try { dbg.enterDecision(216, decisionCanBacktrack[216]);

			int LA216_0 = input.LA(1);
			if ( (LA216_0==AT_IDENT||(LA216_0 >= BOTTOMCENTER_SYM && LA216_0 <= BOTTOMRIGHT_SYM)||LA216_0==CHARSET_SYM||LA216_0==COUNTER_STYLE_SYM||LA216_0==FONT_FACE_SYM||LA216_0==IMPORT_SYM||(LA216_0 >= LEFTBOTTOM_SYM && LA216_0 <= LEFTTOP_SYM)||LA216_0==MEDIA_SYM||LA216_0==MOZ_DOCUMENT_SYM||LA216_0==NAMESPACE_SYM||LA216_0==PAGE_SYM||(LA216_0 >= RIGHTBOTTOM_SYM && LA216_0 <= RIGHTTOP_SYM)||(LA216_0 >= SASS_CONTENT && LA216_0 <= SASS_DEBUG)||(LA216_0 >= SASS_EACH && LA216_0 <= SASS_EXTEND)||(LA216_0 >= SASS_FOR && LA216_0 <= SASS_MIXIN)||LA216_0==SASS_RETURN||(LA216_0 >= SASS_WARN && LA216_0 <= SASS_WHILE)||(LA216_0 >= TOPCENTER_SYM && LA216_0 <= TOPRIGHT_SYM)||LA216_0==WEBKIT_KEYFRAMES_SYM) ) {
				int LA216_1 = input.LA(2);
				if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt216=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt216=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 216, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA216_0==SASS_VAR) ) {
				int LA216_2 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt216=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt216=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 216, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 216, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(216);}

			switch (alt216) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:967:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list
					{
					dbg.location(967,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_variable_declaration", "isLessSource()");
					}dbg.location(967,27);
					pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration5486);
					cp_variable();
					state._fsp--;
					if (state.failed) return;dbg.location(967,39);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:967:39: ( ws )?
					int alt210=2;
					try { dbg.enterSubRule(210);
					try { dbg.enterDecision(210, decisionCanBacktrack[210]);

					int LA210_0 = input.LA(1);
					if ( (LA210_0==COMMENT||LA210_0==NL||LA210_0==WS) ) {
						alt210=1;
					}
					} finally {dbg.exitDecision(210);}

					switch (alt210) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:967:39: ws
							{
							dbg.location(967,39);
							pushFollow(FOLLOW_ws_in_cp_variable_declaration5488);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(210);}
					dbg.location(967,43);
					match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration5491); if (state.failed) return;dbg.location(967,49);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:967:49: ( ws )?
					int alt211=2;
					try { dbg.enterSubRule(211);
					try { dbg.enterDecision(211, decisionCanBacktrack[211]);

					int LA211_0 = input.LA(1);
					if ( (LA211_0==COMMENT||LA211_0==NL||LA211_0==WS) ) {
						alt211=1;
					}
					} finally {dbg.exitDecision(211);}

					switch (alt211) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:967:49: ws
							{
							dbg.location(967,49);
							pushFollow(FOLLOW_ws_in_cp_variable_declaration5493);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(211);}
					dbg.location(967,53);
					pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration5496);
					cp_expression_list();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:969:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ws )? SASS_DEFAULT )?
					{
					dbg.location(969,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_variable_declaration", "isScssSource()");
					}dbg.location(969,27);
					pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration5518);
					cp_variable();
					state._fsp--;
					if (state.failed) return;dbg.location(969,39);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:969:39: ( ws )?
					int alt212=2;
					try { dbg.enterSubRule(212);
					try { dbg.enterDecision(212, decisionCanBacktrack[212]);

					int LA212_0 = input.LA(1);
					if ( (LA212_0==COMMENT||LA212_0==NL||LA212_0==WS) ) {
						alt212=1;
					}
					} finally {dbg.exitDecision(212);}

					switch (alt212) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:969:39: ws
							{
							dbg.location(969,39);
							pushFollow(FOLLOW_ws_in_cp_variable_declaration5520);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(212);}
					dbg.location(969,43);
					match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration5523); if (state.failed) return;dbg.location(969,49);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:969:49: ( ws )?
					int alt213=2;
					try { dbg.enterSubRule(213);
					try { dbg.enterDecision(213, decisionCanBacktrack[213]);

					int LA213_0 = input.LA(1);
					if ( (LA213_0==COMMENT||LA213_0==NL||LA213_0==WS) ) {
						alt213=1;
					}
					} finally {dbg.exitDecision(213);}

					switch (alt213) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:969:49: ws
							{
							dbg.location(969,49);
							pushFollow(FOLLOW_ws_in_cp_variable_declaration5525);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(213);}
					dbg.location(969,53);
					pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration5528);
					cp_expression_list();
					state._fsp--;
					if (state.failed) return;dbg.location(969,72);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:969:72: ( ( ws )? SASS_DEFAULT )?
					int alt215=2;
					try { dbg.enterSubRule(215);
					try { dbg.enterDecision(215, decisionCanBacktrack[215]);

					try {
						isCyclicDecision = true;
						alt215 = dfa215.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(215);}

					switch (alt215) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:969:73: ( ws )? SASS_DEFAULT
							{
							dbg.location(969,73);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:969:73: ( ws )?
							int alt214=2;
							try { dbg.enterSubRule(214);
							try { dbg.enterDecision(214, decisionCanBacktrack[214]);

							int LA214_0 = input.LA(1);
							if ( (LA214_0==COMMENT||LA214_0==NL||LA214_0==WS) ) {
								alt214=1;
							}
							} finally {dbg.exitDecision(214);}

							switch (alt214) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:969:73: ws
									{
									dbg.location(969,73);
									pushFollow(FOLLOW_ws_in_cp_variable_declaration5531);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(214);}
							dbg.location(969,77);
							match(input,SASS_DEFAULT,FOLLOW_SASS_DEFAULT_in_cp_variable_declaration5534); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(215);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(970, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_variable_declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_variable_declaration"



	// $ANTLR start "cp_variable"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:973:1: cp_variable : ({...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE ) |{...}? ( SASS_VAR ) );
	public final void cp_variable() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_variable");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(973, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:974:5: ({...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE ) |{...}? ( SASS_VAR ) )
			int alt217=2;
			try { dbg.enterDecision(217, decisionCanBacktrack[217]);

			int LA217_0 = input.LA(1);
			if ( (LA217_0==AT_IDENT||(LA217_0 >= BOTTOMCENTER_SYM && LA217_0 <= BOTTOMRIGHT_SYM)||LA217_0==CHARSET_SYM||LA217_0==COUNTER_STYLE_SYM||LA217_0==FONT_FACE_SYM||LA217_0==IMPORT_SYM||(LA217_0 >= LEFTBOTTOM_SYM && LA217_0 <= LEFTTOP_SYM)||LA217_0==MEDIA_SYM||LA217_0==MOZ_DOCUMENT_SYM||LA217_0==NAMESPACE_SYM||LA217_0==PAGE_SYM||(LA217_0 >= RIGHTBOTTOM_SYM && LA217_0 <= RIGHTTOP_SYM)||(LA217_0 >= SASS_CONTENT && LA217_0 <= SASS_DEBUG)||(LA217_0 >= SASS_EACH && LA217_0 <= SASS_EXTEND)||(LA217_0 >= SASS_FOR && LA217_0 <= SASS_MIXIN)||LA217_0==SASS_RETURN||(LA217_0 >= SASS_WARN && LA217_0 <= SASS_WHILE)||(LA217_0 >= TOPCENTER_SYM && LA217_0 <= TOPRIGHT_SYM)||LA217_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt217=1;
			}
			else if ( (LA217_0==SASS_VAR) ) {
				alt217=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 217, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(217);}

			switch (alt217) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:976:9: {...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE )
					{
					dbg.location(976,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_variable", "isLessSource()");
					}dbg.location(976,27);
					if ( input.LA(1)==AT_IDENT||(input.LA(1) >= BOTTOMCENTER_SYM && input.LA(1) <= BOTTOMRIGHT_SYM)||input.LA(1)==CHARSET_SYM||input.LA(1)==COUNTER_STYLE_SYM||input.LA(1)==FONT_FACE_SYM||input.LA(1)==IMPORT_SYM||(input.LA(1) >= LEFTBOTTOM_SYM && input.LA(1) <= LEFTTOP_SYM)||input.LA(1)==MEDIA_SYM||input.LA(1)==MOZ_DOCUMENT_SYM||input.LA(1)==NAMESPACE_SYM||input.LA(1)==PAGE_SYM||(input.LA(1) >= RIGHTBOTTOM_SYM && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= SASS_CONTENT && input.LA(1) <= SASS_DEBUG)||(input.LA(1) >= SASS_EACH && input.LA(1) <= SASS_EXTEND)||(input.LA(1) >= SASS_FOR && input.LA(1) <= SASS_MIXIN)||input.LA(1)==SASS_RETURN||(input.LA(1) >= SASS_WARN && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= TOPCENTER_SYM && input.LA(1) <= TOPRIGHT_SYM)||input.LA(1)==WEBKIT_KEYFRAMES_SYM ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:978:9: {...}? ( SASS_VAR )
					{
					dbg.location(978,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_variable", "isScssSource()");
					}dbg.location(978,27);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:978:27: ( SASS_VAR )
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:978:29: SASS_VAR
					{
					dbg.location(978,29);
					match(input,SASS_VAR,FOLLOW_SASS_VAR_in_cp_variable5754); if (state.failed) return;
					}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(979, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_variable");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_variable"



	// $ANTLR start "cp_expression_list"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:982:1: cp_expression_list : cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )* ;
	public final void cp_expression_list() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_expression_list");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(982, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:983:5: ( cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )* )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:984:5: cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*
			{
			dbg.location(984,5);
			pushFollow(FOLLOW_cp_expression_in_cp_expression_list5778);
			cp_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(985,5);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:5: ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*
			try { dbg.enterSubRule(220);

			loop220:
			while (true) {
				int alt220=2;
				try { dbg.enterDecision(220, decisionCanBacktrack[220]);

				int LA220_0 = input.LA(1);
				if ( (LA220_0==COMMENT||LA220_0==NL||LA220_0==WS) ) {
					int LA220_1 = input.LA(2);
					if ( (synpred33_Css3()) ) {
						alt220=1;
					}

				}
				else if ( (LA220_0==COMMA) ) {
					int LA220_31 = input.LA(2);
					if ( (synpred33_Css3()) ) {
						alt220=1;
					}

				}

				} finally {dbg.exitDecision(220);}

				switch (alt220) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:6: ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression
					{
					dbg.location(985,37);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:37: ( ws )?
					int alt218=2;
					try { dbg.enterSubRule(218);
					try { dbg.enterDecision(218, decisionCanBacktrack[218]);

					int LA218_0 = input.LA(1);
					if ( (LA218_0==COMMENT||LA218_0==NL||LA218_0==WS) ) {
						alt218=1;
					}
					} finally {dbg.exitDecision(218);}

					switch (alt218) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:37: ws
							{
							dbg.location(985,37);
							pushFollow(FOLLOW_ws_in_cp_expression_list5797);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(218);}
					dbg.location(985,41);
					match(input,COMMA,FOLLOW_COMMA_in_cp_expression_list5800); if (state.failed) return;dbg.location(985,47);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:47: ( ws )?
					int alt219=2;
					try { dbg.enterSubRule(219);
					try { dbg.enterDecision(219, decisionCanBacktrack[219]);

					int LA219_0 = input.LA(1);
					if ( (LA219_0==COMMENT||LA219_0==NL||LA219_0==WS) ) {
						alt219=1;
					}
					} finally {dbg.exitDecision(219);}

					switch (alt219) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:47: ws
							{
							dbg.location(985,47);
							pushFollow(FOLLOW_ws_in_cp_expression_list5802);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(219);}
					dbg.location(985,51);
					pushFollow(FOLLOW_cp_expression_in_cp_expression_list5805);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop220;
				}
			}
			} finally {dbg.exitSubRule(220);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(986, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_expression_list");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_expression_list"



	// $ANTLR start "cp_expression"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:1: cp_expression : cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* ;
	public final void cp_expression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_expression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(998, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:999:5: ( cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1000:5: cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*
			{
			dbg.location(1000,5);
			pushFollow(FOLLOW_cp_expression_atom_in_cp_expression5838);
			cp_expression_atom();
			state._fsp--;
			if (state.failed) return;dbg.location(1001,5);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1001:5: ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*
			try { dbg.enterSubRule(224);

			loop224:
			while (true) {
				int alt224=3;
				try { dbg.enterDecision(224, decisionCanBacktrack[224]);

				try {
					isCyclicDecision = true;
					alt224 = dfa224.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(224);}

				switch (alt224) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1002:9: ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom
					{
					dbg.location(1002,39);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1002:39: ( ( ws )? cp_expression_operator ( ws )? )
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1002:40: ( ws )? cp_expression_operator ( ws )?
					{
					dbg.location(1002,40);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1002:40: ( ws )?
					int alt221=2;
					try { dbg.enterSubRule(221);
					try { dbg.enterDecision(221, decisionCanBacktrack[221]);

					int LA221_0 = input.LA(1);
					if ( (LA221_0==COMMENT||LA221_0==NL||LA221_0==WS) ) {
						alt221=1;
					}
					} finally {dbg.exitDecision(221);}

					switch (alt221) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1002:40: ws
							{
							dbg.location(1002,40);
							pushFollow(FOLLOW_ws_in_cp_expression5862);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(221);}
					dbg.location(1002,44);
					pushFollow(FOLLOW_cp_expression_operator_in_cp_expression5865);
					cp_expression_operator();
					state._fsp--;
					if (state.failed) return;dbg.location(1002,67);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1002:67: ( ws )?
					int alt222=2;
					try { dbg.enterSubRule(222);
					try { dbg.enterDecision(222, decisionCanBacktrack[222]);

					int LA222_0 = input.LA(1);
					if ( (LA222_0==COMMENT||LA222_0==NL||LA222_0==WS) ) {
						alt222=1;
					}
					} finally {dbg.exitDecision(222);}

					switch (alt222) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1002:67: ws
							{
							dbg.location(1002,67);
							pushFollow(FOLLOW_ws_in_cp_expression5867);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(222);}

					}
					dbg.location(1002,72);
					pushFollow(FOLLOW_cp_expression_atom_in_cp_expression5871);
					cp_expression_atom();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1003:11: ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom
					{
					dbg.location(1003,37);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1003:37: ( ws )?
					int alt223=2;
					try { dbg.enterSubRule(223);
					try { dbg.enterDecision(223, decisionCanBacktrack[223]);

					int LA223_0 = input.LA(1);
					if ( (LA223_0==COMMENT||LA223_0==NL||LA223_0==WS) ) {
						alt223=1;
					}
					} finally {dbg.exitDecision(223);}

					switch (alt223) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1003:37: ws
							{
							dbg.location(1003,37);
							pushFollow(FOLLOW_ws_in_cp_expression5890);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(223);}
					dbg.location(1003,41);
					pushFollow(FOLLOW_cp_expression_atom_in_cp_expression5893);
					cp_expression_atom();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop224;
				}
			}
			} finally {dbg.exitSubRule(224);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1005, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_expression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_expression"



	// $ANTLR start "cp_expression_operator"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1007:1: cp_expression_operator : ( OR | AND | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ );
	public final void cp_expression_operator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_expression_operator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1007, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1008:5: ( OR | AND | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(1008,5);
			if ( input.LA(1)==AND||(input.LA(1) >= CP_EQ && input.LA(1) <= CP_NOT_EQ)||(input.LA(1) >= GREATER && input.LA(1) <= GREATER_OR_EQ)||input.LA(1)==LESS||input.LA(1)==LESS_OR_EQ||input.LA(1)==OR ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1010, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_expression_operator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_expression_operator"



	// $ANTLR start "cp_expression_atom"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1012:1: cp_expression_atom : ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN ) ;
	public final void cp_expression_atom() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_expression_atom");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1012, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1013:5: ( ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN ) )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:9: ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN )
			{
			dbg.location(1014,9);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:9: ( NOT ( ws )? )?
			int alt226=2;
			try { dbg.enterSubRule(226);
			try { dbg.enterDecision(226, decisionCanBacktrack[226]);

			int LA226_0 = input.LA(1);
			if ( (LA226_0==NOT) ) {
				alt226=1;
			}
			} finally {dbg.exitDecision(226);}

			switch (alt226) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:10: NOT ( ws )?
					{
					dbg.location(1014,10);
					match(input,NOT,FOLLOW_NOT_in_cp_expression_atom5975); if (state.failed) return;dbg.location(1014,14);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:14: ( ws )?
					int alt225=2;
					try { dbg.enterSubRule(225);
					try { dbg.enterDecision(225, decisionCanBacktrack[225]);

					int LA225_0 = input.LA(1);
					if ( (LA225_0==COMMENT||LA225_0==NL||LA225_0==WS) ) {
						alt225=1;
					}
					} finally {dbg.exitDecision(225);}

					switch (alt225) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1014:14: ws
							{
							dbg.location(1014,14);
							pushFollow(FOLLOW_ws_in_cp_expression_atom5977);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(225);}

					}
					break;

			}
			} finally {dbg.exitSubRule(226);}
			dbg.location(1015,9);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1015:9: ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN )
			int alt230=2;
			try { dbg.enterSubRule(230);
			try { dbg.enterDecision(230, decisionCanBacktrack[230]);

			int LA230_0 = input.LA(1);
			if ( (LA230_0==MINUS||LA230_0==PLUS) && (synpred36_Css3())) {
				alt230=1;
			}
			else if ( (LA230_0==IDENT) && (synpred36_Css3())) {
				alt230=1;
			}
			else if ( (LA230_0==NUMBER) && (synpred36_Css3())) {
				alt230=1;
			}
			else if ( (LA230_0==PERCENTAGE) && (synpred36_Css3())) {
				alt230=1;
			}
			else if ( (LA230_0==LENGTH) && (synpred36_Css3())) {
				alt230=1;
			}
			else if ( (LA230_0==EMS) && (synpred36_Css3())) {
				alt230=1;
			}
			else if ( (LA230_0==REM) && (synpred36_Css3())) {
				alt230=1;
			}
			else if ( (LA230_0==EXS) && (synpred36_Css3())) {
				alt230=1;
			}
			else if ( (LA230_0==ANGLE) && (synpred36_Css3())) {
				alt230=1;
			}
			else if ( (LA230_0==TIME) && (synpred36_Css3())) {
				alt230=1;
			}
			else if ( (LA230_0==FREQ) && (synpred36_Css3())) {
				alt230=1;
			}
			else if ( (LA230_0==RESOLUTION) && (synpred36_Css3())) {
				alt230=1;
			}
			else if ( (LA230_0==DIMENSION) && (synpred36_Css3())) {
				alt230=1;
			}
			else if ( (LA230_0==STRING) && (synpred36_Css3())) {
				alt230=1;
			}
			else if ( (LA230_0==TILDE) && (synpred36_Css3())) {
				alt230=1;
			}
			else if ( (LA230_0==LESS_JS_STRING) && (synpred36_Css3())) {
				alt230=1;
			}
			else if ( (LA230_0==GEN) && (synpred36_Css3())) {
				alt230=1;
			}
			else if ( (LA230_0==URI) && (synpred36_Css3())) {
				alt230=1;
			}
			else if ( (LA230_0==HASH) && (synpred36_Css3())) {
				alt230=1;
			}
			else if ( (LA230_0==AT_IDENT||(LA230_0 >= BOTTOMCENTER_SYM && LA230_0 <= BOTTOMRIGHT_SYM)||LA230_0==CHARSET_SYM||LA230_0==COUNTER_STYLE_SYM||LA230_0==FONT_FACE_SYM||LA230_0==IMPORT_SYM||(LA230_0 >= LEFTBOTTOM_SYM && LA230_0 <= LEFTTOP_SYM)||LA230_0==MEDIA_SYM||LA230_0==MOZ_DOCUMENT_SYM||LA230_0==NAMESPACE_SYM||LA230_0==PAGE_SYM||(LA230_0 >= RIGHTBOTTOM_SYM && LA230_0 <= RIGHTTOP_SYM)||(LA230_0 >= SASS_CONTENT && LA230_0 <= SASS_DEBUG)||(LA230_0 >= SASS_EACH && LA230_0 <= SASS_EXTEND)||(LA230_0 >= SASS_FOR && LA230_0 <= SASS_MIXIN)||LA230_0==SASS_RETURN||(LA230_0 >= SASS_WARN && LA230_0 <= SASS_WHILE)||(LA230_0 >= TOPCENTER_SYM && LA230_0 <= TOPRIGHT_SYM)||LA230_0==WEBKIT_KEYFRAMES_SYM) && (synpred36_Css3())) {
				alt230=1;
			}
			else if ( (LA230_0==SASS_VAR) && (synpred36_Css3())) {
				alt230=1;
			}
			else if ( (LA230_0==HASH_SYMBOL) && (synpred36_Css3())) {
				alt230=1;
			}
			else if ( (LA230_0==PERCENTAGE_SYMBOL) && (synpred36_Css3())) {
				alt230=1;
			}
			else if ( (LA230_0==IMPORTANT_SYM) && (synpred36_Css3())) {
				alt230=1;
			}
			else if ( (LA230_0==LPAREN) ) {
				int LA230_25 = input.LA(2);
				if ( (synpred36_Css3()) ) {
					alt230=1;
				}
				else if ( (true) ) {
					alt230=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 230, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(230);}

			switch (alt230) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1016:13: ( cp_math_expression )=> cp_math_expression
					{
					dbg.location(1016,35);
					pushFollow(FOLLOW_cp_math_expression_in_cp_expression_atom6008);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1017:15: LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN
					{
					dbg.location(1017,15);
					match(input,LPAREN,FOLLOW_LPAREN_in_cp_expression_atom6024); if (state.failed) return;dbg.location(1017,22);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1017:22: ( ws )?
					int alt227=2;
					try { dbg.enterSubRule(227);
					try { dbg.enterDecision(227, decisionCanBacktrack[227]);

					int LA227_0 = input.LA(1);
					if ( (LA227_0==COMMENT||LA227_0==NL||LA227_0==WS) ) {
						alt227=1;
					}
					} finally {dbg.exitDecision(227);}

					switch (alt227) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1017:22: ws
							{
							dbg.location(1017,22);
							pushFollow(FOLLOW_ws_in_cp_expression_atom6026);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(227);}
					dbg.location(1017,26);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1017:26: ( cp_expression_list ( ws )? )?
					int alt229=2;
					try { dbg.enterSubRule(229);
					try { dbg.enterDecision(229, decisionCanBacktrack[229]);

					int LA229_0 = input.LA(1);
					if ( ((LA229_0 >= ANGLE && LA229_0 <= AT_IDENT)||(LA229_0 >= BOTTOMCENTER_SYM && LA229_0 <= BOTTOMRIGHT_SYM)||LA229_0==CHARSET_SYM||LA229_0==COUNTER_STYLE_SYM||LA229_0==DIMENSION||LA229_0==EMS||LA229_0==EXS||(LA229_0 >= FONT_FACE_SYM && LA229_0 <= FREQ)||LA229_0==GEN||(LA229_0 >= HASH && LA229_0 <= HASH_SYMBOL)||(LA229_0 >= IDENT && LA229_0 <= IMPORT_SYM)||(LA229_0 >= LEFTBOTTOM_SYM && LA229_0 <= LENGTH)||LA229_0==LESS_JS_STRING||LA229_0==LPAREN||(LA229_0 >= MEDIA_SYM && LA229_0 <= MOZ_DOCUMENT_SYM)||LA229_0==NAMESPACE_SYM||(LA229_0 >= NOT && LA229_0 <= NUMBER)||(LA229_0 >= PAGE_SYM && LA229_0 <= PERCENTAGE_SYMBOL)||LA229_0==PLUS||(LA229_0 >= REM && LA229_0 <= RIGHTTOP_SYM)||(LA229_0 >= SASS_CONTENT && LA229_0 <= SASS_DEBUG)||(LA229_0 >= SASS_EACH && LA229_0 <= SASS_EXTEND)||(LA229_0 >= SASS_FOR && LA229_0 <= SASS_MIXIN)||(LA229_0 >= SASS_RETURN && LA229_0 <= SASS_WHILE)||LA229_0==STRING||(LA229_0 >= TILDE && LA229_0 <= TOPRIGHT_SYM)||LA229_0==URI||LA229_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt229=1;
					}
					} finally {dbg.exitDecision(229);}

					switch (alt229) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1017:27: cp_expression_list ( ws )?
							{
							dbg.location(1017,27);
							pushFollow(FOLLOW_cp_expression_list_in_cp_expression_atom6030);
							cp_expression_list();
							state._fsp--;
							if (state.failed) return;dbg.location(1017,46);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1017:46: ( ws )?
							int alt228=2;
							try { dbg.enterSubRule(228);
							try { dbg.enterDecision(228, decisionCanBacktrack[228]);

							int LA228_0 = input.LA(1);
							if ( (LA228_0==COMMENT||LA228_0==NL||LA228_0==WS) ) {
								alt228=1;
							}
							} finally {dbg.exitDecision(228);}

							switch (alt228) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1017:46: ws
									{
									dbg.location(1017,46);
									pushFollow(FOLLOW_ws_in_cp_expression_atom6032);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(228);}

							}
							break;

					}
					} finally {dbg.exitSubRule(229);}
					dbg.location(1017,52);
					match(input,RPAREN,FOLLOW_RPAREN_in_cp_expression_atom6037); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(230);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1019, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_expression_atom");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_expression_atom"



	// $ANTLR start "cp_math_expressions"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1022:1: cp_math_expressions : cp_math_expression ( ws cp_math_expression )* ;
	public final void cp_math_expressions() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_math_expressions");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1022, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1023:5: ( cp_math_expression ( ws cp_math_expression )* )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1024:5: cp_math_expression ( ws cp_math_expression )*
			{
			dbg.location(1024,5);
			pushFollow(FOLLOW_cp_math_expression_in_cp_math_expressions6069);
			cp_math_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1025,5);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:5: ( ws cp_math_expression )*
			try { dbg.enterSubRule(231);

			loop231:
			while (true) {
				int alt231=2;
				try { dbg.enterDecision(231, decisionCanBacktrack[231]);

				int LA231_0 = input.LA(1);
				if ( (LA231_0==COMMENT||LA231_0==NL||LA231_0==WS) ) {
					alt231=1;
				}

				} finally {dbg.exitDecision(231);}

				switch (alt231) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:6: ws cp_math_expression
					{
					dbg.location(1025,6);
					pushFollow(FOLLOW_ws_in_cp_math_expressions6076);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(1025,9);
					pushFollow(FOLLOW_cp_math_expression_in_cp_math_expressions6078);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop231;
				}
			}
			} finally {dbg.exitSubRule(231);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1026, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_math_expressions");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_math_expressions"



	// $ANTLR start "cp_math_expression"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1040:1: cp_math_expression : cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )* ;
	public final void cp_math_expression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_math_expression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1040, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:5: ( cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )* )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:10: cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*
			{
			dbg.location(1041,10);
			pushFollow(FOLLOW_cp_math_expression_atom_in_cp_math_expression6112);
			cp_math_expression_atom();
			state._fsp--;
			if (state.failed) return;dbg.location(1042,10);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1042:10: ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*
			try { dbg.enterSubRule(234);

			loop234:
			while (true) {
				int alt234=2;
				try { dbg.enterDecision(234, decisionCanBacktrack[234]);

				try {
					isCyclicDecision = true;
					alt234 = dfa234.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(234);}

				switch (alt234) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:13: ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom
					{
					dbg.location(1043,48);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:48: ( ws )?
					int alt232=2;
					try { dbg.enterSubRule(232);
					try { dbg.enterDecision(232, decisionCanBacktrack[232]);

					int LA232_0 = input.LA(1);
					if ( (LA232_0==COMMENT||LA232_0==NL||LA232_0==WS) ) {
						alt232=1;
					}
					} finally {dbg.exitDecision(232);}

					switch (alt232) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:48: ws
							{
							dbg.location(1043,48);
							pushFollow(FOLLOW_ws_in_cp_math_expression6154);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(232);}
					dbg.location(1043,52);
					if ( input.LA(1)==MINUS||input.LA(1)==PLUS||(input.LA(1) >= SOLIDUS && input.LA(1) <= STAR) ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(1043,78);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:78: ( ws )?
					int alt233=2;
					try { dbg.enterSubRule(233);
					try { dbg.enterDecision(233, decisionCanBacktrack[233]);

					int LA233_0 = input.LA(1);
					if ( (LA233_0==COMMENT||LA233_0==NL||LA233_0==WS) ) {
						alt233=1;
					}
					} finally {dbg.exitDecision(233);}

					switch (alt233) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:78: ws
							{
							dbg.location(1043,78);
							pushFollow(FOLLOW_ws_in_cp_math_expression6167);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(233);}
					dbg.location(1043,82);
					pushFollow(FOLLOW_cp_math_expression_atom_in_cp_math_expression6170);
					cp_math_expression_atom();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop234;
				}
			}
			} finally {dbg.exitSubRule(234);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1045, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_math_expression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_math_expression"



	// $ANTLR start "cp_math_expression_atom"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1047:1: cp_math_expression_atom : ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN );
	public final void cp_math_expression_atom() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_math_expression_atom");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1047, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1048:5: ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN )
			int alt239=3;
			try { dbg.enterDecision(239, decisionCanBacktrack[239]);

			try {
				isCyclicDecision = true;
				alt239 = dfa239.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(239);}

			switch (alt239) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1049:5: term
					{
					dbg.location(1049,5);
					pushFollow(FOLLOW_term_in_cp_math_expression_atom6203);
					term();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1050:7: IMPORTANT_SYM
					{
					dbg.location(1050,7);
					match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_cp_math_expression_atom6211); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1051:7: ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN
					{
					dbg.location(1051,7);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1051:7: ( unaryOperator ( ws )? )?
					int alt236=2;
					try { dbg.enterSubRule(236);
					try { dbg.enterDecision(236, decisionCanBacktrack[236]);

					int LA236_0 = input.LA(1);
					if ( (LA236_0==MINUS||LA236_0==PLUS) ) {
						alt236=1;
					}
					} finally {dbg.exitDecision(236);}

					switch (alt236) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1051:9: unaryOperator ( ws )?
							{
							dbg.location(1051,9);
							pushFollow(FOLLOW_unaryOperator_in_cp_math_expression_atom6222);
							unaryOperator();
							state._fsp--;
							if (state.failed) return;dbg.location(1051,23);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1051:23: ( ws )?
							int alt235=2;
							try { dbg.enterSubRule(235);
							try { dbg.enterDecision(235, decisionCanBacktrack[235]);

							int LA235_0 = input.LA(1);
							if ( (LA235_0==COMMENT||LA235_0==NL||LA235_0==WS) ) {
								alt235=1;
							}
							} finally {dbg.exitDecision(235);}

							switch (alt235) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1051:23: ws
									{
									dbg.location(1051,23);
									pushFollow(FOLLOW_ws_in_cp_math_expression_atom6224);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(235);}

							}
							break;

					}
					} finally {dbg.exitSubRule(236);}
					dbg.location(1051,30);
					match(input,LPAREN,FOLLOW_LPAREN_in_cp_math_expression_atom6230); if (state.failed) return;dbg.location(1051,37);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1051:37: ( ws )?
					int alt237=2;
					try { dbg.enterSubRule(237);
					try { dbg.enterDecision(237, decisionCanBacktrack[237]);

					int LA237_0 = input.LA(1);
					if ( (LA237_0==COMMENT||LA237_0==NL||LA237_0==WS) ) {
						alt237=1;
					}
					} finally {dbg.exitDecision(237);}

					switch (alt237) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1051:37: ws
							{
							dbg.location(1051,37);
							pushFollow(FOLLOW_ws_in_cp_math_expression_atom6232);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(237);}
					dbg.location(1051,41);
					pushFollow(FOLLOW_cp_math_expression_in_cp_math_expression_atom6235);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;dbg.location(1051,60);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1051:60: ( ws )?
					int alt238=2;
					try { dbg.enterSubRule(238);
					try { dbg.enterDecision(238, decisionCanBacktrack[238]);

					int LA238_0 = input.LA(1);
					if ( (LA238_0==COMMENT||LA238_0==NL||LA238_0==WS) ) {
						alt238=1;
					}
					} finally {dbg.exitDecision(238);}

					switch (alt238) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1051:60: ws
							{
							dbg.location(1051,60);
							pushFollow(FOLLOW_ws_in_cp_math_expression_atom6237);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(238);}
					dbg.location(1051,64);
					match(input,RPAREN,FOLLOW_RPAREN_in_cp_math_expression_atom6240); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1052, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_math_expression_atom");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_math_expression_atom"



	// $ANTLR start "cp_mixin_declaration"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1060:1: cp_mixin_declaration : ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? |{...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block ;
	public final void cp_mixin_declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1060, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1061:5: ( ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? |{...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1062:5: ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? |{...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block
			{
			dbg.location(1062,5);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1062:5: ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? |{...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? )
			int alt249=2;
			try { dbg.enterSubRule(249);
			try { dbg.enterDecision(249, decisionCanBacktrack[249]);

			int LA249_0 = input.LA(1);
			if ( (LA249_0==DOT) ) {
				alt249=1;
			}
			else if ( (LA249_0==SASS_MIXIN) ) {
				alt249=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 249, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(249);}

			switch (alt249) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1063:9: {...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )?
					{
					dbg.location(1063,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_mixin_declaration", "isLessSource()");
					}dbg.location(1063,27);
					match(input,DOT,FOLLOW_DOT_in_cp_mixin_declaration6279); if (state.failed) return;dbg.location(1063,31);
					pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration6281);
					cp_mixin_name();
					state._fsp--;
					if (state.failed) return;dbg.location(1063,45);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1063:45: ( ws )?
					int alt240=2;
					try { dbg.enterSubRule(240);
					try { dbg.enterDecision(240, decisionCanBacktrack[240]);

					int LA240_0 = input.LA(1);
					if ( (LA240_0==COMMENT||LA240_0==NL||LA240_0==WS) ) {
						alt240=1;
					}
					} finally {dbg.exitDecision(240);}

					switch (alt240) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1063:45: ws
							{
							dbg.location(1063,45);
							pushFollow(FOLLOW_ws_in_cp_mixin_declaration6283);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(240);}
					dbg.location(1063,49);
					match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration6286); if (state.failed) return;dbg.location(1063,56);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1063:56: ( ws )?
					int alt241=2;
					try { dbg.enterSubRule(241);
					try { dbg.enterDecision(241, decisionCanBacktrack[241]);

					int LA241_0 = input.LA(1);
					if ( (LA241_0==COMMENT||LA241_0==NL||LA241_0==WS) ) {
						alt241=1;
					}
					} finally {dbg.exitDecision(241);}

					switch (alt241) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1063:56: ws
							{
							dbg.location(1063,56);
							pushFollow(FOLLOW_ws_in_cp_mixin_declaration6288);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(241);}
					dbg.location(1063,60);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1063:60: ( cp_args_list )?
					int alt242=2;
					try { dbg.enterSubRule(242);
					try { dbg.enterDecision(242, decisionCanBacktrack[242]);

					int LA242_0 = input.LA(1);
					if ( (LA242_0==AT_IDENT||(LA242_0 >= BOTTOMCENTER_SYM && LA242_0 <= BOTTOMRIGHT_SYM)||LA242_0==CHARSET_SYM||(LA242_0 >= COUNTER_STYLE_SYM && LA242_0 <= CP_DOTS)||LA242_0==FONT_FACE_SYM||LA242_0==IMPORT_SYM||(LA242_0 >= LEFTBOTTOM_SYM && LA242_0 <= LEFTTOP_SYM)||LA242_0==LESS_REST||LA242_0==MEDIA_SYM||LA242_0==MOZ_DOCUMENT_SYM||LA242_0==NAMESPACE_SYM||LA242_0==PAGE_SYM||(LA242_0 >= RIGHTBOTTOM_SYM && LA242_0 <= RIGHTTOP_SYM)||(LA242_0 >= SASS_CONTENT && LA242_0 <= SASS_DEBUG)||(LA242_0 >= SASS_EACH && LA242_0 <= SASS_EXTEND)||(LA242_0 >= SASS_FOR && LA242_0 <= SASS_MIXIN)||(LA242_0 >= SASS_RETURN && LA242_0 <= SASS_WHILE)||(LA242_0 >= TOPCENTER_SYM && LA242_0 <= TOPRIGHT_SYM)||LA242_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt242=1;
					}
					} finally {dbg.exitDecision(242);}

					switch (alt242) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1063:60: cp_args_list
							{
							dbg.location(1063,60);
							pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration6291);
							cp_args_list();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(242);}
					dbg.location(1063,74);
					match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration6294); if (state.failed) return;dbg.location(1063,81);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1063:81: ( ( ws )? less_mixin_guarded )?
					int alt244=2;
					try { dbg.enterSubRule(244);
					try { dbg.enterDecision(244, decisionCanBacktrack[244]);

					try {
						isCyclicDecision = true;
						alt244 = dfa244.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(244);}

					switch (alt244) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1063:82: ( ws )? less_mixin_guarded
							{
							dbg.location(1063,82);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1063:82: ( ws )?
							int alt243=2;
							try { dbg.enterSubRule(243);
							try { dbg.enterDecision(243, decisionCanBacktrack[243]);

							int LA243_0 = input.LA(1);
							if ( (LA243_0==COMMENT||LA243_0==NL||LA243_0==WS) ) {
								alt243=1;
							}
							} finally {dbg.exitDecision(243);}

							switch (alt243) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1063:82: ws
									{
									dbg.location(1063,82);
									pushFollow(FOLLOW_ws_in_cp_mixin_declaration6297);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(243);}
							dbg.location(1063,86);
							pushFollow(FOLLOW_less_mixin_guarded_in_cp_mixin_declaration6300);
							less_mixin_guarded();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(244);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:9: {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?
					{
					dbg.location(1065,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_mixin_declaration", "isScssSource()");
					}dbg.location(1065,27);
					match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_cp_mixin_declaration6324); if (state.failed) return;dbg.location(1065,38);
					pushFollow(FOLLOW_ws_in_cp_mixin_declaration6326);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(1065,41);
					pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration6328);
					cp_mixin_name();
					state._fsp--;
					if (state.failed) return;dbg.location(1065,55);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:55: ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?
					int alt248=2;
					try { dbg.enterSubRule(248);
					try { dbg.enterDecision(248, decisionCanBacktrack[248]);

					try {
						isCyclicDecision = true;
						alt248 = dfa248.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(248);}

					switch (alt248) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:56: ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN
							{
							dbg.location(1065,56);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:56: ( ws )?
							int alt245=2;
							try { dbg.enterSubRule(245);
							try { dbg.enterDecision(245, decisionCanBacktrack[245]);

							int LA245_0 = input.LA(1);
							if ( (LA245_0==COMMENT||LA245_0==NL||LA245_0==WS) ) {
								alt245=1;
							}
							} finally {dbg.exitDecision(245);}

							switch (alt245) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:56: ws
									{
									dbg.location(1065,56);
									pushFollow(FOLLOW_ws_in_cp_mixin_declaration6331);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(245);}
							dbg.location(1065,60);
							match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration6334); if (state.failed) return;dbg.location(1065,67);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:67: ( ws )?
							int alt246=2;
							try { dbg.enterSubRule(246);
							try { dbg.enterDecision(246, decisionCanBacktrack[246]);

							int LA246_0 = input.LA(1);
							if ( (LA246_0==COMMENT||LA246_0==NL||LA246_0==WS) ) {
								alt246=1;
							}
							} finally {dbg.exitDecision(246);}

							switch (alt246) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:67: ws
									{
									dbg.location(1065,67);
									pushFollow(FOLLOW_ws_in_cp_mixin_declaration6336);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(246);}
							dbg.location(1065,71);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:71: ( cp_args_list )?
							int alt247=2;
							try { dbg.enterSubRule(247);
							try { dbg.enterDecision(247, decisionCanBacktrack[247]);

							int LA247_0 = input.LA(1);
							if ( (LA247_0==AT_IDENT||(LA247_0 >= BOTTOMCENTER_SYM && LA247_0 <= BOTTOMRIGHT_SYM)||LA247_0==CHARSET_SYM||(LA247_0 >= COUNTER_STYLE_SYM && LA247_0 <= CP_DOTS)||LA247_0==FONT_FACE_SYM||LA247_0==IMPORT_SYM||(LA247_0 >= LEFTBOTTOM_SYM && LA247_0 <= LEFTTOP_SYM)||LA247_0==LESS_REST||LA247_0==MEDIA_SYM||LA247_0==MOZ_DOCUMENT_SYM||LA247_0==NAMESPACE_SYM||LA247_0==PAGE_SYM||(LA247_0 >= RIGHTBOTTOM_SYM && LA247_0 <= RIGHTTOP_SYM)||(LA247_0 >= SASS_CONTENT && LA247_0 <= SASS_DEBUG)||(LA247_0 >= SASS_EACH && LA247_0 <= SASS_EXTEND)||(LA247_0 >= SASS_FOR && LA247_0 <= SASS_MIXIN)||(LA247_0 >= SASS_RETURN && LA247_0 <= SASS_WHILE)||(LA247_0 >= TOPCENTER_SYM && LA247_0 <= TOPRIGHT_SYM)||LA247_0==WEBKIT_KEYFRAMES_SYM) ) {
								alt247=1;
							}
							} finally {dbg.exitDecision(247);}

							switch (alt247) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1065:71: cp_args_list
									{
									dbg.location(1065,71);
									pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration6339);
									cp_args_list();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(247);}
							dbg.location(1065,85);
							match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration6342); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(248);}

					}
					break;

			}
			} finally {dbg.exitSubRule(249);}
			dbg.location(1067,5);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:5: ( ws )?
			int alt250=2;
			try { dbg.enterSubRule(250);
			try { dbg.enterDecision(250, decisionCanBacktrack[250]);

			int LA250_0 = input.LA(1);
			if ( (LA250_0==COMMENT||LA250_0==NL||LA250_0==WS) ) {
				alt250=1;
			}
			} finally {dbg.exitDecision(250);}

			switch (alt250) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:5: ws
					{
					dbg.location(1067,5);
					pushFollow(FOLLOW_ws_in_cp_mixin_declaration6356);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(250);}
			dbg.location(1067,9);
			pushFollow(FOLLOW_cp_mixin_block_in_cp_mixin_declaration6359);
			cp_mixin_block();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1068, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_declaration"



	// $ANTLR start "cp_mixin_call"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1072:1: cp_mixin_call : ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? |{...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? ) ;
	public final void cp_mixin_call() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1072, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1073:5: ( ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? |{...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? ) )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1074:5: ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? |{...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? )
			{
			dbg.location(1074,5);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1074:5: ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? |{...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? )
			int alt261=2;
			try { dbg.enterSubRule(261);
			try { dbg.enterDecision(261, decisionCanBacktrack[261]);

			int LA261_0 = input.LA(1);
			if ( (LA261_0==DOT) ) {
				alt261=1;
			}
			else if ( (LA261_0==SASS_INCLUDE) ) {
				alt261=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 261, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(261);}

			switch (alt261) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:9: {...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
					{
					dbg.location(1075,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_mixin_call", "isLessSource()");
					}dbg.location(1075,27);
					match(input,DOT,FOLLOW_DOT_in_cp_mixin_call6394); if (state.failed) return;dbg.location(1075,31);
					pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call6396);
					cp_mixin_name();
					state._fsp--;
					if (state.failed) return;dbg.location(1075,45);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:45: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
					int alt254=2;
					try { dbg.enterSubRule(254);
					try { dbg.enterDecision(254, decisionCanBacktrack[254]);

					try {
						isCyclicDecision = true;
						alt254 = dfa254.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(254);}

					switch (alt254) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:46: ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN
							{
							dbg.location(1075,46);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:46: ( ws )?
							int alt251=2;
							try { dbg.enterSubRule(251);
							try { dbg.enterDecision(251, decisionCanBacktrack[251]);

							int LA251_0 = input.LA(1);
							if ( (LA251_0==COMMENT||LA251_0==NL||LA251_0==WS) ) {
								alt251=1;
							}
							} finally {dbg.exitDecision(251);}

							switch (alt251) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:46: ws
									{
									dbg.location(1075,46);
									pushFollow(FOLLOW_ws_in_cp_mixin_call6399);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(251);}
							dbg.location(1075,50);
							match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_call6402); if (state.failed) return;dbg.location(1075,57);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:57: ( ws )?
							int alt252=2;
							try { dbg.enterSubRule(252);
							try { dbg.enterDecision(252, decisionCanBacktrack[252]);

							int LA252_0 = input.LA(1);
							if ( (LA252_0==COMMENT||LA252_0==NL||LA252_0==WS) ) {
								alt252=1;
							}
							} finally {dbg.exitDecision(252);}

							switch (alt252) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:57: ws
									{
									dbg.location(1075,57);
									pushFollow(FOLLOW_ws_in_cp_mixin_call6404);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(252);}
							dbg.location(1075,61);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:61: ( cp_mixin_call_args )?
							int alt253=2;
							try { dbg.enterSubRule(253);
							try { dbg.enterDecision(253, decisionCanBacktrack[253]);

							int LA253_0 = input.LA(1);
							if ( ((LA253_0 >= ANGLE && LA253_0 <= AT_IDENT)||(LA253_0 >= BOTTOMCENTER_SYM && LA253_0 <= BOTTOMRIGHT_SYM)||LA253_0==CHARSET_SYM||LA253_0==COUNTER_STYLE_SYM||LA253_0==DIMENSION||LA253_0==EMS||LA253_0==EXS||(LA253_0 >= FONT_FACE_SYM && LA253_0 <= FREQ)||LA253_0==GEN||(LA253_0 >= HASH && LA253_0 <= HASH_SYMBOL)||(LA253_0 >= IDENT && LA253_0 <= IMPORT_SYM)||(LA253_0 >= LEFTBOTTOM_SYM && LA253_0 <= LENGTH)||LA253_0==LESS_JS_STRING||LA253_0==LPAREN||(LA253_0 >= MEDIA_SYM && LA253_0 <= MOZ_DOCUMENT_SYM)||LA253_0==NAMESPACE_SYM||(LA253_0 >= NOT && LA253_0 <= NUMBER)||(LA253_0 >= PAGE_SYM && LA253_0 <= PERCENTAGE_SYMBOL)||LA253_0==PLUS||(LA253_0 >= REM && LA253_0 <= RIGHTTOP_SYM)||(LA253_0 >= SASS_CONTENT && LA253_0 <= SASS_DEBUG)||(LA253_0 >= SASS_EACH && LA253_0 <= SASS_EXTEND)||(LA253_0 >= SASS_FOR && LA253_0 <= SASS_MIXIN)||(LA253_0 >= SASS_RETURN && LA253_0 <= SASS_WHILE)||LA253_0==STRING||(LA253_0 >= TILDE && LA253_0 <= TOPRIGHT_SYM)||LA253_0==URI||LA253_0==WEBKIT_KEYFRAMES_SYM) ) {
								alt253=1;
							}
							} finally {dbg.exitDecision(253);}

							switch (alt253) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:61: cp_mixin_call_args
									{
									dbg.location(1075,61);
									pushFollow(FOLLOW_cp_mixin_call_args_in_cp_mixin_call6407);
									cp_mixin_call_args();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(253);}
							dbg.location(1075,81);
							match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_call6410); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(254);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:9: {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )?
					{
					dbg.location(1077,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_mixin_call", "isScssSource()");
					}dbg.location(1077,27);
					match(input,SASS_INCLUDE,FOLLOW_SASS_INCLUDE_in_cp_mixin_call6434); if (state.failed) return;dbg.location(1077,40);
					pushFollow(FOLLOW_ws_in_cp_mixin_call6436);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(1077,43);
					pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call6438);
					cp_mixin_name();
					state._fsp--;
					if (state.failed) return;dbg.location(1077,57);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:57: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
					int alt258=2;
					try { dbg.enterSubRule(258);
					try { dbg.enterDecision(258, decisionCanBacktrack[258]);

					try {
						isCyclicDecision = true;
						alt258 = dfa258.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(258);}

					switch (alt258) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:58: ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN
							{
							dbg.location(1077,58);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:58: ( ws )?
							int alt255=2;
							try { dbg.enterSubRule(255);
							try { dbg.enterDecision(255, decisionCanBacktrack[255]);

							int LA255_0 = input.LA(1);
							if ( (LA255_0==COMMENT||LA255_0==NL||LA255_0==WS) ) {
								alt255=1;
							}
							} finally {dbg.exitDecision(255);}

							switch (alt255) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:58: ws
									{
									dbg.location(1077,58);
									pushFollow(FOLLOW_ws_in_cp_mixin_call6441);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(255);}
							dbg.location(1077,62);
							match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_call6444); if (state.failed) return;dbg.location(1077,69);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:69: ( ws )?
							int alt256=2;
							try { dbg.enterSubRule(256);
							try { dbg.enterDecision(256, decisionCanBacktrack[256]);

							int LA256_0 = input.LA(1);
							if ( (LA256_0==COMMENT||LA256_0==NL||LA256_0==WS) ) {
								alt256=1;
							}
							} finally {dbg.exitDecision(256);}

							switch (alt256) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:69: ws
									{
									dbg.location(1077,69);
									pushFollow(FOLLOW_ws_in_cp_mixin_call6446);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(256);}
							dbg.location(1077,73);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:73: ( cp_mixin_call_args )?
							int alt257=2;
							try { dbg.enterSubRule(257);
							try { dbg.enterDecision(257, decisionCanBacktrack[257]);

							int LA257_0 = input.LA(1);
							if ( ((LA257_0 >= ANGLE && LA257_0 <= AT_IDENT)||(LA257_0 >= BOTTOMCENTER_SYM && LA257_0 <= BOTTOMRIGHT_SYM)||LA257_0==CHARSET_SYM||LA257_0==COUNTER_STYLE_SYM||LA257_0==DIMENSION||LA257_0==EMS||LA257_0==EXS||(LA257_0 >= FONT_FACE_SYM && LA257_0 <= FREQ)||LA257_0==GEN||(LA257_0 >= HASH && LA257_0 <= HASH_SYMBOL)||(LA257_0 >= IDENT && LA257_0 <= IMPORT_SYM)||(LA257_0 >= LEFTBOTTOM_SYM && LA257_0 <= LENGTH)||LA257_0==LESS_JS_STRING||LA257_0==LPAREN||(LA257_0 >= MEDIA_SYM && LA257_0 <= MOZ_DOCUMENT_SYM)||LA257_0==NAMESPACE_SYM||(LA257_0 >= NOT && LA257_0 <= NUMBER)||(LA257_0 >= PAGE_SYM && LA257_0 <= PERCENTAGE_SYMBOL)||LA257_0==PLUS||(LA257_0 >= REM && LA257_0 <= RIGHTTOP_SYM)||(LA257_0 >= SASS_CONTENT && LA257_0 <= SASS_DEBUG)||(LA257_0 >= SASS_EACH && LA257_0 <= SASS_EXTEND)||(LA257_0 >= SASS_FOR && LA257_0 <= SASS_MIXIN)||(LA257_0 >= SASS_RETURN && LA257_0 <= SASS_WHILE)||LA257_0==STRING||(LA257_0 >= TILDE && LA257_0 <= TOPRIGHT_SYM)||LA257_0==URI||LA257_0==WEBKIT_KEYFRAMES_SYM) ) {
								alt257=1;
							}
							} finally {dbg.exitDecision(257);}

							switch (alt257) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:73: cp_mixin_call_args
									{
									dbg.location(1077,73);
									pushFollow(FOLLOW_cp_mixin_call_args_in_cp_mixin_call6449);
									cp_mixin_call_args();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(257);}
							dbg.location(1077,93);
							match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_call6452); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(258);}
					dbg.location(1077,102);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:102: ( ( ws )? cp_mixin_block )?
					int alt260=2;
					try { dbg.enterSubRule(260);
					try { dbg.enterDecision(260, decisionCanBacktrack[260]);

					try {
						isCyclicDecision = true;
						alt260 = dfa260.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(260);}

					switch (alt260) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:103: ( ws )? cp_mixin_block
							{
							dbg.location(1077,103);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:103: ( ws )?
							int alt259=2;
							try { dbg.enterSubRule(259);
							try { dbg.enterDecision(259, decisionCanBacktrack[259]);

							int LA259_0 = input.LA(1);
							if ( (LA259_0==COMMENT||LA259_0==NL||LA259_0==WS) ) {
								alt259=1;
							}
							} finally {dbg.exitDecision(259);}

							switch (alt259) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:103: ws
									{
									dbg.location(1077,103);
									pushFollow(FOLLOW_ws_in_cp_mixin_call6457);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(259);}
							dbg.location(1077,107);
							pushFollow(FOLLOW_cp_mixin_block_in_cp_mixin_call6460);
							cp_mixin_block();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(260);}

					}
					break;

			}
			} finally {dbg.exitSubRule(261);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1079, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_call");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_call"



	// $ANTLR start "cp_mixin_block"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1081:1: cp_mixin_block : LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
	public final void cp_mixin_block() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_block");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1081, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1082:5: ( LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1083:5: LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
			{
			dbg.location(1083,5);
			match(input,LBRACE,FOLLOW_LBRACE_in_cp_mixin_block6489); if (state.failed) return;dbg.location(1083,12);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1083:12: ( ws )?
			int alt262=2;
			try { dbg.enterSubRule(262);
			try { dbg.enterDecision(262, decisionCanBacktrack[262]);

			int LA262_0 = input.LA(1);
			if ( (LA262_0==COMMENT||LA262_0==NL||LA262_0==WS) ) {
				alt262=1;
			}
			} finally {dbg.exitDecision(262);}

			switch (alt262) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1083:12: ws
					{
					dbg.location(1083,12);
					pushFollow(FOLLOW_ws_in_cp_mixin_block6491);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(262);}
			dbg.location(1083,16);
			pushFollow(FOLLOW_syncToFollow_in_cp_mixin_block6494);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(1084,9);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1084:9: ( declarations )?
			int alt263=2;
			try { dbg.enterSubRule(263);
			try { dbg.enterDecision(263, decisionCanBacktrack[263]);

			int LA263_0 = input.LA(1);
			if ( ((LA263_0 >= AT_IDENT && LA263_0 <= AT_SIGN)||(LA263_0 >= BOTTOMCENTER_SYM && LA263_0 <= BOTTOMRIGHT_SYM)||(LA263_0 >= CHARSET_SYM && LA263_0 <= COMMA)||LA263_0==COUNTER_STYLE_SYM||LA263_0==DCOLON||LA263_0==DOT||LA263_0==FONT_FACE_SYM||(LA263_0 >= GEN && LA263_0 <= GREATER)||(LA263_0 >= HASH && LA263_0 <= HASH_SYMBOL)||LA263_0==IDENT||LA263_0==IMPORT_SYM||(LA263_0 >= LBRACKET && LA263_0 <= LEFTTOP_SYM)||LA263_0==LESS_AND||(LA263_0 >= MEDIA_SYM && LA263_0 <= MOZ_DOCUMENT_SYM)||LA263_0==NAMESPACE_SYM||LA263_0==PAGE_SYM||(LA263_0 >= PIPE && LA263_0 <= PLUS)||LA263_0==RBRACKET||(LA263_0 >= RIGHTBOTTOM_SYM && LA263_0 <= RIGHTTOP_SYM)||(LA263_0 >= SASS_CONTENT && LA263_0 <= SASS_DEBUG)||(LA263_0 >= SASS_EACH && LA263_0 <= SASS_MIXIN)||(LA263_0 >= SASS_RETURN && LA263_0 <= SEMI)||LA263_0==STAR||LA263_0==TILDE||(LA263_0 >= TOPCENTER_SYM && LA263_0 <= TOPRIGHT_SYM)||LA263_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt263=1;
			}
			} finally {dbg.exitDecision(263);}

			switch (alt263) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1084:9: declarations
					{
					dbg.location(1084,9);
					pushFollow(FOLLOW_declarations_in_cp_mixin_block6504);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(263);}
			dbg.location(1085,5);
			match(input,RBRACE,FOLLOW_RBRACE_in_cp_mixin_block6511); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1086, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_block");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_block"



	// $ANTLR start "cp_mixin_name"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1088:1: cp_mixin_name : IDENT ;
	public final void cp_mixin_name() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_name");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1088, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1089:5: ( IDENT )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1090:5: IDENT
			{
			dbg.location(1090,5);
			match(input,IDENT,FOLLOW_IDENT_in_cp_mixin_name6532); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1091, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_name");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_name"



	// $ANTLR start "cp_mixin_call_args"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1093:1: cp_mixin_call_args : cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS ( ws )? )? ;
	public final void cp_mixin_call_args() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_args");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1093, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1094:5: ( cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS ( ws )? )? )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:5: cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS ( ws )? )?
			{
			dbg.location(1097,5);
			pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6563);
			cp_mixin_call_arg();
			state._fsp--;
			if (state.failed) return;dbg.location(1097,23);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:23: ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )*
			try { dbg.enterSubRule(265);

			loop265:
			while (true) {
				int alt265=2;
				try { dbg.enterDecision(265, decisionCanBacktrack[265]);

				int LA265_0 = input.LA(1);
				if ( (LA265_0==COMMA||LA265_0==SEMI) ) {
					alt265=1;
				}

				} finally {dbg.exitDecision(265);}

				switch (alt265) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:25: ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg
					{
					dbg.location(1097,25);
					if ( input.LA(1)==COMMA||input.LA(1)==SEMI ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(1097,40);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:40: ( ws )?
					int alt264=2;
					try { dbg.enterSubRule(264);
					try { dbg.enterDecision(264, decisionCanBacktrack[264]);

					int LA264_0 = input.LA(1);
					if ( (LA264_0==COMMENT||LA264_0==NL||LA264_0==WS) ) {
						alt264=1;
					}
					} finally {dbg.exitDecision(264);}

					switch (alt264) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:40: ws
							{
							dbg.location(1097,40);
							pushFollow(FOLLOW_ws_in_cp_mixin_call_args6575);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(264);}
					dbg.location(1097,44);
					pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6578);
					cp_mixin_call_arg();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop265;
				}
			}
			} finally {dbg.exitSubRule(265);}
			dbg.location(1097,65);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:65: ( CP_DOTS ( ws )? )?
			int alt267=2;
			try { dbg.enterSubRule(267);
			try { dbg.enterDecision(267, decisionCanBacktrack[267]);

			int LA267_0 = input.LA(1);
			if ( (LA267_0==CP_DOTS) ) {
				alt267=1;
			}
			} finally {dbg.exitDecision(267);}

			switch (alt267) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:66: CP_DOTS ( ws )?
					{
					dbg.location(1097,66);
					match(input,CP_DOTS,FOLLOW_CP_DOTS_in_cp_mixin_call_args6584); if (state.failed) return;dbg.location(1097,74);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:74: ( ws )?
					int alt266=2;
					try { dbg.enterSubRule(266);
					try { dbg.enterDecision(266, decisionCanBacktrack[266]);

					int LA266_0 = input.LA(1);
					if ( (LA266_0==COMMENT||LA266_0==NL||LA266_0==WS) ) {
						alt266=1;
					}
					} finally {dbg.exitDecision(266);}

					switch (alt266) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:74: ws
							{
							dbg.location(1097,74);
							pushFollow(FOLLOW_ws_in_cp_mixin_call_args6586);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(266);}

					}
					break;

			}
			} finally {dbg.exitSubRule(267);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1098, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_call_args");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_call_args"



	// $ANTLR start "cp_mixin_call_arg"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1100:1: cp_mixin_call_arg : ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? ;
	public final void cp_mixin_call_arg() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_arg");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1100, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1101:5: ( ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1102:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )?
			{
			dbg.location(1102,5);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1102:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )
			int alt270=2;
			try { dbg.enterSubRule(270);
			try { dbg.enterDecision(270, decisionCanBacktrack[270]);

			try {
				isCyclicDecision = true;
				alt270 = dfa270.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(270);}

			switch (alt270) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1103:9: cp_variable ( ws )? COLON ( ws )? cp_expression
					{
					dbg.location(1103,9);
					pushFollow(FOLLOW_cp_variable_in_cp_mixin_call_arg6620);
					cp_variable();
					state._fsp--;
					if (state.failed) return;dbg.location(1103,21);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1103:21: ( ws )?
					int alt268=2;
					try { dbg.enterSubRule(268);
					try { dbg.enterDecision(268, decisionCanBacktrack[268]);

					int LA268_0 = input.LA(1);
					if ( (LA268_0==COMMENT||LA268_0==NL||LA268_0==WS) ) {
						alt268=1;
					}
					} finally {dbg.exitDecision(268);}

					switch (alt268) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1103:21: ws
							{
							dbg.location(1103,21);
							pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6622);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(268);}
					dbg.location(1103,25);
					match(input,COLON,FOLLOW_COLON_in_cp_mixin_call_arg6625); if (state.failed) return;dbg.location(1103,31);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1103:31: ( ws )?
					int alt269=2;
					try { dbg.enterSubRule(269);
					try { dbg.enterDecision(269, decisionCanBacktrack[269]);

					int LA269_0 = input.LA(1);
					if ( (LA269_0==COMMENT||LA269_0==NL||LA269_0==WS) ) {
						alt269=1;
					}
					} finally {dbg.exitDecision(269);}

					switch (alt269) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1103:31: ws
							{
							dbg.location(1103,31);
							pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6627);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(269);}
					dbg.location(1103,35);
					pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg6630);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1104:11: cp_expression
					{
					dbg.location(1104,11);
					pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg6642);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(270);}
			dbg.location(1105,7);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1105:7: ( ws )?
			int alt271=2;
			try { dbg.enterSubRule(271);
			try { dbg.enterDecision(271, decisionCanBacktrack[271]);

			int LA271_0 = input.LA(1);
			if ( (LA271_0==COMMENT||LA271_0==NL||LA271_0==WS) ) {
				alt271=1;
			}
			} finally {dbg.exitDecision(271);}

			switch (alt271) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1105:7: ws
					{
					dbg.location(1105,7);
					pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6650);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(271);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1106, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_call_arg");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_call_arg"



	// $ANTLR start "cp_args_list"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1109:1: cp_args_list : ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? ) | ( CP_DOTS | LESS_REST ) ( ws )? );
	public final void cp_args_list() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_args_list");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1109, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1110:5: ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? ) | ( CP_DOTS | LESS_REST ) ( ws )? )
			int alt279=2;
			try { dbg.enterDecision(279, decisionCanBacktrack[279]);

			int LA279_0 = input.LA(1);
			if ( (LA279_0==AT_IDENT||(LA279_0 >= BOTTOMCENTER_SYM && LA279_0 <= BOTTOMRIGHT_SYM)||LA279_0==CHARSET_SYM||LA279_0==COUNTER_STYLE_SYM||LA279_0==FONT_FACE_SYM||LA279_0==IMPORT_SYM||(LA279_0 >= LEFTBOTTOM_SYM && LA279_0 <= LEFTTOP_SYM)||LA279_0==MEDIA_SYM||LA279_0==MOZ_DOCUMENT_SYM||LA279_0==NAMESPACE_SYM||LA279_0==PAGE_SYM||(LA279_0 >= RIGHTBOTTOM_SYM && LA279_0 <= RIGHTTOP_SYM)||(LA279_0 >= SASS_CONTENT && LA279_0 <= SASS_DEBUG)||(LA279_0 >= SASS_EACH && LA279_0 <= SASS_EXTEND)||(LA279_0 >= SASS_FOR && LA279_0 <= SASS_MIXIN)||(LA279_0 >= SASS_RETURN && LA279_0 <= SASS_WHILE)||(LA279_0 >= TOPCENTER_SYM && LA279_0 <= TOPRIGHT_SYM)||LA279_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt279=1;
			}
			else if ( (LA279_0==CP_DOTS||LA279_0==LESS_REST) ) {
				alt279=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 279, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(279);}

			switch (alt279) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? )
					{
					dbg.location(1117,5);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? )
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:7: cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )?
					{
					dbg.location(1117,7);
					pushFollow(FOLLOW_cp_arg_in_cp_args_list6697);
					cp_arg();
					state._fsp--;
					if (state.failed) return;dbg.location(1117,14);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*
					try { dbg.enterSubRule(273);

					loop273:
					while (true) {
						int alt273=2;
						try { dbg.enterDecision(273, decisionCanBacktrack[273]);

						try {
							isCyclicDecision = true;
							alt273 = dfa273.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(273);}

						switch (alt273) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:16: ( COMMA | SEMI ) ( ws )? cp_arg
							{
							dbg.location(1117,16);
							if ( input.LA(1)==COMMA||input.LA(1)==SEMI ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}dbg.location(1117,33);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:33: ( ws )?
							int alt272=2;
							try { dbg.enterSubRule(272);
							try { dbg.enterDecision(272, decisionCanBacktrack[272]);

							int LA272_0 = input.LA(1);
							if ( (LA272_0==COMMENT||LA272_0==NL||LA272_0==WS) ) {
								alt272=1;
							}
							} finally {dbg.exitDecision(272);}

							switch (alt272) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:33: ws
									{
									dbg.location(1117,33);
									pushFollow(FOLLOW_ws_in_cp_args_list6711);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(272);}
							dbg.location(1117,37);
							pushFollow(FOLLOW_cp_arg_in_cp_args_list6714);
							cp_arg();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop273;
						}
					}
					} finally {dbg.exitSubRule(273);}
					dbg.location(1117,47);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:47: ( ( COMMA | SEMI ) ( ws )? )?
					int alt275=2;
					try { dbg.enterSubRule(275);
					try { dbg.enterDecision(275, decisionCanBacktrack[275]);

					int LA275_0 = input.LA(1);
					if ( (LA275_0==COMMA||LA275_0==SEMI) ) {
						alt275=1;
					}
					} finally {dbg.exitDecision(275);}

					switch (alt275) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:49: ( COMMA | SEMI ) ( ws )?
							{
							dbg.location(1117,49);
							if ( input.LA(1)==COMMA||input.LA(1)==SEMI ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}dbg.location(1117,64);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:64: ( ws )?
							int alt274=2;
							try { dbg.enterSubRule(274);
							try { dbg.enterDecision(274, decisionCanBacktrack[274]);

							int LA274_0 = input.LA(1);
							if ( (LA274_0==COMMENT||LA274_0==NL||LA274_0==WS) ) {
								alt274=1;
							}
							} finally {dbg.exitDecision(274);}

							switch (alt274) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:64: ws
									{
									dbg.location(1117,64);
									pushFollow(FOLLOW_ws_in_cp_args_list6729);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(274);}

							}
							break;

					}
					} finally {dbg.exitSubRule(275);}
					dbg.location(1117,71);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:71: ( ( CP_DOTS | LESS_REST ) ( ws )? )?
					int alt277=2;
					try { dbg.enterSubRule(277);
					try { dbg.enterDecision(277, decisionCanBacktrack[277]);

					int LA277_0 = input.LA(1);
					if ( (LA277_0==CP_DOTS||LA277_0==LESS_REST) ) {
						alt277=1;
					}
					} finally {dbg.exitDecision(277);}

					switch (alt277) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:73: ( CP_DOTS | LESS_REST ) ( ws )?
							{
							dbg.location(1117,73);
							if ( input.LA(1)==CP_DOTS||input.LA(1)==LESS_REST ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}dbg.location(1117,95);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:95: ( ws )?
							int alt276=2;
							try { dbg.enterSubRule(276);
							try { dbg.enterDecision(276, decisionCanBacktrack[276]);

							int LA276_0 = input.LA(1);
							if ( (LA276_0==COMMENT||LA276_0==NL||LA276_0==WS) ) {
								alt276=1;
							}
							} finally {dbg.exitDecision(276);}

							switch (alt276) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1117:95: ws
									{
									dbg.location(1117,95);
									pushFollow(FOLLOW_ws_in_cp_args_list6745);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(276);}

							}
							break;

					}
					} finally {dbg.exitSubRule(277);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1119:5: ( CP_DOTS | LESS_REST ) ( ws )?
					{
					dbg.location(1119,5);
					if ( input.LA(1)==CP_DOTS||input.LA(1)==LESS_REST ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(1119,27);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1119:27: ( ws )?
					int alt278=2;
					try { dbg.enterSubRule(278);
					try { dbg.enterDecision(278, decisionCanBacktrack[278]);

					int LA278_0 = input.LA(1);
					if ( (LA278_0==COMMENT||LA278_0==NL||LA278_0==WS) ) {
						alt278=1;
					}
					} finally {dbg.exitDecision(278);}

					switch (alt278) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1119:27: ws
							{
							dbg.location(1119,27);
							pushFollow(FOLLOW_ws_in_cp_args_list6770);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(278);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1120, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_args_list");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_args_list"



	// $ANTLR start "cp_arg"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1123:1: cp_arg : cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? ;
	public final void cp_arg() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_arg");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1123, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1124:5: ( cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1125:5: cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )?
			{
			dbg.location(1125,5);
			pushFollow(FOLLOW_cp_variable_in_cp_arg6793);
			cp_variable();
			state._fsp--;
			if (state.failed) return;dbg.location(1125,17);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1125:17: ( ws )?
			int alt280=2;
			try { dbg.enterSubRule(280);
			try { dbg.enterDecision(280, decisionCanBacktrack[280]);

			int LA280_0 = input.LA(1);
			if ( (LA280_0==COMMENT||LA280_0==NL||LA280_0==WS) ) {
				alt280=1;
			}
			} finally {dbg.exitDecision(280);}

			switch (alt280) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1125:17: ws
					{
					dbg.location(1125,17);
					pushFollow(FOLLOW_ws_in_cp_arg6795);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(280);}
			dbg.location(1125,21);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1125:21: ( COLON ( ws )? cp_expression ( ws )? )?
			int alt283=2;
			try { dbg.enterSubRule(283);
			try { dbg.enterDecision(283, decisionCanBacktrack[283]);

			int LA283_0 = input.LA(1);
			if ( (LA283_0==COLON) ) {
				alt283=1;
			}
			} finally {dbg.exitDecision(283);}

			switch (alt283) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1125:23: COLON ( ws )? cp_expression ( ws )?
					{
					dbg.location(1125,23);
					match(input,COLON,FOLLOW_COLON_in_cp_arg6800); if (state.failed) return;dbg.location(1125,29);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1125:29: ( ws )?
					int alt281=2;
					try { dbg.enterSubRule(281);
					try { dbg.enterDecision(281, decisionCanBacktrack[281]);

					int LA281_0 = input.LA(1);
					if ( (LA281_0==COMMENT||LA281_0==NL||LA281_0==WS) ) {
						alt281=1;
					}
					} finally {dbg.exitDecision(281);}

					switch (alt281) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1125:29: ws
							{
							dbg.location(1125,29);
							pushFollow(FOLLOW_ws_in_cp_arg6802);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(281);}
					dbg.location(1125,33);
					pushFollow(FOLLOW_cp_expression_in_cp_arg6805);
					cp_expression();
					state._fsp--;
					if (state.failed) return;dbg.location(1125,47);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1125:47: ( ws )?
					int alt282=2;
					try { dbg.enterSubRule(282);
					try { dbg.enterDecision(282, decisionCanBacktrack[282]);

					int LA282_0 = input.LA(1);
					if ( (LA282_0==COMMENT||LA282_0==NL||LA282_0==WS) ) {
						alt282=1;
					}
					} finally {dbg.exitDecision(282);}

					switch (alt282) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1125:47: ws
							{
							dbg.location(1125,47);
							pushFollow(FOLLOW_ws_in_cp_arg6807);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(282);}

					}
					break;

			}
			} finally {dbg.exitSubRule(283);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1126, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_arg");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_arg"



	// $ANTLR start "less_mixin_guarded"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:1: less_mixin_guarded : LESS_WHEN ( ws )? less_condition ( ( ws )? ( COMMA | AND ) ( ws )? less_condition )* ;
	public final void less_mixin_guarded() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_mixin_guarded");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1130, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1131:5: ( LESS_WHEN ( ws )? less_condition ( ( ws )? ( COMMA | AND ) ( ws )? less_condition )* )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:5: LESS_WHEN ( ws )? less_condition ( ( ws )? ( COMMA | AND ) ( ws )? less_condition )*
			{
			dbg.location(1132,5);
			match(input,LESS_WHEN,FOLLOW_LESS_WHEN_in_less_mixin_guarded6833); if (state.failed) return;dbg.location(1132,15);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:15: ( ws )?
			int alt284=2;
			try { dbg.enterSubRule(284);
			try { dbg.enterDecision(284, decisionCanBacktrack[284]);

			int LA284_0 = input.LA(1);
			if ( (LA284_0==COMMENT||LA284_0==NL||LA284_0==WS) ) {
				alt284=1;
			}
			} finally {dbg.exitDecision(284);}

			switch (alt284) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:15: ws
					{
					dbg.location(1132,15);
					pushFollow(FOLLOW_ws_in_less_mixin_guarded6835);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(284);}
			dbg.location(1132,19);
			pushFollow(FOLLOW_less_condition_in_less_mixin_guarded6838);
			less_condition();
			state._fsp--;
			if (state.failed) return;dbg.location(1132,34);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:34: ( ( ws )? ( COMMA | AND ) ( ws )? less_condition )*
			try { dbg.enterSubRule(287);

			loop287:
			while (true) {
				int alt287=2;
				try { dbg.enterDecision(287, decisionCanBacktrack[287]);

				try {
					isCyclicDecision = true;
					alt287 = dfa287.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(287);}

				switch (alt287) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:35: ( ws )? ( COMMA | AND ) ( ws )? less_condition
					{
					dbg.location(1132,35);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:35: ( ws )?
					int alt285=2;
					try { dbg.enterSubRule(285);
					try { dbg.enterDecision(285, decisionCanBacktrack[285]);

					int LA285_0 = input.LA(1);
					if ( (LA285_0==COMMENT||LA285_0==NL||LA285_0==WS) ) {
						alt285=1;
					}
					} finally {dbg.exitDecision(285);}

					switch (alt285) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:35: ws
							{
							dbg.location(1132,35);
							pushFollow(FOLLOW_ws_in_less_mixin_guarded6841);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(285);}
					dbg.location(1132,39);
					if ( input.LA(1)==AND||input.LA(1)==COMMA ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(1132,53);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:53: ( ws )?
					int alt286=2;
					try { dbg.enterSubRule(286);
					try { dbg.enterDecision(286, decisionCanBacktrack[286]);

					int LA286_0 = input.LA(1);
					if ( (LA286_0==COMMENT||LA286_0==NL||LA286_0==WS) ) {
						alt286=1;
					}
					} finally {dbg.exitDecision(286);}

					switch (alt286) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:53: ws
							{
							dbg.location(1132,53);
							pushFollow(FOLLOW_ws_in_less_mixin_guarded6852);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(286);}
					dbg.location(1132,57);
					pushFollow(FOLLOW_less_condition_in_less_mixin_guarded6855);
					less_condition();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop287;
				}
			}
			} finally {dbg.exitSubRule(287);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1133, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_mixin_guarded");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_mixin_guarded"



	// $ANTLR start "less_condition"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1137:1: less_condition : ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN ;
	public final void less_condition() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_condition");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1137, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:5: ( ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1139:5: ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN
			{
			dbg.location(1139,5);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1139:5: ( NOT ( ws )? )?
			int alt289=2;
			try { dbg.enterSubRule(289);
			try { dbg.enterDecision(289, decisionCanBacktrack[289]);

			int LA289_0 = input.LA(1);
			if ( (LA289_0==NOT) ) {
				alt289=1;
			}
			} finally {dbg.exitDecision(289);}

			switch (alt289) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1139:6: NOT ( ws )?
					{
					dbg.location(1139,6);
					match(input,NOT,FOLLOW_NOT_in_less_condition6881); if (state.failed) return;dbg.location(1139,10);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1139:10: ( ws )?
					int alt288=2;
					try { dbg.enterSubRule(288);
					try { dbg.enterDecision(288, decisionCanBacktrack[288]);

					int LA288_0 = input.LA(1);
					if ( (LA288_0==COMMENT||LA288_0==NL||LA288_0==WS) ) {
						alt288=1;
					}
					} finally {dbg.exitDecision(288);}

					switch (alt288) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1139:10: ws
							{
							dbg.location(1139,10);
							pushFollow(FOLLOW_ws_in_less_condition6883);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(288);}

					}
					break;

			}
			} finally {dbg.exitSubRule(289);}
			dbg.location(1140,5);
			match(input,LPAREN,FOLLOW_LPAREN_in_less_condition6892); if (state.failed) return;dbg.location(1140,12);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1140:12: ( ws )?
			int alt290=2;
			try { dbg.enterSubRule(290);
			try { dbg.enterDecision(290, decisionCanBacktrack[290]);

			int LA290_0 = input.LA(1);
			if ( (LA290_0==COMMENT||LA290_0==NL||LA290_0==WS) ) {
				alt290=1;
			}
			} finally {dbg.exitDecision(290);}

			switch (alt290) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1140:12: ws
					{
					dbg.location(1140,12);
					pushFollow(FOLLOW_ws_in_less_condition6894);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(290);}
			dbg.location(1141,9);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1141:9: ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:14: ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )?
			{
			dbg.location(1142,14);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:14: ( cp_variable | less_function_in_condition )
			int alt291=2;
			try { dbg.enterSubRule(291);
			try { dbg.enterDecision(291, decisionCanBacktrack[291]);

			int LA291_0 = input.LA(1);
			if ( (LA291_0==AT_IDENT||(LA291_0 >= BOTTOMCENTER_SYM && LA291_0 <= BOTTOMRIGHT_SYM)||LA291_0==CHARSET_SYM||LA291_0==COUNTER_STYLE_SYM||LA291_0==FONT_FACE_SYM||LA291_0==IMPORT_SYM||(LA291_0 >= LEFTBOTTOM_SYM && LA291_0 <= LEFTTOP_SYM)||LA291_0==MEDIA_SYM||LA291_0==MOZ_DOCUMENT_SYM||LA291_0==NAMESPACE_SYM||LA291_0==PAGE_SYM||(LA291_0 >= RIGHTBOTTOM_SYM && LA291_0 <= RIGHTTOP_SYM)||(LA291_0 >= SASS_CONTENT && LA291_0 <= SASS_DEBUG)||(LA291_0 >= SASS_EACH && LA291_0 <= SASS_EXTEND)||(LA291_0 >= SASS_FOR && LA291_0 <= SASS_MIXIN)||(LA291_0 >= SASS_RETURN && LA291_0 <= SASS_WHILE)||(LA291_0 >= TOPCENTER_SYM && LA291_0 <= TOPRIGHT_SYM)||LA291_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt291=1;
			}
			else if ( (LA291_0==IDENT) ) {
				alt291=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 291, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(291);}

			switch (alt291) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:15: cp_variable
					{
					dbg.location(1142,15);
					pushFollow(FOLLOW_cp_variable_in_less_condition6921);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:29: less_function_in_condition
					{
					dbg.location(1142,29);
					pushFollow(FOLLOW_less_function_in_condition_in_less_condition6925);
					less_function_in_condition();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(291);}
			dbg.location(1142,57);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:57: ( ws )?
			int alt292=2;
			try { dbg.enterSubRule(292);
			try { dbg.enterDecision(292, decisionCanBacktrack[292]);

			int LA292_0 = input.LA(1);
			if ( (LA292_0==COMMENT||LA292_0==NL||LA292_0==WS) ) {
				alt292=1;
			}
			} finally {dbg.exitDecision(292);}

			switch (alt292) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:57: ws
					{
					dbg.location(1142,57);
					pushFollow(FOLLOW_ws_in_less_condition6928);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(292);}
			dbg.location(1142,61);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:61: ( less_condition_operator ( ws )? cp_math_expression )?
			int alt294=2;
			try { dbg.enterSubRule(294);
			try { dbg.enterDecision(294, decisionCanBacktrack[294]);

			int LA294_0 = input.LA(1);
			if ( ((LA294_0 >= GREATER && LA294_0 <= GREATER_OR_EQ)||LA294_0==LESS||LA294_0==LESS_OR_EQ||LA294_0==OPEQ) ) {
				alt294=1;
			}
			} finally {dbg.exitDecision(294);}

			switch (alt294) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:62: less_condition_operator ( ws )? cp_math_expression
					{
					dbg.location(1142,62);
					pushFollow(FOLLOW_less_condition_operator_in_less_condition6932);
					less_condition_operator();
					state._fsp--;
					if (state.failed) return;dbg.location(1142,86);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:86: ( ws )?
					int alt293=2;
					try { dbg.enterSubRule(293);
					try { dbg.enterDecision(293, decisionCanBacktrack[293]);

					int LA293_0 = input.LA(1);
					if ( (LA293_0==COMMENT||LA293_0==NL||LA293_0==WS) ) {
						alt293=1;
					}
					} finally {dbg.exitDecision(293);}

					switch (alt293) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1142:86: ws
							{
							dbg.location(1142,86);
							pushFollow(FOLLOW_ws_in_less_condition6934);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(293);}
					dbg.location(1142,90);
					pushFollow(FOLLOW_cp_math_expression_in_less_condition6937);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(294);}

			}
			dbg.location(1144,5);
			match(input,RPAREN,FOLLOW_RPAREN_in_less_condition6955); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1145, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_condition");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_condition"



	// $ANTLR start "less_function_in_condition"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1148:1: less_function_in_condition : less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN ;
	public final void less_function_in_condition() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_function_in_condition");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1148, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1149:5: ( less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:5: less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN
			{
			dbg.location(1150,5);
			pushFollow(FOLLOW_less_fn_name_in_less_function_in_condition6977);
			less_fn_name();
			state._fsp--;
			if (state.failed) return;dbg.location(1150,18);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:18: ( ws )?
			int alt295=2;
			try { dbg.enterSubRule(295);
			try { dbg.enterDecision(295, decisionCanBacktrack[295]);

			int LA295_0 = input.LA(1);
			if ( (LA295_0==COMMENT||LA295_0==NL||LA295_0==WS) ) {
				alt295=1;
			}
			} finally {dbg.exitDecision(295);}

			switch (alt295) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:18: ws
					{
					dbg.location(1150,18);
					pushFollow(FOLLOW_ws_in_less_function_in_condition6979);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(295);}
			dbg.location(1150,22);
			match(input,LPAREN,FOLLOW_LPAREN_in_less_function_in_condition6982); if (state.failed) return;dbg.location(1150,29);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:29: ( ws )?
			int alt296=2;
			try { dbg.enterSubRule(296);
			try { dbg.enterDecision(296, decisionCanBacktrack[296]);

			int LA296_0 = input.LA(1);
			if ( (LA296_0==COMMENT||LA296_0==NL||LA296_0==WS) ) {
				alt296=1;
			}
			} finally {dbg.exitDecision(296);}

			switch (alt296) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:29: ws
					{
					dbg.location(1150,29);
					pushFollow(FOLLOW_ws_in_less_function_in_condition6984);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(296);}
			dbg.location(1150,33);
			pushFollow(FOLLOW_cp_variable_in_less_function_in_condition6987);
			cp_variable();
			state._fsp--;
			if (state.failed) return;dbg.location(1150,45);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:45: ( ws )?
			int alt297=2;
			try { dbg.enterSubRule(297);
			try { dbg.enterDecision(297, decisionCanBacktrack[297]);

			int LA297_0 = input.LA(1);
			if ( (LA297_0==COMMENT||LA297_0==NL||LA297_0==WS) ) {
				alt297=1;
			}
			} finally {dbg.exitDecision(297);}

			switch (alt297) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:45: ws
					{
					dbg.location(1150,45);
					pushFollow(FOLLOW_ws_in_less_function_in_condition6989);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(297);}
			dbg.location(1150,49);
			match(input,RPAREN,FOLLOW_RPAREN_in_less_function_in_condition6992); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1151, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_function_in_condition");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_function_in_condition"



	// $ANTLR start "less_fn_name"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1154:1: less_fn_name : IDENT ;
	public final void less_fn_name() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_fn_name");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1154, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1155:5: ( IDENT )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1156:5: IDENT
			{
			dbg.location(1156,5);
			match(input,IDENT,FOLLOW_IDENT_in_less_fn_name7014); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1157, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_fn_name");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_fn_name"



	// $ANTLR start "less_condition_operator"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1159:1: less_condition_operator : ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ );
	public final void less_condition_operator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_condition_operator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1159, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1160:5: ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
			{
			dbg.location(1160,5);
			if ( (input.LA(1) >= GREATER && input.LA(1) <= GREATER_OR_EQ)||input.LA(1)==LESS||input.LA(1)==LESS_OR_EQ||input.LA(1)==OPEQ ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1162, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_condition_operator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_condition_operator"



	// $ANTLR start "less_selector_interpolation"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1164:1: less_selector_interpolation : AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE ;
	public final void less_selector_interpolation() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_selector_interpolation");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1164, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1165:5: ( AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1166:5: AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE
			{
			dbg.location(1166,5);
			match(input,AT_SIGN,FOLLOW_AT_SIGN_in_less_selector_interpolation7072); if (state.failed) return;dbg.location(1166,13);
			match(input,LBRACE,FOLLOW_LBRACE_in_less_selector_interpolation7074); if (state.failed) return;dbg.location(1166,20);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1166:20: ( ws )?
			int alt298=2;
			try { dbg.enterSubRule(298);
			try { dbg.enterDecision(298, decisionCanBacktrack[298]);

			int LA298_0 = input.LA(1);
			if ( (LA298_0==COMMENT||LA298_0==NL||LA298_0==WS) ) {
				alt298=1;
			}
			} finally {dbg.exitDecision(298);}

			switch (alt298) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1166:20: ws
					{
					dbg.location(1166,20);
					pushFollow(FOLLOW_ws_in_less_selector_interpolation7076);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(298);}
			dbg.location(1166,24);
			match(input,IDENT,FOLLOW_IDENT_in_less_selector_interpolation7079); if (state.failed) return;dbg.location(1166,30);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1166:30: ( ws )?
			int alt299=2;
			try { dbg.enterSubRule(299);
			try { dbg.enterDecision(299, decisionCanBacktrack[299]);

			int LA299_0 = input.LA(1);
			if ( (LA299_0==COMMENT||LA299_0==NL||LA299_0==WS) ) {
				alt299=1;
			}
			} finally {dbg.exitDecision(299);}

			switch (alt299) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1166:30: ws
					{
					dbg.location(1166,30);
					pushFollow(FOLLOW_ws_in_less_selector_interpolation7081);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(299);}
			dbg.location(1166,34);
			match(input,RBRACE,FOLLOW_RBRACE_in_less_selector_interpolation7084); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1167, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_selector_interpolation");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_selector_interpolation"



	// $ANTLR start "sass_selector_interpolation_expression"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1174:1: sass_selector_interpolation_expression : ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )* ;
	public final void sass_selector_interpolation_expression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_selector_interpolation_expression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1174, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1175:5: ( ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )* )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1176:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )*
			{
			dbg.location(1176,9);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1176:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) )
			int alt300=2;
			try { dbg.enterSubRule(300);
			try { dbg.enterDecision(300, decisionCanBacktrack[300]);

			int LA300_0 = input.LA(1);
			if ( (LA300_0==HASH_SYMBOL) ) {
				int LA300_1 = input.LA(2);
				if ( (synpred38_Css3()) ) {
					alt300=1;
				}
				else if ( (true) ) {
					alt300=2;
				}

			}
			else if ( ((LA300_0 >= COLON && LA300_0 <= COMMA)||LA300_0==DOT||LA300_0==GREATER||LA300_0==HASH||LA300_0==IDENT||LA300_0==LBRACKET||LA300_0==LESS_AND||LA300_0==MINUS||LA300_0==RBRACKET||LA300_0==STAR) ) {
				alt300=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 300, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(300);}

			switch (alt300) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1177:13: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
					{
					dbg.location(1177,50);
					pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7132);
					sass_interpolation_expression_var();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1179:13: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET )
					{
					dbg.location(1179,13);
					if ( (input.LA(1) >= COLON && input.LA(1) <= COMMA)||input.LA(1)==DOT||input.LA(1)==GREATER||(input.LA(1) >= HASH && input.LA(1) <= HASH_SYMBOL)||input.LA(1)==IDENT||input.LA(1)==LBRACKET||input.LA(1)==LESS_AND||input.LA(1)==MINUS||input.LA(1)==RBRACKET||input.LA(1)==STAR ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;

			}
			} finally {dbg.exitSubRule(300);}
			dbg.location(1181,9);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1181:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )*
			try { dbg.enterSubRule(303);

			loop303:
			while (true) {
				int alt303=2;
				try { dbg.enterDecision(303, decisionCanBacktrack[303]);

				try {
					isCyclicDecision = true;
					alt303 = dfa303.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(303);}

				switch (alt303) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1182:13: ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) )
					{
					dbg.location(1182,13);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1182:13: ( ws )?
					int alt301=2;
					try { dbg.enterSubRule(301);
					try { dbg.enterDecision(301, decisionCanBacktrack[301]);

					int LA301_0 = input.LA(1);
					if ( (LA301_0==COMMENT||LA301_0==NL||LA301_0==WS) ) {
						alt301=1;
					}
					} finally {dbg.exitDecision(301);}

					switch (alt301) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1182:13: ws
							{
							dbg.location(1182,13);
							pushFollow(FOLLOW_ws_in_sass_selector_interpolation_expression7241);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(301);}
					dbg.location(1183,13);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1183:13: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) )
					int alt302=2;
					try { dbg.enterSubRule(302);
					try { dbg.enterDecision(302, decisionCanBacktrack[302]);

					int LA302_0 = input.LA(1);
					if ( (LA302_0==HASH_SYMBOL) ) {
						int LA302_1 = input.LA(2);
						if ( (synpred39_Css3()) ) {
							alt302=1;
						}
						else if ( (true) ) {
							alt302=2;
						}

					}
					else if ( ((LA302_0 >= COLON && LA302_0 <= COMMA)||LA302_0==DOT||LA302_0==GREATER||LA302_0==HASH||LA302_0==IDENT||LA302_0==LBRACKET||LA302_0==LESS_AND||LA302_0==MINUS||LA302_0==RBRACKET||LA302_0==STAR) ) {
						alt302=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 302, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(302);}

					switch (alt302) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1184:17: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
							{
							dbg.location(1184,54);
							pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7278);
							sass_interpolation_expression_var();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1186:17: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET )
							{
							dbg.location(1186,17);
							if ( (input.LA(1) >= COLON && input.LA(1) <= COMMA)||input.LA(1)==DOT||input.LA(1)==GREATER||(input.LA(1) >= HASH && input.LA(1) <= HASH_SYMBOL)||input.LA(1)==IDENT||input.LA(1)==LBRACKET||input.LA(1)==LESS_AND||input.LA(1)==MINUS||input.LA(1)==RBRACKET||input.LA(1)==STAR ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}
							}
							break;

					}
					} finally {dbg.exitSubRule(302);}

					}
					break;

				default :
					break loop303;
				}
			}
			} finally {dbg.exitSubRule(303);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1190, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_selector_interpolation_expression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_selector_interpolation_expression"



	// $ANTLR start "sass_declaration_interpolation_expression"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1192:1: sass_declaration_interpolation_expression : ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )* ;
	public final void sass_declaration_interpolation_expression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_declaration_interpolation_expression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1192, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1193:5: ( ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )* )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1194:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*
			{
			dbg.location(1194,9);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1194:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
			int alt304=2;
			try { dbg.enterSubRule(304);
			try { dbg.enterDecision(304, decisionCanBacktrack[304]);

			int LA304_0 = input.LA(1);
			if ( (LA304_0==HASH_SYMBOL) ) {
				int LA304_1 = input.LA(2);
				if ( (LA304_1==LBRACE) && (synpred40_Css3())) {
					alt304=1;
				}
				else if ( (LA304_1==COLON||LA304_1==COMMENT||LA304_1==DOT||(LA304_1 >= HASH && LA304_1 <= HASH_SYMBOL)||LA304_1==IDENT||LA304_1==MINUS||LA304_1==NL||LA304_1==WS) ) {
					alt304=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 304, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA304_0==DOT||LA304_0==HASH||LA304_0==IDENT||LA304_0==MINUS) ) {
				alt304=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 304, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(304);}

			switch (alt304) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1195:13: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
					{
					dbg.location(1195,50);
					pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7429);
					sass_interpolation_expression_var();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1197:13: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH )
					{
					dbg.location(1197,13);
					if ( input.LA(1)==DOT||(input.LA(1) >= HASH && input.LA(1) <= HASH_SYMBOL)||input.LA(1)==IDENT||input.LA(1)==MINUS ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;

			}
			} finally {dbg.exitSubRule(304);}
			dbg.location(1199,9);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1199:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*
			try { dbg.enterSubRule(307);

			loop307:
			while (true) {
				int alt307=2;
				try { dbg.enterDecision(307, decisionCanBacktrack[307]);

				try {
					isCyclicDecision = true;
					alt307 = dfa307.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(307);}

				switch (alt307) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1200:13: ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
					{
					dbg.location(1200,13);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1200:13: ( ws )?
					int alt305=2;
					try { dbg.enterSubRule(305);
					try { dbg.enterDecision(305, decisionCanBacktrack[305]);

					int LA305_0 = input.LA(1);
					if ( (LA305_0==COMMENT||LA305_0==NL||LA305_0==WS) ) {
						alt305=1;
					}
					} finally {dbg.exitDecision(305);}

					switch (alt305) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1200:13: ws
							{
							dbg.location(1200,13);
							pushFollow(FOLLOW_ws_in_sass_declaration_interpolation_expression7509);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(305);}
					dbg.location(1201,13);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1201:13: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
					int alt306=2;
					try { dbg.enterSubRule(306);
					try { dbg.enterDecision(306, decisionCanBacktrack[306]);

					int LA306_0 = input.LA(1);
					if ( (LA306_0==HASH_SYMBOL) ) {
						int LA306_1 = input.LA(2);
						if ( (LA306_1==LBRACE) && (synpred41_Css3())) {
							alt306=1;
						}
						else if ( (LA306_1==COLON||LA306_1==COMMENT||LA306_1==DOT||(LA306_1 >= HASH && LA306_1 <= HASH_SYMBOL)||LA306_1==IDENT||LA306_1==MINUS||LA306_1==NL||LA306_1==WS) ) {
							alt306=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 306, 1, input);
								dbg.recognitionException(nvae);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA306_0==DOT||LA306_0==HASH||LA306_0==IDENT||LA306_0==MINUS) ) {
						alt306=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 306, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(306);}

					switch (alt306) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1202:17: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
							{
							dbg.location(1202,54);
							pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7546);
							sass_interpolation_expression_var();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:17: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH )
							{
							dbg.location(1204,17);
							if ( input.LA(1)==DOT||(input.LA(1) >= HASH && input.LA(1) <= HASH_SYMBOL)||input.LA(1)==IDENT||input.LA(1)==MINUS ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}
							}
							break;

					}
					} finally {dbg.exitSubRule(306);}

					}
					break;

				default :
					break loop307;
				}
			}
			} finally {dbg.exitSubRule(307);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1208, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_declaration_interpolation_expression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_declaration_interpolation_expression"



	// $ANTLR start "sass_interpolation_expression_var"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:1: sass_interpolation_expression_var : HASH_SYMBOL LBRACE cp_expression RBRACE ;
	public final void sass_interpolation_expression_var() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_interpolation_expression_var");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1210, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1211:5: ( HASH_SYMBOL LBRACE cp_expression RBRACE )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1212:9: HASH_SYMBOL LBRACE cp_expression RBRACE
			{
			dbg.location(1212,9);
			match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var7651); if (state.failed) return;dbg.location(1212,21);
			match(input,LBRACE,FOLLOW_LBRACE_in_sass_interpolation_expression_var7653); if (state.failed) return;dbg.location(1212,28);
			pushFollow(FOLLOW_cp_expression_in_sass_interpolation_expression_var7655);
			cp_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1212,42);
			match(input,RBRACE,FOLLOW_RBRACE_in_sass_interpolation_expression_var7657); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1213, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_interpolation_expression_var");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_interpolation_expression_var"



	// $ANTLR start "sass_nested_properties"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1233:1: sass_nested_properties : property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
	public final void sass_nested_properties() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_nested_properties");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1233, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1234:5: ( property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:5: property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
			{
			dbg.location(1235,5);
			pushFollow(FOLLOW_property_in_sass_nested_properties7697);
			property();
			state._fsp--;
			if (state.failed) return;dbg.location(1235,14);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:14: ( ws )?
			int alt308=2;
			try { dbg.enterSubRule(308);
			try { dbg.enterDecision(308, decisionCanBacktrack[308]);

			int LA308_0 = input.LA(1);
			if ( (LA308_0==COMMENT||LA308_0==NL||LA308_0==WS) ) {
				alt308=1;
			}
			} finally {dbg.exitDecision(308);}

			switch (alt308) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:14: ws
					{
					dbg.location(1235,14);
					pushFollow(FOLLOW_ws_in_sass_nested_properties7699);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(308);}
			dbg.location(1235,18);
			match(input,COLON,FOLLOW_COLON_in_sass_nested_properties7702); if (state.failed) return;dbg.location(1235,24);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:24: ( ws )?
			int alt309=2;
			try { dbg.enterSubRule(309);
			try { dbg.enterDecision(309, decisionCanBacktrack[309]);

			int LA309_0 = input.LA(1);
			if ( (LA309_0==COMMENT||LA309_0==NL||LA309_0==WS) ) {
				alt309=1;
			}
			} finally {dbg.exitDecision(309);}

			switch (alt309) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:24: ws
					{
					dbg.location(1235,24);
					pushFollow(FOLLOW_ws_in_sass_nested_properties7704);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(309);}
			dbg.location(1235,28);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:28: ( propertyValue ( ws )? )?
			int alt311=2;
			try { dbg.enterSubRule(311);
			try { dbg.enterDecision(311, decisionCanBacktrack[311]);

			int LA311_0 = input.LA(1);
			if ( ((LA311_0 >= ANGLE && LA311_0 <= AT_IDENT)||(LA311_0 >= BOTTOMCENTER_SYM && LA311_0 <= BOTTOMRIGHT_SYM)||LA311_0==CHARSET_SYM||LA311_0==COUNTER_STYLE_SYM||LA311_0==DIMENSION||LA311_0==EMS||LA311_0==EXS||(LA311_0 >= FONT_FACE_SYM && LA311_0 <= FREQ)||LA311_0==GEN||(LA311_0 >= HASH && LA311_0 <= HASH_SYMBOL)||LA311_0==IDENT||LA311_0==IMPORT_SYM||(LA311_0 >= LEFTBOTTOM_SYM && LA311_0 <= LENGTH)||LA311_0==LESS_JS_STRING||(LA311_0 >= MEDIA_SYM && LA311_0 <= MOZ_DOCUMENT_SYM)||LA311_0==NAMESPACE_SYM||LA311_0==NUMBER||(LA311_0 >= PAGE_SYM && LA311_0 <= PERCENTAGE_SYMBOL)||LA311_0==PLUS||(LA311_0 >= REM && LA311_0 <= RIGHTTOP_SYM)||(LA311_0 >= SASS_CONTENT && LA311_0 <= SASS_DEBUG)||(LA311_0 >= SASS_EACH && LA311_0 <= SASS_EXTEND)||(LA311_0 >= SASS_FOR && LA311_0 <= SASS_MIXIN)||(LA311_0 >= SASS_RETURN && LA311_0 <= SASS_WHILE)||LA311_0==STRING||(LA311_0 >= TILDE && LA311_0 <= TOPRIGHT_SYM)||LA311_0==URI||LA311_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt311=1;
			}
			} finally {dbg.exitDecision(311);}

			switch (alt311) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:29: propertyValue ( ws )?
					{
					dbg.location(1235,29);
					pushFollow(FOLLOW_propertyValue_in_sass_nested_properties7708);
					propertyValue();
					state._fsp--;
					if (state.failed) return;dbg.location(1235,43);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:43: ( ws )?
					int alt310=2;
					try { dbg.enterSubRule(310);
					try { dbg.enterDecision(310, decisionCanBacktrack[310]);

					int LA310_0 = input.LA(1);
					if ( (LA310_0==COMMENT||LA310_0==NL||LA310_0==WS) ) {
						alt310=1;
					}
					} finally {dbg.exitDecision(310);}

					switch (alt310) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:43: ws
							{
							dbg.location(1235,43);
							pushFollow(FOLLOW_ws_in_sass_nested_properties7710);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(310);}

					}
					break;

			}
			} finally {dbg.exitSubRule(311);}
			dbg.location(1235,49);
			match(input,LBRACE,FOLLOW_LBRACE_in_sass_nested_properties7715); if (state.failed) return;dbg.location(1235,56);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:56: ( ws )?
			int alt312=2;
			try { dbg.enterSubRule(312);
			try { dbg.enterDecision(312, decisionCanBacktrack[312]);

			int LA312_0 = input.LA(1);
			if ( (LA312_0==COMMENT||LA312_0==NL||LA312_0==WS) ) {
				alt312=1;
			}
			} finally {dbg.exitDecision(312);}

			switch (alt312) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:56: ws
					{
					dbg.location(1235,56);
					pushFollow(FOLLOW_ws_in_sass_nested_properties7717);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(312);}
			dbg.location(1235,60);
			pushFollow(FOLLOW_syncToFollow_in_sass_nested_properties7720);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(1235,73);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:73: ( declarations )?
			int alt313=2;
			try { dbg.enterSubRule(313);
			try { dbg.enterDecision(313, decisionCanBacktrack[313]);

			int LA313_0 = input.LA(1);
			if ( ((LA313_0 >= AT_IDENT && LA313_0 <= AT_SIGN)||(LA313_0 >= BOTTOMCENTER_SYM && LA313_0 <= BOTTOMRIGHT_SYM)||(LA313_0 >= CHARSET_SYM && LA313_0 <= COMMA)||LA313_0==COUNTER_STYLE_SYM||LA313_0==DCOLON||LA313_0==DOT||LA313_0==FONT_FACE_SYM||(LA313_0 >= GEN && LA313_0 <= GREATER)||(LA313_0 >= HASH && LA313_0 <= HASH_SYMBOL)||LA313_0==IDENT||LA313_0==IMPORT_SYM||(LA313_0 >= LBRACKET && LA313_0 <= LEFTTOP_SYM)||LA313_0==LESS_AND||(LA313_0 >= MEDIA_SYM && LA313_0 <= MOZ_DOCUMENT_SYM)||LA313_0==NAMESPACE_SYM||LA313_0==PAGE_SYM||(LA313_0 >= PIPE && LA313_0 <= PLUS)||LA313_0==RBRACKET||(LA313_0 >= RIGHTBOTTOM_SYM && LA313_0 <= RIGHTTOP_SYM)||(LA313_0 >= SASS_CONTENT && LA313_0 <= SASS_DEBUG)||(LA313_0 >= SASS_EACH && LA313_0 <= SASS_MIXIN)||(LA313_0 >= SASS_RETURN && LA313_0 <= SEMI)||LA313_0==STAR||LA313_0==TILDE||(LA313_0 >= TOPCENTER_SYM && LA313_0 <= TOPRIGHT_SYM)||LA313_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt313=1;
			}
			} finally {dbg.exitDecision(313);}

			switch (alt313) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:73: declarations
					{
					dbg.location(1235,73);
					pushFollow(FOLLOW_declarations_in_sass_nested_properties7722);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(313);}
			dbg.location(1235,87);
			match(input,RBRACE,FOLLOW_RBRACE_in_sass_nested_properties7725); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1236, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_nested_properties");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_nested_properties"



	// $ANTLR start "sass_extend"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1238:1: sass_extend : SASS_EXTEND ws simpleSelectorSequence ( ( ws )? SASS_OPTIONAL )? ;
	public final void sass_extend() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_extend");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1238, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1239:5: ( SASS_EXTEND ws simpleSelectorSequence ( ( ws )? SASS_OPTIONAL )? )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:5: SASS_EXTEND ws simpleSelectorSequence ( ( ws )? SASS_OPTIONAL )?
			{
			dbg.location(1240,5);
			match(input,SASS_EXTEND,FOLLOW_SASS_EXTEND_in_sass_extend7746); if (state.failed) return;dbg.location(1240,17);
			pushFollow(FOLLOW_ws_in_sass_extend7748);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1240,20);
			pushFollow(FOLLOW_simpleSelectorSequence_in_sass_extend7750);
			simpleSelectorSequence();
			state._fsp--;
			if (state.failed) return;dbg.location(1240,43);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:43: ( ( ws )? SASS_OPTIONAL )?
			int alt315=2;
			try { dbg.enterSubRule(315);
			try { dbg.enterDecision(315, decisionCanBacktrack[315]);

			try {
				isCyclicDecision = true;
				alt315 = dfa315.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(315);}

			switch (alt315) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:44: ( ws )? SASS_OPTIONAL
					{
					dbg.location(1240,44);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:44: ( ws )?
					int alt314=2;
					try { dbg.enterSubRule(314);
					try { dbg.enterDecision(314, decisionCanBacktrack[314]);

					int LA314_0 = input.LA(1);
					if ( (LA314_0==COMMENT||LA314_0==NL||LA314_0==WS) ) {
						alt314=1;
					}
					} finally {dbg.exitDecision(314);}

					switch (alt314) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:44: ws
							{
							dbg.location(1240,44);
							pushFollow(FOLLOW_ws_in_sass_extend7753);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(314);}
					dbg.location(1240,48);
					match(input,SASS_OPTIONAL,FOLLOW_SASS_OPTIONAL_in_sass_extend7756); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(315);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1241, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_extend");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_extend"



	// $ANTLR start "sass_extend_only_selector"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1243:1: sass_extend_only_selector : SASS_EXTEND_ONLY_SELECTOR ;
	public final void sass_extend_only_selector() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_extend_only_selector");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1243, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1244:5: ( SASS_EXTEND_ONLY_SELECTOR )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1245:5: SASS_EXTEND_ONLY_SELECTOR
			{
			dbg.location(1245,5);
			match(input,SASS_EXTEND_ONLY_SELECTOR,FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector7779); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1246, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_extend_only_selector");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_extend_only_selector"



	// $ANTLR start "sass_debug"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1248:1: sass_debug : ( SASS_DEBUG | SASS_WARN ) ws cp_expression ;
	public final void sass_debug() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_debug");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1248, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1249:5: ( ( SASS_DEBUG | SASS_WARN ) ws cp_expression )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1250:5: ( SASS_DEBUG | SASS_WARN ) ws cp_expression
			{
			dbg.location(1250,5);
			if ( input.LA(1)==SASS_DEBUG||input.LA(1)==SASS_WARN ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}dbg.location(1250,32);
			pushFollow(FOLLOW_ws_in_sass_debug7810);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1250,35);
			pushFollow(FOLLOW_cp_expression_in_sass_debug7812);
			cp_expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1251, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_debug");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_debug"



	// $ANTLR start "sass_control"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1253:1: sass_control : ( sass_if | sass_for | sass_each | sass_while );
	public final void sass_control() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_control");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1253, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1254:5: ( sass_if | sass_for | sass_each | sass_while )
			int alt316=4;
			try { dbg.enterDecision(316, decisionCanBacktrack[316]);

			switch ( input.LA(1) ) {
			case SASS_IF:
				{
				alt316=1;
				}
				break;
			case SASS_FOR:
				{
				alt316=2;
				}
				break;
			case SASS_EACH:
				{
				alt316=3;
				}
				break;
			case SASS_WHILE:
				{
				alt316=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 316, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(316);}

			switch (alt316) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1255:5: sass_if
					{
					dbg.location(1255,5);
					pushFollow(FOLLOW_sass_if_in_sass_control7833);
					sass_if();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1255:15: sass_for
					{
					dbg.location(1255,15);
					pushFollow(FOLLOW_sass_for_in_sass_control7837);
					sass_for();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1255:26: sass_each
					{
					dbg.location(1255,26);
					pushFollow(FOLLOW_sass_each_in_sass_control7841);
					sass_each();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1255:38: sass_while
					{
					dbg.location(1255,38);
					pushFollow(FOLLOW_sass_while_in_sass_control7845);
					sass_while();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1256, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_control");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_control"



	// $ANTLR start "sass_if"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1258:1: sass_if : SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? ;
	public final void sass_if() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_if");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1258, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:5: ( SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1260:5: SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
			{
			dbg.location(1260,5);
			match(input,SASS_IF,FOLLOW_SASS_IF_in_sass_if7866); if (state.failed) return;dbg.location(1260,13);
			pushFollow(FOLLOW_ws_in_sass_if7868);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1260,16);
			pushFollow(FOLLOW_sass_control_expression_in_sass_if7870);
			sass_control_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1260,40);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1260:40: ( ws )?
			int alt317=2;
			try { dbg.enterSubRule(317);
			try { dbg.enterDecision(317, decisionCanBacktrack[317]);

			int LA317_0 = input.LA(1);
			if ( (LA317_0==COMMENT||LA317_0==NL||LA317_0==WS) ) {
				alt317=1;
			}
			} finally {dbg.exitDecision(317);}

			switch (alt317) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1260:40: ws
					{
					dbg.location(1260,40);
					pushFollow(FOLLOW_ws_in_sass_if7872);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(317);}
			dbg.location(1260,44);
			pushFollow(FOLLOW_sass_control_block_in_sass_if7875);
			sass_control_block();
			state._fsp--;
			if (state.failed) return;dbg.location(1260,63);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1260:63: ( ( ws )? sass_else )?
			int alt319=2;
			try { dbg.enterSubRule(319);
			try { dbg.enterDecision(319, decisionCanBacktrack[319]);

			try {
				isCyclicDecision = true;
				alt319 = dfa319.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(319);}

			switch (alt319) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1260:64: ( ws )? sass_else
					{
					dbg.location(1260,64);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1260:64: ( ws )?
					int alt318=2;
					try { dbg.enterSubRule(318);
					try { dbg.enterDecision(318, decisionCanBacktrack[318]);

					int LA318_0 = input.LA(1);
					if ( (LA318_0==COMMENT||LA318_0==NL||LA318_0==WS) ) {
						alt318=1;
					}
					} finally {dbg.exitDecision(318);}

					switch (alt318) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1260:64: ws
							{
							dbg.location(1260,64);
							pushFollow(FOLLOW_ws_in_sass_if7878);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(318);}
					dbg.location(1260,68);
					pushFollow(FOLLOW_sass_else_in_sass_if7881);
					sass_else();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(319);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1261, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_if");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_if"



	// $ANTLR start "sass_else"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1263:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );
	public final void sass_else() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_else");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1263, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:5: ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
			int alt326=2;
			try { dbg.enterDecision(326, decisionCanBacktrack[326]);

			try {
				isCyclicDecision = true;
				alt326 = dfa326.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(326);}

			switch (alt326) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1265:5: SASS_ELSE ( ws )? sass_control_block
					{
					dbg.location(1265,5);
					match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else7904); if (state.failed) return;dbg.location(1265,15);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1265:15: ( ws )?
					int alt320=2;
					try { dbg.enterSubRule(320);
					try { dbg.enterDecision(320, decisionCanBacktrack[320]);

					int LA320_0 = input.LA(1);
					if ( (LA320_0==COMMENT||LA320_0==NL||LA320_0==WS) ) {
						alt320=1;
					}
					} finally {dbg.exitDecision(320);}

					switch (alt320) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1265:15: ws
							{
							dbg.location(1265,15);
							pushFollow(FOLLOW_ws_in_sass_else7906);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(320);}
					dbg.location(1265,19);
					pushFollow(FOLLOW_sass_control_block_in_sass_else7909);
					sass_control_block();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1267:5: SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
					{
					dbg.location(1267,5);
					match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else7921); if (state.failed) return;dbg.location(1267,15);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1267:15: ( ws )?
					int alt321=2;
					try { dbg.enterSubRule(321);
					try { dbg.enterDecision(321, decisionCanBacktrack[321]);

					int LA321_0 = input.LA(1);
					if ( (LA321_0==COMMENT||LA321_0==NL||LA321_0==WS) ) {
						alt321=1;
					}
					} finally {dbg.exitDecision(321);}

					switch (alt321) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1267:15: ws
							{
							dbg.location(1267,15);
							pushFollow(FOLLOW_ws_in_sass_else7923);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(321);}
					dbg.location(1267,19);
					if ( !(evalPredicate(tokenNameEquals("if"),"tokenNameEquals(\"if\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "sass_else", "tokenNameEquals(\"if\")");
					}dbg.location(1267,44);
					match(input,IDENT,FOLLOW_IDENT_in_sass_else7928); if (state.failed) return;dbg.location(1267,59);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1267:59: ( ws )?
					int alt322=2;
					try { dbg.enterSubRule(322);
					try { dbg.enterDecision(322, decisionCanBacktrack[322]);

					int LA322_0 = input.LA(1);
					if ( (LA322_0==COMMENT||LA322_0==NL||LA322_0==WS) ) {
						alt322=1;
					}
					} finally {dbg.exitDecision(322);}

					switch (alt322) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1267:59: ws
							{
							dbg.location(1267,59);
							pushFollow(FOLLOW_ws_in_sass_else7932);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(322);}
					dbg.location(1267,63);
					pushFollow(FOLLOW_sass_control_expression_in_sass_else7935);
					sass_control_expression();
					state._fsp--;
					if (state.failed) return;dbg.location(1267,87);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1267:87: ( ws )?
					int alt323=2;
					try { dbg.enterSubRule(323);
					try { dbg.enterDecision(323, decisionCanBacktrack[323]);

					int LA323_0 = input.LA(1);
					if ( (LA323_0==COMMENT||LA323_0==NL||LA323_0==WS) ) {
						alt323=1;
					}
					} finally {dbg.exitDecision(323);}

					switch (alt323) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1267:87: ws
							{
							dbg.location(1267,87);
							pushFollow(FOLLOW_ws_in_sass_else7937);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(323);}
					dbg.location(1267,91);
					pushFollow(FOLLOW_sass_control_block_in_sass_else7940);
					sass_control_block();
					state._fsp--;
					if (state.failed) return;dbg.location(1267,110);
					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1267:110: ( ( ws )? sass_else )?
					int alt325=2;
					try { dbg.enterSubRule(325);
					try { dbg.enterDecision(325, decisionCanBacktrack[325]);

					try {
						isCyclicDecision = true;
						alt325 = dfa325.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(325);}

					switch (alt325) {
						case 1 :
							dbg.enterAlt(1);

							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1267:111: ( ws )? sass_else
							{
							dbg.location(1267,111);
							// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1267:111: ( ws )?
							int alt324=2;
							try { dbg.enterSubRule(324);
							try { dbg.enterDecision(324, decisionCanBacktrack[324]);

							int LA324_0 = input.LA(1);
							if ( (LA324_0==COMMENT||LA324_0==NL||LA324_0==WS) ) {
								alt324=1;
							}
							} finally {dbg.exitDecision(324);}

							switch (alt324) {
								case 1 :
									dbg.enterAlt(1);

									// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1267:111: ws
									{
									dbg.location(1267,111);
									pushFollow(FOLLOW_ws_in_sass_else7943);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(324);}
							dbg.location(1267,115);
							pushFollow(FOLLOW_sass_else_in_sass_else7946);
							sass_else();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(325);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1268, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_else");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_else"



	// $ANTLR start "sass_control_expression"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1270:1: sass_control_expression : cp_expression ;
	public final void sass_control_expression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_control_expression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1270, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1271:5: ( cp_expression )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1272:5: cp_expression
			{
			dbg.location(1272,5);
			pushFollow(FOLLOW_cp_expression_in_sass_control_expression7969);
			cp_expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1273, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_control_expression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_control_expression"



	// $ANTLR start "sass_for"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1275:1: sass_for : SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block ;
	public final void sass_for() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_for");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1275, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1276:5: ( SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1277:5: SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block
			{
			dbg.location(1277,5);
			match(input,SASS_FOR,FOLLOW_SASS_FOR_in_sass_for7990); if (state.failed) return;dbg.location(1277,14);
			pushFollow(FOLLOW_ws_in_sass_for7992);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1277,17);
			pushFollow(FOLLOW_cp_variable_in_sass_for7994);
			cp_variable();
			state._fsp--;
			if (state.failed) return;dbg.location(1277,29);
			pushFollow(FOLLOW_ws_in_sass_for7996);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1277,32);
			if ( !(evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_for", "tokenNameEquals(\"from\")");
			}dbg.location(1277,59);
			match(input,IDENT,FOLLOW_IDENT_in_sass_for8000); if (state.failed) return;dbg.location(1277,74);
			pushFollow(FOLLOW_ws_in_sass_for8004);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1277,77);
			pushFollow(FOLLOW_cp_math_expression_in_sass_for8006);
			cp_math_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1277,96);
			pushFollow(FOLLOW_ws_in_sass_for8008);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1277,99);
			if ( !(evalPredicate(tokenNameEquals("to")|tokenNameEquals("through"),"tokenNameEquals(\"to\")|tokenNameEquals(\"through\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_for", "tokenNameEquals(\"to\")|tokenNameEquals(\"through\")");
			}dbg.location(1277,151);
			match(input,IDENT,FOLLOW_IDENT_in_sass_for8012); if (state.failed) return;dbg.location(1277,173);
			pushFollow(FOLLOW_ws_in_sass_for8016);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1277,176);
			pushFollow(FOLLOW_cp_math_expression_in_sass_for8018);
			cp_math_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1277,195);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1277:195: ( ws )?
			int alt327=2;
			try { dbg.enterSubRule(327);
			try { dbg.enterDecision(327, decisionCanBacktrack[327]);

			int LA327_0 = input.LA(1);
			if ( (LA327_0==COMMENT||LA327_0==NL||LA327_0==WS) ) {
				alt327=1;
			}
			} finally {dbg.exitDecision(327);}

			switch (alt327) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1277:195: ws
					{
					dbg.location(1277,195);
					pushFollow(FOLLOW_ws_in_sass_for8020);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(327);}
			dbg.location(1277,199);
			pushFollow(FOLLOW_sass_control_block_in_sass_for8023);
			sass_control_block();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1278, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_for");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_for"



	// $ANTLR start "sass_each"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1280:1: sass_each : SASS_EACH ws cp_variable ws {...}? IDENT ws cp_expression_list ( ws )? sass_control_block ;
	public final void sass_each() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_each");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1280, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1281:5: ( SASS_EACH ws cp_variable ws {...}? IDENT ws cp_expression_list ( ws )? sass_control_block )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1282:5: SASS_EACH ws cp_variable ws {...}? IDENT ws cp_expression_list ( ws )? sass_control_block
			{
			dbg.location(1282,5);
			match(input,SASS_EACH,FOLLOW_SASS_EACH_in_sass_each8044); if (state.failed) return;dbg.location(1282,15);
			pushFollow(FOLLOW_ws_in_sass_each8046);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1282,18);
			pushFollow(FOLLOW_cp_variable_in_sass_each8048);
			cp_variable();
			state._fsp--;
			if (state.failed) return;dbg.location(1282,30);
			pushFollow(FOLLOW_ws_in_sass_each8050);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1282,33);
			if ( !(evalPredicate(tokenNameEquals("in"),"tokenNameEquals(\"in\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_each", "tokenNameEquals(\"in\")");
			}dbg.location(1282,58);
			match(input,IDENT,FOLLOW_IDENT_in_sass_each8054); if (state.failed) return;dbg.location(1282,71);
			pushFollow(FOLLOW_ws_in_sass_each8058);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1282,74);
			pushFollow(FOLLOW_cp_expression_list_in_sass_each8060);
			cp_expression_list();
			state._fsp--;
			if (state.failed) return;dbg.location(1282,93);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1282:93: ( ws )?
			int alt328=2;
			try { dbg.enterSubRule(328);
			try { dbg.enterDecision(328, decisionCanBacktrack[328]);

			int LA328_0 = input.LA(1);
			if ( (LA328_0==COMMENT||LA328_0==NL||LA328_0==WS) ) {
				alt328=1;
			}
			} finally {dbg.exitDecision(328);}

			switch (alt328) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1282:93: ws
					{
					dbg.location(1282,93);
					pushFollow(FOLLOW_ws_in_sass_each8062);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(328);}
			dbg.location(1282,97);
			pushFollow(FOLLOW_sass_control_block_in_sass_each8065);
			sass_control_block();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1283, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_each");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_each"



	// $ANTLR start "sass_while"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1285:1: sass_while : SASS_WHILE ws sass_control_expression ( ws )? sass_control_block ;
	public final void sass_while() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_while");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1285, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1286:5: ( SASS_WHILE ws sass_control_expression ( ws )? sass_control_block )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1287:5: SASS_WHILE ws sass_control_expression ( ws )? sass_control_block
			{
			dbg.location(1287,5);
			match(input,SASS_WHILE,FOLLOW_SASS_WHILE_in_sass_while8086); if (state.failed) return;dbg.location(1287,16);
			pushFollow(FOLLOW_ws_in_sass_while8088);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1287,19);
			pushFollow(FOLLOW_sass_control_expression_in_sass_while8090);
			sass_control_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1287,43);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1287:43: ( ws )?
			int alt329=2;
			try { dbg.enterSubRule(329);
			try { dbg.enterDecision(329, decisionCanBacktrack[329]);

			int LA329_0 = input.LA(1);
			if ( (LA329_0==COMMENT||LA329_0==NL||LA329_0==WS) ) {
				alt329=1;
			}
			} finally {dbg.exitDecision(329);}

			switch (alt329) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1287:43: ws
					{
					dbg.location(1287,43);
					pushFollow(FOLLOW_ws_in_sass_while8092);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(329);}
			dbg.location(1287,47);
			pushFollow(FOLLOW_sass_control_block_in_sass_while8095);
			sass_control_block();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1288, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_while");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_while"



	// $ANTLR start "sass_control_block"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1290:1: sass_control_block : LBRACE ( ws )? ( declarations )? RBRACE ;
	public final void sass_control_block() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_control_block");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1290, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1291:5: ( LBRACE ( ws )? ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1292:5: LBRACE ( ws )? ( declarations )? RBRACE
			{
			dbg.location(1292,5);
			match(input,LBRACE,FOLLOW_LBRACE_in_sass_control_block8116); if (state.failed) return;dbg.location(1292,12);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1292:12: ( ws )?
			int alt330=2;
			try { dbg.enterSubRule(330);
			try { dbg.enterDecision(330, decisionCanBacktrack[330]);

			int LA330_0 = input.LA(1);
			if ( (LA330_0==COMMENT||LA330_0==NL||LA330_0==WS) ) {
				alt330=1;
			}
			} finally {dbg.exitDecision(330);}

			switch (alt330) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1292:12: ws
					{
					dbg.location(1292,12);
					pushFollow(FOLLOW_ws_in_sass_control_block8118);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(330);}
			dbg.location(1292,16);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1292:16: ( declarations )?
			int alt331=2;
			try { dbg.enterSubRule(331);
			try { dbg.enterDecision(331, decisionCanBacktrack[331]);

			int LA331_0 = input.LA(1);
			if ( ((LA331_0 >= AT_IDENT && LA331_0 <= AT_SIGN)||(LA331_0 >= BOTTOMCENTER_SYM && LA331_0 <= BOTTOMRIGHT_SYM)||(LA331_0 >= CHARSET_SYM && LA331_0 <= COMMA)||LA331_0==COUNTER_STYLE_SYM||LA331_0==DCOLON||LA331_0==DOT||LA331_0==FONT_FACE_SYM||(LA331_0 >= GEN && LA331_0 <= GREATER)||(LA331_0 >= HASH && LA331_0 <= HASH_SYMBOL)||LA331_0==IDENT||LA331_0==IMPORT_SYM||(LA331_0 >= LBRACKET && LA331_0 <= LEFTTOP_SYM)||LA331_0==LESS_AND||(LA331_0 >= MEDIA_SYM && LA331_0 <= MOZ_DOCUMENT_SYM)||LA331_0==NAMESPACE_SYM||LA331_0==PAGE_SYM||(LA331_0 >= PIPE && LA331_0 <= PLUS)||LA331_0==RBRACKET||(LA331_0 >= RIGHTBOTTOM_SYM && LA331_0 <= RIGHTTOP_SYM)||(LA331_0 >= SASS_CONTENT && LA331_0 <= SASS_DEBUG)||(LA331_0 >= SASS_EACH && LA331_0 <= SASS_MIXIN)||(LA331_0 >= SASS_RETURN && LA331_0 <= SEMI)||LA331_0==STAR||LA331_0==TILDE||(LA331_0 >= TOPCENTER_SYM && LA331_0 <= TOPRIGHT_SYM)||LA331_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt331=1;
			}
			} finally {dbg.exitDecision(331);}

			switch (alt331) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1292:16: declarations
					{
					dbg.location(1292,16);
					pushFollow(FOLLOW_declarations_in_sass_control_block8121);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(331);}
			dbg.location(1292,30);
			match(input,RBRACE,FOLLOW_RBRACE_in_sass_control_block8124); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1293, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_control_block");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_control_block"



	// $ANTLR start "sass_function_declaration"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1295:1: sass_function_declaration : SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE ;
	public final void sass_function_declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_function_declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1295, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1296:5: ( SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:5: SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE
			{
			dbg.location(1301,5);
			match(input,SASS_FUNCTION,FOLLOW_SASS_FUNCTION_in_sass_function_declaration8166); if (state.failed) return;dbg.location(1301,19);
			pushFollow(FOLLOW_ws_in_sass_function_declaration8168);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1301,22);
			pushFollow(FOLLOW_sass_function_name_in_sass_function_declaration8170);
			sass_function_name();
			state._fsp--;
			if (state.failed) return;dbg.location(1301,41);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:41: ( ws )?
			int alt332=2;
			try { dbg.enterSubRule(332);
			try { dbg.enterDecision(332, decisionCanBacktrack[332]);

			int LA332_0 = input.LA(1);
			if ( (LA332_0==COMMENT||LA332_0==NL||LA332_0==WS) ) {
				alt332=1;
			}
			} finally {dbg.exitDecision(332);}

			switch (alt332) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:41: ws
					{
					dbg.location(1301,41);
					pushFollow(FOLLOW_ws_in_sass_function_declaration8172);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(332);}
			dbg.location(1301,45);
			match(input,LPAREN,FOLLOW_LPAREN_in_sass_function_declaration8175); if (state.failed) return;dbg.location(1301,52);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:52: ( cp_args_list )?
			int alt333=2;
			try { dbg.enterSubRule(333);
			try { dbg.enterDecision(333, decisionCanBacktrack[333]);

			int LA333_0 = input.LA(1);
			if ( (LA333_0==AT_IDENT||(LA333_0 >= BOTTOMCENTER_SYM && LA333_0 <= BOTTOMRIGHT_SYM)||LA333_0==CHARSET_SYM||(LA333_0 >= COUNTER_STYLE_SYM && LA333_0 <= CP_DOTS)||LA333_0==FONT_FACE_SYM||LA333_0==IMPORT_SYM||(LA333_0 >= LEFTBOTTOM_SYM && LA333_0 <= LEFTTOP_SYM)||LA333_0==LESS_REST||LA333_0==MEDIA_SYM||LA333_0==MOZ_DOCUMENT_SYM||LA333_0==NAMESPACE_SYM||LA333_0==PAGE_SYM||(LA333_0 >= RIGHTBOTTOM_SYM && LA333_0 <= RIGHTTOP_SYM)||(LA333_0 >= SASS_CONTENT && LA333_0 <= SASS_DEBUG)||(LA333_0 >= SASS_EACH && LA333_0 <= SASS_EXTEND)||(LA333_0 >= SASS_FOR && LA333_0 <= SASS_MIXIN)||(LA333_0 >= SASS_RETURN && LA333_0 <= SASS_WHILE)||(LA333_0 >= TOPCENTER_SYM && LA333_0 <= TOPRIGHT_SYM)||LA333_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt333=1;
			}
			} finally {dbg.exitDecision(333);}

			switch (alt333) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:52: cp_args_list
					{
					dbg.location(1301,52);
					pushFollow(FOLLOW_cp_args_list_in_sass_function_declaration8177);
					cp_args_list();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(333);}
			dbg.location(1301,66);
			match(input,RPAREN,FOLLOW_RPAREN_in_sass_function_declaration8180); if (state.failed) return;dbg.location(1301,73);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:73: ( ws )?
			int alt334=2;
			try { dbg.enterSubRule(334);
			try { dbg.enterDecision(334, decisionCanBacktrack[334]);

			int LA334_0 = input.LA(1);
			if ( (LA334_0==COMMENT||LA334_0==NL||LA334_0==WS) ) {
				alt334=1;
			}
			} finally {dbg.exitDecision(334);}

			switch (alt334) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:73: ws
					{
					dbg.location(1301,73);
					pushFollow(FOLLOW_ws_in_sass_function_declaration8182);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(334);}
			dbg.location(1301,77);
			match(input,LBRACE,FOLLOW_LBRACE_in_sass_function_declaration8185); if (state.failed) return;dbg.location(1301,84);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:84: ( ws )?
			int alt335=2;
			try { dbg.enterSubRule(335);
			try { dbg.enterDecision(335, decisionCanBacktrack[335]);

			int LA335_0 = input.LA(1);
			if ( (LA335_0==COMMENT||LA335_0==NL||LA335_0==WS) ) {
				alt335=1;
			}
			} finally {dbg.exitDecision(335);}

			switch (alt335) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:84: ws
					{
					dbg.location(1301,84);
					pushFollow(FOLLOW_ws_in_sass_function_declaration8187);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(335);}
			dbg.location(1301,88);
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:88: ( declarations )?
			int alt336=2;
			try { dbg.enterSubRule(336);
			try { dbg.enterDecision(336, decisionCanBacktrack[336]);

			int LA336_0 = input.LA(1);
			if ( ((LA336_0 >= AT_IDENT && LA336_0 <= AT_SIGN)||(LA336_0 >= BOTTOMCENTER_SYM && LA336_0 <= BOTTOMRIGHT_SYM)||(LA336_0 >= CHARSET_SYM && LA336_0 <= COMMA)||LA336_0==COUNTER_STYLE_SYM||LA336_0==DCOLON||LA336_0==DOT||LA336_0==FONT_FACE_SYM||(LA336_0 >= GEN && LA336_0 <= GREATER)||(LA336_0 >= HASH && LA336_0 <= HASH_SYMBOL)||LA336_0==IDENT||LA336_0==IMPORT_SYM||(LA336_0 >= LBRACKET && LA336_0 <= LEFTTOP_SYM)||LA336_0==LESS_AND||(LA336_0 >= MEDIA_SYM && LA336_0 <= MOZ_DOCUMENT_SYM)||LA336_0==NAMESPACE_SYM||LA336_0==PAGE_SYM||(LA336_0 >= PIPE && LA336_0 <= PLUS)||LA336_0==RBRACKET||(LA336_0 >= RIGHTBOTTOM_SYM && LA336_0 <= RIGHTTOP_SYM)||(LA336_0 >= SASS_CONTENT && LA336_0 <= SASS_DEBUG)||(LA336_0 >= SASS_EACH && LA336_0 <= SASS_MIXIN)||(LA336_0 >= SASS_RETURN && LA336_0 <= SEMI)||LA336_0==STAR||LA336_0==TILDE||(LA336_0 >= TOPCENTER_SYM && LA336_0 <= TOPRIGHT_SYM)||LA336_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt336=1;
			}
			} finally {dbg.exitDecision(336);}

			switch (alt336) {
				case 1 :
					dbg.enterAlt(1);

					// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1301:88: declarations
					{
					dbg.location(1301,88);
					pushFollow(FOLLOW_declarations_in_sass_function_declaration8190);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(336);}
			dbg.location(1301,102);
			match(input,RBRACE,FOLLOW_RBRACE_in_sass_function_declaration8193); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1302, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_function_declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_function_declaration"



	// $ANTLR start "sass_function_name"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1304:1: sass_function_name : IDENT ;
	public final void sass_function_name() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_function_name");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1304, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1305:5: ( IDENT )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1306:5: IDENT
			{
			dbg.location(1306,5);
			match(input,IDENT,FOLLOW_IDENT_in_sass_function_name8214); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1307, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_function_name");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_function_name"



	// $ANTLR start "sass_function_return"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1309:1: sass_function_return : SASS_RETURN ws cp_expression ;
	public final void sass_function_return() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_function_return");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1309, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1310:5: ( SASS_RETURN ws cp_expression )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1311:5: SASS_RETURN ws cp_expression
			{
			dbg.location(1311,5);
			match(input,SASS_RETURN,FOLLOW_SASS_RETURN_in_sass_function_return8235); if (state.failed) return;dbg.location(1311,17);
			pushFollow(FOLLOW_ws_in_sass_function_return8237);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1311,20);
			pushFollow(FOLLOW_cp_expression_in_sass_function_return8239);
			cp_expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1312, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_function_return");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_function_return"



	// $ANTLR start "sass_content"
	// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1314:1: sass_content : SASS_CONTENT ;
	public final void sass_content() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_content");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1314, 0);

		try {
			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1315:5: ( SASS_CONTENT )
			dbg.enterAlt(1);

			// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1316:5: SASS_CONTENT
			{
			dbg.location(1316,5);
			match(input,SASS_CONTENT,FOLLOW_SASS_CONTENT_in_sass_content8260); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1317, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_content");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_content"

	// $ANTLR start synpred1_Css3
	public final void synpred1_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:44: ( ( ws )? mediaQueryList )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:45: ( ws )? mediaQueryList
		{
		dbg.location(363,45);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:45: ( ws )?
		int alt337=2;
		try { dbg.enterSubRule(337);
		try { dbg.enterDecision(337, decisionCanBacktrack[337]);

		int LA337_0 = input.LA(1);
		if ( (LA337_0==COMMENT||LA337_0==NL||LA337_0==WS) ) {
			alt337=1;
		}
		} finally {dbg.exitDecision(337);}

		switch (alt337) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:45: ws
				{
				dbg.location(363,45);
				pushFollow(FOLLOW_ws_in_synpred1_Css3356);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(337);}
		dbg.location(363,49);
		pushFollow(FOLLOW_mediaQueryList_in_synpred1_Css3359);
		mediaQueryList();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred1_Css3

	// $ANTLR start synpred2_Css3
	public final void synpred2_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:98: ( ( ws )? mediaQueryList )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:99: ( ws )? mediaQueryList
		{
		dbg.location(366,99);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:99: ( ws )?
		int alt338=2;
		try { dbg.enterSubRule(338);
		try { dbg.enterDecision(338, decisionCanBacktrack[338]);

		int LA338_0 = input.LA(1);
		if ( (LA338_0==COMMENT||LA338_0==NL||LA338_0==WS) ) {
			alt338=1;
		}
		} finally {dbg.exitDecision(338);}

		switch (alt338) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:99: ws
				{
				dbg.location(366,99);
				pushFollow(FOLLOW_ws_in_synpred2_Css3420);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(338);}
		dbg.location(366,103);
		pushFollow(FOLLOW_mediaQueryList_in_synpred2_Css3423);
		mediaQueryList();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred2_Css3

	// $ANTLR start synpred3_Css3
	public final void synpred3_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:100: ( ( ws )? mediaQueryList )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:101: ( ws )? mediaQueryList
		{
		dbg.location(368,101);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:101: ( ws )?
		int alt339=2;
		try { dbg.enterSubRule(339);
		try { dbg.enterDecision(339, decisionCanBacktrack[339]);

		int LA339_0 = input.LA(1);
		if ( (LA339_0==COMMENT||LA339_0==NL||LA339_0==WS) ) {
			alt339=1;
		}
		} finally {dbg.exitDecision(339);}

		switch (alt339) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:101: ws
				{
				dbg.location(368,101);
				pushFollow(FOLLOW_ws_in_synpred3_Css3474);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(339);}
		dbg.location(368,105);
		pushFollow(FOLLOW_mediaQueryList_in_synpred3_Css3477);
		mediaQueryList();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred3_Css3

	// $ANTLR start synpred4_Css3
	public final void synpred4_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:27: ( ( ws )? SEMI )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:28: ( ws )? SEMI
		{
		dbg.location(383,28);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:28: ( ws )?
		int alt340=2;
		try { dbg.enterSubRule(340);
		try { dbg.enterDecision(340, decisionCanBacktrack[340]);

		int LA340_0 = input.LA(1);
		if ( (LA340_0==COMMENT||LA340_0==NL||LA340_0==WS) ) {
			alt340=1;
		}
		} finally {dbg.exitDecision(340);}

		switch (alt340) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:28: ws
				{
				dbg.location(383,28);
				pushFollow(FOLLOW_ws_in_synpred4_Css3596);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(340);}
		dbg.location(383,32);
		match(input,SEMI,FOLLOW_SEMI_in_synpred4_Css3599); if (state.failed) return;
		}

	}
	// $ANTLR end synpred4_Css3

	// $ANTLR start synpred5_Css3
	public final void synpred5_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:5: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )
		int alt344=2;
		try { dbg.enterDecision(344, decisionCanBacktrack[344]);

		int LA344_0 = input.LA(1);
		if ( (LA344_0==SASS_MIXIN) ) {
			alt344=1;
		}
		else if ( (LA344_0==DOT) ) {
			alt344=2;
		}

		else {
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 344, 0, input);
			dbg.recognitionException(nvae);
			throw nvae;
		}

		} finally {dbg.exitDecision(344);}

		switch (alt344) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:6: SASS_MIXIN
				{
				dbg.location(391,6);
				match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred5_Css3670); if (state.failed) return;
				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:19: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE )
				{
				dbg.location(391,19);
				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:19: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE )
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:20: DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE
				{
				dbg.location(391,20);
				match(input,DOT,FOLLOW_DOT_in_synpred5_Css3675); if (state.failed) return;dbg.location(391,24);
				match(input,IDENT,FOLLOW_IDENT_in_synpred5_Css3677); if (state.failed) return;dbg.location(391,30);
				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:30: ( ws )?
				int alt341=2;
				try { dbg.enterSubRule(341);
				try { dbg.enterDecision(341, decisionCanBacktrack[341]);

				int LA341_0 = input.LA(1);
				if ( (LA341_0==COMMENT||LA341_0==NL||LA341_0==WS) ) {
					alt341=1;
				}
				} finally {dbg.exitDecision(341);}

				switch (alt341) {
					case 1 :
						dbg.enterAlt(1);

						// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:30: ws
						{
						dbg.location(391,30);
						pushFollow(FOLLOW_ws_in_synpred5_Css3679);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(341);}
				dbg.location(391,34);
				match(input,LPAREN,FOLLOW_LPAREN_in_synpred5_Css3682); if (state.failed) return;dbg.location(391,41);
				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:41: (~ RPAREN )*
				try { dbg.enterSubRule(342);

				loop342:
				while (true) {
					int alt342=2;
					try { dbg.enterDecision(342, decisionCanBacktrack[342]);

					int LA342_0 = input.LA(1);
					if ( ((LA342_0 >= A && LA342_0 <= RIGHTTOP_SYM)||(LA342_0 >= S && LA342_0 <= Z)) ) {
						alt342=1;
					}

					} finally {dbg.exitDecision(342);}

					switch (alt342) {
					case 1 :
						dbg.enterAlt(1);

						// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
						{
						dbg.location(391,41);
						if ( (input.LA(1) >= A && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= S && input.LA(1) <= Z) ) {
							input.consume();
							state.errorRecovery=false;
							state.failed=false;
						}
						else {
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							dbg.recognitionException(mse);
							throw mse;
						}
						}
						break;

					default :
						break loop342;
					}
				}
				} finally {dbg.exitSubRule(342);}
				dbg.location(391,52);
				match(input,RPAREN,FOLLOW_RPAREN_in_synpred5_Css3690); if (state.failed) return;dbg.location(391,59);
				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:59: (~ ( LBRACE | SEMI ) )*
				try { dbg.enterSubRule(343);

				loop343:
				while (true) {
					int alt343=2;
					try { dbg.enterDecision(343, decisionCanBacktrack[343]);

					int LA343_0 = input.LA(1);
					if ( ((LA343_0 >= A && LA343_0 <= L)||(LA343_0 >= LBRACKET && LA343_0 <= SASS_WHILE)||(LA343_0 >= SOLIDUS && LA343_0 <= Z)) ) {
						alt343=1;
					}

					} finally {dbg.exitDecision(343);}

					switch (alt343) {
					case 1 :
						dbg.enterAlt(1);

						// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
						{
						dbg.location(391,59);
						if ( (input.LA(1) >= A && input.LA(1) <= L)||(input.LA(1) >= LBRACKET && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= SOLIDUS && input.LA(1) <= Z) ) {
							input.consume();
							state.errorRecovery=false;
							state.failed=false;
						}
						else {
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							dbg.recognitionException(mse);
							throw mse;
						}
						}
						break;

					default :
						break loop343;
					}
				}
				} finally {dbg.exitSubRule(343);}
				dbg.location(391,75);
				match(input,LBRACE,FOLLOW_LBRACE_in_synpred5_Css3700); if (state.failed) return;
				}

				}
				break;

		}
	}
	// $ANTLR end synpred5_Css3

	// $ANTLR start synpred6_Css3
	public final void synpred6_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:7: ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:8: cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI
		{
		dbg.location(393,8);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred6_Css3718);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;dbg.location(393,22);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:22: ( ( ws )? IMPORTANT_SYM )?
		int alt346=2;
		try { dbg.enterSubRule(346);
		try { dbg.enterDecision(346, decisionCanBacktrack[346]);

		try {
			isCyclicDecision = true;
			alt346 = dfa346.predict(input);
		}
		catch (NoViableAltException nvae) {
			dbg.recognitionException(nvae);
			throw nvae;
		}
		} finally {dbg.exitDecision(346);}

		switch (alt346) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:23: ( ws )? IMPORTANT_SYM
				{
				dbg.location(393,23);
				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:23: ( ws )?
				int alt345=2;
				try { dbg.enterSubRule(345);
				try { dbg.enterDecision(345, decisionCanBacktrack[345]);

				int LA345_0 = input.LA(1);
				if ( (LA345_0==COMMENT||LA345_0==NL||LA345_0==WS) ) {
					alt345=1;
				}
				} finally {dbg.exitDecision(345);}

				switch (alt345) {
					case 1 :
						dbg.enterAlt(1);

						// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:23: ws
						{
						dbg.location(393,23);
						pushFollow(FOLLOW_ws_in_synpred6_Css3721);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(345);}
				dbg.location(393,27);
				match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_synpred6_Css3724); if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(346);}
		dbg.location(393,43);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:43: ( ws )?
		int alt347=2;
		try { dbg.enterSubRule(347);
		try { dbg.enterDecision(347, decisionCanBacktrack[347]);

		int LA347_0 = input.LA(1);
		if ( (LA347_0==COMMENT||LA347_0==NL||LA347_0==WS) ) {
			alt347=1;
		}
		} finally {dbg.exitDecision(347);}

		switch (alt347) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:43: ws
				{
				dbg.location(393,43);
				pushFollow(FOLLOW_ws_in_synpred6_Css3728);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(347);}
		dbg.location(393,47);
		match(input,SEMI,FOLLOW_SEMI_in_synpred6_Css3731); if (state.failed) return;
		}

	}
	// $ANTLR end synpred6_Css3

	// $ANTLR start synpred7_Css3
	public final void synpred7_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:7: ( cp_mixin_call )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:8: cp_mixin_call
		{
		dbg.location(394,8);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred7_Css3754);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred7_Css3

	// $ANTLR start synpred8_Css3
	public final void synpred8_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:6: ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:8: (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI
		{
		dbg.location(395,8);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:8: (~ ( LBRACE | SEMI | RBRACE | COLON ) )+
		int cnt348=0;
		try { dbg.enterSubRule(348);

		loop348:
		while (true) {
			int alt348=2;
			try { dbg.enterDecision(348, decisionCanBacktrack[348]);

			int LA348_0 = input.LA(1);
			if ( ((LA348_0 >= A && LA348_0 <= CHARSET_SYM)||(LA348_0 >= COMMA && LA348_0 <= L)||(LA348_0 >= LBRACKET && LA348_0 <= R)||(LA348_0 >= RBRACKET && LA348_0 <= SASS_WHILE)||(LA348_0 >= SOLIDUS && LA348_0 <= Z)) ) {
				alt348=1;
			}

			} finally {dbg.exitDecision(348);}

			switch (alt348) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
				{
				dbg.location(395,8);
				if ( (input.LA(1) >= A && input.LA(1) <= CHARSET_SYM)||(input.LA(1) >= COMMA && input.LA(1) <= L)||(input.LA(1) >= LBRACKET && input.LA(1) <= R)||(input.LA(1) >= RBRACKET && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= SOLIDUS && input.LA(1) <= Z) ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					dbg.recognitionException(mse);
					throw mse;
				}
				}
				break;

			default :
				if ( cnt348 >= 1 ) break loop348;
				if (state.backtracking>0) {state.failed=true; return;}
				EarlyExitException eee = new EarlyExitException(348, input);
				dbg.recognitionException(eee);

				throw eee;
			}
			cnt348++;
		}
		} finally {dbg.exitSubRule(348);}
		dbg.location(395,37);
		match(input,COLON,FOLLOW_COLON_in_synpred8_Css3789); if (state.failed) return;dbg.location(395,43);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:43: (~ ( SEMI | LBRACE | RBRACE ) )+
		int cnt349=0;
		try { dbg.enterSubRule(349);

		loop349:
		while (true) {
			int alt349=2;
			try { dbg.enterDecision(349, decisionCanBacktrack[349]);

			int LA349_0 = input.LA(1);
			if ( ((LA349_0 >= A && LA349_0 <= L)||(LA349_0 >= LBRACKET && LA349_0 <= R)||(LA349_0 >= RBRACKET && LA349_0 <= SASS_WHILE)||(LA349_0 >= SOLIDUS && LA349_0 <= Z)) ) {
				alt349=1;
			}

			} finally {dbg.exitDecision(349);}

			switch (alt349) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
				{
				dbg.location(395,43);
				if ( (input.LA(1) >= A && input.LA(1) <= L)||(input.LA(1) >= LBRACKET && input.LA(1) <= R)||(input.LA(1) >= RBRACKET && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= SOLIDUS && input.LA(1) <= Z) ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					dbg.recognitionException(mse);
					throw mse;
				}
				}
				break;

			default :
				if ( cnt349 >= 1 ) break loop349;
				if (state.backtracking>0) {state.failed=true; return;}
				EarlyExitException eee = new EarlyExitException(349, input);
				dbg.recognitionException(eee);

				throw eee;
			}
			cnt349++;
		}
		} finally {dbg.exitSubRule(349);}
		dbg.location(395,66);
		match(input,SEMI,FOLLOW_SEMI_in_synpred8_Css3801); if (state.failed) return;
		}

	}
	// $ANTLR end synpred8_Css3

	// $ANTLR start synpred9_Css3
	public final void synpred9_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:396:6: ( sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:396:8: sass_declaration_interpolation_expression COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI
		{
		dbg.location(396,8);
		pushFollow(FOLLOW_sass_declaration_interpolation_expression_in_synpred9_Css3814);
		sass_declaration_interpolation_expression();
		state._fsp--;
		if (state.failed) return;dbg.location(396,50);
		match(input,COLON,FOLLOW_COLON_in_synpred9_Css3816); if (state.failed) return;dbg.location(396,56);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:396:56: (~ ( SEMI | LBRACE | RBRACE ) )+
		int cnt350=0;
		try { dbg.enterSubRule(350);

		loop350:
		while (true) {
			int alt350=2;
			try { dbg.enterDecision(350, decisionCanBacktrack[350]);

			int LA350_0 = input.LA(1);
			if ( ((LA350_0 >= A && LA350_0 <= L)||(LA350_0 >= LBRACKET && LA350_0 <= R)||(LA350_0 >= RBRACKET && LA350_0 <= SASS_WHILE)||(LA350_0 >= SOLIDUS && LA350_0 <= Z)) ) {
				alt350=1;
			}

			} finally {dbg.exitDecision(350);}

			switch (alt350) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
				{
				dbg.location(396,56);
				if ( (input.LA(1) >= A && input.LA(1) <= L)||(input.LA(1) >= LBRACKET && input.LA(1) <= R)||(input.LA(1) >= RBRACKET && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= SOLIDUS && input.LA(1) <= Z) ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					dbg.recognitionException(mse);
					throw mse;
				}
				}
				break;

			default :
				if ( cnt350 >= 1 ) break loop350;
				if (state.backtracking>0) {state.failed=true; return;}
				EarlyExitException eee = new EarlyExitException(350, input);
				dbg.recognitionException(eee);

				throw eee;
			}
			cnt350++;
		}
		} finally {dbg.exitSubRule(350);}
		dbg.location(396,79);
		match(input,SEMI,FOLLOW_SEMI_in_synpred9_Css3828); if (state.failed) return;
		}

	}
	// $ANTLR end synpred9_Css3

	// $ANTLR start synpred10_Css3
	public final void synpred10_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:17: ( ( ws )? COMMA )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:18: ( ws )? COMMA
		{
		dbg.location(411,18);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:18: ( ws )?
		int alt351=2;
		try { dbg.enterSubRule(351);
		try { dbg.enterDecision(351, decisionCanBacktrack[351]);

		int LA351_0 = input.LA(1);
		if ( (LA351_0==COMMENT||LA351_0==NL||LA351_0==WS) ) {
			alt351=1;
		}
		} finally {dbg.exitDecision(351);}

		switch (alt351) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:411:18: ws
				{
				dbg.location(411,18);
				pushFollow(FOLLOW_ws_in_synpred10_Css3946);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(351);}
		dbg.location(411,22);
		match(input,COMMA,FOLLOW_COMMA_in_synpred10_Css3949); if (state.failed) return;
		}

	}
	// $ANTLR end synpred10_Css3

	// $ANTLR start synpred11_Css3
	public final void synpred11_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:22: ( ( ws )? SEMI )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:23: ( ws )? SEMI
		{
		dbg.location(451,23);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:23: ( ws )?
		int alt352=2;
		try { dbg.enterSubRule(352);
		try { dbg.enterDecision(352, decisionCanBacktrack[352]);

		int LA352_0 = input.LA(1);
		if ( (LA352_0==COMMENT||LA352_0==NL||LA352_0==WS) ) {
			alt352=1;
		}
		} finally {dbg.exitDecision(352);}

		switch (alt352) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:451:23: ws
				{
				dbg.location(451,23);
				pushFollow(FOLLOW_ws_in_synpred11_Css31245);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(352);}
		dbg.location(451,27);
		match(input,SEMI,FOLLOW_SEMI_in_synpred11_Css31248); if (state.failed) return;
		}

	}
	// $ANTLR end synpred11_Css3

	// $ANTLR start synpred12_Css3
	public final void synpred12_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:9: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )
		int alt356=2;
		try { dbg.enterDecision(356, decisionCanBacktrack[356]);

		int LA356_0 = input.LA(1);
		if ( (LA356_0==SASS_MIXIN) ) {
			alt356=1;
		}
		else if ( (LA356_0==DOT) ) {
			alt356=2;
		}

		else {
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 356, 0, input);
			dbg.recognitionException(nvae);
			throw nvae;
		}

		} finally {dbg.exitDecision(356);}

		switch (alt356) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:10: SASS_MIXIN
				{
				dbg.location(459,10);
				match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred12_Css31323); if (state.failed) return;
				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:23: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE )
				{
				dbg.location(459,23);
				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:23: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE )
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:24: DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE
				{
				dbg.location(459,24);
				match(input,DOT,FOLLOW_DOT_in_synpred12_Css31328); if (state.failed) return;dbg.location(459,28);
				match(input,IDENT,FOLLOW_IDENT_in_synpred12_Css31330); if (state.failed) return;dbg.location(459,34);
				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:34: ( ws )?
				int alt353=2;
				try { dbg.enterSubRule(353);
				try { dbg.enterDecision(353, decisionCanBacktrack[353]);

				int LA353_0 = input.LA(1);
				if ( (LA353_0==COMMENT||LA353_0==NL||LA353_0==WS) ) {
					alt353=1;
				}
				} finally {dbg.exitDecision(353);}

				switch (alt353) {
					case 1 :
						dbg.enterAlt(1);

						// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:34: ws
						{
						dbg.location(459,34);
						pushFollow(FOLLOW_ws_in_synpred12_Css31332);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(353);}
				dbg.location(459,38);
				match(input,LPAREN,FOLLOW_LPAREN_in_synpred12_Css31335); if (state.failed) return;dbg.location(459,45);
				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:45: (~ RPAREN )*
				try { dbg.enterSubRule(354);

				loop354:
				while (true) {
					int alt354=2;
					try { dbg.enterDecision(354, decisionCanBacktrack[354]);

					int LA354_0 = input.LA(1);
					if ( ((LA354_0 >= A && LA354_0 <= RIGHTTOP_SYM)||(LA354_0 >= S && LA354_0 <= Z)) ) {
						alt354=1;
					}

					} finally {dbg.exitDecision(354);}

					switch (alt354) {
					case 1 :
						dbg.enterAlt(1);

						// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
						{
						dbg.location(459,45);
						if ( (input.LA(1) >= A && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= S && input.LA(1) <= Z) ) {
							input.consume();
							state.errorRecovery=false;
							state.failed=false;
						}
						else {
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							dbg.recognitionException(mse);
							throw mse;
						}
						}
						break;

					default :
						break loop354;
					}
				}
				} finally {dbg.exitSubRule(354);}
				dbg.location(459,56);
				match(input,RPAREN,FOLLOW_RPAREN_in_synpred12_Css31343); if (state.failed) return;dbg.location(459,63);
				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:459:63: (~ ( LBRACE | RBRACE | SEMI ) )*
				try { dbg.enterSubRule(355);

				loop355:
				while (true) {
					int alt355=2;
					try { dbg.enterDecision(355, decisionCanBacktrack[355]);

					int LA355_0 = input.LA(1);
					if ( ((LA355_0 >= A && LA355_0 <= L)||(LA355_0 >= LBRACKET && LA355_0 <= R)||(LA355_0 >= RBRACKET && LA355_0 <= SASS_WHILE)||(LA355_0 >= SOLIDUS && LA355_0 <= Z)) ) {
						alt355=1;
					}

					} finally {dbg.exitDecision(355);}

					switch (alt355) {
					case 1 :
						dbg.enterAlt(1);

						// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
						{
						dbg.location(459,63);
						if ( (input.LA(1) >= A && input.LA(1) <= L)||(input.LA(1) >= LBRACKET && input.LA(1) <= R)||(input.LA(1) >= RBRACKET && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= SOLIDUS && input.LA(1) <= Z) ) {
							input.consume();
							state.errorRecovery=false;
							state.failed=false;
						}
						else {
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							dbg.recognitionException(mse);
							throw mse;
						}
						}
						break;

					default :
						break loop355;
					}
				}
				} finally {dbg.exitSubRule(355);}
				dbg.location(459,86);
				match(input,LBRACE,FOLLOW_LBRACE_in_synpred12_Css31355); if (state.failed) return;
				}

				}
				break;

		}
	}
	// $ANTLR end synpred12_Css3

	// $ANTLR start synpred13_Css3
	public final void synpred13_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:461:11: ( cp_mixin_call ( ws )? SEMI )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:461:12: cp_mixin_call ( ws )? SEMI
		{
		dbg.location(461,12);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred13_Css31381);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;dbg.location(461,26);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:461:26: ( ws )?
		int alt357=2;
		try { dbg.enterSubRule(357);
		try { dbg.enterDecision(357, decisionCanBacktrack[357]);

		int LA357_0 = input.LA(1);
		if ( (LA357_0==COMMENT||LA357_0==NL||LA357_0==WS) ) {
			alt357=1;
		}
		} finally {dbg.exitDecision(357);}

		switch (alt357) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:461:26: ws
				{
				dbg.location(461,26);
				pushFollow(FOLLOW_ws_in_synpred13_Css31383);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(357);}
		dbg.location(461,30);
		match(input,SEMI,FOLLOW_SEMI_in_synpred13_Css31386); if (state.failed) return;
		}

	}
	// $ANTLR end synpred13_Css3

	// $ANTLR start synpred14_Css3
	public final void synpred14_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:11: ( cp_mixin_call )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:12: cp_mixin_call
		{
		dbg.location(462,12);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred14_Css31405);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred14_Css3

	// $ANTLR start synpred15_Css3
	public final void synpred15_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:600:5: ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:600:6: (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE
		{
		dbg.location(600,6);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:600:6: (~ ( HASH_SYMBOL | COLON ) )*
		try { dbg.enterSubRule(358);

		loop358:
		while (true) {
			int alt358=2;
			try { dbg.enterDecision(358, decisionCanBacktrack[358]);

			int LA358_0 = input.LA(1);
			if ( ((LA358_0 >= A && LA358_0 <= CHARSET_SYM)||(LA358_0 >= COMMA && LA358_0 <= HASH)||(LA358_0 >= HEXCHAR && LA358_0 <= Z)) ) {
				alt358=1;
			}

			} finally {dbg.exitDecision(358);}

			switch (alt358) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
				{
				dbg.location(600,6);
				if ( (input.LA(1) >= A && input.LA(1) <= CHARSET_SYM)||(input.LA(1) >= COMMA && input.LA(1) <= HASH)||(input.LA(1) >= HEXCHAR && input.LA(1) <= Z) ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					dbg.recognitionException(mse);
					throw mse;
				}
				}
				break;

			default :
				break loop358;
			}
		}
		} finally {dbg.exitSubRule(358);}
		dbg.location(600,28);
		match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_synpred15_Css32419); if (state.failed) return;dbg.location(600,40);
		match(input,LBRACE,FOLLOW_LBRACE_in_synpred15_Css32421); if (state.failed) return;
		}

	}
	// $ANTLR end synpred15_Css3

	// $ANTLR start synpred16_Css3
	public final void synpred16_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:626:25: ( ( ws )? SEMI )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:626:26: ( ws )? SEMI
		{
		dbg.location(626,26);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:626:26: ( ws )?
		int alt359=2;
		try { dbg.enterSubRule(359);
		try { dbg.enterDecision(359, decisionCanBacktrack[359]);

		int LA359_0 = input.LA(1);
		if ( (LA359_0==COMMENT||LA359_0==NL||LA359_0==WS) ) {
			alt359=1;
		}
		} finally {dbg.exitDecision(359);}

		switch (alt359) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:626:26: ws
				{
				dbg.location(626,26);
				pushFollow(FOLLOW_ws_in_synpred16_Css32555);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(359);}
		dbg.location(626,30);
		match(input,SEMI,FOLLOW_SEMI_in_synpred16_Css32558); if (state.failed) return;
		}

	}
	// $ANTLR end synpred16_Css3

	// $ANTLR start synpred17_Css3
	public final void synpred17_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:634:5: ( cp_variable_declaration )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:634:6: cp_variable_declaration
		{
		dbg.location(634,6);
		pushFollow(FOLLOW_cp_variable_declaration_in_synpred17_Css32629);
		cp_variable_declaration();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred17_Css3

	// $ANTLR start synpred18_Css3
	public final void synpred18_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:7: ( sass_nested_properties )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:635:8: sass_nested_properties
		{
		dbg.location(635,8);
		pushFollow(FOLLOW_sass_nested_properties_in_synpred18_Css32641);
		sass_nested_properties();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred18_Css3

	// $ANTLR start synpred19_Css3
	public final void synpred19_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:7: ( propertyDeclaration )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:636:8: propertyDeclaration
		{
		dbg.location(636,8);
		pushFollow(FOLLOW_propertyDeclaration_in_synpred19_Css32653);
		propertyDeclaration();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred19_Css3

	// $ANTLR start synpred20_Css3
	public final void synpred20_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:638:7: ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:638:8: property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI )
		{
		dbg.location(638,8);
		pushFollow(FOLLOW_property_in_synpred20_Css32670);
		property();
		state._fsp--;
		if (state.failed) return;dbg.location(638,17);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:638:17: ( ws )?
		int alt360=2;
		try { dbg.enterSubRule(360);
		try { dbg.enterDecision(360, decisionCanBacktrack[360]);

		int LA360_0 = input.LA(1);
		if ( (LA360_0==COMMENT||LA360_0==NL||LA360_0==WS) ) {
			alt360=1;
		}
		} finally {dbg.exitDecision(360);}

		switch (alt360) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:638:17: ws
				{
				dbg.location(638,17);
				pushFollow(FOLLOW_ws_in_synpred20_Css32672);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(360);}
		dbg.location(638,21);
		match(input,COLON,FOLLOW_COLON_in_synpred20_Css32675); if (state.failed) return;dbg.location(638,27);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:638:27: (~ ( LBRACE | SEMI | RBRACE ) )*
		try { dbg.enterSubRule(361);

		loop361:
		while (true) {
			int alt361=2;
			try { dbg.enterDecision(361, decisionCanBacktrack[361]);

			int LA361_0 = input.LA(1);
			if ( ((LA361_0 >= A && LA361_0 <= L)||(LA361_0 >= LBRACKET && LA361_0 <= R)||(LA361_0 >= RBRACKET && LA361_0 <= SASS_WHILE)||(LA361_0 >= SOLIDUS && LA361_0 <= Z)) ) {
				alt361=1;
			}

			} finally {dbg.exitDecision(361);}

			switch (alt361) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
				{
				dbg.location(638,27);
				if ( (input.LA(1) >= A && input.LA(1) <= L)||(input.LA(1) >= LBRACKET && input.LA(1) <= R)||(input.LA(1) >= RBRACKET && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= SOLIDUS && input.LA(1) <= Z) ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					dbg.recognitionException(mse);
					throw mse;
				}
				}
				break;

			default :
				break loop361;
			}
		}
		} finally {dbg.exitSubRule(361);}
		dbg.location(638,50);
		if ( input.LA(1)==RBRACE||input.LA(1)==SEMI ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			dbg.recognitionException(mse);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred20_Css3

	// $ANTLR start synpred21_Css3
	public final void synpred21_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:7: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE ) )
		int alt365=2;
		try { dbg.enterDecision(365, decisionCanBacktrack[365]);

		int LA365_0 = input.LA(1);
		if ( (LA365_0==SASS_MIXIN) ) {
			alt365=1;
		}
		else if ( (LA365_0==DOT) ) {
			alt365=2;
		}

		else {
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 365, 0, input);
			dbg.recognitionException(nvae);
			throw nvae;
		}

		} finally {dbg.exitDecision(365);}

		switch (alt365) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:8: SASS_MIXIN
				{
				dbg.location(639,8);
				match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred21_Css32704); if (state.failed) return;
				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:21: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE )
				{
				dbg.location(639,21);
				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:21: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE )
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:22: DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI | RBRACE ) )* LBRACE
				{
				dbg.location(639,22);
				match(input,DOT,FOLLOW_DOT_in_synpred21_Css32709); if (state.failed) return;dbg.location(639,26);
				match(input,IDENT,FOLLOW_IDENT_in_synpred21_Css32711); if (state.failed) return;dbg.location(639,32);
				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:32: ( ws )?
				int alt362=2;
				try { dbg.enterSubRule(362);
				try { dbg.enterDecision(362, decisionCanBacktrack[362]);

				int LA362_0 = input.LA(1);
				if ( (LA362_0==COMMENT||LA362_0==NL||LA362_0==WS) ) {
					alt362=1;
				}
				} finally {dbg.exitDecision(362);}

				switch (alt362) {
					case 1 :
						dbg.enterAlt(1);

						// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:32: ws
						{
						dbg.location(639,32);
						pushFollow(FOLLOW_ws_in_synpred21_Css32713);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(362);}
				dbg.location(639,36);
				match(input,LPAREN,FOLLOW_LPAREN_in_synpred21_Css32716); if (state.failed) return;dbg.location(639,43);
				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:43: (~ RPAREN )*
				try { dbg.enterSubRule(363);

				loop363:
				while (true) {
					int alt363=2;
					try { dbg.enterDecision(363, decisionCanBacktrack[363]);

					int LA363_0 = input.LA(1);
					if ( ((LA363_0 >= A && LA363_0 <= RIGHTTOP_SYM)||(LA363_0 >= S && LA363_0 <= Z)) ) {
						alt363=1;
					}

					} finally {dbg.exitDecision(363);}

					switch (alt363) {
					case 1 :
						dbg.enterAlt(1);

						// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
						{
						dbg.location(639,43);
						if ( (input.LA(1) >= A && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= S && input.LA(1) <= Z) ) {
							input.consume();
							state.errorRecovery=false;
							state.failed=false;
						}
						else {
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							dbg.recognitionException(mse);
							throw mse;
						}
						}
						break;

					default :
						break loop363;
					}
				}
				} finally {dbg.exitSubRule(363);}
				dbg.location(639,54);
				match(input,RPAREN,FOLLOW_RPAREN_in_synpred21_Css32724); if (state.failed) return;dbg.location(639,61);
				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:639:61: (~ ( LBRACE | SEMI | RBRACE ) )*
				try { dbg.enterSubRule(364);

				loop364:
				while (true) {
					int alt364=2;
					try { dbg.enterDecision(364, decisionCanBacktrack[364]);

					int LA364_0 = input.LA(1);
					if ( ((LA364_0 >= A && LA364_0 <= L)||(LA364_0 >= LBRACKET && LA364_0 <= R)||(LA364_0 >= RBRACKET && LA364_0 <= SASS_WHILE)||(LA364_0 >= SOLIDUS && LA364_0 <= Z)) ) {
						alt364=1;
					}

					} finally {dbg.exitDecision(364);}

					switch (alt364) {
					case 1 :
						dbg.enterAlt(1);

						// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
						{
						dbg.location(639,61);
						if ( (input.LA(1) >= A && input.LA(1) <= L)||(input.LA(1) >= LBRACKET && input.LA(1) <= R)||(input.LA(1) >= RBRACKET && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= SOLIDUS && input.LA(1) <= Z) ) {
							input.consume();
							state.errorRecovery=false;
							state.failed=false;
						}
						else {
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							dbg.recognitionException(mse);
							throw mse;
						}
						}
						break;

					default :
						break loop364;
					}
				}
				} finally {dbg.exitSubRule(364);}
				dbg.location(639,84);
				match(input,LBRACE,FOLLOW_LBRACE_in_synpred21_Css32736); if (state.failed) return;
				}

				}
				break;

		}
	}
	// $ANTLR end synpred21_Css3

	// $ANTLR start synpred22_Css3
	public final void synpred22_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:641:7: ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:641:8: cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI
		{
		dbg.location(641,8);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred22_Css32754);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;dbg.location(641,22);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:641:22: ( ( ws )? IMPORTANT_SYM )?
		int alt367=2;
		try { dbg.enterSubRule(367);
		try { dbg.enterDecision(367, decisionCanBacktrack[367]);

		try {
			isCyclicDecision = true;
			alt367 = dfa367.predict(input);
		}
		catch (NoViableAltException nvae) {
			dbg.recognitionException(nvae);
			throw nvae;
		}
		} finally {dbg.exitDecision(367);}

		switch (alt367) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:641:23: ( ws )? IMPORTANT_SYM
				{
				dbg.location(641,23);
				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:641:23: ( ws )?
				int alt366=2;
				try { dbg.enterSubRule(366);
				try { dbg.enterDecision(366, decisionCanBacktrack[366]);

				int LA366_0 = input.LA(1);
				if ( (LA366_0==COMMENT||LA366_0==NL||LA366_0==WS) ) {
					alt366=1;
				}
				} finally {dbg.exitDecision(366);}

				switch (alt366) {
					case 1 :
						dbg.enterAlt(1);

						// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:641:23: ws
						{
						dbg.location(641,23);
						pushFollow(FOLLOW_ws_in_synpred22_Css32757);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(366);}
				dbg.location(641,27);
				match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_synpred22_Css32760); if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(367);}
		dbg.location(641,43);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:641:43: ( ws )?
		int alt368=2;
		try { dbg.enterSubRule(368);
		try { dbg.enterDecision(368, decisionCanBacktrack[368]);

		int LA368_0 = input.LA(1);
		if ( (LA368_0==COMMENT||LA368_0==NL||LA368_0==WS) ) {
			alt368=1;
		}
		} finally {dbg.exitDecision(368);}

		switch (alt368) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:641:43: ws
				{
				dbg.location(641,43);
				pushFollow(FOLLOW_ws_in_synpred22_Css32764);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(368);}
		dbg.location(641,47);
		match(input,SEMI,FOLLOW_SEMI_in_synpred22_Css32767); if (state.failed) return;
		}

	}
	// $ANTLR end synpred22_Css3

	// $ANTLR start synpred23_Css3
	public final void synpred23_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:642:7: ( cp_mixin_call )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:642:8: cp_mixin_call
		{
		dbg.location(642,8);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred23_Css32790);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred23_Css3

	// $ANTLR start synpred24_Css3
	public final void synpred24_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:7: ( selectorsGroup ( ws )? LBRACE )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:8: selectorsGroup ( ws )? LBRACE
		{
		dbg.location(643,8);
		pushFollow(FOLLOW_selectorsGroup_in_synpred24_Css32813);
		selectorsGroup();
		state._fsp--;
		if (state.failed) return;dbg.location(643,23);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:23: ( ws )?
		int alt369=2;
		try { dbg.enterSubRule(369);
		try { dbg.enterDecision(369, decisionCanBacktrack[369]);

		int LA369_0 = input.LA(1);
		if ( (LA369_0==COMMENT||LA369_0==NL||LA369_0==WS) ) {
			alt369=1;
		}
		} finally {dbg.exitDecision(369);}

		switch (alt369) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:23: ws
				{
				dbg.location(643,23);
				pushFollow(FOLLOW_ws_in_synpred24_Css32815);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(369);}
		dbg.location(643,27);
		match(input,LBRACE,FOLLOW_LBRACE_in_synpred24_Css32818); if (state.failed) return;
		}

	}
	// $ANTLR end synpred24_Css3

	// $ANTLR start synpred25_Css3
	public final void synpred25_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:661:9: ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:661:11: (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE
		{
		dbg.location(661,11);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:661:11: (~ ( HASH_SYMBOL | LBRACE ) )*
		try { dbg.enterSubRule(370);

		loop370:
		while (true) {
			int alt370=2;
			try { dbg.enterDecision(370, decisionCanBacktrack[370]);

			int LA370_0 = input.LA(1);
			if ( ((LA370_0 >= A && LA370_0 <= HASH)||(LA370_0 >= HEXCHAR && LA370_0 <= L)||(LA370_0 >= LBRACKET && LA370_0 <= Z)) ) {
				alt370=1;
			}

			} finally {dbg.exitDecision(370);}

			switch (alt370) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
				{
				dbg.location(661,11);
				if ( (input.LA(1) >= A && input.LA(1) <= HASH)||(input.LA(1) >= HEXCHAR && input.LA(1) <= L)||(input.LA(1) >= LBRACKET && input.LA(1) <= Z) ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					dbg.recognitionException(mse);
					throw mse;
				}
				}
				break;

			default :
				break loop370;
			}
		}
		} finally {dbg.exitSubRule(370);}
		dbg.location(661,38);
		match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_synpred25_Css32956); if (state.failed) return;dbg.location(661,50);
		match(input,LBRACE,FOLLOW_LBRACE_in_synpred25_Css32958); if (state.failed) return;
		}

	}
	// $ANTLR end synpred25_Css3

	// $ANTLR start synpred26_Css3
	public final void synpred26_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:677:18: ( ( ws )? esPred )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:677:19: ( ws )? esPred
		{
		dbg.location(677,19);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:677:19: ( ws )?
		int alt371=2;
		try { dbg.enterSubRule(371);
		try { dbg.enterDecision(371, decisionCanBacktrack[371]);

		int LA371_0 = input.LA(1);
		if ( (LA371_0==COMMENT||LA371_0==NL||LA371_0==WS) ) {
			alt371=1;
		}
		} finally {dbg.exitDecision(371);}

		switch (alt371) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:677:19: ws
				{
				dbg.location(677,19);
				pushFollow(FOLLOW_ws_in_synpred26_Css33085);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(371);}
		dbg.location(677,23);
		pushFollow(FOLLOW_esPred_in_synpred26_Css33088);
		esPred();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred26_Css3

	// $ANTLR start synpred27_Css3
	public final void synpred27_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:679:21: ( ( ws )? esPred )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:679:22: ( ws )? esPred
		{
		dbg.location(679,22);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:679:22: ( ws )?
		int alt372=2;
		try { dbg.enterSubRule(372);
		try { dbg.enterDecision(372, decisionCanBacktrack[372]);

		int LA372_0 = input.LA(1);
		if ( (LA372_0==COMMENT||LA372_0==NL||LA372_0==WS) ) {
			alt372=1;
		}
		} finally {dbg.exitDecision(372);}

		switch (alt372) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:679:22: ws
				{
				dbg.location(679,22);
				pushFollow(FOLLOW_ws_in_synpred27_Css33108);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(372);}
		dbg.location(679,26);
		pushFollow(FOLLOW_esPred_in_synpred27_Css33111);
		esPred();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred27_Css3

	// $ANTLR start synpred28_Css3
	public final void synpred28_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:693:7: ( ( IDENT | STAR )? PIPE )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:693:8: ( IDENT | STAR )? PIPE
		{
		dbg.location(693,8);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:693:8: ( IDENT | STAR )?
		int alt373=2;
		try { dbg.enterSubRule(373);
		try { dbg.enterDecision(373, decisionCanBacktrack[373]);

		int LA373_0 = input.LA(1);
		if ( (LA373_0==IDENT||LA373_0==STAR) ) {
			alt373=1;
		}
		} finally {dbg.exitDecision(373);}

		switch (alt373) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
				{
				dbg.location(693,8);
				if ( input.LA(1)==IDENT||input.LA(1)==STAR ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					dbg.recognitionException(mse);
					throw mse;
				}
				}
				break;

		}
		} finally {dbg.exitSubRule(373);}
		dbg.location(693,24);
		match(input,PIPE,FOLLOW_PIPE_in_synpred28_Css33203); if (state.failed) return;
		}

	}
	// $ANTLR end synpred28_Css3

	// $ANTLR start synpred29_Css3
	public final void synpred29_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:14: ( ( ws | ( ( ws )? operator ( ws )? ) |) term )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:15: ( ws | ( ( ws )? operator ( ws )? ) |) term
		{
		dbg.location(869,15);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:15: ( ws | ( ( ws )? operator ( ws )? ) |)
		int alt376=3;
		try { dbg.enterSubRule(376);
		try { dbg.enterDecision(376, decisionCanBacktrack[376]);

		try {
			isCyclicDecision = true;
			alt376 = dfa376.predict(input);
		}
		catch (NoViableAltException nvae) {
			dbg.recognitionException(nvae);
			throw nvae;
		}
		} finally {dbg.exitDecision(376);}

		switch (alt376) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:17: ws
				{
				dbg.location(869,17);
				pushFollow(FOLLOW_ws_in_synpred29_Css34602);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:22: ( ( ws )? operator ( ws )? )
				{
				dbg.location(869,22);
				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:22: ( ( ws )? operator ( ws )? )
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:23: ( ws )? operator ( ws )?
				{
				dbg.location(869,23);
				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:23: ( ws )?
				int alt374=2;
				try { dbg.enterSubRule(374);
				try { dbg.enterDecision(374, decisionCanBacktrack[374]);

				int LA374_0 = input.LA(1);
				if ( (LA374_0==COMMENT||LA374_0==NL||LA374_0==WS) ) {
					alt374=1;
				}
				} finally {dbg.exitDecision(374);}

				switch (alt374) {
					case 1 :
						dbg.enterAlt(1);

						// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:23: ws
						{
						dbg.location(869,23);
						pushFollow(FOLLOW_ws_in_synpred29_Css34607);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(374);}
				dbg.location(869,27);
				pushFollow(FOLLOW_operator_in_synpred29_Css34610);
				operator();
				state._fsp--;
				if (state.failed) return;dbg.location(869,36);
				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:36: ( ws )?
				int alt375=2;
				try { dbg.enterSubRule(375);
				try { dbg.enterDecision(375, decisionCanBacktrack[375]);

				int LA375_0 = input.LA(1);
				if ( (LA375_0==COMMENT||LA375_0==NL||LA375_0==WS) ) {
					alt375=1;
				}
				} finally {dbg.exitDecision(375);}

				switch (alt375) {
					case 1 :
						dbg.enterAlt(1);

						// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:36: ws
						{
						dbg.location(869,36);
						pushFollow(FOLLOW_ws_in_synpred29_Css34612);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(375);}

				}

				}
				break;
			case 3 :
				dbg.enterAlt(3);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:56: 
				{
				}
				break;

		}
		} finally {dbg.exitSubRule(376);}
		dbg.location(869,58);
		pushFollow(FOLLOW_term_in_synpred29_Css34621);
		term();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred29_Css3

	// $ANTLR start synpred30_Css3
	public final void synpred30_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:876:9: ( functionName ( ws )? LPAREN )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:876:10: functionName ( ws )? LPAREN
		{
		dbg.location(876,10);
		pushFollow(FOLLOW_functionName_in_synpred30_Css34694);
		functionName();
		state._fsp--;
		if (state.failed) return;dbg.location(876,23);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:876:23: ( ws )?
		int alt377=2;
		try { dbg.enterSubRule(377);
		try { dbg.enterDecision(377, decisionCanBacktrack[377]);

		int LA377_0 = input.LA(1);
		if ( (LA377_0==COMMENT||LA377_0==NL||LA377_0==WS) ) {
			alt377=1;
		}
		} finally {dbg.exitDecision(377);}

		switch (alt377) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:876:23: ws
				{
				dbg.location(876,23);
				pushFollow(FOLLOW_ws_in_synpred30_Css34696);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(377);}
		dbg.location(876,27);
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred30_Css34699); if (state.failed) return;
		}

	}
	// $ANTLR end synpred30_Css3

	// $ANTLR start synpred31_Css3
	public final void synpred31_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:937:9: ( fnAttributeName ( ws )? ( OPEQ | COLON ) )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:937:10: fnAttributeName ( ws )? ( OPEQ | COLON )
		{
		dbg.location(937,10);
		pushFollow(FOLLOW_fnAttributeName_in_synpred31_Css35216);
		fnAttributeName();
		state._fsp--;
		if (state.failed) return;dbg.location(937,26);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:937:26: ( ws )?
		int alt378=2;
		try { dbg.enterSubRule(378);
		try { dbg.enterDecision(378, decisionCanBacktrack[378]);

		int LA378_0 = input.LA(1);
		if ( (LA378_0==COMMENT||LA378_0==NL||LA378_0==WS) ) {
			alt378=1;
		}
		} finally {dbg.exitDecision(378);}

		switch (alt378) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:937:26: ws
				{
				dbg.location(937,26);
				pushFollow(FOLLOW_ws_in_synpred31_Css35218);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(378);}
		dbg.location(937,30);
		if ( input.LA(1)==COLON||input.LA(1)==OPEQ ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			dbg.recognitionException(mse);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred31_Css3

	// $ANTLR start synpred32_Css3
	public final void synpred32_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:20: ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term
		{
		dbg.location(950,21);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |)
		int alt381=3;
		try { dbg.enterSubRule(381);
		try { dbg.enterDecision(381, decisionCanBacktrack[381]);

		try {
			isCyclicDecision = true;
			alt381 = dfa381.predict(input);
		}
		catch (NoViableAltException nvae) {
			dbg.recognitionException(nvae);
			throw nvae;
		}
		} finally {dbg.exitDecision(381);}

		switch (alt381) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:23: ws
				{
				dbg.location(950,23);
				pushFollow(FOLLOW_ws_in_synpred32_Css35347);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:28: ( ( ws )? SOLIDUS ( ws )? )
				{
				dbg.location(950,28);
				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:28: ( ( ws )? SOLIDUS ( ws )? )
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:29: ( ws )? SOLIDUS ( ws )?
				{
				dbg.location(950,29);
				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:29: ( ws )?
				int alt379=2;
				try { dbg.enterSubRule(379);
				try { dbg.enterDecision(379, decisionCanBacktrack[379]);

				int LA379_0 = input.LA(1);
				if ( (LA379_0==COMMENT||LA379_0==NL||LA379_0==WS) ) {
					alt379=1;
				}
				} finally {dbg.exitDecision(379);}

				switch (alt379) {
					case 1 :
						dbg.enterAlt(1);

						// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:29: ws
						{
						dbg.location(950,29);
						pushFollow(FOLLOW_ws_in_synpred32_Css35352);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(379);}
				dbg.location(950,33);
				match(input,SOLIDUS,FOLLOW_SOLIDUS_in_synpred32_Css35355); if (state.failed) return;dbg.location(950,41);
				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:41: ( ws )?
				int alt380=2;
				try { dbg.enterSubRule(380);
				try { dbg.enterDecision(380, decisionCanBacktrack[380]);

				int LA380_0 = input.LA(1);
				if ( (LA380_0==COMMENT||LA380_0==NL||LA380_0==WS) ) {
					alt380=1;
				}
				} finally {dbg.exitDecision(380);}

				switch (alt380) {
					case 1 :
						dbg.enterAlt(1);

						// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:41: ws
						{
						dbg.location(950,41);
						pushFollow(FOLLOW_ws_in_synpred32_Css35357);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(380);}

				}

				}
				break;
			case 3 :
				dbg.enterAlt(3);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:950:61: 
				{
				}
				break;

		}
		} finally {dbg.exitSubRule(381);}
		dbg.location(950,63);
		pushFollow(FOLLOW_term_in_synpred32_Css35366);
		term();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred32_Css3

	// $ANTLR start synpred33_Css3
	public final void synpred33_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:6: ( ( ws )? COMMA ( ws )? cp_expression )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:7: ( ws )? COMMA ( ws )? cp_expression
		{
		dbg.location(985,7);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:7: ( ws )?
		int alt382=2;
		try { dbg.enterSubRule(382);
		try { dbg.enterDecision(382, decisionCanBacktrack[382]);

		int LA382_0 = input.LA(1);
		if ( (LA382_0==COMMENT||LA382_0==NL||LA382_0==WS) ) {
			alt382=1;
		}
		} finally {dbg.exitDecision(382);}

		switch (alt382) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:7: ws
				{
				dbg.location(985,7);
				pushFollow(FOLLOW_ws_in_synpred33_Css35786);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(382);}
		dbg.location(985,11);
		match(input,COMMA,FOLLOW_COMMA_in_synpred33_Css35789); if (state.failed) return;dbg.location(985,17);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:17: ( ws )?
		int alt383=2;
		try { dbg.enterSubRule(383);
		try { dbg.enterDecision(383, decisionCanBacktrack[383]);

		int LA383_0 = input.LA(1);
		if ( (LA383_0==COMMENT||LA383_0==NL||LA383_0==WS) ) {
			alt383=1;
		}
		} finally {dbg.exitDecision(383);}

		switch (alt383) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:985:17: ws
				{
				dbg.location(985,17);
				pushFollow(FOLLOW_ws_in_synpred33_Css35791);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(383);}
		dbg.location(985,21);
		pushFollow(FOLLOW_cp_expression_in_synpred33_Css35794);
		cp_expression();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred33_Css3

	// $ANTLR start synpred34_Css3
	public final void synpred34_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1002:9: ( ( ws )? cp_expression_operator )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1002:10: ( ws )? cp_expression_operator
		{
		dbg.location(1002,10);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1002:10: ( ws )?
		int alt384=2;
		try { dbg.enterSubRule(384);
		try { dbg.enterDecision(384, decisionCanBacktrack[384]);

		int LA384_0 = input.LA(1);
		if ( (LA384_0==COMMENT||LA384_0==NL||LA384_0==WS) ) {
			alt384=1;
		}
		} finally {dbg.exitDecision(384);}

		switch (alt384) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1002:10: ws
				{
				dbg.location(1002,10);
				pushFollow(FOLLOW_ws_in_synpred34_Css35855);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(384);}
		dbg.location(1002,14);
		pushFollow(FOLLOW_cp_expression_operator_in_synpred34_Css35858);
		cp_expression_operator();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred34_Css3

	// $ANTLR start synpred35_Css3
	public final void synpred35_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1003:11: ( ( ws )? cp_expression_atom )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1003:12: ( ws )? cp_expression_atom
		{
		dbg.location(1003,12);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1003:12: ( ws )?
		int alt385=2;
		try { dbg.enterSubRule(385);
		try { dbg.enterDecision(385, decisionCanBacktrack[385]);

		int LA385_0 = input.LA(1);
		if ( (LA385_0==COMMENT||LA385_0==NL||LA385_0==WS) ) {
			alt385=1;
		}
		} finally {dbg.exitDecision(385);}

		switch (alt385) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1003:12: ws
				{
				dbg.location(1003,12);
				pushFollow(FOLLOW_ws_in_synpred35_Css35884);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(385);}
		dbg.location(1003,16);
		pushFollow(FOLLOW_cp_expression_atom_in_synpred35_Css35887);
		cp_expression_atom();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred35_Css3

	// $ANTLR start synpred36_Css3
	public final void synpred36_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1016:13: ( cp_math_expression )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1016:14: cp_math_expression
		{
		dbg.location(1016,14);
		pushFollow(FOLLOW_cp_math_expression_in_synpred36_Css36005);
		cp_math_expression();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred36_Css3

	// $ANTLR start synpred37_Css3
	public final void synpred37_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:13: ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:14: ( ws )? ( PLUS | MINUS | STAR | SOLIDUS )
		{
		dbg.location(1043,14);
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:14: ( ws )?
		int alt386=2;
		try { dbg.enterSubRule(386);
		try { dbg.enterDecision(386, decisionCanBacktrack[386]);

		int LA386_0 = input.LA(1);
		if ( (LA386_0==COMMENT||LA386_0==NL||LA386_0==WS) ) {
			alt386=1;
		}
		} finally {dbg.exitDecision(386);}

		switch (alt386) {
			case 1 :
				dbg.enterAlt(1);

				// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1043:14: ws
				{
				dbg.location(1043,14);
				pushFollow(FOLLOW_ws_in_synpred37_Css36138);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(386);}
		dbg.location(1043,18);
		if ( input.LA(1)==MINUS||input.LA(1)==PLUS||(input.LA(1) >= SOLIDUS && input.LA(1) <= STAR) ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			dbg.recognitionException(mse);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred37_Css3

	// $ANTLR start synpred38_Css3
	public final void synpred38_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1177:13: ( sass_interpolation_expression_var )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1177:14: sass_interpolation_expression_var
		{
		dbg.location(1177,14);
		pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred38_Css37129);
		sass_interpolation_expression_var();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred38_Css3

	// $ANTLR start synpred39_Css3
	public final void synpred39_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1184:17: ( sass_interpolation_expression_var )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1184:18: sass_interpolation_expression_var
		{
		dbg.location(1184,18);
		pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred39_Css37275);
		sass_interpolation_expression_var();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred39_Css3

	// $ANTLR start synpred40_Css3
	public final void synpred40_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1195:13: ( sass_interpolation_expression_var )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1195:14: sass_interpolation_expression_var
		{
		dbg.location(1195,14);
		pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred40_Css37426);
		sass_interpolation_expression_var();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred40_Css3

	// $ANTLR start synpred41_Css3
	public final void synpred41_Css3_fragment() throws RecognitionException {
		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1202:17: ( sass_interpolation_expression_var )
		dbg.enterAlt(1);

		// /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1202:18: sass_interpolation_expression_var
		{
		dbg.location(1202,18);
		pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred41_Css37543);
		sass_interpolation_expression_var();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred41_Css3

	// Delegated rules

	public final boolean synpred11_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred11_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred17_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred17_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred14_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred14_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred22_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred22_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred9_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred9_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred4_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred4_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred37_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred37_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred7_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred7_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred23_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred23_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred19_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred19_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred34_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred34_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred1_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred1_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred26_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred26_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred31_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred31_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred15_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred15_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred12_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred12_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred20_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred20_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred32_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred32_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred8_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred8_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred35_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred35_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred2_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred2_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred38_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred38_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred5_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred5_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred18_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred18_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred27_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred27_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred21_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred21_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred29_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred29_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred40_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred40_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred16_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred16_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred24_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred24_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred41_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred41_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred13_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred13_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred30_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred30_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred10_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred10_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred36_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred36_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred39_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred39_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred33_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred33_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred6_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred6_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred25_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred25_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred28_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred28_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred3_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred3_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}


	protected DFA3 dfa3 = new DFA3(this);
	protected DFA5 dfa5 = new DFA5(this);
	protected DFA8 dfa8 = new DFA8(this);
	protected DFA32 dfa32 = new DFA32(this);
	protected DFA24 dfa24 = new DFA24(this);
	protected DFA38 dfa38 = new DFA38(this);
	protected DFA43 dfa43 = new DFA43(this);
	protected DFA45 dfa45 = new DFA45(this);
	protected DFA54 dfa54 = new DFA54(this);
	protected DFA57 dfa57 = new DFA57(this);
	protected DFA61 dfa61 = new DFA61(this);
	protected DFA69 dfa69 = new DFA69(this);
	protected DFA73 dfa73 = new DFA73(this);
	protected DFA96 dfa96 = new DFA96(this);
	protected DFA103 dfa103 = new DFA103(this);
	protected DFA107 dfa107 = new DFA107(this);
	protected DFA126 dfa126 = new DFA126(this);
	protected DFA131 dfa131 = new DFA131(this);
	protected DFA133 dfa133 = new DFA133(this);
	protected DFA138 dfa138 = new DFA138(this);
	protected DFA137 dfa137 = new DFA137(this);
	protected DFA145 dfa145 = new DFA145(this);
	protected DFA144 dfa144 = new DFA144(this);
	protected DFA167 dfa167 = new DFA167(this);
	protected DFA176 dfa176 = new DFA176(this);
	protected DFA186 dfa186 = new DFA186(this);
	protected DFA185 dfa185 = new DFA185(this);
	protected DFA197 dfa197 = new DFA197(this);
	protected DFA207 dfa207 = new DFA207(this);
	protected DFA206 dfa206 = new DFA206(this);
	protected DFA215 dfa215 = new DFA215(this);
	protected DFA224 dfa224 = new DFA224(this);
	protected DFA234 dfa234 = new DFA234(this);
	protected DFA239 dfa239 = new DFA239(this);
	protected DFA244 dfa244 = new DFA244(this);
	protected DFA248 dfa248 = new DFA248(this);
	protected DFA254 dfa254 = new DFA254(this);
	protected DFA258 dfa258 = new DFA258(this);
	protected DFA260 dfa260 = new DFA260(this);
	protected DFA270 dfa270 = new DFA270(this);
	protected DFA273 dfa273 = new DFA273(this);
	protected DFA287 dfa287 = new DFA287(this);
	protected DFA303 dfa303 = new DFA303(this);
	protected DFA307 dfa307 = new DFA307(this);
	protected DFA315 dfa315 = new DFA315(this);
	protected DFA319 dfa319 = new DFA319(this);
	protected DFA326 dfa326 = new DFA326(this);
	protected DFA325 dfa325 = new DFA325(this);
	protected DFA346 dfa346 = new DFA346(this);
	protected DFA367 dfa367 = new DFA367(this);
	protected DFA376 dfa376 = new DFA376(this);
	protected DFA381 dfa381 = new DFA381(this);
	static final String DFA3_eotS =
		"\5\uffff";
	static final String DFA3_eofS =
		"\1\2\4\uffff";
	static final String DFA3_minS =
		"\1\7\1\24\1\uffff\1\24\1\uffff";
	static final String DFA3_maxS =
		"\1\u0092\1\u0093\1\uffff\1\u0093\1\uffff";
	static final String DFA3_acceptS =
		"\2\uffff\1\2\1\uffff\1\1";
	static final String DFA3_specialS =
		"\5\uffff}>";
	static final String[] DFA3_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\1\1\2\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\2"+
			"\7\uffff\1\2\2\uffff\2\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\6\uffff"+
			"\4\2\2\uffff\1\2\10\uffff\3\2\5\uffff\1\2\13\uffff\1\2\2\uffff\2\2\3"+
			"\uffff\1\2\2\uffff\3\2\2\uffff\2\2\1\uffff\11\2\1\uffff\5\2\1\uffff\1"+
			"\2\2\uffff\1\2\1\uffff\5\2\6\uffff\1\2",
			"\1\2\1\uffff\1\3\75\uffff\1\3\56\uffff\1\4\17\uffff\1\3",
			"",
			"\1\2\1\uffff\1\3\75\uffff\1\3\56\uffff\1\4\17\uffff\1\3",
			""
	};

	static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
	static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
	static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
	static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
	static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
	static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
	static final short[][] DFA3_transition;

	static {
		int numStates = DFA3_transitionS.length;
		DFA3_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
		}
	}

	protected class DFA3 extends DFA {

		public DFA3(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 3;
			this.eot = DFA3_eot;
			this.eof = DFA3_eof;
			this.min = DFA3_min;
			this.max = DFA3_max;
			this.accept = DFA3_accept;
			this.special = DFA3_special;
			this.transition = DFA3_transition;
		}
		@Override
		public String getDescription() {
			return "324:6: ( charSet ( ws )? )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA5_eotS =
		"\5\uffff";
	static final String DFA5_eofS =
		"\1\2\4\uffff";
	static final String DFA5_minS =
		"\1\7\1\24\1\uffff\1\24\1\uffff";
	static final String DFA5_maxS =
		"\1\u0092\1\u0093\1\uffff\1\u0093\1\uffff";
	static final String DFA5_acceptS =
		"\2\uffff\1\2\1\uffff\1\1";
	static final String DFA5_specialS =
		"\5\uffff}>";
	static final String[] DFA5_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\3\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff"+
			"\1\2\10\uffff\3\2\5\uffff\1\1\13\uffff\1\2\2\uffff\2\2\3\uffff\1\2\2"+
			"\uffff\3\2\2\uffff\2\2\1\uffff\11\2\1\uffff\5\2\1\uffff\1\2\2\uffff\1"+
			"\2\1\uffff\5\2\6\uffff\1\2",
			"\1\2\1\uffff\1\3\34\uffff\1\4\40\uffff\1\3\56\uffff\1\4\12\uffff\1\4"+
			"\4\uffff\1\3",
			"",
			"\1\2\1\uffff\1\3\34\uffff\1\4\40\uffff\1\3\56\uffff\1\4\12\uffff\1\4"+
			"\4\uffff\1\3",
			""
	};

	static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
	static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
	static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
	static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
	static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
	static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
	static final short[][] DFA5_transition;

	static {
		int numStates = DFA5_transitionS.length;
		DFA5_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
		}
	}

	protected class DFA5 extends DFA {

		public DFA5(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 5;
			this.eot = DFA5_eot;
			this.eof = DFA5_eof;
			this.min = DFA5_min;
			this.max = DFA5_max;
			this.accept = DFA5_accept;
			this.special = DFA5_special;
			this.transition = DFA5_transition;
		}
		@Override
		public String getDescription() {
			return "326:9: ( namespaces )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA8_eotS =
		"\5\uffff";
	static final String DFA8_eofS =
		"\1\1\4\uffff";
	static final String DFA8_minS =
		"\1\7\1\uffff\2\24\1\uffff";
	static final String DFA8_maxS =
		"\1\u0092\1\uffff\2\u0093\1\uffff";
	static final String DFA8_acceptS =
		"\1\uffff\1\2\2\uffff\1\1";
	static final String DFA8_specialS =
		"\5\uffff}>";
	static final String[] DFA8_transitionS = {
			"\2\1\2\uffff\5\1\3\uffff\3\1\2\uffff\1\1\5\uffff\1\1\1\uffff\1\1\7\uffff"+
			"\1\1\2\uffff\2\1\2\uffff\2\1\2\uffff\1\1\1\uffff\1\1\6\uffff\4\1\2\uffff"+
			"\1\1\10\uffff\3\1\5\uffff\1\2\13\uffff\1\1\2\uffff\2\1\3\uffff\1\1\2"+
			"\uffff\3\1\2\uffff\2\1\1\uffff\11\1\1\uffff\5\1\1\uffff\1\1\2\uffff\1"+
			"\1\1\uffff\5\1\6\uffff\1\1",
			"",
			"\1\1\1\uffff\1\3\34\uffff\1\4\40\uffff\1\3\56\uffff\1\4\12\uffff\1\4"+
			"\4\uffff\1\3",
			"\1\1\1\uffff\1\3\34\uffff\1\4\40\uffff\1\3\56\uffff\1\4\12\uffff\1\4"+
			"\4\uffff\1\3",
			""
	};

	static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
	static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
	static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
	static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
	static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
	static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
	static final short[][] DFA8_transition;

	static {
		int numStates = DFA8_transitionS.length;
		DFA8_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
		}
	}

	protected class DFA8 extends DFA {

		public DFA8(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 8;
			this.eot = DFA8_eot;
			this.eof = DFA8_eof;
			this.min = DFA8_min;
			this.max = DFA8_max;
			this.accept = DFA8_accept;
			this.special = DFA8_special;
			this.transition = DFA8_transition;
		}
		@Override
		public String getDescription() {
			return "()+ loopback of 333:2: ( namespace ( ws )? )+";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA32_eotS =
		"\10\uffff";
	static final String DFA32_eofS =
		"\10\uffff";
	static final String DFA32_minS =
		"\1\65\2\26\1\0\1\uffff\1\0\2\uffff";
	static final String DFA32_maxS =
		"\1\65\2\u0093\1\0\1\uffff\1\0\2\uffff";
	static final String DFA32_acceptS =
		"\4\uffff\1\3\1\uffff\1\1\1\2";
	static final String DFA32_specialS =
		"\3\uffff\1\0\1\uffff\1\1\2\uffff}>";
	static final String[] DFA32_transitionS = {
			"\1\1",
			"\1\2\62\uffff\1\4\12\uffff\1\2\56\uffff\1\3\12\uffff\1\3\4\uffff\1\2",
			"\1\2\62\uffff\1\4\12\uffff\1\2\56\uffff\1\5\12\uffff\1\5\4\uffff\1\2",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			""
	};

	static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_eotS);
	static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_eofS);
	static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_minS);
	static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_maxS);
	static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_acceptS);
	static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_specialS);
	static final short[][] DFA32_transition;

	static {
		int numStates = DFA32_transitionS.length;
		DFA32_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA32_transition[i] = DFA.unpackEncodedString(DFA32_transitionS[i]);
		}
	}

	protected class DFA32 extends DFA {

		public DFA32(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 32;
			this.eot = DFA32_eot;
			this.eof = DFA32_eof;
			this.min = DFA32_min;
			this.max = DFA32_max;
			this.accept = DFA32_accept;
			this.special = DFA32_special;
			this.transition = DFA32_transition;
		}
		@Override
		public String getDescription() {
			return "361:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? ( LPAREN LESS_IMPORT_TYPE RPAREN ( ws )? )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA32_3 = input.LA(1);
						 
						int index32_3 = input.index();
						input.rewind();
						s = -1;
						if ( (!(evalPredicate((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")),""))) ) {s = 6;}
						else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 7;}
						else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 4;}
						 
						input.seek(index32_3);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA32_5 = input.LA(1);
						 
						int index32_5 = input.index();
						input.rewind();
						s = -1;
						if ( (!(evalPredicate((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")),""))) ) {s = 6;}
						else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 7;}
						else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 4;}
						 
						input.seek(index32_5);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 32, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA24_eotS =
		"\6\uffff";
	static final String DFA24_eofS =
		"\2\2\4\uffff";
	static final String DFA24_minS =
		"\2\7\1\uffff\2\24\1\uffff";
	static final String DFA24_maxS =
		"\2\u0093\1\uffff\2\u0093\1\uffff";
	static final String DFA24_acceptS =
		"\2\uffff\1\2\2\uffff\1\1";
	static final String DFA24_specialS =
		"\6\uffff}>";
	static final String[] DFA24_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\3\1\1\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\7\uffff\1\2\2\uffff\2\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\6\uffff"+
			"\4\2\2\uffff\1\2\6\uffff\1\2\1\uffff\3\2\5\uffff\1\2\1\1\3\uffff\1\2"+
			"\2\uffff\1\2\3\uffff\1\2\2\uffff\2\2\2\uffff\2\2\2\uffff\3\2\2\uffff"+
			"\2\2\1\uffff\11\2\1\uffff\5\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\6\uffff"+
			"\1\2\1\1",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\3\1\1\1\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\7\uffff\1\2\2\uffff\2\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\6\uffff"+
			"\4\2\2\uffff\1\2\6\uffff\1\2\1\uffff\3\2\5\uffff\1\2\1\1\3\uffff\1\2"+
			"\2\uffff\1\2\3\uffff\1\2\2\uffff\2\2\2\uffff\2\2\2\uffff\3\2\2\uffff"+
			"\2\2\1\uffff\11\2\1\uffff\5\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\6\uffff"+
			"\1\2\1\1",
			"",
			"\2\2\1\4\11\uffff\1\2\13\uffff\1\2\2\uffff\2\2\2\uffff\1\2\7\uffff\2"+
			"\2\5\uffff\1\2\11\uffff\1\2\7\uffff\1\4\22\uffff\1\2\32\uffff\1\2\1\5"+
			"\12\uffff\1\5\4\uffff\1\4",
			"\2\2\1\4\11\uffff\1\2\13\uffff\1\2\2\uffff\2\2\2\uffff\1\2\7\uffff\2"+
			"\2\5\uffff\1\2\11\uffff\1\2\7\uffff\1\4\22\uffff\1\2\32\uffff\1\2\1\5"+
			"\12\uffff\1\5\4\uffff\1\4",
			""
	};

	static final short[] DFA24_eot = DFA.unpackEncodedString(DFA24_eotS);
	static final short[] DFA24_eof = DFA.unpackEncodedString(DFA24_eofS);
	static final char[] DFA24_min = DFA.unpackEncodedStringToUnsignedChars(DFA24_minS);
	static final char[] DFA24_max = DFA.unpackEncodedStringToUnsignedChars(DFA24_maxS);
	static final short[] DFA24_accept = DFA.unpackEncodedString(DFA24_acceptS);
	static final short[] DFA24_special = DFA.unpackEncodedString(DFA24_specialS);
	static final short[][] DFA24_transition;

	static {
		int numStates = DFA24_transitionS.length;
		DFA24_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA24_transition[i] = DFA.unpackEncodedString(DFA24_transitionS[i]);
		}
	}

	protected class DFA24 extends DFA {

		public DFA24(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 24;
			this.eot = DFA24_eot;
			this.eof = DFA24_eof;
			this.min = DFA24_min;
			this.max = DFA24_max;
			this.accept = DFA24_accept;
			this.special = DFA24_special;
			this.transition = DFA24_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 366:61: ( ( ws )? COMMA ( ws )? resourceIdentifier )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA38_eotS =
		"\6\uffff";
	static final String DFA38_eofS =
		"\6\uffff";
	static final String DFA38_minS =
		"\2\7\1\0\1\uffff\1\0\1\uffff";
	static final String DFA38_maxS =
		"\2\u0093\1\0\1\uffff\1\0\1\uffff";
	static final String DFA38_acceptS =
		"\3\uffff\1\2\1\uffff\1\1";
	static final String DFA38_specialS =
		"\2\uffff\1\0\1\uffff\1\1\1\uffff}>";
	static final String[] DFA38_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\6\uffff"+
			"\4\3\2\uffff\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2"+
			"\3\2\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\11\3\1\uffff\4\3\1\2\1"+
			"\uffff\1\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\6\uffff"+
			"\4\3\2\uffff\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2"+
			"\3\2\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\11\3\1\uffff\4\3\1\4\1"+
			"\uffff\1\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"\1\uffff",
			"",
			"\1\uffff",
			""
	};

	static final short[] DFA38_eot = DFA.unpackEncodedString(DFA38_eotS);
	static final short[] DFA38_eof = DFA.unpackEncodedString(DFA38_eofS);
	static final char[] DFA38_min = DFA.unpackEncodedStringToUnsignedChars(DFA38_minS);
	static final char[] DFA38_max = DFA.unpackEncodedStringToUnsignedChars(DFA38_maxS);
	static final short[] DFA38_accept = DFA.unpackEncodedString(DFA38_acceptS);
	static final short[] DFA38_special = DFA.unpackEncodedString(DFA38_specialS);
	static final short[][] DFA38_transition;

	static {
		int numStates = DFA38_transitionS.length;
		DFA38_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA38_transition[i] = DFA.unpackEncodedString(DFA38_transitionS[i]);
		}
	}

	protected class DFA38 extends DFA {

		public DFA38(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 38;
			this.eot = DFA38_eot;
			this.eof = DFA38_eof;
			this.min = DFA38_min;
			this.max = DFA38_max;
			this.accept = DFA38_accept;
			this.special = DFA38_special;
			this.transition = DFA38_transition;
		}
		@Override
		public String getDescription() {
			return "383:26: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA38_2 = input.LA(1);
						 
						int index38_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred4_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index38_2);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA38_4 = input.LA(1);
						 
						int index38_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred4_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index38_4);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 38, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA43_eotS =
		"\4\uffff";
	static final String DFA43_eofS =
		"\4\uffff";
	static final String DFA43_minS =
		"\2\7\2\uffff";
	static final String DFA43_maxS =
		"\2\u0093\2\uffff";
	static final String DFA43_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA43_specialS =
		"\4\uffff}>";
	static final String[] DFA43_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\2\1\3\6\uffff\4\3"+
			"\2\uffff\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2\3\2"+
			"\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\11\3\1\uffff\5\3\1\uffff\1"+
			"\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\2\1\3\6\uffff\4\3"+
			"\2\uffff\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2\3\2"+
			"\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\11\3\1\uffff\5\3\1\uffff\1"+
			"\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA43_eot = DFA.unpackEncodedString(DFA43_eotS);
	static final short[] DFA43_eof = DFA.unpackEncodedString(DFA43_eofS);
	static final char[] DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_minS);
	static final char[] DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_maxS);
	static final short[] DFA43_accept = DFA.unpackEncodedString(DFA43_acceptS);
	static final short[] DFA43_special = DFA.unpackEncodedString(DFA43_specialS);
	static final short[][] DFA43_transition;

	static {
		int numStates = DFA43_transitionS.length;
		DFA43_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA43_transition[i] = DFA.unpackEncodedString(DFA43_transitionS[i]);
		}
	}

	protected class DFA43 extends DFA {

		public DFA43(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 43;
			this.eot = DFA43_eot;
			this.eof = DFA43_eof;
			this.min = DFA43_min;
			this.max = DFA43_max;
			this.accept = DFA43_accept;
			this.special = DFA43_special;
			this.transition = DFA43_transition;
		}
		@Override
		public String getDescription() {
			return "393:87: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA45_eotS =
		"\4\uffff";
	static final String DFA45_eofS =
		"\4\uffff";
	static final String DFA45_minS =
		"\2\7\2\uffff";
	static final String DFA45_maxS =
		"\2\u0093\2\uffff";
	static final String DFA45_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA45_specialS =
		"\4\uffff}>";
	static final String[] DFA45_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\2\1\3\6\uffff\4\3"+
			"\2\uffff\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2\3\2"+
			"\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\11\3\1\uffff\5\3\1\uffff\1"+
			"\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\2\1\3\6\uffff\4\3"+
			"\2\uffff\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2\3\2"+
			"\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\11\3\1\uffff\5\3\1\uffff\1"+
			"\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_eotS);
	static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_eofS);
	static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_minS);
	static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_maxS);
	static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_acceptS);
	static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_specialS);
	static final short[][] DFA45_transition;

	static {
		int numStates = DFA45_transitionS.length;
		DFA45_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA45_transition[i] = DFA.unpackEncodedString(DFA45_transitionS[i]);
		}
	}

	protected class DFA45 extends DFA {

		public DFA45(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 45;
			this.eot = DFA45_eot;
			this.eof = DFA45_eof;
			this.min = DFA45_min;
			this.max = DFA45_max;
			this.accept = DFA45_accept;
			this.special = DFA45_special;
			this.transition = DFA45_transition;
		}
		@Override
		public String getDescription() {
			return "394:57: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA54_eotS =
		"\4\uffff";
	static final String DFA54_eofS =
		"\2\2\2\uffff";
	static final String DFA54_minS =
		"\2\5\2\uffff";
	static final String DFA54_maxS =
		"\2\u0093\2\uffff";
	static final String DFA54_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA54_specialS =
		"\4\uffff}>";
	static final String[] DFA54_transitionS = {
			"\1\3\1\uffff\2\2\2\uffff\5\2\3\uffff\3\2\1\1\1\uffff\1\2\5\uffff\1\2"+
			"\1\uffff\1\2\7\uffff\1\2\2\uffff\2\2\2\uffff\2\2\2\uffff\1\2\1\uffff"+
			"\1\2\5\uffff\5\2\2\uffff\1\2\10\uffff\3\2\5\uffff\1\2\1\1\12\uffff\1"+
			"\2\2\uffff\2\2\2\uffff\2\2\2\uffff\3\2\2\uffff\2\2\1\uffff\11\2\1\uffff"+
			"\5\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\6\uffff\1\2\1\1",
			"\1\3\1\uffff\2\2\2\uffff\5\2\3\uffff\3\2\1\1\1\uffff\1\2\5\uffff\1\2"+
			"\1\uffff\1\2\7\uffff\1\2\2\uffff\2\2\2\uffff\2\2\2\uffff\1\2\1\uffff"+
			"\1\2\5\uffff\5\2\2\uffff\1\2\10\uffff\3\2\5\uffff\1\2\1\1\12\uffff\1"+
			"\2\2\uffff\2\2\2\uffff\2\2\2\uffff\3\2\2\uffff\2\2\1\uffff\11\2\1\uffff"+
			"\5\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\6\uffff\1\2\1\1",
			"",
			""
	};

	static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_eotS);
	static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_eofS);
	static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_minS);
	static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_maxS);
	static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_acceptS);
	static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_specialS);
	static final short[][] DFA54_transition;

	static {
		int numStates = DFA54_transitionS.length;
		DFA54_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA54_transition[i] = DFA.unpackEncodedString(DFA54_transitionS[i]);
		}
	}

	protected class DFA54 extends DFA {

		public DFA54(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 54;
			this.eot = DFA54_eot;
			this.eof = DFA54_eof;
			this.min = DFA54_min;
			this.max = DFA54_max;
			this.accept = DFA54_accept;
			this.special = DFA54_special;
			this.transition = DFA54_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 416:43: ( ( ws )? AND ( ws )? mediaExpression )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA57_eotS =
		"\4\uffff";
	static final String DFA57_eofS =
		"\2\2\2\uffff";
	static final String DFA57_minS =
		"\2\5\2\uffff";
	static final String DFA57_maxS =
		"\2\u0093\2\uffff";
	static final String DFA57_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA57_specialS =
		"\4\uffff}>";
	static final String[] DFA57_transitionS = {
			"\1\3\1\uffff\2\2\2\uffff\5\2\3\uffff\3\2\1\1\1\uffff\1\2\5\uffff\1\2"+
			"\1\uffff\1\2\7\uffff\1\2\2\uffff\2\2\2\uffff\2\2\2\uffff\1\2\1\uffff"+
			"\1\2\5\uffff\5\2\2\uffff\1\2\10\uffff\3\2\5\uffff\1\2\1\1\12\uffff\1"+
			"\2\2\uffff\2\2\2\uffff\2\2\2\uffff\3\2\2\uffff\2\2\1\uffff\11\2\1\uffff"+
			"\5\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\6\uffff\1\2\1\1",
			"\1\3\1\uffff\2\2\2\uffff\5\2\3\uffff\3\2\1\1\1\uffff\1\2\5\uffff\1\2"+
			"\1\uffff\1\2\7\uffff\1\2\2\uffff\2\2\2\uffff\2\2\2\uffff\1\2\1\uffff"+
			"\1\2\5\uffff\5\2\2\uffff\1\2\10\uffff\3\2\5\uffff\1\2\1\1\12\uffff\1"+
			"\2\2\uffff\2\2\2\uffff\2\2\2\uffff\3\2\2\uffff\2\2\1\uffff\11\2\1\uffff"+
			"\5\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\6\uffff\1\2\1\1",
			"",
			""
	};

	static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_eotS);
	static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_eofS);
	static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_minS);
	static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_maxS);
	static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_acceptS);
	static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_specialS);
	static final short[][] DFA57_transition;

	static {
		int numStates = DFA57_transitionS.length;
		DFA57_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA57_transition[i] = DFA.unpackEncodedString(DFA57_transitionS[i]);
		}
	}

	protected class DFA57 extends DFA {

		public DFA57(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 57;
			this.eot = DFA57_eot;
			this.eof = DFA57_eof;
			this.min = DFA57_min;
			this.max = DFA57_max;
			this.accept = DFA57_accept;
			this.special = DFA57_special;
			this.transition = DFA57_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 417:23: ( ( ws )? AND ( ws )? mediaExpression )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA61_eotS =
		"\4\uffff";
	static final String DFA61_eofS =
		"\4\uffff";
	static final String DFA61_minS =
		"\2\24\2\uffff";
	static final String DFA61_maxS =
		"\2\u0093\2\uffff";
	static final String DFA61_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA61_specialS =
		"\4\uffff}>";
	static final String[] DFA61_transitionS = {
			"\1\2\1\uffff\1\1\75\uffff\1\1\30\uffff\1\3\45\uffff\1\1",
			"\1\2\1\uffff\1\1\75\uffff\1\1\30\uffff\1\3\45\uffff\1\1",
			"",
			""
	};

	static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_eotS);
	static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_eofS);
	static final char[] DFA61_min = DFA.unpackEncodedStringToUnsignedChars(DFA61_minS);
	static final char[] DFA61_max = DFA.unpackEncodedStringToUnsignedChars(DFA61_maxS);
	static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_acceptS);
	static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_specialS);
	static final short[][] DFA61_transition;

	static {
		int numStates = DFA61_transitionS.length;
		DFA61_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA61_transition[i] = DFA.unpackEncodedString(DFA61_transitionS[i]);
		}
	}

	protected class DFA61 extends DFA {

		public DFA61(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 61;
			this.eot = DFA61_eot;
			this.eof = DFA61_eof;
			this.min = DFA61_min;
			this.max = DFA61_max;
			this.accept = DFA61_accept;
			this.special = DFA61_special;
			this.transition = DFA61_transition;
		}
		@Override
		public String getDescription() {
			return "431:29: ( mediaFeatureValue )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA69_eotS =
		"\6\uffff";
	static final String DFA69_eofS =
		"\2\3\4\uffff";
	static final String DFA69_minS =
		"\2\7\1\0\1\uffff\1\0\1\uffff";
	static final String DFA69_maxS =
		"\2\u0093\1\0\1\uffff\1\0\1\uffff";
	static final String DFA69_acceptS =
		"\3\uffff\1\2\1\uffff\1\1";
	static final String DFA69_specialS =
		"\2\uffff\1\0\1\uffff\1\1\1\uffff}>";
	static final String[] DFA69_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\6\uffff"+
			"\4\3\2\uffff\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2"+
			"\3\2\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\11\3\1\uffff\4\3\1\2\1"+
			"\uffff\1\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\6\uffff"+
			"\4\3\2\uffff\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2"+
			"\3\2\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\11\3\1\uffff\4\3\1\4\1"+
			"\uffff\1\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"\1\uffff",
			"",
			"\1\uffff",
			""
	};

	static final short[] DFA69_eot = DFA.unpackEncodedString(DFA69_eotS);
	static final short[] DFA69_eof = DFA.unpackEncodedString(DFA69_eofS);
	static final char[] DFA69_min = DFA.unpackEncodedStringToUnsignedChars(DFA69_minS);
	static final char[] DFA69_max = DFA.unpackEncodedStringToUnsignedChars(DFA69_maxS);
	static final short[] DFA69_accept = DFA.unpackEncodedString(DFA69_acceptS);
	static final short[] DFA69_special = DFA.unpackEncodedString(DFA69_specialS);
	static final short[][] DFA69_transition;

	static {
		int numStates = DFA69_transitionS.length;
		DFA69_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA69_transition[i] = DFA.unpackEncodedString(DFA69_transitionS[i]);
		}
	}

	protected class DFA69 extends DFA {

		public DFA69(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 69;
			this.eot = DFA69_eot;
			this.eof = DFA69_eof;
			this.min = DFA69_min;
			this.max = DFA69_max;
			this.accept = DFA69_accept;
			this.special = DFA69_special;
			this.transition = DFA69_transition;
		}
		@Override
		public String getDescription() {
			return "451:21: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA69_2 = input.LA(1);
						 
						int index69_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred11_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index69_2);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA69_4 = input.LA(1);
						 
						int index69_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred11_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index69_4);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 69, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA73_eotS =
		"\63\uffff";
	static final String DFA73_eofS =
		"\56\uffff\1\15\3\uffff\1\15";
	static final String DFA73_minS =
		"\1\7\1\10\2\24\1\uffff\1\7\7\24\1\uffff\6\24\1\10\2\24\1\7\1\uffff\1\24"+
		"\1\6\6\24\1\uffff\2\6\2\7\1\6\1\24\1\10\4\uffff\1\0\1\5\3\uffff\1\5";
	static final String DFA73_maxS =
		"\1\u0092\3\u0093\1\uffff\10\u0093\1\uffff\12\u0093\1\uffff\10\u0093\1"+
		"\uffff\7\u0093\4\uffff\1\0\1\u0093\3\uffff\1\u0093";
	static final String DFA73_acceptS =
		"\4\uffff\1\4\10\uffff\1\6\12\uffff\1\5\10\uffff\1\7\7\uffff\1\1\1\2\1"+
		"\3\1\1\2\uffff\1\10\1\11\1\12\1\uffff";
	static final String DFA73_specialS =
		"\24\uffff\1\3\1\2\22\uffff\1\1\4\uffff\1\0\5\uffff}>";
	static final String[] DFA73_transitionS = {
			"\1\13\1\4\2\uffff\5\15\3\uffff\1\15\2\4\2\uffff\1\7\5\uffff\1\4\1\uffff"+
			"\1\1\7\uffff\1\10\2\uffff\2\4\2\uffff\2\4\2\uffff\1\4\1\uffff\1\14\6"+
			"\uffff\1\4\3\15\2\uffff\1\4\10\uffff\1\5\1\4\1\11\5\uffff\1\15\13\uffff"+
			"\1\6\2\uffff\2\4\3\uffff\1\4\2\uffff\3\15\2\uffff\1\15\1\16\1\uffff\1"+
			"\21\2\15\1\4\1\20\1\23\1\17\1\3\1\2\1\uffff\2\15\1\16\1\22\2\uffff\1"+
			"\4\2\uffff\1\4\1\uffff\5\15\6\uffff\1\12",
			"\1\4\13\uffff\3\4\11\uffff\1\4\12\uffff\2\4\2\uffff\2\4\2\uffff\1\24"+
			"\7\uffff\2\4\5\uffff\2\4\10\uffff\1\4\7\uffff\1\4\22\uffff\1\4\32\uffff"+
			"\1\4\20\uffff\1\4",
			"\1\15\1\uffff\1\25\75\uffff\1\25\76\uffff\1\25",
			"\1\15\1\uffff\1\26\75\uffff\1\26\76\uffff\1\26",
			"",
			"\1\30\3\uffff\5\30\3\uffff\1\30\1\15\1\uffff\1\27\1\uffff\1\30\17\uffff"+
			"\1\30\2\uffff\1\30\4\uffff\1\30\2\uffff\1\30\1\uffff\1\30\7\uffff\3\30"+
			"\11\uffff\1\30\1\uffff\1\30\1\uffff\1\30\5\uffff\1\30\1\27\3\uffff\1"+
			"\30\2\uffff\1\30\3\uffff\1\30\12\uffff\3\30\2\uffff\2\30\1\uffff\3\30"+
			"\1\uffff\5\30\1\uffff\4\30\7\uffff\5\30\6\uffff\1\30\1\27",
			"\1\32\1\uffff\1\31\34\uffff\1\30\7\uffff\1\30\30\uffff\1\31\76\uffff"+
			"\1\31",
			"\1\15\1\uffff\1\33\34\uffff\1\30\40\uffff\1\33\76\uffff\1\33",
			"\1\15\1\uffff\1\34\44\uffff\1\30\30\uffff\1\34\76\uffff\1\34",
			"\1\15\1\uffff\1\35\67\uffff\3\30\3\uffff\1\35\71\uffff\1\30\4\uffff"+
			"\1\35",
			"\1\15\1\uffff\1\36\34\uffff\1\30\40\uffff\1\36\56\uffff\1\30\17\uffff"+
			"\1\36",
			"\1\15\1\uffff\1\37\34\uffff\1\30\7\uffff\1\30\30\uffff\1\37\56\uffff"+
			"\1\30\17\uffff\1\37",
			"\1\15\1\uffff\1\40\62\uffff\1\41\12\uffff\1\40\56\uffff\1\41\12\uffff"+
			"\1\41\4\uffff\1\40",
			"",
			"\1\15\1\uffff\1\42\75\uffff\1\42\76\uffff\1\42",
			"\1\15\1\uffff\1\43\75\uffff\1\43\76\uffff\1\43",
			"\1\15\1\uffff\1\44\75\uffff\1\44\76\uffff\1\44",
			"\1\15\1\uffff\1\45\75\uffff\1\45\76\uffff\1\45",
			"\1\15\1\uffff\1\46\75\uffff\1\46\76\uffff\1\46",
			"\1\15\1\uffff\1\47\75\uffff\1\47\76\uffff\1\47",
			"\1\4\13\uffff\2\4\1\50\7\uffff\1\4\1\uffff\1\4\12\uffff\2\4\2\uffff"+
			"\2\4\2\uffff\1\4\7\uffff\2\4\5\uffff\1\4\6\uffff\1\51\2\uffff\1\4\7\uffff"+
			"\1\50\15\uffff\2\4\3\uffff\1\4\15\uffff\1\4\14\uffff\1\4\2\uffff\1\4"+
			"\15\uffff\1\50",
			"\1\15\1\uffff\1\25\34\uffff\1\54\40\uffff\1\25\76\uffff\1\25",
			"\1\15\1\uffff\1\26\34\uffff\1\55\40\uffff\1\26\76\uffff\1\26",
			"\1\30\3\uffff\5\30\3\uffff\1\30\1\15\1\uffff\1\27\1\uffff\1\30\17\uffff"+
			"\1\30\2\uffff\1\30\4\uffff\1\30\2\uffff\1\30\1\uffff\1\30\7\uffff\3\30"+
			"\11\uffff\1\30\1\uffff\1\30\1\uffff\1\30\5\uffff\1\30\1\27\3\uffff\1"+
			"\30\2\uffff\1\30\3\uffff\1\30\12\uffff\3\30\2\uffff\2\30\1\uffff\3\30"+
			"\1\uffff\5\30\1\uffff\4\30\7\uffff\5\30\6\uffff\1\30\1\27",
			"",
			"\1\32\1\uffff\1\31\34\uffff\1\30\7\uffff\1\30\30\uffff\1\31\76\uffff"+
			"\1\31",
			"\2\15\3\uffff\5\15\3\uffff\1\15\2\uffff\1\15\1\uffff\1\15\6\uffff\1"+
			"\15\2\uffff\1\15\3\uffff\1\15\1\uffff\2\15\1\uffff\1\15\3\uffff\2\15"+
			"\2\uffff\1\56\2\15\7\uffff\4\15\3\uffff\1\15\4\uffff\1\15\1\uffff\3\15"+
			"\5\uffff\2\15\3\uffff\2\15\5\uffff\3\15\1\uffff\1\15\4\uffff\5\15\2\uffff"+
			"\2\15\1\uffff\3\15\1\uffff\5\15\1\uffff\4\15\3\uffff\1\15\1\uffff\7\15"+
			"\2\uffff\1\15\3\uffff\2\15",
			"\1\15\1\uffff\1\33\34\uffff\1\30\40\uffff\1\33\76\uffff\1\33",
			"\1\15\1\uffff\1\34\44\uffff\1\30\30\uffff\1\34\76\uffff\1\34",
			"\1\15\1\uffff\1\35\67\uffff\3\30\3\uffff\1\35\71\uffff\1\30\4\uffff"+
			"\1\35",
			"\1\15\1\uffff\1\36\34\uffff\1\30\40\uffff\1\36\56\uffff\1\30\17\uffff"+
			"\1\36",
			"\1\15\1\uffff\1\37\34\uffff\1\30\7\uffff\1\30\30\uffff\1\37\56\uffff"+
			"\1\30\17\uffff\1\37",
			"\1\15\1\uffff\1\40\62\uffff\1\41\12\uffff\1\40\56\uffff\1\41\12\uffff"+
			"\1\41\4\uffff\1\40",
			"",
			"\2\57\3\uffff\5\57\3\uffff\1\57\1\15\1\uffff\1\42\1\uffff\1\57\6\uffff"+
			"\1\57\2\uffff\1\57\3\uffff\1\57\1\uffff\2\57\1\uffff\1\57\3\uffff\2\57"+
			"\2\uffff\3\57\7\uffff\4\57\3\uffff\1\57\4\uffff\1\57\1\uffff\3\57\5\uffff"+
			"\1\57\1\42\3\uffff\2\57\5\uffff\3\57\1\uffff\1\57\4\uffff\5\57\2\uffff"+
			"\2\57\1\uffff\3\57\1\uffff\5\57\1\uffff\4\57\3\uffff\1\57\1\uffff\7\57"+
			"\2\uffff\1\57\3\uffff\1\57\1\42",
			"\2\60\3\uffff\5\60\3\uffff\1\60\1\15\1\uffff\1\43\1\uffff\1\60\6\uffff"+
			"\1\60\2\uffff\1\60\3\uffff\1\60\1\uffff\2\60\1\uffff\1\60\3\uffff\2\60"+
			"\2\uffff\3\60\7\uffff\4\60\3\uffff\1\60\4\uffff\1\60\1\uffff\3\60\5\uffff"+
			"\1\60\1\43\3\uffff\2\60\5\uffff\3\60\1\uffff\1\60\4\uffff\5\60\2\uffff"+
			"\2\60\1\uffff\3\60\1\uffff\5\60\1\uffff\4\60\3\uffff\1\60\1\uffff\7\60"+
			"\2\uffff\1\60\3\uffff\1\60\1\43",
			"\1\60\3\uffff\5\60\3\uffff\1\60\1\15\1\uffff\1\44\1\uffff\1\60\17\uffff"+
			"\1\60\14\uffff\1\60\7\uffff\3\60\13\uffff\1\60\1\uffff\1\60\5\uffff\1"+
			"\60\1\44\12\uffff\1\60\12\uffff\3\60\2\uffff\2\60\1\uffff\3\60\1\uffff"+
			"\5\60\1\uffff\4\60\7\uffff\5\60\6\uffff\1\60\1\44",
			"\1\60\3\uffff\5\60\3\uffff\1\60\1\15\1\uffff\1\45\1\uffff\1\60\17\uffff"+
			"\1\60\14\uffff\1\60\7\uffff\3\60\13\uffff\1\60\1\uffff\1\60\5\uffff\1"+
			"\60\1\45\12\uffff\1\60\12\uffff\3\60\2\uffff\2\60\1\uffff\3\60\1\uffff"+
			"\5\60\1\uffff\4\60\7\uffff\5\60\6\uffff\1\60\1\45",
			"\2\60\3\uffff\5\60\3\uffff\1\60\1\15\1\uffff\1\46\1\uffff\1\60\6\uffff"+
			"\1\60\2\uffff\1\60\3\uffff\1\60\1\uffff\2\60\1\uffff\1\60\3\uffff\2\60"+
			"\2\uffff\3\60\7\uffff\4\60\3\uffff\1\60\4\uffff\1\60\1\uffff\3\60\5\uffff"+
			"\1\60\1\46\3\uffff\2\60\5\uffff\3\60\1\uffff\1\60\4\uffff\5\60\2\uffff"+
			"\2\60\1\uffff\3\60\1\uffff\5\60\1\uffff\4\60\3\uffff\1\60\1\uffff\7\60"+
			"\2\uffff\1\60\3\uffff\1\60\1\46",
			"\1\15\1\uffff\1\47\34\uffff\1\61\40\uffff\1\47\76\uffff\1\47",
			"\1\4\13\uffff\2\4\1\50\7\uffff\1\4\1\uffff\1\4\12\uffff\2\4\2\uffff"+
			"\2\4\2\uffff\1\4\7\uffff\2\4\5\uffff\1\4\6\uffff\1\51\2\uffff\1\4\7\uffff"+
			"\1\50\15\uffff\2\4\3\uffff\1\4\15\uffff\1\4\14\uffff\1\4\2\uffff\1\4"+
			"\15\uffff\1\50",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\4\15\2\uffff\5\15\3\uffff\3\15\1\62\1\uffff\1\15\1\uffff\2\15\2\uffff"+
			"\3\15\1\uffff\1\15\3\uffff\1\15\1\uffff\2\15\1\uffff\3\15\1\uffff\2\15"+
			"\2\uffff\3\15\5\uffff\1\30\7\15\1\uffff\2\15\3\uffff\1\15\1\uffff\3\15"+
			"\5\uffff\1\15\1\62\3\uffff\2\15\3\uffff\1\15\1\uffff\5\15\2\uffff\7\15"+
			"\2\uffff\14\15\1\uffff\10\15\1\uffff\7\15\2\uffff\1\15\3\uffff\1\15\1"+
			"\62",
			"",
			"",
			"",
			"\4\15\2\uffff\5\15\3\uffff\3\15\1\62\1\uffff\1\15\1\uffff\2\15\2\uffff"+
			"\3\15\1\uffff\1\15\3\uffff\1\15\1\uffff\2\15\1\uffff\3\15\1\uffff\2\15"+
			"\2\uffff\3\15\5\uffff\1\30\7\15\1\uffff\2\15\3\uffff\1\15\1\uffff\3\15"+
			"\5\uffff\1\15\1\62\3\uffff\2\15\3\uffff\1\15\1\uffff\5\15\2\uffff\7\15"+
			"\2\uffff\14\15\1\uffff\10\15\1\uffff\7\15\2\uffff\1\15\3\uffff\1\15\1"+
			"\62"
	};

	static final short[] DFA73_eot = DFA.unpackEncodedString(DFA73_eotS);
	static final short[] DFA73_eof = DFA.unpackEncodedString(DFA73_eofS);
	static final char[] DFA73_min = DFA.unpackEncodedStringToUnsignedChars(DFA73_minS);
	static final char[] DFA73_max = DFA.unpackEncodedStringToUnsignedChars(DFA73_maxS);
	static final short[] DFA73_accept = DFA.unpackEncodedString(DFA73_acceptS);
	static final short[] DFA73_special = DFA.unpackEncodedString(DFA73_specialS);
	static final short[][] DFA73_transition;

	static {
		int numStates = DFA73_transitionS.length;
		DFA73_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA73_transition[i] = DFA.unpackEncodedString(DFA73_transitionS[i]);
		}
	}

	protected class DFA73 extends DFA {

		public DFA73(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 73;
			this.eot = DFA73_eot;
			this.eof = DFA73_eof;
			this.min = DFA73_min;
			this.max = DFA73_max;
			this.accept = DFA73_accept;
			this.special = DFA73_special;
			this.transition = DFA73_transition;
		}
		@Override
		public String getDescription() {
			return "457:1: bodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call | ( cp_mixin_call )=>{...}? cp_mixin_call | rule | at_rule |{...}? cp_variable_declaration |{...}? importItem |{...}? sass_debug |{...}? sass_control |{...}? sass_function_declaration );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA73_45 = input.LA(1);
						 
						int index73_45 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred13_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 42;}
						else if ( ((synpred14_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 43;}
						 
						input.seek(index73_45);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA73_40 = input.LA(1);
						 
						int index73_40 = input.index();
						input.rewind();
						s = -1;
						if ( (LA73_40==LPAREN) && (synpred12_Css3())) {s = 41;}
						else if ( (LA73_40==COMMENT||LA73_40==NL||LA73_40==WS) ) {s = 40;}
						else if ( (LA73_40==AT_SIGN||(LA73_40 >= COLON && LA73_40 <= COMMA)||LA73_40==DCOLON||LA73_40==DOT||(LA73_40 >= GEN && LA73_40 <= GREATER)||(LA73_40 >= HASH && LA73_40 <= HASH_SYMBOL)||LA73_40==IDENT||(LA73_40 >= LBRACE && LA73_40 <= LBRACKET)||LA73_40==LESS_AND||LA73_40==MINUS||(LA73_40 >= PIPE && LA73_40 <= PLUS)||LA73_40==RBRACKET||LA73_40==SASS_EXTEND_ONLY_SELECTOR||LA73_40==STAR||LA73_40==TILDE) ) {s = 4;}
						 
						input.seek(index73_40);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA73_21 = input.LA(1);
						 
						int index73_21 = input.index();
						input.rewind();
						s = -1;
						if ( (LA73_21==IDENT) && (synpred12_Css3())) {s = 44;}
						else if ( (LA73_21==COMMENT||LA73_21==NL||LA73_21==WS) ) {s = 21;}
						else if ( (LA73_21==COLON) ) {s = 13;}
						 
						input.seek(index73_21);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA73_20 = input.LA(1);
						 
						int index73_20 = input.index();
						input.rewind();
						s = -1;
						if ( (LA73_20==COMMENT||LA73_20==NL||LA73_20==WS) ) {s = 40;}
						else if ( (LA73_20==LPAREN) && (synpred12_Css3())) {s = 41;}
						else if ( (LA73_20==AT_SIGN||(LA73_20 >= COLON && LA73_20 <= COMMA)||LA73_20==DCOLON||LA73_20==DOT||(LA73_20 >= GEN && LA73_20 <= GREATER)||(LA73_20 >= HASH && LA73_20 <= HASH_SYMBOL)||LA73_20==IDENT||(LA73_20 >= LBRACE && LA73_20 <= LBRACKET)||LA73_20==LESS_AND||LA73_20==MINUS||(LA73_20 >= PIPE && LA73_20 <= PLUS)||LA73_20==RBRACKET||LA73_20==SASS_EXTEND_ONLY_SELECTOR||LA73_20==STAR||LA73_20==TILDE) ) {s = 4;}
						else if ( ((synpred13_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 42;}
						else if ( (((synpred14_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 43;}
						 
						input.seek(index73_20);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 73, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA96_eotS =
		"\4\uffff";
	static final String DFA96_eofS =
		"\4\uffff";
	static final String DFA96_minS =
		"\2\25\2\uffff";
	static final String DFA96_maxS =
		"\2\u0093\2\uffff";
	static final String DFA96_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA96_specialS =
		"\4\uffff}>";
	static final String[] DFA96_transitionS = {
			"\1\3\1\1\44\uffff\1\2\30\uffff\1\1\76\uffff\1\1",
			"\1\3\1\1\44\uffff\1\2\30\uffff\1\1\76\uffff\1\1",
			"",
			""
	};

	static final short[] DFA96_eot = DFA.unpackEncodedString(DFA96_eotS);
	static final short[] DFA96_eof = DFA.unpackEncodedString(DFA96_eofS);
	static final char[] DFA96_min = DFA.unpackEncodedStringToUnsignedChars(DFA96_minS);
	static final char[] DFA96_max = DFA.unpackEncodedStringToUnsignedChars(DFA96_maxS);
	static final short[] DFA96_accept = DFA.unpackEncodedString(DFA96_acceptS);
	static final short[] DFA96_special = DFA.unpackEncodedString(DFA96_specialS);
	static final short[][] DFA96_transition;

	static {
		int numStates = DFA96_transitionS.length;
		DFA96_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA96_transition[i] = DFA.unpackEncodedString(DFA96_transitionS[i]);
		}
	}

	protected class DFA96 extends DFA {

		public DFA96(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 96;
			this.eot = DFA96_eot;
			this.eof = DFA96_eof;
			this.min = DFA96_min;
			this.max = DFA96_max;
			this.accept = DFA96_accept;
			this.special = DFA96_special;
			this.transition = DFA96_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 531:25: ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA103_eotS =
		"\5\uffff";
	static final String DFA103_eofS =
		"\5\uffff";
	static final String DFA103_minS =
		"\1\7\1\uffff\2\24\1\uffff";
	static final String DFA103_maxS =
		"\1\u0092\1\uffff\2\u0093\1\uffff";
	static final String DFA103_acceptS =
		"\1\uffff\1\1\2\uffff\1\2";
	static final String DFA103_specialS =
		"\5\uffff}>";
	static final String[] DFA103_transitionS = {
			"\1\1\3\uffff\5\2\3\uffff\1\1\4\uffff\1\1\7\uffff\1\1\7\uffff\1\1\2\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\1\1\uffff\1\1\7\uffff\3\2\13\uffff\3\1\5\uffff"+
			"\1\1\13\uffff\1\1\12\uffff\3\2\2\uffff\2\1\1\uffff\3\1\1\uffff\5\1\1"+
			"\uffff\4\1\2\uffff\1\1\4\uffff\5\2\6\uffff\1\1",
			"",
			"\1\1\1\uffff\1\3\44\uffff\1\4\30\uffff\1\3\76\uffff\1\3",
			"\1\1\1\uffff\1\3\44\uffff\1\4\30\uffff\1\3\76\uffff\1\3",
			""
	};

	static final short[] DFA103_eot = DFA.unpackEncodedString(DFA103_eotS);
	static final short[] DFA103_eof = DFA.unpackEncodedString(DFA103_eofS);
	static final char[] DFA103_min = DFA.unpackEncodedStringToUnsignedChars(DFA103_minS);
	static final char[] DFA103_max = DFA.unpackEncodedStringToUnsignedChars(DFA103_maxS);
	static final short[] DFA103_accept = DFA.unpackEncodedString(DFA103_acceptS);
	static final short[] DFA103_special = DFA.unpackEncodedString(DFA103_specialS);
	static final short[][] DFA103_transition;

	static {
		int numStates = DFA103_transitionS.length;
		DFA103_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA103_transition[i] = DFA.unpackEncodedString(DFA103_transitionS[i]);
		}
	}

	protected class DFA103 extends DFA {

		public DFA103(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 103;
			this.eot = DFA103_eot;
			this.eof = DFA103_eof;
			this.min = DFA103_min;
			this.max = DFA103_max;
			this.accept = DFA103_accept;
			this.special = DFA103_special;
			this.transition = DFA103_transition;
		}
		@Override
		public String getDescription() {
			return "539:14: ( propertyDeclaration | margin )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA107_eotS =
		"\5\uffff";
	static final String DFA107_eofS =
		"\5\uffff";
	static final String DFA107_minS =
		"\1\7\1\uffff\2\24\1\uffff";
	static final String DFA107_maxS =
		"\1\u0092\1\uffff\2\u0093\1\uffff";
	static final String DFA107_acceptS =
		"\1\uffff\1\1\2\uffff\1\2";
	static final String DFA107_specialS =
		"\5\uffff}>";
	static final String[] DFA107_transitionS = {
			"\1\1\3\uffff\5\2\3\uffff\1\1\4\uffff\1\1\7\uffff\1\1\7\uffff\1\1\2\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\1\1\uffff\1\1\7\uffff\3\2\13\uffff\3\1\5\uffff"+
			"\1\1\13\uffff\1\1\12\uffff\3\2\2\uffff\2\1\1\uffff\3\1\1\uffff\5\1\1"+
			"\uffff\4\1\2\uffff\1\1\4\uffff\5\2\6\uffff\1\1",
			"",
			"\1\1\1\uffff\1\3\44\uffff\1\4\30\uffff\1\3\76\uffff\1\3",
			"\1\1\1\uffff\1\3\44\uffff\1\4\30\uffff\1\3\76\uffff\1\3",
			""
	};

	static final short[] DFA107_eot = DFA.unpackEncodedString(DFA107_eotS);
	static final short[] DFA107_eof = DFA.unpackEncodedString(DFA107_eofS);
	static final char[] DFA107_min = DFA.unpackEncodedStringToUnsignedChars(DFA107_minS);
	static final char[] DFA107_max = DFA.unpackEncodedStringToUnsignedChars(DFA107_maxS);
	static final short[] DFA107_accept = DFA.unpackEncodedString(DFA107_acceptS);
	static final short[] DFA107_special = DFA.unpackEncodedString(DFA107_specialS);
	static final short[][] DFA107_transition;

	static {
		int numStates = DFA107_transitionS.length;
		DFA107_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA107_transition[i] = DFA.unpackEncodedString(DFA107_transitionS[i]);
		}
	}

	protected class DFA107 extends DFA {

		public DFA107(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 107;
			this.eot = DFA107_eot;
			this.eof = DFA107_eof;
			this.min = DFA107_min;
			this.max = DFA107_max;
			this.accept = DFA107_accept;
			this.special = DFA107_special;
			this.transition = DFA107_transition;
		}
		@Override
		public String getDescription() {
			return "539:60: ( propertyDeclaration | margin )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA126_eotS =
		"\6\uffff";
	static final String DFA126_eofS =
		"\6\uffff";
	static final String DFA126_minS =
		"\2\7\1\0\1\uffff\1\0\1\uffff";
	static final String DFA126_maxS =
		"\2\u0093\1\0\1\uffff\1\0\1\uffff";
	static final String DFA126_acceptS =
		"\3\uffff\1\2\1\uffff\1\1";
	static final String DFA126_specialS =
		"\2\uffff\1\0\1\uffff\1\1\1\uffff}>";
	static final String[] DFA126_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\6\uffff"+
			"\4\3\2\uffff\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2"+
			"\3\2\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\11\3\1\uffff\4\3\1\2\1"+
			"\uffff\1\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\6\uffff"+
			"\4\3\2\uffff\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2"+
			"\3\2\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\11\3\1\uffff\4\3\1\4\1"+
			"\uffff\1\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"\1\uffff",
			"",
			"\1\uffff",
			""
	};

	static final short[] DFA126_eot = DFA.unpackEncodedString(DFA126_eotS);
	static final short[] DFA126_eof = DFA.unpackEncodedString(DFA126_eofS);
	static final char[] DFA126_min = DFA.unpackEncodedStringToUnsignedChars(DFA126_minS);
	static final char[] DFA126_max = DFA.unpackEncodedStringToUnsignedChars(DFA126_maxS);
	static final short[] DFA126_accept = DFA.unpackEncodedString(DFA126_acceptS);
	static final short[] DFA126_special = DFA.unpackEncodedString(DFA126_specialS);
	static final short[][] DFA126_transition;

	static {
		int numStates = DFA126_transitionS.length;
		DFA126_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA126_transition[i] = DFA.unpackEncodedString(DFA126_transitionS[i]);
		}
	}

	protected class DFA126 extends DFA {

		public DFA126(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 126;
			this.eot = DFA126_eot;
			this.eof = DFA126_eof;
			this.min = DFA126_min;
			this.max = DFA126_max;
			this.accept = DFA126_accept;
			this.special = DFA126_special;
			this.transition = DFA126_transition;
		}
		@Override
		public String getDescription() {
			return "626:24: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA126_2 = input.LA(1);
						 
						int index126_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred16_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index126_2);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA126_4 = input.LA(1);
						 
						int index126_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred16_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index126_4);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 126, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA131_eotS =
		"\4\uffff";
	static final String DFA131_eofS =
		"\4\uffff";
	static final String DFA131_minS =
		"\2\7\2\uffff";
	static final String DFA131_maxS =
		"\2\u0093\2\uffff";
	static final String DFA131_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA131_specialS =
		"\4\uffff}>";
	static final String[] DFA131_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\2\1\3\6\uffff\4\3"+
			"\2\uffff\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2\3\2"+
			"\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\11\3\1\uffff\5\3\1\uffff\1"+
			"\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\2\1\3\6\uffff\4\3"+
			"\2\uffff\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2\3\2"+
			"\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\11\3\1\uffff\5\3\1\uffff\1"+
			"\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
	static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
	static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
	static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
	static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
	static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
	static final short[][] DFA131_transition;

	static {
		int numStates = DFA131_transitionS.length;
		DFA131_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
		}
	}

	protected class DFA131 extends DFA {

		public DFA131(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 131;
			this.eot = DFA131_eot;
			this.eof = DFA131_eof;
			this.min = DFA131_min;
			this.max = DFA131_max;
			this.accept = DFA131_accept;
			this.special = DFA131_special;
			this.transition = DFA131_transition;
		}
		@Override
		public String getDescription() {
			return "641:87: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA133_eotS =
		"\4\uffff";
	static final String DFA133_eofS =
		"\4\uffff";
	static final String DFA133_minS =
		"\2\7\2\uffff";
	static final String DFA133_maxS =
		"\2\u0093\2\uffff";
	static final String DFA133_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA133_specialS =
		"\4\uffff}>";
	static final String[] DFA133_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\2\1\3\6\uffff\4\3"+
			"\2\uffff\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2\3\2"+
			"\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\11\3\1\uffff\5\3\1\uffff\1"+
			"\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\2\1\3\6\uffff\4\3"+
			"\2\uffff\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2\3\2"+
			"\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\11\3\1\uffff\5\3\1\uffff\1"+
			"\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_eotS);
	static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_eofS);
	static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_minS);
	static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_maxS);
	static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_acceptS);
	static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_specialS);
	static final short[][] DFA133_transition;

	static {
		int numStates = DFA133_transitionS.length;
		DFA133_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA133_transition[i] = DFA.unpackEncodedString(DFA133_transitionS[i]);
		}
	}

	protected class DFA133 extends DFA {

		public DFA133(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 133;
			this.eot = DFA133_eot;
			this.eof = DFA133_eof;
			this.min = DFA133_min;
			this.max = DFA133_max;
			this.accept = DFA133_accept;
			this.special = DFA133_special;
			this.transition = DFA133_transition;
		}
		@Override
		public String getDescription() {
			return "642:57: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA138_eotS =
		"\53\uffff";
	static final String DFA138_eofS =
		"\53\uffff";
	static final String DFA138_minS =
		"\3\10\1\0\1\uffff\3\0\1\10\2\24\5\uffff\2\10\1\0\1\uffff\3\0\1\10\2\24"+
		"\1\0\1\24\1\12\1\24\5\0\1\uffff\2\0\2\12\3\0";
	static final String DFA138_maxS =
		"\1\u0085\2\u0093\1\0\1\uffff\3\0\3\u0093\5\uffff\2\u0093\1\0\1\uffff\3"+
		"\0\3\u0093\1\0\3\u0093\5\0\1\uffff\2\0\2\u0093\3\0";
	static final String DFA138_acceptS =
		"\4\uffff\1\2\6\uffff\5\1\3\uffff\1\1\17\uffff\1\1\7\uffff";
	static final String DFA138_specialS =
		"\1\42\1\2\1\17\1\3\1\uffff\1\21\1\6\1\20\1\13\1\4\1\26\5\uffff\1\5\1\24"+
		"\1\22\1\uffff\1\7\1\37\1\11\1\1\1\27\1\14\1\35\1\0\1\16\1\15\1\30\1\23"+
		"\1\10\1\40\1\12\1\uffff\1\36\1\31\1\25\1\41\1\32\1\33\1\34}>";
	static final String[] DFA138_transitionS = {
			"\1\4\13\uffff\1\12\1\13\10\uffff\1\4\1\uffff\1\10\12\uffff\1\4\1\2\2"+
			"\uffff\1\7\1\1\2\uffff\1\3\10\uffff\1\11\5\uffff\1\6\11\uffff\1\13\25"+
			"\uffff\2\4\3\uffff\1\13\15\uffff\1\4\14\uffff\1\5\2\uffff\1\4",
			"\1\4\13\uffff\2\17\1\15\11\uffff\1\17\13\uffff\1\17\2\uffff\1\17\1\16"+
			"\2\uffff\1\17\7\uffff\1\14\1\17\5\uffff\1\17\11\uffff\1\17\5\uffff\1"+
			"\4\1\uffff\1\15\22\uffff\1\17\32\uffff\1\17\20\uffff\1\15",
			"\1\4\13\uffff\1\31\1\17\1\20\7\uffff\1\4\1\uffff\1\27\12\uffff\1\4\1"+
			"\17\2\uffff\1\26\1\21\2\uffff\1\22\7\uffff\1\23\1\30\5\uffff\1\25\11"+
			"\uffff\1\17\7\uffff\1\20\15\uffff\1\4\4\uffff\1\17\15\uffff\1\4\14\uffff"+
			"\1\24\20\uffff\1\20",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\4\13\uffff\2\17\1\15\11\uffff\1\17\12\uffff\1\4\1\17\2\uffff\1\17"+
			"\1\16\2\uffff\1\32\7\uffff\1\23\1\17\5\uffff\1\17\1\4\10\uffff\1\17\7"+
			"\uffff\1\15\22\uffff\1\17\32\uffff\1\17\20\uffff\1\15",
			"\2\17\1\33\11\uffff\1\17\13\uffff\1\17\2\uffff\1\17\1\16\2\uffff\1\34"+
			"\7\uffff\1\23\1\17\5\uffff\1\17\11\uffff\1\17\7\uffff\1\33\15\uffff\1"+
			"\4\4\uffff\1\17\32\uffff\1\35\20\uffff\1\33",
			"\2\17\1\15\11\uffff\1\17\12\uffff\1\4\1\17\2\uffff\1\17\1\16\2\uffff"+
			"\1\36\7\uffff\1\23\1\17\5\uffff\1\17\11\uffff\1\17\7\uffff\1\15\3\uffff"+
			"\1\4\16\uffff\1\17\32\uffff\1\17\20\uffff\1\15",
			"",
			"",
			"",
			"",
			"",
			"\1\4\13\uffff\1\31\1\17\1\20\7\uffff\1\4\1\uffff\1\27\12\uffff\1\4\1"+
			"\17\2\uffff\1\42\1\21\2\uffff\1\37\7\uffff\1\23\1\30\5\uffff\1\41\11"+
			"\uffff\1\17\7\uffff\1\20\15\uffff\1\4\4\uffff\1\17\15\uffff\1\4\14\uffff"+
			"\1\40\20\uffff\1\20",
			"\1\4\13\uffff\2\17\1\15\11\uffff\1\17\13\uffff\1\17\2\uffff\1\17\1\16"+
			"\2\uffff\1\17\7\uffff\1\43\1\17\5\uffff\1\17\11\uffff\1\17\5\uffff\1"+
			"\4\1\uffff\1\15\22\uffff\1\17\32\uffff\1\17\20\uffff\1\15",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\4\13\uffff\2\17\1\15\11\uffff\1\17\12\uffff\1\4\1\17\2\uffff\1\17"+
			"\1\16\2\uffff\1\44\7\uffff\1\23\1\17\5\uffff\1\17\1\4\10\uffff\1\17\7"+
			"\uffff\1\15\22\uffff\1\17\32\uffff\1\17\20\uffff\1\15",
			"\2\17\1\33\11\uffff\1\17\13\uffff\1\17\2\uffff\1\17\1\16\2\uffff\1\34"+
			"\7\uffff\1\23\1\17\5\uffff\1\17\11\uffff\1\17\7\uffff\1\33\15\uffff\1"+
			"\4\4\uffff\1\17\32\uffff\1\35\20\uffff\1\33",
			"\2\17\1\15\11\uffff\1\17\12\uffff\1\4\1\17\2\uffff\1\17\1\16\2\uffff"+
			"\1\45\7\uffff\1\23\1\17\5\uffff\1\17\11\uffff\1\17\7\uffff\1\15\3\uffff"+
			"\1\4\16\uffff\1\17\32\uffff\1\17\20\uffff\1\15",
			"\1\uffff",
			"\2\17\1\33\11\uffff\1\17\13\uffff\1\17\2\uffff\1\17\1\16\2\uffff\1\46"+
			"\7\uffff\1\23\1\17\5\uffff\1\17\11\uffff\1\17\7\uffff\1\33\22\uffff\1"+
			"\17\32\uffff\1\17\20\uffff\1\33",
			"\1\4\11\uffff\2\17\1\47\1\4\5\uffff\1\4\2\uffff\1\17\2\uffff\1\4\10"+
			"\uffff\1\17\2\uffff\1\17\1\16\2\uffff\1\17\2\uffff\1\4\4\uffff\1\23\1"+
			"\17\5\uffff\1\17\11\uffff\1\17\7\uffff\1\47\7\uffff\1\4\5\uffff\1\4\4"+
			"\uffff\1\50\32\uffff\1\17\20\uffff\1\47",
			"\2\17\1\15\11\uffff\1\17\13\uffff\1\17\2\uffff\1\17\1\16\2\uffff\1\17"+
			"\7\uffff\1\23\1\17\5\uffff\1\17\11\uffff\1\17\7\uffff\1\15\15\uffff\1"+
			"\4\4\uffff\1\17\32\uffff\1\17\20\uffff\1\15",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\4\11\uffff\2\17\1\47\1\4\5\uffff\1\4\2\uffff\1\17\2\uffff\1\4\10"+
			"\uffff\1\17\2\uffff\1\17\1\16\2\uffff\1\17\2\uffff\1\4\4\uffff\1\23\1"+
			"\17\5\uffff\1\17\11\uffff\1\17\7\uffff\1\47\7\uffff\1\4\12\uffff\1\51"+
			"\32\uffff\1\17\20\uffff\1\47",
			"\1\4\11\uffff\2\17\1\47\1\4\5\uffff\1\4\2\uffff\1\17\2\uffff\1\4\10"+
			"\uffff\1\17\2\uffff\1\17\1\16\2\uffff\1\17\2\uffff\1\4\4\uffff\1\23\1"+
			"\17\5\uffff\1\17\11\uffff\1\17\7\uffff\1\47\7\uffff\1\4\12\uffff\1\52"+
			"\32\uffff\1\17\20\uffff\1\47",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff"
	};

	static final short[] DFA138_eot = DFA.unpackEncodedString(DFA138_eotS);
	static final short[] DFA138_eof = DFA.unpackEncodedString(DFA138_eofS);
	static final char[] DFA138_min = DFA.unpackEncodedStringToUnsignedChars(DFA138_minS);
	static final char[] DFA138_max = DFA.unpackEncodedStringToUnsignedChars(DFA138_maxS);
	static final short[] DFA138_accept = DFA.unpackEncodedString(DFA138_acceptS);
	static final short[] DFA138_special = DFA.unpackEncodedString(DFA138_specialS);
	static final short[][] DFA138_transition;

	static {
		int numStates = DFA138_transitionS.length;
		DFA138_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA138_transition[i] = DFA.unpackEncodedString(DFA138_transitionS[i]);
		}
	}

	protected class DFA138 extends DFA {

		public DFA138(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 138;
			this.eot = DFA138_eot;
			this.eof = DFA138_eof;
			this.min = DFA138_min;
			this.max = DFA138_max;
			this.accept = DFA138_accept;
			this.special = DFA138_special;
			this.transition = DFA138_transition;
		}
		@Override
		public String getDescription() {
			return "658:1: selectorsGroup : ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression | selector ( ( ws )? COMMA ( ws )? selector )* );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA138_27 = input.LA(1);
						 
						int index138_27 = input.index();
						input.rewind();
						s = -1;
						if ( (LA138_27==HASH_SYMBOL) && (synpred25_Css3())) {s = 14;}
						else if ( (LA138_27==IDENT) ) {s = 38;}
						else if ( (LA138_27==COMMENT||LA138_27==NL||LA138_27==WS) ) {s = 27;}
						else if ( (LA138_27==LBRACE) && (synpred25_Css3())) {s = 19;}
						else if ( ((LA138_27 >= COLON && LA138_27 <= COMMA)||LA138_27==DOT||LA138_27==GREATER||LA138_27==HASH||LA138_27==LBRACKET||LA138_27==LESS_AND||LA138_27==MINUS||LA138_27==RBRACKET||LA138_27==STAR) && (synpred25_Css3())) {s = 15;}
						 
						input.seek(index138_27);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA138_23 = input.LA(1);
						 
						int index138_23 = input.index();
						input.rewind();
						s = -1;
						if ( (LA138_23==COMMENT||LA138_23==NL||LA138_23==WS) && (synpred25_Css3())) {s = 13;}
						else if ( (LA138_23==LBRACE) && (synpred25_Css3())) {s = 19;}
						else if ( (LA138_23==HASH_SYMBOL) && (synpred25_Css3())) {s = 14;}
						else if ( (LA138_23==IDENT) ) {s = 36;}
						else if ( ((LA138_23 >= COLON && LA138_23 <= COMMA)||LA138_23==DOT||LA138_23==GREATER||LA138_23==HASH||LA138_23==LBRACKET||LA138_23==LESS_AND||LA138_23==MINUS||LA138_23==RBRACKET||LA138_23==STAR) && (synpred25_Css3())) {s = 15;}
						else if ( (LA138_23==AT_SIGN||LA138_23==GEN||LA138_23==LESS_IMPORT_TYPE) ) {s = 4;}
						 
						input.seek(index138_23);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA138_1 = input.LA(1);
						 
						int index138_1 = input.index();
						input.rewind();
						s = -1;
						if ( (LA138_1==LBRACE) && (synpred25_Css3())) {s = 12;}
						else if ( (LA138_1==COMMENT||LA138_1==NL||LA138_1==WS) && (synpred25_Css3())) {s = 13;}
						else if ( (LA138_1==HASH_SYMBOL) && (synpred25_Css3())) {s = 14;}
						else if ( ((LA138_1 >= COLON && LA138_1 <= COMMA)||LA138_1==DOT||LA138_1==GREATER||LA138_1==HASH||LA138_1==IDENT||LA138_1==LBRACKET||LA138_1==LESS_AND||LA138_1==MINUS||LA138_1==RBRACKET||LA138_1==STAR) && (synpred25_Css3())) {s = 15;}
						else if ( (LA138_1==AT_SIGN||LA138_1==NAME) ) {s = 4;}
						 
						input.seek(index138_1);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA138_3 = input.LA(1);
						 
						int index138_3 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred25_Css3()) ) {s = 19;}
						else if ( (true) ) {s = 4;}
						 
						input.seek(index138_3);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA138_9 = input.LA(1);
						 
						int index138_9 = input.index();
						input.rewind();
						s = -1;
						if ( (LA138_9==COMMENT||LA138_9==NL||LA138_9==WS) ) {s = 27;}
						else if ( (LA138_9==HASH_SYMBOL) && (synpred25_Css3())) {s = 14;}
						else if ( (LA138_9==IDENT) ) {s = 28;}
						else if ( (LA138_9==LBRACE) && (synpred25_Css3())) {s = 19;}
						else if ( (LA138_9==STAR) ) {s = 29;}
						else if ( ((LA138_9 >= COLON && LA138_9 <= COMMA)||LA138_9==DOT||LA138_9==GREATER||LA138_9==HASH||LA138_9==LBRACKET||LA138_9==LESS_AND||LA138_9==MINUS||LA138_9==RBRACKET) && (synpred25_Css3())) {s = 15;}
						else if ( (LA138_9==PIPE) ) {s = 4;}
						 
						input.seek(index138_9);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA138_16 = input.LA(1);
						 
						int index138_16 = input.index();
						input.rewind();
						s = -1;
						if ( (LA138_16==HASH_SYMBOL) ) {s = 17;}
						else if ( (LA138_16==IDENT) ) {s = 31;}
						else if ( (LA138_16==COMMENT||LA138_16==NL||LA138_16==WS) ) {s = 16;}
						else if ( (LA138_16==LBRACE) && (synpred25_Css3())) {s = 19;}
						else if ( (LA138_16==STAR) ) {s = 32;}
						else if ( (LA138_16==LESS_AND) ) {s = 33;}
						else if ( (LA138_16==AT_SIGN||LA138_16==DCOLON||LA138_16==GEN||LA138_16==PIPE||LA138_16==SASS_EXTEND_ONLY_SELECTOR) ) {s = 4;}
						else if ( (LA138_16==HASH) ) {s = 34;}
						else if ( (LA138_16==DOT) ) {s = 23;}
						else if ( (LA138_16==LBRACKET) ) {s = 24;}
						else if ( (LA138_16==COLON) ) {s = 25;}
						else if ( (LA138_16==COMMA||LA138_16==GREATER||LA138_16==MINUS||LA138_16==RBRACKET) && (synpred25_Css3())) {s = 15;}
						 
						input.seek(index138_16);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA138_6 = input.LA(1);
						 
						int index138_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred25_Css3()) ) {s = 19;}
						else if ( (true) ) {s = 4;}
						 
						input.seek(index138_6);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA138_20 = input.LA(1);
						 
						int index138_20 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred25_Css3()) ) {s = 35;}
						else if ( (true) ) {s = 4;}
						 
						input.seek(index138_20);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA138_32 = input.LA(1);
						 
						int index138_32 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred25_Css3()) ) {s = 35;}
						else if ( (true) ) {s = 4;}
						 
						input.seek(index138_32);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA138_22 = input.LA(1);
						 
						int index138_22 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred25_Css3()) ) {s = 35;}
						else if ( (true) ) {s = 4;}
						 
						input.seek(index138_22);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA138_34 = input.LA(1);
						 
						int index138_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred25_Css3()) ) {s = 35;}
						else if ( (true) ) {s = 4;}
						 
						input.seek(index138_34);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA138_8 = input.LA(1);
						 
						int index138_8 = input.index();
						input.rewind();
						s = -1;
						if ( (LA138_8==COMMENT||LA138_8==NL||LA138_8==WS) && (synpred25_Css3())) {s = 13;}
						else if ( (LA138_8==HASH_SYMBOL) && (synpred25_Css3())) {s = 14;}
						else if ( (LA138_8==IDENT) ) {s = 26;}
						else if ( (LA138_8==LBRACE) && (synpred25_Css3())) {s = 19;}
						else if ( ((LA138_8 >= COLON && LA138_8 <= COMMA)||LA138_8==DOT||LA138_8==GREATER||LA138_8==HASH||LA138_8==LBRACKET||LA138_8==LESS_AND||LA138_8==MINUS||LA138_8==RBRACKET||LA138_8==STAR) && (synpred25_Css3())) {s = 15;}
						else if ( (LA138_8==AT_SIGN||LA138_8==GEN||LA138_8==LESS_IMPORT_TYPE) ) {s = 4;}
						 
						input.seek(index138_8);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA138_25 = input.LA(1);
						 
						int index138_25 = input.index();
						input.rewind();
						s = -1;
						if ( (LA138_25==COMMENT||LA138_25==NL||LA138_25==WS) && (synpred25_Css3())) {s = 13;}
						else if ( (LA138_25==LBRACE) && (synpred25_Css3())) {s = 19;}
						else if ( (LA138_25==HASH_SYMBOL) && (synpred25_Css3())) {s = 14;}
						else if ( (LA138_25==IDENT) ) {s = 37;}
						else if ( ((LA138_25 >= COLON && LA138_25 <= COMMA)||LA138_25==DOT||LA138_25==GREATER||LA138_25==HASH||LA138_25==LBRACKET||LA138_25==LESS_AND||LA138_25==MINUS||LA138_25==RBRACKET||LA138_25==STAR) && (synpred25_Css3())) {s = 15;}
						else if ( (LA138_25==GEN||LA138_25==NOT) ) {s = 4;}
						 
						input.seek(index138_25);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA138_29 = input.LA(1);
						 
						int index138_29 = input.index();
						input.rewind();
						s = -1;
						if ( (LA138_29==COMMENT||LA138_29==NL||LA138_29==WS) && (synpred25_Css3())) {s = 13;}
						else if ( (LA138_29==LBRACE) && (synpred25_Css3())) {s = 19;}
						else if ( (LA138_29==HASH_SYMBOL) && (synpred25_Css3())) {s = 14;}
						else if ( ((LA138_29 >= COLON && LA138_29 <= COMMA)||LA138_29==DOT||LA138_29==GREATER||LA138_29==HASH||LA138_29==IDENT||LA138_29==LBRACKET||LA138_29==LESS_AND||LA138_29==MINUS||LA138_29==RBRACKET||LA138_29==STAR) && (synpred25_Css3())) {s = 15;}
						else if ( (LA138_29==PIPE) ) {s = 4;}
						 
						input.seek(index138_29);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA138_28 = input.LA(1);
						 
						int index138_28 = input.index();
						input.rewind();
						s = -1;
						if ( (LA138_28==COMMENT||LA138_28==NL||LA138_28==WS) ) {s = 39;}
						else if ( (LA138_28==LBRACE) && (synpred25_Css3())) {s = 19;}
						else if ( (LA138_28==HASH_SYMBOL) && (synpred25_Css3())) {s = 14;}
						else if ( (LA138_28==RBRACKET) ) {s = 40;}
						else if ( (LA138_28==BEGINS||LA138_28==CONTAINS||LA138_28==DASHMATCH||LA138_28==ENDS||LA138_28==INCLUDES||LA138_28==OPEQ||LA138_28==PIPE) ) {s = 4;}
						else if ( ((LA138_28 >= COLON && LA138_28 <= COMMA)||LA138_28==DOT||LA138_28==GREATER||LA138_28==HASH||LA138_28==IDENT||LA138_28==LBRACKET||LA138_28==LESS_AND||LA138_28==MINUS||LA138_28==STAR) && (synpred25_Css3())) {s = 15;}
						 
						input.seek(index138_28);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA138_2 = input.LA(1);
						 
						int index138_2 = input.index();
						input.rewind();
						s = -1;
						if ( (LA138_2==COMMENT||LA138_2==NL||LA138_2==WS) ) {s = 16;}
						else if ( (LA138_2==HASH_SYMBOL) ) {s = 17;}
						else if ( (LA138_2==IDENT) ) {s = 18;}
						else if ( (LA138_2==LBRACE) && (synpred25_Css3())) {s = 19;}
						else if ( (LA138_2==STAR) ) {s = 20;}
						else if ( (LA138_2==LESS_AND) ) {s = 21;}
						else if ( (LA138_2==AT_SIGN||LA138_2==DCOLON||LA138_2==GEN||LA138_2==PIPE||LA138_2==SASS_EXTEND_ONLY_SELECTOR) ) {s = 4;}
						else if ( (LA138_2==HASH) ) {s = 22;}
						else if ( (LA138_2==DOT) ) {s = 23;}
						else if ( (LA138_2==LBRACKET) ) {s = 24;}
						else if ( (LA138_2==COLON) ) {s = 25;}
						else if ( (LA138_2==COMMA||LA138_2==GREATER||LA138_2==MINUS||LA138_2==RBRACKET) && (synpred25_Css3())) {s = 15;}
						 
						input.seek(index138_2);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA138_7 = input.LA(1);
						 
						int index138_7 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred25_Css3()) ) {s = 19;}
						else if ( (true) ) {s = 4;}
						 
						input.seek(index138_7);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA138_5 = input.LA(1);
						 
						int index138_5 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred25_Css3()) ) {s = 19;}
						else if ( (true) ) {s = 4;}
						 
						input.seek(index138_5);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA138_18 = input.LA(1);
						 
						int index138_18 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred25_Css3()) ) {s = 35;}
						else if ( (true) ) {s = 4;}
						 
						input.seek(index138_18);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA138_31 = input.LA(1);
						 
						int index138_31 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred25_Css3()) ) {s = 35;}
						else if ( (true) ) {s = 4;}
						 
						input.seek(index138_31);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA138_17 = input.LA(1);
						 
						int index138_17 = input.index();
						input.rewind();
						s = -1;
						if ( (LA138_17==LBRACE) && (synpred25_Css3())) {s = 35;}
						else if ( (LA138_17==COMMENT||LA138_17==NL||LA138_17==WS) && (synpred25_Css3())) {s = 13;}
						else if ( (LA138_17==HASH_SYMBOL) && (synpred25_Css3())) {s = 14;}
						else if ( ((LA138_17 >= COLON && LA138_17 <= COMMA)||LA138_17==DOT||LA138_17==GREATER||LA138_17==HASH||LA138_17==IDENT||LA138_17==LBRACKET||LA138_17==LESS_AND||LA138_17==MINUS||LA138_17==RBRACKET||LA138_17==STAR) && (synpred25_Css3())) {s = 15;}
						else if ( (LA138_17==AT_SIGN||LA138_17==NAME) ) {s = 4;}
						 
						input.seek(index138_17);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA138_38 = input.LA(1);
						 
						int index138_38 = input.index();
						input.rewind();
						s = -1;
						if ( (LA138_38==COMMENT||LA138_38==NL||LA138_38==WS) ) {s = 39;}
						else if ( (LA138_38==LBRACE) && (synpred25_Css3())) {s = 19;}
						else if ( (LA138_38==HASH_SYMBOL) && (synpred25_Css3())) {s = 14;}
						else if ( (LA138_38==RBRACKET) ) {s = 41;}
						else if ( (LA138_38==BEGINS||LA138_38==CONTAINS||LA138_38==DASHMATCH||LA138_38==ENDS||LA138_38==INCLUDES||LA138_38==OPEQ) ) {s = 4;}
						else if ( ((LA138_38 >= COLON && LA138_38 <= COMMA)||LA138_38==DOT||LA138_38==GREATER||LA138_38==HASH||LA138_38==IDENT||LA138_38==LBRACKET||LA138_38==LESS_AND||LA138_38==MINUS||LA138_38==STAR) && (synpred25_Css3())) {s = 15;}
						 
						input.seek(index138_38);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA138_10 = input.LA(1);
						 
						int index138_10 = input.index();
						input.rewind();
						s = -1;
						if ( (LA138_10==COMMENT||LA138_10==NL||LA138_10==WS) && (synpred25_Css3())) {s = 13;}
						else if ( (LA138_10==HASH_SYMBOL) && (synpred25_Css3())) {s = 14;}
						else if ( (LA138_10==IDENT) ) {s = 30;}
						else if ( (LA138_10==LBRACE) && (synpred25_Css3())) {s = 19;}
						else if ( ((LA138_10 >= COLON && LA138_10 <= COMMA)||LA138_10==DOT||LA138_10==GREATER||LA138_10==HASH||LA138_10==LBRACKET||LA138_10==LESS_AND||LA138_10==MINUS||LA138_10==RBRACKET||LA138_10==STAR) && (synpred25_Css3())) {s = 15;}
						else if ( (LA138_10==GEN||LA138_10==NOT) ) {s = 4;}
						 
						input.seek(index138_10);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA138_24 = input.LA(1);
						 
						int index138_24 = input.index();
						input.rewind();
						s = -1;
						if ( (LA138_24==COMMENT||LA138_24==NL||LA138_24==WS) ) {s = 27;}
						else if ( (LA138_24==LBRACE) && (synpred25_Css3())) {s = 19;}
						else if ( (LA138_24==HASH_SYMBOL) && (synpred25_Css3())) {s = 14;}
						else if ( (LA138_24==IDENT) ) {s = 28;}
						else if ( (LA138_24==STAR) ) {s = 29;}
						else if ( ((LA138_24 >= COLON && LA138_24 <= COMMA)||LA138_24==DOT||LA138_24==GREATER||LA138_24==HASH||LA138_24==LBRACKET||LA138_24==LESS_AND||LA138_24==MINUS||LA138_24==RBRACKET) && (synpred25_Css3())) {s = 15;}
						else if ( (LA138_24==PIPE) ) {s = 4;}
						 
						input.seek(index138_24);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA138_30 = input.LA(1);
						 
						int index138_30 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred25_Css3()) ) {s = 35;}
						else if ( (true) ) {s = 4;}
						 
						input.seek(index138_30);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA138_37 = input.LA(1);
						 
						int index138_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred25_Css3()) ) {s = 35;}
						else if ( (true) ) {s = 4;}
						 
						input.seek(index138_37);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA138_40 = input.LA(1);
						 
						int index138_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred25_Css3()) ) {s = 35;}
						else if ( (true) ) {s = 4;}
						 
						input.seek(index138_40);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA138_41 = input.LA(1);
						 
						int index138_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred25_Css3()) ) {s = 35;}
						else if ( (true) ) {s = 4;}
						 
						input.seek(index138_41);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA138_42 = input.LA(1);
						 
						int index138_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred25_Css3()) ) {s = 35;}
						else if ( (true) ) {s = 4;}
						 
						input.seek(index138_42);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA138_26 = input.LA(1);
						 
						int index138_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred25_Css3()) ) {s = 35;}
						else if ( (true) ) {s = 4;}
						 
						input.seek(index138_26);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA138_36 = input.LA(1);
						 
						int index138_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred25_Css3()) ) {s = 35;}
						else if ( (true) ) {s = 4;}
						 
						input.seek(index138_36);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA138_21 = input.LA(1);
						 
						int index138_21 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred25_Css3()) ) {s = 35;}
						else if ( (true) ) {s = 4;}
						 
						input.seek(index138_21);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA138_33 = input.LA(1);
						 
						int index138_33 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred25_Css3()) ) {s = 35;}
						else if ( (true) ) {s = 4;}
						 
						input.seek(index138_33);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA138_39 = input.LA(1);
						 
						int index138_39 = input.index();
						input.rewind();
						s = -1;
						if ( (LA138_39==LBRACE) && (synpred25_Css3())) {s = 19;}
						else if ( (LA138_39==COMMENT||LA138_39==NL||LA138_39==WS) ) {s = 39;}
						else if ( (LA138_39==HASH_SYMBOL) && (synpred25_Css3())) {s = 14;}
						else if ( (LA138_39==RBRACKET) ) {s = 42;}
						else if ( (LA138_39==BEGINS||LA138_39==CONTAINS||LA138_39==DASHMATCH||LA138_39==ENDS||LA138_39==INCLUDES||LA138_39==OPEQ) ) {s = 4;}
						else if ( ((LA138_39 >= COLON && LA138_39 <= COMMA)||LA138_39==DOT||LA138_39==GREATER||LA138_39==HASH||LA138_39==IDENT||LA138_39==LBRACKET||LA138_39==LESS_AND||LA138_39==MINUS||LA138_39==STAR) && (synpred25_Css3())) {s = 15;}
						 
						input.seek(index138_39);
						if ( s>=0 ) return s;
						break;

					case 34 : 
						int LA138_0 = input.LA(1);
						 
						int index138_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA138_0==HASH_SYMBOL) ) {s = 1;}
						else if ( (LA138_0==GREATER) ) {s = 2;}
						else if ( (LA138_0==IDENT) ) {s = 3;}
						else if ( (LA138_0==AT_SIGN||LA138_0==DCOLON||LA138_0==GEN||(LA138_0 >= PIPE && LA138_0 <= PLUS)||LA138_0==SASS_EXTEND_ONLY_SELECTOR||LA138_0==TILDE) ) {s = 4;}
						else if ( (LA138_0==STAR) ) {s = 5;}
						else if ( (LA138_0==LESS_AND) ) {s = 6;}
						else if ( (LA138_0==HASH) ) {s = 7;}
						else if ( (LA138_0==DOT) ) {s = 8;}
						else if ( (LA138_0==LBRACKET) ) {s = 9;}
						else if ( (LA138_0==COLON) ) {s = 10;}
						else if ( (LA138_0==COMMA||LA138_0==MINUS||LA138_0==RBRACKET) && (synpred25_Css3())) {s = 11;}
						 
						input.seek(index138_0);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 138, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA137_eotS =
		"\4\uffff";
	static final String DFA137_eofS =
		"\4\uffff";
	static final String DFA137_minS =
		"\2\25\2\uffff";
	static final String DFA137_maxS =
		"\2\u0093\2\uffff";
	static final String DFA137_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA137_specialS =
		"\4\uffff}>";
	static final String[] DFA137_transitionS = {
			"\1\3\1\1\44\uffff\1\2\30\uffff\1\1\76\uffff\1\1",
			"\1\3\1\1\44\uffff\1\2\30\uffff\1\1\76\uffff\1\1",
			"",
			""
	};

	static final short[] DFA137_eot = DFA.unpackEncodedString(DFA137_eotS);
	static final short[] DFA137_eof = DFA.unpackEncodedString(DFA137_eofS);
	static final char[] DFA137_min = DFA.unpackEncodedStringToUnsignedChars(DFA137_minS);
	static final char[] DFA137_max = DFA.unpackEncodedStringToUnsignedChars(DFA137_maxS);
	static final short[] DFA137_accept = DFA.unpackEncodedString(DFA137_acceptS);
	static final short[] DFA137_special = DFA.unpackEncodedString(DFA137_specialS);
	static final short[][] DFA137_transition;

	static {
		int numStates = DFA137_transitionS.length;
		DFA137_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA137_transition[i] = DFA.unpackEncodedString(DFA137_transitionS[i]);
		}
	}

	protected class DFA137 extends DFA {

		public DFA137(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 137;
			this.eot = DFA137_eot;
			this.eof = DFA137_eof;
			this.min = DFA137_min;
			this.max = DFA137_max;
			this.accept = DFA137_accept;
			this.special = DFA137_special;
			this.transition = DFA137_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 663:18: ( ( ws )? COMMA ( ws )? selector )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA145_eotS =
		"\4\uffff";
	static final String DFA145_eofS =
		"\4\uffff";
	static final String DFA145_minS =
		"\2\10\2\uffff";
	static final String DFA145_maxS =
		"\2\u0093\2\uffff";
	static final String DFA145_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA145_specialS =
		"\4\uffff}>";
	static final String[] DFA145_transitionS = {
			"\1\3\13\uffff\1\3\1\2\1\1\7\uffff\1\3\1\uffff\1\3\12\uffff\2\3\2\uffff"+
			"\2\3\2\uffff\1\3\7\uffff\1\2\1\3\5\uffff\1\3\21\uffff\1\1\15\uffff\2"+
			"\3\21\uffff\1\3\14\uffff\1\3\2\uffff\1\3\15\uffff\1\1",
			"\1\3\13\uffff\1\3\1\2\1\1\7\uffff\1\3\1\uffff\1\3\12\uffff\2\3\2\uffff"+
			"\2\3\2\uffff\1\3\7\uffff\1\2\1\3\5\uffff\1\3\21\uffff\1\1\15\uffff\2"+
			"\3\21\uffff\1\3\14\uffff\1\3\2\uffff\1\3\15\uffff\1\1",
			"",
			""
	};

	static final short[] DFA145_eot = DFA.unpackEncodedString(DFA145_eotS);
	static final short[] DFA145_eof = DFA.unpackEncodedString(DFA145_eofS);
	static final char[] DFA145_min = DFA.unpackEncodedStringToUnsignedChars(DFA145_minS);
	static final char[] DFA145_max = DFA.unpackEncodedStringToUnsignedChars(DFA145_maxS);
	static final short[] DFA145_accept = DFA.unpackEncodedString(DFA145_acceptS);
	static final short[] DFA145_special = DFA.unpackEncodedString(DFA145_specialS);
	static final short[][] DFA145_transition;

	static {
		int numStates = DFA145_transitionS.length;
		DFA145_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA145_transition[i] = DFA.unpackEncodedString(DFA145_transitionS[i]);
		}
	}

	protected class DFA145 extends DFA {

		public DFA145(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 145;
			this.eot = DFA145_eot;
			this.eof = DFA145_eof;
			this.min = DFA145_min;
			this.max = DFA145_max;
			this.accept = DFA145_accept;
			this.special = DFA145_special;
			this.transition = DFA145_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 667:49: ( ( ( ( ws )? combinator ( ws )? ) | ( ws )? ) simpleSelectorSequence )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA144_eotS =
		"\4\uffff";
	static final String DFA144_eofS =
		"\4\uffff";
	static final String DFA144_minS =
		"\2\10\2\uffff";
	static final String DFA144_maxS =
		"\2\u0093\2\uffff";
	static final String DFA144_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA144_specialS =
		"\4\uffff}>";
	static final String[] DFA144_transitionS = {
			"\1\3\13\uffff\1\3\1\uffff\1\1\7\uffff\1\3\1\uffff\1\3\12\uffff\1\3\1"+
			"\2\2\uffff\2\3\2\uffff\1\3\10\uffff\1\3\5\uffff\1\3\21\uffff\1\1\15\uffff"+
			"\1\3\1\2\21\uffff\1\3\14\uffff\1\3\2\uffff\1\2\15\uffff\1\1",
			"\1\3\13\uffff\1\3\1\uffff\1\1\7\uffff\1\3\1\uffff\1\3\12\uffff\1\3\1"+
			"\2\2\uffff\2\3\2\uffff\1\3\10\uffff\1\3\5\uffff\1\3\21\uffff\1\1\15\uffff"+
			"\1\3\1\2\21\uffff\1\3\14\uffff\1\3\2\uffff\1\2\15\uffff\1\1",
			"",
			""
	};

	static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_eotS);
	static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_eofS);
	static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_minS);
	static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_maxS);
	static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_acceptS);
	static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_specialS);
	static final short[][] DFA144_transition;

	static {
		int numStates = DFA144_transitionS.length;
		DFA144_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA144_transition[i] = DFA.unpackEncodedString(DFA144_transitionS[i]);
		}
	}

	protected class DFA144 extends DFA {

		public DFA144(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 144;
			this.eot = DFA144_eot;
			this.eof = DFA144_eof;
			this.min = DFA144_min;
			this.max = DFA144_max;
			this.accept = DFA144_accept;
			this.special = DFA144_special;
			this.transition = DFA144_transition;
		}
		@Override
		public String getDescription() {
			return "667:51: ( ( ( ws )? combinator ( ws )? ) | ( ws )? )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA167_eotS =
		"\4\uffff";
	static final String DFA167_eofS =
		"\4\uffff";
	static final String DFA167_minS =
		"\2\7\2\uffff";
	static final String DFA167_maxS =
		"\2\u0093\2\uffff";
	static final String DFA167_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA167_specialS =
		"\4\uffff}>";
	static final String[] DFA167_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\5\uffff"+
			"\5\3\2\uffff\1\3\6\uffff\1\2\1\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3"+
			"\2\uffff\2\3\2\uffff\2\3\2\uffff\4\3\1\uffff\2\3\1\uffff\17\3\1\uffff"+
			"\1\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\5\uffff"+
			"\5\3\2\uffff\1\3\6\uffff\1\2\1\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3"+
			"\2\uffff\2\3\2\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\17\3\1\uffff"+
			"\1\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA167_eot = DFA.unpackEncodedString(DFA167_eotS);
	static final short[] DFA167_eof = DFA.unpackEncodedString(DFA167_eofS);
	static final char[] DFA167_min = DFA.unpackEncodedStringToUnsignedChars(DFA167_minS);
	static final char[] DFA167_max = DFA.unpackEncodedStringToUnsignedChars(DFA167_maxS);
	static final short[] DFA167_accept = DFA.unpackEncodedString(DFA167_acceptS);
	static final short[] DFA167_special = DFA.unpackEncodedString(DFA167_specialS);
	static final short[][] DFA167_transition;

	static {
		int numStates = DFA167_transitionS.length;
		DFA167_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA167_transition[i] = DFA.unpackEncodedString(DFA167_transitionS[i]);
		}
	}

	protected class DFA167 extends DFA {

		public DFA167(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 167;
			this.eot = DFA167_eot;
			this.eof = DFA167_eof;
			this.min = DFA167_min;
			this.max = DFA167_max;
			this.accept = DFA167_accept;
			this.special = DFA167_special;
			this.transition = DFA167_transition;
		}
		@Override
		public String getDescription() {
			return "791:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA176_eotS =
		"\4\uffff";
	static final String DFA176_eofS =
		"\1\3\3\uffff";
	static final String DFA176_minS =
		"\2\7\2\uffff";
	static final String DFA176_maxS =
		"\2\u0093\2\uffff";
	static final String DFA176_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA176_specialS =
		"\4\uffff}>";
	static final String[] DFA176_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\2\1\3\6\uffff\4\3"+
			"\2\uffff\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2\3\2"+
			"\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\11\3\1\uffff\5\3\1\uffff\1"+
			"\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\2\1\3\6\uffff\4\3"+
			"\2\uffff\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2\3\2"+
			"\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\11\3\1\uffff\5\3\1\uffff\1"+
			"\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA176_eot = DFA.unpackEncodedString(DFA176_eotS);
	static final short[] DFA176_eof = DFA.unpackEncodedString(DFA176_eofS);
	static final char[] DFA176_min = DFA.unpackEncodedStringToUnsignedChars(DFA176_minS);
	static final char[] DFA176_max = DFA.unpackEncodedStringToUnsignedChars(DFA176_maxS);
	static final short[] DFA176_accept = DFA.unpackEncodedString(DFA176_acceptS);
	static final short[] DFA176_special = DFA.unpackEncodedString(DFA176_specialS);
	static final short[][] DFA176_transition;

	static {
		int numStates = DFA176_transitionS.length;
		DFA176_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA176_transition[i] = DFA.unpackEncodedString(DFA176_transitionS[i]);
		}
	}

	protected class DFA176 extends DFA {

		public DFA176(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 176;
			this.eot = DFA176_eot;
			this.eof = DFA176_eof;
			this.min = DFA176_min;
			this.max = DFA176_max;
			this.accept = DFA176_accept;
			this.special = DFA176_special;
			this.transition = DFA176_transition;
		}
		@Override
		public String getDescription() {
			return "802:48: ( ( ws )? prio )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA186_eotS =
		"\77\uffff";
	static final String DFA186_eofS =
		"\1\2\76\uffff";
	static final String DFA186_minS =
		"\1\6\1\0\5\uffff\2\0\1\uffff\16\0\2\uffff\1\0\4\uffff\1\0\1\uffff\1\0"+
		"\1\uffff\10\0\4\uffff\1\0\17\uffff";
	static final String DFA186_maxS =
		"\1\u0093\1\0\5\uffff\2\0\1\uffff\16\0\2\uffff\1\0\4\uffff\1\0\1\uffff"+
		"\1\0\1\uffff\10\0\4\uffff\1\0\17\uffff";
	static final String DFA186_acceptS =
		"\2\uffff\1\2\53\uffff\1\1\1\uffff\17\1";
	static final String DFA186_specialS =
		"\1\0\1\1\5\uffff\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
		"\14\1\15\1\16\1\17\1\20\1\21\2\uffff\1\22\4\uffff\1\23\1\uffff\1\24\1"+
		"\uffff\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\4\uffff\1\35\17\uffff}>";
	static final String[] DFA186_transitionS = {
			"\1\66\1\46\1\2\2\uffff\5\52\3\uffff\1\52\1\2\1\41\1\1\1\uffff\1\50\5"+
			"\uffff\1\2\1\72\1\2\1\uffff\1\63\3\uffff\1\65\1\uffff\1\43\1\70\1\uffff"+
			"\1\15\1\2\2\uffff\1\14\1\12\2\uffff\1\13\1\2\1\26\5\uffff\2\2\3\52\1"+
			"\62\1\uffff\1\2\1\uffff\1\74\6\uffff\1\47\1\37\1\44\5\uffff\1\52\1\1"+
			"\4\uffff\1\60\5\uffff\1\27\1\61\1\76\1\2\1\32\2\uffff\2\2\1\64\1\71\3"+
			"\52\1\2\1\uffff\1\25\1\20\1\uffff\1\23\1\52\1\16\1\2\1\22\1\52\1\21\1"+
			"\10\1\7\1\uffff\1\51\1\17\1\20\1\24\1\2\1\56\1\2\1\73\1\uffff\1\57\1"+
			"\67\5\52\2\uffff\1\75\3\uffff\1\45\1\1",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA186_eot = DFA.unpackEncodedString(DFA186_eotS);
	static final short[] DFA186_eof = DFA.unpackEncodedString(DFA186_eofS);
	static final char[] DFA186_min = DFA.unpackEncodedStringToUnsignedChars(DFA186_minS);
	static final char[] DFA186_max = DFA.unpackEncodedStringToUnsignedChars(DFA186_maxS);
	static final short[] DFA186_accept = DFA.unpackEncodedString(DFA186_acceptS);
	static final short[] DFA186_special = DFA.unpackEncodedString(DFA186_specialS);
	static final short[][] DFA186_transition;

	static {
		int numStates = DFA186_transitionS.length;
		DFA186_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA186_transition[i] = DFA.unpackEncodedString(DFA186_transitionS[i]);
		}
	}

	protected class DFA186 extends DFA {

		public DFA186(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 186;
			this.eot = DFA186_eot;
			this.eof = DFA186_eof;
			this.min = DFA186_min;
			this.max = DFA186_max;
			this.accept = DFA186_accept;
			this.special = DFA186_special;
			this.transition = DFA186_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 869:12: ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA186_0 = input.LA(1);
						 
						int index186_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA186_0==COMMENT||LA186_0==NL||LA186_0==WS) ) {s = 1;}
						else if ( (LA186_0==EOF||LA186_0==AT_SIGN||LA186_0==COLON||LA186_0==DCOLON||LA186_0==DOT||LA186_0==GREATER||LA186_0==IMPORTANT_SYM||(LA186_0 >= LBRACE && LA186_0 <= LBRACKET)||LA186_0==LESS_AND||LA186_0==PIPE||(LA186_0 >= RBRACE && LA186_0 <= RBRACKET)||LA186_0==RPAREN||LA186_0==SASS_EXTEND_ONLY_SELECTOR||LA186_0==SEMI||LA186_0==STAR) ) {s = 2;}
						else if ( (LA186_0==SASS_MIXIN) ) {s = 7;}
						else if ( (LA186_0==SASS_INCLUDE) ) {s = 8;}
						else if ( (LA186_0==HASH_SYMBOL) ) {s = 10;}
						else if ( (LA186_0==IDENT) ) {s = 11;}
						else if ( (LA186_0==HASH) ) {s = 12;}
						else if ( (LA186_0==GEN) ) {s = 13;}
						else if ( (LA186_0==SASS_EXTEND) ) {s = 14;}
						else if ( (LA186_0==SASS_VAR) ) {s = 15;}
						else if ( (LA186_0==SASS_DEBUG||LA186_0==SASS_WARN) ) {s = 16;}
						else if ( (LA186_0==SASS_IF) ) {s = 17;}
						else if ( (LA186_0==SASS_FOR) ) {s = 18;}
						else if ( (LA186_0==SASS_EACH) ) {s = 19;}
						else if ( (LA186_0==SASS_WHILE) ) {s = 20;}
						else if ( (LA186_0==SASS_CONTENT) ) {s = 21;}
						else if ( (LA186_0==IMPORT_SYM) ) {s = 22;}
						else if ( (LA186_0==PAGE_SYM) ) {s = 23;}
						else if ( (LA186_0==PLUS) ) {s = 26;}
						else if ( (LA186_0==MINUS) ) {s = 31;}
						else if ( (LA186_0==COMMA) ) {s = 33;}
						else if ( (LA186_0==FONT_FACE_SYM) ) {s = 35;}
						else if ( (LA186_0==MOZ_DOCUMENT_SYM) ) {s = 36;}
						else if ( (LA186_0==WEBKIT_KEYFRAMES_SYM) ) {s = 37;}
						else if ( (LA186_0==AT_IDENT) ) {s = 38;}
						else if ( (LA186_0==MEDIA_SYM) ) {s = 39;}
						else if ( (LA186_0==COUNTER_STYLE_SYM) ) {s = 40;}
						else if ( (LA186_0==SASS_RETURN) ) {s = 41;}
						else if ( ((LA186_0 >= BOTTOMCENTER_SYM && LA186_0 <= BOTTOMRIGHT_SYM)||LA186_0==CHARSET_SYM||(LA186_0 >= LEFTBOTTOM_SYM && LA186_0 <= LEFTTOP_SYM)||LA186_0==NAMESPACE_SYM||(LA186_0 >= RIGHTBOTTOM_SYM && LA186_0 <= RIGHTTOP_SYM)||LA186_0==SASS_ELSE||LA186_0==SASS_FUNCTION||(LA186_0 >= TOPCENTER_SYM && LA186_0 <= TOPRIGHT_SYM)) ) {s = 42;}
						else if ( (LA186_0==SOLIDUS) && (synpred29_Css3())) {s = 46;}
						else if ( (LA186_0==TILDE) ) {s = 47;}
						else if ( (LA186_0==NUMBER) && (synpred29_Css3())) {s = 48;}
						else if ( (LA186_0==PERCENTAGE) && (synpred29_Css3())) {s = 49;}
						else if ( (LA186_0==LENGTH) && (synpred29_Css3())) {s = 50;}
						else if ( (LA186_0==EMS) && (synpred29_Css3())) {s = 51;}
						else if ( (LA186_0==REM) && (synpred29_Css3())) {s = 52;}
						else if ( (LA186_0==EXS) && (synpred29_Css3())) {s = 53;}
						else if ( (LA186_0==ANGLE) && (synpred29_Css3())) {s = 54;}
						else if ( (LA186_0==TIME) && (synpred29_Css3())) {s = 55;}
						else if ( (LA186_0==FREQ) && (synpred29_Css3())) {s = 56;}
						else if ( (LA186_0==RESOLUTION) && (synpred29_Css3())) {s = 57;}
						else if ( (LA186_0==DIMENSION) && (synpred29_Css3())) {s = 58;}
						else if ( (LA186_0==STRING) && (synpred29_Css3())) {s = 59;}
						else if ( (LA186_0==LESS_JS_STRING) && (synpred29_Css3())) {s = 60;}
						else if ( (LA186_0==URI) && (synpred29_Css3())) {s = 61;}
						else if ( (LA186_0==PERCENTAGE_SYMBOL) && (synpred29_Css3())) {s = 62;}
						 
						input.seek(index186_0);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA186_1 = input.LA(1);
						 
						int index186_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred29_Css3()) ) {s = 62;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index186_1);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA186_7 = input.LA(1);
						 
						int index186_7 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {s = 62;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index186_7);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA186_8 = input.LA(1);
						 
						int index186_8 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {s = 62;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index186_8);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA186_10 = input.LA(1);
						 
						int index186_10 = input.index();
						input.rewind();
						s = -1;
						if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&synpred29_Css3())) ) {s = 62;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index186_10);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA186_11 = input.LA(1);
						 
						int index186_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred29_Css3()) ) {s = 62;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index186_11);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA186_12 = input.LA(1);
						 
						int index186_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred29_Css3()) ) {s = 62;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index186_12);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA186_13 = input.LA(1);
						 
						int index186_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred29_Css3()) ) {s = 62;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index186_13);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA186_14 = input.LA(1);
						 
						int index186_14 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {s = 62;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index186_14);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA186_15 = input.LA(1);
						 
						int index186_15 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&synpred29_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 62;}
						else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 2;}
						 
						input.seek(index186_15);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA186_16 = input.LA(1);
						 
						int index186_16 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {s = 62;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index186_16);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA186_17 = input.LA(1);
						 
						int index186_17 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {s = 62;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index186_17);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA186_18 = input.LA(1);
						 
						int index186_18 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {s = 62;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index186_18);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA186_19 = input.LA(1);
						 
						int index186_19 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {s = 62;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index186_19);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA186_20 = input.LA(1);
						 
						int index186_20 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {s = 62;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index186_20);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA186_21 = input.LA(1);
						 
						int index186_21 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {s = 62;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index186_21);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA186_22 = input.LA(1);
						 
						int index186_22 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {s = 62;}
						else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index186_22);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA186_23 = input.LA(1);
						 
						int index186_23 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {s = 62;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index186_23);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA186_26 = input.LA(1);
						 
						int index186_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred29_Css3()) ) {s = 62;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index186_26);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA186_31 = input.LA(1);
						 
						int index186_31 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred29_Css3()) ) {s = 62;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index186_31);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA186_33 = input.LA(1);
						 
						int index186_33 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred29_Css3()) ) {s = 62;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index186_33);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA186_35 = input.LA(1);
						 
						int index186_35 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {s = 62;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index186_35);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA186_36 = input.LA(1);
						 
						int index186_36 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {s = 62;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index186_36);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA186_37 = input.LA(1);
						 
						int index186_37 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {s = 62;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index186_37);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA186_38 = input.LA(1);
						 
						int index186_38 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {s = 62;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index186_38);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA186_39 = input.LA(1);
						 
						int index186_39 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {s = 62;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index186_39);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA186_40 = input.LA(1);
						 
						int index186_40 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {s = 62;}
						else if ( ((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 2;}
						 
						input.seek(index186_40);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA186_41 = input.LA(1);
						 
						int index186_41 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {s = 62;}
						else if ( ((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index186_41);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA186_42 = input.LA(1);
						 
						int index186_42 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred29_Css3())) ) {s = 62;}
						else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 2;}
						 
						input.seek(index186_42);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA186_47 = input.LA(1);
						 
						int index186_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred29_Css3()) ) {s = 62;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index186_47);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 186, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA185_eotS =
		"\5\uffff";
	static final String DFA185_eofS =
		"\5\uffff";
	static final String DFA185_minS =
		"\2\6\3\uffff";
	static final String DFA185_maxS =
		"\2\u0093\3\uffff";
	static final String DFA185_acceptS =
		"\2\uffff\1\2\1\3\1\1";
	static final String DFA185_specialS =
		"\5\uffff}>";
	static final String[] DFA185_transitionS = {
			"\2\3\3\uffff\5\3\3\uffff\1\3\1\uffff\1\2\1\1\1\uffff\1\3\6\uffff\1\3"+
			"\2\uffff\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\2\uffff"+
			"\1\3\1\uffff\1\3\7\uffff\4\3\3\uffff\1\3\6\uffff\3\3\5\uffff\1\3\1\1"+
			"\4\uffff\1\3\5\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\2\3\1\uffff"+
			"\3\3\1\uffff\5\3\1\uffff\4\3\1\uffff\1\2\1\uffff\1\3\1\uffff\7\3\2\uffff"+
			"\1\3\3\uffff\1\3\1\1",
			"\2\4\3\uffff\5\4\3\uffff\1\4\1\uffff\1\2\1\1\1\uffff\1\4\6\uffff\1\4"+
			"\2\uffff\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\1\4\3\uffff\2\4\2\uffff"+
			"\1\4\1\uffff\1\4\7\uffff\4\4\3\uffff\1\4\6\uffff\3\4\5\uffff\1\4\1\1"+
			"\4\uffff\1\4\5\uffff\3\4\1\uffff\1\4\4\uffff\5\4\2\uffff\2\4\1\uffff"+
			"\3\4\1\uffff\5\4\1\uffff\4\4\1\uffff\1\2\1\uffff\1\4\1\uffff\7\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\1",
			"",
			"",
			""
	};

	static final short[] DFA185_eot = DFA.unpackEncodedString(DFA185_eotS);
	static final short[] DFA185_eof = DFA.unpackEncodedString(DFA185_eofS);
	static final char[] DFA185_min = DFA.unpackEncodedStringToUnsignedChars(DFA185_minS);
	static final char[] DFA185_max = DFA.unpackEncodedStringToUnsignedChars(DFA185_maxS);
	static final short[] DFA185_accept = DFA.unpackEncodedString(DFA185_acceptS);
	static final short[] DFA185_special = DFA.unpackEncodedString(DFA185_specialS);
	static final short[][] DFA185_transition;

	static {
		int numStates = DFA185_transitionS.length;
		DFA185_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA185_transition[i] = DFA.unpackEncodedString(DFA185_transitionS[i]);
		}
	}

	protected class DFA185 extends DFA {

		public DFA185(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 185;
			this.eot = DFA185_eot;
			this.eof = DFA185_eof;
			this.min = DFA185_min;
			this.max = DFA185_max;
			this.accept = DFA185_accept;
			this.special = DFA185_special;
			this.transition = DFA185_transition;
		}
		@Override
		public String getDescription() {
			return "869:66: ( ws | ( ( ws )? operator ( ws )? ) |)";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA197_eotS =
		"\4\uffff";
	static final String DFA197_eofS =
		"\4\uffff";
	static final String DFA197_minS =
		"\2\25\2\uffff";
	static final String DFA197_maxS =
		"\2\u0093\2\uffff";
	static final String DFA197_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA197_specialS =
		"\4\uffff}>";
	static final String[] DFA197_transitionS = {
			"\1\3\1\1\75\uffff\1\1\30\uffff\1\2\45\uffff\1\1",
			"\1\3\1\1\75\uffff\1\1\30\uffff\1\2\45\uffff\1\1",
			"",
			""
	};

	static final short[] DFA197_eot = DFA.unpackEncodedString(DFA197_eotS);
	static final short[] DFA197_eof = DFA.unpackEncodedString(DFA197_eofS);
	static final char[] DFA197_min = DFA.unpackEncodedStringToUnsignedChars(DFA197_minS);
	static final char[] DFA197_max = DFA.unpackEncodedStringToUnsignedChars(DFA197_maxS);
	static final short[] DFA197_accept = DFA.unpackEncodedString(DFA197_acceptS);
	static final short[] DFA197_special = DFA.unpackEncodedString(DFA197_specialS);
	static final short[][] DFA197_transition;

	static {
		int numStates = DFA197_transitionS.length;
		DFA197_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA197_transition[i] = DFA.unpackEncodedString(DFA197_transitionS[i]);
		}
	}

	protected class DFA197 extends DFA {

		public DFA197(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 197;
			this.eot = DFA197_eot;
			this.eof = DFA197_eof;
			this.min = DFA197_min;
			this.max = DFA197_max;
			this.accept = DFA197_accept;
			this.special = DFA197_special;
			this.transition = DFA197_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 932:17: ( ( ws )? COMMA ( ws )? fnAttribute )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA207_eotS =
		"\37\uffff";
	static final String DFA207_eofS =
		"\37\uffff";
	static final String DFA207_minS =
		"\2\6\35\uffff";
	static final String DFA207_maxS =
		"\2\u0093\35\uffff";
	static final String DFA207_acceptS =
		"\2\uffff\1\2\34\1";
	static final String DFA207_specialS =
		"\1\1\1\0\35\uffff}>";
	static final String[] DFA207_transitionS = {
			"\1\14\1\27\3\uffff\5\27\3\uffff\1\27\1\uffff\1\2\1\1\1\uffff\1\27\6\uffff"+
			"\1\20\2\uffff\1\11\3\uffff\1\13\1\uffff\1\27\1\16\1\uffff\1\24\3\uffff"+
			"\1\26\1\31\2\uffff\1\5\1\uffff\1\27\7\uffff\3\27\1\10\3\uffff\1\23\6"+
			"\uffff\1\27\1\4\1\27\5\uffff\1\27\1\1\4\uffff\1\6\5\uffff\1\27\1\7\1"+
			"\32\1\uffff\1\4\4\uffff\1\12\1\17\3\27\1\2\1\uffff\2\27\1\uffff\3\27"+
			"\1\uffff\5\27\1\uffff\1\27\1\30\2\27\1\uffff\1\3\1\uffff\1\21\1\uffff"+
			"\1\22\1\15\5\27\2\uffff\1\25\3\uffff\1\27\1\1",
			"\1\14\1\33\3\uffff\5\33\3\uffff\1\33\1\uffff\1\2\1\1\1\uffff\1\33\6"+
			"\uffff\1\20\2\uffff\1\11\3\uffff\1\13\1\uffff\1\33\1\16\1\uffff\1\24"+
			"\3\uffff\1\26\1\35\2\uffff\1\5\1\uffff\1\33\7\uffff\3\33\1\10\3\uffff"+
			"\1\23\6\uffff\1\33\1\4\1\33\5\uffff\1\33\1\1\4\uffff\1\6\5\uffff\1\33"+
			"\1\7\1\36\1\uffff\1\4\4\uffff\1\12\1\17\3\33\1\2\1\uffff\2\33\1\uffff"+
			"\3\33\1\uffff\5\33\1\uffff\1\33\1\34\2\33\1\uffff\1\3\1\uffff\1\21\1"+
			"\uffff\1\22\1\15\5\33\2\uffff\1\25\3\uffff\1\33\1\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA207_eot = DFA.unpackEncodedString(DFA207_eotS);
	static final short[] DFA207_eof = DFA.unpackEncodedString(DFA207_eofS);
	static final char[] DFA207_min = DFA.unpackEncodedStringToUnsignedChars(DFA207_minS);
	static final char[] DFA207_max = DFA.unpackEncodedStringToUnsignedChars(DFA207_maxS);
	static final short[] DFA207_accept = DFA.unpackEncodedString(DFA207_acceptS);
	static final short[] DFA207_special = DFA.unpackEncodedString(DFA207_specialS);
	static final short[][] DFA207_transition;

	static {
		int numStates = DFA207_transitionS.length;
		DFA207_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA207_transition[i] = DFA.unpackEncodedString(DFA207_transitionS[i]);
		}
	}

	protected class DFA207 extends DFA {

		public DFA207(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 207;
			this.eot = DFA207_eot;
			this.eof = DFA207_eof;
			this.min = DFA207_min;
			this.max = DFA207_max;
			this.accept = DFA207_accept;
			this.special = DFA207_special;
			this.transition = DFA207_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 950:18: ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA207_1 = input.LA(1);
						 
						int index207_1 = input.index();
						input.rewind();
						s = -1;
						if ( (LA207_1==COMMA||LA207_1==RPAREN) ) {s = 2;}
						else if ( (LA207_1==COMMENT||LA207_1==NL||LA207_1==WS) ) {s = 1;}
						else if ( (LA207_1==MINUS||LA207_1==PLUS) && (synpred32_Css3())) {s = 4;}
						else if ( (LA207_1==IDENT) && (synpred32_Css3())) {s = 5;}
						else if ( (LA207_1==NUMBER) && (synpred32_Css3())) {s = 6;}
						else if ( (LA207_1==PERCENTAGE) && (synpred32_Css3())) {s = 7;}
						else if ( (LA207_1==LENGTH) && (synpred32_Css3())) {s = 8;}
						else if ( (LA207_1==EMS) && (synpred32_Css3())) {s = 9;}
						else if ( (LA207_1==REM) && (synpred32_Css3())) {s = 10;}
						else if ( (LA207_1==EXS) && (synpred32_Css3())) {s = 11;}
						else if ( (LA207_1==ANGLE) && (synpred32_Css3())) {s = 12;}
						else if ( (LA207_1==TIME) && (synpred32_Css3())) {s = 13;}
						else if ( (LA207_1==FREQ) && (synpred32_Css3())) {s = 14;}
						else if ( (LA207_1==RESOLUTION) && (synpred32_Css3())) {s = 15;}
						else if ( (LA207_1==DIMENSION) && (synpred32_Css3())) {s = 16;}
						else if ( (LA207_1==STRING) && (synpred32_Css3())) {s = 17;}
						else if ( (LA207_1==TILDE) && (synpred32_Css3())) {s = 18;}
						else if ( (LA207_1==LESS_JS_STRING) && (synpred32_Css3())) {s = 19;}
						else if ( (LA207_1==GEN) && (synpred32_Css3())) {s = 20;}
						else if ( (LA207_1==URI) && (synpred32_Css3())) {s = 21;}
						else if ( (LA207_1==HASH) && (synpred32_Css3())) {s = 22;}
						else if ( (LA207_1==AT_IDENT||(LA207_1 >= BOTTOMCENTER_SYM && LA207_1 <= BOTTOMRIGHT_SYM)||LA207_1==CHARSET_SYM||LA207_1==COUNTER_STYLE_SYM||LA207_1==FONT_FACE_SYM||LA207_1==IMPORT_SYM||(LA207_1 >= LEFTBOTTOM_SYM && LA207_1 <= LEFTTOP_SYM)||LA207_1==MEDIA_SYM||LA207_1==MOZ_DOCUMENT_SYM||LA207_1==NAMESPACE_SYM||LA207_1==PAGE_SYM||(LA207_1 >= RIGHTBOTTOM_SYM && LA207_1 <= RIGHTTOP_SYM)||(LA207_1 >= SASS_CONTENT && LA207_1 <= SASS_DEBUG)||(LA207_1 >= SASS_EACH && LA207_1 <= SASS_EXTEND)||(LA207_1 >= SASS_FOR && LA207_1 <= SASS_MIXIN)||LA207_1==SASS_RETURN||(LA207_1 >= SASS_WARN && LA207_1 <= SASS_WHILE)||(LA207_1 >= TOPCENTER_SYM && LA207_1 <= TOPRIGHT_SYM)||LA207_1==WEBKIT_KEYFRAMES_SYM) && (synpred32_Css3())) {s = 27;}
						else if ( (LA207_1==SASS_VAR) && (synpred32_Css3())) {s = 28;}
						else if ( (LA207_1==HASH_SYMBOL) && (synpred32_Css3())) {s = 29;}
						else if ( (LA207_1==PERCENTAGE_SYMBOL) && (synpred32_Css3())) {s = 30;}
						else if ( (LA207_1==SOLIDUS) && (synpred32_Css3())) {s = 3;}
						 
						input.seek(index207_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA207_0 = input.LA(1);
						 
						int index207_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA207_0==COMMENT||LA207_0==NL||LA207_0==WS) ) {s = 1;}
						else if ( (LA207_0==COMMA||LA207_0==RPAREN) ) {s = 2;}
						else if ( (LA207_0==SOLIDUS) && (synpred32_Css3())) {s = 3;}
						else if ( (LA207_0==MINUS||LA207_0==PLUS) && (synpred32_Css3())) {s = 4;}
						else if ( (LA207_0==IDENT) && (synpred32_Css3())) {s = 5;}
						else if ( (LA207_0==NUMBER) && (synpred32_Css3())) {s = 6;}
						else if ( (LA207_0==PERCENTAGE) && (synpred32_Css3())) {s = 7;}
						else if ( (LA207_0==LENGTH) && (synpred32_Css3())) {s = 8;}
						else if ( (LA207_0==EMS) && (synpred32_Css3())) {s = 9;}
						else if ( (LA207_0==REM) && (synpred32_Css3())) {s = 10;}
						else if ( (LA207_0==EXS) && (synpred32_Css3())) {s = 11;}
						else if ( (LA207_0==ANGLE) && (synpred32_Css3())) {s = 12;}
						else if ( (LA207_0==TIME) && (synpred32_Css3())) {s = 13;}
						else if ( (LA207_0==FREQ) && (synpred32_Css3())) {s = 14;}
						else if ( (LA207_0==RESOLUTION) && (synpred32_Css3())) {s = 15;}
						else if ( (LA207_0==DIMENSION) && (synpred32_Css3())) {s = 16;}
						else if ( (LA207_0==STRING) && (synpred32_Css3())) {s = 17;}
						else if ( (LA207_0==TILDE) && (synpred32_Css3())) {s = 18;}
						else if ( (LA207_0==LESS_JS_STRING) && (synpred32_Css3())) {s = 19;}
						else if ( (LA207_0==GEN) && (synpred32_Css3())) {s = 20;}
						else if ( (LA207_0==URI) && (synpred32_Css3())) {s = 21;}
						else if ( (LA207_0==HASH) && (synpred32_Css3())) {s = 22;}
						else if ( (LA207_0==AT_IDENT||(LA207_0 >= BOTTOMCENTER_SYM && LA207_0 <= BOTTOMRIGHT_SYM)||LA207_0==CHARSET_SYM||LA207_0==COUNTER_STYLE_SYM||LA207_0==FONT_FACE_SYM||LA207_0==IMPORT_SYM||(LA207_0 >= LEFTBOTTOM_SYM && LA207_0 <= LEFTTOP_SYM)||LA207_0==MEDIA_SYM||LA207_0==MOZ_DOCUMENT_SYM||LA207_0==NAMESPACE_SYM||LA207_0==PAGE_SYM||(LA207_0 >= RIGHTBOTTOM_SYM && LA207_0 <= RIGHTTOP_SYM)||(LA207_0 >= SASS_CONTENT && LA207_0 <= SASS_DEBUG)||(LA207_0 >= SASS_EACH && LA207_0 <= SASS_EXTEND)||(LA207_0 >= SASS_FOR && LA207_0 <= SASS_MIXIN)||LA207_0==SASS_RETURN||(LA207_0 >= SASS_WARN && LA207_0 <= SASS_WHILE)||(LA207_0 >= TOPCENTER_SYM && LA207_0 <= TOPRIGHT_SYM)||LA207_0==WEBKIT_KEYFRAMES_SYM) && (synpred32_Css3())) {s = 23;}
						else if ( (LA207_0==SASS_VAR) && (synpred32_Css3())) {s = 24;}
						else if ( (LA207_0==HASH_SYMBOL) && (synpred32_Css3())) {s = 25;}
						else if ( (LA207_0==PERCENTAGE_SYMBOL) && (synpred32_Css3())) {s = 26;}
						 
						input.seek(index207_0);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 207, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA206_eotS =
		"\5\uffff";
	static final String DFA206_eofS =
		"\5\uffff";
	static final String DFA206_minS =
		"\2\6\3\uffff";
	static final String DFA206_maxS =
		"\2\u0093\3\uffff";
	static final String DFA206_acceptS =
		"\2\uffff\1\2\1\3\1\1";
	static final String DFA206_specialS =
		"\5\uffff}>";
	static final String[] DFA206_transitionS = {
			"\2\3\3\uffff\5\3\3\uffff\1\3\2\uffff\1\1\1\uffff\1\3\6\uffff\1\3\2\uffff"+
			"\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\2\uffff\1\3\1\uffff"+
			"\1\3\7\uffff\4\3\3\uffff\1\3\6\uffff\3\3\5\uffff\1\3\1\1\4\uffff\1\3"+
			"\5\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\2\3\1\uffff\3\3\1\uffff"+
			"\5\3\1\uffff\4\3\1\uffff\1\2\1\uffff\1\3\1\uffff\7\3\2\uffff\1\3\3\uffff"+
			"\1\3\1\1",
			"\2\4\3\uffff\5\4\3\uffff\1\4\2\uffff\1\1\1\uffff\1\4\6\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\1\4\3\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\1\4\7\uffff\4\4\3\uffff\1\4\6\uffff\3\4\5\uffff\1\4\1\1\4\uffff\1\4"+
			"\5\uffff\3\4\1\uffff\1\4\4\uffff\5\4\2\uffff\2\4\1\uffff\3\4\1\uffff"+
			"\5\4\1\uffff\4\4\1\uffff\1\2\1\uffff\1\4\1\uffff\7\4\2\uffff\1\4\3\uffff"+
			"\1\4\1\1",
			"",
			"",
			""
	};

	static final short[] DFA206_eot = DFA.unpackEncodedString(DFA206_eotS);
	static final short[] DFA206_eof = DFA.unpackEncodedString(DFA206_eofS);
	static final char[] DFA206_min = DFA.unpackEncodedStringToUnsignedChars(DFA206_minS);
	static final char[] DFA206_max = DFA.unpackEncodedStringToUnsignedChars(DFA206_maxS);
	static final short[] DFA206_accept = DFA.unpackEncodedString(DFA206_acceptS);
	static final short[] DFA206_special = DFA.unpackEncodedString(DFA206_specialS);
	static final short[][] DFA206_transition;

	static {
		int numStates = DFA206_transitionS.length;
		DFA206_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA206_transition[i] = DFA.unpackEncodedString(DFA206_transitionS[i]);
		}
	}

	protected class DFA206 extends DFA {

		public DFA206(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 206;
			this.eot = DFA206_eot;
			this.eof = DFA206_eof;
			this.min = DFA206_min;
			this.max = DFA206_max;
			this.accept = DFA206_accept;
			this.special = DFA206_special;
			this.transition = DFA206_transition;
		}
		@Override
		public String getDescription() {
			return "950:71: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |)";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA215_eotS =
		"\4\uffff";
	static final String DFA215_eofS =
		"\2\3\2\uffff";
	static final String DFA215_minS =
		"\2\7\2\uffff";
	static final String DFA215_maxS =
		"\2\u0093\2\uffff";
	static final String DFA215_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA215_specialS =
		"\4\uffff}>";
	static final String[] DFA215_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\6\uffff"+
			"\4\3\2\uffff\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2"+
			"\3\2\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\2\11\3\1\uffff\5\3\1\uffff\1"+
			"\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\6\uffff"+
			"\4\3\2\uffff\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2"+
			"\3\2\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\2\11\3\1\uffff\5\3\1\uffff\1"+
			"\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA215_eot = DFA.unpackEncodedString(DFA215_eotS);
	static final short[] DFA215_eof = DFA.unpackEncodedString(DFA215_eofS);
	static final char[] DFA215_min = DFA.unpackEncodedStringToUnsignedChars(DFA215_minS);
	static final char[] DFA215_max = DFA.unpackEncodedStringToUnsignedChars(DFA215_maxS);
	static final short[] DFA215_accept = DFA.unpackEncodedString(DFA215_acceptS);
	static final short[] DFA215_special = DFA.unpackEncodedString(DFA215_specialS);
	static final short[][] DFA215_transition;

	static {
		int numStates = DFA215_transitionS.length;
		DFA215_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA215_transition[i] = DFA.unpackEncodedString(DFA215_transitionS[i]);
		}
	}

	protected class DFA215 extends DFA {

		public DFA215(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 215;
			this.eot = DFA215_eot;
			this.eof = DFA215_eof;
			this.min = DFA215_min;
			this.max = DFA215_max;
			this.accept = DFA215_accept;
			this.special = DFA215_special;
			this.transition = DFA215_transition;
		}
		@Override
		public String getDescription() {
			return "969:72: ( ( ws )? SASS_DEFAULT )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA224_eotS =
		"\105\uffff";
	static final String DFA224_eofS =
		"\1\2\104\uffff";
	static final String DFA224_minS =
		"\1\5\1\0\5\uffff\2\0\1\uffff\17\0\1\uffff\1\0\4\uffff\1\0\3\uffff\10\0"+
		"\1\uffff\1\0\6\uffff\1\0\21\uffff";
	static final String DFA224_maxS =
		"\1\u0093\1\0\5\uffff\2\0\1\uffff\17\0\1\uffff\1\0\4\uffff\1\0\3\uffff"+
		"\10\0\1\uffff\1\0\6\uffff\1\0\21\uffff";
	static final String DFA224_acceptS =
		"\2\uffff\1\3\56\uffff\1\1\1\2\1\uffff\21\2";
	static final String DFA224_specialS =
		"\1\0\1\1\5\uffff\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
		"\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff\1\23\4\uffff\1\24\3\uffff\1"+
		"\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\uffff\1\35\6\uffff\1\36\21\uffff}>";
	static final String[] DFA224_transitionS = {
			"\1\61\1\72\1\46\1\2\2\uffff\5\54\3\uffff\1\54\2\2\1\1\1\uffff\1\50\1"+
			"\2\2\61\2\uffff\1\2\1\76\1\2\1\uffff\1\67\3\uffff\1\71\1\uffff\1\43\1"+
			"\74\1\uffff\1\15\1\30\1\61\1\uffff\1\14\1\12\2\uffff\1\13\1\103\1\26"+
			"\5\uffff\2\2\3\54\1\66\1\61\1\2\1\uffff\1\100\1\61\1\2\2\uffff\1\104"+
			"\1\uffff\1\47\1\37\1\44\5\uffff\1\54\1\1\3\uffff\1\62\1\64\3\uffff\1"+
			"\61\1\uffff\1\27\1\65\1\102\1\2\1\32\2\uffff\2\2\1\70\1\75\3\54\1\2\1"+
			"\uffff\1\25\1\20\1\2\1\23\1\54\1\16\1\2\1\22\1\52\1\21\1\10\1\7\1\uffff"+
			"\1\51\1\17\1\20\1\24\1\2\1\uffff\1\2\1\77\1\uffff\1\63\1\73\5\54\2\uffff"+
			"\1\101\3\uffff\1\45\1\1",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA224_eot = DFA.unpackEncodedString(DFA224_eotS);
	static final short[] DFA224_eof = DFA.unpackEncodedString(DFA224_eofS);
	static final char[] DFA224_min = DFA.unpackEncodedStringToUnsignedChars(DFA224_minS);
	static final char[] DFA224_max = DFA.unpackEncodedStringToUnsignedChars(DFA224_maxS);
	static final short[] DFA224_accept = DFA.unpackEncodedString(DFA224_acceptS);
	static final short[] DFA224_special = DFA.unpackEncodedString(DFA224_specialS);
	static final short[][] DFA224_transition;

	static {
		int numStates = DFA224_transitionS.length;
		DFA224_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA224_transition[i] = DFA.unpackEncodedString(DFA224_transitionS[i]);
		}
	}

	protected class DFA224 extends DFA {

		public DFA224(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 224;
			this.eot = DFA224_eot;
			this.eof = DFA224_eof;
			this.min = DFA224_min;
			this.max = DFA224_max;
			this.accept = DFA224_accept;
			this.special = DFA224_special;
			this.transition = DFA224_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1001:5: ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA224_0 = input.LA(1);
						 
						int index224_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA224_0==COMMENT||LA224_0==NL||LA224_0==WS) ) {s = 1;}
						else if ( (LA224_0==EOF||LA224_0==AT_SIGN||(LA224_0 >= COLON && LA224_0 <= COMMA)||LA224_0==CP_DOTS||LA224_0==DCOLON||LA224_0==DOT||(LA224_0 >= LBRACE && LA224_0 <= LBRACKET)||LA224_0==LESS_AND||LA224_0==LESS_REST||LA224_0==PIPE||(LA224_0 >= RBRACE && LA224_0 <= RBRACKET)||LA224_0==RPAREN||LA224_0==SASS_DEFAULT||LA224_0==SASS_EXTEND_ONLY_SELECTOR||LA224_0==SEMI||LA224_0==STAR) ) {s = 2;}
						else if ( (LA224_0==SASS_MIXIN) ) {s = 7;}
						else if ( (LA224_0==SASS_INCLUDE) ) {s = 8;}
						else if ( (LA224_0==HASH_SYMBOL) ) {s = 10;}
						else if ( (LA224_0==IDENT) ) {s = 11;}
						else if ( (LA224_0==HASH) ) {s = 12;}
						else if ( (LA224_0==GEN) ) {s = 13;}
						else if ( (LA224_0==SASS_EXTEND) ) {s = 14;}
						else if ( (LA224_0==SASS_VAR) ) {s = 15;}
						else if ( (LA224_0==SASS_DEBUG||LA224_0==SASS_WARN) ) {s = 16;}
						else if ( (LA224_0==SASS_IF) ) {s = 17;}
						else if ( (LA224_0==SASS_FOR) ) {s = 18;}
						else if ( (LA224_0==SASS_EACH) ) {s = 19;}
						else if ( (LA224_0==SASS_WHILE) ) {s = 20;}
						else if ( (LA224_0==SASS_CONTENT) ) {s = 21;}
						else if ( (LA224_0==IMPORT_SYM) ) {s = 22;}
						else if ( (LA224_0==PAGE_SYM) ) {s = 23;}
						else if ( (LA224_0==GREATER) ) {s = 24;}
						else if ( (LA224_0==PLUS) ) {s = 26;}
						else if ( (LA224_0==MINUS) ) {s = 31;}
						else if ( (LA224_0==FONT_FACE_SYM) ) {s = 35;}
						else if ( (LA224_0==MOZ_DOCUMENT_SYM) ) {s = 36;}
						else if ( (LA224_0==WEBKIT_KEYFRAMES_SYM) ) {s = 37;}
						else if ( (LA224_0==AT_IDENT) ) {s = 38;}
						else if ( (LA224_0==MEDIA_SYM) ) {s = 39;}
						else if ( (LA224_0==COUNTER_STYLE_SYM) ) {s = 40;}
						else if ( (LA224_0==SASS_RETURN) ) {s = 41;}
						else if ( (LA224_0==SASS_FUNCTION) ) {s = 42;}
						else if ( ((LA224_0 >= BOTTOMCENTER_SYM && LA224_0 <= BOTTOMRIGHT_SYM)||LA224_0==CHARSET_SYM||(LA224_0 >= LEFTBOTTOM_SYM && LA224_0 <= LEFTTOP_SYM)||LA224_0==NAMESPACE_SYM||(LA224_0 >= RIGHTBOTTOM_SYM && LA224_0 <= RIGHTTOP_SYM)||LA224_0==SASS_ELSE||(LA224_0 >= TOPCENTER_SYM && LA224_0 <= TOPRIGHT_SYM)) ) {s = 44;}
						else if ( (LA224_0==AND||(LA224_0 >= CP_EQ && LA224_0 <= CP_NOT_EQ)||LA224_0==GREATER_OR_EQ||LA224_0==LESS||LA224_0==LESS_OR_EQ||LA224_0==OR) && (synpred34_Css3())) {s = 49;}
						else if ( (LA224_0==NOT) && (synpred35_Css3())) {s = 50;}
						else if ( (LA224_0==TILDE) ) {s = 51;}
						else if ( (LA224_0==NUMBER) && (synpred35_Css3())) {s = 52;}
						else if ( (LA224_0==PERCENTAGE) && (synpred35_Css3())) {s = 53;}
						else if ( (LA224_0==LENGTH) && (synpred35_Css3())) {s = 54;}
						else if ( (LA224_0==EMS) && (synpred35_Css3())) {s = 55;}
						else if ( (LA224_0==REM) && (synpred35_Css3())) {s = 56;}
						else if ( (LA224_0==EXS) && (synpred35_Css3())) {s = 57;}
						else if ( (LA224_0==ANGLE) && (synpred35_Css3())) {s = 58;}
						else if ( (LA224_0==TIME) && (synpred35_Css3())) {s = 59;}
						else if ( (LA224_0==FREQ) && (synpred35_Css3())) {s = 60;}
						else if ( (LA224_0==RESOLUTION) && (synpred35_Css3())) {s = 61;}
						else if ( (LA224_0==DIMENSION) && (synpred35_Css3())) {s = 62;}
						else if ( (LA224_0==STRING) && (synpred35_Css3())) {s = 63;}
						else if ( (LA224_0==LESS_JS_STRING) && (synpred35_Css3())) {s = 64;}
						else if ( (LA224_0==URI) && (synpred35_Css3())) {s = 65;}
						else if ( (LA224_0==PERCENTAGE_SYMBOL) && (synpred35_Css3())) {s = 66;}
						else if ( (LA224_0==IMPORTANT_SYM) && (synpred35_Css3())) {s = 67;}
						else if ( (LA224_0==LPAREN) && (synpred35_Css3())) {s = 68;}
						 
						input.seek(index224_0);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA224_1 = input.LA(1);
						 
						int index224_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred34_Css3()) ) {s = 49;}
						else if ( (synpred35_Css3()) ) {s = 68;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index224_1);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA224_7 = input.LA(1);
						 
						int index224_7 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}
						 
						input.seek(index224_7);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA224_8 = input.LA(1);
						 
						int index224_8 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}
						 
						input.seek(index224_8);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA224_10 = input.LA(1);
						 
						int index224_10 = input.index();
						input.rewind();
						s = -1;
						if ( ((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 68;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index224_10);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA224_11 = input.LA(1);
						 
						int index224_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred35_Css3()) ) {s = 68;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index224_11);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA224_12 = input.LA(1);
						 
						int index224_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred35_Css3()) ) {s = 68;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index224_12);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA224_13 = input.LA(1);
						 
						int index224_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred35_Css3()) ) {s = 68;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index224_13);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA224_14 = input.LA(1);
						 
						int index224_14 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}
						 
						input.seek(index224_14);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA224_15 = input.LA(1);
						 
						int index224_15 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 68;}
						else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 2;}
						 
						input.seek(index224_15);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA224_16 = input.LA(1);
						 
						int index224_16 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}
						 
						input.seek(index224_16);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA224_17 = input.LA(1);
						 
						int index224_17 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}
						 
						input.seek(index224_17);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA224_18 = input.LA(1);
						 
						int index224_18 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}
						 
						input.seek(index224_18);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA224_19 = input.LA(1);
						 
						int index224_19 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}
						 
						input.seek(index224_19);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA224_20 = input.LA(1);
						 
						int index224_20 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}
						 
						input.seek(index224_20);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA224_21 = input.LA(1);
						 
						int index224_21 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}
						 
						input.seek(index224_21);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA224_22 = input.LA(1);
						 
						int index224_22 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}
						else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}
						 
						input.seek(index224_22);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA224_23 = input.LA(1);
						 
						int index224_23 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index224_23);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA224_24 = input.LA(1);
						 
						int index224_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred34_Css3()) ) {s = 49;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index224_24);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA224_26 = input.LA(1);
						 
						int index224_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred35_Css3()) ) {s = 68;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index224_26);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA224_31 = input.LA(1);
						 
						int index224_31 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred35_Css3()) ) {s = 68;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index224_31);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA224_35 = input.LA(1);
						 
						int index224_35 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index224_35);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA224_36 = input.LA(1);
						 
						int index224_36 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index224_36);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA224_37 = input.LA(1);
						 
						int index224_37 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index224_37);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA224_38 = input.LA(1);
						 
						int index224_38 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index224_38);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA224_39 = input.LA(1);
						 
						int index224_39 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index224_39);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA224_40 = input.LA(1);
						 
						int index224_40 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index224_40);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA224_41 = input.LA(1);
						 
						int index224_41 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}
						else if ( ((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}
						 
						input.seek(index224_41);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA224_42 = input.LA(1);
						 
						int index224_42 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}
						else if ( ((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index224_42);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA224_44 = input.LA(1);
						 
						int index224_44 = input.index();
						input.rewind();
						s = -1;
						if ( (((synpred35_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 68;}
						else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 2;}
						 
						input.seek(index224_44);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA224_51 = input.LA(1);
						 
						int index224_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred35_Css3()) ) {s = 68;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index224_51);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 224, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA234_eotS =
		"\106\uffff";
	static final String DFA234_eofS =
		"\1\2\105\uffff";
	static final String DFA234_minS =
		"\1\5\1\0\4\uffff\1\0\35\uffff\2\0\40\uffff";
	static final String DFA234_maxS =
		"\1\u0093\1\0\4\uffff\1\0\35\uffff\2\0\40\uffff";
	static final String DFA234_acceptS =
		"\2\uffff\1\2\102\uffff\1\1";
	static final String DFA234_specialS =
		"\1\0\1\1\4\uffff\1\2\35\uffff\1\3\1\4\40\uffff}>";
	static final String[] DFA234_transitionS = {
			"\4\2\2\uffff\5\2\3\uffff\3\2\1\1\1\uffff\4\2\2\uffff\3\2\1\uffff\1\2"+
			"\3\uffff\1\2\1\uffff\2\2\1\uffff\3\2\1\uffff\2\2\2\uffff\3\2\5\uffff"+
			"\10\2\1\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\6\1\2\5\uffff\1\2\1\1\3\uffff"+
			"\2\2\3\uffff\1\2\1\uffff\4\2\1\45\2\uffff\10\2\1\uffff\14\2\1\uffff\5"+
			"\2\1\105\1\44\1\2\1\uffff\7\2\2\uffff\1\2\3\uffff\1\2\1\1",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA234_eot = DFA.unpackEncodedString(DFA234_eotS);
	static final short[] DFA234_eof = DFA.unpackEncodedString(DFA234_eofS);
	static final char[] DFA234_min = DFA.unpackEncodedStringToUnsignedChars(DFA234_minS);
	static final char[] DFA234_max = DFA.unpackEncodedStringToUnsignedChars(DFA234_maxS);
	static final short[] DFA234_accept = DFA.unpackEncodedString(DFA234_acceptS);
	static final short[] DFA234_special = DFA.unpackEncodedString(DFA234_specialS);
	static final short[][] DFA234_transition;

	static {
		int numStates = DFA234_transitionS.length;
		DFA234_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA234_transition[i] = DFA.unpackEncodedString(DFA234_transitionS[i]);
		}
	}

	protected class DFA234 extends DFA {

		public DFA234(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 234;
			this.eot = DFA234_eot;
			this.eof = DFA234_eof;
			this.min = DFA234_min;
			this.max = DFA234_max;
			this.accept = DFA234_accept;
			this.special = DFA234_special;
			this.transition = DFA234_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1042:10: ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA234_0 = input.LA(1);
						 
						int index234_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA234_0==COMMENT||LA234_0==NL||LA234_0==WS) ) {s = 1;}
						else if ( (LA234_0==EOF||(LA234_0 >= AND && LA234_0 <= AT_SIGN)||(LA234_0 >= BOTTOMCENTER_SYM && LA234_0 <= BOTTOMRIGHT_SYM)||(LA234_0 >= CHARSET_SYM && LA234_0 <= COMMA)||(LA234_0 >= COUNTER_STYLE_SYM && LA234_0 <= CP_NOT_EQ)||(LA234_0 >= DCOLON && LA234_0 <= DOT)||LA234_0==EMS||LA234_0==EXS||(LA234_0 >= FONT_FACE_SYM && LA234_0 <= FREQ)||(LA234_0 >= GEN && LA234_0 <= GREATER_OR_EQ)||(LA234_0 >= HASH && LA234_0 <= HASH_SYMBOL)||(LA234_0 >= IDENT && LA234_0 <= IMPORT_SYM)||(LA234_0 >= LBRACE && LA234_0 <= LESS_AND)||(LA234_0 >= LESS_JS_STRING && LA234_0 <= LESS_REST)||LA234_0==LPAREN||LA234_0==MEDIA_SYM||LA234_0==MOZ_DOCUMENT_SYM||LA234_0==NAMESPACE_SYM||(LA234_0 >= NOT && LA234_0 <= NUMBER)||LA234_0==OR||(LA234_0 >= PAGE_SYM && LA234_0 <= PIPE)||(LA234_0 >= RBRACE && LA234_0 <= RPAREN)||(LA234_0 >= SASS_CONTENT && LA234_0 <= SASS_MIXIN)||(LA234_0 >= SASS_RETURN && LA234_0 <= SEMI)||LA234_0==STRING||(LA234_0 >= TILDE && LA234_0 <= TOPRIGHT_SYM)||LA234_0==URI||LA234_0==WEBKIT_KEYFRAMES_SYM) ) {s = 2;}
						else if ( (LA234_0==MINUS) ) {s = 6;}
						else if ( (LA234_0==STAR) ) {s = 36;}
						else if ( (LA234_0==PLUS) ) {s = 37;}
						else if ( (LA234_0==SOLIDUS) && (synpred37_Css3())) {s = 69;}
						 
						input.seek(index234_0);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA234_1 = input.LA(1);
						 
						int index234_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred37_Css3()) ) {s = 69;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index234_1);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA234_6 = input.LA(1);
						 
						int index234_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred37_Css3()) ) {s = 69;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index234_6);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA234_36 = input.LA(1);
						 
						int index234_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred37_Css3()) ) {s = 69;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index234_36);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA234_37 = input.LA(1);
						 
						int index234_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred37_Css3()) ) {s = 69;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index234_37);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 234, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA239_eotS =
		"\6\uffff";
	static final String DFA239_eofS =
		"\6\uffff";
	static final String DFA239_minS =
		"\2\6\3\uffff\1\6";
	static final String DFA239_maxS =
		"\1\u0092\1\u0093\3\uffff\1\u0093";
	static final String DFA239_acceptS =
		"\2\uffff\1\1\1\2\1\3\1\uffff";
	static final String DFA239_specialS =
		"\6\uffff}>";
	static final String[] DFA239_transitionS = {
			"\2\2\3\uffff\5\2\3\uffff\1\2\4\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff"+
			"\1\2\1\uffff\2\2\1\uffff\1\2\3\uffff\2\2\2\uffff\1\2\1\3\1\2\7\uffff"+
			"\4\2\3\uffff\1\2\4\uffff\1\4\1\uffff\1\2\1\1\1\2\5\uffff\1\2\5\uffff"+
			"\1\2\5\uffff\3\2\1\uffff\1\1\4\uffff\5\2\2\uffff\2\2\1\uffff\3\2\1\uffff"+
			"\5\2\1\uffff\4\2\3\uffff\1\2\1\uffff\7\2\2\uffff\1\2\3\uffff\1\2",
			"\2\2\3\uffff\5\2\3\uffff\1\2\2\uffff\1\5\1\uffff\1\2\6\uffff\1\2\2\uffff"+
			"\1\2\3\uffff\1\2\1\uffff\2\2\1\uffff\1\2\3\uffff\2\2\2\uffff\1\2\1\uffff"+
			"\1\2\7\uffff\4\2\3\uffff\1\2\4\uffff\1\4\1\uffff\1\2\1\uffff\1\2\5\uffff"+
			"\1\2\1\5\4\uffff\1\2\5\uffff\3\2\6\uffff\5\2\2\uffff\2\2\1\uffff\3\2"+
			"\1\uffff\5\2\1\uffff\4\2\3\uffff\1\2\1\uffff\7\2\2\uffff\1\2\3\uffff"+
			"\1\2\1\5",
			"",
			"",
			"",
			"\2\2\3\uffff\5\2\3\uffff\1\2\2\uffff\1\5\1\uffff\1\2\6\uffff\1\2\2\uffff"+
			"\1\2\3\uffff\1\2\1\uffff\2\2\1\uffff\1\2\3\uffff\2\2\2\uffff\1\2\1\uffff"+
			"\1\2\7\uffff\4\2\3\uffff\1\2\4\uffff\1\4\1\uffff\1\2\1\uffff\1\2\5\uffff"+
			"\1\2\1\5\4\uffff\1\2\5\uffff\3\2\6\uffff\5\2\2\uffff\2\2\1\uffff\3\2"+
			"\1\uffff\5\2\1\uffff\4\2\3\uffff\1\2\1\uffff\7\2\2\uffff\1\2\3\uffff"+
			"\1\2\1\5"
	};

	static final short[] DFA239_eot = DFA.unpackEncodedString(DFA239_eotS);
	static final short[] DFA239_eof = DFA.unpackEncodedString(DFA239_eofS);
	static final char[] DFA239_min = DFA.unpackEncodedStringToUnsignedChars(DFA239_minS);
	static final char[] DFA239_max = DFA.unpackEncodedStringToUnsignedChars(DFA239_maxS);
	static final short[] DFA239_accept = DFA.unpackEncodedString(DFA239_acceptS);
	static final short[] DFA239_special = DFA.unpackEncodedString(DFA239_specialS);
	static final short[][] DFA239_transition;

	static {
		int numStates = DFA239_transitionS.length;
		DFA239_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA239_transition[i] = DFA.unpackEncodedString(DFA239_transitionS[i]);
		}
	}

	protected class DFA239 extends DFA {

		public DFA239(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 239;
			this.eot = DFA239_eot;
			this.eof = DFA239_eof;
			this.min = DFA239_min;
			this.max = DFA239_max;
			this.accept = DFA239_accept;
			this.special = DFA239_special;
			this.transition = DFA239_transition;
		}
		@Override
		public String getDescription() {
			return "1047:1: cp_math_expression_atom : ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA244_eotS =
		"\4\uffff";
	static final String DFA244_eofS =
		"\4\uffff";
	static final String DFA244_minS =
		"\2\26\2\uffff";
	static final String DFA244_maxS =
		"\2\u0093\2\uffff";
	static final String DFA244_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA244_specialS =
		"\4\uffff}>";
	static final String[] DFA244_transitionS = {
			"\1\1\44\uffff\1\3\13\uffff\1\2\14\uffff\1\1\76\uffff\1\1",
			"\1\1\44\uffff\1\3\13\uffff\1\2\14\uffff\1\1\76\uffff\1\1",
			"",
			""
	};

	static final short[] DFA244_eot = DFA.unpackEncodedString(DFA244_eotS);
	static final short[] DFA244_eof = DFA.unpackEncodedString(DFA244_eofS);
	static final char[] DFA244_min = DFA.unpackEncodedStringToUnsignedChars(DFA244_minS);
	static final char[] DFA244_max = DFA.unpackEncodedStringToUnsignedChars(DFA244_maxS);
	static final short[] DFA244_accept = DFA.unpackEncodedString(DFA244_acceptS);
	static final short[] DFA244_special = DFA.unpackEncodedString(DFA244_specialS);
	static final short[][] DFA244_transition;

	static {
		int numStates = DFA244_transitionS.length;
		DFA244_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA244_transition[i] = DFA.unpackEncodedString(DFA244_transitionS[i]);
		}
	}

	protected class DFA244 extends DFA {

		public DFA244(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 244;
			this.eot = DFA244_eot;
			this.eof = DFA244_eof;
			this.min = DFA244_min;
			this.max = DFA244_max;
			this.accept = DFA244_accept;
			this.special = DFA244_special;
			this.transition = DFA244_transition;
		}
		@Override
		public String getDescription() {
			return "1063:81: ( ( ws )? less_mixin_guarded )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA248_eotS =
		"\4\uffff";
	static final String DFA248_eofS =
		"\4\uffff";
	static final String DFA248_minS =
		"\2\26\2\uffff";
	static final String DFA248_maxS =
		"\2\u0093\2\uffff";
	static final String DFA248_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA248_specialS =
		"\4\uffff}>";
	static final String[] DFA248_transitionS = {
			"\1\1\44\uffff\1\3\15\uffff\1\2\12\uffff\1\1\76\uffff\1\1",
			"\1\1\44\uffff\1\3\15\uffff\1\2\12\uffff\1\1\76\uffff\1\1",
			"",
			""
	};

	static final short[] DFA248_eot = DFA.unpackEncodedString(DFA248_eotS);
	static final short[] DFA248_eof = DFA.unpackEncodedString(DFA248_eofS);
	static final char[] DFA248_min = DFA.unpackEncodedStringToUnsignedChars(DFA248_minS);
	static final char[] DFA248_max = DFA.unpackEncodedStringToUnsignedChars(DFA248_maxS);
	static final short[] DFA248_accept = DFA.unpackEncodedString(DFA248_acceptS);
	static final short[] DFA248_special = DFA.unpackEncodedString(DFA248_specialS);
	static final short[][] DFA248_transition;

	static {
		int numStates = DFA248_transitionS.length;
		DFA248_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA248_transition[i] = DFA.unpackEncodedString(DFA248_transitionS[i]);
		}
	}

	protected class DFA248 extends DFA {

		public DFA248(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 248;
			this.eot = DFA248_eot;
			this.eof = DFA248_eof;
			this.min = DFA248_min;
			this.max = DFA248_max;
			this.accept = DFA248_accept;
			this.special = DFA248_special;
			this.transition = DFA248_transition;
		}
		@Override
		public String getDescription() {
			return "1065:55: ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA254_eotS =
		"\4\uffff";
	static final String DFA254_eofS =
		"\2\3\2\uffff";
	static final String DFA254_minS =
		"\2\7\2\uffff";
	static final String DFA254_maxS =
		"\2\u0093\2\uffff";
	static final String DFA254_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA254_specialS =
		"\4\uffff}>";
	static final String[] DFA254_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\3\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\1\2\1\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2\3"+
			"\2\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\11\3\1\uffff\5\3\1\uffff"+
			"\1\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\3\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\1\2\1\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2\3"+
			"\2\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\11\3\1\uffff\5\3\1\uffff"+
			"\1\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA254_eot = DFA.unpackEncodedString(DFA254_eotS);
	static final short[] DFA254_eof = DFA.unpackEncodedString(DFA254_eofS);
	static final char[] DFA254_min = DFA.unpackEncodedStringToUnsignedChars(DFA254_minS);
	static final char[] DFA254_max = DFA.unpackEncodedStringToUnsignedChars(DFA254_maxS);
	static final short[] DFA254_accept = DFA.unpackEncodedString(DFA254_acceptS);
	static final short[] DFA254_special = DFA.unpackEncodedString(DFA254_specialS);
	static final short[][] DFA254_transition;

	static {
		int numStates = DFA254_transitionS.length;
		DFA254_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA254_transition[i] = DFA.unpackEncodedString(DFA254_transitionS[i]);
		}
	}

	protected class DFA254 extends DFA {

		public DFA254(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 254;
			this.eot = DFA254_eot;
			this.eof = DFA254_eof;
			this.min = DFA254_min;
			this.max = DFA254_max;
			this.accept = DFA254_accept;
			this.special = DFA254_special;
			this.transition = DFA254_transition;
		}
		@Override
		public String getDescription() {
			return "1075:45: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA258_eotS =
		"\4\uffff";
	static final String DFA258_eofS =
		"\2\3\2\uffff";
	static final String DFA258_minS =
		"\2\7\2\uffff";
	static final String DFA258_maxS =
		"\2\u0093\2\uffff";
	static final String DFA258_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA258_specialS =
		"\4\uffff}>";
	static final String[] DFA258_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\3\3\5\uffff\5\3\2\uffff"+
			"\1\3\6\uffff\1\2\1\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2\3"+
			"\2\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\11\3\1\uffff\5\3\1\uffff"+
			"\1\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\3\3\5\uffff\5\3\2\uffff"+
			"\1\3\6\uffff\1\2\1\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2\3"+
			"\2\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\11\3\1\uffff\5\3\1\uffff"+
			"\1\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA258_eot = DFA.unpackEncodedString(DFA258_eotS);
	static final short[] DFA258_eof = DFA.unpackEncodedString(DFA258_eofS);
	static final char[] DFA258_min = DFA.unpackEncodedStringToUnsignedChars(DFA258_minS);
	static final char[] DFA258_max = DFA.unpackEncodedStringToUnsignedChars(DFA258_maxS);
	static final short[] DFA258_accept = DFA.unpackEncodedString(DFA258_acceptS);
	static final short[] DFA258_special = DFA.unpackEncodedString(DFA258_specialS);
	static final short[][] DFA258_transition;

	static {
		int numStates = DFA258_transitionS.length;
		DFA258_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA258_transition[i] = DFA.unpackEncodedString(DFA258_transitionS[i]);
		}
	}

	protected class DFA258 extends DFA {

		public DFA258(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 258;
			this.eot = DFA258_eot;
			this.eof = DFA258_eof;
			this.min = DFA258_min;
			this.max = DFA258_max;
			this.accept = DFA258_accept;
			this.special = DFA258_special;
			this.transition = DFA258_transition;
		}
		@Override
		public String getDescription() {
			return "1077:57: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA260_eotS =
		"\4\uffff";
	static final String DFA260_eofS =
		"\2\3\2\uffff";
	static final String DFA260_minS =
		"\2\7\2\uffff";
	static final String DFA260_maxS =
		"\2\u0093\2\uffff";
	static final String DFA260_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA260_specialS =
		"\4\uffff}>";
	static final String[] DFA260_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\3\3\5\uffff\1\2\4\3\2\uffff"+
			"\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2\3\2\uffff\2"+
			"\3\2\uffff\3\3\2\uffff\2\3\1\uffff\11\3\1\uffff\5\3\1\uffff\1\3\2\uffff"+
			"\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\3\3\5\uffff\1\2\4\3\2\uffff"+
			"\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2\3\2\uffff\2"+
			"\3\2\uffff\3\3\2\uffff\2\3\1\uffff\11\3\1\uffff\5\3\1\uffff\1\3\2\uffff"+
			"\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA260_eot = DFA.unpackEncodedString(DFA260_eotS);
	static final short[] DFA260_eof = DFA.unpackEncodedString(DFA260_eofS);
	static final char[] DFA260_min = DFA.unpackEncodedStringToUnsignedChars(DFA260_minS);
	static final char[] DFA260_max = DFA.unpackEncodedStringToUnsignedChars(DFA260_maxS);
	static final short[] DFA260_accept = DFA.unpackEncodedString(DFA260_acceptS);
	static final short[] DFA260_special = DFA.unpackEncodedString(DFA260_specialS);
	static final short[][] DFA260_transition;

	static {
		int numStates = DFA260_transitionS.length;
		DFA260_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA260_transition[i] = DFA.unpackEncodedString(DFA260_transitionS[i]);
		}
	}

	protected class DFA260 extends DFA {

		public DFA260(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 260;
			this.eot = DFA260_eot;
			this.eof = DFA260_eof;
			this.min = DFA260_min;
			this.max = DFA260_max;
			this.accept = DFA260_accept;
			this.special = DFA260_special;
			this.transition = DFA260_transition;
		}
		@Override
		public String getDescription() {
			return "1077:102: ( ( ws )? cp_mixin_block )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA270_eotS =
		"\7\uffff";
	static final String DFA270_eofS =
		"\7\uffff";
	static final String DFA270_minS =
		"\1\6\2\5\1\uffff\1\5\1\uffff\1\5";
	static final String DFA270_maxS =
		"\1\u0092\2\u0093\1\uffff\1\u0093\1\uffff\1\u0093";
	static final String DFA270_acceptS =
		"\3\uffff\1\2\1\uffff\1\1\1\uffff";
	static final String DFA270_specialS =
		"\7\uffff}>";
	static final String[] DFA270_transitionS = {
			"\1\3\1\1\3\uffff\5\1\3\uffff\1\1\4\uffff\1\1\6\uffff\1\3\2\uffff\1\3"+
			"\3\uffff\1\3\1\uffff\1\1\1\3\1\uffff\1\3\3\uffff\2\3\2\uffff\2\3\1\1"+
			"\7\uffff\3\1\1\3\3\uffff\1\3\4\uffff\1\3\1\uffff\1\1\1\3\1\1\5\uffff"+
			"\1\1\4\uffff\2\3\5\uffff\1\1\2\3\1\uffff\1\3\4\uffff\2\3\3\1\2\uffff"+
			"\2\1\1\uffff\3\1\1\uffff\5\1\1\uffff\1\1\1\2\2\1\3\uffff\1\3\1\uffff"+
			"\2\3\5\1\2\uffff\1\3\3\uffff\1\1",
			"\3\3\3\uffff\5\3\3\uffff\1\3\1\5\1\3\1\4\1\uffff\4\3\3\uffff\1\3\2\uffff"+
			"\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\3\3\1\uffff\2\3\2\uffff\3\3\7\uffff"+
			"\5\3\2\uffff\2\3\3\uffff\1\3\1\uffff\3\3\5\uffff\1\3\1\4\3\uffff\2\3"+
			"\3\uffff\1\3\1\uffff\3\3\1\uffff\1\3\4\uffff\6\3\1\uffff\2\3\1\uffff"+
			"\3\3\1\uffff\5\3\1\uffff\10\3\1\uffff\7\3\2\uffff\1\3\3\uffff\1\3\1\4",
			"\3\3\3\uffff\5\3\3\uffff\1\3\1\5\1\3\1\6\1\uffff\4\3\3\uffff\1\3\2\uffff"+
			"\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\3\3\1\uffff\2\3\2\uffff\3\3\7\uffff"+
			"\5\3\2\uffff\2\3\3\uffff\1\3\1\uffff\3\3\5\uffff\1\3\1\6\3\uffff\2\3"+
			"\3\uffff\1\3\1\uffff\3\3\1\uffff\1\3\4\uffff\6\3\1\uffff\2\3\1\uffff"+
			"\3\3\1\uffff\5\3\1\uffff\10\3\1\uffff\7\3\2\uffff\1\3\3\uffff\1\3\1\6",
			"",
			"\3\3\3\uffff\5\3\3\uffff\1\3\1\5\1\3\1\4\1\uffff\4\3\3\uffff\1\3\2\uffff"+
			"\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\3\3\1\uffff\2\3\2\uffff\3\3\7\uffff"+
			"\5\3\2\uffff\2\3\3\uffff\1\3\1\uffff\3\3\5\uffff\1\3\1\4\3\uffff\2\3"+
			"\3\uffff\1\3\1\uffff\3\3\1\uffff\1\3\4\uffff\6\3\1\uffff\2\3\1\uffff"+
			"\3\3\1\uffff\5\3\1\uffff\10\3\1\uffff\7\3\2\uffff\1\3\3\uffff\1\3\1\4",
			"",
			"\3\3\3\uffff\5\3\3\uffff\1\3\1\5\1\3\1\6\1\uffff\4\3\3\uffff\1\3\2\uffff"+
			"\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\3\3\1\uffff\2\3\2\uffff\3\3\7\uffff"+
			"\5\3\2\uffff\2\3\3\uffff\1\3\1\uffff\3\3\5\uffff\1\3\1\6\3\uffff\2\3"+
			"\3\uffff\1\3\1\uffff\3\3\1\uffff\1\3\4\uffff\6\3\1\uffff\2\3\1\uffff"+
			"\3\3\1\uffff\5\3\1\uffff\10\3\1\uffff\7\3\2\uffff\1\3\3\uffff\1\3\1\6"
	};

	static final short[] DFA270_eot = DFA.unpackEncodedString(DFA270_eotS);
	static final short[] DFA270_eof = DFA.unpackEncodedString(DFA270_eofS);
	static final char[] DFA270_min = DFA.unpackEncodedStringToUnsignedChars(DFA270_minS);
	static final char[] DFA270_max = DFA.unpackEncodedStringToUnsignedChars(DFA270_maxS);
	static final short[] DFA270_accept = DFA.unpackEncodedString(DFA270_acceptS);
	static final short[] DFA270_special = DFA.unpackEncodedString(DFA270_specialS);
	static final short[][] DFA270_transition;

	static {
		int numStates = DFA270_transitionS.length;
		DFA270_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA270_transition[i] = DFA.unpackEncodedString(DFA270_transitionS[i]);
		}
	}

	protected class DFA270 extends DFA {

		public DFA270(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 270;
			this.eot = DFA270_eot;
			this.eof = DFA270_eof;
			this.min = DFA270_min;
			this.max = DFA270_max;
			this.accept = DFA270_accept;
			this.special = DFA270_special;
			this.transition = DFA270_transition;
		}
		@Override
		public String getDescription() {
			return "1102:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA273_eotS =
		"\5\uffff";
	static final String DFA273_eofS =
		"\5\uffff";
	static final String DFA273_minS =
		"\1\25\1\7\1\uffff\1\7\1\uffff";
	static final String DFA273_maxS =
		"\1\u0080\1\u0093\1\uffff\1\u0093\1\uffff";
	static final String DFA273_acceptS =
		"\2\uffff\1\2\1\uffff\1\1";
	static final String DFA273_specialS =
		"\5\uffff}>";
	static final String[] DFA273_transitionS = {
			"\1\1\3\uffff\1\2\54\uffff\1\2\46\uffff\1\2\22\uffff\1\1",
			"\1\4\3\uffff\5\4\3\uffff\1\4\2\uffff\1\3\1\uffff\1\4\1\2\16\uffff\1"+
			"\4\14\uffff\1\4\7\uffff\3\4\6\uffff\1\2\4\uffff\1\4\1\uffff\1\4\5\uffff"+
			"\1\4\1\3\12\uffff\1\4\12\uffff\3\4\1\2\1\uffff\2\4\1\uffff\3\4\1\uffff"+
			"\5\4\1\uffff\4\4\7\uffff\5\4\6\uffff\1\4\1\3",
			"",
			"\1\4\3\uffff\5\4\3\uffff\1\4\2\uffff\1\3\1\uffff\1\4\1\2\16\uffff\1"+
			"\4\14\uffff\1\4\7\uffff\3\4\6\uffff\1\2\4\uffff\1\4\1\uffff\1\4\5\uffff"+
			"\1\4\1\3\12\uffff\1\4\12\uffff\3\4\1\2\1\uffff\2\4\1\uffff\3\4\1\uffff"+
			"\5\4\1\uffff\4\4\7\uffff\5\4\6\uffff\1\4\1\3",
			""
	};

	static final short[] DFA273_eot = DFA.unpackEncodedString(DFA273_eotS);
	static final short[] DFA273_eof = DFA.unpackEncodedString(DFA273_eofS);
	static final char[] DFA273_min = DFA.unpackEncodedStringToUnsignedChars(DFA273_minS);
	static final char[] DFA273_max = DFA.unpackEncodedStringToUnsignedChars(DFA273_maxS);
	static final short[] DFA273_accept = DFA.unpackEncodedString(DFA273_acceptS);
	static final short[] DFA273_special = DFA.unpackEncodedString(DFA273_specialS);
	static final short[][] DFA273_transition;

	static {
		int numStates = DFA273_transitionS.length;
		DFA273_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA273_transition[i] = DFA.unpackEncodedString(DFA273_transitionS[i]);
		}
	}

	protected class DFA273 extends DFA {

		public DFA273(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 273;
			this.eot = DFA273_eot;
			this.eof = DFA273_eof;
			this.min = DFA273_min;
			this.max = DFA273_max;
			this.accept = DFA273_accept;
			this.special = DFA273_special;
			this.transition = DFA273_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1117:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA287_eotS =
		"\4\uffff";
	static final String DFA287_eofS =
		"\4\uffff";
	static final String DFA287_minS =
		"\2\5\2\uffff";
	static final String DFA287_maxS =
		"\2\u0093\2\uffff";
	static final String DFA287_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA287_specialS =
		"\4\uffff}>";
	static final String[] DFA287_transitionS = {
			"\1\3\17\uffff\1\3\1\1\44\uffff\1\2\30\uffff\1\1\76\uffff\1\1",
			"\1\3\17\uffff\1\3\1\1\44\uffff\1\2\30\uffff\1\1\76\uffff\1\1",
			"",
			""
	};

	static final short[] DFA287_eot = DFA.unpackEncodedString(DFA287_eotS);
	static final short[] DFA287_eof = DFA.unpackEncodedString(DFA287_eofS);
	static final char[] DFA287_min = DFA.unpackEncodedStringToUnsignedChars(DFA287_minS);
	static final char[] DFA287_max = DFA.unpackEncodedStringToUnsignedChars(DFA287_maxS);
	static final short[] DFA287_accept = DFA.unpackEncodedString(DFA287_acceptS);
	static final short[] DFA287_special = DFA.unpackEncodedString(DFA287_specialS);
	static final short[][] DFA287_transition;

	static {
		int numStates = DFA287_transitionS.length;
		DFA287_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA287_transition[i] = DFA.unpackEncodedString(DFA287_transitionS[i]);
		}
	}

	protected class DFA287 extends DFA {

		public DFA287(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 287;
			this.eot = DFA287_eot;
			this.eof = DFA287_eof;
			this.min = DFA287_min;
			this.max = DFA287_max;
			this.accept = DFA287_accept;
			this.special = DFA287_special;
			this.transition = DFA287_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1132:34: ( ( ws )? ( COMMA | AND ) ( ws )? less_condition )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA303_eotS =
		"\4\uffff";
	static final String DFA303_eofS =
		"\4\uffff";
	static final String DFA303_minS =
		"\2\24\2\uffff";
	static final String DFA303_maxS =
		"\2\u0093\2\uffff";
	static final String DFA303_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA303_specialS =
		"\4\uffff}>";
	static final String[] DFA303_transitionS = {
			"\2\3\1\1\11\uffff\1\3\13\uffff\1\3\2\uffff\2\3\2\uffff\1\3\7\uffff\1"+
			"\2\1\3\5\uffff\1\3\11\uffff\1\3\7\uffff\1\1\22\uffff\1\3\32\uffff\1\3"+
			"\20\uffff\1\1",
			"\2\3\1\1\11\uffff\1\3\13\uffff\1\3\2\uffff\2\3\2\uffff\1\3\7\uffff\1"+
			"\2\1\3\5\uffff\1\3\11\uffff\1\3\7\uffff\1\1\22\uffff\1\3\32\uffff\1\3"+
			"\20\uffff\1\1",
			"",
			""
	};

	static final short[] DFA303_eot = DFA.unpackEncodedString(DFA303_eotS);
	static final short[] DFA303_eof = DFA.unpackEncodedString(DFA303_eofS);
	static final char[] DFA303_min = DFA.unpackEncodedStringToUnsignedChars(DFA303_minS);
	static final char[] DFA303_max = DFA.unpackEncodedStringToUnsignedChars(DFA303_maxS);
	static final short[] DFA303_accept = DFA.unpackEncodedString(DFA303_acceptS);
	static final short[] DFA303_special = DFA.unpackEncodedString(DFA303_specialS);
	static final short[][] DFA303_transition;

	static {
		int numStates = DFA303_transitionS.length;
		DFA303_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA303_transition[i] = DFA.unpackEncodedString(DFA303_transitionS[i]);
		}
	}

	protected class DFA303 extends DFA {

		public DFA303(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 303;
			this.eot = DFA303_eot;
			this.eof = DFA303_eof;
			this.min = DFA303_min;
			this.max = DFA303_max;
			this.accept = DFA303_accept;
			this.special = DFA303_special;
			this.transition = DFA303_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1181:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER | LBRACKET | RBRACKET ) ) )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA307_eotS =
		"\4\uffff";
	static final String DFA307_eofS =
		"\4\uffff";
	static final String DFA307_minS =
		"\2\24\2\uffff";
	static final String DFA307_maxS =
		"\2\u0093\2\uffff";
	static final String DFA307_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA307_specialS =
		"\4\uffff}>";
	static final String[] DFA307_transitionS = {
			"\1\2\1\uffff\1\1\11\uffff\1\3\16\uffff\2\3\2\uffff\1\3\30\uffff\1\3\7"+
			"\uffff\1\1\76\uffff\1\1",
			"\1\2\1\uffff\1\1\11\uffff\1\3\16\uffff\2\3\2\uffff\1\3\30\uffff\1\3"+
			"\7\uffff\1\1\76\uffff\1\1",
			"",
			""
	};

	static final short[] DFA307_eot = DFA.unpackEncodedString(DFA307_eotS);
	static final short[] DFA307_eof = DFA.unpackEncodedString(DFA307_eofS);
	static final char[] DFA307_min = DFA.unpackEncodedStringToUnsignedChars(DFA307_minS);
	static final char[] DFA307_max = DFA.unpackEncodedStringToUnsignedChars(DFA307_maxS);
	static final short[] DFA307_accept = DFA.unpackEncodedString(DFA307_acceptS);
	static final short[] DFA307_special = DFA.unpackEncodedString(DFA307_specialS);
	static final short[][] DFA307_transition;

	static {
		int numStates = DFA307_transitionS.length;
		DFA307_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA307_transition[i] = DFA.unpackEncodedString(DFA307_transitionS[i]);
		}
	}

	protected class DFA307 extends DFA {

		public DFA307(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 307;
			this.eot = DFA307_eot;
			this.eof = DFA307_eof;
			this.min = DFA307_min;
			this.max = DFA307_max;
			this.accept = DFA307_accept;
			this.special = DFA307_special;
			this.transition = DFA307_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1199:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA315_eotS =
		"\4\uffff";
	static final String DFA315_eofS =
		"\4\uffff";
	static final String DFA315_minS =
		"\2\7\2\uffff";
	static final String DFA315_maxS =
		"\2\u0093\2\uffff";
	static final String DFA315_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA315_specialS =
		"\4\uffff}>";
	static final String[] DFA315_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\6\uffff"+
			"\4\3\2\uffff\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2"+
			"\3\2\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\11\3\1\2\5\3\1\uffff\1"+
			"\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\6\uffff"+
			"\4\3\2\uffff\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2"+
			"\3\2\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\11\3\1\2\5\3\1\uffff\1"+
			"\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA315_eot = DFA.unpackEncodedString(DFA315_eotS);
	static final short[] DFA315_eof = DFA.unpackEncodedString(DFA315_eofS);
	static final char[] DFA315_min = DFA.unpackEncodedStringToUnsignedChars(DFA315_minS);
	static final char[] DFA315_max = DFA.unpackEncodedStringToUnsignedChars(DFA315_maxS);
	static final short[] DFA315_accept = DFA.unpackEncodedString(DFA315_acceptS);
	static final short[] DFA315_special = DFA.unpackEncodedString(DFA315_specialS);
	static final short[][] DFA315_transition;

	static {
		int numStates = DFA315_transitionS.length;
		DFA315_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA315_transition[i] = DFA.unpackEncodedString(DFA315_transitionS[i]);
		}
	}

	protected class DFA315 extends DFA {

		public DFA315(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 315;
			this.eot = DFA315_eot;
			this.eof = DFA315_eof;
			this.min = DFA315_min;
			this.max = DFA315_max;
			this.accept = DFA315_accept;
			this.special = DFA315_special;
			this.transition = DFA315_transition;
		}
		@Override
		public String getDescription() {
			return "1240:43: ( ( ws )? SASS_OPTIONAL )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA319_eotS =
		"\10\uffff";
	static final String DFA319_eofS =
		"\2\3\6\uffff";
	static final String DFA319_minS =
		"\2\7\1\24\1\uffff\2\24\1\uffff\1\24";
	static final String DFA319_maxS =
		"\3\u0093\1\uffff\2\u0093\1\uffff\1\u0093";
	static final String DFA319_acceptS =
		"\3\uffff\1\2\2\uffff\1\1\1\uffff";
	static final String DFA319_specialS =
		"\10\uffff}>";
	static final String[] DFA319_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\6\uffff"+
			"\4\3\2\uffff\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2"+
			"\3\2\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\1\3\1\2\7\3\1\uffff\5"+
			"\3\1\uffff\1\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\6\uffff"+
			"\4\3\2\uffff\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2"+
			"\3\2\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\1\3\1\4\7\3\1\uffff\5"+
			"\3\1\uffff\1\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"\1\3\1\uffff\1\5\34\uffff\1\6\7\uffff\1\6\30\uffff\1\5\76\uffff\1\5",
			"",
			"\1\3\1\uffff\1\7\34\uffff\1\6\7\uffff\1\6\30\uffff\1\7\76\uffff\1\7",
			"\1\3\1\uffff\1\5\34\uffff\1\6\7\uffff\1\6\30\uffff\1\5\76\uffff\1\5",
			"",
			"\1\3\1\uffff\1\7\34\uffff\1\6\7\uffff\1\6\30\uffff\1\7\76\uffff\1\7"
	};

	static final short[] DFA319_eot = DFA.unpackEncodedString(DFA319_eotS);
	static final short[] DFA319_eof = DFA.unpackEncodedString(DFA319_eofS);
	static final char[] DFA319_min = DFA.unpackEncodedStringToUnsignedChars(DFA319_minS);
	static final char[] DFA319_max = DFA.unpackEncodedStringToUnsignedChars(DFA319_maxS);
	static final short[] DFA319_accept = DFA.unpackEncodedString(DFA319_acceptS);
	static final short[] DFA319_special = DFA.unpackEncodedString(DFA319_specialS);
	static final short[][] DFA319_transition;

	static {
		int numStates = DFA319_transitionS.length;
		DFA319_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA319_transition[i] = DFA.unpackEncodedString(DFA319_transitionS[i]);
		}
	}

	protected class DFA319 extends DFA {

		public DFA319(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 319;
			this.eot = DFA319_eot;
			this.eof = DFA319_eof;
			this.min = DFA319_min;
			this.max = DFA319_max;
			this.accept = DFA319_accept;
			this.special = DFA319_special;
			this.transition = DFA319_transition;
		}
		@Override
		public String getDescription() {
			return "1260:63: ( ( ws )? sass_else )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA326_eotS =
		"\5\uffff";
	static final String DFA326_eofS =
		"\5\uffff";
	static final String DFA326_minS =
		"\1\163\2\26\2\uffff";
	static final String DFA326_maxS =
		"\1\163\2\u0093\2\uffff";
	static final String DFA326_acceptS =
		"\3\uffff\1\1\1\2";
	static final String DFA326_specialS =
		"\5\uffff}>";
	static final String[] DFA326_transitionS = {
			"\1\1",
			"\1\2\34\uffff\1\4\7\uffff\1\3\30\uffff\1\2\76\uffff\1\2",
			"\1\2\34\uffff\1\4\7\uffff\1\3\30\uffff\1\2\76\uffff\1\2",
			"",
			""
	};

	static final short[] DFA326_eot = DFA.unpackEncodedString(DFA326_eotS);
	static final short[] DFA326_eof = DFA.unpackEncodedString(DFA326_eofS);
	static final char[] DFA326_min = DFA.unpackEncodedStringToUnsignedChars(DFA326_minS);
	static final char[] DFA326_max = DFA.unpackEncodedStringToUnsignedChars(DFA326_maxS);
	static final short[] DFA326_accept = DFA.unpackEncodedString(DFA326_acceptS);
	static final short[] DFA326_special = DFA.unpackEncodedString(DFA326_specialS);
	static final short[][] DFA326_transition;

	static {
		int numStates = DFA326_transitionS.length;
		DFA326_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA326_transition[i] = DFA.unpackEncodedString(DFA326_transitionS[i]);
		}
	}

	protected class DFA326 extends DFA {

		public DFA326(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 326;
			this.eot = DFA326_eot;
			this.eof = DFA326_eof;
			this.min = DFA326_min;
			this.max = DFA326_max;
			this.accept = DFA326_accept;
			this.special = DFA326_special;
			this.transition = DFA326_transition;
		}
		@Override
		public String getDescription() {
			return "1263:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA325_eotS =
		"\10\uffff";
	static final String DFA325_eofS =
		"\2\3\6\uffff";
	static final String DFA325_minS =
		"\2\7\1\24\1\uffff\2\24\1\uffff\1\24";
	static final String DFA325_maxS =
		"\3\u0093\1\uffff\2\u0093\1\uffff\1\u0093";
	static final String DFA325_acceptS =
		"\3\uffff\1\2\2\uffff\1\1\1\uffff";
	static final String DFA325_specialS =
		"\10\uffff}>";
	static final String[] DFA325_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\6\uffff"+
			"\4\3\2\uffff\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2"+
			"\3\2\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\1\3\1\2\7\3\1\uffff\5"+
			"\3\1\uffff\1\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\1\3\1\uffff\1\3"+
			"\7\uffff\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\6\uffff"+
			"\4\3\2\uffff\1\3\10\uffff\3\3\5\uffff\1\3\1\1\12\uffff\1\3\2\uffff\2"+
			"\3\2\uffff\2\3\2\uffff\3\3\2\uffff\2\3\1\uffff\1\3\1\4\7\3\1\uffff\5"+
			"\3\1\uffff\1\3\2\uffff\1\3\1\uffff\5\3\6\uffff\1\3\1\1",
			"\1\3\1\uffff\1\5\34\uffff\1\6\7\uffff\1\6\30\uffff\1\5\76\uffff\1\5",
			"",
			"\1\3\1\uffff\1\7\34\uffff\1\6\7\uffff\1\6\30\uffff\1\7\76\uffff\1\7",
			"\1\3\1\uffff\1\5\34\uffff\1\6\7\uffff\1\6\30\uffff\1\5\76\uffff\1\5",
			"",
			"\1\3\1\uffff\1\7\34\uffff\1\6\7\uffff\1\6\30\uffff\1\7\76\uffff\1\7"
	};

	static final short[] DFA325_eot = DFA.unpackEncodedString(DFA325_eotS);
	static final short[] DFA325_eof = DFA.unpackEncodedString(DFA325_eofS);
	static final char[] DFA325_min = DFA.unpackEncodedStringToUnsignedChars(DFA325_minS);
	static final char[] DFA325_max = DFA.unpackEncodedStringToUnsignedChars(DFA325_maxS);
	static final short[] DFA325_accept = DFA.unpackEncodedString(DFA325_acceptS);
	static final short[] DFA325_special = DFA.unpackEncodedString(DFA325_specialS);
	static final short[][] DFA325_transition;

	static {
		int numStates = DFA325_transitionS.length;
		DFA325_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA325_transition[i] = DFA.unpackEncodedString(DFA325_transitionS[i]);
		}
	}

	protected class DFA325 extends DFA {

		public DFA325(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 325;
			this.eot = DFA325_eot;
			this.eof = DFA325_eof;
			this.min = DFA325_min;
			this.max = DFA325_max;
			this.accept = DFA325_accept;
			this.special = DFA325_special;
			this.transition = DFA325_transition;
		}
		@Override
		public String getDescription() {
			return "1267:110: ( ( ws )? sass_else )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA346_eotS =
		"\4\uffff";
	static final String DFA346_eofS =
		"\4\uffff";
	static final String DFA346_minS =
		"\2\26\2\uffff";
	static final String DFA346_maxS =
		"\2\u0093\2\uffff";
	static final String DFA346_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA346_specialS =
		"\4\uffff}>";
	static final String[] DFA346_transitionS = {
			"\1\1\35\uffff\1\2\37\uffff\1\1\53\uffff\1\3\22\uffff\1\1",
			"\1\1\35\uffff\1\2\37\uffff\1\1\53\uffff\1\3\22\uffff\1\1",
			"",
			""
	};

	static final short[] DFA346_eot = DFA.unpackEncodedString(DFA346_eotS);
	static final short[] DFA346_eof = DFA.unpackEncodedString(DFA346_eofS);
	static final char[] DFA346_min = DFA.unpackEncodedStringToUnsignedChars(DFA346_minS);
	static final char[] DFA346_max = DFA.unpackEncodedStringToUnsignedChars(DFA346_maxS);
	static final short[] DFA346_accept = DFA.unpackEncodedString(DFA346_acceptS);
	static final short[] DFA346_special = DFA.unpackEncodedString(DFA346_specialS);
	static final short[][] DFA346_transition;

	static {
		int numStates = DFA346_transitionS.length;
		DFA346_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA346_transition[i] = DFA.unpackEncodedString(DFA346_transitionS[i]);
		}
	}

	protected class DFA346 extends DFA {

		public DFA346(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 346;
			this.eot = DFA346_eot;
			this.eof = DFA346_eof;
			this.min = DFA346_min;
			this.max = DFA346_max;
			this.accept = DFA346_accept;
			this.special = DFA346_special;
			this.transition = DFA346_transition;
		}
		@Override
		public String getDescription() {
			return "393:22: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA367_eotS =
		"\4\uffff";
	static final String DFA367_eofS =
		"\4\uffff";
	static final String DFA367_minS =
		"\2\26\2\uffff";
	static final String DFA367_maxS =
		"\2\u0093\2\uffff";
	static final String DFA367_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA367_specialS =
		"\4\uffff}>";
	static final String[] DFA367_transitionS = {
			"\1\1\35\uffff\1\2\37\uffff\1\1\53\uffff\1\3\22\uffff\1\1",
			"\1\1\35\uffff\1\2\37\uffff\1\1\53\uffff\1\3\22\uffff\1\1",
			"",
			""
	};

	static final short[] DFA367_eot = DFA.unpackEncodedString(DFA367_eotS);
	static final short[] DFA367_eof = DFA.unpackEncodedString(DFA367_eofS);
	static final char[] DFA367_min = DFA.unpackEncodedStringToUnsignedChars(DFA367_minS);
	static final char[] DFA367_max = DFA.unpackEncodedStringToUnsignedChars(DFA367_maxS);
	static final short[] DFA367_accept = DFA.unpackEncodedString(DFA367_acceptS);
	static final short[] DFA367_special = DFA.unpackEncodedString(DFA367_specialS);
	static final short[][] DFA367_transition;

	static {
		int numStates = DFA367_transitionS.length;
		DFA367_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA367_transition[i] = DFA.unpackEncodedString(DFA367_transitionS[i]);
		}
	}

	protected class DFA367 extends DFA {

		public DFA367(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 367;
			this.eot = DFA367_eot;
			this.eof = DFA367_eof;
			this.min = DFA367_min;
			this.max = DFA367_max;
			this.accept = DFA367_accept;
			this.special = DFA367_special;
			this.transition = DFA367_transition;
		}
		@Override
		public String getDescription() {
			return "641:22: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA376_eotS =
		"\5\uffff";
	static final String DFA376_eofS =
		"\5\uffff";
	static final String DFA376_minS =
		"\2\6\3\uffff";
	static final String DFA376_maxS =
		"\2\u0093\3\uffff";
	static final String DFA376_acceptS =
		"\2\uffff\1\2\1\3\1\1";
	static final String DFA376_specialS =
		"\5\uffff}>";
	static final String[] DFA376_transitionS = {
			"\2\3\3\uffff\5\3\3\uffff\1\3\1\uffff\1\2\1\1\1\uffff\1\3\6\uffff\1\3"+
			"\2\uffff\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\2\uffff"+
			"\1\3\1\uffff\1\3\7\uffff\4\3\3\uffff\1\3\6\uffff\3\3\5\uffff\1\3\1\1"+
			"\4\uffff\1\3\5\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\2\3\1\uffff"+
			"\3\3\1\uffff\5\3\1\uffff\4\3\1\uffff\1\2\1\uffff\1\3\1\uffff\7\3\2\uffff"+
			"\1\3\3\uffff\1\3\1\1",
			"\2\4\3\uffff\5\4\3\uffff\1\4\1\uffff\1\2\1\1\1\uffff\1\4\6\uffff\1\4"+
			"\2\uffff\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\1\4\3\uffff\2\4\2\uffff"+
			"\1\4\1\uffff\1\4\7\uffff\4\4\3\uffff\1\4\6\uffff\3\4\5\uffff\1\4\1\1"+
			"\4\uffff\1\4\5\uffff\3\4\1\uffff\1\4\4\uffff\5\4\2\uffff\2\4\1\uffff"+
			"\3\4\1\uffff\5\4\1\uffff\4\4\1\uffff\1\2\1\uffff\1\4\1\uffff\7\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\1",
			"",
			"",
			""
	};

	static final short[] DFA376_eot = DFA.unpackEncodedString(DFA376_eotS);
	static final short[] DFA376_eof = DFA.unpackEncodedString(DFA376_eofS);
	static final char[] DFA376_min = DFA.unpackEncodedStringToUnsignedChars(DFA376_minS);
	static final char[] DFA376_max = DFA.unpackEncodedStringToUnsignedChars(DFA376_maxS);
	static final short[] DFA376_accept = DFA.unpackEncodedString(DFA376_acceptS);
	static final short[] DFA376_special = DFA.unpackEncodedString(DFA376_specialS);
	static final short[][] DFA376_transition;

	static {
		int numStates = DFA376_transitionS.length;
		DFA376_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA376_transition[i] = DFA.unpackEncodedString(DFA376_transitionS[i]);
		}
	}

	protected class DFA376 extends DFA {

		public DFA376(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 376;
			this.eot = DFA376_eot;
			this.eof = DFA376_eof;
			this.min = DFA376_min;
			this.max = DFA376_max;
			this.accept = DFA376_accept;
			this.special = DFA376_special;
			this.transition = DFA376_transition;
		}
		@Override
		public String getDescription() {
			return "869:15: ( ws | ( ( ws )? operator ( ws )? ) |)";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA381_eotS =
		"\5\uffff";
	static final String DFA381_eofS =
		"\5\uffff";
	static final String DFA381_minS =
		"\2\6\3\uffff";
	static final String DFA381_maxS =
		"\2\u0093\3\uffff";
	static final String DFA381_acceptS =
		"\2\uffff\1\2\1\3\1\1";
	static final String DFA381_specialS =
		"\5\uffff}>";
	static final String[] DFA381_transitionS = {
			"\2\3\3\uffff\5\3\3\uffff\1\3\2\uffff\1\1\1\uffff\1\3\6\uffff\1\3\2\uffff"+
			"\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\2\uffff\1\3\1\uffff"+
			"\1\3\7\uffff\4\3\3\uffff\1\3\6\uffff\3\3\5\uffff\1\3\1\1\4\uffff\1\3"+
			"\5\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\2\3\1\uffff\3\3\1\uffff"+
			"\5\3\1\uffff\4\3\1\uffff\1\2\1\uffff\1\3\1\uffff\7\3\2\uffff\1\3\3\uffff"+
			"\1\3\1\1",
			"\2\4\3\uffff\5\4\3\uffff\1\4\2\uffff\1\1\1\uffff\1\4\6\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\1\4\3\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\1\4\7\uffff\4\4\3\uffff\1\4\6\uffff\3\4\5\uffff\1\4\1\1\4\uffff\1\4"+
			"\5\uffff\3\4\1\uffff\1\4\4\uffff\5\4\2\uffff\2\4\1\uffff\3\4\1\uffff"+
			"\5\4\1\uffff\4\4\1\uffff\1\2\1\uffff\1\4\1\uffff\7\4\2\uffff\1\4\3\uffff"+
			"\1\4\1\1",
			"",
			"",
			""
	};

	static final short[] DFA381_eot = DFA.unpackEncodedString(DFA381_eotS);
	static final short[] DFA381_eof = DFA.unpackEncodedString(DFA381_eofS);
	static final char[] DFA381_min = DFA.unpackEncodedStringToUnsignedChars(DFA381_minS);
	static final char[] DFA381_max = DFA.unpackEncodedStringToUnsignedChars(DFA381_maxS);
	static final short[] DFA381_accept = DFA.unpackEncodedString(DFA381_acceptS);
	static final short[] DFA381_special = DFA.unpackEncodedString(DFA381_specialS);
	static final short[][] DFA381_transition;

	static {
		int numStates = DFA381_transitionS.length;
		DFA381_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA381_transition[i] = DFA.unpackEncodedString(DFA381_transitionS[i]);
		}
	}

	protected class DFA381 extends DFA {

		public DFA381(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 381;
			this.eot = DFA381_eot;
			this.eof = DFA381_eof;
			this.min = DFA381_min;
			this.max = DFA381_max;
			this.accept = DFA381_accept;
			this.special = DFA381_special;
			this.transition = DFA381_transition;
		}
		@Override
		public String getDescription() {
			return "950:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |)";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	public static final BitSet FOLLOW_ws_in_styleSheet120 = new BitSet(new long[]{0xF02999014138F980L,0xF7FD9C8C80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_charSet_in_styleSheet130 = new BitSet(new long[]{0xF02999014178F980L,0xF7FD9C8C80183804L,0x00000000000C0FA5L});
	public static final BitSet FOLLOW_ws_in_styleSheet132 = new BitSet(new long[]{0xF02999014138F980L,0xF7FD9C8C80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_imports_in_styleSheet146 = new BitSet(new long[]{0xF02999014138F980L,0xF7FD9C8C80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_namespaces_in_styleSheet157 = new BitSet(new long[]{0xF02999014138F980L,0xF7FD9C8C80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_body_in_styleSheet168 = new BitSet(new long[]{0x0000000000000000L});
	public static final BitSet FOLLOW_EOF_in_styleSheet176 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespace_in_namespaces193 = new BitSet(new long[]{0x0000000000400002L,0x0000000000180000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_namespaces195 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
	public static final BitSet FOLLOW_NAMESPACE_SYM_in_namespace211 = new BitSet(new long[]{0x0008000000400000L,0x0000000000100000L,0x0000000000084008L});
	public static final BitSet FOLLOW_ws_in_namespace213 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000000004008L});
	public static final BitSet FOLLOW_namespacePrefixName_in_namespace217 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000084008L});
	public static final BitSet FOLLOW_ws_in_namespace219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004008L});
	public static final BitSet FOLLOW_resourceIdentifier_in_namespace224 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000080001L});
	public static final BitSet FOLLOW_ws_in_namespace226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_SEMI_in_namespace229 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_namespacePrefixName242 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHARSET_SYM_in_charSet276 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000080008L});
	public static final BitSet FOLLOW_ws_in_charSet278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_charSetValue_in_charSet281 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000080001L});
	public static final BitSet FOLLOW_ws_in_charSet283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_SEMI_in_charSet286 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_in_charSetValue300 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importItem_in_imports314 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000080001L});
	public static final BitSet FOLLOW_ws_in_imports316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_SEMI_in_imports319 = new BitSet(new long[]{0x0020000000400002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_imports321 = new BitSet(new long[]{0x0020000000000002L});
	public static final BitSet FOLLOW_IMPORT_SYM_in_importItem347 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000084008L});
	public static final BitSet FOLLOW_ws_in_importItem349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004008L});
	public static final BitSet FOLLOW_resourceIdentifier_in_importItem352 = new BitSet(new long[]{0xE02909000148F882L,0xF7DD9C0089182A00L,0x00000000000C0F80L});
	public static final BitSet FOLLOW_ws_in_importItem362 = new BitSet(new long[]{0xE02909000108F880L,0xF7DD9C0089082A00L,0x0000000000040F80L});
	public static final BitSet FOLLOW_mediaQueryList_in_importItem365 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORT_SYM_in_importItem398 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000084008L});
	public static final BitSet FOLLOW_ws_in_importItem400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004008L});
	public static final BitSet FOLLOW_resourceIdentifier_in_importItem403 = new BitSet(new long[]{0xE02909000168F882L,0xF7DD9C0089182A00L,0x00000000000C0F80L});
	public static final BitSet FOLLOW_ws_in_importItem406 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_COMMA_in_importItem409 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000084008L});
	public static final BitSet FOLLOW_ws_in_importItem411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004008L});
	public static final BitSet FOLLOW_resourceIdentifier_in_importItem414 = new BitSet(new long[]{0xE02909000168F882L,0xF7DD9C0089182A00L,0x00000000000C0F80L});
	public static final BitSet FOLLOW_ws_in_importItem426 = new BitSet(new long[]{0xE02909000108F880L,0xF7DD9C0089082A00L,0x0000000000040F80L});
	public static final BitSet FOLLOW_mediaQueryList_in_importItem429 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORT_SYM_in_importItem453 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100200L,0x0000000000084008L});
	public static final BitSet FOLLOW_ws_in_importItem455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000004008L});
	public static final BitSet FOLLOW_LPAREN_in_importItem459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_LESS_IMPORT_TYPE_in_importItem461 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_RPAREN_in_importItem463 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000084008L});
	public static final BitSet FOLLOW_ws_in_importItem465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004008L});
	public static final BitSet FOLLOW_resourceIdentifier_in_importItem470 = new BitSet(new long[]{0xE02909000148F882L,0xF7DD9C0089182A00L,0x00000000000C0F80L});
	public static final BitSet FOLLOW_ws_in_importItem480 = new BitSet(new long[]{0xE02909000108F880L,0xF7DD9C0089082A00L,0x0000000000040F80L});
	public static final BitSet FOLLOW_mediaQueryList_in_importItem483 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MEDIA_SYM_in_media501 = new BitSet(new long[]{0xE02909000148F880L,0xF7DD9C0089182A00L,0x00000000000C0F80L});
	public static final BitSet FOLLOW_ws_in_media503 = new BitSet(new long[]{0xE02909000108F880L,0xF7DD9C0089082A00L,0x0000000000040F80L});
	public static final BitSet FOLLOW_mediaQueryList_in_media521 = new BitSet(new long[]{0x0800000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_media529 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_media536 = new BitSet(new long[]{0xF02999014178F980L,0xF7FD9CCC80183804L,0x00000000000C0FA5L});
	public static final BitSet FOLLOW_ws_in_media538 = new BitSet(new long[]{0xF02999014138F980L,0xF7FD9CCC80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_syncToFollow_in_media541 = new BitSet(new long[]{0xF02999014138F980L,0xF7FD9CCC80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_mediaBody_in_media551 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_RBRACE_in_media558 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_mediaBodyItem_in_mediaBody592 = new BitSet(new long[]{0xF02999014178F982L,0xF7FD9C8C80183804L,0x00000000000C0FA5L});
	public static final BitSet FOLLOW_ws_in_mediaBody602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_SEMI_in_mediaBody605 = new BitSet(new long[]{0xF02999014178F982L,0xF7FD9C8C80183804L,0x00000000000C0FA5L});
	public static final BitSet FOLLOW_ws_in_mediaBody609 = new BitSet(new long[]{0xF02999014138F982L,0xF7FD9C8C80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_SEMI_in_mediaBody636 = new BitSet(new long[]{0xF02999014178F982L,0xF7FD9C8C80183804L,0x00000000000C0FA5L});
	public static final BitSet FOLLOW_ws_in_mediaBody638 = new BitSet(new long[]{0xF02999014138F982L,0xF7FD9C8C80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_cp_mixin_declaration_in_mediaBodyItem704 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_mediaBodyItem737 = new BitSet(new long[]{0x0010000000400002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_mediaBodyItem740 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_mediaBodyItem743 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_mediaBodyItem760 = new BitSet(new long[]{0x0010000000400002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_mediaBodyItem763 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_mediaBodyItem766 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_mediaBodyItem805 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_mediaBodyItem832 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_extend_in_mediaBodyItem842 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_debug_in_mediaBodyItem852 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_control_in_mediaBodyItem862 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_content_in_mediaBodyItem872 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importItem_in_mediaBodyItem882 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rule_in_mediaBodyItem890 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_page_in_mediaBodyItem898 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fontFace_in_mediaBodyItem906 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_vendorAtRule_in_mediaBodyItem914 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_media_in_mediaBodyItem927 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList941 = new BitSet(new long[]{0x0000000000600002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_mediaQueryList953 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_COMMA_in_mediaQueryList956 = new BitSet(new long[]{0xE02909000148F880L,0xF7DD9C0089182A00L,0x00000000000C0F80L});
	public static final BitSet FOLLOW_ws_in_mediaQueryList958 = new BitSet(new long[]{0xE02909000108F880L,0xF7DD9C0089082A00L,0x0000000000040F80L});
	public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList961 = new BitSet(new long[]{0x0000000000600002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_mediaQueryOperator_in_mediaQuery980 = new BitSet(new long[]{0x0009080000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery982 = new BitSet(new long[]{0x0009080000000000L});
	public static final BitSet FOLLOW_mediaType_in_mediaQuery989 = new BitSet(new long[]{0x0000000000400022L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery993 = new BitSet(new long[]{0x0000000000000020L});
	public static final BitSet FOLLOW_AND_in_mediaQuery996 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100200L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_mediaExpression_in_mediaQuery1001 = new BitSet(new long[]{0x0000000000400022L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_mediaExpression_in_mediaQuery1012 = new BitSet(new long[]{0x0000000000400022L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery1016 = new BitSet(new long[]{0x0000000000000020L});
	public static final BitSet FOLLOW_AND_in_mediaQuery1019 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100200L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery1021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_mediaExpression_in_mediaQuery1024 = new BitSet(new long[]{0x0000000000400022L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_cp_variable_in_mediaQuery1037 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_mediaType1065 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_mediaType1069 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaType1075 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_mediaExpression1093 = new BitSet(new long[]{0xE02909000148F880L,0xF7DD9C0080182800L,0x00000000000C0F80L});
	public static final BitSet FOLLOW_ws_in_mediaExpression1095 = new BitSet(new long[]{0xE02909000108F880L,0xF7DD9C0080082800L,0x0000000000040F80L});
	public static final BitSet FOLLOW_mediaFeature_in_mediaExpression1098 = new BitSet(new long[]{0x0000000000500000L,0x0000200000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_mediaFeatureValue_in_mediaExpression1100 = new BitSet(new long[]{0x0000000000400000L,0x0000200000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_mediaExpression1103 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_RPAREN_in_mediaExpression1106 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_mediaFeatureValue1127 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COLON_in_mediaFeatureValue1130 = new BitSet(new long[]{0xE0398B448148F8C0L,0xF7DD9F0B83183A11L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_mediaFeatureValue1132 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B83083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_expression_in_mediaFeatureValue1151 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_mediaFeatureValue1171 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_mediaFeature1191 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_mediaFeature1195 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_mediaFeature1203 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaFeature1207 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bodyItem_in_body1241 = new BitSet(new long[]{0xF02999014178F982L,0xF7FD9C8C80183804L,0x00000000000C0FA5L});
	public static final BitSet FOLLOW_ws_in_body1251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_SEMI_in_body1254 = new BitSet(new long[]{0xF02999014178F982L,0xF7FD9C8C80183804L,0x00000000000C0FA5L});
	public static final BitSet FOLLOW_ws_in_body1258 = new BitSet(new long[]{0xF02999014138F982L,0xF7FD9C8C80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_SEMI_in_body1285 = new BitSet(new long[]{0xF02999014178F982L,0xF7FD9C8C80183804L,0x00000000000C0FA5L});
	public static final BitSet FOLLOW_ws_in_body1287 = new BitSet(new long[]{0xF02999014138F982L,0xF7FD9C8C80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_cp_mixin_declaration_in_bodyItem1359 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_bodyItem1392 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_bodyItem1411 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rule_in_bodyItem1420 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_at_rule_in_bodyItem1432 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_declaration_in_bodyItem1446 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importItem_in_bodyItem1469 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_debug_in_bodyItem1483 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_control_in_bodyItem1497 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_function_declaration_in_bodyItem1511 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_media_in_at_rule1537 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_page_in_at_rule1545 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_counterStyle_in_at_rule1553 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fontFace_in_at_rule1561 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_vendorAtRule_in_at_rule1569 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_moz_document_in_vendorAtRule1582 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_webkitKeyframes_in_vendorAtRule1586 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_generic_at_rule_in_vendorAtRule1590 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_IDENT_in_generic_at_rule1618 = new BitSet(new long[]{0x0808000000400000L,0x0000000000100000L,0x0000000000080008L});
	public static final BitSet FOLLOW_ws_in_generic_at_rule1620 = new BitSet(new long[]{0x0808000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_atRuleId_in_generic_at_rule1625 = new BitSet(new long[]{0x0800000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_generic_at_rule1627 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_generic_at_rule1641 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_syncTo_RBRACE_in_generic_at_rule1652 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_RBRACE_in_generic_at_rule1662 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document1673 = new BitSet(new long[]{0x0000000000400000L,0x000000000011C000L,0x0000000000084000L});
	public static final BitSet FOLLOW_ws_in_moz_document1675 = new BitSet(new long[]{0x0000000000000000L,0x000000000001C000L,0x0000000000004000L});
	public static final BitSet FOLLOW_moz_document_function_in_moz_document1680 = new BitSet(new long[]{0x0800000000600000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_moz_document1682 = new BitSet(new long[]{0x0800000000200000L});
	public static final BitSet FOLLOW_COMMA_in_moz_document1688 = new BitSet(new long[]{0x0000000000400000L,0x000000000011C000L,0x0000000000084000L});
	public static final BitSet FOLLOW_ws_in_moz_document1690 = new BitSet(new long[]{0x0000000000000000L,0x000000000001C000L,0x0000000000004000L});
	public static final BitSet FOLLOW_moz_document_function_in_moz_document1693 = new BitSet(new long[]{0x0800000000600000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_moz_document1695 = new BitSet(new long[]{0x0800000000200000L});
	public static final BitSet FOLLOW_LBRACE_in_moz_document1702 = new BitSet(new long[]{0xF02999014178F980L,0xF7FD9CCC80183804L,0x00000000000C0FA5L});
	public static final BitSet FOLLOW_ws_in_moz_document1704 = new BitSet(new long[]{0xF02999014138F980L,0xF7FD9CCC80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_body_in_moz_document1709 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_RBRACE_in_moz_document1714 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes1751 = new BitSet(new long[]{0x0008000000400000L,0x0000000000100000L,0x0000000000080008L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframes1753 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_atRuleId_in_webkitKeyframes1756 = new BitSet(new long[]{0x0800000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframes1758 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_webkitKeyframes1762 = new BitSet(new long[]{0x0008000000400000L,0x0000004100100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframes1764 = new BitSet(new long[]{0x0008000000000000L,0x0000004100000000L});
	public static final BitSet FOLLOW_webkitKeyframesBlock_in_webkitKeyframes1771 = new BitSet(new long[]{0x0008000000400000L,0x0000004100100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframes1773 = new BitSet(new long[]{0x0008000000000000L,0x0000004100000000L});
	public static final BitSet FOLLOW_RBRACE_in_webkitKeyframes1780 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock1792 = new BitSet(new long[]{0x0800000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock1794 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_webkitKeyframesBlock1798 = new BitSet(new long[]{0xF02999014178F980L,0xF7FD9CCC80183804L,0x00000000000C0FA5L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock1801 = new BitSet(new long[]{0xF02999014138F980L,0xF7FD9CCC80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_syncToFollow_in_webkitKeyframesBlock1804 = new BitSet(new long[]{0xF02999014138F980L,0xF7FD9CCC80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_declarations_in_webkitKeyframesBlock1808 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_RBRACE_in_webkitKeyframesBlock1812 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_webkitKeyframeSelectors1824 = new BitSet(new long[]{0x0000000000600002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors1836 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_COMMA_in_webkitKeyframeSelectors1839 = new BitSet(new long[]{0x0008000000400000L,0x0000000100100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors1841 = new BitSet(new long[]{0x0008000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_set_in_webkitKeyframeSelectors1844 = new BitSet(new long[]{0x0000000000600002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_PAGE_SYM_in_page1869 = new BitSet(new long[]{0x0808000000500000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_page1871 = new BitSet(new long[]{0x0808000000100000L});
	public static final BitSet FOLLOW_IDENT_in_page1876 = new BitSet(new long[]{0x0800000000500000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_page1878 = new BitSet(new long[]{0x0800000000100000L});
	public static final BitSet FOLLOW_pseudoPage_in_page1885 = new BitSet(new long[]{0x0800000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_page1887 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_page1900 = new BitSet(new long[]{0xE02989010148F880L,0xF7DD9C4080183800L,0x00000000000C0F85L});
	public static final BitSet FOLLOW_ws_in_page1902 = new BitSet(new long[]{0xE02989010108F880L,0xF7DD9C4080083800L,0x0000000000040F85L});
	public static final BitSet FOLLOW_propertyDeclaration_in_page1945 = new BitSet(new long[]{0x0000000000400000L,0x0000004000100000L,0x0000000000080001L});
	public static final BitSet FOLLOW_margin_in_page1947 = new BitSet(new long[]{0x0000000000400000L,0x0000004000100000L,0x0000000000080001L});
	public static final BitSet FOLLOW_ws_in_page1950 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_SEMI_in_page1956 = new BitSet(new long[]{0xE02989010148F880L,0xF7DD9C4080183800L,0x00000000000C0F85L});
	public static final BitSet FOLLOW_ws_in_page1958 = new BitSet(new long[]{0xE02989010108F880L,0xF7DD9C4080083800L,0x0000000000040F85L});
	public static final BitSet FOLLOW_propertyDeclaration_in_page1963 = new BitSet(new long[]{0x0000000000400000L,0x0000004000100000L,0x0000000000080001L});
	public static final BitSet FOLLOW_margin_in_page1965 = new BitSet(new long[]{0x0000000000400000L,0x0000004000100000L,0x0000000000080001L});
	public static final BitSet FOLLOW_ws_in_page1968 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_RBRACE_in_page1983 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COUNTER_STYLE_SYM_in_counterStyle2000 = new BitSet(new long[]{0x0008000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_counterStyle2002 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_counterStyle2005 = new BitSet(new long[]{0x0800000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_counterStyle2007 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_counterStyle2018 = new BitSet(new long[]{0xF02999014178F980L,0xF7FD9CCC80183804L,0x00000000000C0FA5L});
	public static final BitSet FOLLOW_ws_in_counterStyle2020 = new BitSet(new long[]{0xF02999014138F980L,0xF7FD9CCC80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_syncToDeclarationsRule_in_counterStyle2023 = new BitSet(new long[]{0xF02999014138F980L,0xF7FD9CCC80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_declarations_in_counterStyle2027 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_RBRACE_in_counterStyle2038 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FONT_FACE_SYM_in_fontFace2055 = new BitSet(new long[]{0x0800000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_fontFace2057 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_fontFace2068 = new BitSet(new long[]{0xF02999014178F980L,0xF7FD9CCC80183804L,0x00000000000C0FA5L});
	public static final BitSet FOLLOW_ws_in_fontFace2070 = new BitSet(new long[]{0xF02999014138F980L,0xF7FD9CCC80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_syncToDeclarationsRule_in_fontFace2073 = new BitSet(new long[]{0xF02999014138F980L,0xF7FD9CCC80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_declarations_in_fontFace2077 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_RBRACE_in_fontFace2088 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_margin_sym_in_margin2102 = new BitSet(new long[]{0x0800000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_margin2104 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_margin2107 = new BitSet(new long[]{0xF02999014178F980L,0xF7FD9CCC80183804L,0x00000000000C0FA5L});
	public static final BitSet FOLLOW_ws_in_margin2109 = new BitSet(new long[]{0xF02999014138F980L,0xF7FD9CCC80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_syncToDeclarationsRule_in_margin2112 = new BitSet(new long[]{0xF02999014138F980L,0xF7FD9CCC80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_declarations_in_margin2114 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_RBRACE_in_margin2117 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COLON_in_pseudoPage2326 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_pseudoPage2328 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_declaration_interpolation_expression_in_property2424 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_property2432 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_property2440 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_property2450 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectorsGroup_in_rule2477 = new BitSet(new long[]{0x0800000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_rule2479 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_rule2486 = new BitSet(new long[]{0xF02999014178F980L,0xF7FD9CCC80183804L,0x00000000000C0FA5L});
	public static final BitSet FOLLOW_ws_in_rule2488 = new BitSet(new long[]{0xF02999014138F980L,0xF7FD9CCC80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_syncToFollow_in_rule2491 = new BitSet(new long[]{0xF02999014138F980L,0xF7FD9CCC80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_declarations_in_rule2501 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_RBRACE_in_rule2508 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_declaration_in_declarations2551 = new BitSet(new long[]{0xF02999014178F982L,0xF7FD9C8C80183804L,0x00000000000C0FA5L});
	public static final BitSet FOLLOW_ws_in_declarations2561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_SEMI_in_declarations2564 = new BitSet(new long[]{0xF02999014178F982L,0xF7FD9C8C80183804L,0x00000000000C0FA5L});
	public static final BitSet FOLLOW_ws_in_declarations2568 = new BitSet(new long[]{0xF02999014138F982L,0xF7FD9C8C80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_SEMI_in_declarations2595 = new BitSet(new long[]{0xF02999014178F982L,0xF7FD9C8C80183804L,0x00000000000C0FA5L});
	public static final BitSet FOLLOW_ws_in_declarations2597 = new BitSet(new long[]{0xF02999014138F982L,0xF7FD9C8C80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_cp_variable_declaration_in_declaration2632 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_nested_properties_in_declaration2644 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_declaration2656 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_declaration2695 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_declaration_in_declaration2740 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_declaration2773 = new BitSet(new long[]{0x0010000000400002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_declaration2776 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_declaration2779 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_declaration2796 = new BitSet(new long[]{0x0010000000400002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_declaration2799 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_declaration2802 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rule_in_declaration2821 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_at_rule_in_declaration2831 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_control_in_declaration2841 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_extend_in_declaration2851 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_debug_in_declaration2861 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_content_in_declaration2871 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_function_return_in_declaration2881 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importItem_in_declaration2891 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_declaration2899 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_selector_interpolation_expression_in_selectorsGroup2962 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selector_in_selectorsGroup2975 = new BitSet(new long[]{0x0000000000600002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_selectorsGroup2978 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_COMMA_in_selectorsGroup2981 = new BitSet(new long[]{0x1009980140500100L,0x0020000C00100004L,0x0000000000080024L});
	public static final BitSet FOLLOW_ws_in_selectorsGroup2983 = new BitSet(new long[]{0x1009980140100100L,0x0020000C00000004L,0x0000000000000024L});
	public static final BitSet FOLLOW_selector_in_selectorsGroup2986 = new BitSet(new long[]{0x0000000000600002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_combinator_in_selector3007 = new BitSet(new long[]{0x1009880140500100L,0x0020000400100004L,0x0000000000080004L});
	public static final BitSet FOLLOW_ws_in_selector3009 = new BitSet(new long[]{0x1009880140100100L,0x0020000400000004L,0x0000000000000004L});
	public static final BitSet FOLLOW_simpleSelectorSequence_in_selector3014 = new BitSet(new long[]{0x1009980140500102L,0x0020000C00100004L,0x0000000000080024L});
	public static final BitSet FOLLOW_ws_in_selector3020 = new BitSet(new long[]{0x0000100000000000L,0x0000000800000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_combinator_in_selector3023 = new BitSet(new long[]{0x1009880140500100L,0x0020000400100004L,0x0000000000080004L});
	public static final BitSet FOLLOW_ws_in_selector3025 = new BitSet(new long[]{0x1009880140100100L,0x0020000400000004L,0x0000000000000004L});
	public static final BitSet FOLLOW_ws_in_selector3029 = new BitSet(new long[]{0x1009880140100100L,0x0020000400000004L,0x0000000000000004L});
	public static final BitSet FOLLOW_simpleSelectorSequence_in_selector3033 = new BitSet(new long[]{0x1009980140500102L,0x0020000C00100004L,0x0000000000080024L});
	public static final BitSet FOLLOW_typeSelector_in_simpleSelectorSequence3081 = new BitSet(new long[]{0x1001800140500102L,0x0020000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_simpleSelectorSequence3091 = new BitSet(new long[]{0x1001800140100100L,0x0020000000000000L});
	public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence3094 = new BitSet(new long[]{0x1001800140500102L,0x0020000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence3104 = new BitSet(new long[]{0x1001800140500102L,0x0020000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_simpleSelectorSequence3114 = new BitSet(new long[]{0x1001800140100100L,0x0020000000000000L});
	public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence3117 = new BitSet(new long[]{0x1001800140500102L,0x0020000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_namespacePrefix_in_typeSelector3206 = new BitSet(new long[]{0x0008080000000000L,0x0000000000000004L,0x0000000000000004L});
	public static final BitSet FOLLOW_elementName_in_typeSelector3210 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespacePrefixName_in_namespacePrefix3225 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_STAR_in_namespacePrefix3229 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_PIPE_in_namespacePrefix3233 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_extend_only_selector_in_elementSubsequent3265 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_selector_interpolation_in_elementSubsequent3279 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cssId_in_elementSubsequent3289 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cssClass_in_elementSubsequent3298 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_slAttribute_in_elementSubsequent3310 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pseudo_in_elementSubsequent3322 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_in_cssId3346 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_SYMBOL_in_cssId3366 = new BitSet(new long[]{0x0000000000000100L,0x0000000000040000L});
	public static final BitSet FOLLOW_NAME_in_cssId3382 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_selector_interpolation_in_cssId3402 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_cssClass3453 = new BitSet(new long[]{0x0008080000000100L,0x0000000000000008L});
	public static final BitSet FOLLOW_IDENT_in_cssClass3477 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_IMPORT_TYPE_in_cssClass3493 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_cssClass3509 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_selector_interpolation_in_cssClass3527 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACKET_in_slAttribute3594 = new BitSet(new long[]{0x0008000000400000L,0x0000000400100000L,0x0000000000080004L});
	public static final BitSet FOLLOW_namespacePrefix_in_slAttribute3601 = new BitSet(new long[]{0x0008000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_slAttribute3604 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_slAttributeName_in_slAttribute3615 = new BitSet(new long[]{0x0040000820C00400L,0x0000008010100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_slAttribute3617 = new BitSet(new long[]{0x0040000820800400L,0x0000008010000000L});
	public static final BitSet FOLLOW_set_in_slAttribute3651 = new BitSet(new long[]{0x0008000000400000L,0x0000000000100000L,0x0000000000080008L});
	public static final BitSet FOLLOW_ws_in_slAttribute3831 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_slAttributeValue_in_slAttribute3850 = new BitSet(new long[]{0x0000000000400000L,0x0000008000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_slAttribute3868 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RBRACKET_in_slAttribute3893 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_slAttributeName3909 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_pseudo3981 = new BitSet(new long[]{0x0008080000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_set_in_pseudo4044 = new BitSet(new long[]{0x0000000000400002L,0x0000000000100200L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_pseudo4101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_LPAREN_in_pseudo4104 = new BitSet(new long[]{0xE0298B448148F8C0L,0xF7DDBF0B82183811L,0x00000000000C4FECL});
	public static final BitSet FOLLOW_ws_in_pseudo4106 = new BitSet(new long[]{0xE0298B448108F8C0L,0xF7DDBF0B82083811L,0x0000000000044FECL});
	public static final BitSet FOLLOW_expression_in_pseudo4112 = new BitSet(new long[]{0x0000000000400000L,0x0000200000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_pseudo4114 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_STAR_in_pseudo4120 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_RPAREN_in_pseudo4125 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_pseudo4204 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100200L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_pseudo4206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_LPAREN_in_pseudo4209 = new BitSet(new long[]{0x1009880140500100L,0x0020200400100004L,0x0000000000080004L});
	public static final BitSet FOLLOW_ws_in_pseudo4211 = new BitSet(new long[]{0x1009880140100100L,0x0020200400000004L,0x0000000000000004L});
	public static final BitSet FOLLOW_simpleSelectorSequence_in_pseudo4214 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_RPAREN_in_pseudo4217 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STAR_in_propertyDeclaration4255 = new BitSet(new long[]{0xE02989010108F880L,0xF7DD9C0080083800L,0x0000000000040F80L});
	public static final BitSet FOLLOW_property_in_propertyDeclaration4258 = new BitSet(new long[]{0x0000000000500000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration4260 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COLON_in_propertyDeclaration4263 = new BitSet(new long[]{0xE0298B448148F8C0L,0xF7DD9F0B82183811L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration4265 = new BitSet(new long[]{0xE0298B448108F8C0L,0xF7DD9F0B82083811L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_propertyValue_in_propertyDeclaration4268 = new BitSet(new long[]{0x0010000000400002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration4271 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_prio_in_propertyDeclaration4274 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STAR_in_propertyDeclaration4286 = new BitSet(new long[]{0xE02989010108F880L,0xF7DD9C0080083800L,0x0000000000040F80L});
	public static final BitSet FOLLOW_property_in_propertyDeclaration4289 = new BitSet(new long[]{0x0000000000500000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration4291 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COLON_in_propertyDeclaration4294 = new BitSet(new long[]{0xE0398B448148F8C0L,0xF7DD9F0B83183A11L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration4296 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B83083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_propertyValue_in_propertyDeclaration4299 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_list_in_cp_propertyValue4333 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyValue_in_cp_propertyValue4341 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_propertyValue4363 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_expressionPredicate4432 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_syncTo_SEMI4533 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_prio4578 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_term_in_expression4595 = new BitSet(new long[]{0xE0298B448168F8C2L,0xF7DD9F0B82183811L,0x00000000000C4FEAL});
	public static final BitSet FOLLOW_ws_in_expression4627 = new BitSet(new long[]{0xE0298B448108F8C0L,0xF7DD9F0B82083811L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_ws_in_expression4632 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_operator_in_expression4635 = new BitSet(new long[]{0xE0298B448148F8C0L,0xF7DD9F0B82183811L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_expression4637 = new BitSet(new long[]{0xE0298B448108F8C0L,0xF7DD9F0B82083811L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_term_in_expression4646 = new BitSet(new long[]{0xE0298B448168F8C2L,0xF7DD9F0B82183811L,0x00000000000C4FEAL});
	public static final BitSet FOLLOW_unaryOperator_in_term4671 = new BitSet(new long[]{0xE0298B448148F8C0L,0xF7DD9F0382182811L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_term4673 = new BitSet(new long[]{0xE0298B448108F8C0L,0xF7DD9F0382082811L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_function_in_term4702 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_term4715 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NUMBER_in_term4727 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PERCENTAGE_in_term4739 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LENGTH_in_term4751 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EMS_in_term4763 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REM_in_term4775 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXS_in_term4787 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ANGLE_in_term4799 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIME_in_term4811 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FREQ_in_term4823 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RESOLUTION_in_term4835 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DIMENSION_in_term4847 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_in_term4864 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TILDE_in_term4876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_term4878 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_JS_STRING_in_term4899 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_term4914 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_URI_in_term4926 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_hexColor_in_term4938 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_term4952 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_term4966 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_term_symbol_in_term4980 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PERCENTAGE_SYMBOL_in_cp_term_symbol5007 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionName_in_function5023 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100200L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_function5025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_LPAREN_in_function5030 = new BitSet(new long[]{0xE0398B448148F8C0L,0xF7DDBF0B83183A11L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_function5032 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DDBF0B83083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_fnAttributes_in_function5059 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_RPAREN_in_function5090 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_functionName5142 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COLON_in_functionName5144 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_functionName5148 = new BitSet(new long[]{0x0000000100000002L});
	public static final BitSet FOLLOW_DOT_in_functionName5151 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_functionName5153 = new BitSet(new long[]{0x0000000100000002L});
	public static final BitSet FOLLOW_fnAttribute_in_fnAttributes5177 = new BitSet(new long[]{0x0000000000600002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_fnAttributes5180 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_COMMA_in_fnAttributes5183 = new BitSet(new long[]{0xE0398B448148F8C0L,0xF7DD9F0B83183A11L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_fnAttributes5185 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B83083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_fnAttribute_in_fnAttributes5188 = new BitSet(new long[]{0x0000000000600002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_fnAttributes5192 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fnAttributeName_in_fnAttribute5229 = new BitSet(new long[]{0x0000000000500000L,0x0000000010100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_fnAttribute5231 = new BitSet(new long[]{0x0000000000100000L,0x0000000010000000L});
	public static final BitSet FOLLOW_set_in_fnAttribute5234 = new BitSet(new long[]{0xE0398B448148F8C0L,0xF7DD9F0B82183A11L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_fnAttribute5240 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B82083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_fnAttributeValue_in_fnAttribute5243 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_in_fnAttribute5257 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_fnAttribute5269 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_fnAttributeName5292 = new BitSet(new long[]{0x0000000100000002L});
	public static final BitSet FOLLOW_DOT_in_fnAttributeName5295 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_fnAttributeName5297 = new BitSet(new long[]{0x0000000100000002L});
	public static final BitSet FOLLOW_cp_variable_in_fnAttributeName5317 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_term_in_fnAttributeValue5340 = new BitSet(new long[]{0xE0298B448148F8C2L,0xF7DD9F0B82183811L,0x00000000000C4FEAL});
	public static final BitSet FOLLOW_ws_in_fnAttributeValue5372 = new BitSet(new long[]{0xE0298B448108F8C0L,0xF7DD9F0B82083811L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_ws_in_fnAttributeValue5377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_SOLIDUS_in_fnAttributeValue5380 = new BitSet(new long[]{0xE0298B448148F8C0L,0xF7DD9F0B82183811L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_fnAttributeValue5382 = new BitSet(new long[]{0xE0298B448108F8C0L,0xF7DD9F0B82083811L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_term_in_fnAttributeValue5391 = new BitSet(new long[]{0xE0298B448148F8C2L,0xF7DD9F0B82183811L,0x00000000000C4FEAL});
	public static final BitSet FOLLOW_cp_math_expression_in_fnAttributeValue5412 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_in_hexColor5426 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration5486 = new BitSet(new long[]{0x0000000000500000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration5488 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COLON_in_cp_variable_declaration5491 = new BitSet(new long[]{0xE0398B448148F8C0L,0xF7DD9F0B83183A11L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration5493 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B83083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration5496 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration5518 = new BitSet(new long[]{0x0000000000500000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration5520 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COLON_in_cp_variable_declaration5523 = new BitSet(new long[]{0xE0398B448148F8C0L,0xF7DD9F0B83183A11L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration5525 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B83083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration5528 = new BitSet(new long[]{0x0000000000400002L,0x0002000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration5531 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_SASS_DEFAULT_in_cp_variable_declaration5534 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_cp_variable5573 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_VAR_in_cp_variable5754 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_in_cp_expression_list5778 = new BitSet(new long[]{0x0000000000600002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_expression_list5797 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_COMMA_in_cp_expression_list5800 = new BitSet(new long[]{0xE0398B448148F8C0L,0xF7DD9F0B83183A11L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_cp_expression_list5802 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B83083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_expression_in_cp_expression_list5805 = new BitSet(new long[]{0x0000000000600002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression5838 = new BitSet(new long[]{0xE039BB448D48F8E2L,0xF7DD9F0BA3183A33L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_cp_expression5862 = new BitSet(new long[]{0x000030000C000020L,0x0000000020000022L});
	public static final BitSet FOLLOW_cp_expression_operator_in_cp_expression5865 = new BitSet(new long[]{0xE0398B448148F8C0L,0xF7DD9F0B83183A11L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_cp_expression5867 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B83083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression5871 = new BitSet(new long[]{0xE039BB448D48F8E2L,0xF7DD9F0BA3183A33L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_cp_expression5890 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B83083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression5893 = new BitSet(new long[]{0xE039BB448D48F8E2L,0xF7DD9F0BA3183A33L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_NOT_in_cp_expression_atom5975 = new BitSet(new long[]{0xE0398B448148F8C0L,0xF7DD9F0B82183A11L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_cp_expression_atom5977 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B82083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_math_expression_in_cp_expression_atom6008 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_cp_expression_atom6024 = new BitSet(new long[]{0xE0398B448148F8C0L,0xF7DDBF0B83183A11L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_cp_expression_atom6026 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DDBF0B83083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_expression_list_in_cp_expression_atom6030 = new BitSet(new long[]{0x0000000000400000L,0x0000200000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_expression_atom6032 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_expression_atom6037 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expressions6069 = new BitSet(new long[]{0x0000000000400002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_math_expressions6076 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B82083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expressions6078 = new BitSet(new long[]{0x0000000000400002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_cp_math_expression_atom_in_cp_math_expression6112 = new BitSet(new long[]{0x0000000000400002L,0x0000000800101000L,0x0000000000080006L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression6154 = new BitSet(new long[]{0x0000000000000000L,0x0000000800001000L,0x0000000000000006L});
	public static final BitSet FOLLOW_set_in_cp_math_expression6157 = new BitSet(new long[]{0xE0398B448148F8C0L,0xF7DD9F0B82183A11L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression6167 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B82083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_math_expression_atom_in_cp_math_expression6170 = new BitSet(new long[]{0x0000000000400002L,0x0000000800101000L,0x0000000000080006L});
	public static final BitSet FOLLOW_term_in_cp_math_expression_atom6203 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_cp_math_expression_atom6211 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unaryOperator_in_cp_math_expression_atom6222 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100200L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression_atom6224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_LPAREN_in_cp_math_expression_atom6230 = new BitSet(new long[]{0xE0398B448148F8C0L,0xF7DD9F0B82183A11L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression_atom6232 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B82083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expression_atom6235 = new BitSet(new long[]{0x0000000000400000L,0x0000200000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression_atom6237 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_math_expression_atom6240 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_cp_mixin_declaration6279 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration6281 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100200L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration6286 = new BitSet(new long[]{0xE02001000348F880L,0xF7DDBC0080182840L,0x00000000000C0F80L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6288 = new BitSet(new long[]{0xE02001000308F880L,0xF7DDBC0080082840L,0x0000000000040F80L});
	public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration6291 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration6294 = new BitSet(new long[]{0x0800000000400000L,0x0000000000100080L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_less_mixin_guarded_in_cp_mixin_declaration6300 = new BitSet(new long[]{0x0800000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_SASS_MIXIN_in_cp_mixin_declaration6324 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6326 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration6328 = new BitSet(new long[]{0x0800000000400000L,0x0000000000100200L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration6334 = new BitSet(new long[]{0xE02001000348F880L,0xF7DDBC0080182840L,0x00000000000C0F80L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6336 = new BitSet(new long[]{0xE02001000308F880L,0xF7DDBC0080082840L,0x0000000000040F80L});
	public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration6339 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration6342 = new BitSet(new long[]{0x0800000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration6356 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_cp_mixin_block_in_cp_mixin_declaration6359 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_cp_mixin_call6394 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call6396 = new BitSet(new long[]{0x0000000000400002L,0x0000000000100200L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call6399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_LPAREN_in_cp_mixin_call6402 = new BitSet(new long[]{0xE0398B448148F8C0L,0xF7DDBF0B83183A11L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call6404 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DDBF0B83083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_mixin_call_args_in_cp_mixin_call6407 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_mixin_call6410 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_INCLUDE_in_cp_mixin_call6434 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call6436 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call6438 = new BitSet(new long[]{0x0800000000400002L,0x0000000000100200L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call6441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_LPAREN_in_cp_mixin_call6444 = new BitSet(new long[]{0xE0398B448148F8C0L,0xF7DDBF0B83183A11L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call6446 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DDBF0B83083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_mixin_call_args_in_cp_mixin_call6449 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_mixin_call6452 = new BitSet(new long[]{0x0800000000400002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call6457 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_cp_mixin_block_in_cp_mixin_call6460 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACE_in_cp_mixin_block6489 = new BitSet(new long[]{0xF02999014178F980L,0xF7FD9CCC80183804L,0x00000000000C0FA5L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_block6491 = new BitSet(new long[]{0xF02999014138F980L,0xF7FD9CCC80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_syncToFollow_in_cp_mixin_block6494 = new BitSet(new long[]{0xF02999014138F980L,0xF7FD9CCC80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_declarations_in_cp_mixin_block6504 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_RBRACE_in_cp_mixin_block6511 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_cp_mixin_name6532 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6563 = new BitSet(new long[]{0x0000000002200002L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_set_in_cp_mixin_call_args6567 = new BitSet(new long[]{0xE0398B448148F8C0L,0xF7DD9F0B83183A11L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_args6575 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B83083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6578 = new BitSet(new long[]{0x0000000002200002L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_CP_DOTS_in_cp_mixin_call_args6584 = new BitSet(new long[]{0x0000000000400002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_args6586 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_cp_mixin_call_arg6620 = new BitSet(new long[]{0x0000000000500000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6622 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COLON_in_cp_mixin_call_arg6625 = new BitSet(new long[]{0xE0398B448148F8C0L,0xF7DD9F0B83183A11L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6627 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B83083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg6630 = new BitSet(new long[]{0x0000000000400002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg6642 = new BitSet(new long[]{0x0000000000400002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6650 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_arg_in_cp_args_list6697 = new BitSet(new long[]{0x0000000002200002L,0x0000000000000040L,0x0000000000000001L});
	public static final BitSet FOLLOW_set_in_cp_args_list6701 = new BitSet(new long[]{0xE02001000148F880L,0xF7DD9C0080182800L,0x00000000000C0F80L});
	public static final BitSet FOLLOW_ws_in_cp_args_list6711 = new BitSet(new long[]{0xE02001000108F880L,0xF7DD9C0080082800L,0x0000000000040F80L});
	public static final BitSet FOLLOW_cp_arg_in_cp_args_list6714 = new BitSet(new long[]{0x0000000002200002L,0x0000000000000040L,0x0000000000000001L});
	public static final BitSet FOLLOW_set_in_cp_args_list6721 = new BitSet(new long[]{0x0000000002400002L,0x0000000000100040L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_args_list6729 = new BitSet(new long[]{0x0000000002000002L,0x0000000000000040L});
	public static final BitSet FOLLOW_set_in_cp_args_list6737 = new BitSet(new long[]{0x0000000000400002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_args_list6745 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_cp_args_list6762 = new BitSet(new long[]{0x0000000000400002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_args_list6770 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_cp_arg6793 = new BitSet(new long[]{0x0000000000500002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_arg6795 = new BitSet(new long[]{0x0000000000100002L});
	public static final BitSet FOLLOW_COLON_in_cp_arg6800 = new BitSet(new long[]{0xE0398B448148F8C0L,0xF7DD9F0B83183A11L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_cp_arg6802 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B83083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_expression_in_cp_arg6805 = new BitSet(new long[]{0x0000000000400002L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_cp_arg6807 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_WHEN_in_less_mixin_guarded6833 = new BitSet(new long[]{0x0000000000400000L,0x0000000001100200L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_less_mixin_guarded6835 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000200L});
	public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded6838 = new BitSet(new long[]{0x0000000000600022L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_less_mixin_guarded6841 = new BitSet(new long[]{0x0000000000200020L});
	public static final BitSet FOLLOW_set_in_less_mixin_guarded6844 = new BitSet(new long[]{0x0000000000400000L,0x0000000001100200L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_less_mixin_guarded6852 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000200L});
	public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded6855 = new BitSet(new long[]{0x0000000000600022L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_NOT_in_less_condition6881 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100200L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_less_condition6883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_LPAREN_in_less_condition6892 = new BitSet(new long[]{0xE02801000148F880L,0xF7DD9C0080182800L,0x00000000000C0F80L});
	public static final BitSet FOLLOW_ws_in_less_condition6894 = new BitSet(new long[]{0xE02801000108F880L,0xF7DD9C0080082800L,0x0000000000040F80L});
	public static final BitSet FOLLOW_cp_variable_in_less_condition6921 = new BitSet(new long[]{0x0000300000400000L,0x0000200010100022L,0x0000000000080000L});
	public static final BitSet FOLLOW_less_function_in_condition_in_less_condition6925 = new BitSet(new long[]{0x0000300000400000L,0x0000200010100022L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_less_condition6928 = new BitSet(new long[]{0x0000300000000000L,0x0000200010000022L});
	public static final BitSet FOLLOW_less_condition_operator_in_less_condition6932 = new BitSet(new long[]{0xE0398B448148F8C0L,0xF7DD9F0B82183A11L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_less_condition6934 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B82083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_math_expression_in_less_condition6937 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_RPAREN_in_less_condition6955 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_fn_name_in_less_function_in_condition6977 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100200L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_less_function_in_condition6979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_LPAREN_in_less_function_in_condition6982 = new BitSet(new long[]{0xE02001000148F880L,0xF7DD9C0080182800L,0x00000000000C0F80L});
	public static final BitSet FOLLOW_ws_in_less_function_in_condition6984 = new BitSet(new long[]{0xE02001000108F880L,0xF7DD9C0080082800L,0x0000000000040F80L});
	public static final BitSet FOLLOW_cp_variable_in_less_function_in_condition6987 = new BitSet(new long[]{0x0000000000400000L,0x0000200000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_less_function_in_condition6989 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_RPAREN_in_less_function_in_condition6992 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_less_fn_name7014 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_SIGN_in_less_selector_interpolation7072 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_less_selector_interpolation7074 = new BitSet(new long[]{0x0008000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_less_selector_interpolation7076 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_less_selector_interpolation7079 = new BitSet(new long[]{0x0000000000400000L,0x0000004000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_less_selector_interpolation7081 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_RBRACE_in_less_selector_interpolation7084 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7132 = new BitSet(new long[]{0x1009900100700002L,0x0000008000101004L,0x0000000000080004L});
	public static final BitSet FOLLOW_set_in_sass_selector_interpolation_expression7160 = new BitSet(new long[]{0x1009900100700002L,0x0000008000101004L,0x0000000000080004L});
	public static final BitSet FOLLOW_ws_in_sass_selector_interpolation_expression7241 = new BitSet(new long[]{0x1009900100300000L,0x0000008000001004L,0x0000000000000004L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression7278 = new BitSet(new long[]{0x1009900100700002L,0x0000008000101004L,0x0000000000080004L});
	public static final BitSet FOLLOW_set_in_sass_selector_interpolation_expression7314 = new BitSet(new long[]{0x1009900100700002L,0x0000008000101004L,0x0000000000080004L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7429 = new BitSet(new long[]{0x0009800100400002L,0x0000000000101000L,0x0000000000080000L});
	public static final BitSet FOLLOW_set_in_sass_declaration_interpolation_expression7457 = new BitSet(new long[]{0x0009800100400002L,0x0000000000101000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_declaration_interpolation_expression7509 = new BitSet(new long[]{0x0009800100000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7546 = new BitSet(new long[]{0x0009800100400002L,0x0000000000101000L,0x0000000000080000L});
	public static final BitSet FOLLOW_set_in_sass_declaration_interpolation_expression7582 = new BitSet(new long[]{0x0009800100400002L,0x0000000000101000L,0x0000000000080000L});
	public static final BitSet FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var7651 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_sass_interpolation_expression_var7653 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B83083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_expression_in_sass_interpolation_expression_var7655 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_RBRACE_in_sass_interpolation_expression_var7657 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_property_in_sass_nested_properties7697 = new BitSet(new long[]{0x0000000000500000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_nested_properties7699 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COLON_in_sass_nested_properties7702 = new BitSet(new long[]{0xE8298B448148F8C0L,0xF7DD9F0B82183811L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_sass_nested_properties7704 = new BitSet(new long[]{0xE8298B448108F8C0L,0xF7DD9F0B82083811L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_propertyValue_in_sass_nested_properties7708 = new BitSet(new long[]{0x0800000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_nested_properties7710 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_sass_nested_properties7715 = new BitSet(new long[]{0xF02999014178F980L,0xF7FD9CCC80183804L,0x00000000000C0FA5L});
	public static final BitSet FOLLOW_ws_in_sass_nested_properties7717 = new BitSet(new long[]{0xF02999014138F980L,0xF7FD9CCC80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_syncToFollow_in_sass_nested_properties7720 = new BitSet(new long[]{0xF02999014138F980L,0xF7FD9CCC80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_declarations_in_sass_nested_properties7722 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_RBRACE_in_sass_nested_properties7725 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_EXTEND_in_sass_extend7746 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_extend7748 = new BitSet(new long[]{0x1009880140100100L,0x0020000400000004L,0x0000000000000004L});
	public static final BitSet FOLLOW_simpleSelectorSequence_in_sass_extend7750 = new BitSet(new long[]{0x0000000000400002L,0x0800000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_extend7753 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_SASS_OPTIONAL_in_sass_extend7756 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector7779 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_sass_debug7800 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_debug7810 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B83083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_expression_in_sass_debug7812 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_if_in_sass_control7833 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_for_in_sass_control7837 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_each_in_sass_control7841 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_while_in_sass_control7845 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_IF_in_sass_if7866 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_if7868 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B83083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_sass_control_expression_in_sass_if7870 = new BitSet(new long[]{0x0800000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_if7872 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_if7875 = new BitSet(new long[]{0x0000000000400002L,0x0008000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_if7878 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_sass_else_in_sass_if7881 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_ELSE_in_sass_else7904 = new BitSet(new long[]{0x0800000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_else7906 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_else7909 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_ELSE_in_sass_else7921 = new BitSet(new long[]{0x0008000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_else7923 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_else7928 = new BitSet(new long[]{0xE0398B448148F8C0L,0xF7DD9F0B83183A11L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_sass_else7932 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B83083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_sass_control_expression_in_sass_else7935 = new BitSet(new long[]{0x0800000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_else7937 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_else7940 = new BitSet(new long[]{0x0000000000400002L,0x0008000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_else7943 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_sass_else_in_sass_else7946 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_in_sass_control_expression7969 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_FOR_in_sass_for7990 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_for7992 = new BitSet(new long[]{0xE02001000108F880L,0xF7DD9C0080082800L,0x0000000000040F80L});
	public static final BitSet FOLLOW_cp_variable_in_sass_for7994 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_for7996 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_for8000 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_for8004 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B82083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_math_expression_in_sass_for8006 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_for8008 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_for8012 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_for8016 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B82083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_math_expression_in_sass_for8018 = new BitSet(new long[]{0x0800000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_for8020 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_for8023 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_EACH_in_sass_each8044 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_each8046 = new BitSet(new long[]{0xE02001000108F880L,0xF7DD9C0080082800L,0x0000000000040F80L});
	public static final BitSet FOLLOW_cp_variable_in_sass_each8048 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_each8050 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_each8054 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_each8058 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B83083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_expression_list_in_sass_each8060 = new BitSet(new long[]{0x0800000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_each8062 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_each8065 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_WHILE_in_sass_while8086 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_while8088 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B83083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_sass_control_expression_in_sass_while8090 = new BitSet(new long[]{0x0800000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_while8092 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_while8095 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACE_in_sass_control_block8116 = new BitSet(new long[]{0xF02999014178F980L,0xF7FD9CCC80183804L,0x00000000000C0FA5L});
	public static final BitSet FOLLOW_ws_in_sass_control_block8118 = new BitSet(new long[]{0xF02999014138F980L,0xF7FD9CCC80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_declarations_in_sass_control_block8121 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_RBRACE_in_sass_control_block8124 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_FUNCTION_in_sass_function_declaration8166 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_function_declaration8168 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_sass_function_name_in_sass_function_declaration8170 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100200L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_function_declaration8172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_LPAREN_in_sass_function_declaration8175 = new BitSet(new long[]{0xE02001000308F880L,0xF7DDBC0080082840L,0x0000000000040F80L});
	public static final BitSet FOLLOW_cp_args_list_in_sass_function_declaration8177 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_RPAREN_in_sass_function_declaration8180 = new BitSet(new long[]{0x0800000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_function_declaration8182 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_sass_function_declaration8185 = new BitSet(new long[]{0xF02999014178F980L,0xF7FD9CCC80183804L,0x00000000000C0FA5L});
	public static final BitSet FOLLOW_ws_in_sass_function_declaration8187 = new BitSet(new long[]{0xF02999014138F980L,0xF7FD9CCC80083804L,0x0000000000040FA5L});
	public static final BitSet FOLLOW_declarations_in_sass_function_declaration8190 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_RBRACE_in_sass_function_declaration8193 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_sass_function_name8214 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_RETURN_in_sass_function_return8235 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_sass_function_return8237 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B83083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_expression_in_sass_function_return8239 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_CONTENT_in_sass_content8260 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred1_Css3356 = new BitSet(new long[]{0xE02909000108F880L,0xF7DD9C0089082A00L,0x0000000000040F80L});
	public static final BitSet FOLLOW_mediaQueryList_in_synpred1_Css3359 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred2_Css3420 = new BitSet(new long[]{0xE02909000108F880L,0xF7DD9C0089082A00L,0x0000000000040F80L});
	public static final BitSet FOLLOW_mediaQueryList_in_synpred2_Css3423 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred3_Css3474 = new BitSet(new long[]{0xE02909000108F880L,0xF7DD9C0089082A00L,0x0000000000040F80L});
	public static final BitSet FOLLOW_mediaQueryList_in_synpred3_Css3477 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred4_Css3596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_SEMI_in_synpred4_Css3599 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_MIXIN_in_synpred5_Css3670 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred5_Css3675 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred5_Css3677 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100200L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_synpred5_Css3679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_LPAREN_in_synpred5_Css3682 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
	public static final BitSet FOLLOW_RPAREN_in_synpred5_Css3690 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFEL});
	public static final BitSet FOLLOW_LBRACE_in_synpred5_Css3700 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred6_Css3718 = new BitSet(new long[]{0x0010000000400000L,0x0000000000100000L,0x0000000000080001L});
	public static final BitSet FOLLOW_ws_in_synpred6_Css3721 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_synpred6_Css3724 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000080001L});
	public static final BitSet FOLLOW_ws_in_synpred6_Css3728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_SEMI_in_synpred6_Css3731 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred7_Css3754 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COLON_in_synpred8_Css3789 = new BitSet(new long[]{0xF7FFFFFFFFFFFFF0L,0xFFFFFFBFFFFFFFFFL,0x00000000007FFFFEL});
	public static final BitSet FOLLOW_SEMI_in_synpred8_Css3801 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_declaration_interpolation_expression_in_synpred9_Css3814 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COLON_in_synpred9_Css3816 = new BitSet(new long[]{0xF7FFFFFFFFFFFFF0L,0xFFFFFFBFFFFFFFFFL,0x00000000007FFFFEL});
	public static final BitSet FOLLOW_SEMI_in_synpred9_Css3828 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred10_Css3946 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_COMMA_in_synpred10_Css3949 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred11_Css31245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_SEMI_in_synpred11_Css31248 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_MIXIN_in_synpred12_Css31323 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred12_Css31328 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred12_Css31330 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100200L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_synpred12_Css31332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_LPAREN_in_synpred12_Css31335 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
	public static final BitSet FOLLOW_RPAREN_in_synpred12_Css31343 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFBFFFFFFFFFL,0x00000000007FFFFEL});
	public static final BitSet FOLLOW_LBRACE_in_synpred12_Css31355 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred13_Css31381 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000080001L});
	public static final BitSet FOLLOW_ws_in_synpred13_Css31383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_SEMI_in_synpred13_Css31386 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred14_Css31405 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_SYMBOL_in_synpred15_Css32419 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_synpred15_Css32421 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred16_Css32555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_SEMI_in_synpred16_Css32558 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_declaration_in_synpred17_Css32629 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_nested_properties_in_synpred18_Css32641 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_synpred19_Css32653 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_property_in_synpred20_Css32670 = new BitSet(new long[]{0x0000000000500000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_synpred20_Css32672 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COLON_in_synpred20_Css32675 = new BitSet(new long[]{0xF7FFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
	public static final BitSet FOLLOW_set_in_synpred20_Css32687 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_MIXIN_in_synpred21_Css32704 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred21_Css32709 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred21_Css32711 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100200L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_synpred21_Css32713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_LPAREN_in_synpred21_Css32716 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x00000000007FFFFFL});
	public static final BitSet FOLLOW_RPAREN_in_synpred21_Css32724 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFBFFFFFFFFFL,0x00000000007FFFFEL});
	public static final BitSet FOLLOW_LBRACE_in_synpred21_Css32736 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred22_Css32754 = new BitSet(new long[]{0x0010000000400000L,0x0000000000100000L,0x0000000000080001L});
	public static final BitSet FOLLOW_ws_in_synpred22_Css32757 = new BitSet(new long[]{0x0010000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_synpred22_Css32760 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100000L,0x0000000000080001L});
	public static final BitSet FOLLOW_ws_in_synpred22_Css32764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_SEMI_in_synpred22_Css32767 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred23_Css32790 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectorsGroup_in_synpred24_Css32813 = new BitSet(new long[]{0x0800000000400000L,0x0000000000100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_synpred24_Css32815 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_synpred24_Css32818 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_SYMBOL_in_synpred25_Css32956 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_synpred25_Css32958 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred26_Css33085 = new BitSet(new long[]{0x1001800140100000L,0x0020000000000000L});
	public static final BitSet FOLLOW_esPred_in_synpred26_Css33088 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred27_Css33108 = new BitSet(new long[]{0x1001800140100000L,0x0020000000000000L});
	public static final BitSet FOLLOW_esPred_in_synpred27_Css33111 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PIPE_in_synpred28_Css33203 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred29_Css34602 = new BitSet(new long[]{0xE0298B448108F8C0L,0xF7DD9F0B82083811L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_ws_in_synpred29_Css34607 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_operator_in_synpred29_Css34610 = new BitSet(new long[]{0xE0298B448148F8C0L,0xF7DD9F0B82183811L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_synpred29_Css34612 = new BitSet(new long[]{0xE0298B448108F8C0L,0xF7DD9F0B82083811L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_term_in_synpred29_Css34621 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionName_in_synpred30_Css34694 = new BitSet(new long[]{0x0000000000400000L,0x0000000000100200L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_synpred30_Css34696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_LPAREN_in_synpred30_Css34699 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fnAttributeName_in_synpred31_Css35216 = new BitSet(new long[]{0x0000000000500000L,0x0000000010100000L,0x0000000000080000L});
	public static final BitSet FOLLOW_ws_in_synpred31_Css35218 = new BitSet(new long[]{0x0000000000100000L,0x0000000010000000L});
	public static final BitSet FOLLOW_set_in_synpred31_Css35221 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred32_Css35347 = new BitSet(new long[]{0xE0298B448108F8C0L,0xF7DD9F0B82083811L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_ws_in_synpred32_Css35352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_SOLIDUS_in_synpred32_Css35355 = new BitSet(new long[]{0xE0298B448148F8C0L,0xF7DD9F0B82183811L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_synpred32_Css35357 = new BitSet(new long[]{0xE0298B448108F8C0L,0xF7DD9F0B82083811L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_term_in_synpred32_Css35366 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred33_Css35786 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_COMMA_in_synpred33_Css35789 = new BitSet(new long[]{0xE0398B448148F8C0L,0xF7DD9F0B83183A11L,0x00000000000C4FE8L});
	public static final BitSet FOLLOW_ws_in_synpred33_Css35791 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B83083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_expression_in_synpred33_Css35794 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred34_Css35855 = new BitSet(new long[]{0x000030000C000020L,0x0000000020000022L});
	public static final BitSet FOLLOW_cp_expression_operator_in_synpred34_Css35858 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred35_Css35884 = new BitSet(new long[]{0xE0398B448108F8C0L,0xF7DD9F0B83083A11L,0x0000000000044FE8L});
	public static final BitSet FOLLOW_cp_expression_atom_in_synpred35_Css35887 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_math_expression_in_synpred36_Css36005 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred37_Css36138 = new BitSet(new long[]{0x0000000000000000L,0x0000000800001000L,0x0000000000000006L});
	public static final BitSet FOLLOW_set_in_synpred37_Css36141 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred38_Css37129 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred39_Css37275 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred40_Css37426 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred41_Css37543 = new BitSet(new long[]{0x0000000000000002L});
}
