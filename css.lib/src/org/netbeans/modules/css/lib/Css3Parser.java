// $ANTLR 3.3 Nov 30, 2010 12:50:56 /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g 2013-06-19 10:05:57

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2011 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2011 Sun Microsystems, Inc.
 */
package org.netbeans.modules.css.lib;
    


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.debug.*;
import java.io.IOException;
public class Css3Parser extends DebugParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NAMESPACE_SYM", "SEMI", "IDENT", "STRING", "URI", "CHARSET_SYM", "IMPORT_SYM", "COMMA", "MEDIA_SYM", "LBRACE", "RBRACE", "AND", "ONLY", "NOT", "GEN", "LPAREN", "RPAREN", "COLON", "AT_IDENT", "WS", "MOZ_DOCUMENT_SYM", "MOZ_URL_PREFIX", "MOZ_DOMAIN", "MOZ_REGEXP", "WEBKIT_KEYFRAMES_SYM", "PERCENTAGE", "PAGE_SYM", "COUNTER_STYLE_SYM", "FONT_FACE_SYM", "TOPLEFTCORNER_SYM", "TOPLEFT_SYM", "TOPCENTER_SYM", "TOPRIGHT_SYM", "TOPRIGHTCORNER_SYM", "BOTTOMLEFTCORNER_SYM", "BOTTOMLEFT_SYM", "BOTTOMCENTER_SYM", "BOTTOMRIGHT_SYM", "BOTTOMRIGHTCORNER_SYM", "LEFTTOP_SYM", "LEFTMIDDLE_SYM", "LEFTBOTTOM_SYM", "RIGHTTOP_SYM", "RIGHTMIDDLE_SYM", "RIGHTBOTTOM_SYM", "SOLIDUS", "MINUS", "PLUS", "GREATER", "TILDE", "HASH_SYMBOL", "HASH", "DOT", "LBRACKET", "DCOLON", "SASS_EXTEND_ONLY_SELECTOR", "STAR", "PIPE", "NAME", "LESS_AND", "OPEQ", "INCLUDES", "DASHMATCH", "BEGINS", "ENDS", "CONTAINS", "RBRACKET", "SASS_VAR", "IMPORTANT_SYM", "NUMBER", "LENGTH", "EMS", "REM", "EXS", "ANGLE", "TIME", "FREQ", "RESOLUTION", "DIMENSION", "NL", "COMMENT", "SASS_DEFAULT", "OR", "CP_EQ", "CP_NOT_EQ", "LESS", "LESS_OR_EQ", "GREATER_OR_EQ", "SASS_MIXIN", "SASS_INCLUDE", "CP_DOTS", "LESS_REST", "LESS_WHEN", "SASS_EXTEND", "SASS_OPTIONAL", "SASS_DEBUG", "SASS_WARN", "SASS_IF", "SASS_ELSE", "SASS_FOR", "SASS_EACH", "SASS_WHILE", "SASS_FUNCTION", "SASS_RETURN", "SASS_CONTENT", "HEXCHAR", "NONASCII", "UNICODE", "ESCAPE", "NMSTART", "NMCHAR", "URL", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "CDO", "CDC", "INVALID", "LINE_COMMENT"
    };
    public static final int EOF=-1;
    public static final int NAMESPACE_SYM=4;
    public static final int SEMI=5;
    public static final int IDENT=6;
    public static final int STRING=7;
    public static final int URI=8;
    public static final int CHARSET_SYM=9;
    public static final int IMPORT_SYM=10;
    public static final int COMMA=11;
    public static final int MEDIA_SYM=12;
    public static final int LBRACE=13;
    public static final int RBRACE=14;
    public static final int AND=15;
    public static final int ONLY=16;
    public static final int NOT=17;
    public static final int GEN=18;
    public static final int LPAREN=19;
    public static final int RPAREN=20;
    public static final int COLON=21;
    public static final int AT_IDENT=22;
    public static final int WS=23;
    public static final int MOZ_DOCUMENT_SYM=24;
    public static final int MOZ_URL_PREFIX=25;
    public static final int MOZ_DOMAIN=26;
    public static final int MOZ_REGEXP=27;
    public static final int WEBKIT_KEYFRAMES_SYM=28;
    public static final int PERCENTAGE=29;
    public static final int PAGE_SYM=30;
    public static final int COUNTER_STYLE_SYM=31;
    public static final int FONT_FACE_SYM=32;
    public static final int TOPLEFTCORNER_SYM=33;
    public static final int TOPLEFT_SYM=34;
    public static final int TOPCENTER_SYM=35;
    public static final int TOPRIGHT_SYM=36;
    public static final int TOPRIGHTCORNER_SYM=37;
    public static final int BOTTOMLEFTCORNER_SYM=38;
    public static final int BOTTOMLEFT_SYM=39;
    public static final int BOTTOMCENTER_SYM=40;
    public static final int BOTTOMRIGHT_SYM=41;
    public static final int BOTTOMRIGHTCORNER_SYM=42;
    public static final int LEFTTOP_SYM=43;
    public static final int LEFTMIDDLE_SYM=44;
    public static final int LEFTBOTTOM_SYM=45;
    public static final int RIGHTTOP_SYM=46;
    public static final int RIGHTMIDDLE_SYM=47;
    public static final int RIGHTBOTTOM_SYM=48;
    public static final int SOLIDUS=49;
    public static final int MINUS=50;
    public static final int PLUS=51;
    public static final int GREATER=52;
    public static final int TILDE=53;
    public static final int HASH_SYMBOL=54;
    public static final int HASH=55;
    public static final int DOT=56;
    public static final int LBRACKET=57;
    public static final int DCOLON=58;
    public static final int SASS_EXTEND_ONLY_SELECTOR=59;
    public static final int STAR=60;
    public static final int PIPE=61;
    public static final int NAME=62;
    public static final int LESS_AND=63;
    public static final int OPEQ=64;
    public static final int INCLUDES=65;
    public static final int DASHMATCH=66;
    public static final int BEGINS=67;
    public static final int ENDS=68;
    public static final int CONTAINS=69;
    public static final int RBRACKET=70;
    public static final int SASS_VAR=71;
    public static final int IMPORTANT_SYM=72;
    public static final int NUMBER=73;
    public static final int LENGTH=74;
    public static final int EMS=75;
    public static final int REM=76;
    public static final int EXS=77;
    public static final int ANGLE=78;
    public static final int TIME=79;
    public static final int FREQ=80;
    public static final int RESOLUTION=81;
    public static final int DIMENSION=82;
    public static final int NL=83;
    public static final int COMMENT=84;
    public static final int SASS_DEFAULT=85;
    public static final int OR=86;
    public static final int CP_EQ=87;
    public static final int CP_NOT_EQ=88;
    public static final int LESS=89;
    public static final int LESS_OR_EQ=90;
    public static final int GREATER_OR_EQ=91;
    public static final int SASS_MIXIN=92;
    public static final int SASS_INCLUDE=93;
    public static final int CP_DOTS=94;
    public static final int LESS_REST=95;
    public static final int LESS_WHEN=96;
    public static final int SASS_EXTEND=97;
    public static final int SASS_OPTIONAL=98;
    public static final int SASS_DEBUG=99;
    public static final int SASS_WARN=100;
    public static final int SASS_IF=101;
    public static final int SASS_ELSE=102;
    public static final int SASS_FOR=103;
    public static final int SASS_EACH=104;
    public static final int SASS_WHILE=105;
    public static final int SASS_FUNCTION=106;
    public static final int SASS_RETURN=107;
    public static final int SASS_CONTENT=108;
    public static final int HEXCHAR=109;
    public static final int NONASCII=110;
    public static final int UNICODE=111;
    public static final int ESCAPE=112;
    public static final int NMSTART=113;
    public static final int NMCHAR=114;
    public static final int URL=115;
    public static final int A=116;
    public static final int B=117;
    public static final int C=118;
    public static final int D=119;
    public static final int E=120;
    public static final int F=121;
    public static final int G=122;
    public static final int H=123;
    public static final int I=124;
    public static final int J=125;
    public static final int K=126;
    public static final int L=127;
    public static final int M=128;
    public static final int N=129;
    public static final int O=130;
    public static final int P=131;
    public static final int Q=132;
    public static final int R=133;
    public static final int S=134;
    public static final int T=135;
    public static final int U=136;
    public static final int V=137;
    public static final int W=138;
    public static final int X=139;
    public static final int Y=140;
    public static final int Z=141;
    public static final int CDO=142;
    public static final int CDC=143;
    public static final int INVALID=144;
    public static final int LINE_COMMENT=145;

    // delegates
    // delegators

    public static final String[] ruleNames = new String[] {
        "invalidRule", "mediaType", "synpred28_Css3", "declaration", "unaryOperator", 
        "mediaBodyItem", "synpred34_Css3", "at_rule", "sass_debug", "charSet", 
        "term", "cp_expression_atom", "styleSheet", "cp_propertyValue", 
        "synpred7_Css3", "sass_content", "synpred31_Css3", "synpred23_Css3", 
        "mediaFeature", "cp_math_expression", "less_function_in_condition", 
        "synpred24_Css3", "sass_function_name", "sass_declaration_interpolation_expression", 
        "cssId", "selector", "pseudo", "rule", "sass_function_return", "selectorsGroup", 
        "namespaces", "synpred22_Css3", "pseudoPage", "synpred21_Css3", 
        "expression", "synpred20_Css3", "synpred16_Css3", "operator", "synpred18_Css3", 
        "sass_interpolation_expression_var", "sass_control", "synpred33_Css3", 
        "syncToDeclarationsRule", "margin_sym", "function", "sass_extend_only_selector", 
        "cp_expression", "less_condition", "synpred8_Css3", "sass_nested_properties", 
        "synpred19_Css3", "synpred4_Css3", "synpred1_Css3", "mediaBody", 
        "cp_variable_declaration", "mediaQueryOperator", "counterStyle", 
        "synpred27_Css3", "sass_each", "mediaQuery", "less_fn_name", "resourceIdentifier", 
        "expressionPredicate", "ws", "cp_math_expression_atom", "sass_function_declaration", 
        "sass_extend", "vendorAtRule", "hexColor", "sass_control_block", 
        "sass_control_expression", "mediaExpression", "namespacePrefixName", 
        "moz_document_function", "imports", "body", "synpred11_Css3", "cp_expression_list", 
        "cp_expression_operator", "synpred2_Css3", "slAttributeValue", "syncTo_RBRACE", 
        "synpred13_Css3", "declarations", "elementSubsequent", "sass_for", 
        "syncTo_SEMI", "cp_mixin_block", "slAttributeName", "atRuleId", 
        "cp_mixin_name", "synpred36_Css3", "mediaFeatureValue", "page", 
        "generic_at_rule", "namespace", "propertyValue", "cp_mixin_call", 
        "esPred", "prio", "webkitKeyframes", "charSetValue", "webkitKeyframeSelectors", 
        "cp_math_expressions", "propertyDeclaration", "synpred15_Css3", 
        "syncToFollow", "sass_while", "synpred32_Css3", "slAttribute", "sass_if", 
        "synpred3_Css3", "sass_else", "synpred6_Css3", "synpred29_Css3", 
        "webkitKeyframesBlock", "fnAttributes", "cp_variable", "sass_selector_interpolation_expression", 
        "synpred12_Css3", "functionName", "typeSelector", "cssClass", "margin", 
        "less_mixin_guarded", "importItem", "cp_mixin_declaration", "property", 
        "combinator", "mediaQueryList", "synpred17_Css3", "cp_mixin_call_arg", 
        "fnAttributeValue", "synpred30_Css3", "synpred35_Css3", "cp_mixin_call_args", 
        "synpred14_Css3", "less_condition_operator", "synpred26_Css3", "synpred9_Css3", 
        "elementName", "synpred5_Css3", "cp_args_list", "fnAttribute", "bodyItem", 
        "media", "namespacePrefix", "fontFace", "simpleSelectorSequence", 
        "moz_document", "synpred25_Css3", "fnAttributeName", "synpred10_Css3", 
        "cp_arg"
    };
    public static final boolean[] decisionCanBacktrack = new boolean[] {
        false, // invalid decision
        false, false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            true, false, false, false, false, false, true, false, false, 
            false, false, false, false, true, false, false, false, true, 
            false, false, true, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, true, false, false, false, true, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, true, false, false, false, false, false, true, false, 
            false, false, true, false, false, false, true, false, false, 
            false, false, false, true, false, true, false, true, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, true, false, false, true, false, false, false, 
            false, false, false, false, false, false, false, false, true, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            true, false, false, false, true, false, false, false, false, 
            true, false, false, false, true, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, true, false, true, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false, false, false, false, 
            false, false, false, false, false, false
    };

     
        public int ruleLevel = 0;
        public int getRuleLevel() { return ruleLevel; }
        public void incRuleLevel() { ruleLevel++; }
        public void decRuleLevel() { ruleLevel--; }
        public Css3Parser(TokenStream input) {
            this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT, new RecognizerSharedState());
        }
        public Css3Parser(TokenStream input, int port, RecognizerSharedState state) {
            super(input, state);
            DebugEventSocketProxy proxy =
                new DebugEventSocketProxy(this, port, null);
            setDebugListener(proxy);
            try {
                proxy.handshake();
            }
            catch (IOException ioe) {
                reportError(ioe);
            }
        }
    public Css3Parser(TokenStream input, DebugEventListener dbg) {
        super(input, dbg, new RecognizerSharedState());

    }
    protected boolean evalPredicate(boolean result, String predicate) {
        dbg.semanticPredicate(result, predicate);
        return result;
    }


    public String[] getTokenNames() { return Css3Parser.tokenNames; }
    public String getGrammarFileName() { return "/Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g"; }



        protected boolean isLessSource() {
            return false;
        }
        
        protected boolean isScssSource() {
            return false;
        }
        
        private boolean isCssPreprocessorSource() {
            return isLessSource() || isScssSource();
        }

        private boolean tokenNameEquals(String tokenImage) {
            return tokenImage.equalsIgnoreCase(input.LT(1).getText());
        }

    /**
         * Use the current stacked followset to work out the valid tokens that
         * can follow on from the current point in the parse, then recover by
         * eating tokens that are not a member of the follow set we compute.
         *
         * This method is used whenever we wish to force a sync, even though
         * the parser has not yet checked LA(1) for alt selection. This is useful
         * in situations where only a subset of tokens can begin a new construct
         * (such as the start of a new statement in a block) and we want to
         * proactively detect garbage so that the current rule does not exit on
         * on an exception.
         *
         * We could override recover() to make this the default behavior but that
         * is too much like using a sledge hammer to crack a nut. We want finer
         * grained control of the recovery and error mechanisms.
         */
        protected void syncToSet()
        {
            // Compute the followset that is in context wherever we are in the
            // rule chain/stack
            //
             BitSet follow = state.following[state._fsp]; //computeContextSensitiveRuleFOLLOW();

             syncToSet(follow);
        }

        protected void syncToSet(BitSet follow)
        {
            int mark = -1;

            //create error-recovery node
            dbg.enterRule(getGrammarFileName(), "recovery");

            try {

                mark = input.mark();

                // Consume all tokens in the stream until we find a member of the follow
                // set, which means the next production should be guaranteed to be happy.
                //
                while (! follow.member(input.LA(1)) ) {

                    if  (input.LA(1) == Token.EOF) {

                        // Looks like we didn't find anything at all that can help us here
                        // so we need to rewind to where we were and let normal error handling
                        // bail out.
                        //
                        input.rewind();
                        mark = -1;
                        return;
                    }
                    input.consume();

                    // Now here, because you are consuming some tokens, yu will probably want
                    // to raise an error message such as "Spurious elements after the class member were discarded"
                    // using whatever your override of displayRecognitionError() routine does to record
                    // error messages. The exact error my depend on context etc.
                    //
                }
            } catch (Exception e) {

              // Just ignore any errors here, we will just let the recognizer
              // try to resync as normal - something must be very screwed.
              //
            }
            finally {
                dbg.exitRule(getGrammarFileName(), "recovery");

                // Always release the mark we took
                //
                if  (mark != -1) {
                    input.release(mark);
                }
            }
        }
        
        /**
             * synces to next RBRACE "}" taking nesting into account
             */
            protected void syncToRBRACE(int nest)
                {
                    
                    int mark = -1;
                    //create error-recovery node
                    //dbg.enterRule(getGrammarFileName(), "recovery");

                    try {
                        mark = input.mark();
                        for(;;) {
                            //read char
                            int c = input.LA(1);
                            
                            switch(c) {
                                case Token.EOF:
                                    input.rewind();
                                    mark = -1;
                                    return ;
                                case Css3Lexer.LBRACE:
                                    nest++;
                                    break;
                                case Css3Lexer.RBRACE:
                                    nest--;
                                    if(nest == 0) {
                                        //do not eat the final RBRACE
                                        return ;
                                    }
                            }
                            
                            input.consume();
                                                
                        }

                    } catch (Exception e) {

                      // Just ignore any errors here, we will just let the recognizer
                      // try to resync as normal - something must be very screwed.
                      //
                    }
                    finally {
                        if  (mark != -1) {
                            input.release(mark);
                        }
                        //dbg.exitRule(getGrammarFileName(), "recovery");
                    }
                }
        



    // $ANTLR start "styleSheet"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:321:1: styleSheet : ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF ;
    public final void styleSheet() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "styleSheet");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(321, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:322:5: ( ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:6: ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF
            {
            dbg.location(323,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:6: ( ws )?
            int alt1=2;
            try { dbg.enterSubRule(1);
            try { dbg.enterDecision(1, decisionCanBacktrack[1]);

            int LA1_0 = input.LA(1);

            if ( (LA1_0==WS||(LA1_0>=NL && LA1_0<=COMMENT)) ) {
                alt1=1;
            }
            } finally {dbg.exitDecision(1);}

            switch (alt1) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:323:6: ws
                    {
                    dbg.location(323,6);
                    pushFollow(FOLLOW_ws_in_styleSheet125);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(1);}

            dbg.location(324,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:6: ( charSet ( ws )? )?
            int alt3=2;
            try { dbg.enterSubRule(3);
            try { dbg.enterDecision(3, decisionCanBacktrack[3]);

            int LA3_0 = input.LA(1);

            if ( (LA3_0==CHARSET_SYM) ) {
                alt3=1;
            }
            } finally {dbg.exitDecision(3);}

            switch (alt3) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:8: charSet ( ws )?
                    {
                    dbg.location(324,8);
                    pushFollow(FOLLOW_charSet_in_styleSheet135);
                    charSet();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(324,16);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:16: ( ws )?
                    int alt2=2;
                    try { dbg.enterSubRule(2);
                    try { dbg.enterDecision(2, decisionCanBacktrack[2]);

                    int LA2_0 = input.LA(1);

                    if ( (LA2_0==WS||(LA2_0>=NL && LA2_0<=COMMENT)) ) {
                        alt2=1;
                    }
                    } finally {dbg.exitDecision(2);}

                    switch (alt2) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:324:16: ws
                            {
                            dbg.location(324,16);
                            pushFollow(FOLLOW_ws_in_styleSheet137);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(2);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(3);}

            dbg.location(325,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:9: ( imports )?
            int alt4=2;
            try { dbg.enterSubRule(4);
            try { dbg.enterDecision(4, decisionCanBacktrack[4]);

            try {
                isCyclicDecision = true;
                alt4 = dfa4.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(4);}

            switch (alt4) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:325:9: imports
                    {
                    dbg.location(325,9);
                    pushFollow(FOLLOW_imports_in_styleSheet151);
                    imports();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(4);}

            dbg.location(326,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:326:9: ( namespaces )?
            int alt5=2;
            try { dbg.enterSubRule(5);
            try { dbg.enterDecision(5, decisionCanBacktrack[5]);

            int LA5_0 = input.LA(1);

            if ( (LA5_0==NAMESPACE_SYM) ) {
                alt5=1;
            }
            } finally {dbg.exitDecision(5);}

            switch (alt5) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:326:9: namespaces
                    {
                    dbg.location(326,9);
                    pushFollow(FOLLOW_namespaces_in_styleSheet162);
                    namespaces();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(5);}

            dbg.location(327,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:9: ( body )?
            int alt6=2;
            try { dbg.enterSubRule(6);
            try { dbg.enterDecision(6, decisionCanBacktrack[6]);

            int LA6_0 = input.LA(1);

            if ( ((LA6_0>=SEMI && LA6_0<=IDENT)||(LA6_0>=IMPORT_SYM && LA6_0<=MEDIA_SYM)||LA6_0==GEN||(LA6_0>=COLON && LA6_0<=AT_IDENT)||LA6_0==MOZ_DOCUMENT_SYM||LA6_0==WEBKIT_KEYFRAMES_SYM||(LA6_0>=PAGE_SYM && LA6_0<=FONT_FACE_SYM)||LA6_0==MINUS||LA6_0==GREATER||(LA6_0>=HASH_SYMBOL && LA6_0<=PIPE)||LA6_0==LESS_AND||LA6_0==SASS_VAR||(LA6_0>=SASS_MIXIN && LA6_0<=SASS_INCLUDE)||(LA6_0>=SASS_DEBUG && LA6_0<=SASS_IF)||(LA6_0>=SASS_FOR && LA6_0<=SASS_FUNCTION)) ) {
                alt6=1;
            }
            } finally {dbg.exitDecision(6);}

            switch (alt6) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:327:9: body
                    {
                    dbg.location(327,9);
                    pushFollow(FOLLOW_body_in_styleSheet174);
                    body();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(6);}

            dbg.location(328,6);
            match(input,EOF,FOLLOW_EOF_in_styleSheet182); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(329, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "styleSheet");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "styleSheet"


    // $ANTLR start "namespaces"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:331:1: namespaces : ( namespace ( ws )? )+ ;
    public final void namespaces() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespaces");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(331, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:332:2: ( ( namespace ( ws )? )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:2: ( namespace ( ws )? )+
            {
            dbg.location(333,2);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:2: ( namespace ( ws )? )+
            int cnt8=0;
            try { dbg.enterSubRule(8);

            loop8:
            do {
                int alt8=2;
                try { dbg.enterDecision(8, decisionCanBacktrack[8]);

                int LA8_0 = input.LA(1);

                if ( (LA8_0==NAMESPACE_SYM) ) {
                    alt8=1;
                }


                } finally {dbg.exitDecision(8);}

                switch (alt8) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:4: namespace ( ws )?
            	    {
            	    dbg.location(333,4);
            	    pushFollow(FOLLOW_namespace_in_namespaces199);
            	    namespace();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(333,14);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:14: ( ws )?
            	    int alt7=2;
            	    try { dbg.enterSubRule(7);
            	    try { dbg.enterDecision(7, decisionCanBacktrack[7]);

            	    int LA7_0 = input.LA(1);

            	    if ( (LA7_0==WS||(LA7_0>=NL && LA7_0<=COMMENT)) ) {
            	        alt7=1;
            	    }
            	    } finally {dbg.exitDecision(7);}

            	    switch (alt7) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:333:14: ws
            	            {
            	            dbg.location(333,14);
            	            pushFollow(FOLLOW_ws_in_namespaces201);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(7);}


            	    }
            	    break;

            	default :
            	    if ( cnt8 >= 1 ) break loop8;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(8, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt8++;
            } while (true);
            } finally {dbg.exitSubRule(8);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(334, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespaces");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespaces"


    // $ANTLR start "namespace"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:336:1: namespace : NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI ;
    public final void namespace() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespace");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(336, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:3: ( NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:5: NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI
            {
            dbg.location(337,5);
            match(input,NAMESPACE_SYM,FOLLOW_NAMESPACE_SYM_in_namespace217); if (state.failed) return ;
            dbg.location(337,19);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:19: ( ws )?
            int alt9=2;
            try { dbg.enterSubRule(9);
            try { dbg.enterDecision(9, decisionCanBacktrack[9]);

            int LA9_0 = input.LA(1);

            if ( (LA9_0==WS||(LA9_0>=NL && LA9_0<=COMMENT)) ) {
                alt9=1;
            }
            } finally {dbg.exitDecision(9);}

            switch (alt9) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:19: ws
                    {
                    dbg.location(337,19);
                    pushFollow(FOLLOW_ws_in_namespace219);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(9);}

            dbg.location(337,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:23: ( namespacePrefixName ( ws )? )?
            int alt11=2;
            try { dbg.enterSubRule(11);
            try { dbg.enterDecision(11, decisionCanBacktrack[11]);

            int LA11_0 = input.LA(1);

            if ( (LA11_0==IDENT) ) {
                alt11=1;
            }
            } finally {dbg.exitDecision(11);}

            switch (alt11) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:24: namespacePrefixName ( ws )?
                    {
                    dbg.location(337,24);
                    pushFollow(FOLLOW_namespacePrefixName_in_namespace223);
                    namespacePrefixName();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(337,44);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:44: ( ws )?
                    int alt10=2;
                    try { dbg.enterSubRule(10);
                    try { dbg.enterDecision(10, decisionCanBacktrack[10]);

                    int LA10_0 = input.LA(1);

                    if ( (LA10_0==WS||(LA10_0>=NL && LA10_0<=COMMENT)) ) {
                        alt10=1;
                    }
                    } finally {dbg.exitDecision(10);}

                    switch (alt10) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:44: ws
                            {
                            dbg.location(337,44);
                            pushFollow(FOLLOW_ws_in_namespace225);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(10);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(11);}

            dbg.location(337,50);
            pushFollow(FOLLOW_resourceIdentifier_in_namespace230);
            resourceIdentifier();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(337,69);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:69: ( ws )?
            int alt12=2;
            try { dbg.enterSubRule(12);
            try { dbg.enterDecision(12, decisionCanBacktrack[12]);

            int LA12_0 = input.LA(1);

            if ( (LA12_0==WS||(LA12_0>=NL && LA12_0<=COMMENT)) ) {
                alt12=1;
            }
            } finally {dbg.exitDecision(12);}

            switch (alt12) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:337:69: ws
                    {
                    dbg.location(337,69);
                    pushFollow(FOLLOW_ws_in_namespace232);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(12);}

            dbg.location(337,73);
            match(input,SEMI,FOLLOW_SEMI_in_namespace235); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(338, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespace");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespace"


    // $ANTLR start "namespacePrefixName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:340:1: namespacePrefixName : IDENT ;
    public final void namespacePrefixName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespacePrefixName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(340, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:341:3: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:341:5: IDENT
            {
            dbg.location(341,5);
            match(input,IDENT,FOLLOW_IDENT_in_namespacePrefixName248); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(342, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespacePrefixName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespacePrefixName"


    // $ANTLR start "resourceIdentifier"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:344:1: resourceIdentifier : ( STRING | URI );
    public final void resourceIdentifier() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "resourceIdentifier");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(344, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:345:3: ( STRING | URI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(345,3);
            if ( (input.LA(1)>=STRING && input.LA(1)<=URI) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(346, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "resourceIdentifier");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "resourceIdentifier"


    // $ANTLR start "charSet"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:348:1: charSet : CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI ;
    public final void charSet() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "charSet");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(348, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:5: ( CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:9: CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI
            {
            dbg.location(349,9);
            match(input,CHARSET_SYM,FOLLOW_CHARSET_SYM_in_charSet286); if (state.failed) return ;
            dbg.location(349,21);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:21: ( ws )?
            int alt13=2;
            try { dbg.enterSubRule(13);
            try { dbg.enterDecision(13, decisionCanBacktrack[13]);

            int LA13_0 = input.LA(1);

            if ( (LA13_0==WS||(LA13_0>=NL && LA13_0<=COMMENT)) ) {
                alt13=1;
            }
            } finally {dbg.exitDecision(13);}

            switch (alt13) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:21: ws
                    {
                    dbg.location(349,21);
                    pushFollow(FOLLOW_ws_in_charSet288);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(13);}

            dbg.location(349,25);
            pushFollow(FOLLOW_charSetValue_in_charSet291);
            charSetValue();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(349,38);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:38: ( ws )?
            int alt14=2;
            try { dbg.enterSubRule(14);
            try { dbg.enterDecision(14, decisionCanBacktrack[14]);

            int LA14_0 = input.LA(1);

            if ( (LA14_0==WS||(LA14_0>=NL && LA14_0<=COMMENT)) ) {
                alt14=1;
            }
            } finally {dbg.exitDecision(14);}

            switch (alt14) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:349:38: ws
                    {
                    dbg.location(349,38);
                    pushFollow(FOLLOW_ws_in_charSet293);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(14);}

            dbg.location(349,42);
            match(input,SEMI,FOLLOW_SEMI_in_charSet296); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(350, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "charSet");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "charSet"


    // $ANTLR start "charSetValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:352:1: charSetValue : STRING ;
    public final void charSetValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "charSetValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(352, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:353:2: ( STRING )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:353:4: STRING
            {
            dbg.location(353,4);
            match(input,STRING,FOLLOW_STRING_in_charSetValue310); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(354, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "charSetValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "charSetValue"


    // $ANTLR start "imports"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:356:1: imports : ( importItem ( ws )? SEMI ( ws )? )+ ;
    public final void imports() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "imports");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(356, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:357:2: ( ( importItem ( ws )? SEMI ( ws )? )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:2: ( importItem ( ws )? SEMI ( ws )? )+
            {
            dbg.location(358,2);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:2: ( importItem ( ws )? SEMI ( ws )? )+
            int cnt17=0;
            try { dbg.enterSubRule(17);

            loop17:
            do {
                int alt17=2;
                try { dbg.enterDecision(17, decisionCanBacktrack[17]);

                try {
                    isCyclicDecision = true;
                    alt17 = dfa17.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(17);}

                switch (alt17) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:4: importItem ( ws )? SEMI ( ws )?
            	    {
            	    dbg.location(358,4);
            	    pushFollow(FOLLOW_importItem_in_imports324);
            	    importItem();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(358,15);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:15: ( ws )?
            	    int alt15=2;
            	    try { dbg.enterSubRule(15);
            	    try { dbg.enterDecision(15, decisionCanBacktrack[15]);

            	    int LA15_0 = input.LA(1);

            	    if ( (LA15_0==WS||(LA15_0>=NL && LA15_0<=COMMENT)) ) {
            	        alt15=1;
            	    }
            	    } finally {dbg.exitDecision(15);}

            	    switch (alt15) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:15: ws
            	            {
            	            dbg.location(358,15);
            	            pushFollow(FOLLOW_ws_in_imports326);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(15);}

            	    dbg.location(358,19);
            	    match(input,SEMI,FOLLOW_SEMI_in_imports329); if (state.failed) return ;
            	    dbg.location(358,24);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:24: ( ws )?
            	    int alt16=2;
            	    try { dbg.enterSubRule(16);
            	    try { dbg.enterDecision(16, decisionCanBacktrack[16]);

            	    int LA16_0 = input.LA(1);

            	    if ( (LA16_0==WS||(LA16_0>=NL && LA16_0<=COMMENT)) ) {
            	        alt16=1;
            	    }
            	    } finally {dbg.exitDecision(16);}

            	    switch (alt16) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:358:24: ws
            	            {
            	            dbg.location(358,24);
            	            pushFollow(FOLLOW_ws_in_imports331);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(16);}


            	    }
            	    break;

            	default :
            	    if ( cnt17 >= 1 ) break loop17;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(17, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt17++;
            } while (true);
            } finally {dbg.exitSubRule(17);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(359, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "imports");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "imports"


    // $ANTLR start "importItem"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:361:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? );
    public final void importItem() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "importItem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(361, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:362:5: ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? )
            int alt27=2;
            try { dbg.enterDecision(27, decisionCanBacktrack[27]);

            try {
                isCyclicDecision = true;
                alt27 = dfa27.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(27);}

            switch (alt27) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:9: IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    {
                    dbg.location(363,9);
                    match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem361); if (state.failed) return ;
                    dbg.location(363,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:20: ( ws )?
                    int alt18=2;
                    try { dbg.enterSubRule(18);
                    try { dbg.enterDecision(18, decisionCanBacktrack[18]);

                    int LA18_0 = input.LA(1);

                    if ( (LA18_0==WS||(LA18_0>=NL && LA18_0<=COMMENT)) ) {
                        alt18=1;
                    }
                    } finally {dbg.exitDecision(18);}

                    switch (alt18) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:20: ws
                            {
                            dbg.location(363,20);
                            pushFollow(FOLLOW_ws_in_importItem363);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(18);}

                    dbg.location(363,24);
                    pushFollow(FOLLOW_resourceIdentifier_in_importItem366);
                    resourceIdentifier();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(363,43);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:43: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    int alt20=2;
                    try { dbg.enterSubRule(20);
                    try { dbg.enterDecision(20, decisionCanBacktrack[20]);

                    try {
                        isCyclicDecision = true;
                        alt20 = dfa20.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(20);}

                    switch (alt20) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:44: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
                            {
                            dbg.location(363,66);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:66: ( ws )?
                            int alt19=2;
                            try { dbg.enterSubRule(19);
                            try { dbg.enterDecision(19, decisionCanBacktrack[19]);

                            int LA19_0 = input.LA(1);

                            if ( (LA19_0==WS||(LA19_0>=NL && LA19_0<=COMMENT)) ) {
                                alt19=1;
                            }
                            } finally {dbg.exitDecision(19);}

                            switch (alt19) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:66: ws
                                    {
                                    dbg.location(363,66);
                                    pushFollow(FOLLOW_ws_in_importItem376);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(19);}

                            dbg.location(363,70);
                            pushFollow(FOLLOW_mediaQueryList_in_importItem379);
                            mediaQueryList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(20);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:9: {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    {
                    dbg.location(366,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "importItem", "isScssSource()");
                    }
                    dbg.location(366,27);
                    match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem412); if (state.failed) return ;
                    dbg.location(366,38);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:38: ( ws )?
                    int alt21=2;
                    try { dbg.enterSubRule(21);
                    try { dbg.enterDecision(21, decisionCanBacktrack[21]);

                    int LA21_0 = input.LA(1);

                    if ( (LA21_0==WS||(LA21_0>=NL && LA21_0<=COMMENT)) ) {
                        alt21=1;
                    }
                    } finally {dbg.exitDecision(21);}

                    switch (alt21) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:38: ws
                            {
                            dbg.location(366,38);
                            pushFollow(FOLLOW_ws_in_importItem414);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(21);}

                    dbg.location(366,42);
                    pushFollow(FOLLOW_resourceIdentifier_in_importItem417);
                    resourceIdentifier();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(366,61);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:61: ( ( ws )? COMMA ( ws )? resourceIdentifier )*
                    try { dbg.enterSubRule(24);

                    loop24:
                    do {
                        int alt24=2;
                        try { dbg.enterDecision(24, decisionCanBacktrack[24]);

                        try {
                            isCyclicDecision = true;
                            alt24 = dfa24.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(24);}

                        switch (alt24) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:62: ( ws )? COMMA ( ws )? resourceIdentifier
                    	    {
                    	    dbg.location(366,62);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:62: ( ws )?
                    	    int alt22=2;
                    	    try { dbg.enterSubRule(22);
                    	    try { dbg.enterDecision(22, decisionCanBacktrack[22]);

                    	    int LA22_0 = input.LA(1);

                    	    if ( (LA22_0==WS||(LA22_0>=NL && LA22_0<=COMMENT)) ) {
                    	        alt22=1;
                    	    }
                    	    } finally {dbg.exitDecision(22);}

                    	    switch (alt22) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:62: ws
                    	            {
                    	            dbg.location(366,62);
                    	            pushFollow(FOLLOW_ws_in_importItem420);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(22);}

                    	    dbg.location(366,66);
                    	    match(input,COMMA,FOLLOW_COMMA_in_importItem423); if (state.failed) return ;
                    	    dbg.location(366,72);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:72: ( ws )?
                    	    int alt23=2;
                    	    try { dbg.enterSubRule(23);
                    	    try { dbg.enterDecision(23, decisionCanBacktrack[23]);

                    	    int LA23_0 = input.LA(1);

                    	    if ( (LA23_0==WS||(LA23_0>=NL && LA23_0<=COMMENT)) ) {
                    	        alt23=1;
                    	    }
                    	    } finally {dbg.exitDecision(23);}

                    	    switch (alt23) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:72: ws
                    	            {
                    	            dbg.location(366,72);
                    	            pushFollow(FOLLOW_ws_in_importItem425);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(23);}

                    	    dbg.location(366,76);
                    	    pushFollow(FOLLOW_resourceIdentifier_in_importItem428);
                    	    resourceIdentifier();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop24;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(24);}

                    dbg.location(366,97);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:97: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
                    int alt26=2;
                    try { dbg.enterSubRule(26);
                    try { dbg.enterDecision(26, decisionCanBacktrack[26]);

                    try {
                        isCyclicDecision = true;
                        alt26 = dfa26.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(26);}

                    switch (alt26) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:98: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
                            {
                            dbg.location(366,120);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:120: ( ws )?
                            int alt25=2;
                            try { dbg.enterSubRule(25);
                            try { dbg.enterDecision(25, decisionCanBacktrack[25]);

                            int LA25_0 = input.LA(1);

                            if ( (LA25_0==WS||(LA25_0>=NL && LA25_0<=COMMENT)) ) {
                                alt25=1;
                            }
                            } finally {dbg.exitDecision(25);}

                            switch (alt25) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:120: ws
                                    {
                                    dbg.location(366,120);
                                    pushFollow(FOLLOW_ws_in_importItem440);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(25);}

                            dbg.location(366,124);
                            pushFollow(FOLLOW_mediaQueryList_in_importItem443);
                            mediaQueryList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(26);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(367, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "importItem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "importItem"


    // $ANTLR start "media"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:368:1: media : MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE ;
    public final void media() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "media");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(368, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:5: ( MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:7: MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE
            {
            dbg.location(369,7);
            match(input,MEDIA_SYM,FOLLOW_MEDIA_SYM_in_media461); if (state.failed) return ;
            dbg.location(369,17);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:17: ( ws )?
            int alt28=2;
            try { dbg.enterSubRule(28);
            try { dbg.enterDecision(28, decisionCanBacktrack[28]);

            int LA28_0 = input.LA(1);

            if ( (LA28_0==WS||(LA28_0>=NL && LA28_0<=COMMENT)) ) {
                alt28=1;
            }
            } finally {dbg.exitDecision(28);}

            switch (alt28) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:369:17: ws
                    {
                    dbg.location(369,17);
                    pushFollow(FOLLOW_ws_in_media463);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(28);}

            dbg.location(370,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:370:5: ( mediaQueryList )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:371:10: mediaQueryList
            {
            dbg.location(371,10);
            pushFollow(FOLLOW_mediaQueryList_in_media482);
            mediaQueryList();

            state._fsp--;
            if (state.failed) return ;

            }

            dbg.location(372,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:7: ( ws )?
            int alt29=2;
            try { dbg.enterSubRule(29);
            try { dbg.enterDecision(29, decisionCanBacktrack[29]);

            int LA29_0 = input.LA(1);

            if ( (LA29_0==WS||(LA29_0>=NL && LA29_0<=COMMENT)) ) {
                alt29=1;
            }
            } finally {dbg.exitDecision(29);}

            switch (alt29) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:372:7: ws
                    {
                    dbg.location(372,7);
                    pushFollow(FOLLOW_ws_in_media490);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(29);}

            dbg.location(373,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_media497); if (state.failed) return ;
            dbg.location(373,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:12: ( ws )?
            int alt30=2;
            try { dbg.enterSubRule(30);
            try { dbg.enterDecision(30, decisionCanBacktrack[30]);

            int LA30_0 = input.LA(1);

            if ( (LA30_0==WS||(LA30_0>=NL && LA30_0<=COMMENT)) ) {
                alt30=1;
            }
            } finally {dbg.exitDecision(30);}

            switch (alt30) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:373:12: ws
                    {
                    dbg.location(373,12);
                    pushFollow(FOLLOW_ws_in_media499);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(30);}

            dbg.location(373,16);
            pushFollow(FOLLOW_syncToFollow_in_media502);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(374,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:374:9: ( mediaBody )?
            int alt31=2;
            try { dbg.enterSubRule(31);
            try { dbg.enterDecision(31, decisionCanBacktrack[31]);

            int LA31_0 = input.LA(1);

            if ( ((LA31_0>=SEMI && LA31_0<=IDENT)||(LA31_0>=COMMA && LA31_0<=MEDIA_SYM)||LA31_0==GEN||(LA31_0>=COLON && LA31_0<=AT_IDENT)||LA31_0==MOZ_DOCUMENT_SYM||LA31_0==WEBKIT_KEYFRAMES_SYM||LA31_0==PAGE_SYM||LA31_0==FONT_FACE_SYM||LA31_0==MINUS||LA31_0==GREATER||(LA31_0>=HASH_SYMBOL && LA31_0<=PIPE)||LA31_0==LESS_AND||LA31_0==SASS_VAR||(LA31_0>=SASS_MIXIN && LA31_0<=SASS_INCLUDE)||LA31_0==SASS_EXTEND||(LA31_0>=SASS_DEBUG && LA31_0<=SASS_IF)||(LA31_0>=SASS_FOR && LA31_0<=SASS_WHILE)||LA31_0==SASS_CONTENT) ) {
                alt31=1;
            }
            } finally {dbg.exitDecision(31);}

            switch (alt31) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:374:9: mediaBody
                    {
                    dbg.location(374,9);
                    pushFollow(FOLLOW_mediaBody_in_media512);
                    mediaBody();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(31);}

            dbg.location(375,5);
            match(input,RBRACE,FOLLOW_RBRACE_in_media519); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(376, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "media");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "media"


    // $ANTLR start "mediaBody"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:378:1: mediaBody : ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
    public final void mediaBody() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaBody");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(378, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:379:5: ( ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:380:5: ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            {
            dbg.location(380,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:380:5: ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            int cnt36=0;
            try { dbg.enterSubRule(36);

            loop36:
            do {
                int alt36=3;
                try { dbg.enterDecision(36, decisionCanBacktrack[36]);

                int LA36_0 = input.LA(1);

                if ( (LA36_0==IDENT||(LA36_0>=COMMA && LA36_0<=MEDIA_SYM)||LA36_0==GEN||(LA36_0>=COLON && LA36_0<=AT_IDENT)||LA36_0==MOZ_DOCUMENT_SYM||LA36_0==WEBKIT_KEYFRAMES_SYM||LA36_0==PAGE_SYM||LA36_0==FONT_FACE_SYM||LA36_0==MINUS||LA36_0==GREATER||(LA36_0>=HASH_SYMBOL && LA36_0<=PIPE)||LA36_0==LESS_AND||LA36_0==SASS_VAR||(LA36_0>=SASS_MIXIN && LA36_0<=SASS_INCLUDE)||LA36_0==SASS_EXTEND||(LA36_0>=SASS_DEBUG && LA36_0<=SASS_IF)||(LA36_0>=SASS_FOR && LA36_0<=SASS_WHILE)||LA36_0==SASS_CONTENT) ) {
                    alt36=1;
                }
                else if ( (LA36_0==SEMI) ) {
                    alt36=2;
                }


                } finally {dbg.exitDecision(36);}

                switch (alt36) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:10: ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    {
            	    dbg.location(381,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:10: ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:12: mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
            	    {
            	    dbg.location(381,12);
            	    pushFollow(FOLLOW_mediaBodyItem_in_mediaBody557);
            	    mediaBodyItem();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(381,26);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:26: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
            	    int alt33=2;
            	    try { dbg.enterSubRule(33);
            	    try { dbg.enterDecision(33, decisionCanBacktrack[33]);

            	    try {
            	        isCyclicDecision = true;
            	        alt33 = dfa33.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(33);}

            	    switch (alt33) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:27: ( ( ws )? SEMI )=> ( ws )? SEMI
            	            {
            	            dbg.location(381,39);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:39: ( ws )?
            	            int alt32=2;
            	            try { dbg.enterSubRule(32);
            	            try { dbg.enterDecision(32, decisionCanBacktrack[32]);

            	            int LA32_0 = input.LA(1);

            	            if ( (LA32_0==WS||(LA32_0>=NL && LA32_0<=COMMENT)) ) {
            	                alt32=1;
            	            }
            	            } finally {dbg.exitDecision(32);}

            	            switch (alt32) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:39: ws
            	                    {
            	                    dbg.location(381,39);
            	                    pushFollow(FOLLOW_ws_in_mediaBody567);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(32);}

            	            dbg.location(381,43);
            	            match(input,SEMI,FOLLOW_SEMI_in_mediaBody570); if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(33);}

            	    dbg.location(381,50);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:50: ( ws )?
            	    int alt34=2;
            	    try { dbg.enterSubRule(34);
            	    try { dbg.enterDecision(34, decisionCanBacktrack[34]);

            	    int LA34_0 = input.LA(1);

            	    if ( (LA34_0==WS||(LA34_0>=NL && LA34_0<=COMMENT)) ) {
            	        alt34=1;
            	    }
            	    } finally {dbg.exitDecision(34);}

            	    switch (alt34) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:50: ws
            	            {
            	            dbg.location(381,50);
            	            pushFollow(FOLLOW_ws_in_mediaBody574);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(34);}


            	    }


            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:10: ( SEMI ( ws )? )
            	    {
            	    dbg.location(383,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:10: ( SEMI ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:12: SEMI ( ws )?
            	    {
            	    dbg.location(383,12);
            	    match(input,SEMI,FOLLOW_SEMI_in_mediaBody601); if (state.failed) return ;
            	    dbg.location(383,17);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:17: ( ws )?
            	    int alt35=2;
            	    try { dbg.enterSubRule(35);
            	    try { dbg.enterDecision(35, decisionCanBacktrack[35]);

            	    int LA35_0 = input.LA(1);

            	    if ( (LA35_0==WS||(LA35_0>=NL && LA35_0<=COMMENT)) ) {
            	        alt35=1;
            	    }
            	    } finally {dbg.exitDecision(35);}

            	    switch (alt35) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:383:17: ws
            	            {
            	            dbg.location(383,17);
            	            pushFollow(FOLLOW_ws_in_mediaBody603);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(35);}


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt36 >= 1 ) break loop36;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(36, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt36++;
            } while (true);
            } finally {dbg.exitSubRule(36);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(385, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaBody");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaBody"


    // $ANTLR start "mediaBodyItem"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:387:1: mediaBodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ LBRACE )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI | sass_declaration_interpolation_expression COLON )=> propertyDeclaration | {...}? sass_extend | {...}? sass_debug | {...}? sass_control | {...}? sass_content | rule | page | fontFace | vendorAtRule | media );
    public final void mediaBodyItem() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaBodyItem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(387, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:388:5: ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ LBRACE )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI | sass_declaration_interpolation_expression COLON )=> propertyDeclaration | {...}? sass_extend | {...}? sass_debug | {...}? sass_control | {...}? sass_content | rule | page | fontFace | vendorAtRule | media )
            int alt37=12;
            try { dbg.enterDecision(37, decisionCanBacktrack[37]);

            try {
                isCyclicDecision = true;
                alt37 = dfa37.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(37);}

            switch (alt37) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:5: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ LBRACE )* LBRACE ) )=> cp_mixin_declaration
                    {
                    dbg.location(389,80);
                    pushFollow(FOLLOW_cp_mixin_declaration_in_mediaBodyItem667);
                    cp_mixin_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:390:7: ( cp_mixin_call )=> cp_mixin_call
                    {
                    dbg.location(390,24);
                    pushFollow(FOLLOW_cp_mixin_call_in_mediaBodyItem680);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:6: ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI | sass_declaration_interpolation_expression COLON )=> propertyDeclaration
                    {
                    dbg.location(391,123);
                    pushFollow(FOLLOW_propertyDeclaration_in_mediaBodyItem723);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:392:7: {...}? sass_extend
                    {
                    dbg.location(392,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(392,25);
                    pushFollow(FOLLOW_sass_extend_in_mediaBodyItem733);
                    sass_extend();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:393:7: {...}? sass_debug
                    {
                    dbg.location(393,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(393,25);
                    pushFollow(FOLLOW_sass_debug_in_mediaBodyItem743);
                    sass_debug();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:394:7: {...}? sass_control
                    {
                    dbg.location(394,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(394,25);
                    pushFollow(FOLLOW_sass_control_in_mediaBodyItem753);
                    sass_control();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:395:7: {...}? sass_content
                    {
                    dbg.location(395,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
                    }
                    dbg.location(395,25);
                    pushFollow(FOLLOW_sass_content_in_mediaBodyItem763);
                    sass_content();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:396:7: rule
                    {
                    dbg.location(396,7);
                    pushFollow(FOLLOW_rule_in_mediaBodyItem771);
                    rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:397:7: page
                    {
                    dbg.location(397,7);
                    pushFollow(FOLLOW_page_in_mediaBodyItem779);
                    page();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:398:7: fontFace
                    {
                    dbg.location(398,7);
                    pushFollow(FOLLOW_fontFace_in_mediaBodyItem787);
                    fontFace();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:399:7: vendorAtRule
                    {
                    dbg.location(399,7);
                    pushFollow(FOLLOW_vendorAtRule_in_mediaBodyItem795);
                    vendorAtRule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:401:7: media
                    {
                    dbg.location(401,7);
                    pushFollow(FOLLOW_media_in_mediaBodyItem808);
                    media();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(402, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaBodyItem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaBodyItem"


    // $ANTLR start "mediaQueryList"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:404:1: mediaQueryList : mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )* ;
    public final void mediaQueryList() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaQueryList");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(404, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:405:2: ( mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:405:4: mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*
            {
            dbg.location(405,4);
            pushFollow(FOLLOW_mediaQuery_in_mediaQueryList822);
            mediaQuery();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(405,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:405:15: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*
            try { dbg.enterSubRule(40);

            loop40:
            do {
                int alt40=2;
                try { dbg.enterDecision(40, decisionCanBacktrack[40]);

                try {
                    isCyclicDecision = true;
                    alt40 = dfa40.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(40);}

                switch (alt40) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:405:17: ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery
            	    {
            	    dbg.location(405,31);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:405:31: ( ws )?
            	    int alt38=2;
            	    try { dbg.enterSubRule(38);
            	    try { dbg.enterDecision(38, decisionCanBacktrack[38]);

            	    int LA38_0 = input.LA(1);

            	    if ( (LA38_0==WS||(LA38_0>=NL && LA38_0<=COMMENT)) ) {
            	        alt38=1;
            	    }
            	    } finally {dbg.exitDecision(38);}

            	    switch (alt38) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:405:31: ws
            	            {
            	            dbg.location(405,31);
            	            pushFollow(FOLLOW_ws_in_mediaQueryList834);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(38);}

            	    dbg.location(405,35);
            	    match(input,COMMA,FOLLOW_COMMA_in_mediaQueryList837); if (state.failed) return ;
            	    dbg.location(405,41);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:405:41: ( ws )?
            	    int alt39=2;
            	    try { dbg.enterSubRule(39);
            	    try { dbg.enterDecision(39, decisionCanBacktrack[39]);

            	    int LA39_0 = input.LA(1);

            	    if ( (LA39_0==WS||(LA39_0>=NL && LA39_0<=COMMENT)) ) {
            	        alt39=1;
            	    }
            	    } finally {dbg.exitDecision(39);}

            	    switch (alt39) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:405:41: ws
            	            {
            	            dbg.location(405,41);
            	            pushFollow(FOLLOW_ws_in_mediaQueryList839);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(39);}

            	    dbg.location(405,45);
            	    pushFollow(FOLLOW_mediaQuery_in_mediaQueryList842);
            	    mediaQuery();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);
            } finally {dbg.exitSubRule(40);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(406, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaQueryList");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaQueryList"


    // $ANTLR start "mediaQuery"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:408:1: mediaQuery : ( ( mediaQueryOperator ( ws )? )? mediaType ( ( ws )? AND ( ws )? mediaExpression )* | mediaExpression ( ( ws )? AND ( ws )? mediaExpression )* );
    public final void mediaQuery() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaQuery");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(408, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:409:2: ( ( mediaQueryOperator ( ws )? )? mediaType ( ( ws )? AND ( ws )? mediaExpression )* | mediaExpression ( ( ws )? AND ( ws )? mediaExpression )* )
            int alt49=2;
            try { dbg.enterDecision(49, decisionCanBacktrack[49]);

            int LA49_0 = input.LA(1);

            if ( (LA49_0==IDENT||(LA49_0>=ONLY && LA49_0<=GEN)||LA49_0==HASH_SYMBOL) ) {
                alt49=1;
            }
            else if ( (LA49_0==LPAREN) ) {
                alt49=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(49);}

            switch (alt49) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:409:4: ( mediaQueryOperator ( ws )? )? mediaType ( ( ws )? AND ( ws )? mediaExpression )*
                    {
                    dbg.location(409,4);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:409:4: ( mediaQueryOperator ( ws )? )?
                    int alt42=2;
                    try { dbg.enterSubRule(42);
                    try { dbg.enterDecision(42, decisionCanBacktrack[42]);

                    int LA42_0 = input.LA(1);

                    if ( ((LA42_0>=ONLY && LA42_0<=NOT)) ) {
                        alt42=1;
                    }
                    } finally {dbg.exitDecision(42);}

                    switch (alt42) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:409:5: mediaQueryOperator ( ws )?
                            {
                            dbg.location(409,5);
                            pushFollow(FOLLOW_mediaQueryOperator_in_mediaQuery858);
                            mediaQueryOperator();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(409,24);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:409:24: ( ws )?
                            int alt41=2;
                            try { dbg.enterSubRule(41);
                            try { dbg.enterDecision(41, decisionCanBacktrack[41]);

                            int LA41_0 = input.LA(1);

                            if ( (LA41_0==WS||(LA41_0>=NL && LA41_0<=COMMENT)) ) {
                                alt41=1;
                            }
                            } finally {dbg.exitDecision(41);}

                            switch (alt41) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:409:24: ws
                                    {
                                    dbg.location(409,24);
                                    pushFollow(FOLLOW_ws_in_mediaQuery860);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(41);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(42);}

                    dbg.location(409,32);
                    pushFollow(FOLLOW_mediaType_in_mediaQuery867);
                    mediaType();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(409,42);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:409:42: ( ( ws )? AND ( ws )? mediaExpression )*
                    try { dbg.enterSubRule(45);

                    loop45:
                    do {
                        int alt45=2;
                        try { dbg.enterDecision(45, decisionCanBacktrack[45]);

                        try {
                            isCyclicDecision = true;
                            alt45 = dfa45.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(45);}

                        switch (alt45) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:409:44: ( ws )? AND ( ws )? mediaExpression
                    	    {
                    	    dbg.location(409,44);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:409:44: ( ws )?
                    	    int alt43=2;
                    	    try { dbg.enterSubRule(43);
                    	    try { dbg.enterDecision(43, decisionCanBacktrack[43]);

                    	    int LA43_0 = input.LA(1);

                    	    if ( (LA43_0==WS||(LA43_0>=NL && LA43_0<=COMMENT)) ) {
                    	        alt43=1;
                    	    }
                    	    } finally {dbg.exitDecision(43);}

                    	    switch (alt43) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:409:44: ws
                    	            {
                    	            dbg.location(409,44);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery871);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(43);}

                    	    dbg.location(409,48);
                    	    match(input,AND,FOLLOW_AND_in_mediaQuery874); if (state.failed) return ;
                    	    dbg.location(409,52);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:409:52: ( ws )?
                    	    int alt44=2;
                    	    try { dbg.enterSubRule(44);
                    	    try { dbg.enterDecision(44, decisionCanBacktrack[44]);

                    	    int LA44_0 = input.LA(1);

                    	    if ( (LA44_0==WS||(LA44_0>=NL && LA44_0<=COMMENT)) ) {
                    	        alt44=1;
                    	    }
                    	    } finally {dbg.exitDecision(44);}

                    	    switch (alt44) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:409:52: ws
                    	            {
                    	            dbg.location(409,52);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery876);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(44);}

                    	    dbg.location(409,56);
                    	    pushFollow(FOLLOW_mediaExpression_in_mediaQuery879);
                    	    mediaExpression();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop45;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(45);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:4: mediaExpression ( ( ws )? AND ( ws )? mediaExpression )*
                    {
                    dbg.location(410,4);
                    pushFollow(FOLLOW_mediaExpression_in_mediaQuery887);
                    mediaExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(410,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:20: ( ( ws )? AND ( ws )? mediaExpression )*
                    try { dbg.enterSubRule(48);

                    loop48:
                    do {
                        int alt48=2;
                        try { dbg.enterDecision(48, decisionCanBacktrack[48]);

                        try {
                            isCyclicDecision = true;
                            alt48 = dfa48.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(48);}

                        switch (alt48) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:22: ( ws )? AND ( ws )? mediaExpression
                    	    {
                    	    dbg.location(410,22);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:22: ( ws )?
                    	    int alt46=2;
                    	    try { dbg.enterSubRule(46);
                    	    try { dbg.enterDecision(46, decisionCanBacktrack[46]);

                    	    int LA46_0 = input.LA(1);

                    	    if ( (LA46_0==WS||(LA46_0>=NL && LA46_0<=COMMENT)) ) {
                    	        alt46=1;
                    	    }
                    	    } finally {dbg.exitDecision(46);}

                    	    switch (alt46) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:22: ws
                    	            {
                    	            dbg.location(410,22);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery891);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(46);}

                    	    dbg.location(410,26);
                    	    match(input,AND,FOLLOW_AND_in_mediaQuery894); if (state.failed) return ;
                    	    dbg.location(410,30);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:30: ( ws )?
                    	    int alt47=2;
                    	    try { dbg.enterSubRule(47);
                    	    try { dbg.enterDecision(47, decisionCanBacktrack[47]);

                    	    int LA47_0 = input.LA(1);

                    	    if ( (LA47_0==WS||(LA47_0>=NL && LA47_0<=COMMENT)) ) {
                    	        alt47=1;
                    	    }
                    	    } finally {dbg.exitDecision(47);}

                    	    switch (alt47) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:410:30: ws
                    	            {
                    	            dbg.location(410,30);
                    	            pushFollow(FOLLOW_ws_in_mediaQuery896);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(47);}

                    	    dbg.location(410,34);
                    	    pushFollow(FOLLOW_mediaExpression_in_mediaQuery899);
                    	    mediaExpression();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop48;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(48);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(411, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaQuery");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaQuery"


    // $ANTLR start "mediaQueryOperator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:413:1: mediaQueryOperator : ( ONLY | NOT );
    public final void mediaQueryOperator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaQueryOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(413, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:414:3: ( ONLY | NOT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(414,3);
            if ( (input.LA(1)>=ONLY && input.LA(1)<=NOT) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(415, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaQueryOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaQueryOperator"


    // $ANTLR start "mediaType"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:417:1: mediaType : ( IDENT | GEN | {...}? sass_interpolation_expression_var );
    public final void mediaType() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaType");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(417, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:418:2: ( IDENT | GEN | {...}? sass_interpolation_expression_var )
            int alt50=3;
            try { dbg.enterDecision(50, decisionCanBacktrack[50]);

            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt50=1;
                }
                break;
            case GEN:
                {
                alt50=2;
                }
                break;
            case HASH_SYMBOL:
                {
                alt50=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(50);}

            switch (alt50) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:418:4: IDENT
                    {
                    dbg.location(418,4);
                    match(input,IDENT,FOLLOW_IDENT_in_mediaType935); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:418:12: GEN
                    {
                    dbg.location(418,12);
                    match(input,GEN,FOLLOW_GEN_in_mediaType939); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:418:18: {...}? sass_interpolation_expression_var
                    {
                    dbg.location(418,18);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaType", "isCssPreprocessorSource()");
                    }
                    dbg.location(418,47);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaType945);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(419, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaType");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaType"


    // $ANTLR start "mediaExpression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:421:1: mediaExpression : LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN ;
    public final void mediaExpression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(421, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:422:5: ( LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:5: LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN
            {
            dbg.location(423,5);
            match(input,LPAREN,FOLLOW_LPAREN_in_mediaExpression965); if (state.failed) return ;
            dbg.location(423,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:12: ( ws )?
            int alt51=2;
            try { dbg.enterSubRule(51);
            try { dbg.enterDecision(51, decisionCanBacktrack[51]);

            int LA51_0 = input.LA(1);

            if ( (LA51_0==WS||(LA51_0>=NL && LA51_0<=COMMENT)) ) {
                alt51=1;
            }
            } finally {dbg.exitDecision(51);}

            switch (alt51) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:12: ws
                    {
                    dbg.location(423,12);
                    pushFollow(FOLLOW_ws_in_mediaExpression967);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(51);}

            dbg.location(423,16);
            pushFollow(FOLLOW_mediaFeature_in_mediaExpression970);
            mediaFeature();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(423,29);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:29: ( mediaFeatureValue )?
            int alt52=2;
            try { dbg.enterSubRule(52);
            try { dbg.enterDecision(52, decisionCanBacktrack[52]);

            try {
                isCyclicDecision = true;
                alt52 = dfa52.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(52);}

            switch (alt52) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:29: mediaFeatureValue
                    {
                    dbg.location(423,29);
                    pushFollow(FOLLOW_mediaFeatureValue_in_mediaExpression972);
                    mediaFeatureValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(52);}

            dbg.location(423,48);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:48: ( ws )?
            int alt53=2;
            try { dbg.enterSubRule(53);
            try { dbg.enterDecision(53, decisionCanBacktrack[53]);

            int LA53_0 = input.LA(1);

            if ( (LA53_0==WS||(LA53_0>=NL && LA53_0<=COMMENT)) ) {
                alt53=1;
            }
            } finally {dbg.exitDecision(53);}

            switch (alt53) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:423:48: ws
                    {
                    dbg.location(423,48);
                    pushFollow(FOLLOW_ws_in_mediaExpression975);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(53);}

            dbg.location(423,52);
            match(input,RPAREN,FOLLOW_RPAREN_in_mediaExpression978); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(424, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaExpression"


    // $ANTLR start "mediaFeatureValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:426:1: mediaFeatureValue : ( ws )? COLON ( ws )? expression ;
    public final void mediaFeatureValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaFeatureValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(426, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:427:5: ( ( ws )? COLON ( ws )? expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:428:5: ( ws )? COLON ( ws )? expression
            {
            dbg.location(428,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:428:5: ( ws )?
            int alt54=2;
            try { dbg.enterSubRule(54);
            try { dbg.enterDecision(54, decisionCanBacktrack[54]);

            int LA54_0 = input.LA(1);

            if ( (LA54_0==WS||(LA54_0>=NL && LA54_0<=COMMENT)) ) {
                alt54=1;
            }
            } finally {dbg.exitDecision(54);}

            switch (alt54) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:428:5: ws
                    {
                    dbg.location(428,5);
                    pushFollow(FOLLOW_ws_in_mediaFeatureValue1003);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(54);}

            dbg.location(428,9);
            match(input,COLON,FOLLOW_COLON_in_mediaFeatureValue1006); if (state.failed) return ;
            dbg.location(428,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:428:15: ( ws )?
            int alt55=2;
            try { dbg.enterSubRule(55);
            try { dbg.enterDecision(55, decisionCanBacktrack[55]);

            int LA55_0 = input.LA(1);

            if ( (LA55_0==WS||(LA55_0>=NL && LA55_0<=COMMENT)) ) {
                alt55=1;
            }
            } finally {dbg.exitDecision(55);}

            switch (alt55) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:428:15: ws
                    {
                    dbg.location(428,15);
                    pushFollow(FOLLOW_ws_in_mediaFeatureValue1008);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(55);}

            dbg.location(428,19);
            pushFollow(FOLLOW_expression_in_mediaFeatureValue1011);
            expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(429, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaFeatureValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaFeatureValue"


    // $ANTLR start "mediaFeature"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:431:1: mediaFeature : ( IDENT | GEN | {...}? ( cp_variable | sass_interpolation_expression_var ) );
    public final void mediaFeature() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "mediaFeature");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(431, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:432:2: ( IDENT | GEN | {...}? ( cp_variable | sass_interpolation_expression_var ) )
            int alt57=3;
            try { dbg.enterDecision(57, decisionCanBacktrack[57]);

            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt57=1;
                }
                break;
            case GEN:
                {
                alt57=2;
                }
                break;
            case MEDIA_SYM:
            case AT_IDENT:
            case HASH_SYMBOL:
            case SASS_VAR:
                {
                alt57=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(57);}

            switch (alt57) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:432:4: IDENT
                    {
                    dbg.location(432,4);
                    match(input,IDENT,FOLLOW_IDENT_in_mediaFeature1026); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:432:12: GEN
                    {
                    dbg.location(432,12);
                    match(input,GEN,FOLLOW_GEN_in_mediaFeature1030); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:432:18: {...}? ( cp_variable | sass_interpolation_expression_var )
                    {
                    dbg.location(432,18);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "mediaFeature", "isCssPreprocessorSource()");
                    }
                    dbg.location(432,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:432:47: ( cp_variable | sass_interpolation_expression_var )
                    int alt56=2;
                    try { dbg.enterSubRule(56);
                    try { dbg.enterDecision(56, decisionCanBacktrack[56]);

                    int LA56_0 = input.LA(1);

                    if ( (LA56_0==MEDIA_SYM||LA56_0==AT_IDENT||LA56_0==SASS_VAR) ) {
                        alt56=1;
                    }
                    else if ( (LA56_0==HASH_SYMBOL) ) {
                        alt56=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 56, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(56);}

                    switch (alt56) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:432:49: cp_variable
                            {
                            dbg.location(432,49);
                            pushFollow(FOLLOW_cp_variable_in_mediaFeature1038);
                            cp_variable();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:432:63: sass_interpolation_expression_var
                            {
                            dbg.location(432,63);
                            pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaFeature1042);
                            sass_interpolation_expression_var();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(56);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(433, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "mediaFeature");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "mediaFeature"


    // $ANTLR start "body"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:435:2: body : ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
    public final void body() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "body");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(435, 2);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:436:5: ( ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:437:5: ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            {
            dbg.location(437,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:437:5: ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            int cnt62=0;
            try { dbg.enterSubRule(62);

            loop62:
            do {
                int alt62=3;
                try { dbg.enterDecision(62, decisionCanBacktrack[62]);

                int LA62_0 = input.LA(1);

                if ( (LA62_0==IDENT||(LA62_0>=IMPORT_SYM && LA62_0<=MEDIA_SYM)||LA62_0==GEN||(LA62_0>=COLON && LA62_0<=AT_IDENT)||LA62_0==MOZ_DOCUMENT_SYM||LA62_0==WEBKIT_KEYFRAMES_SYM||(LA62_0>=PAGE_SYM && LA62_0<=FONT_FACE_SYM)||LA62_0==MINUS||LA62_0==GREATER||(LA62_0>=HASH_SYMBOL && LA62_0<=PIPE)||LA62_0==LESS_AND||LA62_0==SASS_VAR||(LA62_0>=SASS_MIXIN && LA62_0<=SASS_INCLUDE)||(LA62_0>=SASS_DEBUG && LA62_0<=SASS_IF)||(LA62_0>=SASS_FOR && LA62_0<=SASS_FUNCTION)) ) {
                    alt62=1;
                }
                else if ( (LA62_0==SEMI) ) {
                    alt62=2;
                }


                } finally {dbg.exitDecision(62);}

                switch (alt62) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:10: ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    {
            	    dbg.location(438,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:10: ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:12: bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
            	    {
            	    dbg.location(438,12);
            	    pushFollow(FOLLOW_bodyItem_in_body1079);
            	    bodyItem();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(438,21);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:21: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
            	    int alt59=2;
            	    try { dbg.enterSubRule(59);
            	    try { dbg.enterDecision(59, decisionCanBacktrack[59]);

            	    try {
            	        isCyclicDecision = true;
            	        alt59 = dfa59.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(59);}

            	    switch (alt59) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:22: ( ( ws )? SEMI )=> ( ws )? SEMI
            	            {
            	            dbg.location(438,34);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:34: ( ws )?
            	            int alt58=2;
            	            try { dbg.enterSubRule(58);
            	            try { dbg.enterDecision(58, decisionCanBacktrack[58]);

            	            int LA58_0 = input.LA(1);

            	            if ( (LA58_0==WS||(LA58_0>=NL && LA58_0<=COMMENT)) ) {
            	                alt58=1;
            	            }
            	            } finally {dbg.exitDecision(58);}

            	            switch (alt58) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:34: ws
            	                    {
            	                    dbg.location(438,34);
            	                    pushFollow(FOLLOW_ws_in_body1089);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(58);}

            	            dbg.location(438,38);
            	            match(input,SEMI,FOLLOW_SEMI_in_body1092); if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(59);}

            	    dbg.location(438,45);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:45: ( ws )?
            	    int alt60=2;
            	    try { dbg.enterSubRule(60);
            	    try { dbg.enterDecision(60, decisionCanBacktrack[60]);

            	    int LA60_0 = input.LA(1);

            	    if ( (LA60_0==WS||(LA60_0>=NL && LA60_0<=COMMENT)) ) {
            	        alt60=1;
            	    }
            	    } finally {dbg.exitDecision(60);}

            	    switch (alt60) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:45: ws
            	            {
            	            dbg.location(438,45);
            	            pushFollow(FOLLOW_ws_in_body1096);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(60);}


            	    }


            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:440:10: ( SEMI ( ws )? )
            	    {
            	    dbg.location(440,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:440:10: ( SEMI ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:440:12: SEMI ( ws )?
            	    {
            	    dbg.location(440,12);
            	    match(input,SEMI,FOLLOW_SEMI_in_body1123); if (state.failed) return ;
            	    dbg.location(440,17);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:440:17: ( ws )?
            	    int alt61=2;
            	    try { dbg.enterSubRule(61);
            	    try { dbg.enterDecision(61, decisionCanBacktrack[61]);

            	    int LA61_0 = input.LA(1);

            	    if ( (LA61_0==WS||(LA61_0>=NL && LA61_0<=COMMENT)) ) {
            	        alt61=1;
            	    }
            	    } finally {dbg.exitDecision(61);}

            	    switch (alt61) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:440:17: ws
            	            {
            	            dbg.location(440,17);
            	            pushFollow(FOLLOW_ws_in_body1125);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(61);}


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt62 >= 1 ) break loop62;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(62, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt62++;
            } while (true);
            } finally {dbg.exitSubRule(62);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(442, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "body");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "body"


    // $ANTLR start "bodyItem"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:444:1: bodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ LBRACE )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call | rule | at_rule | {...}? cp_variable_declaration | {...}? importItem | {...}? sass_debug | {...}? sass_control | {...}? sass_function_declaration );
    public final void bodyItem() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "bodyItem");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(444, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:445:5: ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ LBRACE )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call | rule | at_rule | {...}? cp_variable_declaration | {...}? importItem | {...}? sass_debug | {...}? sass_control | {...}? sass_function_declaration )
            int alt63=9;
            try { dbg.enterDecision(63, decisionCanBacktrack[63]);

            try {
                isCyclicDecision = true;
                alt63 = dfa63.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(63);}

            switch (alt63) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:9: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ LBRACE )* LBRACE ) )=> cp_mixin_declaration
                    {
                    dbg.location(446,84);
                    pushFollow(FOLLOW_cp_mixin_declaration_in_bodyItem1195);
                    cp_mixin_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:447:11: ( cp_mixin_call )=> cp_mixin_call
                    {
                    dbg.location(447,28);
                    pushFollow(FOLLOW_cp_mixin_call_in_bodyItem1211);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:448:8: rule
                    {
                    dbg.location(448,8);
                    pushFollow(FOLLOW_rule_in_bodyItem1220);
                    rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:449:11: at_rule
                    {
                    dbg.location(449,11);
                    pushFollow(FOLLOW_at_rule_in_bodyItem1232);
                    at_rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:450:11: {...}? cp_variable_declaration
                    {
                    dbg.location(450,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isCssPreprocessorSource()");
                    }
                    dbg.location(450,40);
                    pushFollow(FOLLOW_cp_variable_declaration_in_bodyItem1246);
                    cp_variable_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:452:11: {...}? importItem
                    {
                    dbg.location(452,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isCssPreprocessorSource()");
                    }
                    dbg.location(452,40);
                    pushFollow(FOLLOW_importItem_in_bodyItem1269);
                    importItem();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:453:11: {...}? sass_debug
                    {
                    dbg.location(453,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(453,29);
                    pushFollow(FOLLOW_sass_debug_in_bodyItem1283);
                    sass_debug();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:454:11: {...}? sass_control
                    {
                    dbg.location(454,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(454,29);
                    pushFollow(FOLLOW_sass_control_in_bodyItem1297);
                    sass_control();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:455:11: {...}? sass_function_declaration
                    {
                    dbg.location(455,11);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
                    }
                    dbg.location(455,29);
                    pushFollow(FOLLOW_sass_function_declaration_in_bodyItem1311);
                    sass_function_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(NL)); 
                
        }
        finally {
        }
        dbg.location(456, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bodyItem");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "bodyItem"


    // $ANTLR start "at_rule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:461:1: at_rule : ( media | page | counterStyle | fontFace | vendorAtRule );
    public final void at_rule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "at_rule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(461, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:462:5: ( media | page | counterStyle | fontFace | vendorAtRule )
            int alt64=5;
            try { dbg.enterDecision(64, decisionCanBacktrack[64]);

            switch ( input.LA(1) ) {
            case MEDIA_SYM:
                {
                alt64=1;
                }
                break;
            case PAGE_SYM:
                {
                alt64=2;
                }
                break;
            case COUNTER_STYLE_SYM:
                {
                alt64=3;
                }
                break;
            case FONT_FACE_SYM:
                {
                alt64=4;
                }
                break;
            case AT_IDENT:
            case MOZ_DOCUMENT_SYM:
            case WEBKIT_KEYFRAMES_SYM:
                {
                alt64=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(64);}

            switch (alt64) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:463:5: media
                    {
                    dbg.location(463,5);
                    pushFollow(FOLLOW_media_in_at_rule1341);
                    media();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:464:7: page
                    {
                    dbg.location(464,7);
                    pushFollow(FOLLOW_page_in_at_rule1349);
                    page();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:465:7: counterStyle
                    {
                    dbg.location(465,7);
                    pushFollow(FOLLOW_counterStyle_in_at_rule1357);
                    counterStyle();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:466:7: fontFace
                    {
                    dbg.location(466,7);
                    pushFollow(FOLLOW_fontFace_in_at_rule1365);
                    fontFace();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:467:7: vendorAtRule
                    {
                    dbg.location(467,7);
                    pushFollow(FOLLOW_vendorAtRule_in_at_rule1373);
                    vendorAtRule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(468, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "at_rule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "at_rule"


    // $ANTLR start "vendorAtRule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:470:1: vendorAtRule : ( moz_document | webkitKeyframes | generic_at_rule );
    public final void vendorAtRule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "vendorAtRule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(470, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:471:1: ( moz_document | webkitKeyframes | generic_at_rule )
            int alt65=3;
            try { dbg.enterDecision(65, decisionCanBacktrack[65]);

            switch ( input.LA(1) ) {
            case MOZ_DOCUMENT_SYM:
                {
                alt65=1;
                }
                break;
            case WEBKIT_KEYFRAMES_SYM:
                {
                alt65=2;
                }
                break;
            case AT_IDENT:
                {
                alt65=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(65);}

            switch (alt65) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:471:3: moz_document
                    {
                    dbg.location(471,3);
                    pushFollow(FOLLOW_moz_document_in_vendorAtRule1390);
                    moz_document();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:471:18: webkitKeyframes
                    {
                    dbg.location(471,18);
                    pushFollow(FOLLOW_webkitKeyframes_in_vendorAtRule1394);
                    webkitKeyframes();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:471:36: generic_at_rule
                    {
                    dbg.location(471,36);
                    pushFollow(FOLLOW_generic_at_rule_in_vendorAtRule1398);
                    generic_at_rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(471, 51);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "vendorAtRule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "vendorAtRule"


    // $ANTLR start "atRuleId"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:473:1: atRuleId : ( IDENT | STRING );
    public final void atRuleId() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "atRuleId");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(473, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:474:2: ( IDENT | STRING )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(474,2);
            if ( (input.LA(1)>=IDENT && input.LA(1)<=STRING) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(476, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "atRuleId");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "atRuleId"


    // $ANTLR start "generic_at_rule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:478:1: generic_at_rule : AT_IDENT ( WS )* ( atRuleId ( WS )* )? LBRACE syncTo_RBRACE RBRACE ;
    public final void generic_at_rule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "generic_at_rule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(478, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:479:5: ( AT_IDENT ( WS )* ( atRuleId ( WS )* )? LBRACE syncTo_RBRACE RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:479:7: AT_IDENT ( WS )* ( atRuleId ( WS )* )? LBRACE syncTo_RBRACE RBRACE
            {
            dbg.location(479,7);
            match(input,AT_IDENT,FOLLOW_AT_IDENT_in_generic_at_rule1434); if (state.failed) return ;
            dbg.location(479,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:479:16: ( WS )*
            try { dbg.enterSubRule(66);

            loop66:
            do {
                int alt66=2;
                try { dbg.enterDecision(66, decisionCanBacktrack[66]);

                int LA66_0 = input.LA(1);

                if ( (LA66_0==WS) ) {
                    alt66=1;
                }


                } finally {dbg.exitDecision(66);}

                switch (alt66) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:479:16: WS
            	    {
            	    dbg.location(479,16);
            	    match(input,WS,FOLLOW_WS_in_generic_at_rule1436); if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);
            } finally {dbg.exitSubRule(66);}

            dbg.location(479,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:479:20: ( atRuleId ( WS )* )?
            int alt68=2;
            try { dbg.enterSubRule(68);
            try { dbg.enterDecision(68, decisionCanBacktrack[68]);

            int LA68_0 = input.LA(1);

            if ( ((LA68_0>=IDENT && LA68_0<=STRING)) ) {
                alt68=1;
            }
            } finally {dbg.exitDecision(68);}

            switch (alt68) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:479:22: atRuleId ( WS )*
                    {
                    dbg.location(479,22);
                    pushFollow(FOLLOW_atRuleId_in_generic_at_rule1441);
                    atRuleId();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(479,31);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:479:31: ( WS )*
                    try { dbg.enterSubRule(67);

                    loop67:
                    do {
                        int alt67=2;
                        try { dbg.enterDecision(67, decisionCanBacktrack[67]);

                        int LA67_0 = input.LA(1);

                        if ( (LA67_0==WS) ) {
                            alt67=1;
                        }


                        } finally {dbg.exitDecision(67);}

                        switch (alt67) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:479:31: WS
                    	    {
                    	    dbg.location(479,31);
                    	    match(input,WS,FOLLOW_WS_in_generic_at_rule1443); if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop67;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(67);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(68);}

            dbg.location(480,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_generic_at_rule1458); if (state.failed) return ;
            dbg.location(481,10);
            pushFollow(FOLLOW_syncTo_RBRACE_in_generic_at_rule1470);
            syncTo_RBRACE();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(482,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_generic_at_rule1480); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(483, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "generic_at_rule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "generic_at_rule"


    // $ANTLR start "moz_document"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:484:1: moz_document : MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE ;
    public final void moz_document() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "moz_document");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(484, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:485:2: ( MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:2: MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE
            {
            dbg.location(486,2);
            match(input,MOZ_DOCUMENT_SYM,FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document1496); if (state.failed) return ;
            dbg.location(486,19);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:19: ( ws )?
            int alt69=2;
            try { dbg.enterSubRule(69);
            try { dbg.enterDecision(69, decisionCanBacktrack[69]);

            int LA69_0 = input.LA(1);

            if ( (LA69_0==WS||(LA69_0>=NL && LA69_0<=COMMENT)) ) {
                alt69=1;
            }
            } finally {dbg.exitDecision(69);}

            switch (alt69) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:19: ws
                    {
                    dbg.location(486,19);
                    pushFollow(FOLLOW_ws_in_moz_document1498);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(69);}

            dbg.location(486,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:23: ( moz_document_function ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:25: moz_document_function ( ws )?
            {
            dbg.location(486,25);
            pushFollow(FOLLOW_moz_document_function_in_moz_document1503);
            moz_document_function();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(486,47);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:47: ( ws )?
            int alt70=2;
            try { dbg.enterSubRule(70);
            try { dbg.enterDecision(70, decisionCanBacktrack[70]);

            int LA70_0 = input.LA(1);

            if ( (LA70_0==WS||(LA70_0>=NL && LA70_0<=COMMENT)) ) {
                alt70=1;
            }
            } finally {dbg.exitDecision(70);}

            switch (alt70) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:47: ws
                    {
                    dbg.location(486,47);
                    pushFollow(FOLLOW_ws_in_moz_document1505);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(70);}


            }

            dbg.location(486,52);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:52: ( COMMA ( ws )? moz_document_function ( ws )? )*
            try { dbg.enterSubRule(73);

            loop73:
            do {
                int alt73=2;
                try { dbg.enterDecision(73, decisionCanBacktrack[73]);

                int LA73_0 = input.LA(1);

                if ( (LA73_0==COMMA) ) {
                    alt73=1;
                }


                } finally {dbg.exitDecision(73);}

                switch (alt73) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:54: COMMA ( ws )? moz_document_function ( ws )?
            	    {
            	    dbg.location(486,54);
            	    match(input,COMMA,FOLLOW_COMMA_in_moz_document1511); if (state.failed) return ;
            	    dbg.location(486,60);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:60: ( ws )?
            	    int alt71=2;
            	    try { dbg.enterSubRule(71);
            	    try { dbg.enterDecision(71, decisionCanBacktrack[71]);

            	    int LA71_0 = input.LA(1);

            	    if ( (LA71_0==WS||(LA71_0>=NL && LA71_0<=COMMENT)) ) {
            	        alt71=1;
            	    }
            	    } finally {dbg.exitDecision(71);}

            	    switch (alt71) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:60: ws
            	            {
            	            dbg.location(486,60);
            	            pushFollow(FOLLOW_ws_in_moz_document1513);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(71);}

            	    dbg.location(486,64);
            	    pushFollow(FOLLOW_moz_document_function_in_moz_document1516);
            	    moz_document_function();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(486,86);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:86: ( ws )?
            	    int alt72=2;
            	    try { dbg.enterSubRule(72);
            	    try { dbg.enterDecision(72, decisionCanBacktrack[72]);

            	    int LA72_0 = input.LA(1);

            	    if ( (LA72_0==WS||(LA72_0>=NL && LA72_0<=COMMENT)) ) {
            	        alt72=1;
            	    }
            	    } finally {dbg.exitDecision(72);}

            	    switch (alt72) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:486:86: ws
            	            {
            	            dbg.location(486,86);
            	            pushFollow(FOLLOW_ws_in_moz_document1518);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(72);}


            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);
            } finally {dbg.exitSubRule(73);}

            dbg.location(487,2);
            match(input,LBRACE,FOLLOW_LBRACE_in_moz_document1525); if (state.failed) return ;
            dbg.location(487,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:9: ( ws )?
            int alt74=2;
            try { dbg.enterSubRule(74);
            try { dbg.enterDecision(74, decisionCanBacktrack[74]);

            int LA74_0 = input.LA(1);

            if ( (LA74_0==WS||(LA74_0>=NL && LA74_0<=COMMENT)) ) {
                alt74=1;
            }
            } finally {dbg.exitDecision(74);}

            switch (alt74) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:487:9: ws
                    {
                    dbg.location(487,9);
                    pushFollow(FOLLOW_ws_in_moz_document1527);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(74);}

            dbg.location(488,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:3: ( body )?
            int alt75=2;
            try { dbg.enterSubRule(75);
            try { dbg.enterDecision(75, decisionCanBacktrack[75]);

            int LA75_0 = input.LA(1);

            if ( ((LA75_0>=SEMI && LA75_0<=IDENT)||(LA75_0>=IMPORT_SYM && LA75_0<=MEDIA_SYM)||LA75_0==GEN||(LA75_0>=COLON && LA75_0<=AT_IDENT)||LA75_0==MOZ_DOCUMENT_SYM||LA75_0==WEBKIT_KEYFRAMES_SYM||(LA75_0>=PAGE_SYM && LA75_0<=FONT_FACE_SYM)||LA75_0==MINUS||LA75_0==GREATER||(LA75_0>=HASH_SYMBOL && LA75_0<=PIPE)||LA75_0==LESS_AND||LA75_0==SASS_VAR||(LA75_0>=SASS_MIXIN && LA75_0<=SASS_INCLUDE)||(LA75_0>=SASS_DEBUG && LA75_0<=SASS_IF)||(LA75_0>=SASS_FOR && LA75_0<=SASS_FUNCTION)) ) {
                alt75=1;
            }
            } finally {dbg.exitDecision(75);}

            switch (alt75) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:488:3: body
                    {
                    dbg.location(488,3);
                    pushFollow(FOLLOW_body_in_moz_document1532);
                    body();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(75);}

            dbg.location(489,2);
            match(input,RBRACE,FOLLOW_RBRACE_in_moz_document1537); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(490, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moz_document");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "moz_document"


    // $ANTLR start "moz_document_function"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:492:1: moz_document_function : ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP );
    public final void moz_document_function() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "moz_document_function");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(492, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:493:2: ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(493,2);
            if ( input.LA(1)==URI||(input.LA(1)>=MOZ_URL_PREFIX && input.LA(1)<=MOZ_REGEXP) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(495, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "moz_document_function");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "moz_document_function"


    // $ANTLR start "webkitKeyframes"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:498:1: webkitKeyframes : WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE ;
    public final void webkitKeyframes() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "webkitKeyframes");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(498, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:499:2: ( WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:500:2: WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE
            {
            dbg.location(500,2);
            match(input,WEBKIT_KEYFRAMES_SYM,FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes1578); if (state.failed) return ;
            dbg.location(500,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:500:23: ( ws )?
            int alt76=2;
            try { dbg.enterSubRule(76);
            try { dbg.enterDecision(76, decisionCanBacktrack[76]);

            int LA76_0 = input.LA(1);

            if ( (LA76_0==WS||(LA76_0>=NL && LA76_0<=COMMENT)) ) {
                alt76=1;
            }
            } finally {dbg.exitDecision(76);}

            switch (alt76) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:500:23: ws
                    {
                    dbg.location(500,23);
                    pushFollow(FOLLOW_ws_in_webkitKeyframes1580);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(76);}

            dbg.location(500,27);
            pushFollow(FOLLOW_atRuleId_in_webkitKeyframes1583);
            atRuleId();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(500,36);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:500:36: ( ws )?
            int alt77=2;
            try { dbg.enterSubRule(77);
            try { dbg.enterDecision(77, decisionCanBacktrack[77]);

            int LA77_0 = input.LA(1);

            if ( (LA77_0==WS||(LA77_0>=NL && LA77_0<=COMMENT)) ) {
                alt77=1;
            }
            } finally {dbg.exitDecision(77);}

            switch (alt77) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:500:36: ws
                    {
                    dbg.location(500,36);
                    pushFollow(FOLLOW_ws_in_webkitKeyframes1585);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(77);}

            dbg.location(501,2);
            match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframes1590); if (state.failed) return ;
            dbg.location(501,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:501:9: ( ws )?
            int alt78=2;
            try { dbg.enterSubRule(78);
            try { dbg.enterDecision(78, decisionCanBacktrack[78]);

            int LA78_0 = input.LA(1);

            if ( (LA78_0==WS||(LA78_0>=NL && LA78_0<=COMMENT)) ) {
                alt78=1;
            }
            } finally {dbg.exitDecision(78);}

            switch (alt78) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:501:9: ws
                    {
                    dbg.location(501,9);
                    pushFollow(FOLLOW_ws_in_webkitKeyframes1592);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(78);}

            dbg.location(502,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:3: ( webkitKeyframesBlock ( ws )? )*
            try { dbg.enterSubRule(80);

            loop80:
            do {
                int alt80=2;
                try { dbg.enterDecision(80, decisionCanBacktrack[80]);

                int LA80_0 = input.LA(1);

                if ( (LA80_0==IDENT||LA80_0==PERCENTAGE) ) {
                    alt80=1;
                }


                } finally {dbg.exitDecision(80);}

                switch (alt80) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:5: webkitKeyframesBlock ( ws )?
            	    {
            	    dbg.location(502,5);
            	    pushFollow(FOLLOW_webkitKeyframesBlock_in_webkitKeyframes1599);
            	    webkitKeyframesBlock();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(502,26);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:26: ( ws )?
            	    int alt79=2;
            	    try { dbg.enterSubRule(79);
            	    try { dbg.enterDecision(79, decisionCanBacktrack[79]);

            	    int LA79_0 = input.LA(1);

            	    if ( (LA79_0==WS||(LA79_0>=NL && LA79_0<=COMMENT)) ) {
            	        alt79=1;
            	    }
            	    } finally {dbg.exitDecision(79);}

            	    switch (alt79) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:502:26: ws
            	            {
            	            dbg.location(502,26);
            	            pushFollow(FOLLOW_ws_in_webkitKeyframes1601);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(79);}


            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);
            } finally {dbg.exitSubRule(80);}

            dbg.location(503,2);
            match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframes1608); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(504, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "webkitKeyframes");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "webkitKeyframes"


    // $ANTLR start "webkitKeyframesBlock"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:506:1: webkitKeyframesBlock : webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void webkitKeyframesBlock() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "webkitKeyframesBlock");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(506, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:507:2: ( webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:2: webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(508,2);
            pushFollow(FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock1621);
            webkitKeyframeSelectors();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(508,26);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:26: ( ws )?
            int alt81=2;
            try { dbg.enterSubRule(81);
            try { dbg.enterDecision(81, decisionCanBacktrack[81]);

            int LA81_0 = input.LA(1);

            if ( (LA81_0==WS||(LA81_0>=NL && LA81_0<=COMMENT)) ) {
                alt81=1;
            }
            } finally {dbg.exitDecision(81);}

            switch (alt81) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:508:26: ws
                    {
                    dbg.location(508,26);
                    pushFollow(FOLLOW_ws_in_webkitKeyframesBlock1623);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(81);}

            dbg.location(509,2);
            match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframesBlock1627); if (state.failed) return ;
            dbg.location(509,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:509:10: ( ws )?
            int alt82=2;
            try { dbg.enterSubRule(82);
            try { dbg.enterDecision(82, decisionCanBacktrack[82]);

            int LA82_0 = input.LA(1);

            if ( (LA82_0==WS||(LA82_0>=NL && LA82_0<=COMMENT)) ) {
                alt82=1;
            }
            } finally {dbg.exitDecision(82);}

            switch (alt82) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:509:10: ws
                    {
                    dbg.location(509,10);
                    pushFollow(FOLLOW_ws_in_webkitKeyframesBlock1630);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(82);}

            dbg.location(509,14);
            pushFollow(FOLLOW_syncToFollow_in_webkitKeyframesBlock1633);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(510,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:510:3: ( declarations )?
            int alt83=2;
            try { dbg.enterSubRule(83);
            try { dbg.enterDecision(83, decisionCanBacktrack[83]);

            int LA83_0 = input.LA(1);

            if ( ((LA83_0>=SEMI && LA83_0<=IDENT)||(LA83_0>=IMPORT_SYM && LA83_0<=MEDIA_SYM)||LA83_0==GEN||(LA83_0>=COLON && LA83_0<=AT_IDENT)||LA83_0==MOZ_DOCUMENT_SYM||LA83_0==WEBKIT_KEYFRAMES_SYM||(LA83_0>=PAGE_SYM && LA83_0<=FONT_FACE_SYM)||LA83_0==MINUS||LA83_0==GREATER||(LA83_0>=HASH_SYMBOL && LA83_0<=PIPE)||LA83_0==LESS_AND||LA83_0==SASS_VAR||(LA83_0>=SASS_MIXIN && LA83_0<=SASS_INCLUDE)||LA83_0==SASS_EXTEND||(LA83_0>=SASS_DEBUG && LA83_0<=SASS_IF)||(LA83_0>=SASS_FOR && LA83_0<=SASS_WHILE)||(LA83_0>=SASS_RETURN && LA83_0<=SASS_CONTENT)) ) {
                alt83=1;
            }
            } finally {dbg.exitDecision(83);}

            switch (alt83) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:510:3: declarations
                    {
                    dbg.location(510,3);
                    pushFollow(FOLLOW_declarations_in_webkitKeyframesBlock1637);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(83);}

            dbg.location(511,2);
            match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframesBlock1641); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(512, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "webkitKeyframesBlock");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "webkitKeyframesBlock"


    // $ANTLR start "webkitKeyframeSelectors"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:514:1: webkitKeyframeSelectors : ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )* ;
    public final void webkitKeyframeSelectors() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "webkitKeyframeSelectors");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(514, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:515:2: ( ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:2: ( IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*
            {
            dbg.location(516,2);
            if ( input.LA(1)==IDENT||input.LA(1)==PERCENTAGE ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(516,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:25: ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*
            try { dbg.enterSubRule(86);

            loop86:
            do {
                int alt86=2;
                try { dbg.enterDecision(86, decisionCanBacktrack[86]);

                try {
                    isCyclicDecision = true;
                    alt86 = dfa86.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(86);}

                switch (alt86) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:27: ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE )
            	    {
            	    dbg.location(516,27);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:27: ( ws )?
            	    int alt84=2;
            	    try { dbg.enterSubRule(84);
            	    try { dbg.enterDecision(84, decisionCanBacktrack[84]);

            	    int LA84_0 = input.LA(1);

            	    if ( (LA84_0==WS||(LA84_0>=NL && LA84_0<=COMMENT)) ) {
            	        alt84=1;
            	    }
            	    } finally {dbg.exitDecision(84);}

            	    switch (alt84) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:27: ws
            	            {
            	            dbg.location(516,27);
            	            pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors1668);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(84);}

            	    dbg.location(516,31);
            	    match(input,COMMA,FOLLOW_COMMA_in_webkitKeyframeSelectors1671); if (state.failed) return ;
            	    dbg.location(516,37);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:37: ( ws )?
            	    int alt85=2;
            	    try { dbg.enterSubRule(85);
            	    try { dbg.enterDecision(85, decisionCanBacktrack[85]);

            	    int LA85_0 = input.LA(1);

            	    if ( (LA85_0==WS||(LA85_0>=NL && LA85_0<=COMMENT)) ) {
            	        alt85=1;
            	    }
            	    } finally {dbg.exitDecision(85);}

            	    switch (alt85) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:516:37: ws
            	            {
            	            dbg.location(516,37);
            	            pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors1673);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(85);}

            	    dbg.location(516,41);
            	    if ( input.LA(1)==IDENT||input.LA(1)==PERCENTAGE ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);
            } finally {dbg.exitSubRule(86);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(517, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "webkitKeyframeSelectors");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "webkitKeyframeSelectors"


    // $ANTLR start "page"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:519:1: page : PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )* RBRACE ;
    public final void page() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "page");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(519, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:520:5: ( PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )* RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:520:7: PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )* RBRACE
            {
            dbg.location(520,7);
            match(input,PAGE_SYM,FOLLOW_PAGE_SYM_in_page1705); if (state.failed) return ;
            dbg.location(520,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:520:16: ( ws )?
            int alt87=2;
            try { dbg.enterSubRule(87);
            try { dbg.enterDecision(87, decisionCanBacktrack[87]);

            int LA87_0 = input.LA(1);

            if ( (LA87_0==WS||(LA87_0>=NL && LA87_0<=COMMENT)) ) {
                alt87=1;
            }
            } finally {dbg.exitDecision(87);}

            switch (alt87) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:520:16: ws
                    {
                    dbg.location(520,16);
                    pushFollow(FOLLOW_ws_in_page1707);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(87);}

            dbg.location(520,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:520:20: ( IDENT ( ws )? )?
            int alt89=2;
            try { dbg.enterSubRule(89);
            try { dbg.enterDecision(89, decisionCanBacktrack[89]);

            int LA89_0 = input.LA(1);

            if ( (LA89_0==IDENT) ) {
                alt89=1;
            }
            } finally {dbg.exitDecision(89);}

            switch (alt89) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:520:22: IDENT ( ws )?
                    {
                    dbg.location(520,22);
                    match(input,IDENT,FOLLOW_IDENT_in_page1712); if (state.failed) return ;
                    dbg.location(520,28);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:520:28: ( ws )?
                    int alt88=2;
                    try { dbg.enterSubRule(88);
                    try { dbg.enterDecision(88, decisionCanBacktrack[88]);

                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==WS||(LA88_0>=NL && LA88_0<=COMMENT)) ) {
                        alt88=1;
                    }
                    } finally {dbg.exitDecision(88);}

                    switch (alt88) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:520:28: ws
                            {
                            dbg.location(520,28);
                            pushFollow(FOLLOW_ws_in_page1714);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(88);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(89);}

            dbg.location(520,35);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:520:35: ( pseudoPage ( ws )? )?
            int alt91=2;
            try { dbg.enterSubRule(91);
            try { dbg.enterDecision(91, decisionCanBacktrack[91]);

            int LA91_0 = input.LA(1);

            if ( (LA91_0==COLON) ) {
                alt91=1;
            }
            } finally {dbg.exitDecision(91);}

            switch (alt91) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:520:36: pseudoPage ( ws )?
                    {
                    dbg.location(520,36);
                    pushFollow(FOLLOW_pseudoPage_in_page1721);
                    pseudoPage();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(520,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:520:47: ( ws )?
                    int alt90=2;
                    try { dbg.enterSubRule(90);
                    try { dbg.enterDecision(90, decisionCanBacktrack[90]);

                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==WS||(LA90_0>=NL && LA90_0<=COMMENT)) ) {
                        alt90=1;
                    }
                    } finally {dbg.exitDecision(90);}

                    switch (alt90) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:520:47: ws
                            {
                            dbg.location(520,47);
                            pushFollow(FOLLOW_ws_in_page1723);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(90);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(91);}

            dbg.location(521,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_page1736); if (state.failed) return ;
            dbg.location(521,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:521:16: ( ws )?
            int alt92=2;
            try { dbg.enterSubRule(92);
            try { dbg.enterDecision(92, decisionCanBacktrack[92]);

            int LA92_0 = input.LA(1);

            if ( (LA92_0==WS||(LA92_0>=NL && LA92_0<=COMMENT)) ) {
                alt92=1;
            }
            } finally {dbg.exitDecision(92);}

            switch (alt92) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:521:16: ws
                    {
                    dbg.location(521,16);
                    pushFollow(FOLLOW_ws_in_page1738);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(92);}

            dbg.location(524,13);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:13: ( ( propertyDeclaration | margin ) ( ws )? )?
            int alt95=2;
            try { dbg.enterSubRule(95);
            try { dbg.enterDecision(95, decisionCanBacktrack[95]);

            int LA95_0 = input.LA(1);

            if ( (LA95_0==IDENT||LA95_0==MEDIA_SYM||LA95_0==GEN||LA95_0==AT_IDENT||(LA95_0>=TOPLEFTCORNER_SYM && LA95_0<=RIGHTBOTTOM_SYM)||LA95_0==MINUS||(LA95_0>=HASH_SYMBOL && LA95_0<=DOT)||LA95_0==STAR||LA95_0==SASS_VAR) ) {
                alt95=1;
            }
            } finally {dbg.exitDecision(95);}

            switch (alt95) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:14: ( propertyDeclaration | margin ) ( ws )?
                    {
                    dbg.location(524,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:14: ( propertyDeclaration | margin )
                    int alt93=2;
                    try { dbg.enterSubRule(93);
                    try { dbg.enterDecision(93, decisionCanBacktrack[93]);

                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==IDENT||LA93_0==MEDIA_SYM||LA93_0==GEN||LA93_0==AT_IDENT||LA93_0==MINUS||(LA93_0>=HASH_SYMBOL && LA93_0<=DOT)||LA93_0==STAR||LA93_0==SASS_VAR) ) {
                        alt93=1;
                    }
                    else if ( ((LA93_0>=TOPLEFTCORNER_SYM && LA93_0<=RIGHTBOTTOM_SYM)) ) {
                        alt93=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 93, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(93);}

                    switch (alt93) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:15: propertyDeclaration
                            {
                            dbg.location(524,15);
                            pushFollow(FOLLOW_propertyDeclaration_in_page1781);
                            propertyDeclaration();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:35: margin
                            {
                            dbg.location(524,35);
                            pushFollow(FOLLOW_margin_in_page1783);
                            margin();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(93);}

                    dbg.location(524,43);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:43: ( ws )?
                    int alt94=2;
                    try { dbg.enterSubRule(94);
                    try { dbg.enterDecision(94, decisionCanBacktrack[94]);

                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==WS||(LA94_0>=NL && LA94_0<=COMMENT)) ) {
                        alt94=1;
                    }
                    } finally {dbg.exitDecision(94);}

                    switch (alt94) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:43: ws
                            {
                            dbg.location(524,43);
                            pushFollow(FOLLOW_ws_in_page1786);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(94);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(95);}

            dbg.location(524,49);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:49: ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )*
            try { dbg.enterSubRule(100);

            loop100:
            do {
                int alt100=2;
                try { dbg.enterDecision(100, decisionCanBacktrack[100]);

                int LA100_0 = input.LA(1);

                if ( (LA100_0==SEMI) ) {
                    alt100=1;
                }


                } finally {dbg.exitDecision(100);}

                switch (alt100) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:50: SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )?
            	    {
            	    dbg.location(524,50);
            	    match(input,SEMI,FOLLOW_SEMI_in_page1792); if (state.failed) return ;
            	    dbg.location(524,55);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:55: ( ws )?
            	    int alt96=2;
            	    try { dbg.enterSubRule(96);
            	    try { dbg.enterDecision(96, decisionCanBacktrack[96]);

            	    int LA96_0 = input.LA(1);

            	    if ( (LA96_0==WS||(LA96_0>=NL && LA96_0<=COMMENT)) ) {
            	        alt96=1;
            	    }
            	    } finally {dbg.exitDecision(96);}

            	    switch (alt96) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:55: ws
            	            {
            	            dbg.location(524,55);
            	            pushFollow(FOLLOW_ws_in_page1794);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(96);}

            	    dbg.location(524,59);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:59: ( ( propertyDeclaration | margin ) ( ws )? )?
            	    int alt99=2;
            	    try { dbg.enterSubRule(99);
            	    try { dbg.enterDecision(99, decisionCanBacktrack[99]);

            	    int LA99_0 = input.LA(1);

            	    if ( (LA99_0==IDENT||LA99_0==MEDIA_SYM||LA99_0==GEN||LA99_0==AT_IDENT||(LA99_0>=TOPLEFTCORNER_SYM && LA99_0<=RIGHTBOTTOM_SYM)||LA99_0==MINUS||(LA99_0>=HASH_SYMBOL && LA99_0<=DOT)||LA99_0==STAR||LA99_0==SASS_VAR) ) {
            	        alt99=1;
            	    }
            	    } finally {dbg.exitDecision(99);}

            	    switch (alt99) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:60: ( propertyDeclaration | margin ) ( ws )?
            	            {
            	            dbg.location(524,60);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:60: ( propertyDeclaration | margin )
            	            int alt97=2;
            	            try { dbg.enterSubRule(97);
            	            try { dbg.enterDecision(97, decisionCanBacktrack[97]);

            	            int LA97_0 = input.LA(1);

            	            if ( (LA97_0==IDENT||LA97_0==MEDIA_SYM||LA97_0==GEN||LA97_0==AT_IDENT||LA97_0==MINUS||(LA97_0>=HASH_SYMBOL && LA97_0<=DOT)||LA97_0==STAR||LA97_0==SASS_VAR) ) {
            	                alt97=1;
            	            }
            	            else if ( ((LA97_0>=TOPLEFTCORNER_SYM && LA97_0<=RIGHTBOTTOM_SYM)) ) {
            	                alt97=2;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return ;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 97, 0, input);

            	                dbg.recognitionException(nvae);
            	                throw nvae;
            	            }
            	            } finally {dbg.exitDecision(97);}

            	            switch (alt97) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:61: propertyDeclaration
            	                    {
            	                    dbg.location(524,61);
            	                    pushFollow(FOLLOW_propertyDeclaration_in_page1799);
            	                    propertyDeclaration();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;
            	                case 2 :
            	                    dbg.enterAlt(2);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:81: margin
            	                    {
            	                    dbg.location(524,81);
            	                    pushFollow(FOLLOW_margin_in_page1801);
            	                    margin();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(97);}

            	            dbg.location(524,89);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:89: ( ws )?
            	            int alt98=2;
            	            try { dbg.enterSubRule(98);
            	            try { dbg.enterDecision(98, decisionCanBacktrack[98]);

            	            int LA98_0 = input.LA(1);

            	            if ( (LA98_0==WS||(LA98_0>=NL && LA98_0<=COMMENT)) ) {
            	                alt98=1;
            	            }
            	            } finally {dbg.exitDecision(98);}

            	            switch (alt98) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:524:89: ws
            	                    {
            	                    dbg.location(524,89);
            	                    pushFollow(FOLLOW_ws_in_page1804);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(98);}


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(99);}


            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);
            } finally {dbg.exitSubRule(100);}

            dbg.location(525,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_page1819); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(526, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "page");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "page"


    // $ANTLR start "counterStyle"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:528:1: counterStyle : COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
    public final void counterStyle() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "counterStyle");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(528, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:529:5: ( COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:529:7: COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
            {
            dbg.location(529,7);
            match(input,COUNTER_STYLE_SYM,FOLLOW_COUNTER_STYLE_SYM_in_counterStyle1840); if (state.failed) return ;
            dbg.location(529,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:529:25: ( ws )?
            int alt101=2;
            try { dbg.enterSubRule(101);
            try { dbg.enterDecision(101, decisionCanBacktrack[101]);

            int LA101_0 = input.LA(1);

            if ( (LA101_0==WS||(LA101_0>=NL && LA101_0<=COMMENT)) ) {
                alt101=1;
            }
            } finally {dbg.exitDecision(101);}

            switch (alt101) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:529:25: ws
                    {
                    dbg.location(529,25);
                    pushFollow(FOLLOW_ws_in_counterStyle1842);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(101);}

            dbg.location(529,29);
            match(input,IDENT,FOLLOW_IDENT_in_counterStyle1845); if (state.failed) return ;
            dbg.location(529,35);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:529:35: ( ws )?
            int alt102=2;
            try { dbg.enterSubRule(102);
            try { dbg.enterDecision(102, decisionCanBacktrack[102]);

            int LA102_0 = input.LA(1);

            if ( (LA102_0==WS||(LA102_0>=NL && LA102_0<=COMMENT)) ) {
                alt102=1;
            }
            } finally {dbg.exitDecision(102);}

            switch (alt102) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:529:35: ws
                    {
                    dbg.location(529,35);
                    pushFollow(FOLLOW_ws_in_counterStyle1847);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(102);}

            dbg.location(530,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_counterStyle1858); if (state.failed) return ;
            dbg.location(530,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:16: ( ws )?
            int alt103=2;
            try { dbg.enterSubRule(103);
            try { dbg.enterDecision(103, decisionCanBacktrack[103]);

            int LA103_0 = input.LA(1);

            if ( (LA103_0==WS||(LA103_0>=NL && LA103_0<=COMMENT)) ) {
                alt103=1;
            }
            } finally {dbg.exitDecision(103);}

            switch (alt103) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:530:16: ws
                    {
                    dbg.location(530,16);
                    pushFollow(FOLLOW_ws_in_counterStyle1860);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(103);}

            dbg.location(530,20);
            pushFollow(FOLLOW_syncToDeclarationsRule_in_counterStyle1863);
            syncToDeclarationsRule();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(531,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:531:3: ( declarations )?
            int alt104=2;
            try { dbg.enterSubRule(104);
            try { dbg.enterDecision(104, decisionCanBacktrack[104]);

            int LA104_0 = input.LA(1);

            if ( ((LA104_0>=SEMI && LA104_0<=IDENT)||(LA104_0>=IMPORT_SYM && LA104_0<=MEDIA_SYM)||LA104_0==GEN||(LA104_0>=COLON && LA104_0<=AT_IDENT)||LA104_0==MOZ_DOCUMENT_SYM||LA104_0==WEBKIT_KEYFRAMES_SYM||(LA104_0>=PAGE_SYM && LA104_0<=FONT_FACE_SYM)||LA104_0==MINUS||LA104_0==GREATER||(LA104_0>=HASH_SYMBOL && LA104_0<=PIPE)||LA104_0==LESS_AND||LA104_0==SASS_VAR||(LA104_0>=SASS_MIXIN && LA104_0<=SASS_INCLUDE)||LA104_0==SASS_EXTEND||(LA104_0>=SASS_DEBUG && LA104_0<=SASS_IF)||(LA104_0>=SASS_FOR && LA104_0<=SASS_WHILE)||(LA104_0>=SASS_RETURN && LA104_0<=SASS_CONTENT)) ) {
                alt104=1;
            }
            } finally {dbg.exitDecision(104);}

            switch (alt104) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:531:3: declarations
                    {
                    dbg.location(531,3);
                    pushFollow(FOLLOW_declarations_in_counterStyle1867);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(104);}

            dbg.location(532,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_counterStyle1878); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(533, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "counterStyle");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "counterStyle"


    // $ANTLR start "fontFace"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:535:1: fontFace : FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
    public final void fontFace() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fontFace");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(535, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:5: ( FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:7: FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
            {
            dbg.location(536,7);
            match(input,FONT_FACE_SYM,FOLLOW_FONT_FACE_SYM_in_fontFace1899); if (state.failed) return ;
            dbg.location(536,21);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:21: ( ws )?
            int alt105=2;
            try { dbg.enterSubRule(105);
            try { dbg.enterDecision(105, decisionCanBacktrack[105]);

            int LA105_0 = input.LA(1);

            if ( (LA105_0==WS||(LA105_0>=NL && LA105_0<=COMMENT)) ) {
                alt105=1;
            }
            } finally {dbg.exitDecision(105);}

            switch (alt105) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:536:21: ws
                    {
                    dbg.location(536,21);
                    pushFollow(FOLLOW_ws_in_fontFace1901);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(105);}

            dbg.location(537,9);
            match(input,LBRACE,FOLLOW_LBRACE_in_fontFace1912); if (state.failed) return ;
            dbg.location(537,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:537:16: ( ws )?
            int alt106=2;
            try { dbg.enterSubRule(106);
            try { dbg.enterDecision(106, decisionCanBacktrack[106]);

            int LA106_0 = input.LA(1);

            if ( (LA106_0==WS||(LA106_0>=NL && LA106_0<=COMMENT)) ) {
                alt106=1;
            }
            } finally {dbg.exitDecision(106);}

            switch (alt106) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:537:16: ws
                    {
                    dbg.location(537,16);
                    pushFollow(FOLLOW_ws_in_fontFace1914);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(106);}

            dbg.location(537,20);
            pushFollow(FOLLOW_syncToDeclarationsRule_in_fontFace1917);
            syncToDeclarationsRule();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(538,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:538:3: ( declarations )?
            int alt107=2;
            try { dbg.enterSubRule(107);
            try { dbg.enterDecision(107, decisionCanBacktrack[107]);

            int LA107_0 = input.LA(1);

            if ( ((LA107_0>=SEMI && LA107_0<=IDENT)||(LA107_0>=IMPORT_SYM && LA107_0<=MEDIA_SYM)||LA107_0==GEN||(LA107_0>=COLON && LA107_0<=AT_IDENT)||LA107_0==MOZ_DOCUMENT_SYM||LA107_0==WEBKIT_KEYFRAMES_SYM||(LA107_0>=PAGE_SYM && LA107_0<=FONT_FACE_SYM)||LA107_0==MINUS||LA107_0==GREATER||(LA107_0>=HASH_SYMBOL && LA107_0<=PIPE)||LA107_0==LESS_AND||LA107_0==SASS_VAR||(LA107_0>=SASS_MIXIN && LA107_0<=SASS_INCLUDE)||LA107_0==SASS_EXTEND||(LA107_0>=SASS_DEBUG && LA107_0<=SASS_IF)||(LA107_0>=SASS_FOR && LA107_0<=SASS_WHILE)||(LA107_0>=SASS_RETURN && LA107_0<=SASS_CONTENT)) ) {
                alt107=1;
            }
            } finally {dbg.exitDecision(107);}

            switch (alt107) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:538:3: declarations
                    {
                    dbg.location(538,3);
                    pushFollow(FOLLOW_declarations_in_fontFace1921);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(107);}

            dbg.location(539,9);
            match(input,RBRACE,FOLLOW_RBRACE_in_fontFace1932); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(540, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fontFace");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fontFace"


    // $ANTLR start "margin"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:542:1: margin : margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
    public final void margin() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "margin");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(542, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:543:2: ( margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:543:4: margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
            {
            dbg.location(543,4);
            pushFollow(FOLLOW_margin_sym_in_margin1947);
            margin_sym();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(543,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:543:15: ( ws )?
            int alt108=2;
            try { dbg.enterSubRule(108);
            try { dbg.enterDecision(108, decisionCanBacktrack[108]);

            int LA108_0 = input.LA(1);

            if ( (LA108_0==WS||(LA108_0>=NL && LA108_0<=COMMENT)) ) {
                alt108=1;
            }
            } finally {dbg.exitDecision(108);}

            switch (alt108) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:543:15: ws
                    {
                    dbg.location(543,15);
                    pushFollow(FOLLOW_ws_in_margin1949);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(108);}

            dbg.location(543,19);
            match(input,LBRACE,FOLLOW_LBRACE_in_margin1952); if (state.failed) return ;
            dbg.location(543,26);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:543:26: ( ws )?
            int alt109=2;
            try { dbg.enterSubRule(109);
            try { dbg.enterDecision(109, decisionCanBacktrack[109]);

            int LA109_0 = input.LA(1);

            if ( (LA109_0==WS||(LA109_0>=NL && LA109_0<=COMMENT)) ) {
                alt109=1;
            }
            } finally {dbg.exitDecision(109);}

            switch (alt109) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:543:26: ws
                    {
                    dbg.location(543,26);
                    pushFollow(FOLLOW_ws_in_margin1954);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(109);}

            dbg.location(543,30);
            pushFollow(FOLLOW_syncToDeclarationsRule_in_margin1957);
            syncToDeclarationsRule();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(543,53);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:543:53: ( declarations )?
            int alt110=2;
            try { dbg.enterSubRule(110);
            try { dbg.enterDecision(110, decisionCanBacktrack[110]);

            int LA110_0 = input.LA(1);

            if ( ((LA110_0>=SEMI && LA110_0<=IDENT)||(LA110_0>=IMPORT_SYM && LA110_0<=MEDIA_SYM)||LA110_0==GEN||(LA110_0>=COLON && LA110_0<=AT_IDENT)||LA110_0==MOZ_DOCUMENT_SYM||LA110_0==WEBKIT_KEYFRAMES_SYM||(LA110_0>=PAGE_SYM && LA110_0<=FONT_FACE_SYM)||LA110_0==MINUS||LA110_0==GREATER||(LA110_0>=HASH_SYMBOL && LA110_0<=PIPE)||LA110_0==LESS_AND||LA110_0==SASS_VAR||(LA110_0>=SASS_MIXIN && LA110_0<=SASS_INCLUDE)||LA110_0==SASS_EXTEND||(LA110_0>=SASS_DEBUG && LA110_0<=SASS_IF)||(LA110_0>=SASS_FOR && LA110_0<=SASS_WHILE)||(LA110_0>=SASS_RETURN && LA110_0<=SASS_CONTENT)) ) {
                alt110=1;
            }
            } finally {dbg.exitDecision(110);}

            switch (alt110) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:543:53: declarations
                    {
                    dbg.location(543,53);
                    pushFollow(FOLLOW_declarations_in_margin1959);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(110);}

            dbg.location(543,67);
            match(input,RBRACE,FOLLOW_RBRACE_in_margin1962); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(544, 8);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "margin");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "margin"


    // $ANTLR start "margin_sym"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:546:1: margin_sym : ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM );
    public final void margin_sym() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "margin_sym");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(546, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:547:2: ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(547,2);
            if ( (input.LA(1)>=TOPLEFTCORNER_SYM && input.LA(1)<=RIGHTBOTTOM_SYM) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(564, 8);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "margin_sym");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "margin_sym"


    // $ANTLR start "pseudoPage"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:566:1: pseudoPage : COLON IDENT ;
    public final void pseudoPage() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "pseudoPage");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(566, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:567:5: ( COLON IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:567:7: COLON IDENT
            {
            dbg.location(567,7);
            match(input,COLON,FOLLOW_COLON_in_pseudoPage2191); if (state.failed) return ;
            dbg.location(567,13);
            match(input,IDENT,FOLLOW_IDENT_in_pseudoPage2193); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(568, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pseudoPage");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "pseudoPage"


    // $ANTLR start "operator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:570:1: operator : ( SOLIDUS | COMMA );
    public final void operator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "operator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(570, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:571:5: ( SOLIDUS | COMMA )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(571,5);
            if ( input.LA(1)==COMMA||input.LA(1)==SOLIDUS ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(573, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "operator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "operator"


    // $ANTLR start "unaryOperator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:575:1: unaryOperator : ( MINUS | PLUS );
    public final void unaryOperator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "unaryOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(575, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:576:5: ( MINUS | PLUS )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(576,5);
            if ( (input.LA(1)>=MINUS && input.LA(1)<=PLUS) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(578, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unaryOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "unaryOperator"


    // $ANTLR start "property"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:580:1: property : ( ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression | IDENT | GEN | {...}? cp_variable ) ( ws )? ;
    public final void property() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "property");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(580, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:581:5: ( ( ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression | IDENT | GEN | {...}? cp_variable ) ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:582:5: ( ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression | IDENT | GEN | {...}? cp_variable ) ( ws )?
            {
            dbg.location(582,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:582:5: ( ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression | IDENT | GEN | {...}? cp_variable )
            int alt111=4;
            try { dbg.enterSubRule(111);
            try { dbg.enterDecision(111, decisionCanBacktrack[111]);

            int LA111_0 = input.LA(1);

            if ( (LA111_0==HASH_SYMBOL) && (synpred11_Css3())) {
                alt111=1;
            }
            else if ( (LA111_0==IDENT) ) {
                int LA111_2 = input.LA(2);

                if ( (synpred11_Css3()) ) {
                    alt111=1;
                }
                else if ( (true) ) {
                    alt111=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 111, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA111_0==MINUS||(LA111_0>=HASH && LA111_0<=DOT)) && (synpred11_Css3())) {
                alt111=1;
            }
            else if ( (LA111_0==GEN) ) {
                alt111=3;
            }
            else if ( (LA111_0==MEDIA_SYM||LA111_0==AT_IDENT||LA111_0==SASS_VAR) ) {
                alt111=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(111);}

            switch (alt111) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:585:9: ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )=> sass_declaration_interpolation_expression
                    {
                    dbg.location(585,53);
                    pushFollow(FOLLOW_sass_declaration_interpolation_expression_in_property2325);
                    sass_declaration_interpolation_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:586:11: IDENT
                    {
                    dbg.location(586,11);
                    match(input,IDENT,FOLLOW_IDENT_in_property2337); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:587:11: GEN
                    {
                    dbg.location(587,11);
                    match(input,GEN,FOLLOW_GEN_in_property2350); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:588:11: {...}? cp_variable
                    {
                    dbg.location(588,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "property", "isCssPreprocessorSource()");
                    }
                    dbg.location(588,40);
                    pushFollow(FOLLOW_cp_variable_in_property2365);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(111);}

            dbg.location(589,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:589:7: ( ws )?
            int alt112=2;
            try { dbg.enterSubRule(112);
            try { dbg.enterDecision(112, decisionCanBacktrack[112]);

            int LA112_0 = input.LA(1);

            if ( (LA112_0==WS||(LA112_0>=NL && LA112_0<=COMMENT)) ) {
                alt112=1;
            }
            } finally {dbg.exitDecision(112);}

            switch (alt112) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:589:7: ws
                    {
                    dbg.location(589,7);
                    pushFollow(FOLLOW_ws_in_property2373);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(112);}


            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(COLON)); 
                
        }
        finally {
        }
        dbg.location(590, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "property");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "property"


    // $ANTLR start "rule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:595:1: rule : selectorsGroup ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void rule() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "rule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(595, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:596:5: ( selectorsGroup ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:597:5: selectorsGroup ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(597,5);
            pushFollow(FOLLOW_selectorsGroup_in_rule2408);
            selectorsGroup();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(597,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:597:20: ( ws )?
            int alt113=2;
            try { dbg.enterSubRule(113);
            try { dbg.enterDecision(113, decisionCanBacktrack[113]);

            int LA113_0 = input.LA(1);

            if ( (LA113_0==WS||(LA113_0>=NL && LA113_0<=COMMENT)) ) {
                alt113=1;
            }
            } finally {dbg.exitDecision(113);}

            switch (alt113) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:597:20: ws
                    {
                    dbg.location(597,20);
                    pushFollow(FOLLOW_ws_in_rule2410);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(113);}

            dbg.location(598,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_rule2417); if (state.failed) return ;
            dbg.location(598,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:12: ( ws )?
            int alt114=2;
            try { dbg.enterSubRule(114);
            try { dbg.enterDecision(114, decisionCanBacktrack[114]);

            int LA114_0 = input.LA(1);

            if ( (LA114_0==WS||(LA114_0>=NL && LA114_0<=COMMENT)) ) {
                alt114=1;
            }
            } finally {dbg.exitDecision(114);}

            switch (alt114) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:598:12: ws
                    {
                    dbg.location(598,12);
                    pushFollow(FOLLOW_ws_in_rule2419);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(114);}

            dbg.location(598,16);
            pushFollow(FOLLOW_syncToFollow_in_rule2422);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(599,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:599:9: ( declarations )?
            int alt115=2;
            try { dbg.enterSubRule(115);
            try { dbg.enterDecision(115, decisionCanBacktrack[115]);

            int LA115_0 = input.LA(1);

            if ( ((LA115_0>=SEMI && LA115_0<=IDENT)||(LA115_0>=IMPORT_SYM && LA115_0<=MEDIA_SYM)||LA115_0==GEN||(LA115_0>=COLON && LA115_0<=AT_IDENT)||LA115_0==MOZ_DOCUMENT_SYM||LA115_0==WEBKIT_KEYFRAMES_SYM||(LA115_0>=PAGE_SYM && LA115_0<=FONT_FACE_SYM)||LA115_0==MINUS||LA115_0==GREATER||(LA115_0>=HASH_SYMBOL && LA115_0<=PIPE)||LA115_0==LESS_AND||LA115_0==SASS_VAR||(LA115_0>=SASS_MIXIN && LA115_0<=SASS_INCLUDE)||LA115_0==SASS_EXTEND||(LA115_0>=SASS_DEBUG && LA115_0<=SASS_IF)||(LA115_0>=SASS_FOR && LA115_0<=SASS_WHILE)||(LA115_0>=SASS_RETURN && LA115_0<=SASS_CONTENT)) ) {
                alt115=1;
            }
            } finally {dbg.exitDecision(115);}

            switch (alt115) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:599:9: declarations
                    {
                    dbg.location(599,9);
                    pushFollow(FOLLOW_declarations_in_rule2433);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(115);}

            dbg.location(600,5);
            match(input,RBRACE,FOLLOW_RBRACE_in_rule2440); if (state.failed) return ;

            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(RBRACE));
                    input.consume(); //consume the RBRACE as well   
                
        }
        finally {
        }
        dbg.location(601, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "rule"


    // $ANTLR start "declarations"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:608:1: declarations : ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
    public final void declarations() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "declarations");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(608, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:609:5: ( ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:610:5: ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            {
            dbg.location(610,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:610:5: ( ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
            int cnt120=0;
            try { dbg.enterSubRule(120);

            loop120:
            do {
                int alt120=3;
                try { dbg.enterDecision(120, decisionCanBacktrack[120]);

                int LA120_0 = input.LA(1);

                if ( (LA120_0==IDENT||(LA120_0>=IMPORT_SYM && LA120_0<=MEDIA_SYM)||LA120_0==GEN||(LA120_0>=COLON && LA120_0<=AT_IDENT)||LA120_0==MOZ_DOCUMENT_SYM||LA120_0==WEBKIT_KEYFRAMES_SYM||(LA120_0>=PAGE_SYM && LA120_0<=FONT_FACE_SYM)||LA120_0==MINUS||LA120_0==GREATER||(LA120_0>=HASH_SYMBOL && LA120_0<=PIPE)||LA120_0==LESS_AND||LA120_0==SASS_VAR||(LA120_0>=SASS_MIXIN && LA120_0<=SASS_INCLUDE)||LA120_0==SASS_EXTEND||(LA120_0>=SASS_DEBUG && LA120_0<=SASS_IF)||(LA120_0>=SASS_FOR && LA120_0<=SASS_WHILE)||(LA120_0>=SASS_RETURN && LA120_0<=SASS_CONTENT)) ) {
                    alt120=1;
                }
                else if ( (LA120_0==SEMI) ) {
                    alt120=2;
                }


                } finally {dbg.exitDecision(120);}

                switch (alt120) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:611:10: ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    {
            	    dbg.location(611,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:611:10: ( declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:611:12: declaration ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
            	    {
            	    dbg.location(611,12);
            	    pushFollow(FOLLOW_declaration_in_declarations2488);
            	    declaration();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(611,24);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:611:24: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
            	    int alt117=2;
            	    try { dbg.enterSubRule(117);
            	    try { dbg.enterDecision(117, decisionCanBacktrack[117]);

            	    try {
            	        isCyclicDecision = true;
            	        alt117 = dfa117.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(117);}

            	    switch (alt117) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:611:25: ( ( ws )? SEMI )=> ( ws )? SEMI
            	            {
            	            dbg.location(611,37);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:611:37: ( ws )?
            	            int alt116=2;
            	            try { dbg.enterSubRule(116);
            	            try { dbg.enterDecision(116, decisionCanBacktrack[116]);

            	            int LA116_0 = input.LA(1);

            	            if ( (LA116_0==WS||(LA116_0>=NL && LA116_0<=COMMENT)) ) {
            	                alt116=1;
            	            }
            	            } finally {dbg.exitDecision(116);}

            	            switch (alt116) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:611:37: ws
            	                    {
            	                    dbg.location(611,37);
            	                    pushFollow(FOLLOW_ws_in_declarations2498);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(116);}

            	            dbg.location(611,41);
            	            match(input,SEMI,FOLLOW_SEMI_in_declarations2501); if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(117);}

            	    dbg.location(611,48);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:611:48: ( ws )?
            	    int alt118=2;
            	    try { dbg.enterSubRule(118);
            	    try { dbg.enterDecision(118, decisionCanBacktrack[118]);

            	    int LA118_0 = input.LA(1);

            	    if ( (LA118_0==WS||(LA118_0>=NL && LA118_0<=COMMENT)) ) {
            	        alt118=1;
            	    }
            	    } finally {dbg.exitDecision(118);}

            	    switch (alt118) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:611:48: ws
            	            {
            	            dbg.location(611,48);
            	            pushFollow(FOLLOW_ws_in_declarations2505);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(118);}


            	    }


            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:10: ( SEMI ( ws )? )
            	    {
            	    dbg.location(613,10);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:10: ( SEMI ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:12: SEMI ( ws )?
            	    {
            	    dbg.location(613,12);
            	    match(input,SEMI,FOLLOW_SEMI_in_declarations2532); if (state.failed) return ;
            	    dbg.location(613,17);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:17: ( ws )?
            	    int alt119=2;
            	    try { dbg.enterSubRule(119);
            	    try { dbg.enterDecision(119, decisionCanBacktrack[119]);

            	    int LA119_0 = input.LA(1);

            	    if ( (LA119_0==WS||(LA119_0>=NL && LA119_0<=COMMENT)) ) {
            	        alt119=1;
            	    }
            	    } finally {dbg.exitDecision(119);}

            	    switch (alt119) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:613:17: ws
            	            {
            	            dbg.location(613,17);
            	            pushFollow(FOLLOW_ws_in_declarations2534);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(119);}


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt120 >= 1 ) break loop120;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(120, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt120++;
            } while (true);
            } finally {dbg.exitSubRule(120);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(615, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "declarations");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "declarations"


    // $ANTLR start "declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:617:1: declaration : ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_nested_properties )=> sass_nested_properties | ( propertyDeclaration )=> propertyDeclaration | ( property COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ LBRACE )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call | ( rule )=> rule | {...}? at_rule | {...}? sass_control | {...}? sass_extend | {...}? sass_debug | {...}? sass_content | {...}? sass_function_return | {...}? importItem );
    public final void declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(617, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:618:5: ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_nested_properties )=> sass_nested_properties | ( propertyDeclaration )=> propertyDeclaration | ( property COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ LBRACE )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call | ( rule )=> rule | {...}? at_rule | {...}? sass_control | {...}? sass_extend | {...}? sass_debug | {...}? sass_content | {...}? sass_function_return | {...}? importItem )
            int alt121=14;
            try { dbg.enterDecision(121, decisionCanBacktrack[121]);

            try {
                isCyclicDecision = true;
                alt121 = dfa121.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(121);}

            switch (alt121) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:5: ( cp_variable_declaration )=> cp_variable_declaration
                    {
                    dbg.location(619,32);
                    pushFollow(FOLLOW_cp_variable_declaration_in_declaration2569);
                    cp_variable_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:620:7: ( sass_nested_properties )=> sass_nested_properties
                    {
                    dbg.location(620,33);
                    pushFollow(FOLLOW_sass_nested_properties_in_declaration2582);
                    sass_nested_properties();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:7: ( propertyDeclaration )=> propertyDeclaration
                    {
                    dbg.location(621,30);
                    pushFollow(FOLLOW_propertyDeclaration_in_declaration2595);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:7: ( property COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration
                    {
                    dbg.location(623,63);
                    pushFollow(FOLLOW_propertyDeclaration_in_declaration2632);
                    propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:624:7: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ LBRACE )* LBRACE ) )=> cp_mixin_declaration
                    {
                    dbg.location(624,82);
                    pushFollow(FOLLOW_cp_mixin_declaration_in_declaration2674);
                    cp_mixin_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:625:7: ( cp_mixin_call )=> cp_mixin_call
                    {
                    dbg.location(625,24);
                    pushFollow(FOLLOW_cp_mixin_call_in_declaration2687);
                    cp_mixin_call();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:626:7: ( rule )=> rule
                    {
                    dbg.location(626,15);
                    pushFollow(FOLLOW_rule_in_declaration2700);
                    rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:627:7: {...}? at_rule
                    {
                    dbg.location(627,7);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isCssPreprocessorSource()");
                    }
                    dbg.location(627,36);
                    pushFollow(FOLLOW_at_rule_in_declaration2711);
                    at_rule();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:628:7: {...}? sass_control
                    {
                    dbg.location(628,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(628,25);
                    pushFollow(FOLLOW_sass_control_in_declaration2722);
                    sass_control();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:629:7: {...}? sass_extend
                    {
                    dbg.location(629,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(629,25);
                    pushFollow(FOLLOW_sass_extend_in_declaration2733);
                    sass_extend();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:630:7: {...}? sass_debug
                    {
                    dbg.location(630,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(630,25);
                    pushFollow(FOLLOW_sass_debug_in_declaration2744);
                    sass_debug();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:631:7: {...}? sass_content
                    {
                    dbg.location(631,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(631,25);
                    pushFollow(FOLLOW_sass_content_in_declaration2755);
                    sass_content();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:632:7: {...}? sass_function_return
                    {
                    dbg.location(632,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(632,25);
                    pushFollow(FOLLOW_sass_function_return_in_declaration2766);
                    sass_function_return();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:633:7: {...}? importItem
                    {
                    dbg.location(633,7);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "declaration", "isScssSource()");
                    }
                    dbg.location(633,25);
                    pushFollow(FOLLOW_importItem_in_declaration2777);
                    importItem();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(SEMI));
                
        }
        finally {
        }
        dbg.location(634, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "declaration"


    // $ANTLR start "selectorsGroup"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:640:1: selectorsGroup : ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression | selector ( ( ws )? COMMA ( ws )? selector )* );
    public final void selectorsGroup() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "selectorsGroup");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(640, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:641:5: ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression | selector ( ( ws )? COMMA ( ws )? selector )* )
            int alt125=2;
            try { dbg.enterDecision(125, decisionCanBacktrack[125]);

            try {
                isCyclicDecision = true;
                alt125 = dfa125.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(125);}

            switch (alt125) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:9: ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression
                    {
                    dbg.location(643,60);
                    pushFollow(FOLLOW_sass_selector_interpolation_expression_in_selectorsGroup2846);
                    sass_selector_interpolation_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:645:9: selector ( ( ws )? COMMA ( ws )? selector )*
                    {
                    dbg.location(645,9);
                    pushFollow(FOLLOW_selector_in_selectorsGroup2859);
                    selector();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(645,18);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:645:18: ( ( ws )? COMMA ( ws )? selector )*
                    try { dbg.enterSubRule(124);

                    loop124:
                    do {
                        int alt124=2;
                        try { dbg.enterDecision(124, decisionCanBacktrack[124]);

                        try {
                            isCyclicDecision = true;
                            alt124 = dfa124.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(124);}

                        switch (alt124) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:645:19: ( ws )? COMMA ( ws )? selector
                    	    {
                    	    dbg.location(645,19);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:645:19: ( ws )?
                    	    int alt122=2;
                    	    try { dbg.enterSubRule(122);
                    	    try { dbg.enterDecision(122, decisionCanBacktrack[122]);

                    	    int LA122_0 = input.LA(1);

                    	    if ( (LA122_0==WS||(LA122_0>=NL && LA122_0<=COMMENT)) ) {
                    	        alt122=1;
                    	    }
                    	    } finally {dbg.exitDecision(122);}

                    	    switch (alt122) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:645:19: ws
                    	            {
                    	            dbg.location(645,19);
                    	            pushFollow(FOLLOW_ws_in_selectorsGroup2862);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(122);}

                    	    dbg.location(645,23);
                    	    match(input,COMMA,FOLLOW_COMMA_in_selectorsGroup2865); if (state.failed) return ;
                    	    dbg.location(645,29);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:645:29: ( ws )?
                    	    int alt123=2;
                    	    try { dbg.enterSubRule(123);
                    	    try { dbg.enterDecision(123, decisionCanBacktrack[123]);

                    	    int LA123_0 = input.LA(1);

                    	    if ( (LA123_0==WS||(LA123_0>=NL && LA123_0<=COMMENT)) ) {
                    	        alt123=1;
                    	    }
                    	    } finally {dbg.exitDecision(123);}

                    	    switch (alt123) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:645:29: ws
                    	            {
                    	            dbg.location(645,29);
                    	            pushFollow(FOLLOW_ws_in_selectorsGroup2867);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(123);}

                    	    dbg.location(645,33);
                    	    pushFollow(FOLLOW_selector_in_selectorsGroup2870);
                    	    selector();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop124;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(124);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(646, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "selectorsGroup");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "selectorsGroup"


    // $ANTLR start "selector"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:648:1: selector : simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )* ;
    public final void selector() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "selector");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(648, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:649:5: ( simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:649:7: simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )*
            {
            dbg.location(649,7);
            pushFollow(FOLLOW_simpleSelectorSequence_in_selector2897);
            simpleSelectorSequence();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(649,30);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:649:30: ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )*
            try { dbg.enterSubRule(129);

            loop129:
            do {
                int alt129=2;
                try { dbg.enterDecision(129, decisionCanBacktrack[129]);

                try {
                    isCyclicDecision = true;
                    alt129 = dfa129.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(129);}

                switch (alt129) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:649:32: ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence
            	    {
            	    dbg.location(649,32);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:649:32: ( ( ( ws )? combinator ( ws )? ) | ws )
            	    int alt128=2;
            	    try { dbg.enterSubRule(128);
            	    try { dbg.enterDecision(128, decisionCanBacktrack[128]);

            	    try {
            	        isCyclicDecision = true;
            	        alt128 = dfa128.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(128);}

            	    switch (alt128) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:649:33: ( ( ws )? combinator ( ws )? )
            	            {
            	            dbg.location(649,33);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:649:33: ( ( ws )? combinator ( ws )? )
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:649:34: ( ws )? combinator ( ws )?
            	            {
            	            dbg.location(649,34);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:649:34: ( ws )?
            	            int alt126=2;
            	            try { dbg.enterSubRule(126);
            	            try { dbg.enterDecision(126, decisionCanBacktrack[126]);

            	            int LA126_0 = input.LA(1);

            	            if ( (LA126_0==WS||(LA126_0>=NL && LA126_0<=COMMENT)) ) {
            	                alt126=1;
            	            }
            	            } finally {dbg.exitDecision(126);}

            	            switch (alt126) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:649:34: ws
            	                    {
            	                    dbg.location(649,34);
            	                    pushFollow(FOLLOW_ws_in_selector2903);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(126);}

            	            dbg.location(649,38);
            	            pushFollow(FOLLOW_combinator_in_selector2906);
            	            combinator();

            	            state._fsp--;
            	            if (state.failed) return ;
            	            dbg.location(649,49);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:649:49: ( ws )?
            	            int alt127=2;
            	            try { dbg.enterSubRule(127);
            	            try { dbg.enterDecision(127, decisionCanBacktrack[127]);

            	            int LA127_0 = input.LA(1);

            	            if ( (LA127_0==WS||(LA127_0>=NL && LA127_0<=COMMENT)) ) {
            	                alt127=1;
            	            }
            	            } finally {dbg.exitDecision(127);}

            	            switch (alt127) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:649:49: ws
            	                    {
            	                    dbg.location(649,49);
            	                    pushFollow(FOLLOW_ws_in_selector2908);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(127);}


            	            }


            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:649:54: ws
            	            {
            	            dbg.location(649,54);
            	            pushFollow(FOLLOW_ws_in_selector2912);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(128);}

            	    dbg.location(649,58);
            	    pushFollow(FOLLOW_simpleSelectorSequence_in_selector2915);
            	    simpleSelectorSequence();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);
            } finally {dbg.exitSubRule(129);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(650, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "selector");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "selector"


    // $ANTLR start "combinator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:652:1: combinator : ( PLUS | GREATER | TILDE );
    public final void combinator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "combinator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(652, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:653:5: ( PLUS | GREATER | TILDE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(653,5);
            if ( (input.LA(1)>=PLUS && input.LA(1)<=TILDE) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(655, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "combinator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "combinator"


    // $ANTLR start "simpleSelectorSequence"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:657:1: simpleSelectorSequence : ( ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* ) | elementSubsequent ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* );
    public final void simpleSelectorSequence() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "simpleSelectorSequence");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(657, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:658:2: ( ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* ) | elementSubsequent ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* )
            int alt134=2;
            try { dbg.enterDecision(134, decisionCanBacktrack[134]);

            int LA134_0 = input.LA(1);

            if ( (LA134_0==IDENT||LA134_0==GEN||(LA134_0>=STAR && LA134_0<=PIPE)||LA134_0==LESS_AND) ) {
                alt134=1;
            }
            else if ( (LA134_0==COLON||(LA134_0>=HASH_SYMBOL && LA134_0<=SASS_EXTEND_ONLY_SELECTOR)) ) {
                alt134=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(134);}

            switch (alt134) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:659:2: ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* )
                    {
                    dbg.location(659,2);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:659:2: ( typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )* )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:659:4: typeSelector ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    {
                    dbg.location(659,4);
                    pushFollow(FOLLOW_typeSelector_in_simpleSelectorSequence2968);
                    typeSelector();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(659,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:659:17: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    try { dbg.enterSubRule(131);

                    loop131:
                    do {
                        int alt131=2;
                        try { dbg.enterDecision(131, decisionCanBacktrack[131]);

                        try {
                            isCyclicDecision = true;
                            alt131 = dfa131.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(131);}

                        switch (alt131) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:659:18: ( ( ws )? esPred )=> ( ws )? elementSubsequent
                    	    {
                    	    dbg.location(659,32);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:659:32: ( ws )?
                    	    int alt130=2;
                    	    try { dbg.enterSubRule(130);
                    	    try { dbg.enterDecision(130, decisionCanBacktrack[130]);

                    	    int LA130_0 = input.LA(1);

                    	    if ( (LA130_0==WS||(LA130_0>=NL && LA130_0<=COMMENT)) ) {
                    	        alt130=1;
                    	    }
                    	    } finally {dbg.exitDecision(130);}

                    	    switch (alt130) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:659:32: ws
                    	            {
                    	            dbg.location(659,32);
                    	            pushFollow(FOLLOW_ws_in_simpleSelectorSequence2978);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(130);}

                    	    dbg.location(659,36);
                    	    pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence2981);
                    	    elementSubsequent();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop131;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(131);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:661:2: elementSubsequent ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    {
                    dbg.location(661,2);
                    pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence2992);
                    elementSubsequent();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(661,20);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:661:20: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*
                    try { dbg.enterSubRule(133);

                    loop133:
                    do {
                        int alt133=2;
                        try { dbg.enterDecision(133, decisionCanBacktrack[133]);

                        try {
                            isCyclicDecision = true;
                            alt133 = dfa133.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(133);}

                        switch (alt133) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:661:21: ( ( ws )? esPred )=> ( ws )? elementSubsequent
                    	    {
                    	    dbg.location(661,35);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:661:35: ( ws )?
                    	    int alt132=2;
                    	    try { dbg.enterSubRule(132);
                    	    try { dbg.enterDecision(132, decisionCanBacktrack[132]);

                    	    int LA132_0 = input.LA(1);

                    	    if ( (LA132_0==WS||(LA132_0>=NL && LA132_0<=COMMENT)) ) {
                    	        alt132=1;
                    	    }
                    	    } finally {dbg.exitDecision(132);}

                    	    switch (alt132) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:661:35: ws
                    	            {
                    	            dbg.location(661,35);
                    	            pushFollow(FOLLOW_ws_in_simpleSelectorSequence3002);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(132);}

                    	    dbg.location(661,39);
                    	    pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence3005);
                    	    elementSubsequent();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop133;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(133);}


                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                        reportError(rce);
                        consumeUntil(input, BitSet.of(LBRACE)); 
                    
        }
        finally {
        }
        dbg.location(662, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "simpleSelectorSequence");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "simpleSelectorSequence"


    // $ANTLR start "esPred"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:669:1: esPred : ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR );
    public final void esPred() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "esPred");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(669, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:670:5: ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(670,5);
            if ( input.LA(1)==COLON||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=SASS_EXTEND_ONLY_SELECTOR) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(671, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "esPred");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "esPred"


    // $ANTLR start "typeSelector"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:673:1: typeSelector options {k=2; } : ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName ;
    public final void typeSelector() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "typeSelector");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(673, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:675:3: ( ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:675:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName
            {
            dbg.location(675,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:675:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )?
            int alt135=2;
            try { dbg.enterSubRule(135);
            try { dbg.enterDecision(135, decisionCanBacktrack[135]);

            int LA135_0 = input.LA(1);

            if ( (LA135_0==IDENT) ) {
                int LA135_1 = input.LA(2);

                if ( (synpred23_Css3()) ) {
                    alt135=1;
                }
            }
            else if ( (LA135_0==STAR) ) {
                int LA135_2 = input.LA(2);

                if ( (synpred23_Css3()) ) {
                    alt135=1;
                }
            }
            else if ( (LA135_0==PIPE) && (synpred23_Css3())) {
                alt135=1;
            }
            } finally {dbg.exitDecision(135);}

            switch (alt135) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:675:7: ( ( IDENT | STAR )? PIPE )=> namespacePrefix
                    {
                    dbg.location(675,31);
                    pushFollow(FOLLOW_namespacePrefix_in_typeSelector3118);
                    namespacePrefix();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(135);}

            dbg.location(675,49);
            pushFollow(FOLLOW_elementName_in_typeSelector3122);
            elementName();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(676, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "typeSelector");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "typeSelector"


    // $ANTLR start "namespacePrefix"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:678:1: namespacePrefix : ( namespacePrefixName | STAR )? PIPE ;
    public final void namespacePrefix() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "namespacePrefix");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(678, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:679:3: ( ( namespacePrefixName | STAR )? PIPE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:679:5: ( namespacePrefixName | STAR )? PIPE
            {
            dbg.location(679,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:679:5: ( namespacePrefixName | STAR )?
            int alt136=3;
            try { dbg.enterSubRule(136);
            try { dbg.enterDecision(136, decisionCanBacktrack[136]);

            int LA136_0 = input.LA(1);

            if ( (LA136_0==IDENT) ) {
                alt136=1;
            }
            else if ( (LA136_0==STAR) ) {
                alt136=2;
            }
            } finally {dbg.exitDecision(136);}

            switch (alt136) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:679:7: namespacePrefixName
                    {
                    dbg.location(679,7);
                    pushFollow(FOLLOW_namespacePrefixName_in_namespacePrefix3137);
                    namespacePrefixName();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:679:29: STAR
                    {
                    dbg.location(679,29);
                    match(input,STAR,FOLLOW_STAR_in_namespacePrefix3141); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(136);}

            dbg.location(679,36);
            match(input,PIPE,FOLLOW_PIPE_in_namespacePrefix3145); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(680, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespacePrefix");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "namespacePrefix"


    // $ANTLR start "elementSubsequent"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:683:1: elementSubsequent : ({...}? sass_extend_only_selector | cssId | cssClass | slAttribute | pseudo ) ;
    public final void elementSubsequent() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "elementSubsequent");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(683, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:684:5: ( ({...}? sass_extend_only_selector | cssId | cssClass | slAttribute | pseudo ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:685:5: ({...}? sass_extend_only_selector | cssId | cssClass | slAttribute | pseudo )
            {
            dbg.location(685,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:685:5: ({...}? sass_extend_only_selector | cssId | cssClass | slAttribute | pseudo )
            int alt137=5;
            try { dbg.enterSubRule(137);
            try { dbg.enterDecision(137, decisionCanBacktrack[137]);

            switch ( input.LA(1) ) {
            case SASS_EXTEND_ONLY_SELECTOR:
                {
                alt137=1;
                }
                break;
            case HASH_SYMBOL:
            case HASH:
                {
                alt137=2;
                }
                break;
            case DOT:
                {
                alt137=3;
                }
                break;
            case LBRACKET:
                {
                alt137=4;
                }
                break;
            case COLON:
            case DCOLON:
                {
                alt137=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(137);}

            switch (alt137) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:686:9: {...}? sass_extend_only_selector
                    {
                    dbg.location(686,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "elementSubsequent", "isScssSource()");
                    }
                    dbg.location(686,27);
                    pushFollow(FOLLOW_sass_extend_only_selector_in_elementSubsequent3184);
                    sass_extend_only_selector();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:687:8: cssId
                    {
                    dbg.location(687,8);
                    pushFollow(FOLLOW_cssId_in_elementSubsequent3193);
                    cssId();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:688:8: cssClass
                    {
                    dbg.location(688,8);
                    pushFollow(FOLLOW_cssClass_in_elementSubsequent3202);
                    cssClass();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:689:11: slAttribute
                    {
                    dbg.location(689,11);
                    pushFollow(FOLLOW_slAttribute_in_elementSubsequent3214);
                    slAttribute();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:690:11: pseudo
                    {
                    dbg.location(690,11);
                    pushFollow(FOLLOW_pseudo_in_elementSubsequent3226);
                    pseudo();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(137);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(692, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "elementSubsequent");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "elementSubsequent"


    // $ANTLR start "cssId"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:695:1: cssId : ( HASH | ( HASH_SYMBOL NAME ) );
    public final void cssId() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cssId");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(695, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:5: ( HASH | ( HASH_SYMBOL NAME ) )
            int alt138=2;
            try { dbg.enterDecision(138, decisionCanBacktrack[138]);

            int LA138_0 = input.LA(1);

            if ( (LA138_0==HASH) ) {
                alt138=1;
            }
            else if ( (LA138_0==HASH_SYMBOL) ) {
                alt138=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(138);}

            switch (alt138) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:7: HASH
                    {
                    dbg.location(696,7);
                    match(input,HASH,FOLLOW_HASH_in_cssId3254); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:14: ( HASH_SYMBOL NAME )
                    {
                    dbg.location(696,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:14: ( HASH_SYMBOL NAME )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:696:16: HASH_SYMBOL NAME
                    {
                    dbg.location(696,16);
                    match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_cssId3260); if (state.failed) return ;
                    dbg.location(696,28);
                    match(input,NAME,FOLLOW_NAME_in_cssId3262); if (state.failed) return ;

                    }


                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(WS, IDENT, LBRACE)); 
                
        }
        finally {
        }
        dbg.location(697, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cssId");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cssId"


    // $ANTLR start "cssClass"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:703:1: cssClass : DOT ( IDENT | GEN ) ;
    public final void cssClass() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cssClass");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(703, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:704:5: ( DOT ( IDENT | GEN ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:704:7: DOT ( IDENT | GEN )
            {
            dbg.location(704,7);
            match(input,DOT,FOLLOW_DOT_in_cssClass3290); if (state.failed) return ;
            dbg.location(704,11);
            if ( input.LA(1)==IDENT||input.LA(1)==GEN ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(WS, IDENT, LBRACE)); 
                
        }
        finally {
        }
        dbg.location(705, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cssClass");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cssClass"


    // $ANTLR start "elementName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:712:1: elementName : ( ( IDENT | GEN | LESS_AND ) | STAR );
    public final void elementName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "elementName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(712, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:713:5: ( ( IDENT | GEN | LESS_AND ) | STAR )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(713,5);
            if ( input.LA(1)==IDENT||input.LA(1)==GEN||input.LA(1)==STAR||input.LA(1)==LESS_AND ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(714, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "elementName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "elementName"


    // $ANTLR start "slAttribute"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:716:1: slAttribute : LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET ;
    public final void slAttribute() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "slAttribute");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(716, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:717:5: ( LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:717:7: LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET
            {
            dbg.location(717,7);
            match(input,LBRACKET,FOLLOW_LBRACKET_in_slAttribute3364); if (state.failed) return ;
            dbg.location(718,6);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:718:6: ( namespacePrefix )?
            int alt139=2;
            try { dbg.enterSubRule(139);
            try { dbg.enterDecision(139, decisionCanBacktrack[139]);

            int LA139_0 = input.LA(1);

            if ( (LA139_0==IDENT) ) {
                int LA139_1 = input.LA(2);

                if ( (LA139_1==PIPE) ) {
                    alt139=1;
                }
            }
            else if ( ((LA139_0>=STAR && LA139_0<=PIPE)) ) {
                alt139=1;
            }
            } finally {dbg.exitDecision(139);}

            switch (alt139) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:718:6: namespacePrefix
                    {
                    dbg.location(718,6);
                    pushFollow(FOLLOW_namespacePrefix_in_slAttribute3371);
                    namespacePrefix();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(139);}

            dbg.location(718,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:718:23: ( ws )?
            int alt140=2;
            try { dbg.enterSubRule(140);
            try { dbg.enterDecision(140, decisionCanBacktrack[140]);

            int LA140_0 = input.LA(1);

            if ( (LA140_0==WS||(LA140_0>=NL && LA140_0<=COMMENT)) ) {
                alt140=1;
            }
            } finally {dbg.exitDecision(140);}

            switch (alt140) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:718:23: ws
                    {
                    dbg.location(718,23);
                    pushFollow(FOLLOW_ws_in_slAttribute3374);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(140);}

            dbg.location(719,9);
            pushFollow(FOLLOW_slAttributeName_in_slAttribute3385);
            slAttributeName();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(719,25);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:719:25: ( ws )?
            int alt141=2;
            try { dbg.enterSubRule(141);
            try { dbg.enterDecision(141, decisionCanBacktrack[141]);

            int LA141_0 = input.LA(1);

            if ( (LA141_0==WS||(LA141_0>=NL && LA141_0<=COMMENT)) ) {
                alt141=1;
            }
            } finally {dbg.exitDecision(141);}

            switch (alt141) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:719:25: ws
                    {
                    dbg.location(719,25);
                    pushFollow(FOLLOW_ws_in_slAttribute3387);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(141);}

            dbg.location(721,13);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:721:13: ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )?
            int alt144=2;
            try { dbg.enterSubRule(144);
            try { dbg.enterDecision(144, decisionCanBacktrack[144]);

            int LA144_0 = input.LA(1);

            if ( ((LA144_0>=OPEQ && LA144_0<=CONTAINS)) ) {
                alt144=1;
            }
            } finally {dbg.exitDecision(144);}

            switch (alt144) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:722:17: ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )?
                    {
                    dbg.location(722,17);
                    if ( (input.LA(1)>=OPEQ && input.LA(1)<=CONTAINS) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(730,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:17: ( ws )?
                    int alt142=2;
                    try { dbg.enterSubRule(142);
                    try { dbg.enterDecision(142, decisionCanBacktrack[142]);

                    int LA142_0 = input.LA(1);

                    if ( (LA142_0==WS||(LA142_0>=NL && LA142_0<=COMMENT)) ) {
                        alt142=1;
                    }
                    } finally {dbg.exitDecision(142);}

                    switch (alt142) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:730:17: ws
                            {
                            dbg.location(730,17);
                            pushFollow(FOLLOW_ws_in_slAttribute3609);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(142);}

                    dbg.location(731,17);
                    pushFollow(FOLLOW_slAttributeValue_in_slAttribute3628);
                    slAttributeValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(732,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:732:17: ( ws )?
                    int alt143=2;
                    try { dbg.enterSubRule(143);
                    try { dbg.enterDecision(143, decisionCanBacktrack[143]);

                    int LA143_0 = input.LA(1);

                    if ( (LA143_0==WS||(LA143_0>=NL && LA143_0<=COMMENT)) ) {
                        alt143=1;
                    }
                    } finally {dbg.exitDecision(143);}

                    switch (alt143) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:732:17: ws
                            {
                            dbg.location(732,17);
                            pushFollow(FOLLOW_ws_in_slAttribute3646);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(143);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(144);}

            dbg.location(735,7);
            match(input,RBRACKET,FOLLOW_RBRACKET_in_slAttribute3675); if (state.failed) return ;

            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(IDENT, LBRACE)); 
                
        }
        finally {
        }
        dbg.location(736, 1);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "slAttribute");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "slAttribute"


    // $ANTLR start "slAttributeName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:743:1: slAttributeName : IDENT ;
    public final void slAttributeName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "slAttributeName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(743, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:744:2: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:744:4: IDENT
            {
            dbg.location(744,4);
            match(input,IDENT,FOLLOW_IDENT_in_slAttributeName3691); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(745, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "slAttributeName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "slAttributeName"


    // $ANTLR start "slAttributeValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:747:1: slAttributeValue : ( IDENT | STRING ) ;
    public final void slAttributeValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "slAttributeValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(747, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:748:2: ( ( IDENT | STRING ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:749:2: ( IDENT | STRING )
            {
            dbg.location(749,2);
            if ( (input.LA(1)>=IDENT && input.LA(1)<=STRING) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(753, 9);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "slAttributeValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "slAttributeValue"


    // $ANTLR start "pseudo"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:755:1: pseudo : ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) ) ;
    public final void pseudo() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "pseudo");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(755, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:756:5: ( ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:756:7: ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) )
            {
            dbg.location(756,7);
            if ( input.LA(1)==COLON||input.LA(1)==DCOLON ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(757,14);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:757:14: ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN ) )
            int alt153=2;
            try { dbg.enterSubRule(153);
            try { dbg.enterDecision(153, decisionCanBacktrack[153]);

            int LA153_0 = input.LA(1);

            if ( (LA153_0==IDENT||LA153_0==GEN) ) {
                alt153=1;
            }
            else if ( (LA153_0==NOT) ) {
                alt153=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(153);}

            switch (alt153) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:758:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
                    {
                    dbg.location(758,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:758:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:759:21: ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
                    {
                    dbg.location(759,21);
                    if ( input.LA(1)==IDENT||input.LA(1)==GEN ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(760,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:760:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
                    int alt149=2;
                    try { dbg.enterSubRule(149);
                    try { dbg.enterDecision(149, decisionCanBacktrack[149]);

                    try {
                        isCyclicDecision = true;
                        alt149 = dfa149.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(149);}

                    switch (alt149) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:761:25: ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN
                            {
                            dbg.location(761,25);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:761:25: ( ws )?
                            int alt145=2;
                            try { dbg.enterSubRule(145);
                            try { dbg.enterDecision(145, decisionCanBacktrack[145]);

                            int LA145_0 = input.LA(1);

                            if ( (LA145_0==WS||(LA145_0>=NL && LA145_0<=COMMENT)) ) {
                                alt145=1;
                            }
                            } finally {dbg.exitDecision(145);}

                            switch (alt145) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:761:25: ws
                                    {
                                    dbg.location(761,25);
                                    pushFollow(FOLLOW_ws_in_pseudo3886);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(145);}

                            dbg.location(761,29);
                            match(input,LPAREN,FOLLOW_LPAREN_in_pseudo3889); if (state.failed) return ;
                            dbg.location(761,36);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:761:36: ( ws )?
                            int alt146=2;
                            try { dbg.enterSubRule(146);
                            try { dbg.enterDecision(146, decisionCanBacktrack[146]);

                            int LA146_0 = input.LA(1);

                            if ( (LA146_0==WS||(LA146_0>=NL && LA146_0<=COMMENT)) ) {
                                alt146=1;
                            }
                            } finally {dbg.exitDecision(146);}

                            switch (alt146) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:761:36: ws
                                    {
                                    dbg.location(761,36);
                                    pushFollow(FOLLOW_ws_in_pseudo3891);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(146);}

                            dbg.location(761,40);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:761:40: ( ( expression ( ws )? ) | STAR )?
                            int alt148=3;
                            try { dbg.enterSubRule(148);
                            try { dbg.enterDecision(148, decisionCanBacktrack[148]);

                            int LA148_0 = input.LA(1);

                            if ( ((LA148_0>=IDENT && LA148_0<=URI)||LA148_0==MEDIA_SYM||LA148_0==GEN||LA148_0==AT_IDENT||LA148_0==PERCENTAGE||(LA148_0>=MINUS && LA148_0<=PLUS)||(LA148_0>=HASH_SYMBOL && LA148_0<=HASH)||LA148_0==SASS_VAR||(LA148_0>=NUMBER && LA148_0<=DIMENSION)) ) {
                                alt148=1;
                            }
                            else if ( (LA148_0==STAR) ) {
                                alt148=2;
                            }
                            } finally {dbg.exitDecision(148);}

                            switch (alt148) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:761:42: ( expression ( ws )? )
                                    {
                                    dbg.location(761,42);
                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:761:42: ( expression ( ws )? )
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:761:43: expression ( ws )?
                                    {
                                    dbg.location(761,43);
                                    pushFollow(FOLLOW_expression_in_pseudo3897);
                                    expression();

                                    state._fsp--;
                                    if (state.failed) return ;
                                    dbg.location(761,54);
                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:761:54: ( ws )?
                                    int alt147=2;
                                    try { dbg.enterSubRule(147);
                                    try { dbg.enterDecision(147, decisionCanBacktrack[147]);

                                    int LA147_0 = input.LA(1);

                                    if ( (LA147_0==WS||(LA147_0>=NL && LA147_0<=COMMENT)) ) {
                                        alt147=1;
                                    }
                                    } finally {dbg.exitDecision(147);}

                                    switch (alt147) {
                                        case 1 :
                                            dbg.enterAlt(1);

                                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:761:54: ws
                                            {
                                            dbg.location(761,54);
                                            pushFollow(FOLLOW_ws_in_pseudo3899);
                                            ws();

                                            state._fsp--;
                                            if (state.failed) return ;

                                            }
                                            break;

                                    }
                                    } finally {dbg.exitSubRule(147);}


                                    }


                                    }
                                    break;
                                case 2 :
                                    dbg.enterAlt(2);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:761:61: STAR
                                    {
                                    dbg.location(761,61);
                                    match(input,STAR,FOLLOW_STAR_in_pseudo3905); if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(148);}

                            dbg.location(761,69);
                            match(input,RPAREN,FOLLOW_RPAREN_in_pseudo3910); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(149);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:765:17: ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN )
                    {
                    dbg.location(765,17);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:765:17: ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:765:19: NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence )? RPAREN
                    {
                    dbg.location(765,19);
                    match(input,NOT,FOLLOW_NOT_in_pseudo3989); if (state.failed) return ;
                    dbg.location(765,23);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:765:23: ( ws )?
                    int alt150=2;
                    try { dbg.enterSubRule(150);
                    try { dbg.enterDecision(150, decisionCanBacktrack[150]);

                    int LA150_0 = input.LA(1);

                    if ( (LA150_0==WS||(LA150_0>=NL && LA150_0<=COMMENT)) ) {
                        alt150=1;
                    }
                    } finally {dbg.exitDecision(150);}

                    switch (alt150) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:765:23: ws
                            {
                            dbg.location(765,23);
                            pushFollow(FOLLOW_ws_in_pseudo3991);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(150);}

                    dbg.location(765,27);
                    match(input,LPAREN,FOLLOW_LPAREN_in_pseudo3994); if (state.failed) return ;
                    dbg.location(765,34);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:765:34: ( ws )?
                    int alt151=2;
                    try { dbg.enterSubRule(151);
                    try { dbg.enterDecision(151, decisionCanBacktrack[151]);

                    int LA151_0 = input.LA(1);

                    if ( (LA151_0==WS||(LA151_0>=NL && LA151_0<=COMMENT)) ) {
                        alt151=1;
                    }
                    } finally {dbg.exitDecision(151);}

                    switch (alt151) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:765:34: ws
                            {
                            dbg.location(765,34);
                            pushFollow(FOLLOW_ws_in_pseudo3996);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(151);}

                    dbg.location(765,38);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:765:38: ( simpleSelectorSequence )?
                    int alt152=2;
                    try { dbg.enterSubRule(152);
                    try { dbg.enterDecision(152, decisionCanBacktrack[152]);

                    int LA152_0 = input.LA(1);

                    if ( (LA152_0==IDENT||LA152_0==GEN||LA152_0==COLON||(LA152_0>=HASH_SYMBOL && LA152_0<=PIPE)||LA152_0==LESS_AND) ) {
                        alt152=1;
                    }
                    } finally {dbg.exitDecision(152);}

                    switch (alt152) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:765:38: simpleSelectorSequence
                            {
                            dbg.location(765,38);
                            pushFollow(FOLLOW_simpleSelectorSequence_in_pseudo3999);
                            simpleSelectorSequence();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(152);}

                    dbg.location(765,62);
                    match(input,RPAREN,FOLLOW_RPAREN_in_pseudo4002); if (state.failed) return ;

                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(153);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(767, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pseudo");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "pseudo"


    // $ANTLR start "propertyDeclaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:769:1: propertyDeclaration : ( ( STAR )? property COLON ( ws )? propertyValue ( ( ws )? prio )? | {...}? ( STAR )? property COLON ( ws )? cp_propertyValue );
    public final void propertyDeclaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "propertyDeclaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(769, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:770:5: ( ( STAR )? property COLON ( ws )? propertyValue ( ( ws )? prio )? | {...}? ( STAR )? property COLON ( ws )? cp_propertyValue )
            int alt160=2;
            try { dbg.enterDecision(160, decisionCanBacktrack[160]);

            try {
                isCyclicDecision = true;
                alt160 = dfa160.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(160);}

            switch (alt160) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:771:5: ( STAR )? property COLON ( ws )? propertyValue ( ( ws )? prio )?
                    {
                    dbg.location(771,5);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:771:5: ( STAR )?
                    int alt154=2;
                    try { dbg.enterSubRule(154);
                    try { dbg.enterDecision(154, decisionCanBacktrack[154]);

                    int LA154_0 = input.LA(1);

                    if ( (LA154_0==STAR) ) {
                        alt154=1;
                    }
                    } finally {dbg.exitDecision(154);}

                    switch (alt154) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:771:5: STAR
                            {
                            dbg.location(771,5);
                            match(input,STAR,FOLLOW_STAR_in_propertyDeclaration4041); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(154);}

                    dbg.location(771,11);
                    pushFollow(FOLLOW_property_in_propertyDeclaration4044);
                    property();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(771,20);
                    match(input,COLON,FOLLOW_COLON_in_propertyDeclaration4046); if (state.failed) return ;
                    dbg.location(771,26);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:771:26: ( ws )?
                    int alt155=2;
                    try { dbg.enterSubRule(155);
                    try { dbg.enterDecision(155, decisionCanBacktrack[155]);

                    int LA155_0 = input.LA(1);

                    if ( (LA155_0==WS||(LA155_0>=NL && LA155_0<=COMMENT)) ) {
                        alt155=1;
                    }
                    } finally {dbg.exitDecision(155);}

                    switch (alt155) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:771:26: ws
                            {
                            dbg.location(771,26);
                            pushFollow(FOLLOW_ws_in_propertyDeclaration4048);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(155);}

                    dbg.location(771,30);
                    pushFollow(FOLLOW_propertyValue_in_propertyDeclaration4051);
                    propertyValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(771,44);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:771:44: ( ( ws )? prio )?
                    int alt157=2;
                    try { dbg.enterSubRule(157);
                    try { dbg.enterDecision(157, decisionCanBacktrack[157]);

                    try {
                        isCyclicDecision = true;
                        alt157 = dfa157.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(157);}

                    switch (alt157) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:771:45: ( ws )? prio
                            {
                            dbg.location(771,45);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:771:45: ( ws )?
                            int alt156=2;
                            try { dbg.enterSubRule(156);
                            try { dbg.enterDecision(156, decisionCanBacktrack[156]);

                            int LA156_0 = input.LA(1);

                            if ( (LA156_0==WS||(LA156_0>=NL && LA156_0<=COMMENT)) ) {
                                alt156=1;
                            }
                            } finally {dbg.exitDecision(156);}

                            switch (alt156) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:771:45: ws
                                    {
                                    dbg.location(771,45);
                                    pushFollow(FOLLOW_ws_in_propertyDeclaration4054);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(156);}

                            dbg.location(771,49);
                            pushFollow(FOLLOW_prio_in_propertyDeclaration4057);
                            prio();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(157);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:772:7: {...}? ( STAR )? property COLON ( ws )? cp_propertyValue
                    {
                    dbg.location(772,7);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "propertyDeclaration", "isCssPreprocessorSource()");
                    }
                    dbg.location(772,36);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:772:36: ( STAR )?
                    int alt158=2;
                    try { dbg.enterSubRule(158);
                    try { dbg.enterDecision(158, decisionCanBacktrack[158]);

                    int LA158_0 = input.LA(1);

                    if ( (LA158_0==STAR) ) {
                        alt158=1;
                    }
                    } finally {dbg.exitDecision(158);}

                    switch (alt158) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:772:36: STAR
                            {
                            dbg.location(772,36);
                            match(input,STAR,FOLLOW_STAR_in_propertyDeclaration4069); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(158);}

                    dbg.location(772,42);
                    pushFollow(FOLLOW_property_in_propertyDeclaration4072);
                    property();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(772,51);
                    match(input,COLON,FOLLOW_COLON_in_propertyDeclaration4074); if (state.failed) return ;
                    dbg.location(772,57);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:772:57: ( ws )?
                    int alt159=2;
                    try { dbg.enterSubRule(159);
                    try { dbg.enterDecision(159, decisionCanBacktrack[159]);

                    int LA159_0 = input.LA(1);

                    if ( (LA159_0==WS||(LA159_0>=NL && LA159_0<=COMMENT)) ) {
                        alt159=1;
                    }
                    } finally {dbg.exitDecision(159);}

                    switch (alt159) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:772:57: ws
                            {
                            dbg.location(772,57);
                            pushFollow(FOLLOW_ws_in_propertyDeclaration4076);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(159);}

                    dbg.location(772,61);
                    pushFollow(FOLLOW_cp_propertyValue_in_propertyDeclaration4079);
                    cp_propertyValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    //recovery: if an mismatched token occures inside a declaration is found,
                    //then skip all tokens until an end of the rule is found represented by right curly brace
                    consumeUntil(input, BitSet.of(SEMI, RBRACE)); 
                
        }
        finally {
        }
        dbg.location(773, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "propertyDeclaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "propertyDeclaration"


    // $ANTLR start "cp_propertyValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:782:1: cp_propertyValue : ({...}? cp_expression_list | propertyValue );
    public final void cp_propertyValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_propertyValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(782, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:783:5: ({...}? cp_expression_list | propertyValue )
            int alt161=2;
            try { dbg.enterDecision(161, decisionCanBacktrack[161]);

            try {
                isCyclicDecision = true;
                alt161 = dfa161.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(161);}

            switch (alt161) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:784:5: {...}? cp_expression_list
                    {
                    dbg.location(784,5);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_propertyValue", "isCssPreprocessorSource()");
                    }
                    dbg.location(784,34);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_propertyValue4114);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:785:7: propertyValue
                    {
                    dbg.location(785,7);
                    pushFollow(FOLLOW_propertyValue_in_cp_propertyValue4122);
                    propertyValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(786, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_propertyValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_propertyValue"


    // $ANTLR start "propertyValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:788:1: propertyValue : expression ;
    public final void propertyValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "propertyValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(788, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:789:2: ( expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:790:9: expression
            {
            dbg.location(790,9);
            pushFollow(FOLLOW_expression_in_propertyValue4144);
            expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(791, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "propertyValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "propertyValue"


    // $ANTLR start "expressionPredicate"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:794:1: expressionPredicate options {k=1; } : (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) ;
    public final void expressionPredicate() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "expressionPredicate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(794, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:796:5: ( (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:797:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE )
            {
            dbg.location(797,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:797:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+
            int cnt162=0;
            try { dbg.enterSubRule(162);

            loop162:
            do {
                int alt162=2;
                try { dbg.enterDecision(162, decisionCanBacktrack[162]);

                int LA162_0 = input.LA(1);

                if ( (LA162_0==NAMESPACE_SYM||(LA162_0>=IDENT && LA162_0<=MEDIA_SYM)||(LA162_0>=AND && LA162_0<=COLON)||(LA162_0>=WS && LA162_0<=RIGHTBOTTOM_SYM)||(LA162_0>=MINUS && LA162_0<=SASS_EXTEND_ONLY_SELECTOR)||(LA162_0>=PIPE && LA162_0<=RBRACKET)||(LA162_0>=IMPORTANT_SYM && LA162_0<=LINE_COMMENT)) ) {
                    alt162=1;
                }


                } finally {dbg.exitDecision(162);}

                switch (alt162) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:797:7: ~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR )
            	    {
            	    dbg.location(797,7);
            	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=COLON)||(input.LA(1)>=WS && input.LA(1)<=RIGHTBOTTOM_SYM)||(input.LA(1)>=MINUS && input.LA(1)<=SASS_EXTEND_ONLY_SELECTOR)||(input.LA(1)>=PIPE && input.LA(1)<=RBRACKET)||(input.LA(1)>=IMPORTANT_SYM && input.LA(1)<=LINE_COMMENT) ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt162 >= 1 ) break loop162;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(162, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt162++;
            } while (true);
            } finally {dbg.exitSubRule(162);}

            dbg.location(797,76);
            if ( input.LA(1)==SEMI||input.LA(1)==RBRACE ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(798, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "expressionPredicate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "expressionPredicate"


    // $ANTLR start "syncToDeclarationsRule"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:802:1: syncToDeclarationsRule : ;
    public final void syncToDeclarationsRule() throws RecognitionException {

                //why sync to DOT? - LESS allows class rules nested
                syncToSet(BitSet.of(IDENT, RBRACE, STAR, DOT)); 
            
        try { dbg.enterRule(getGrammarFileName(), "syncToDeclarationsRule");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(802, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:807:6: ()
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:808:6: 
            {
            }

        }
        finally {
        }
        dbg.location(808, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncToDeclarationsRule");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncToDeclarationsRule"


    // $ANTLR start "syncTo_RBRACE"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:810:1: syncTo_RBRACE : ;
    public final void syncTo_RBRACE() throws RecognitionException {

                syncToRBRACE(1); //initial nest == 1
            
        try { dbg.enterRule(getGrammarFileName(), "syncTo_RBRACE");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(810, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:814:6: ()
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:815:6: 
            {
            }

        }
        finally {
        }
        dbg.location(815, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncTo_RBRACE");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncTo_RBRACE"


    // $ANTLR start "syncTo_SEMI"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:817:1: syncTo_SEMI : SEMI ;
    public final void syncTo_SEMI() throws RecognitionException {

                syncToSet(BitSet.of(SEMI)); 
            
        try { dbg.enterRule(getGrammarFileName(), "syncTo_SEMI");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(817, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:821:6: ( SEMI )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:822:13: SEMI
            {
            dbg.location(822,13);
            match(input,SEMI,FOLLOW_SEMI_in_syncTo_SEMI4331); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(823, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncTo_SEMI");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncTo_SEMI"


    // $ANTLR start "syncToFollow"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:826:1: syncToFollow : ;
    public final void syncToFollow() throws RecognitionException {

                syncToSet();
            
        try { dbg.enterRule(getGrammarFileName(), "syncToFollow");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(826, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:830:6: ()
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:831:6: 
            {
            }

        }
        finally {
        }
        dbg.location(831, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "syncToFollow");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "syncToFollow"


    // $ANTLR start "prio"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:833:1: prio : IMPORTANT_SYM ;
    public final void prio() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "prio");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(833, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:834:5: ( IMPORTANT_SYM )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:834:7: IMPORTANT_SYM
            {
            dbg.location(834,7);
            match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_prio4386); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(835, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prio");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "prio"


    // $ANTLR start "expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:837:1: expression : term ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )* ;
    public final void expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(837, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:5: ( term ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:7: term ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )*
            {
            dbg.location(838,7);
            pushFollow(FOLLOW_term_in_expression4407);
            term();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(838,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:12: ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )*
            try { dbg.enterSubRule(166);

            loop166:
            do {
                int alt166=2;
                try { dbg.enterDecision(166, decisionCanBacktrack[166]);

                try {
                    isCyclicDecision = true;
                    alt166 = dfa166.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(166);}

                switch (alt166) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:14: ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term
            	    {
            	    dbg.location(838,66);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:66: ( ws | ( ( ws )? operator ( ws )? ) | )
            	    int alt165=3;
            	    try { dbg.enterSubRule(165);
            	    try { dbg.enterDecision(165, decisionCanBacktrack[165]);

            	    try {
            	        isCyclicDecision = true;
            	        alt165 = dfa165.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(165);}

            	    switch (alt165) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:68: ws
            	            {
            	            dbg.location(838,68);
            	            pushFollow(FOLLOW_ws_in_expression4439);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:73: ( ( ws )? operator ( ws )? )
            	            {
            	            dbg.location(838,73);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:73: ( ( ws )? operator ( ws )? )
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:74: ( ws )? operator ( ws )?
            	            {
            	            dbg.location(838,74);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:74: ( ws )?
            	            int alt163=2;
            	            try { dbg.enterSubRule(163);
            	            try { dbg.enterDecision(163, decisionCanBacktrack[163]);

            	            int LA163_0 = input.LA(1);

            	            if ( (LA163_0==WS||(LA163_0>=NL && LA163_0<=COMMENT)) ) {
            	                alt163=1;
            	            }
            	            } finally {dbg.exitDecision(163);}

            	            switch (alt163) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:74: ws
            	                    {
            	                    dbg.location(838,74);
            	                    pushFollow(FOLLOW_ws_in_expression4444);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(163);}

            	            dbg.location(838,78);
            	            pushFollow(FOLLOW_operator_in_expression4447);
            	            operator();

            	            state._fsp--;
            	            if (state.failed) return ;
            	            dbg.location(838,87);
            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:87: ( ws )?
            	            int alt164=2;
            	            try { dbg.enterSubRule(164);
            	            try { dbg.enterDecision(164, decisionCanBacktrack[164]);

            	            int LA164_0 = input.LA(1);

            	            if ( (LA164_0==WS||(LA164_0>=NL && LA164_0<=COMMENT)) ) {
            	                alt164=1;
            	            }
            	            } finally {dbg.exitDecision(164);}

            	            switch (alt164) {
            	                case 1 :
            	                    dbg.enterAlt(1);

            	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:87: ws
            	                    {
            	                    dbg.location(838,87);
            	                    pushFollow(FOLLOW_ws_in_expression4449);
            	                    ws();

            	                    state._fsp--;
            	                    if (state.failed) return ;

            	                    }
            	                    break;

            	            }
            	            } finally {dbg.exitSubRule(164);}


            	            }


            	            }
            	            break;
            	        case 3 :
            	            dbg.enterAlt(3);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:107: 
            	            {
            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(165);}

            	    dbg.location(838,109);
            	    pushFollow(FOLLOW_term_in_expression4458);
            	    term();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop166;
                }
            } while (true);
            } finally {dbg.exitSubRule(166);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(839, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "expression"


    // $ANTLR start "term"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:841:1: term : ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var ) ;
    public final void term() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "term");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(841, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:842:5: ( ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:843:5: ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var )
            {
            dbg.location(843,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:843:5: ( unaryOperator ( ws )? )?
            int alt168=2;
            try { dbg.enterSubRule(168);
            try { dbg.enterDecision(168, decisionCanBacktrack[168]);

            int LA168_0 = input.LA(1);

            if ( ((LA168_0>=MINUS && LA168_0<=PLUS)) ) {
                alt168=1;
            }
            } finally {dbg.exitDecision(168);}

            switch (alt168) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:843:7: unaryOperator ( ws )?
                    {
                    dbg.location(843,7);
                    pushFollow(FOLLOW_unaryOperator_in_term4488);
                    unaryOperator();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(843,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:843:21: ( ws )?
                    int alt167=2;
                    try { dbg.enterSubRule(167);
                    try { dbg.enterDecision(167, decisionCanBacktrack[167]);

                    int LA167_0 = input.LA(1);

                    if ( (LA167_0==WS||(LA167_0>=NL && LA167_0<=COMMENT)) ) {
                        alt167=1;
                    }
                    } finally {dbg.exitDecision(167);}

                    switch (alt167) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:843:21: ws
                            {
                            dbg.location(843,21);
                            pushFollow(FOLLOW_ws_in_term4490);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(167);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(168);}

            dbg.location(844,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:844:5: ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var )
            int alt169=19;
            try { dbg.enterSubRule(169);
            try { dbg.enterDecision(169, decisionCanBacktrack[169]);

            try {
                isCyclicDecision = true;
                alt169 = dfa169.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(169);}

            switch (alt169) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:845:9: ( functionName ( ws )? LPAREN )=> function
                    {
                    dbg.location(845,36);
                    pushFollow(FOLLOW_function_in_term4519);
                    function();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:846:11: IDENT
                    {
                    dbg.location(846,11);
                    match(input,IDENT,FOLLOW_IDENT_in_term4532); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:847:11: NUMBER
                    {
                    dbg.location(847,11);
                    match(input,NUMBER,FOLLOW_NUMBER_in_term4544); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:848:11: PERCENTAGE
                    {
                    dbg.location(848,11);
                    match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_term4556); if (state.failed) return ;

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:849:11: LENGTH
                    {
                    dbg.location(849,11);
                    match(input,LENGTH,FOLLOW_LENGTH_in_term4568); if (state.failed) return ;

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:850:11: EMS
                    {
                    dbg.location(850,11);
                    match(input,EMS,FOLLOW_EMS_in_term4580); if (state.failed) return ;

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:851:11: REM
                    {
                    dbg.location(851,11);
                    match(input,REM,FOLLOW_REM_in_term4592); if (state.failed) return ;

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:852:11: EXS
                    {
                    dbg.location(852,11);
                    match(input,EXS,FOLLOW_EXS_in_term4604); if (state.failed) return ;

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:853:11: ANGLE
                    {
                    dbg.location(853,11);
                    match(input,ANGLE,FOLLOW_ANGLE_in_term4616); if (state.failed) return ;

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:854:11: TIME
                    {
                    dbg.location(854,11);
                    match(input,TIME,FOLLOW_TIME_in_term4628); if (state.failed) return ;

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:855:11: FREQ
                    {
                    dbg.location(855,11);
                    match(input,FREQ,FOLLOW_FREQ_in_term4640); if (state.failed) return ;

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:856:11: RESOLUTION
                    {
                    dbg.location(856,11);
                    match(input,RESOLUTION,FOLLOW_RESOLUTION_in_term4652); if (state.failed) return ;

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:857:11: DIMENSION
                    {
                    dbg.location(857,11);
                    match(input,DIMENSION,FOLLOW_DIMENSION_in_term4664); if (state.failed) return ;

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:858:11: STRING
                    {
                    dbg.location(858,11);
                    match(input,STRING,FOLLOW_STRING_in_term4681); if (state.failed) return ;

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:859:11: GEN
                    {
                    dbg.location(859,11);
                    match(input,GEN,FOLLOW_GEN_in_term4693); if (state.failed) return ;

                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:860:11: URI
                    {
                    dbg.location(860,11);
                    match(input,URI,FOLLOW_URI_in_term4705); if (state.failed) return ;

                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:861:11: hexColor
                    {
                    dbg.location(861,11);
                    pushFollow(FOLLOW_hexColor_in_term4717);
                    hexColor();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 18 :
                    dbg.enterAlt(18);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:862:11: {...}? cp_variable
                    {
                    dbg.location(862,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
                    }
                    dbg.location(862,40);
                    pushFollow(FOLLOW_cp_variable_in_term4731);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 19 :
                    dbg.enterAlt(19);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:863:11: {...}? sass_interpolation_expression_var
                    {
                    dbg.location(863,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
                    }
                    dbg.location(863,40);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_term4745);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(169);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(865, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "term");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "term"


    // $ANTLR start "function"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:867:1: function : functionName ( ws )? LPAREN ( ws )? ( fnAttributes | ) RPAREN ;
    public final void function() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "function");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(867, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:868:2: ( functionName ( ws )? LPAREN ( ws )? ( fnAttributes | ) RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:868:5: functionName ( ws )? LPAREN ( ws )? ( fnAttributes | ) RPAREN
            {
            dbg.location(868,5);
            pushFollow(FOLLOW_functionName_in_function4766);
            functionName();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(868,18);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:868:18: ( ws )?
            int alt170=2;
            try { dbg.enterSubRule(170);
            try { dbg.enterDecision(170, decisionCanBacktrack[170]);

            int LA170_0 = input.LA(1);

            if ( (LA170_0==WS||(LA170_0>=NL && LA170_0<=COMMENT)) ) {
                alt170=1;
            }
            } finally {dbg.exitDecision(170);}

            switch (alt170) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:868:18: ws
                    {
                    dbg.location(868,18);
                    pushFollow(FOLLOW_ws_in_function4768);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(170);}

            dbg.location(869,3);
            match(input,LPAREN,FOLLOW_LPAREN_in_function4773); if (state.failed) return ;
            dbg.location(869,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:10: ( ws )?
            int alt171=2;
            try { dbg.enterSubRule(171);
            try { dbg.enterDecision(171, decisionCanBacktrack[171]);

            int LA171_0 = input.LA(1);

            if ( (LA171_0==WS||(LA171_0>=NL && LA171_0<=COMMENT)) ) {
                alt171=1;
            }
            } finally {dbg.exitDecision(171);}

            switch (alt171) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:869:10: ws
                    {
                    dbg.location(869,10);
                    pushFollow(FOLLOW_ws_in_function4775);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(171);}

            dbg.location(870,3);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:870:3: ( fnAttributes | )
            int alt172=2;
            try { dbg.enterSubRule(172);
            try { dbg.enterDecision(172, decisionCanBacktrack[172]);

            int LA172_0 = input.LA(1);

            if ( ((LA172_0>=IDENT && LA172_0<=URI)||LA172_0==MEDIA_SYM||(LA172_0>=NOT && LA172_0<=LPAREN)||LA172_0==AT_IDENT||LA172_0==PERCENTAGE||(LA172_0>=MINUS && LA172_0<=PLUS)||(LA172_0>=HASH_SYMBOL && LA172_0<=HASH)||(LA172_0>=SASS_VAR && LA172_0<=DIMENSION)) ) {
                alt172=1;
            }
            else if ( (LA172_0==RPAREN) ) {
                alt172=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(172);}

            switch (alt172) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:871:21: fnAttributes
                    {
                    dbg.location(871,21);
                    pushFollow(FOLLOW_fnAttributes_in_function4802);
                    fnAttributes();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:873:3: 
                    {
                    }
                    break;

            }
            } finally {dbg.exitSubRule(172);}

            dbg.location(874,3);
            match(input,RPAREN,FOLLOW_RPAREN_in_function4833); if (state.failed) return ;

            }

        }
        catch ( RecognitionException rce) {

                    reportError(rce);
                    consumeUntil(input, BitSet.of(RPAREN, SEMI, RBRACE)); 

        }
        finally {
        }
        dbg.location(875, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "function");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "function"


    // $ANTLR start "functionName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:881:1: functionName : ( IDENT COLON )? IDENT ( DOT IDENT )* ;
    public final void functionName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "functionName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(881, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:885:2: ( ( IDENT COLON )? IDENT ( DOT IDENT )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:886:9: ( IDENT COLON )? IDENT ( DOT IDENT )*
            {
            dbg.location(886,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:886:9: ( IDENT COLON )?
            int alt173=2;
            try { dbg.enterSubRule(173);
            try { dbg.enterDecision(173, decisionCanBacktrack[173]);

            int LA173_0 = input.LA(1);

            if ( (LA173_0==IDENT) ) {
                int LA173_1 = input.LA(2);

                if ( (LA173_1==COLON) ) {
                    alt173=1;
                }
            }
            } finally {dbg.exitDecision(173);}

            switch (alt173) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:886:10: IDENT COLON
                    {
                    dbg.location(886,10);
                    match(input,IDENT,FOLLOW_IDENT_in_functionName4890); if (state.failed) return ;
                    dbg.location(886,16);
                    match(input,COLON,FOLLOW_COLON_in_functionName4892); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(173);}

            dbg.location(886,24);
            match(input,IDENT,FOLLOW_IDENT_in_functionName4896); if (state.failed) return ;
            dbg.location(886,30);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:886:30: ( DOT IDENT )*
            try { dbg.enterSubRule(174);

            loop174:
            do {
                int alt174=2;
                try { dbg.enterDecision(174, decisionCanBacktrack[174]);

                int LA174_0 = input.LA(1);

                if ( (LA174_0==DOT) ) {
                    alt174=1;
                }


                } finally {dbg.exitDecision(174);}

                switch (alt174) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:886:31: DOT IDENT
            	    {
            	    dbg.location(886,31);
            	    match(input,DOT,FOLLOW_DOT_in_functionName4899); if (state.failed) return ;
            	    dbg.location(886,35);
            	    match(input,IDENT,FOLLOW_IDENT_in_functionName4901); if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop174;
                }
            } while (true);
            } finally {dbg.exitSubRule(174);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(887, 6);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "functionName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "functionName"


    // $ANTLR start "fnAttributes"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:889:1: fnAttributes : fnAttribute ( ( ws )? COMMA ( ws )? fnAttribute )* ( ws )? ;
    public final void fnAttributes() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttributes");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(889, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:890:5: ( fnAttribute ( ( ws )? COMMA ( ws )? fnAttribute )* ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:891:5: fnAttribute ( ( ws )? COMMA ( ws )? fnAttribute )* ( ws )?
            {
            dbg.location(891,5);
            pushFollow(FOLLOW_fnAttribute_in_fnAttributes4925);
            fnAttribute();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(891,17);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:891:17: ( ( ws )? COMMA ( ws )? fnAttribute )*
            try { dbg.enterSubRule(177);

            loop177:
            do {
                int alt177=2;
                try { dbg.enterDecision(177, decisionCanBacktrack[177]);

                try {
                    isCyclicDecision = true;
                    alt177 = dfa177.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(177);}

                switch (alt177) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:891:18: ( ws )? COMMA ( ws )? fnAttribute
            	    {
            	    dbg.location(891,18);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:891:18: ( ws )?
            	    int alt175=2;
            	    try { dbg.enterSubRule(175);
            	    try { dbg.enterDecision(175, decisionCanBacktrack[175]);

            	    int LA175_0 = input.LA(1);

            	    if ( (LA175_0==WS||(LA175_0>=NL && LA175_0<=COMMENT)) ) {
            	        alt175=1;
            	    }
            	    } finally {dbg.exitDecision(175);}

            	    switch (alt175) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:891:18: ws
            	            {
            	            dbg.location(891,18);
            	            pushFollow(FOLLOW_ws_in_fnAttributes4928);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(175);}

            	    dbg.location(891,22);
            	    match(input,COMMA,FOLLOW_COMMA_in_fnAttributes4931); if (state.failed) return ;
            	    dbg.location(891,28);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:891:28: ( ws )?
            	    int alt176=2;
            	    try { dbg.enterSubRule(176);
            	    try { dbg.enterDecision(176, decisionCanBacktrack[176]);

            	    int LA176_0 = input.LA(1);

            	    if ( (LA176_0==WS||(LA176_0>=NL && LA176_0<=COMMENT)) ) {
            	        alt176=1;
            	    }
            	    } finally {dbg.exitDecision(176);}

            	    switch (alt176) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:891:28: ws
            	            {
            	            dbg.location(891,28);
            	            pushFollow(FOLLOW_ws_in_fnAttributes4933);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(176);}

            	    dbg.location(891,32);
            	    pushFollow(FOLLOW_fnAttribute_in_fnAttributes4936);
            	    fnAttribute();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop177;
                }
            } while (true);
            } finally {dbg.exitSubRule(177);}

            dbg.location(891,46);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:891:46: ( ws )?
            int alt178=2;
            try { dbg.enterSubRule(178);
            try { dbg.enterDecision(178, decisionCanBacktrack[178]);

            int LA178_0 = input.LA(1);

            if ( (LA178_0==WS||(LA178_0>=NL && LA178_0<=COMMENT)) ) {
                alt178=1;
            }
            } finally {dbg.exitDecision(178);}

            switch (alt178) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:891:46: ws
                    {
                    dbg.location(891,46);
                    pushFollow(FOLLOW_ws_in_fnAttributes4940);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(178);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(892, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttributes");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttributes"


    // $ANTLR start "fnAttribute"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:894:1: fnAttribute : ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | {...}? cp_expression | expression );
    public final void fnAttribute() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttribute");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(894, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:895:2: ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | {...}? cp_expression | expression )
            int alt181=3;
            try { dbg.enterDecision(181, decisionCanBacktrack[181]);

            try {
                isCyclicDecision = true;
                alt181 = dfa181.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(181);}

            switch (alt181) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:896:9: ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue
                    {
                    dbg.location(896,46);
                    pushFollow(FOLLOW_fnAttributeName_in_fnAttribute4978);
                    fnAttributeName();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(896,62);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:896:62: ( ws )?
                    int alt179=2;
                    try { dbg.enterSubRule(179);
                    try { dbg.enterDecision(179, decisionCanBacktrack[179]);

                    int LA179_0 = input.LA(1);

                    if ( (LA179_0==WS||(LA179_0>=NL && LA179_0<=COMMENT)) ) {
                        alt179=1;
                    }
                    } finally {dbg.exitDecision(179);}

                    switch (alt179) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:896:62: ws
                            {
                            dbg.location(896,62);
                            pushFollow(FOLLOW_ws_in_fnAttribute4980);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(179);}

                    dbg.location(896,66);
                    if ( input.LA(1)==COLON||input.LA(1)==OPEQ ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }

                    dbg.location(896,79);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:896:79: ( ws )?
                    int alt180=2;
                    try { dbg.enterSubRule(180);
                    try { dbg.enterDecision(180, decisionCanBacktrack[180]);

                    int LA180_0 = input.LA(1);

                    if ( (LA180_0==WS||(LA180_0>=NL && LA180_0<=COMMENT)) ) {
                        alt180=1;
                    }
                    } finally {dbg.exitDecision(180);}

                    switch (alt180) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:896:79: ws
                            {
                            dbg.location(896,79);
                            pushFollow(FOLLOW_ws_in_fnAttribute4989);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(180);}

                    dbg.location(896,83);
                    pushFollow(FOLLOW_fnAttributeValue_in_fnAttribute4992);
                    fnAttributeValue();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:897:11: {...}? cp_expression
                    {
                    dbg.location(897,11);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "fnAttribute", "isCssPreprocessorSource()");
                    }
                    dbg.location(897,40);
                    pushFollow(FOLLOW_cp_expression_in_fnAttribute5006);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:898:11: expression
                    {
                    dbg.location(898,11);
                    pushFollow(FOLLOW_expression_in_fnAttribute5018);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(899, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttribute");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttribute"


    // $ANTLR start "fnAttributeName"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:901:1: fnAttributeName : ( IDENT ( DOT IDENT )* | {...}? cp_variable );
    public final void fnAttributeName() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttributeName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(901, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:902:2: ( IDENT ( DOT IDENT )* | {...}? cp_variable )
            int alt183=2;
            try { dbg.enterDecision(183, decisionCanBacktrack[183]);

            int LA183_0 = input.LA(1);

            if ( (LA183_0==IDENT) ) {
                alt183=1;
            }
            else if ( (LA183_0==MEDIA_SYM||LA183_0==AT_IDENT||LA183_0==SASS_VAR) ) {
                alt183=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 183, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(183);}

            switch (alt183) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:903:13: IDENT ( DOT IDENT )*
                    {
                    dbg.location(903,13);
                    match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName5046); if (state.failed) return ;
                    dbg.location(903,19);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:903:19: ( DOT IDENT )*
                    try { dbg.enterSubRule(182);

                    loop182:
                    do {
                        int alt182=2;
                        try { dbg.enterDecision(182, decisionCanBacktrack[182]);

                        int LA182_0 = input.LA(1);

                        if ( (LA182_0==DOT) ) {
                            alt182=1;
                        }


                        } finally {dbg.exitDecision(182);}

                        switch (alt182) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:903:20: DOT IDENT
                    	    {
                    	    dbg.location(903,20);
                    	    match(input,DOT,FOLLOW_DOT_in_fnAttributeName5049); if (state.failed) return ;
                    	    dbg.location(903,24);
                    	    match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName5051); if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop182;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(182);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:904:15: {...}? cp_variable
                    {
                    dbg.location(904,15);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "fnAttributeName", "isCssPreprocessorSource()");
                    }
                    dbg.location(904,44);
                    pushFollow(FOLLOW_cp_variable_in_fnAttributeName5071);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(905, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttributeName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttributeName"


    // $ANTLR start "fnAttributeValue"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:907:1: fnAttributeValue : ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )* | {...}? cp_math_expression );
    public final void fnAttributeValue() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "fnAttributeValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(907, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:908:2: ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )* | {...}? cp_math_expression )
            int alt188=2;
            try { dbg.enterDecision(188, decisionCanBacktrack[188]);

            try {
                isCyclicDecision = true;
                alt188 = dfa188.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(188);}

            switch (alt188) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:13: term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )*
                    {
                    dbg.location(909,13);
                    pushFollow(FOLLOW_term_in_fnAttributeValue5096);
                    term();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(909,18);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:18: ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )*
                    try { dbg.enterSubRule(187);

                    loop187:
                    do {
                        int alt187=2;
                        try { dbg.enterDecision(187, decisionCanBacktrack[187]);

                        try {
                            isCyclicDecision = true;
                            alt187 = dfa187.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(187);}

                        switch (alt187) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:20: ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term
                    	    {
                    	    dbg.location(909,71);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:71: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )
                    	    int alt186=3;
                    	    try { dbg.enterSubRule(186);
                    	    try { dbg.enterDecision(186, decisionCanBacktrack[186]);

                    	    try {
                    	        isCyclicDecision = true;
                    	        alt186 = dfa186.predict(input);
                    	    }
                    	    catch (NoViableAltException nvae) {
                    	        dbg.recognitionException(nvae);
                    	        throw nvae;
                    	    }
                    	    } finally {dbg.exitDecision(186);}

                    	    switch (alt186) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:73: ws
                    	            {
                    	            dbg.location(909,73);
                    	            pushFollow(FOLLOW_ws_in_fnAttributeValue5128);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;
                    	        case 2 :
                    	            dbg.enterAlt(2);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:78: ( ( ws )? SOLIDUS ( ws )? )
                    	            {
                    	            dbg.location(909,78);
                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:78: ( ( ws )? SOLIDUS ( ws )? )
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:79: ( ws )? SOLIDUS ( ws )?
                    	            {
                    	            dbg.location(909,79);
                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:79: ( ws )?
                    	            int alt184=2;
                    	            try { dbg.enterSubRule(184);
                    	            try { dbg.enterDecision(184, decisionCanBacktrack[184]);

                    	            int LA184_0 = input.LA(1);

                    	            if ( (LA184_0==WS||(LA184_0>=NL && LA184_0<=COMMENT)) ) {
                    	                alt184=1;
                    	            }
                    	            } finally {dbg.exitDecision(184);}

                    	            switch (alt184) {
                    	                case 1 :
                    	                    dbg.enterAlt(1);

                    	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:79: ws
                    	                    {
                    	                    dbg.location(909,79);
                    	                    pushFollow(FOLLOW_ws_in_fnAttributeValue5133);
                    	                    ws();

                    	                    state._fsp--;
                    	                    if (state.failed) return ;

                    	                    }
                    	                    break;

                    	            }
                    	            } finally {dbg.exitSubRule(184);}

                    	            dbg.location(909,83);
                    	            match(input,SOLIDUS,FOLLOW_SOLIDUS_in_fnAttributeValue5136); if (state.failed) return ;
                    	            dbg.location(909,91);
                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:91: ( ws )?
                    	            int alt185=2;
                    	            try { dbg.enterSubRule(185);
                    	            try { dbg.enterDecision(185, decisionCanBacktrack[185]);

                    	            int LA185_0 = input.LA(1);

                    	            if ( (LA185_0==WS||(LA185_0>=NL && LA185_0<=COMMENT)) ) {
                    	                alt185=1;
                    	            }
                    	            } finally {dbg.exitDecision(185);}

                    	            switch (alt185) {
                    	                case 1 :
                    	                    dbg.enterAlt(1);

                    	                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:91: ws
                    	                    {
                    	                    dbg.location(909,91);
                    	                    pushFollow(FOLLOW_ws_in_fnAttributeValue5138);
                    	                    ws();

                    	                    state._fsp--;
                    	                    if (state.failed) return ;

                    	                    }
                    	                    break;

                    	            }
                    	            } finally {dbg.exitSubRule(185);}


                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            dbg.enterAlt(3);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:111: 
                    	            {
                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(186);}

                    	    dbg.location(909,113);
                    	    pushFollow(FOLLOW_term_in_fnAttributeValue5147);
                    	    term();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop187;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(187);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:910:15: {...}? cp_math_expression
                    {
                    dbg.location(910,15);
                    if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "fnAttributeValue", "isCssPreprocessorSource()");
                    }
                    dbg.location(910,44);
                    pushFollow(FOLLOW_cp_math_expression_in_fnAttributeValue5168);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(911, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fnAttributeValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "fnAttributeValue"


    // $ANTLR start "hexColor"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:913:1: hexColor : HASH ;
    public final void hexColor() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "hexColor");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(913, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:914:5: ( HASH )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:914:7: HASH
            {
            dbg.location(914,7);
            match(input,HASH,FOLLOW_HASH_in_hexColor5186); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(915, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "hexColor");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "hexColor"


    // $ANTLR start "ws"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:917:1: ws : ( WS | NL | COMMENT )+ ;
    public final void ws() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "ws");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(917, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:5: ( ( WS | NL | COMMENT )+ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:7: ( WS | NL | COMMENT )+
            {
            dbg.location(918,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:918:7: ( WS | NL | COMMENT )+
            int cnt189=0;
            try { dbg.enterSubRule(189);

            loop189:
            do {
                int alt189=2;
                try { dbg.enterDecision(189, decisionCanBacktrack[189]);

                int LA189_0 = input.LA(1);

                if ( (LA189_0==WS||(LA189_0>=NL && LA189_0<=COMMENT)) ) {
                    alt189=1;
                }


                } finally {dbg.exitDecision(189);}

                switch (alt189) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            	    {
            	    dbg.location(918,7);
            	    if ( input.LA(1)==WS||(input.LA(1)>=NL && input.LA(1)<=COMMENT) ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt189 >= 1 ) break loop189;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(189, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt189++;
            } while (true);
            } finally {dbg.exitSubRule(189);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(919, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ws");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "ws"


    // $ANTLR start "cp_variable_declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:924:1: cp_variable_declaration : ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list | {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ws )? SASS_DEFAULT )? );
    public final void cp_variable_declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_variable_declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(924, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:925:5: ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list | {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ws )? SASS_DEFAULT )? )
            int alt196=2;
            try { dbg.enterDecision(196, decisionCanBacktrack[196]);

            int LA196_0 = input.LA(1);

            if ( (LA196_0==MEDIA_SYM||LA196_0==AT_IDENT) ) {
                int LA196_1 = input.LA(2);

                if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
                    alt196=1;
                }
                else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
                    alt196=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 196, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA196_0==SASS_VAR) ) {
                int LA196_2 = input.LA(2);

                if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
                    alt196=1;
                }
                else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
                    alt196=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 196, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 196, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(196);}

            switch (alt196) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:926:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list
                    {
                    dbg.location(926,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable_declaration", "isLessSource()");
                    }
                    dbg.location(926,27);
                    pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration5255);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(926,39);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:926:39: ( ws )?
                    int alt190=2;
                    try { dbg.enterSubRule(190);
                    try { dbg.enterDecision(190, decisionCanBacktrack[190]);

                    int LA190_0 = input.LA(1);

                    if ( (LA190_0==WS||(LA190_0>=NL && LA190_0<=COMMENT)) ) {
                        alt190=1;
                    }
                    } finally {dbg.exitDecision(190);}

                    switch (alt190) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:926:39: ws
                            {
                            dbg.location(926,39);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5257);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(190);}

                    dbg.location(926,43);
                    match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration5260); if (state.failed) return ;
                    dbg.location(926,49);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:926:49: ( ws )?
                    int alt191=2;
                    try { dbg.enterSubRule(191);
                    try { dbg.enterDecision(191, decisionCanBacktrack[191]);

                    int LA191_0 = input.LA(1);

                    if ( (LA191_0==WS||(LA191_0>=NL && LA191_0<=COMMENT)) ) {
                        alt191=1;
                    }
                    } finally {dbg.exitDecision(191);}

                    switch (alt191) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:926:49: ws
                            {
                            dbg.location(926,49);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5262);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(191);}

                    dbg.location(926,53);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration5265);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ws )? SASS_DEFAULT )?
                    {
                    dbg.location(928,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable_declaration", "isScssSource()");
                    }
                    dbg.location(928,27);
                    pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration5288);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(928,39);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:39: ( ws )?
                    int alt192=2;
                    try { dbg.enterSubRule(192);
                    try { dbg.enterDecision(192, decisionCanBacktrack[192]);

                    int LA192_0 = input.LA(1);

                    if ( (LA192_0==WS||(LA192_0>=NL && LA192_0<=COMMENT)) ) {
                        alt192=1;
                    }
                    } finally {dbg.exitDecision(192);}

                    switch (alt192) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:39: ws
                            {
                            dbg.location(928,39);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5290);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(192);}

                    dbg.location(928,43);
                    match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration5293); if (state.failed) return ;
                    dbg.location(928,49);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:49: ( ws )?
                    int alt193=2;
                    try { dbg.enterSubRule(193);
                    try { dbg.enterDecision(193, decisionCanBacktrack[193]);

                    int LA193_0 = input.LA(1);

                    if ( (LA193_0==WS||(LA193_0>=NL && LA193_0<=COMMENT)) ) {
                        alt193=1;
                    }
                    } finally {dbg.exitDecision(193);}

                    switch (alt193) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:49: ws
                            {
                            dbg.location(928,49);
                            pushFollow(FOLLOW_ws_in_cp_variable_declaration5295);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(193);}

                    dbg.location(928,53);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration5298);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(928,72);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:72: ( ( ws )? SASS_DEFAULT )?
                    int alt195=2;
                    try { dbg.enterSubRule(195);
                    try { dbg.enterDecision(195, decisionCanBacktrack[195]);

                    try {
                        isCyclicDecision = true;
                        alt195 = dfa195.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(195);}

                    switch (alt195) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:73: ( ws )? SASS_DEFAULT
                            {
                            dbg.location(928,73);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:73: ( ws )?
                            int alt194=2;
                            try { dbg.enterSubRule(194);
                            try { dbg.enterDecision(194, decisionCanBacktrack[194]);

                            int LA194_0 = input.LA(1);

                            if ( (LA194_0==WS||(LA194_0>=NL && LA194_0<=COMMENT)) ) {
                                alt194=1;
                            }
                            } finally {dbg.exitDecision(194);}

                            switch (alt194) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:928:73: ws
                                    {
                                    dbg.location(928,73);
                                    pushFollow(FOLLOW_ws_in_cp_variable_declaration5301);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(194);}

                            dbg.location(928,77);
                            match(input,SASS_DEFAULT,FOLLOW_SASS_DEFAULT_in_cp_variable_declaration5304); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(195);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(929, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_variable_declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_variable_declaration"


    // $ANTLR start "cp_variable"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:932:1: cp_variable : ({...}? ( AT_IDENT | MEDIA_SYM ) | {...}? ( SASS_VAR ) );
    public final void cp_variable() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_variable");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(932, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:933:5: ({...}? ( AT_IDENT | MEDIA_SYM ) | {...}? ( SASS_VAR ) )
            int alt197=2;
            try { dbg.enterDecision(197, decisionCanBacktrack[197]);

            int LA197_0 = input.LA(1);

            if ( (LA197_0==MEDIA_SYM||LA197_0==AT_IDENT) ) {
                alt197=1;
            }
            else if ( (LA197_0==SASS_VAR) ) {
                alt197=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 197, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(197);}

            switch (alt197) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:934:9: {...}? ( AT_IDENT | MEDIA_SYM )
                    {
                    dbg.location(934,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable", "isLessSource()");
                    }
                    dbg.location(934,27);
                    if ( input.LA(1)==MEDIA_SYM||input.LA(1)==AT_IDENT ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:936:9: {...}? ( SASS_VAR )
                    {
                    dbg.location(936,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_variable", "isScssSource()");
                    }
                    dbg.location(936,27);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:936:27: ( SASS_VAR )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:936:29: SASS_VAR
                    {
                    dbg.location(936,29);
                    match(input,SASS_VAR,FOLLOW_SASS_VAR_in_cp_variable5367); if (state.failed) return ;

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(937, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_variable");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_variable"


    // $ANTLR start "cp_expression_list"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:940:1: cp_expression_list : cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )* ;
    public final void cp_expression_list() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression_list");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(940, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:941:5: ( cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:942:5: cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*
            {
            dbg.location(942,5);
            pushFollow(FOLLOW_cp_expression_in_cp_expression_list5391);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(943,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:5: ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*
            try { dbg.enterSubRule(200);

            loop200:
            do {
                int alt200=2;
                try { dbg.enterDecision(200, decisionCanBacktrack[200]);

                try {
                    isCyclicDecision = true;
                    alt200 = dfa200.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(200);}

                switch (alt200) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:6: ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression
            	    {
            	    dbg.location(943,37);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:37: ( ws )?
            	    int alt198=2;
            	    try { dbg.enterSubRule(198);
            	    try { dbg.enterDecision(198, decisionCanBacktrack[198]);

            	    int LA198_0 = input.LA(1);

            	    if ( (LA198_0==WS||(LA198_0>=NL && LA198_0<=COMMENT)) ) {
            	        alt198=1;
            	    }
            	    } finally {dbg.exitDecision(198);}

            	    switch (alt198) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:37: ws
            	            {
            	            dbg.location(943,37);
            	            pushFollow(FOLLOW_ws_in_cp_expression_list5410);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(198);}

            	    dbg.location(943,41);
            	    match(input,COMMA,FOLLOW_COMMA_in_cp_expression_list5413); if (state.failed) return ;
            	    dbg.location(943,47);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:47: ( ws )?
            	    int alt199=2;
            	    try { dbg.enterSubRule(199);
            	    try { dbg.enterDecision(199, decisionCanBacktrack[199]);

            	    int LA199_0 = input.LA(1);

            	    if ( (LA199_0==WS||(LA199_0>=NL && LA199_0<=COMMENT)) ) {
            	        alt199=1;
            	    }
            	    } finally {dbg.exitDecision(199);}

            	    switch (alt199) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:47: ws
            	            {
            	            dbg.location(943,47);
            	            pushFollow(FOLLOW_ws_in_cp_expression_list5415);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(199);}

            	    dbg.location(943,51);
            	    pushFollow(FOLLOW_cp_expression_in_cp_expression_list5418);
            	    cp_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop200;
                }
            } while (true);
            } finally {dbg.exitSubRule(200);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(944, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression_list");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression_list"


    // $ANTLR start "cp_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:956:1: cp_expression : cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* ;
    public final void cp_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(956, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:957:5: ( cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:958:5: cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*
            {
            dbg.location(958,5);
            pushFollow(FOLLOW_cp_expression_atom_in_cp_expression5455);
            cp_expression_atom();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(959,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:959:5: ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*
            try { dbg.enterSubRule(204);

            loop204:
            do {
                int alt204=3;
                try { dbg.enterDecision(204, decisionCanBacktrack[204]);

                try {
                    isCyclicDecision = true;
                    alt204 = dfa204.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(204);}

                switch (alt204) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:960:9: ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom
            	    {
            	    dbg.location(960,39);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:960:39: ( ( ws )? cp_expression_operator ( ws )? )
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:960:40: ( ws )? cp_expression_operator ( ws )?
            	    {
            	    dbg.location(960,40);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:960:40: ( ws )?
            	    int alt201=2;
            	    try { dbg.enterSubRule(201);
            	    try { dbg.enterDecision(201, decisionCanBacktrack[201]);

            	    int LA201_0 = input.LA(1);

            	    if ( (LA201_0==WS||(LA201_0>=NL && LA201_0<=COMMENT)) ) {
            	        alt201=1;
            	    }
            	    } finally {dbg.exitDecision(201);}

            	    switch (alt201) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:960:40: ws
            	            {
            	            dbg.location(960,40);
            	            pushFollow(FOLLOW_ws_in_cp_expression5481);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(201);}

            	    dbg.location(960,44);
            	    pushFollow(FOLLOW_cp_expression_operator_in_cp_expression5484);
            	    cp_expression_operator();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(960,67);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:960:67: ( ws )?
            	    int alt202=2;
            	    try { dbg.enterSubRule(202);
            	    try { dbg.enterDecision(202, decisionCanBacktrack[202]);

            	    int LA202_0 = input.LA(1);

            	    if ( (LA202_0==WS||(LA202_0>=NL && LA202_0<=COMMENT)) ) {
            	        alt202=1;
            	    }
            	    } finally {dbg.exitDecision(202);}

            	    switch (alt202) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:960:67: ws
            	            {
            	            dbg.location(960,67);
            	            pushFollow(FOLLOW_ws_in_cp_expression5486);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(202);}


            	    }

            	    dbg.location(960,72);
            	    pushFollow(FOLLOW_cp_expression_atom_in_cp_expression5490);
            	    cp_expression_atom();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:11: ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom
            	    {
            	    dbg.location(961,37);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:37: ( ws )?
            	    int alt203=2;
            	    try { dbg.enterSubRule(203);
            	    try { dbg.enterDecision(203, decisionCanBacktrack[203]);

            	    int LA203_0 = input.LA(1);

            	    if ( (LA203_0==WS||(LA203_0>=NL && LA203_0<=COMMENT)) ) {
            	        alt203=1;
            	    }
            	    } finally {dbg.exitDecision(203);}

            	    switch (alt203) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:37: ws
            	            {
            	            dbg.location(961,37);
            	            pushFollow(FOLLOW_ws_in_cp_expression5510);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(203);}

            	    dbg.location(961,41);
            	    pushFollow(FOLLOW_cp_expression_atom_in_cp_expression5513);
            	    cp_expression_atom();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop204;
                }
            } while (true);
            } finally {dbg.exitSubRule(204);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(963, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression"


    // $ANTLR start "cp_expression_operator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:965:1: cp_expression_operator : ( OR | AND | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ );
    public final void cp_expression_operator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression_operator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(965, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:966:5: ( OR | AND | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(966,5);
            if ( input.LA(1)==AND||input.LA(1)==GREATER||(input.LA(1)>=OR && input.LA(1)<=GREATER_OR_EQ) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(968, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression_operator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression_operator"


    // $ANTLR start "cp_expression_atom"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:970:1: cp_expression_atom : ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN ) ;
    public final void cp_expression_atom() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_expression_atom");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(970, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:971:5: ( ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:972:9: ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN )
            {
            dbg.location(972,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:972:9: ( NOT ( ws )? )?
            int alt206=2;
            try { dbg.enterSubRule(206);
            try { dbg.enterDecision(206, decisionCanBacktrack[206]);

            int LA206_0 = input.LA(1);

            if ( (LA206_0==NOT) ) {
                alt206=1;
            }
            } finally {dbg.exitDecision(206);}

            switch (alt206) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:972:10: NOT ( ws )?
                    {
                    dbg.location(972,10);
                    match(input,NOT,FOLLOW_NOT_in_cp_expression_atom5604); if (state.failed) return ;
                    dbg.location(972,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:972:14: ( ws )?
                    int alt205=2;
                    try { dbg.enterSubRule(205);
                    try { dbg.enterDecision(205, decisionCanBacktrack[205]);

                    int LA205_0 = input.LA(1);

                    if ( (LA205_0==WS||(LA205_0>=NL && LA205_0<=COMMENT)) ) {
                        alt205=1;
                    }
                    } finally {dbg.exitDecision(205);}

                    switch (alt205) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:972:14: ws
                            {
                            dbg.location(972,14);
                            pushFollow(FOLLOW_ws_in_cp_expression_atom5606);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(205);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(206);}

            dbg.location(973,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:973:9: ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN )
            int alt209=2;
            try { dbg.enterSubRule(209);
            try { dbg.enterDecision(209, decisionCanBacktrack[209]);

            try {
                isCyclicDecision = true;
                alt209 = dfa209.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(209);}

            switch (alt209) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:974:13: ( cp_math_expression )=> cp_math_expression
                    {
                    dbg.location(974,35);
                    pushFollow(FOLLOW_cp_math_expression_in_cp_expression_atom5638);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:975:15: LPAREN ( ws )? cp_expression_list ( ws )? RPAREN
                    {
                    dbg.location(975,15);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_expression_atom5654); if (state.failed) return ;
                    dbg.location(975,22);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:975:22: ( ws )?
                    int alt207=2;
                    try { dbg.enterSubRule(207);
                    try { dbg.enterDecision(207, decisionCanBacktrack[207]);

                    int LA207_0 = input.LA(1);

                    if ( (LA207_0==WS||(LA207_0>=NL && LA207_0<=COMMENT)) ) {
                        alt207=1;
                    }
                    } finally {dbg.exitDecision(207);}

                    switch (alt207) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:975:22: ws
                            {
                            dbg.location(975,22);
                            pushFollow(FOLLOW_ws_in_cp_expression_atom5656);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(207);}

                    dbg.location(975,26);
                    pushFollow(FOLLOW_cp_expression_list_in_cp_expression_atom5659);
                    cp_expression_list();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(975,45);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:975:45: ( ws )?
                    int alt208=2;
                    try { dbg.enterSubRule(208);
                    try { dbg.enterDecision(208, decisionCanBacktrack[208]);

                    int LA208_0 = input.LA(1);

                    if ( (LA208_0==WS||(LA208_0>=NL && LA208_0<=COMMENT)) ) {
                        alt208=1;
                    }
                    } finally {dbg.exitDecision(208);}

                    switch (alt208) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:975:45: ws
                            {
                            dbg.location(975,45);
                            pushFollow(FOLLOW_ws_in_cp_expression_atom5661);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(208);}

                    dbg.location(975,49);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_expression_atom5664); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(209);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(977, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_expression_atom");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_expression_atom"


    // $ANTLR start "cp_math_expressions"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:980:1: cp_math_expressions : cp_math_expression ( ws cp_math_expression )* ;
    public final void cp_math_expressions() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_math_expressions");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(980, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:981:5: ( cp_math_expression ( ws cp_math_expression )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:982:5: cp_math_expression ( ws cp_math_expression )*
            {
            dbg.location(982,5);
            pushFollow(FOLLOW_cp_math_expression_in_cp_math_expressions5696);
            cp_math_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(983,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:983:5: ( ws cp_math_expression )*
            try { dbg.enterSubRule(210);

            loop210:
            do {
                int alt210=2;
                try { dbg.enterDecision(210, decisionCanBacktrack[210]);

                int LA210_0 = input.LA(1);

                if ( (LA210_0==WS||(LA210_0>=NL && LA210_0<=COMMENT)) ) {
                    alt210=1;
                }


                } finally {dbg.exitDecision(210);}

                switch (alt210) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:983:6: ws cp_math_expression
            	    {
            	    dbg.location(983,6);
            	    pushFollow(FOLLOW_ws_in_cp_math_expressions5703);
            	    ws();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    dbg.location(983,9);
            	    pushFollow(FOLLOW_cp_math_expression_in_cp_math_expressions5705);
            	    cp_math_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop210;
                }
            } while (true);
            } finally {dbg.exitSubRule(210);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(984, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_math_expressions");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_math_expressions"


    // $ANTLR start "cp_math_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:998:1: cp_math_expression : cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )* ;
    public final void cp_math_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_math_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(998, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:999:5: ( cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:999:10: cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*
            {
            dbg.location(999,10);
            pushFollow(FOLLOW_cp_math_expression_atom_in_cp_math_expression5739);
            cp_math_expression_atom();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1000,10);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1000:10: ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*
            try { dbg.enterSubRule(213);

            loop213:
            do {
                int alt213=2;
                try { dbg.enterDecision(213, decisionCanBacktrack[213]);

                try {
                    isCyclicDecision = true;
                    alt213 = dfa213.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(213);}

                switch (alt213) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1001:13: ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom
            	    {
            	    dbg.location(1001,48);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1001:48: ( ws )?
            	    int alt211=2;
            	    try { dbg.enterSubRule(211);
            	    try { dbg.enterDecision(211, decisionCanBacktrack[211]);

            	    int LA211_0 = input.LA(1);

            	    if ( (LA211_0==WS||(LA211_0>=NL && LA211_0<=COMMENT)) ) {
            	        alt211=1;
            	    }
            	    } finally {dbg.exitDecision(211);}

            	    switch (alt211) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1001:48: ws
            	            {
            	            dbg.location(1001,48);
            	            pushFollow(FOLLOW_ws_in_cp_math_expression5782);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(211);}

            	    dbg.location(1001,52);
            	    if ( (input.LA(1)>=SOLIDUS && input.LA(1)<=PLUS)||input.LA(1)==STAR ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }

            	    dbg.location(1001,78);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1001:78: ( ws )?
            	    int alt212=2;
            	    try { dbg.enterSubRule(212);
            	    try { dbg.enterDecision(212, decisionCanBacktrack[212]);

            	    int LA212_0 = input.LA(1);

            	    if ( (LA212_0==WS||(LA212_0>=NL && LA212_0<=COMMENT)) ) {
            	        alt212=1;
            	    }
            	    } finally {dbg.exitDecision(212);}

            	    switch (alt212) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1001:78: ws
            	            {
            	            dbg.location(1001,78);
            	            pushFollow(FOLLOW_ws_in_cp_math_expression5795);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(212);}

            	    dbg.location(1001,82);
            	    pushFollow(FOLLOW_cp_math_expression_atom_in_cp_math_expression5798);
            	    cp_math_expression_atom();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop213;
                }
            } while (true);
            } finally {dbg.exitSubRule(213);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1003, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_math_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_math_expression"


    // $ANTLR start "cp_math_expression_atom"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1005:1: cp_math_expression_atom : ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN );
    public final void cp_math_expression_atom() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_math_expression_atom");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1005, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1006:5: ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN )
            int alt218=3;
            try { dbg.enterDecision(218, decisionCanBacktrack[218]);

            try {
                isCyclicDecision = true;
                alt218 = dfa218.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(218);}

            switch (alt218) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1007:5: term
                    {
                    dbg.location(1007,5);
                    pushFollow(FOLLOW_term_in_cp_math_expression_atom5836);
                    term();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1008:7: IMPORTANT_SYM
                    {
                    dbg.location(1008,7);
                    match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_cp_math_expression_atom5844); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1009:7: ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN
                    {
                    dbg.location(1009,7);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1009:7: ( unaryOperator ( ws )? )?
                    int alt215=2;
                    try { dbg.enterSubRule(215);
                    try { dbg.enterDecision(215, decisionCanBacktrack[215]);

                    int LA215_0 = input.LA(1);

                    if ( ((LA215_0>=MINUS && LA215_0<=PLUS)) ) {
                        alt215=1;
                    }
                    } finally {dbg.exitDecision(215);}

                    switch (alt215) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1009:9: unaryOperator ( ws )?
                            {
                            dbg.location(1009,9);
                            pushFollow(FOLLOW_unaryOperator_in_cp_math_expression_atom5855);
                            unaryOperator();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(1009,23);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1009:23: ( ws )?
                            int alt214=2;
                            try { dbg.enterSubRule(214);
                            try { dbg.enterDecision(214, decisionCanBacktrack[214]);

                            int LA214_0 = input.LA(1);

                            if ( (LA214_0==WS||(LA214_0>=NL && LA214_0<=COMMENT)) ) {
                                alt214=1;
                            }
                            } finally {dbg.exitDecision(214);}

                            switch (alt214) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1009:23: ws
                                    {
                                    dbg.location(1009,23);
                                    pushFollow(FOLLOW_ws_in_cp_math_expression_atom5857);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(214);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(215);}

                    dbg.location(1009,30);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_math_expression_atom5863); if (state.failed) return ;
                    dbg.location(1009,37);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1009:37: ( ws )?
                    int alt216=2;
                    try { dbg.enterSubRule(216);
                    try { dbg.enterDecision(216, decisionCanBacktrack[216]);

                    int LA216_0 = input.LA(1);

                    if ( (LA216_0==WS||(LA216_0>=NL && LA216_0<=COMMENT)) ) {
                        alt216=1;
                    }
                    } finally {dbg.exitDecision(216);}

                    switch (alt216) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1009:37: ws
                            {
                            dbg.location(1009,37);
                            pushFollow(FOLLOW_ws_in_cp_math_expression_atom5865);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(216);}

                    dbg.location(1009,41);
                    pushFollow(FOLLOW_cp_math_expression_in_cp_math_expression_atom5868);
                    cp_math_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1009,60);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1009:60: ( ws )?
                    int alt217=2;
                    try { dbg.enterSubRule(217);
                    try { dbg.enterDecision(217, decisionCanBacktrack[217]);

                    int LA217_0 = input.LA(1);

                    if ( (LA217_0==WS||(LA217_0>=NL && LA217_0<=COMMENT)) ) {
                        alt217=1;
                    }
                    } finally {dbg.exitDecision(217);}

                    switch (alt217) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1009:60: ws
                            {
                            dbg.location(1009,60);
                            pushFollow(FOLLOW_ws_in_cp_math_expression_atom5870);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(217);}

                    dbg.location(1009,64);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_math_expression_atom5873); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1010, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_math_expression_atom");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_math_expression_atom"


    // $ANTLR start "cp_mixin_declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1018:1: cp_mixin_declaration : ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block ;
    public final void cp_mixin_declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1018, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1019:5: ( ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1020:5: ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block
            {
            dbg.location(1020,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1020:5: ({...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )? | {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? )
            int alt228=2;
            try { dbg.enterSubRule(228);
            try { dbg.enterDecision(228, decisionCanBacktrack[228]);

            int LA228_0 = input.LA(1);

            if ( (LA228_0==DOT) ) {
                alt228=1;
            }
            else if ( (LA228_0==SASS_MIXIN) ) {
                alt228=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 228, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(228);}

            switch (alt228) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1021:9: {...}? DOT cp_mixin_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ( ws )? less_mixin_guarded )?
                    {
                    dbg.location(1021,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_declaration", "isLessSource()");
                    }
                    dbg.location(1021,27);
                    match(input,DOT,FOLLOW_DOT_in_cp_mixin_declaration5913); if (state.failed) return ;
                    dbg.location(1021,31);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration5915);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1021,45);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1021:45: ( ws )?
                    int alt219=2;
                    try { dbg.enterSubRule(219);
                    try { dbg.enterDecision(219, decisionCanBacktrack[219]);

                    int LA219_0 = input.LA(1);

                    if ( (LA219_0==WS||(LA219_0>=NL && LA219_0<=COMMENT)) ) {
                        alt219=1;
                    }
                    } finally {dbg.exitDecision(219);}

                    switch (alt219) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1021:45: ws
                            {
                            dbg.location(1021,45);
                            pushFollow(FOLLOW_ws_in_cp_mixin_declaration5917);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(219);}

                    dbg.location(1021,49);
                    match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration5920); if (state.failed) return ;
                    dbg.location(1021,56);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1021:56: ( ws )?
                    int alt220=2;
                    try { dbg.enterSubRule(220);
                    try { dbg.enterDecision(220, decisionCanBacktrack[220]);

                    int LA220_0 = input.LA(1);

                    if ( (LA220_0==WS||(LA220_0>=NL && LA220_0<=COMMENT)) ) {
                        alt220=1;
                    }
                    } finally {dbg.exitDecision(220);}

                    switch (alt220) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1021:56: ws
                            {
                            dbg.location(1021,56);
                            pushFollow(FOLLOW_ws_in_cp_mixin_declaration5922);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(220);}

                    dbg.location(1021,60);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1021:60: ( cp_args_list )?
                    int alt221=2;
                    try { dbg.enterSubRule(221);
                    try { dbg.enterDecision(221, decisionCanBacktrack[221]);

                    int LA221_0 = input.LA(1);

                    if ( (LA221_0==MEDIA_SYM||LA221_0==AT_IDENT||LA221_0==SASS_VAR||(LA221_0>=CP_DOTS && LA221_0<=LESS_REST)) ) {
                        alt221=1;
                    }
                    } finally {dbg.exitDecision(221);}

                    switch (alt221) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1021:60: cp_args_list
                            {
                            dbg.location(1021,60);
                            pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration5925);
                            cp_args_list();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(221);}

                    dbg.location(1021,74);
                    match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration5928); if (state.failed) return ;
                    dbg.location(1021,81);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1021:81: ( ( ws )? less_mixin_guarded )?
                    int alt223=2;
                    try { dbg.enterSubRule(223);
                    try { dbg.enterDecision(223, decisionCanBacktrack[223]);

                    try {
                        isCyclicDecision = true;
                        alt223 = dfa223.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(223);}

                    switch (alt223) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1021:82: ( ws )? less_mixin_guarded
                            {
                            dbg.location(1021,82);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1021:82: ( ws )?
                            int alt222=2;
                            try { dbg.enterSubRule(222);
                            try { dbg.enterDecision(222, decisionCanBacktrack[222]);

                            int LA222_0 = input.LA(1);

                            if ( (LA222_0==WS||(LA222_0>=NL && LA222_0<=COMMENT)) ) {
                                alt222=1;
                            }
                            } finally {dbg.exitDecision(222);}

                            switch (alt222) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1021:82: ws
                                    {
                                    dbg.location(1021,82);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration5931);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(222);}

                            dbg.location(1021,86);
                            pushFollow(FOLLOW_less_mixin_guarded_in_cp_mixin_declaration5934);
                            less_mixin_guarded();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(223);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1023:9: {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?
                    {
                    dbg.location(1023,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_declaration", "isScssSource()");
                    }
                    dbg.location(1023,27);
                    match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_cp_mixin_declaration5958); if (state.failed) return ;
                    dbg.location(1023,38);
                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration5960);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1023,41);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration5962);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1023,55);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1023:55: ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?
                    int alt227=2;
                    try { dbg.enterSubRule(227);
                    try { dbg.enterDecision(227, decisionCanBacktrack[227]);

                    try {
                        isCyclicDecision = true;
                        alt227 = dfa227.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(227);}

                    switch (alt227) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1023:56: ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN
                            {
                            dbg.location(1023,56);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1023:56: ( ws )?
                            int alt224=2;
                            try { dbg.enterSubRule(224);
                            try { dbg.enterDecision(224, decisionCanBacktrack[224]);

                            int LA224_0 = input.LA(1);

                            if ( (LA224_0==WS||(LA224_0>=NL && LA224_0<=COMMENT)) ) {
                                alt224=1;
                            }
                            } finally {dbg.exitDecision(224);}

                            switch (alt224) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1023:56: ws
                                    {
                                    dbg.location(1023,56);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration5965);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(224);}

                            dbg.location(1023,60);
                            match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration5968); if (state.failed) return ;
                            dbg.location(1023,67);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1023:67: ( ws )?
                            int alt225=2;
                            try { dbg.enterSubRule(225);
                            try { dbg.enterDecision(225, decisionCanBacktrack[225]);

                            int LA225_0 = input.LA(1);

                            if ( (LA225_0==WS||(LA225_0>=NL && LA225_0<=COMMENT)) ) {
                                alt225=1;
                            }
                            } finally {dbg.exitDecision(225);}

                            switch (alt225) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1023:67: ws
                                    {
                                    dbg.location(1023,67);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration5970);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(225);}

                            dbg.location(1023,71);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1023:71: ( cp_args_list )?
                            int alt226=2;
                            try { dbg.enterSubRule(226);
                            try { dbg.enterDecision(226, decisionCanBacktrack[226]);

                            int LA226_0 = input.LA(1);

                            if ( (LA226_0==MEDIA_SYM||LA226_0==AT_IDENT||LA226_0==SASS_VAR||(LA226_0>=CP_DOTS && LA226_0<=LESS_REST)) ) {
                                alt226=1;
                            }
                            } finally {dbg.exitDecision(226);}

                            switch (alt226) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1023:71: cp_args_list
                                    {
                                    dbg.location(1023,71);
                                    pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration5973);
                                    cp_args_list();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(226);}

                            dbg.location(1023,85);
                            match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration5976); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(227);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(228);}

            dbg.location(1025,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:5: ( ws )?
            int alt229=2;
            try { dbg.enterSubRule(229);
            try { dbg.enterDecision(229, decisionCanBacktrack[229]);

            int LA229_0 = input.LA(1);

            if ( (LA229_0==WS||(LA229_0>=NL && LA229_0<=COMMENT)) ) {
                alt229=1;
            }
            } finally {dbg.exitDecision(229);}

            switch (alt229) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1025:5: ws
                    {
                    dbg.location(1025,5);
                    pushFollow(FOLLOW_ws_in_cp_mixin_declaration5990);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(229);}

            dbg.location(1025,9);
            pushFollow(FOLLOW_cp_mixin_block_in_cp_mixin_declaration5993);
            cp_mixin_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1026, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_declaration"


    // $ANTLR start "cp_mixin_call"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1030:1: cp_mixin_call : ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? | {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? ) ;
    public final void cp_mixin_call() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1030, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1031:5: ( ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? | {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? ) )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:5: ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? | {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? )
            {
            dbg.location(1032,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1032:5: ({...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? | {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? )
            int alt240=2;
            try { dbg.enterSubRule(240);
            try { dbg.enterDecision(240, decisionCanBacktrack[240]);

            int LA240_0 = input.LA(1);

            if ( (LA240_0==DOT) ) {
                alt240=1;
            }
            else if ( (LA240_0==SASS_INCLUDE) ) {
                alt240=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 240, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(240);}

            switch (alt240) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1033:9: {...}? DOT cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
                    {
                    dbg.location(1033,9);
                    if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_call", "isLessSource()");
                    }
                    dbg.location(1033,27);
                    match(input,DOT,FOLLOW_DOT_in_cp_mixin_call6033); if (state.failed) return ;
                    dbg.location(1033,31);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call6035);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1033,45);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1033:45: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
                    int alt233=2;
                    try { dbg.enterSubRule(233);
                    try { dbg.enterDecision(233, decisionCanBacktrack[233]);

                    try {
                        isCyclicDecision = true;
                        alt233 = dfa233.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(233);}

                    switch (alt233) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1033:46: ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN
                            {
                            dbg.location(1033,46);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1033:46: ( ws )?
                            int alt230=2;
                            try { dbg.enterSubRule(230);
                            try { dbg.enterDecision(230, decisionCanBacktrack[230]);

                            int LA230_0 = input.LA(1);

                            if ( (LA230_0==WS||(LA230_0>=NL && LA230_0<=COMMENT)) ) {
                                alt230=1;
                            }
                            } finally {dbg.exitDecision(230);}

                            switch (alt230) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1033:46: ws
                                    {
                                    dbg.location(1033,46);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6038);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(230);}

                            dbg.location(1033,50);
                            match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_call6041); if (state.failed) return ;
                            dbg.location(1033,57);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1033:57: ( ws )?
                            int alt231=2;
                            try { dbg.enterSubRule(231);
                            try { dbg.enterDecision(231, decisionCanBacktrack[231]);

                            int LA231_0 = input.LA(1);

                            if ( (LA231_0==WS||(LA231_0>=NL && LA231_0<=COMMENT)) ) {
                                alt231=1;
                            }
                            } finally {dbg.exitDecision(231);}

                            switch (alt231) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1033:57: ws
                                    {
                                    dbg.location(1033,57);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6043);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(231);}

                            dbg.location(1033,61);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1033:61: ( cp_mixin_call_args )?
                            int alt232=2;
                            try { dbg.enterSubRule(232);
                            try { dbg.enterDecision(232, decisionCanBacktrack[232]);

                            int LA232_0 = input.LA(1);

                            if ( ((LA232_0>=IDENT && LA232_0<=URI)||LA232_0==MEDIA_SYM||(LA232_0>=NOT && LA232_0<=LPAREN)||LA232_0==AT_IDENT||LA232_0==PERCENTAGE||(LA232_0>=MINUS && LA232_0<=PLUS)||(LA232_0>=HASH_SYMBOL && LA232_0<=HASH)||(LA232_0>=SASS_VAR && LA232_0<=DIMENSION)) ) {
                                alt232=1;
                            }
                            } finally {dbg.exitDecision(232);}

                            switch (alt232) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1033:61: cp_mixin_call_args
                                    {
                                    dbg.location(1033,61);
                                    pushFollow(FOLLOW_cp_mixin_call_args_in_cp_mixin_call6046);
                                    cp_mixin_call_args();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(232);}

                            dbg.location(1033,81);
                            match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_call6049); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(233);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:9: {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )?
                    {
                    dbg.location(1035,9);
                    if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "cp_mixin_call", "isScssSource()");
                    }
                    dbg.location(1035,27);
                    match(input,SASS_INCLUDE,FOLLOW_SASS_INCLUDE_in_cp_mixin_call6073); if (state.failed) return ;
                    dbg.location(1035,40);
                    pushFollow(FOLLOW_ws_in_cp_mixin_call6075);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1035,43);
                    pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call6077);
                    cp_mixin_name();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1035,57);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:57: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
                    int alt237=2;
                    try { dbg.enterSubRule(237);
                    try { dbg.enterDecision(237, decisionCanBacktrack[237]);

                    try {
                        isCyclicDecision = true;
                        alt237 = dfa237.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(237);}

                    switch (alt237) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:58: ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN
                            {
                            dbg.location(1035,58);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:58: ( ws )?
                            int alt234=2;
                            try { dbg.enterSubRule(234);
                            try { dbg.enterDecision(234, decisionCanBacktrack[234]);

                            int LA234_0 = input.LA(1);

                            if ( (LA234_0==WS||(LA234_0>=NL && LA234_0<=COMMENT)) ) {
                                alt234=1;
                            }
                            } finally {dbg.exitDecision(234);}

                            switch (alt234) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:58: ws
                                    {
                                    dbg.location(1035,58);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6080);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(234);}

                            dbg.location(1035,62);
                            match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_call6083); if (state.failed) return ;
                            dbg.location(1035,69);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:69: ( ws )?
                            int alt235=2;
                            try { dbg.enterSubRule(235);
                            try { dbg.enterDecision(235, decisionCanBacktrack[235]);

                            int LA235_0 = input.LA(1);

                            if ( (LA235_0==WS||(LA235_0>=NL && LA235_0<=COMMENT)) ) {
                                alt235=1;
                            }
                            } finally {dbg.exitDecision(235);}

                            switch (alt235) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:69: ws
                                    {
                                    dbg.location(1035,69);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6085);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(235);}

                            dbg.location(1035,73);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:73: ( cp_mixin_call_args )?
                            int alt236=2;
                            try { dbg.enterSubRule(236);
                            try { dbg.enterDecision(236, decisionCanBacktrack[236]);

                            int LA236_0 = input.LA(1);

                            if ( ((LA236_0>=IDENT && LA236_0<=URI)||LA236_0==MEDIA_SYM||(LA236_0>=NOT && LA236_0<=LPAREN)||LA236_0==AT_IDENT||LA236_0==PERCENTAGE||(LA236_0>=MINUS && LA236_0<=PLUS)||(LA236_0>=HASH_SYMBOL && LA236_0<=HASH)||(LA236_0>=SASS_VAR && LA236_0<=DIMENSION)) ) {
                                alt236=1;
                            }
                            } finally {dbg.exitDecision(236);}

                            switch (alt236) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:73: cp_mixin_call_args
                                    {
                                    dbg.location(1035,73);
                                    pushFollow(FOLLOW_cp_mixin_call_args_in_cp_mixin_call6088);
                                    cp_mixin_call_args();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(236);}

                            dbg.location(1035,93);
                            match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_call6091); if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(237);}

                    dbg.location(1035,102);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:102: ( ( ws )? cp_mixin_block )?
                    int alt239=2;
                    try { dbg.enterSubRule(239);
                    try { dbg.enterDecision(239, decisionCanBacktrack[239]);

                    try {
                        isCyclicDecision = true;
                        alt239 = dfa239.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(239);}

                    switch (alt239) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:103: ( ws )? cp_mixin_block
                            {
                            dbg.location(1035,103);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:103: ( ws )?
                            int alt238=2;
                            try { dbg.enterSubRule(238);
                            try { dbg.enterDecision(238, decisionCanBacktrack[238]);

                            int LA238_0 = input.LA(1);

                            if ( (LA238_0==WS||(LA238_0>=NL && LA238_0<=COMMENT)) ) {
                                alt238=1;
                            }
                            } finally {dbg.exitDecision(238);}

                            switch (alt238) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1035:103: ws
                                    {
                                    dbg.location(1035,103);
                                    pushFollow(FOLLOW_ws_in_cp_mixin_call6096);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(238);}

                            dbg.location(1035,107);
                            pushFollow(FOLLOW_cp_mixin_block_in_cp_mixin_call6099);
                            cp_mixin_block();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(239);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(240);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1037, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_call");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_call"


    // $ANTLR start "cp_mixin_block"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1039:1: cp_mixin_block : LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void cp_mixin_block() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_block");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1039, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1040:5: ( LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:5: LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(1041,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_cp_mixin_block6132); if (state.failed) return ;
            dbg.location(1041,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:12: ( ws )?
            int alt241=2;
            try { dbg.enterSubRule(241);
            try { dbg.enterDecision(241, decisionCanBacktrack[241]);

            int LA241_0 = input.LA(1);

            if ( (LA241_0==WS||(LA241_0>=NL && LA241_0<=COMMENT)) ) {
                alt241=1;
            }
            } finally {dbg.exitDecision(241);}

            switch (alt241) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1041:12: ws
                    {
                    dbg.location(1041,12);
                    pushFollow(FOLLOW_ws_in_cp_mixin_block6134);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(241);}

            dbg.location(1041,16);
            pushFollow(FOLLOW_syncToFollow_in_cp_mixin_block6137);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1042,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1042:9: ( declarations )?
            int alt242=2;
            try { dbg.enterSubRule(242);
            try { dbg.enterDecision(242, decisionCanBacktrack[242]);

            int LA242_0 = input.LA(1);

            if ( ((LA242_0>=SEMI && LA242_0<=IDENT)||(LA242_0>=IMPORT_SYM && LA242_0<=MEDIA_SYM)||LA242_0==GEN||(LA242_0>=COLON && LA242_0<=AT_IDENT)||LA242_0==MOZ_DOCUMENT_SYM||LA242_0==WEBKIT_KEYFRAMES_SYM||(LA242_0>=PAGE_SYM && LA242_0<=FONT_FACE_SYM)||LA242_0==MINUS||LA242_0==GREATER||(LA242_0>=HASH_SYMBOL && LA242_0<=PIPE)||LA242_0==LESS_AND||LA242_0==SASS_VAR||(LA242_0>=SASS_MIXIN && LA242_0<=SASS_INCLUDE)||LA242_0==SASS_EXTEND||(LA242_0>=SASS_DEBUG && LA242_0<=SASS_IF)||(LA242_0>=SASS_FOR && LA242_0<=SASS_WHILE)||(LA242_0>=SASS_RETURN && LA242_0<=SASS_CONTENT)) ) {
                alt242=1;
            }
            } finally {dbg.exitDecision(242);}

            switch (alt242) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1042:9: declarations
                    {
                    dbg.location(1042,9);
                    pushFollow(FOLLOW_declarations_in_cp_mixin_block6147);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(242);}

            dbg.location(1043,5);
            match(input,RBRACE,FOLLOW_RBRACE_in_cp_mixin_block6154); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1044, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_block");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_block"


    // $ANTLR start "cp_mixin_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1046:1: cp_mixin_name : IDENT ;
    public final void cp_mixin_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1046, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1047:5: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1048:5: IDENT
            {
            dbg.location(1048,5);
            match(input,IDENT,FOLLOW_IDENT_in_cp_mixin_name6183); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1049, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_name"


    // $ANTLR start "cp_mixin_call_args"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1051:1: cp_mixin_call_args : cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS )? ;
    public final void cp_mixin_call_args() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_args");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1051, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1052:5: ( cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:5: cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS )?
            {
            dbg.location(1055,5);
            pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6219);
            cp_mixin_call_arg();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1055,23);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:23: ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )*
            try { dbg.enterSubRule(244);

            loop244:
            do {
                int alt244=2;
                try { dbg.enterDecision(244, decisionCanBacktrack[244]);

                int LA244_0 = input.LA(1);

                if ( (LA244_0==SEMI||LA244_0==COMMA) ) {
                    alt244=1;
                }


                } finally {dbg.exitDecision(244);}

                switch (alt244) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:25: ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg
            	    {
            	    dbg.location(1055,25);
            	    if ( input.LA(1)==SEMI||input.LA(1)==COMMA ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }

            	    dbg.location(1055,40);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:40: ( ws )?
            	    int alt243=2;
            	    try { dbg.enterSubRule(243);
            	    try { dbg.enterDecision(243, decisionCanBacktrack[243]);

            	    int LA243_0 = input.LA(1);

            	    if ( (LA243_0==WS||(LA243_0>=NL && LA243_0<=COMMENT)) ) {
            	        alt243=1;
            	    }
            	    } finally {dbg.exitDecision(243);}

            	    switch (alt243) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:40: ws
            	            {
            	            dbg.location(1055,40);
            	            pushFollow(FOLLOW_ws_in_cp_mixin_call_args6231);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(243);}

            	    dbg.location(1055,44);
            	    pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6234);
            	    cp_mixin_call_arg();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop244;
                }
            } while (true);
            } finally {dbg.exitSubRule(244);}

            dbg.location(1055,65);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:65: ( CP_DOTS )?
            int alt245=2;
            try { dbg.enterSubRule(245);
            try { dbg.enterDecision(245, decisionCanBacktrack[245]);

            int LA245_0 = input.LA(1);

            if ( (LA245_0==CP_DOTS) ) {
                alt245=1;
            }
            } finally {dbg.exitDecision(245);}

            switch (alt245) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1055:65: CP_DOTS
                    {
                    dbg.location(1055,65);
                    match(input,CP_DOTS,FOLLOW_CP_DOTS_in_cp_mixin_call_args6239); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(245);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1056, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_call_args");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_call_args"


    // $ANTLR start "cp_mixin_call_arg"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1058:1: cp_mixin_call_arg : ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? ;
    public final void cp_mixin_call_arg() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_arg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1058, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1059:5: ( ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1060:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )?
            {
            dbg.location(1060,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1060:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )
            int alt248=2;
            try { dbg.enterSubRule(248);
            try { dbg.enterDecision(248, decisionCanBacktrack[248]);

            try {
                isCyclicDecision = true;
                alt248 = dfa248.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(248);}

            switch (alt248) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1061:9: cp_variable ( ws )? COLON ( ws )? cp_expression
                    {
                    dbg.location(1061,9);
                    pushFollow(FOLLOW_cp_variable_in_cp_mixin_call_arg6278);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1061,21);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1061:21: ( ws )?
                    int alt246=2;
                    try { dbg.enterSubRule(246);
                    try { dbg.enterDecision(246, decisionCanBacktrack[246]);

                    int LA246_0 = input.LA(1);

                    if ( (LA246_0==WS||(LA246_0>=NL && LA246_0<=COMMENT)) ) {
                        alt246=1;
                    }
                    } finally {dbg.exitDecision(246);}

                    switch (alt246) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1061:21: ws
                            {
                            dbg.location(1061,21);
                            pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6280);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(246);}

                    dbg.location(1061,25);
                    match(input,COLON,FOLLOW_COLON_in_cp_mixin_call_arg6283); if (state.failed) return ;
                    dbg.location(1061,31);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1061:31: ( ws )?
                    int alt247=2;
                    try { dbg.enterSubRule(247);
                    try { dbg.enterDecision(247, decisionCanBacktrack[247]);

                    int LA247_0 = input.LA(1);

                    if ( (LA247_0==WS||(LA247_0>=NL && LA247_0<=COMMENT)) ) {
                        alt247=1;
                    }
                    } finally {dbg.exitDecision(247);}

                    switch (alt247) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1061:31: ws
                            {
                            dbg.location(1061,31);
                            pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6285);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(247);}

                    dbg.location(1061,35);
                    pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg6288);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1062:11: cp_expression
                    {
                    dbg.location(1062,11);
                    pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg6300);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(248);}

            dbg.location(1063,7);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1063:7: ( ws )?
            int alt249=2;
            try { dbg.enterSubRule(249);
            try { dbg.enterDecision(249, decisionCanBacktrack[249]);

            int LA249_0 = input.LA(1);

            if ( (LA249_0==WS||(LA249_0>=NL && LA249_0<=COMMENT)) ) {
                alt249=1;
            }
            } finally {dbg.exitDecision(249);}

            switch (alt249) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1063:7: ws
                    {
                    dbg.location(1063,7);
                    pushFollow(FOLLOW_ws_in_cp_mixin_call_arg6308);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(249);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1064, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_mixin_call_arg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_mixin_call_arg"


    // $ANTLR start "cp_args_list"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1067:1: cp_args_list : ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST ) )? ) | ( CP_DOTS | LESS_REST ) );
    public final void cp_args_list() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_args_list");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1067, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1068:5: ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST ) )? ) | ( CP_DOTS | LESS_REST ) )
            int alt255=2;
            try { dbg.enterDecision(255, decisionCanBacktrack[255]);

            int LA255_0 = input.LA(1);

            if ( (LA255_0==MEDIA_SYM||LA255_0==AT_IDENT||LA255_0==SASS_VAR) ) {
                alt255=1;
            }
            else if ( ((LA255_0>=CP_DOTS && LA255_0<=LESS_REST)) ) {
                alt255=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 255, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(255);}

            switch (alt255) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST ) )? )
                    {
                    dbg.location(1075,5);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST ) )? )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:7: cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST ) )?
                    {
                    dbg.location(1075,7);
                    pushFollow(FOLLOW_cp_arg_in_cp_args_list6360);
                    cp_arg();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1075,14);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*
                    try { dbg.enterSubRule(251);

                    loop251:
                    do {
                        int alt251=2;
                        try { dbg.enterDecision(251, decisionCanBacktrack[251]);

                        try {
                            isCyclicDecision = true;
                            alt251 = dfa251.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(251);}

                        switch (alt251) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:16: ( COMMA | SEMI ) ( ws )? cp_arg
                    	    {
                    	    dbg.location(1075,16);
                    	    if ( input.LA(1)==SEMI||input.LA(1)==COMMA ) {
                    	        input.consume();
                    	        state.errorRecovery=false;state.failed=false;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return ;}
                    	        MismatchedSetException mse = new MismatchedSetException(null,input);
                    	        dbg.recognitionException(mse);
                    	        throw mse;
                    	    }

                    	    dbg.location(1075,33);
                    	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:33: ( ws )?
                    	    int alt250=2;
                    	    try { dbg.enterSubRule(250);
                    	    try { dbg.enterDecision(250, decisionCanBacktrack[250]);

                    	    int LA250_0 = input.LA(1);

                    	    if ( (LA250_0==WS||(LA250_0>=NL && LA250_0<=COMMENT)) ) {
                    	        alt250=1;
                    	    }
                    	    } finally {dbg.exitDecision(250);}

                    	    switch (alt250) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:33: ws
                    	            {
                    	            dbg.location(1075,33);
                    	            pushFollow(FOLLOW_ws_in_cp_args_list6374);
                    	            ws();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(250);}

                    	    dbg.location(1075,37);
                    	    pushFollow(FOLLOW_cp_arg_in_cp_args_list6377);
                    	    cp_arg();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop251;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(251);}

                    dbg.location(1075,46);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:46: ( ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST ) )?
                    int alt254=2;
                    try { dbg.enterSubRule(254);
                    try { dbg.enterDecision(254, decisionCanBacktrack[254]);

                    int LA254_0 = input.LA(1);

                    if ( (LA254_0==SEMI||LA254_0==COMMA||(LA254_0>=CP_DOTS && LA254_0<=LESS_REST)) ) {
                        alt254=1;
                    }
                    } finally {dbg.exitDecision(254);}

                    switch (alt254) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:48: ( ( COMMA | SEMI ) ( ws )? )? ( CP_DOTS | LESS_REST )
                            {
                            dbg.location(1075,48);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:48: ( ( COMMA | SEMI ) ( ws )? )?
                            int alt253=2;
                            try { dbg.enterSubRule(253);
                            try { dbg.enterDecision(253, decisionCanBacktrack[253]);

                            int LA253_0 = input.LA(1);

                            if ( (LA253_0==SEMI||LA253_0==COMMA) ) {
                                alt253=1;
                            }
                            } finally {dbg.exitDecision(253);}

                            switch (alt253) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:50: ( COMMA | SEMI ) ( ws )?
                                    {
                                    dbg.location(1075,50);
                                    if ( input.LA(1)==SEMI||input.LA(1)==COMMA ) {
                                        input.consume();
                                        state.errorRecovery=false;state.failed=false;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return ;}
                                        MismatchedSetException mse = new MismatchedSetException(null,input);
                                        dbg.recognitionException(mse);
                                        throw mse;
                                    }

                                    dbg.location(1075,65);
                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:65: ( ws )?
                                    int alt252=2;
                                    try { dbg.enterSubRule(252);
                                    try { dbg.enterDecision(252, decisionCanBacktrack[252]);

                                    int LA252_0 = input.LA(1);

                                    if ( (LA252_0==WS||(LA252_0>=NL && LA252_0<=COMMENT)) ) {
                                        alt252=1;
                                    }
                                    } finally {dbg.exitDecision(252);}

                                    switch (alt252) {
                                        case 1 :
                                            dbg.enterAlt(1);

                                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1075:65: ws
                                            {
                                            dbg.location(1075,65);
                                            pushFollow(FOLLOW_ws_in_cp_args_list6393);
                                            ws();

                                            state._fsp--;
                                            if (state.failed) return ;

                                            }
                                            break;

                                    }
                                    } finally {dbg.exitSubRule(252);}


                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(253);}

                            dbg.location(1075,72);
                            if ( (input.LA(1)>=CP_DOTS && input.LA(1)<=LESS_REST) ) {
                                input.consume();
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                dbg.recognitionException(mse);
                                throw mse;
                            }


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(254);}


                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1077:5: ( CP_DOTS | LESS_REST )
                    {
                    dbg.location(1077,5);
                    if ( (input.LA(1)>=CP_DOTS && input.LA(1)<=LESS_REST) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1078, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_args_list");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_args_list"


    // $ANTLR start "cp_arg"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1081:1: cp_arg : cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? ;
    public final void cp_arg() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "cp_arg");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1081, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1082:5: ( cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1083:5: cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )?
            {
            dbg.location(1083,5);
            pushFollow(FOLLOW_cp_variable_in_cp_arg6453);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1083,17);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1083:17: ( ws )?
            int alt256=2;
            try { dbg.enterSubRule(256);
            try { dbg.enterDecision(256, decisionCanBacktrack[256]);

            int LA256_0 = input.LA(1);

            if ( (LA256_0==WS||(LA256_0>=NL && LA256_0<=COMMENT)) ) {
                alt256=1;
            }
            } finally {dbg.exitDecision(256);}

            switch (alt256) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1083:17: ws
                    {
                    dbg.location(1083,17);
                    pushFollow(FOLLOW_ws_in_cp_arg6455);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(256);}

            dbg.location(1083,21);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1083:21: ( COLON ( ws )? cp_expression ( ws )? )?
            int alt259=2;
            try { dbg.enterSubRule(259);
            try { dbg.enterDecision(259, decisionCanBacktrack[259]);

            int LA259_0 = input.LA(1);

            if ( (LA259_0==COLON) ) {
                alt259=1;
            }
            } finally {dbg.exitDecision(259);}

            switch (alt259) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1083:23: COLON ( ws )? cp_expression ( ws )?
                    {
                    dbg.location(1083,23);
                    match(input,COLON,FOLLOW_COLON_in_cp_arg6460); if (state.failed) return ;
                    dbg.location(1083,29);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1083:29: ( ws )?
                    int alt257=2;
                    try { dbg.enterSubRule(257);
                    try { dbg.enterDecision(257, decisionCanBacktrack[257]);

                    int LA257_0 = input.LA(1);

                    if ( (LA257_0==WS||(LA257_0>=NL && LA257_0<=COMMENT)) ) {
                        alt257=1;
                    }
                    } finally {dbg.exitDecision(257);}

                    switch (alt257) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1083:29: ws
                            {
                            dbg.location(1083,29);
                            pushFollow(FOLLOW_ws_in_cp_arg6462);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(257);}

                    dbg.location(1083,33);
                    pushFollow(FOLLOW_cp_expression_in_cp_arg6465);
                    cp_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1083,47);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1083:47: ( ws )?
                    int alt258=2;
                    try { dbg.enterSubRule(258);
                    try { dbg.enterDecision(258, decisionCanBacktrack[258]);

                    int LA258_0 = input.LA(1);

                    if ( (LA258_0==WS||(LA258_0>=NL && LA258_0<=COMMENT)) ) {
                        alt258=1;
                    }
                    } finally {dbg.exitDecision(258);}

                    switch (alt258) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1083:47: ws
                            {
                            dbg.location(1083,47);
                            pushFollow(FOLLOW_ws_in_cp_arg6467);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(258);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(259);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1084, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "cp_arg");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "cp_arg"


    // $ANTLR start "less_mixin_guarded"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1088:1: less_mixin_guarded : LESS_WHEN ( ws )? less_condition ( ( COMMA | AND ) ( ws )? less_condition )* ;
    public final void less_mixin_guarded() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_mixin_guarded");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1088, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1089:5: ( LESS_WHEN ( ws )? less_condition ( ( COMMA | AND ) ( ws )? less_condition )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1090:5: LESS_WHEN ( ws )? less_condition ( ( COMMA | AND ) ( ws )? less_condition )*
            {
            dbg.location(1090,5);
            match(input,LESS_WHEN,FOLLOW_LESS_WHEN_in_less_mixin_guarded6493); if (state.failed) return ;
            dbg.location(1090,15);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1090:15: ( ws )?
            int alt260=2;
            try { dbg.enterSubRule(260);
            try { dbg.enterDecision(260, decisionCanBacktrack[260]);

            int LA260_0 = input.LA(1);

            if ( (LA260_0==WS||(LA260_0>=NL && LA260_0<=COMMENT)) ) {
                alt260=1;
            }
            } finally {dbg.exitDecision(260);}

            switch (alt260) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1090:15: ws
                    {
                    dbg.location(1090,15);
                    pushFollow(FOLLOW_ws_in_less_mixin_guarded6495);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(260);}

            dbg.location(1090,19);
            pushFollow(FOLLOW_less_condition_in_less_mixin_guarded6498);
            less_condition();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1090,34);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1090:34: ( ( COMMA | AND ) ( ws )? less_condition )*
            try { dbg.enterSubRule(262);

            loop262:
            do {
                int alt262=2;
                try { dbg.enterDecision(262, decisionCanBacktrack[262]);

                int LA262_0 = input.LA(1);

                if ( (LA262_0==COMMA||LA262_0==AND) ) {
                    alt262=1;
                }


                } finally {dbg.exitDecision(262);}

                switch (alt262) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1090:36: ( COMMA | AND ) ( ws )? less_condition
            	    {
            	    dbg.location(1090,36);
            	    if ( input.LA(1)==COMMA||input.LA(1)==AND ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        throw mse;
            	    }

            	    dbg.location(1090,50);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1090:50: ( ws )?
            	    int alt261=2;
            	    try { dbg.enterSubRule(261);
            	    try { dbg.enterDecision(261, decisionCanBacktrack[261]);

            	    int LA261_0 = input.LA(1);

            	    if ( (LA261_0==WS||(LA261_0>=NL && LA261_0<=COMMENT)) ) {
            	        alt261=1;
            	    }
            	    } finally {dbg.exitDecision(261);}

            	    switch (alt261) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1090:50: ws
            	            {
            	            dbg.location(1090,50);
            	            pushFollow(FOLLOW_ws_in_less_mixin_guarded6510);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(261);}

            	    dbg.location(1090,54);
            	    pushFollow(FOLLOW_less_condition_in_less_mixin_guarded6513);
            	    less_condition();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop262;
                }
            } while (true);
            } finally {dbg.exitSubRule(262);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1091, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_mixin_guarded");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_mixin_guarded"


    // $ANTLR start "less_condition"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1095:1: less_condition : ( NOT ( ws )? )? LPAREN ( ws )? ( less_function_in_condition ( ws )? | ( cp_variable ( ( ws )? less_condition_operator ( ws )? cp_math_expression )? ) ) RPAREN ;
    public final void less_condition() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_condition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1095, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1096:5: ( ( NOT ( ws )? )? LPAREN ( ws )? ( less_function_in_condition ( ws )? | ( cp_variable ( ( ws )? less_condition_operator ( ws )? cp_math_expression )? ) ) RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:5: ( NOT ( ws )? )? LPAREN ( ws )? ( less_function_in_condition ( ws )? | ( cp_variable ( ( ws )? less_condition_operator ( ws )? cp_math_expression )? ) ) RPAREN
            {
            dbg.location(1097,5);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:5: ( NOT ( ws )? )?
            int alt264=2;
            try { dbg.enterSubRule(264);
            try { dbg.enterDecision(264, decisionCanBacktrack[264]);

            int LA264_0 = input.LA(1);

            if ( (LA264_0==NOT) ) {
                alt264=1;
            }
            } finally {dbg.exitDecision(264);}

            switch (alt264) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:6: NOT ( ws )?
                    {
                    dbg.location(1097,6);
                    match(input,NOT,FOLLOW_NOT_in_less_condition6543); if (state.failed) return ;
                    dbg.location(1097,10);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:10: ( ws )?
                    int alt263=2;
                    try { dbg.enterSubRule(263);
                    try { dbg.enterDecision(263, decisionCanBacktrack[263]);

                    int LA263_0 = input.LA(1);

                    if ( (LA263_0==WS||(LA263_0>=NL && LA263_0<=COMMENT)) ) {
                        alt263=1;
                    }
                    } finally {dbg.exitDecision(263);}

                    switch (alt263) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1097:10: ws
                            {
                            dbg.location(1097,10);
                            pushFollow(FOLLOW_ws_in_less_condition6545);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(263);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(264);}

            dbg.location(1098,5);
            match(input,LPAREN,FOLLOW_LPAREN_in_less_condition6554); if (state.failed) return ;
            dbg.location(1098,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1098:12: ( ws )?
            int alt265=2;
            try { dbg.enterSubRule(265);
            try { dbg.enterDecision(265, decisionCanBacktrack[265]);

            int LA265_0 = input.LA(1);

            if ( (LA265_0==WS||(LA265_0>=NL && LA265_0<=COMMENT)) ) {
                alt265=1;
            }
            } finally {dbg.exitDecision(265);}

            switch (alt265) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1098:12: ws
                    {
                    dbg.location(1098,12);
                    pushFollow(FOLLOW_ws_in_less_condition6556);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(265);}

            dbg.location(1099,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1099:9: ( less_function_in_condition ( ws )? | ( cp_variable ( ( ws )? less_condition_operator ( ws )? cp_math_expression )? ) )
            int alt270=2;
            try { dbg.enterSubRule(270);
            try { dbg.enterDecision(270, decisionCanBacktrack[270]);

            int LA270_0 = input.LA(1);

            if ( (LA270_0==IDENT) ) {
                alt270=1;
            }
            else if ( (LA270_0==MEDIA_SYM||LA270_0==AT_IDENT||LA270_0==SASS_VAR) ) {
                alt270=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 270, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(270);}

            switch (alt270) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1100:13: less_function_in_condition ( ws )?
                    {
                    dbg.location(1100,13);
                    pushFollow(FOLLOW_less_function_in_condition_in_less_condition6582);
                    less_function_in_condition();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1100,40);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1100:40: ( ws )?
                    int alt266=2;
                    try { dbg.enterSubRule(266);
                    try { dbg.enterDecision(266, decisionCanBacktrack[266]);

                    int LA266_0 = input.LA(1);

                    if ( (LA266_0==WS||(LA266_0>=NL && LA266_0<=COMMENT)) ) {
                        alt266=1;
                    }
                    } finally {dbg.exitDecision(266);}

                    switch (alt266) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1100:40: ws
                            {
                            dbg.location(1100,40);
                            pushFollow(FOLLOW_ws_in_less_condition6584);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(266);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1102:13: ( cp_variable ( ( ws )? less_condition_operator ( ws )? cp_math_expression )? )
                    {
                    dbg.location(1102,13);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1102:13: ( cp_variable ( ( ws )? less_condition_operator ( ws )? cp_math_expression )? )
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1102:15: cp_variable ( ( ws )? less_condition_operator ( ws )? cp_math_expression )?
                    {
                    dbg.location(1102,15);
                    pushFollow(FOLLOW_cp_variable_in_less_condition6615);
                    cp_variable();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1102,27);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1102:27: ( ( ws )? less_condition_operator ( ws )? cp_math_expression )?
                    int alt269=2;
                    try { dbg.enterSubRule(269);
                    try { dbg.enterDecision(269, decisionCanBacktrack[269]);

                    int LA269_0 = input.LA(1);

                    if ( (LA269_0==WS||LA269_0==GREATER||LA269_0==OPEQ||(LA269_0>=NL && LA269_0<=COMMENT)||(LA269_0>=LESS && LA269_0<=GREATER_OR_EQ)) ) {
                        alt269=1;
                    }
                    } finally {dbg.exitDecision(269);}

                    switch (alt269) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1102:28: ( ws )? less_condition_operator ( ws )? cp_math_expression
                            {
                            dbg.location(1102,28);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1102:28: ( ws )?
                            int alt267=2;
                            try { dbg.enterSubRule(267);
                            try { dbg.enterDecision(267, decisionCanBacktrack[267]);

                            int LA267_0 = input.LA(1);

                            if ( (LA267_0==WS||(LA267_0>=NL && LA267_0<=COMMENT)) ) {
                                alt267=1;
                            }
                            } finally {dbg.exitDecision(267);}

                            switch (alt267) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1102:28: ws
                                    {
                                    dbg.location(1102,28);
                                    pushFollow(FOLLOW_ws_in_less_condition6618);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(267);}

                            dbg.location(1102,32);
                            pushFollow(FOLLOW_less_condition_operator_in_less_condition6621);
                            less_condition_operator();

                            state._fsp--;
                            if (state.failed) return ;
                            dbg.location(1102,56);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1102:56: ( ws )?
                            int alt268=2;
                            try { dbg.enterSubRule(268);
                            try { dbg.enterDecision(268, decisionCanBacktrack[268]);

                            int LA268_0 = input.LA(1);

                            if ( (LA268_0==WS||(LA268_0>=NL && LA268_0<=COMMENT)) ) {
                                alt268=1;
                            }
                            } finally {dbg.exitDecision(268);}

                            switch (alt268) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1102:56: ws
                                    {
                                    dbg.location(1102,56);
                                    pushFollow(FOLLOW_ws_in_less_condition6623);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(268);}

                            dbg.location(1102,60);
                            pushFollow(FOLLOW_cp_math_expression_in_less_condition6626);
                            cp_math_expression();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(269);}


                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(270);}

            dbg.location(1104,5);
            match(input,RPAREN,FOLLOW_RPAREN_in_less_condition6655); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1105, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_condition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_condition"


    // $ANTLR start "less_function_in_condition"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1108:1: less_function_in_condition : less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN ;
    public final void less_function_in_condition() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_function_in_condition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1108, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1109:5: ( less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1110:5: less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN
            {
            dbg.location(1110,5);
            pushFollow(FOLLOW_less_fn_name_in_less_function_in_condition6681);
            less_fn_name();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1110,18);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1110:18: ( ws )?
            int alt271=2;
            try { dbg.enterSubRule(271);
            try { dbg.enterDecision(271, decisionCanBacktrack[271]);

            int LA271_0 = input.LA(1);

            if ( (LA271_0==WS||(LA271_0>=NL && LA271_0<=COMMENT)) ) {
                alt271=1;
            }
            } finally {dbg.exitDecision(271);}

            switch (alt271) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1110:18: ws
                    {
                    dbg.location(1110,18);
                    pushFollow(FOLLOW_ws_in_less_function_in_condition6683);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(271);}

            dbg.location(1110,22);
            match(input,LPAREN,FOLLOW_LPAREN_in_less_function_in_condition6686); if (state.failed) return ;
            dbg.location(1110,29);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1110:29: ( ws )?
            int alt272=2;
            try { dbg.enterSubRule(272);
            try { dbg.enterDecision(272, decisionCanBacktrack[272]);

            int LA272_0 = input.LA(1);

            if ( (LA272_0==WS||(LA272_0>=NL && LA272_0<=COMMENT)) ) {
                alt272=1;
            }
            } finally {dbg.exitDecision(272);}

            switch (alt272) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1110:29: ws
                    {
                    dbg.location(1110,29);
                    pushFollow(FOLLOW_ws_in_less_function_in_condition6688);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(272);}

            dbg.location(1110,33);
            pushFollow(FOLLOW_cp_variable_in_less_function_in_condition6691);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1110,45);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1110:45: ( ws )?
            int alt273=2;
            try { dbg.enterSubRule(273);
            try { dbg.enterDecision(273, decisionCanBacktrack[273]);

            int LA273_0 = input.LA(1);

            if ( (LA273_0==WS||(LA273_0>=NL && LA273_0<=COMMENT)) ) {
                alt273=1;
            }
            } finally {dbg.exitDecision(273);}

            switch (alt273) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1110:45: ws
                    {
                    dbg.location(1110,45);
                    pushFollow(FOLLOW_ws_in_less_function_in_condition6693);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(273);}

            dbg.location(1110,49);
            match(input,RPAREN,FOLLOW_RPAREN_in_less_function_in_condition6696); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1111, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_function_in_condition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_function_in_condition"


    // $ANTLR start "less_fn_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1114:1: less_fn_name : IDENT ;
    public final void less_fn_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_fn_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1114, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1115:5: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1116:5: IDENT
            {
            dbg.location(1116,5);
            match(input,IDENT,FOLLOW_IDENT_in_less_fn_name6718); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1117, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_fn_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_fn_name"


    // $ANTLR start "less_condition_operator"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1119:1: less_condition_operator : ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ );
    public final void less_condition_operator() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "less_condition_operator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1119, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1120:5: ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
            {
            dbg.location(1120,5);
            if ( input.LA(1)==GREATER||input.LA(1)==OPEQ||(input.LA(1)>=LESS && input.LA(1)<=GREATER_OR_EQ) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1122, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "less_condition_operator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "less_condition_operator"


    // $ANTLR start "sass_selector_interpolation_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1129:1: sass_selector_interpolation_expression : ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) ) )* ;
    public final void sass_selector_interpolation_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_selector_interpolation_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1129, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1130:5: ( ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1131:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) ) )*
            {
            dbg.location(1131,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1131:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) )
            int alt274=2;
            try { dbg.enterSubRule(274);
            try { dbg.enterDecision(274, decisionCanBacktrack[274]);

            int LA274_0 = input.LA(1);

            if ( (LA274_0==HASH_SYMBOL) ) {
                int LA274_1 = input.LA(2);

                if ( (synpred33_Css3()) ) {
                    alt274=1;
                }
                else if ( (true) ) {
                    alt274=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 274, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA274_0==IDENT||LA274_0==COMMA||LA274_0==COLON||LA274_0==MINUS||LA274_0==GREATER||(LA274_0>=HASH && LA274_0<=DOT)||LA274_0==STAR||LA274_0==LESS_AND) ) {
                alt274=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 274, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(274);}

            switch (alt274) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:13: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
                    {
                    dbg.location(1132,50);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression6804);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1134:13: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER )
                    {
                    dbg.location(1134,13);
                    if ( input.LA(1)==IDENT||input.LA(1)==COMMA||input.LA(1)==COLON||input.LA(1)==MINUS||input.LA(1)==GREATER||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=DOT)||input.LA(1)==STAR||input.LA(1)==LESS_AND ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(274);}

            dbg.location(1136,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1136:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) ) )*
            try { dbg.enterSubRule(277);

            loop277:
            do {
                int alt277=2;
                try { dbg.enterDecision(277, decisionCanBacktrack[277]);

                try {
                    isCyclicDecision = true;
                    alt277 = dfa277.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(277);}

                switch (alt277) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1137:13: ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) )
            	    {
            	    dbg.location(1137,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1137:13: ( ws )?
            	    int alt275=2;
            	    try { dbg.enterSubRule(275);
            	    try { dbg.enterDecision(275, decisionCanBacktrack[275]);

            	    int LA275_0 = input.LA(1);

            	    if ( (LA275_0==WS||(LA275_0>=NL && LA275_0<=COMMENT)) ) {
            	        alt275=1;
            	    }
            	    } finally {dbg.exitDecision(275);}

            	    switch (alt275) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1137:13: ws
            	            {
            	            dbg.location(1137,13);
            	            pushFollow(FOLLOW_ws_in_sass_selector_interpolation_expression6906);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(275);}

            	    dbg.location(1138,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1138:13: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) )
            	    int alt276=2;
            	    try { dbg.enterSubRule(276);
            	    try { dbg.enterDecision(276, decisionCanBacktrack[276]);

            	    int LA276_0 = input.LA(1);

            	    if ( (LA276_0==HASH_SYMBOL) ) {
            	        int LA276_1 = input.LA(2);

            	        if ( (synpred34_Css3()) ) {
            	            alt276=1;
            	        }
            	        else if ( (true) ) {
            	            alt276=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return ;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 276, 1, input);

            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	    }
            	    else if ( (LA276_0==IDENT||LA276_0==COMMA||LA276_0==COLON||LA276_0==MINUS||LA276_0==GREATER||(LA276_0>=HASH && LA276_0<=DOT)||LA276_0==STAR||LA276_0==LESS_AND) ) {
            	        alt276=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 276, 0, input);

            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(276);}

            	    switch (alt276) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1139:17: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
            	            {
            	            dbg.location(1139,54);
            	            pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression6943);
            	            sass_interpolation_expression_var();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1141:17: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER )
            	            {
            	            dbg.location(1141,17);
            	            if ( input.LA(1)==IDENT||input.LA(1)==COMMA||input.LA(1)==COLON||input.LA(1)==MINUS||input.LA(1)==GREATER||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=DOT)||input.LA(1)==STAR||input.LA(1)==LESS_AND ) {
            	                input.consume();
            	                state.errorRecovery=false;state.failed=false;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return ;}
            	                MismatchedSetException mse = new MismatchedSetException(null,input);
            	                dbg.recognitionException(mse);
            	                throw mse;
            	            }


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(276);}


            	    }
            	    break;

            	default :
            	    break loop277;
                }
            } while (true);
            } finally {dbg.exitSubRule(277);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1145, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_selector_interpolation_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_selector_interpolation_expression"


    // $ANTLR start "sass_declaration_interpolation_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1147:1: sass_declaration_interpolation_expression : ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )* ;
    public final void sass_declaration_interpolation_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_declaration_interpolation_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1147, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1148:5: ( ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )* )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1149:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*
            {
            dbg.location(1149,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1149:9: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
            int alt278=2;
            try { dbg.enterSubRule(278);
            try { dbg.enterDecision(278, decisionCanBacktrack[278]);

            int LA278_0 = input.LA(1);

            if ( (LA278_0==HASH_SYMBOL) ) {
                int LA278_1 = input.LA(2);

                if ( (LA278_1==LBRACE) && (synpred35_Css3())) {
                    alt278=1;
                }
                else if ( (LA278_1==IDENT||LA278_1==COLON||LA278_1==WS||LA278_1==MINUS||(LA278_1>=HASH_SYMBOL && LA278_1<=DOT)||(LA278_1>=NL && LA278_1<=COMMENT)) ) {
                    alt278=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 278, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA278_0==IDENT||LA278_0==MINUS||(LA278_0>=HASH && LA278_0<=DOT)) ) {
                alt278=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 278, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(278);}

            switch (alt278) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:13: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
                    {
                    dbg.location(1150,50);
                    pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7091);
                    sass_interpolation_expression_var();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1152:13: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH )
                    {
                    dbg.location(1152,13);
                    if ( input.LA(1)==IDENT||input.LA(1)==MINUS||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=DOT) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        dbg.recognitionException(mse);
                        throw mse;
                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(278);}

            dbg.location(1154,9);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1154:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*
            try { dbg.enterSubRule(281);

            loop281:
            do {
                int alt281=2;
                try { dbg.enterDecision(281, decisionCanBacktrack[281]);

                try {
                    isCyclicDecision = true;
                    alt281 = dfa281.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(281);}

                switch (alt281) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1155:13: ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
            	    {
            	    dbg.location(1155,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1155:13: ( ws )?
            	    int alt279=2;
            	    try { dbg.enterSubRule(279);
            	    try { dbg.enterDecision(279, decisionCanBacktrack[279]);

            	    int LA279_0 = input.LA(1);

            	    if ( (LA279_0==WS||(LA279_0>=NL && LA279_0<=COMMENT)) ) {
            	        alt279=1;
            	    }
            	    } finally {dbg.exitDecision(279);}

            	    switch (alt279) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1155:13: ws
            	            {
            	            dbg.location(1155,13);
            	            pushFollow(FOLLOW_ws_in_sass_declaration_interpolation_expression7172);
            	            ws();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(279);}

            	    dbg.location(1156,13);
            	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1156:13: ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) )
            	    int alt280=2;
            	    try { dbg.enterSubRule(280);
            	    try { dbg.enterDecision(280, decisionCanBacktrack[280]);

            	    int LA280_0 = input.LA(1);

            	    if ( (LA280_0==HASH_SYMBOL) ) {
            	        int LA280_1 = input.LA(2);

            	        if ( (LA280_1==LBRACE) && (synpred36_Css3())) {
            	            alt280=1;
            	        }
            	        else if ( (LA280_1==IDENT||LA280_1==COLON||LA280_1==WS||LA280_1==MINUS||(LA280_1>=HASH_SYMBOL && LA280_1<=DOT)||(LA280_1>=NL && LA280_1<=COMMENT)) ) {
            	            alt280=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return ;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 280, 1, input);

            	            dbg.recognitionException(nvae);
            	            throw nvae;
            	        }
            	    }
            	    else if ( (LA280_0==IDENT||LA280_0==MINUS||(LA280_0>=HASH && LA280_0<=DOT)) ) {
            	        alt280=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 280, 0, input);

            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(280);}

            	    switch (alt280) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1157:17: ( sass_interpolation_expression_var )=> sass_interpolation_expression_var
            	            {
            	            dbg.location(1157,54);
            	            pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7209);
            	            sass_interpolation_expression_var();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1159:17: ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH )
            	            {
            	            dbg.location(1159,17);
            	            if ( input.LA(1)==IDENT||input.LA(1)==MINUS||(input.LA(1)>=HASH_SYMBOL && input.LA(1)<=DOT) ) {
            	                input.consume();
            	                state.errorRecovery=false;state.failed=false;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return ;}
            	                MismatchedSetException mse = new MismatchedSetException(null,input);
            	                dbg.recognitionException(mse);
            	                throw mse;
            	            }


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(280);}


            	    }
            	    break;

            	default :
            	    break loop281;
                }
            } while (true);
            } finally {dbg.exitSubRule(281);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1163, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_declaration_interpolation_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_declaration_interpolation_expression"


    // $ANTLR start "sass_interpolation_expression_var"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1165:1: sass_interpolation_expression_var : HASH_SYMBOL LBRACE cp_expression RBRACE ;
    public final void sass_interpolation_expression_var() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_interpolation_expression_var");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1165, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1166:5: ( HASH_SYMBOL LBRACE cp_expression RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1167:9: HASH_SYMBOL LBRACE cp_expression RBRACE
            {
            dbg.location(1167,9);
            match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var7318); if (state.failed) return ;
            dbg.location(1167,21);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_interpolation_expression_var7320); if (state.failed) return ;
            dbg.location(1167,28);
            pushFollow(FOLLOW_cp_expression_in_sass_interpolation_expression_var7322);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1167,42);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_interpolation_expression_var7324); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1168, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_interpolation_expression_var");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_interpolation_expression_var"


    // $ANTLR start "sass_nested_properties"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1188:1: sass_nested_properties : property COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
    public final void sass_nested_properties() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_nested_properties");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1188, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1189:5: ( property COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1190:5: property COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
            {
            dbg.location(1190,5);
            pushFollow(FOLLOW_property_in_sass_nested_properties7368);
            property();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1190,14);
            match(input,COLON,FOLLOW_COLON_in_sass_nested_properties7370); if (state.failed) return ;
            dbg.location(1190,20);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1190:20: ( ws )?
            int alt282=2;
            try { dbg.enterSubRule(282);
            try { dbg.enterDecision(282, decisionCanBacktrack[282]);

            int LA282_0 = input.LA(1);

            if ( (LA282_0==WS||(LA282_0>=NL && LA282_0<=COMMENT)) ) {
                alt282=1;
            }
            } finally {dbg.exitDecision(282);}

            switch (alt282) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1190:20: ws
                    {
                    dbg.location(1190,20);
                    pushFollow(FOLLOW_ws_in_sass_nested_properties7372);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(282);}

            dbg.location(1190,24);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1190:24: ( propertyValue ( ws )? )?
            int alt284=2;
            try { dbg.enterSubRule(284);
            try { dbg.enterDecision(284, decisionCanBacktrack[284]);

            int LA284_0 = input.LA(1);

            if ( ((LA284_0>=IDENT && LA284_0<=URI)||LA284_0==MEDIA_SYM||LA284_0==GEN||LA284_0==AT_IDENT||LA284_0==PERCENTAGE||(LA284_0>=MINUS && LA284_0<=PLUS)||(LA284_0>=HASH_SYMBOL && LA284_0<=HASH)||LA284_0==SASS_VAR||(LA284_0>=NUMBER && LA284_0<=DIMENSION)) ) {
                alt284=1;
            }
            } finally {dbg.exitDecision(284);}

            switch (alt284) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1190:25: propertyValue ( ws )?
                    {
                    dbg.location(1190,25);
                    pushFollow(FOLLOW_propertyValue_in_sass_nested_properties7376);
                    propertyValue();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1190,39);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1190:39: ( ws )?
                    int alt283=2;
                    try { dbg.enterSubRule(283);
                    try { dbg.enterDecision(283, decisionCanBacktrack[283]);

                    int LA283_0 = input.LA(1);

                    if ( (LA283_0==WS||(LA283_0>=NL && LA283_0<=COMMENT)) ) {
                        alt283=1;
                    }
                    } finally {dbg.exitDecision(283);}

                    switch (alt283) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1190:39: ws
                            {
                            dbg.location(1190,39);
                            pushFollow(FOLLOW_ws_in_sass_nested_properties7378);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(283);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(284);}

            dbg.location(1190,45);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_nested_properties7383); if (state.failed) return ;
            dbg.location(1190,52);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1190:52: ( ws )?
            int alt285=2;
            try { dbg.enterSubRule(285);
            try { dbg.enterDecision(285, decisionCanBacktrack[285]);

            int LA285_0 = input.LA(1);

            if ( (LA285_0==WS||(LA285_0>=NL && LA285_0<=COMMENT)) ) {
                alt285=1;
            }
            } finally {dbg.exitDecision(285);}

            switch (alt285) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1190:52: ws
                    {
                    dbg.location(1190,52);
                    pushFollow(FOLLOW_ws_in_sass_nested_properties7385);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(285);}

            dbg.location(1190,56);
            pushFollow(FOLLOW_syncToFollow_in_sass_nested_properties7388);
            syncToFollow();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1190,69);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1190:69: ( declarations )?
            int alt286=2;
            try { dbg.enterSubRule(286);
            try { dbg.enterDecision(286, decisionCanBacktrack[286]);

            int LA286_0 = input.LA(1);

            if ( ((LA286_0>=SEMI && LA286_0<=IDENT)||(LA286_0>=IMPORT_SYM && LA286_0<=MEDIA_SYM)||LA286_0==GEN||(LA286_0>=COLON && LA286_0<=AT_IDENT)||LA286_0==MOZ_DOCUMENT_SYM||LA286_0==WEBKIT_KEYFRAMES_SYM||(LA286_0>=PAGE_SYM && LA286_0<=FONT_FACE_SYM)||LA286_0==MINUS||LA286_0==GREATER||(LA286_0>=HASH_SYMBOL && LA286_0<=PIPE)||LA286_0==LESS_AND||LA286_0==SASS_VAR||(LA286_0>=SASS_MIXIN && LA286_0<=SASS_INCLUDE)||LA286_0==SASS_EXTEND||(LA286_0>=SASS_DEBUG && LA286_0<=SASS_IF)||(LA286_0>=SASS_FOR && LA286_0<=SASS_WHILE)||(LA286_0>=SASS_RETURN && LA286_0<=SASS_CONTENT)) ) {
                alt286=1;
            }
            } finally {dbg.exitDecision(286);}

            switch (alt286) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1190:69: declarations
                    {
                    dbg.location(1190,69);
                    pushFollow(FOLLOW_declarations_in_sass_nested_properties7390);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(286);}

            dbg.location(1190,83);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_nested_properties7393); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1191, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_nested_properties");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_nested_properties"


    // $ANTLR start "sass_extend"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1193:1: sass_extend : SASS_EXTEND ws simpleSelectorSequence ( ( ws )? SASS_OPTIONAL )? ;
    public final void sass_extend() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_extend");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1193, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1194:5: ( SASS_EXTEND ws simpleSelectorSequence ( ( ws )? SASS_OPTIONAL )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1195:5: SASS_EXTEND ws simpleSelectorSequence ( ( ws )? SASS_OPTIONAL )?
            {
            dbg.location(1195,5);
            match(input,SASS_EXTEND,FOLLOW_SASS_EXTEND_in_sass_extend7414); if (state.failed) return ;
            dbg.location(1195,17);
            pushFollow(FOLLOW_ws_in_sass_extend7416);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1195,20);
            pushFollow(FOLLOW_simpleSelectorSequence_in_sass_extend7418);
            simpleSelectorSequence();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1195,43);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1195:43: ( ( ws )? SASS_OPTIONAL )?
            int alt288=2;
            try { dbg.enterSubRule(288);
            try { dbg.enterDecision(288, decisionCanBacktrack[288]);

            try {
                isCyclicDecision = true;
                alt288 = dfa288.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(288);}

            switch (alt288) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1195:44: ( ws )? SASS_OPTIONAL
                    {
                    dbg.location(1195,44);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1195:44: ( ws )?
                    int alt287=2;
                    try { dbg.enterSubRule(287);
                    try { dbg.enterDecision(287, decisionCanBacktrack[287]);

                    int LA287_0 = input.LA(1);

                    if ( (LA287_0==WS||(LA287_0>=NL && LA287_0<=COMMENT)) ) {
                        alt287=1;
                    }
                    } finally {dbg.exitDecision(287);}

                    switch (alt287) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1195:44: ws
                            {
                            dbg.location(1195,44);
                            pushFollow(FOLLOW_ws_in_sass_extend7421);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(287);}

                    dbg.location(1195,48);
                    match(input,SASS_OPTIONAL,FOLLOW_SASS_OPTIONAL_in_sass_extend7424); if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(288);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1196, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_extend");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_extend"


    // $ANTLR start "sass_extend_only_selector"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1198:1: sass_extend_only_selector : SASS_EXTEND_ONLY_SELECTOR ;
    public final void sass_extend_only_selector() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_extend_only_selector");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1198, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1199:5: ( SASS_EXTEND_ONLY_SELECTOR )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1200:5: SASS_EXTEND_ONLY_SELECTOR
            {
            dbg.location(1200,5);
            match(input,SASS_EXTEND_ONLY_SELECTOR,FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector7451); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1201, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_extend_only_selector");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_extend_only_selector"


    // $ANTLR start "sass_debug"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1203:1: sass_debug : ( SASS_DEBUG | SASS_WARN ) ws cp_expression ;
    public final void sass_debug() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_debug");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1203, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1204:5: ( ( SASS_DEBUG | SASS_WARN ) ws cp_expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1205:5: ( SASS_DEBUG | SASS_WARN ) ws cp_expression
            {
            dbg.location(1205,5);
            if ( (input.LA(1)>=SASS_DEBUG && input.LA(1)<=SASS_WARN) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }

            dbg.location(1205,32);
            pushFollow(FOLLOW_ws_in_sass_debug7482);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1205,35);
            pushFollow(FOLLOW_cp_expression_in_sass_debug7484);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1206, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_debug");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_debug"


    // $ANTLR start "sass_control"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1208:1: sass_control : ( sass_if | sass_for | sass_each | sass_while );
    public final void sass_control() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_control");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1208, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1209:5: ( sass_if | sass_for | sass_each | sass_while )
            int alt289=4;
            try { dbg.enterDecision(289, decisionCanBacktrack[289]);

            switch ( input.LA(1) ) {
            case SASS_IF:
                {
                alt289=1;
                }
                break;
            case SASS_FOR:
                {
                alt289=2;
                }
                break;
            case SASS_EACH:
                {
                alt289=3;
                }
                break;
            case SASS_WHILE:
                {
                alt289=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 289, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(289);}

            switch (alt289) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:5: sass_if
                    {
                    dbg.location(1210,5);
                    pushFollow(FOLLOW_sass_if_in_sass_control7509);
                    sass_if();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:15: sass_for
                    {
                    dbg.location(1210,15);
                    pushFollow(FOLLOW_sass_for_in_sass_control7513);
                    sass_for();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:26: sass_each
                    {
                    dbg.location(1210,26);
                    pushFollow(FOLLOW_sass_each_in_sass_control7517);
                    sass_each();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1210:38: sass_while
                    {
                    dbg.location(1210,38);
                    pushFollow(FOLLOW_sass_while_in_sass_control7521);
                    sass_while();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1211, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_control");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_control"


    // $ANTLR start "sass_if"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1213:1: sass_if : SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? ;
    public final void sass_if() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_if");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1213, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1214:5: ( SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1215:5: SASS_IF ws sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
            {
            dbg.location(1215,5);
            match(input,SASS_IF,FOLLOW_SASS_IF_in_sass_if7542); if (state.failed) return ;
            dbg.location(1215,13);
            pushFollow(FOLLOW_ws_in_sass_if7544);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1215,16);
            pushFollow(FOLLOW_sass_control_expression_in_sass_if7546);
            sass_control_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1215,40);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1215:40: ( ws )?
            int alt290=2;
            try { dbg.enterSubRule(290);
            try { dbg.enterDecision(290, decisionCanBacktrack[290]);

            int LA290_0 = input.LA(1);

            if ( (LA290_0==WS||(LA290_0>=NL && LA290_0<=COMMENT)) ) {
                alt290=1;
            }
            } finally {dbg.exitDecision(290);}

            switch (alt290) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1215:40: ws
                    {
                    dbg.location(1215,40);
                    pushFollow(FOLLOW_ws_in_sass_if7548);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(290);}

            dbg.location(1215,44);
            pushFollow(FOLLOW_sass_control_block_in_sass_if7551);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1215,63);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1215:63: ( ( ws )? sass_else )?
            int alt292=2;
            try { dbg.enterSubRule(292);
            try { dbg.enterDecision(292, decisionCanBacktrack[292]);

            try {
                isCyclicDecision = true;
                alt292 = dfa292.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(292);}

            switch (alt292) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1215:64: ( ws )? sass_else
                    {
                    dbg.location(1215,64);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1215:64: ( ws )?
                    int alt291=2;
                    try { dbg.enterSubRule(291);
                    try { dbg.enterDecision(291, decisionCanBacktrack[291]);

                    int LA291_0 = input.LA(1);

                    if ( (LA291_0==WS||(LA291_0>=NL && LA291_0<=COMMENT)) ) {
                        alt291=1;
                    }
                    } finally {dbg.exitDecision(291);}

                    switch (alt291) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1215:64: ws
                            {
                            dbg.location(1215,64);
                            pushFollow(FOLLOW_ws_in_sass_if7554);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(291);}

                    dbg.location(1215,68);
                    pushFollow(FOLLOW_sass_else_in_sass_if7557);
                    sass_else();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(292);}


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1216, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_if");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_if"


    // $ANTLR start "sass_else"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1218:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );
    public final void sass_else() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_else");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1218, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1219:5: ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
            int alt299=2;
            try { dbg.enterDecision(299, decisionCanBacktrack[299]);

            try {
                isCyclicDecision = true;
                alt299 = dfa299.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(299);}

            switch (alt299) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1220:5: SASS_ELSE ( ws )? sass_control_block
                    {
                    dbg.location(1220,5);
                    match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else7584); if (state.failed) return ;
                    dbg.location(1220,15);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1220:15: ( ws )?
                    int alt293=2;
                    try { dbg.enterSubRule(293);
                    try { dbg.enterDecision(293, decisionCanBacktrack[293]);

                    int LA293_0 = input.LA(1);

                    if ( (LA293_0==WS||(LA293_0>=NL && LA293_0<=COMMENT)) ) {
                        alt293=1;
                    }
                    } finally {dbg.exitDecision(293);}

                    switch (alt293) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1220:15: ws
                            {
                            dbg.location(1220,15);
                            pushFollow(FOLLOW_ws_in_sass_else7586);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(293);}

                    dbg.location(1220,19);
                    pushFollow(FOLLOW_sass_control_block_in_sass_else7589);
                    sass_control_block();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1222:5: SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
                    {
                    dbg.location(1222,5);
                    match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else7602); if (state.failed) return ;
                    dbg.location(1222,15);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1222:15: ( ws )?
                    int alt294=2;
                    try { dbg.enterSubRule(294);
                    try { dbg.enterDecision(294, decisionCanBacktrack[294]);

                    int LA294_0 = input.LA(1);

                    if ( (LA294_0==WS||(LA294_0>=NL && LA294_0<=COMMENT)) ) {
                        alt294=1;
                    }
                    } finally {dbg.exitDecision(294);}

                    switch (alt294) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1222:15: ws
                            {
                            dbg.location(1222,15);
                            pushFollow(FOLLOW_ws_in_sass_else7604);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(294);}

                    dbg.location(1222,19);
                    if ( !(evalPredicate(tokenNameEquals("if"),"tokenNameEquals(\"if\")")) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "sass_else", "tokenNameEquals(\"if\")");
                    }
                    dbg.location(1222,44);
                    match(input,IDENT,FOLLOW_IDENT_in_sass_else7609); if (state.failed) return ;
                    dbg.location(1222,59);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1222:59: ( ws )?
                    int alt295=2;
                    try { dbg.enterSubRule(295);
                    try { dbg.enterDecision(295, decisionCanBacktrack[295]);

                    int LA295_0 = input.LA(1);

                    if ( (LA295_0==WS||(LA295_0>=NL && LA295_0<=COMMENT)) ) {
                        alt295=1;
                    }
                    } finally {dbg.exitDecision(295);}

                    switch (alt295) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1222:59: ws
                            {
                            dbg.location(1222,59);
                            pushFollow(FOLLOW_ws_in_sass_else7613);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(295);}

                    dbg.location(1222,63);
                    pushFollow(FOLLOW_sass_control_expression_in_sass_else7616);
                    sass_control_expression();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1222,87);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1222:87: ( ws )?
                    int alt296=2;
                    try { dbg.enterSubRule(296);
                    try { dbg.enterDecision(296, decisionCanBacktrack[296]);

                    int LA296_0 = input.LA(1);

                    if ( (LA296_0==WS||(LA296_0>=NL && LA296_0<=COMMENT)) ) {
                        alt296=1;
                    }
                    } finally {dbg.exitDecision(296);}

                    switch (alt296) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1222:87: ws
                            {
                            dbg.location(1222,87);
                            pushFollow(FOLLOW_ws_in_sass_else7618);
                            ws();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(296);}

                    dbg.location(1222,91);
                    pushFollow(FOLLOW_sass_control_block_in_sass_else7621);
                    sass_control_block();

                    state._fsp--;
                    if (state.failed) return ;
                    dbg.location(1222,110);
                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1222:110: ( ( ws )? sass_else )?
                    int alt298=2;
                    try { dbg.enterSubRule(298);
                    try { dbg.enterDecision(298, decisionCanBacktrack[298]);

                    try {
                        isCyclicDecision = true;
                        alt298 = dfa298.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(298);}

                    switch (alt298) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1222:111: ( ws )? sass_else
                            {
                            dbg.location(1222,111);
                            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1222:111: ( ws )?
                            int alt297=2;
                            try { dbg.enterSubRule(297);
                            try { dbg.enterDecision(297, decisionCanBacktrack[297]);

                            int LA297_0 = input.LA(1);

                            if ( (LA297_0==WS||(LA297_0>=NL && LA297_0<=COMMENT)) ) {
                                alt297=1;
                            }
                            } finally {dbg.exitDecision(297);}

                            switch (alt297) {
                                case 1 :
                                    dbg.enterAlt(1);

                                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1222:111: ws
                                    {
                                    dbg.location(1222,111);
                                    pushFollow(FOLLOW_ws_in_sass_else7624);
                                    ws();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }
                            } finally {dbg.exitSubRule(297);}

                            dbg.location(1222,115);
                            pushFollow(FOLLOW_sass_else_in_sass_else7627);
                            sass_else();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(298);}


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1223, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_else");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_else"


    // $ANTLR start "sass_control_expression"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1225:1: sass_control_expression : cp_expression ;
    public final void sass_control_expression() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_control_expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1225, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1226:5: ( cp_expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1227:5: cp_expression
            {
            dbg.location(1227,5);
            pushFollow(FOLLOW_cp_expression_in_sass_control_expression7650);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1228, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_control_expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_control_expression"


    // $ANTLR start "sass_for"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1230:1: sass_for : SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block ;
    public final void sass_for() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_for");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1230, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1231:5: ( SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:5: SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block
            {
            dbg.location(1232,5);
            match(input,SASS_FOR,FOLLOW_SASS_FOR_in_sass_for7675); if (state.failed) return ;
            dbg.location(1232,14);
            pushFollow(FOLLOW_ws_in_sass_for7677);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1232,17);
            pushFollow(FOLLOW_cp_variable_in_sass_for7679);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1232,29);
            pushFollow(FOLLOW_ws_in_sass_for7681);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1232,32);
            if ( !(evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "sass_for", "tokenNameEquals(\"from\")");
            }
            dbg.location(1232,59);
            match(input,IDENT,FOLLOW_IDENT_in_sass_for7685); if (state.failed) return ;
            dbg.location(1232,74);
            pushFollow(FOLLOW_ws_in_sass_for7689);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1232,77);
            pushFollow(FOLLOW_cp_math_expression_in_sass_for7691);
            cp_math_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1232,96);
            pushFollow(FOLLOW_ws_in_sass_for7693);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1232,99);
            if ( !(evalPredicate(tokenNameEquals("to")|tokenNameEquals("through"),"tokenNameEquals(\"to\")|tokenNameEquals(\"through\")")) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "sass_for", "tokenNameEquals(\"to\")|tokenNameEquals(\"through\")");
            }
            dbg.location(1232,151);
            match(input,IDENT,FOLLOW_IDENT_in_sass_for7697); if (state.failed) return ;
            dbg.location(1232,173);
            pushFollow(FOLLOW_ws_in_sass_for7701);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1232,176);
            pushFollow(FOLLOW_cp_math_expression_in_sass_for7703);
            cp_math_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1232,195);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:195: ( ws )?
            int alt300=2;
            try { dbg.enterSubRule(300);
            try { dbg.enterDecision(300, decisionCanBacktrack[300]);

            int LA300_0 = input.LA(1);

            if ( (LA300_0==WS||(LA300_0>=NL && LA300_0<=COMMENT)) ) {
                alt300=1;
            }
            } finally {dbg.exitDecision(300);}

            switch (alt300) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1232:195: ws
                    {
                    dbg.location(1232,195);
                    pushFollow(FOLLOW_ws_in_sass_for7705);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(300);}

            dbg.location(1232,199);
            pushFollow(FOLLOW_sass_control_block_in_sass_for7708);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1233, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_for");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_for"


    // $ANTLR start "sass_each"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1235:1: sass_each : SASS_EACH ws cp_variable ws {...}? IDENT ws cp_expression_list ( ws )? sass_control_block ;
    public final void sass_each() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_each");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1235, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1236:5: ( SASS_EACH ws cp_variable ws {...}? IDENT ws cp_expression_list ( ws )? sass_control_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1237:5: SASS_EACH ws cp_variable ws {...}? IDENT ws cp_expression_list ( ws )? sass_control_block
            {
            dbg.location(1237,5);
            match(input,SASS_EACH,FOLLOW_SASS_EACH_in_sass_each7729); if (state.failed) return ;
            dbg.location(1237,15);
            pushFollow(FOLLOW_ws_in_sass_each7731);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1237,18);
            pushFollow(FOLLOW_cp_variable_in_sass_each7733);
            cp_variable();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1237,30);
            pushFollow(FOLLOW_ws_in_sass_each7735);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1237,33);
            if ( !(evalPredicate(tokenNameEquals("in"),"tokenNameEquals(\"in\")")) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "sass_each", "tokenNameEquals(\"in\")");
            }
            dbg.location(1237,58);
            match(input,IDENT,FOLLOW_IDENT_in_sass_each7739); if (state.failed) return ;
            dbg.location(1237,71);
            pushFollow(FOLLOW_ws_in_sass_each7743);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1237,74);
            pushFollow(FOLLOW_cp_expression_list_in_sass_each7745);
            cp_expression_list();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1237,93);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1237:93: ( ws )?
            int alt301=2;
            try { dbg.enterSubRule(301);
            try { dbg.enterDecision(301, decisionCanBacktrack[301]);

            int LA301_0 = input.LA(1);

            if ( (LA301_0==WS||(LA301_0>=NL && LA301_0<=COMMENT)) ) {
                alt301=1;
            }
            } finally {dbg.exitDecision(301);}

            switch (alt301) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1237:93: ws
                    {
                    dbg.location(1237,93);
                    pushFollow(FOLLOW_ws_in_sass_each7747);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(301);}

            dbg.location(1237,97);
            pushFollow(FOLLOW_sass_control_block_in_sass_each7750);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1238, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_each");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_each"


    // $ANTLR start "sass_while"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1240:1: sass_while : SASS_WHILE ws sass_control_expression ( ws )? sass_control_block ;
    public final void sass_while() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_while");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1240, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1241:5: ( SASS_WHILE ws sass_control_expression ( ws )? sass_control_block )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:5: SASS_WHILE ws sass_control_expression ( ws )? sass_control_block
            {
            dbg.location(1242,5);
            match(input,SASS_WHILE,FOLLOW_SASS_WHILE_in_sass_while7775); if (state.failed) return ;
            dbg.location(1242,16);
            pushFollow(FOLLOW_ws_in_sass_while7777);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1242,19);
            pushFollow(FOLLOW_sass_control_expression_in_sass_while7779);
            sass_control_expression();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1242,43);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:43: ( ws )?
            int alt302=2;
            try { dbg.enterSubRule(302);
            try { dbg.enterDecision(302, decisionCanBacktrack[302]);

            int LA302_0 = input.LA(1);

            if ( (LA302_0==WS||(LA302_0>=NL && LA302_0<=COMMENT)) ) {
                alt302=1;
            }
            } finally {dbg.exitDecision(302);}

            switch (alt302) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1242:43: ws
                    {
                    dbg.location(1242,43);
                    pushFollow(FOLLOW_ws_in_sass_while7781);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(302);}

            dbg.location(1242,47);
            pushFollow(FOLLOW_sass_control_block_in_sass_while7784);
            sass_control_block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1243, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_while");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_while"


    // $ANTLR start "sass_control_block"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1245:1: sass_control_block : LBRACE ( ws )? ( declarations )? RBRACE ;
    public final void sass_control_block() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_control_block");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1245, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1246:5: ( LBRACE ( ws )? ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:5: LBRACE ( ws )? ( declarations )? RBRACE
            {
            dbg.location(1247,5);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_control_block7805); if (state.failed) return ;
            dbg.location(1247,12);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:12: ( ws )?
            int alt303=2;
            try { dbg.enterSubRule(303);
            try { dbg.enterDecision(303, decisionCanBacktrack[303]);

            int LA303_0 = input.LA(1);

            if ( (LA303_0==WS||(LA303_0>=NL && LA303_0<=COMMENT)) ) {
                alt303=1;
            }
            } finally {dbg.exitDecision(303);}

            switch (alt303) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:12: ws
                    {
                    dbg.location(1247,12);
                    pushFollow(FOLLOW_ws_in_sass_control_block7807);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(303);}

            dbg.location(1247,16);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:16: ( declarations )?
            int alt304=2;
            try { dbg.enterSubRule(304);
            try { dbg.enterDecision(304, decisionCanBacktrack[304]);

            int LA304_0 = input.LA(1);

            if ( ((LA304_0>=SEMI && LA304_0<=IDENT)||(LA304_0>=IMPORT_SYM && LA304_0<=MEDIA_SYM)||LA304_0==GEN||(LA304_0>=COLON && LA304_0<=AT_IDENT)||LA304_0==MOZ_DOCUMENT_SYM||LA304_0==WEBKIT_KEYFRAMES_SYM||(LA304_0>=PAGE_SYM && LA304_0<=FONT_FACE_SYM)||LA304_0==MINUS||LA304_0==GREATER||(LA304_0>=HASH_SYMBOL && LA304_0<=PIPE)||LA304_0==LESS_AND||LA304_0==SASS_VAR||(LA304_0>=SASS_MIXIN && LA304_0<=SASS_INCLUDE)||LA304_0==SASS_EXTEND||(LA304_0>=SASS_DEBUG && LA304_0<=SASS_IF)||(LA304_0>=SASS_FOR && LA304_0<=SASS_WHILE)||(LA304_0>=SASS_RETURN && LA304_0<=SASS_CONTENT)) ) {
                alt304=1;
            }
            } finally {dbg.exitDecision(304);}

            switch (alt304) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1247:16: declarations
                    {
                    dbg.location(1247,16);
                    pushFollow(FOLLOW_declarations_in_sass_control_block7810);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(304);}

            dbg.location(1247,30);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_control_block7813); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1248, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_control_block");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_control_block"


    // $ANTLR start "sass_function_declaration"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1250:1: sass_function_declaration : SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE ;
    public final void sass_function_declaration() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_function_declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1250, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1251:5: ( SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1256:5: SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE
            {
            dbg.location(1256,5);
            match(input,SASS_FUNCTION,FOLLOW_SASS_FUNCTION_in_sass_function_declaration7859); if (state.failed) return ;
            dbg.location(1256,19);
            pushFollow(FOLLOW_ws_in_sass_function_declaration7861);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1256,22);
            pushFollow(FOLLOW_sass_function_name_in_sass_function_declaration7863);
            sass_function_name();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1256,41);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1256:41: ( ws )?
            int alt305=2;
            try { dbg.enterSubRule(305);
            try { dbg.enterDecision(305, decisionCanBacktrack[305]);

            int LA305_0 = input.LA(1);

            if ( (LA305_0==WS||(LA305_0>=NL && LA305_0<=COMMENT)) ) {
                alt305=1;
            }
            } finally {dbg.exitDecision(305);}

            switch (alt305) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1256:41: ws
                    {
                    dbg.location(1256,41);
                    pushFollow(FOLLOW_ws_in_sass_function_declaration7865);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(305);}

            dbg.location(1256,45);
            match(input,LPAREN,FOLLOW_LPAREN_in_sass_function_declaration7868); if (state.failed) return ;
            dbg.location(1256,52);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1256:52: ( cp_args_list )?
            int alt306=2;
            try { dbg.enterSubRule(306);
            try { dbg.enterDecision(306, decisionCanBacktrack[306]);

            int LA306_0 = input.LA(1);

            if ( (LA306_0==MEDIA_SYM||LA306_0==AT_IDENT||LA306_0==SASS_VAR||(LA306_0>=CP_DOTS && LA306_0<=LESS_REST)) ) {
                alt306=1;
            }
            } finally {dbg.exitDecision(306);}

            switch (alt306) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1256:52: cp_args_list
                    {
                    dbg.location(1256,52);
                    pushFollow(FOLLOW_cp_args_list_in_sass_function_declaration7870);
                    cp_args_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(306);}

            dbg.location(1256,66);
            match(input,RPAREN,FOLLOW_RPAREN_in_sass_function_declaration7873); if (state.failed) return ;
            dbg.location(1256,73);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1256:73: ( ws )?
            int alt307=2;
            try { dbg.enterSubRule(307);
            try { dbg.enterDecision(307, decisionCanBacktrack[307]);

            int LA307_0 = input.LA(1);

            if ( (LA307_0==WS||(LA307_0>=NL && LA307_0<=COMMENT)) ) {
                alt307=1;
            }
            } finally {dbg.exitDecision(307);}

            switch (alt307) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1256:73: ws
                    {
                    dbg.location(1256,73);
                    pushFollow(FOLLOW_ws_in_sass_function_declaration7875);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(307);}

            dbg.location(1256,77);
            match(input,LBRACE,FOLLOW_LBRACE_in_sass_function_declaration7878); if (state.failed) return ;
            dbg.location(1256,84);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1256:84: ( ws )?
            int alt308=2;
            try { dbg.enterSubRule(308);
            try { dbg.enterDecision(308, decisionCanBacktrack[308]);

            int LA308_0 = input.LA(1);

            if ( (LA308_0==WS||(LA308_0>=NL && LA308_0<=COMMENT)) ) {
                alt308=1;
            }
            } finally {dbg.exitDecision(308);}

            switch (alt308) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1256:84: ws
                    {
                    dbg.location(1256,84);
                    pushFollow(FOLLOW_ws_in_sass_function_declaration7880);
                    ws();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(308);}

            dbg.location(1256,88);
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1256:88: ( declarations )?
            int alt309=2;
            try { dbg.enterSubRule(309);
            try { dbg.enterDecision(309, decisionCanBacktrack[309]);

            int LA309_0 = input.LA(1);

            if ( ((LA309_0>=SEMI && LA309_0<=IDENT)||(LA309_0>=IMPORT_SYM && LA309_0<=MEDIA_SYM)||LA309_0==GEN||(LA309_0>=COLON && LA309_0<=AT_IDENT)||LA309_0==MOZ_DOCUMENT_SYM||LA309_0==WEBKIT_KEYFRAMES_SYM||(LA309_0>=PAGE_SYM && LA309_0<=FONT_FACE_SYM)||LA309_0==MINUS||LA309_0==GREATER||(LA309_0>=HASH_SYMBOL && LA309_0<=PIPE)||LA309_0==LESS_AND||LA309_0==SASS_VAR||(LA309_0>=SASS_MIXIN && LA309_0<=SASS_INCLUDE)||LA309_0==SASS_EXTEND||(LA309_0>=SASS_DEBUG && LA309_0<=SASS_IF)||(LA309_0>=SASS_FOR && LA309_0<=SASS_WHILE)||(LA309_0>=SASS_RETURN && LA309_0<=SASS_CONTENT)) ) {
                alt309=1;
            }
            } finally {dbg.exitDecision(309);}

            switch (alt309) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1256:88: declarations
                    {
                    dbg.location(1256,88);
                    pushFollow(FOLLOW_declarations_in_sass_function_declaration7883);
                    declarations();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(309);}

            dbg.location(1256,102);
            match(input,RBRACE,FOLLOW_RBRACE_in_sass_function_declaration7886); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1257, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_function_declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_function_declaration"


    // $ANTLR start "sass_function_name"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1259:1: sass_function_name : IDENT ;
    public final void sass_function_name() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_function_name");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1259, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1260:5: ( IDENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1261:5: IDENT
            {
            dbg.location(1261,5);
            match(input,IDENT,FOLLOW_IDENT_in_sass_function_name7911); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1262, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_function_name");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_function_name"


    // $ANTLR start "sass_function_return"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1264:1: sass_function_return : SASS_RETURN ws cp_expression ;
    public final void sass_function_return() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_function_return");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1264, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1265:5: ( SASS_RETURN ws cp_expression )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1266:5: SASS_RETURN ws cp_expression
            {
            dbg.location(1266,5);
            match(input,SASS_RETURN,FOLLOW_SASS_RETURN_in_sass_function_return7932); if (state.failed) return ;
            dbg.location(1266,17);
            pushFollow(FOLLOW_ws_in_sass_function_return7934);
            ws();

            state._fsp--;
            if (state.failed) return ;
            dbg.location(1266,20);
            pushFollow(FOLLOW_cp_expression_in_sass_function_return7936);
            cp_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1267, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_function_return");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_function_return"


    // $ANTLR start "sass_content"
    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1269:1: sass_content : SASS_CONTENT ;
    public final void sass_content() throws RecognitionException {
        try { dbg.enterRule(getGrammarFileName(), "sass_content");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1269, 1);

        try {
            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1270:5: ( SASS_CONTENT )
            dbg.enterAlt(1);

            // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1271:5: SASS_CONTENT
            {
            dbg.location(1271,5);
            match(input,SASS_CONTENT,FOLLOW_SASS_CONTENT_in_sass_content7961); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        dbg.location(1272, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "sass_content");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return ;
    }
    // $ANTLR end "sass_content"

    // $ANTLR start synpred1_Css3
    public final void synpred1_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:44: ( ( ws )? mediaQueryList )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:45: ( ws )? mediaQueryList
        {
        dbg.location(363,45);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:45: ( ws )?
        int alt310=2;
        try { dbg.enterSubRule(310);
        try { dbg.enterDecision(310, decisionCanBacktrack[310]);

        int LA310_0 = input.LA(1);

        if ( (LA310_0==WS||(LA310_0>=NL && LA310_0<=COMMENT)) ) {
            alt310=1;
        }
        } finally {dbg.exitDecision(310);}

        switch (alt310) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:363:45: ws
                {
                dbg.location(363,45);
                pushFollow(FOLLOW_ws_in_synpred1_Css3370);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(310);}

        dbg.location(363,49);
        pushFollow(FOLLOW_mediaQueryList_in_synpred1_Css3373);
        mediaQueryList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_Css3

    // $ANTLR start synpred2_Css3
    public final void synpred2_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:98: ( ( ws )? mediaQueryList )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:99: ( ws )? mediaQueryList
        {
        dbg.location(366,99);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:99: ( ws )?
        int alt311=2;
        try { dbg.enterSubRule(311);
        try { dbg.enterDecision(311, decisionCanBacktrack[311]);

        int LA311_0 = input.LA(1);

        if ( (LA311_0==WS||(LA311_0>=NL && LA311_0<=COMMENT)) ) {
            alt311=1;
        }
        } finally {dbg.exitDecision(311);}

        switch (alt311) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:366:99: ws
                {
                dbg.location(366,99);
                pushFollow(FOLLOW_ws_in_synpred2_Css3434);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(311);}

        dbg.location(366,103);
        pushFollow(FOLLOW_mediaQueryList_in_synpred2_Css3437);
        mediaQueryList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_Css3

    // $ANTLR start synpred3_Css3
    public final void synpred3_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:27: ( ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:28: ( ws )? SEMI
        {
        dbg.location(381,28);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:28: ( ws )?
        int alt312=2;
        try { dbg.enterSubRule(312);
        try { dbg.enterDecision(312, decisionCanBacktrack[312]);

        int LA312_0 = input.LA(1);

        if ( (LA312_0==WS||(LA312_0>=NL && LA312_0<=COMMENT)) ) {
            alt312=1;
        }
        } finally {dbg.exitDecision(312);}

        switch (alt312) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:381:28: ws
                {
                dbg.location(381,28);
                pushFollow(FOLLOW_ws_in_synpred3_Css3561);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(312);}

        dbg.location(381,32);
        match(input,SEMI,FOLLOW_SEMI_in_synpred3_Css3564); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_Css3

    // $ANTLR start synpred4_Css3
    public final void synpred4_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:5: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ LBRACE )* LBRACE ) )
        int alt316=2;
        try { dbg.enterDecision(316, decisionCanBacktrack[316]);

        int LA316_0 = input.LA(1);

        if ( (LA316_0==SASS_MIXIN) ) {
            alt316=1;
        }
        else if ( (LA316_0==DOT) ) {
            alt316=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 316, 0, input);

            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(316);}

        switch (alt316) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:6: SASS_MIXIN
                {
                dbg.location(389,6);
                match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred4_Css3635); if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:19: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ LBRACE )* LBRACE )
                {
                dbg.location(389,19);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:19: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ LBRACE )* LBRACE )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:20: DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ LBRACE )* LBRACE
                {
                dbg.location(389,20);
                match(input,DOT,FOLLOW_DOT_in_synpred4_Css3640); if (state.failed) return ;
                dbg.location(389,24);
                match(input,IDENT,FOLLOW_IDENT_in_synpred4_Css3642); if (state.failed) return ;
                dbg.location(389,30);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:30: ( ws )?
                int alt313=2;
                try { dbg.enterSubRule(313);
                try { dbg.enterDecision(313, decisionCanBacktrack[313]);

                int LA313_0 = input.LA(1);

                if ( (LA313_0==WS||(LA313_0>=NL && LA313_0<=COMMENT)) ) {
                    alt313=1;
                }
                } finally {dbg.exitDecision(313);}

                switch (alt313) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:30: ws
                        {
                        dbg.location(389,30);
                        pushFollow(FOLLOW_ws_in_synpred4_Css3644);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(313);}

                dbg.location(389,34);
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred4_Css3647); if (state.failed) return ;
                dbg.location(389,41);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:41: (~ RPAREN )*
                try { dbg.enterSubRule(314);

                loop314:
                do {
                    int alt314=2;
                    try { dbg.enterDecision(314, decisionCanBacktrack[314]);

                    int LA314_0 = input.LA(1);

                    if ( ((LA314_0>=NAMESPACE_SYM && LA314_0<=LPAREN)||(LA314_0>=COLON && LA314_0<=LINE_COMMENT)) ) {
                        alt314=1;
                    }


                    } finally {dbg.exitDecision(314);}

                    switch (alt314) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:42: ~ RPAREN
                	    {
                	    dbg.location(389,42);
                	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=LPAREN)||(input.LA(1)>=COLON && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop314;
                    }
                } while (true);
                } finally {dbg.exitSubRule(314);}

                dbg.location(389,52);
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred4_Css3655); if (state.failed) return ;
                dbg.location(389,59);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:59: (~ LBRACE )*
                try { dbg.enterSubRule(315);

                loop315:
                do {
                    int alt315=2;
                    try { dbg.enterDecision(315, decisionCanBacktrack[315]);

                    int LA315_0 = input.LA(1);

                    if ( ((LA315_0>=NAMESPACE_SYM && LA315_0<=MEDIA_SYM)||(LA315_0>=RBRACE && LA315_0<=LINE_COMMENT)) ) {
                        alt315=1;
                    }


                    } finally {dbg.exitDecision(315);}

                    switch (alt315) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:389:60: ~ LBRACE
                	    {
                	    dbg.location(389,60);
                	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=RBRACE && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop315;
                    }
                } while (true);
                } finally {dbg.exitSubRule(315);}

                dbg.location(389,70);
                match(input,LBRACE,FOLLOW_LBRACE_in_synpred4_Css3663); if (state.failed) return ;

                }


                }
                break;

        }}
    // $ANTLR end synpred4_Css3

    // $ANTLR start synpred5_Css3
    public final void synpred5_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:390:7: ( cp_mixin_call )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:390:8: cp_mixin_call
        {
        dbg.location(390,8);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred5_Css3677);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_Css3

    // $ANTLR start synpred6_Css3
    public final void synpred6_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:6: ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI | sass_declaration_interpolation_expression COLON )
        int alt319=2;
        try { dbg.enterDecision(319, decisionCanBacktrack[319]);

        try {
            isCyclicDecision = true;
            alt319 = dfa319.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(319);}

        switch (alt319) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:7: (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI
                {
                dbg.location(391,7);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:7: (~ ( LBRACE | SEMI | RBRACE | COLON ) )+
                int cnt317=0;
                try { dbg.enterSubRule(317);

                loop317:
                do {
                    int alt317=2;
                    try { dbg.enterDecision(317, decisionCanBacktrack[317]);

                    int LA317_0 = input.LA(1);

                    if ( (LA317_0==NAMESPACE_SYM||(LA317_0>=IDENT && LA317_0<=MEDIA_SYM)||(LA317_0>=AND && LA317_0<=RPAREN)||(LA317_0>=AT_IDENT && LA317_0<=LINE_COMMENT)) ) {
                        alt317=1;
                    }


                    } finally {dbg.exitDecision(317);}

                    switch (alt317) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:7: ~ ( LBRACE | SEMI | RBRACE | COLON )
                	    {
                	    dbg.location(391,7);
                	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=RPAREN)||(input.LA(1)>=AT_IDENT && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    if ( cnt317 >= 1 ) break loop317;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(317, input);
                            dbg.recognitionException(eee);

                            throw eee;
                    }
                    cnt317++;
                } while (true);
                } finally {dbg.exitSubRule(317);}

                dbg.location(391,36);
                match(input,COLON,FOLLOW_COLON_in_synpred6_Css3701); if (state.failed) return ;
                dbg.location(391,42);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:42: (~ ( SEMI | LBRACE | RBRACE ) )+
                int cnt318=0;
                try { dbg.enterSubRule(318);

                loop318:
                do {
                    int alt318=2;
                    try { dbg.enterDecision(318, decisionCanBacktrack[318]);

                    int LA318_0 = input.LA(1);

                    if ( (LA318_0==NAMESPACE_SYM||(LA318_0>=IDENT && LA318_0<=MEDIA_SYM)||(LA318_0>=AND && LA318_0<=LINE_COMMENT)) ) {
                        alt318=1;
                    }


                    } finally {dbg.exitDecision(318);}

                    switch (alt318) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:42: ~ ( SEMI | LBRACE | RBRACE )
                	    {
                	    dbg.location(391,42);
                	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    if ( cnt318 >= 1 ) break loop318;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(318, input);
                            dbg.recognitionException(eee);

                            throw eee;
                    }
                    cnt318++;
                } while (true);
                } finally {dbg.exitSubRule(318);}

                dbg.location(391,65);
                match(input,SEMI,FOLLOW_SEMI_in_synpred6_Css3713); if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:391:72: sass_declaration_interpolation_expression COLON
                {
                dbg.location(391,72);
                pushFollow(FOLLOW_sass_declaration_interpolation_expression_in_synpred6_Css3717);
                sass_declaration_interpolation_expression();

                state._fsp--;
                if (state.failed) return ;
                dbg.location(391,114);
                match(input,COLON,FOLLOW_COLON_in_synpred6_Css3719); if (state.failed) return ;

                }
                break;

        }}
    // $ANTLR end synpred6_Css3

    // $ANTLR start synpred7_Css3
    public final void synpred7_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:405:17: ( ( ws )? COMMA )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:405:18: ( ws )? COMMA
        {
        dbg.location(405,18);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:405:18: ( ws )?
        int alt320=2;
        try { dbg.enterSubRule(320);
        try { dbg.enterDecision(320, decisionCanBacktrack[320]);

        int LA320_0 = input.LA(1);

        if ( (LA320_0==WS||(LA320_0>=NL && LA320_0<=COMMENT)) ) {
            alt320=1;
        }
        } finally {dbg.exitDecision(320);}

        switch (alt320) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:405:18: ws
                {
                dbg.location(405,18);
                pushFollow(FOLLOW_ws_in_synpred7_Css3827);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(320);}

        dbg.location(405,22);
        match(input,COMMA,FOLLOW_COMMA_in_synpred7_Css3830); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_Css3

    // $ANTLR start synpred8_Css3
    public final void synpred8_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:22: ( ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:23: ( ws )? SEMI
        {
        dbg.location(438,23);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:23: ( ws )?
        int alt321=2;
        try { dbg.enterSubRule(321);
        try { dbg.enterDecision(321, decisionCanBacktrack[321]);

        int LA321_0 = input.LA(1);

        if ( (LA321_0==WS||(LA321_0>=NL && LA321_0<=COMMENT)) ) {
            alt321=1;
        }
        } finally {dbg.exitDecision(321);}

        switch (alt321) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:438:23: ws
                {
                dbg.location(438,23);
                pushFollow(FOLLOW_ws_in_synpred8_Css31083);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(321);}

        dbg.location(438,27);
        match(input,SEMI,FOLLOW_SEMI_in_synpred8_Css31086); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_Css3

    // $ANTLR start synpred9_Css3
    public final void synpred9_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:9: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ LBRACE )* LBRACE ) )
        int alt325=2;
        try { dbg.enterDecision(325, decisionCanBacktrack[325]);

        int LA325_0 = input.LA(1);

        if ( (LA325_0==SASS_MIXIN) ) {
            alt325=1;
        }
        else if ( (LA325_0==DOT) ) {
            alt325=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 325, 0, input);

            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(325);}

        switch (alt325) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:10: SASS_MIXIN
                {
                dbg.location(446,10);
                match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred9_Css31163); if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:23: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ LBRACE )* LBRACE )
                {
                dbg.location(446,23);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:23: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ LBRACE )* LBRACE )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:24: DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ LBRACE )* LBRACE
                {
                dbg.location(446,24);
                match(input,DOT,FOLLOW_DOT_in_synpred9_Css31168); if (state.failed) return ;
                dbg.location(446,28);
                match(input,IDENT,FOLLOW_IDENT_in_synpred9_Css31170); if (state.failed) return ;
                dbg.location(446,34);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:34: ( ws )?
                int alt322=2;
                try { dbg.enterSubRule(322);
                try { dbg.enterDecision(322, decisionCanBacktrack[322]);

                int LA322_0 = input.LA(1);

                if ( (LA322_0==WS||(LA322_0>=NL && LA322_0<=COMMENT)) ) {
                    alt322=1;
                }
                } finally {dbg.exitDecision(322);}

                switch (alt322) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:34: ws
                        {
                        dbg.location(446,34);
                        pushFollow(FOLLOW_ws_in_synpred9_Css31172);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(322);}

                dbg.location(446,38);
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred9_Css31175); if (state.failed) return ;
                dbg.location(446,45);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:45: (~ RPAREN )*
                try { dbg.enterSubRule(323);

                loop323:
                do {
                    int alt323=2;
                    try { dbg.enterDecision(323, decisionCanBacktrack[323]);

                    int LA323_0 = input.LA(1);

                    if ( ((LA323_0>=NAMESPACE_SYM && LA323_0<=LPAREN)||(LA323_0>=COLON && LA323_0<=LINE_COMMENT)) ) {
                        alt323=1;
                    }


                    } finally {dbg.exitDecision(323);}

                    switch (alt323) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:46: ~ RPAREN
                	    {
                	    dbg.location(446,46);
                	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=LPAREN)||(input.LA(1)>=COLON && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop323;
                    }
                } while (true);
                } finally {dbg.exitSubRule(323);}

                dbg.location(446,56);
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred9_Css31183); if (state.failed) return ;
                dbg.location(446,63);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:63: (~ LBRACE )*
                try { dbg.enterSubRule(324);

                loop324:
                do {
                    int alt324=2;
                    try { dbg.enterDecision(324, decisionCanBacktrack[324]);

                    int LA324_0 = input.LA(1);

                    if ( ((LA324_0>=NAMESPACE_SYM && LA324_0<=MEDIA_SYM)||(LA324_0>=RBRACE && LA324_0<=LINE_COMMENT)) ) {
                        alt324=1;
                    }


                    } finally {dbg.exitDecision(324);}

                    switch (alt324) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:446:64: ~ LBRACE
                	    {
                	    dbg.location(446,64);
                	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=RBRACE && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop324;
                    }
                } while (true);
                } finally {dbg.exitSubRule(324);}

                dbg.location(446,74);
                match(input,LBRACE,FOLLOW_LBRACE_in_synpred9_Css31191); if (state.failed) return ;

                }


                }
                break;

        }}
    // $ANTLR end synpred9_Css3

    // $ANTLR start synpred10_Css3
    public final void synpred10_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:447:11: ( cp_mixin_call )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:447:12: cp_mixin_call
        {
        dbg.location(447,12);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred10_Css31208);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_Css3

    // $ANTLR start synpred11_Css3
    public final void synpred11_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:585:9: ( (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:585:10: (~ ( HASH_SYMBOL | COLON ) )* HASH_SYMBOL LBRACE
        {
        dbg.location(585,10);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:585:10: (~ ( HASH_SYMBOL | COLON ) )*
        try { dbg.enterSubRule(326);

        loop326:
        do {
            int alt326=2;
            try { dbg.enterDecision(326, decisionCanBacktrack[326]);

            int LA326_0 = input.LA(1);

            if ( ((LA326_0>=NAMESPACE_SYM && LA326_0<=RPAREN)||(LA326_0>=AT_IDENT && LA326_0<=TILDE)||(LA326_0>=HASH && LA326_0<=LINE_COMMENT)) ) {
                alt326=1;
            }


            } finally {dbg.exitDecision(326);}

            switch (alt326) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:585:10: ~ ( HASH_SYMBOL | COLON )
        	    {
        	    dbg.location(585,10);
        	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=RPAREN)||(input.LA(1)>=AT_IDENT && input.LA(1)<=TILDE)||(input.LA(1)>=HASH && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop326;
            }
        } while (true);
        } finally {dbg.exitSubRule(326);}

        dbg.location(585,32);
        match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_synpred11_Css32320); if (state.failed) return ;
        dbg.location(585,44);
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred11_Css32322); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_Css3

    // $ANTLR start synpred12_Css3
    public final void synpred12_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:611:25: ( ( ws )? SEMI )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:611:26: ( ws )? SEMI
        {
        dbg.location(611,26);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:611:26: ( ws )?
        int alt327=2;
        try { dbg.enterSubRule(327);
        try { dbg.enterDecision(327, decisionCanBacktrack[327]);

        int LA327_0 = input.LA(1);

        if ( (LA327_0==WS||(LA327_0>=NL && LA327_0<=COMMENT)) ) {
            alt327=1;
        }
        } finally {dbg.exitDecision(327);}

        switch (alt327) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:611:26: ws
                {
                dbg.location(611,26);
                pushFollow(FOLLOW_ws_in_synpred12_Css32492);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(327);}

        dbg.location(611,30);
        match(input,SEMI,FOLLOW_SEMI_in_synpred12_Css32495); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_Css3

    // $ANTLR start synpred13_Css3
    public final void synpred13_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:5: ( cp_variable_declaration )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:619:6: cp_variable_declaration
        {
        dbg.location(619,6);
        pushFollow(FOLLOW_cp_variable_declaration_in_synpred13_Css32566);
        cp_variable_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_Css3

    // $ANTLR start synpred14_Css3
    public final void synpred14_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:620:7: ( sass_nested_properties )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:620:8: sass_nested_properties
        {
        dbg.location(620,8);
        pushFollow(FOLLOW_sass_nested_properties_in_synpred14_Css32579);
        sass_nested_properties();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_Css3

    // $ANTLR start synpred15_Css3
    public final void synpred15_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:7: ( propertyDeclaration )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:621:8: propertyDeclaration
        {
        dbg.location(621,8);
        pushFollow(FOLLOW_propertyDeclaration_in_synpred15_Css32592);
        propertyDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_Css3

    // $ANTLR start synpred16_Css3
    public final void synpred16_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:7: ( property COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:8: property COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI )
        {
        dbg.location(623,8);
        pushFollow(FOLLOW_property_in_synpred16_Css32610);
        property();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(623,17);
        match(input,COLON,FOLLOW_COLON_in_synpred16_Css32612); if (state.failed) return ;
        dbg.location(623,23);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:23: (~ ( LBRACE | SEMI | RBRACE ) )*
        try { dbg.enterSubRule(328);

        loop328:
        do {
            int alt328=2;
            try { dbg.enterDecision(328, decisionCanBacktrack[328]);

            int LA328_0 = input.LA(1);

            if ( (LA328_0==NAMESPACE_SYM||(LA328_0>=IDENT && LA328_0<=MEDIA_SYM)||(LA328_0>=AND && LA328_0<=LINE_COMMENT)) ) {
                alt328=1;
            }


            } finally {dbg.exitDecision(328);}

            switch (alt328) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:623:23: ~ ( LBRACE | SEMI | RBRACE )
        	    {
        	    dbg.location(623,23);
        	    if ( input.LA(1)==NAMESPACE_SYM||(input.LA(1)>=IDENT && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=AND && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop328;
            }
        } while (true);
        } finally {dbg.exitSubRule(328);}

        dbg.location(623,46);
        if ( input.LA(1)==SEMI||input.LA(1)==RBRACE ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            dbg.recognitionException(mse);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred16_Css3

    // $ANTLR start synpred17_Css3
    public final void synpred17_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:624:7: ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ LBRACE )* LBRACE ) )
        int alt332=2;
        try { dbg.enterDecision(332, decisionCanBacktrack[332]);

        int LA332_0 = input.LA(1);

        if ( (LA332_0==SASS_MIXIN) ) {
            alt332=1;
        }
        else if ( (LA332_0==DOT) ) {
            alt332=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 332, 0, input);

            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(332);}

        switch (alt332) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:624:8: SASS_MIXIN
                {
                dbg.location(624,8);
                match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred17_Css32642); if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:624:21: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ LBRACE )* LBRACE )
                {
                dbg.location(624,21);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:624:21: ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ LBRACE )* LBRACE )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:624:22: DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ LBRACE )* LBRACE
                {
                dbg.location(624,22);
                match(input,DOT,FOLLOW_DOT_in_synpred17_Css32647); if (state.failed) return ;
                dbg.location(624,26);
                match(input,IDENT,FOLLOW_IDENT_in_synpred17_Css32649); if (state.failed) return ;
                dbg.location(624,32);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:624:32: ( ws )?
                int alt329=2;
                try { dbg.enterSubRule(329);
                try { dbg.enterDecision(329, decisionCanBacktrack[329]);

                int LA329_0 = input.LA(1);

                if ( (LA329_0==WS||(LA329_0>=NL && LA329_0<=COMMENT)) ) {
                    alt329=1;
                }
                } finally {dbg.exitDecision(329);}

                switch (alt329) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:624:32: ws
                        {
                        dbg.location(624,32);
                        pushFollow(FOLLOW_ws_in_synpred17_Css32651);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(329);}

                dbg.location(624,36);
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred17_Css32654); if (state.failed) return ;
                dbg.location(624,43);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:624:43: (~ RPAREN )*
                try { dbg.enterSubRule(330);

                loop330:
                do {
                    int alt330=2;
                    try { dbg.enterDecision(330, decisionCanBacktrack[330]);

                    int LA330_0 = input.LA(1);

                    if ( ((LA330_0>=NAMESPACE_SYM && LA330_0<=LPAREN)||(LA330_0>=COLON && LA330_0<=LINE_COMMENT)) ) {
                        alt330=1;
                    }


                    } finally {dbg.exitDecision(330);}

                    switch (alt330) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:624:44: ~ RPAREN
                	    {
                	    dbg.location(624,44);
                	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=LPAREN)||(input.LA(1)>=COLON && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop330;
                    }
                } while (true);
                } finally {dbg.exitSubRule(330);}

                dbg.location(624,54);
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred17_Css32662); if (state.failed) return ;
                dbg.location(624,61);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:624:61: (~ LBRACE )*
                try { dbg.enterSubRule(331);

                loop331:
                do {
                    int alt331=2;
                    try { dbg.enterDecision(331, decisionCanBacktrack[331]);

                    int LA331_0 = input.LA(1);

                    if ( ((LA331_0>=NAMESPACE_SYM && LA331_0<=MEDIA_SYM)||(LA331_0>=RBRACE && LA331_0<=LINE_COMMENT)) ) {
                        alt331=1;
                    }


                    } finally {dbg.exitDecision(331);}

                    switch (alt331) {
                	case 1 :
                	    dbg.enterAlt(1);

                	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:624:62: ~ LBRACE
                	    {
                	    dbg.location(624,62);
                	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=RBRACE && input.LA(1)<=LINE_COMMENT) ) {
                	        input.consume();
                	        state.errorRecovery=false;state.failed=false;
                	    }
                	    else {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        MismatchedSetException mse = new MismatchedSetException(null,input);
                	        dbg.recognitionException(mse);
                	        throw mse;
                	    }


                	    }
                	    break;

                	default :
                	    break loop331;
                    }
                } while (true);
                } finally {dbg.exitSubRule(331);}

                dbg.location(624,72);
                match(input,LBRACE,FOLLOW_LBRACE_in_synpred17_Css32670); if (state.failed) return ;

                }


                }
                break;

        }}
    // $ANTLR end synpred17_Css3

    // $ANTLR start synpred18_Css3
    public final void synpred18_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:625:7: ( cp_mixin_call )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:625:8: cp_mixin_call
        {
        dbg.location(625,8);
        pushFollow(FOLLOW_cp_mixin_call_in_synpred18_Css32684);
        cp_mixin_call();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_Css3

    // $ANTLR start synpred19_Css3
    public final void synpred19_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:626:7: ( rule )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:626:8: rule
        {
        dbg.location(626,8);
        pushFollow(FOLLOW_rule_in_synpred19_Css32697);
        rule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_Css3

    // $ANTLR start synpred20_Css3
    public final void synpred20_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:9: ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:11: (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE
        {
        dbg.location(643,11);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:11: (~ ( HASH_SYMBOL | LBRACE ) )*
        try { dbg.enterSubRule(333);

        loop333:
        do {
            int alt333=2;
            try { dbg.enterDecision(333, decisionCanBacktrack[333]);

            int LA333_0 = input.LA(1);

            if ( ((LA333_0>=NAMESPACE_SYM && LA333_0<=MEDIA_SYM)||(LA333_0>=RBRACE && LA333_0<=TILDE)||(LA333_0>=HASH && LA333_0<=LINE_COMMENT)) ) {
                alt333=1;
            }


            } finally {dbg.exitDecision(333);}

            switch (alt333) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:643:11: ~ ( HASH_SYMBOL | LBRACE )
        	    {
        	    dbg.location(643,11);
        	    if ( (input.LA(1)>=NAMESPACE_SYM && input.LA(1)<=MEDIA_SYM)||(input.LA(1)>=RBRACE && input.LA(1)<=TILDE)||(input.LA(1)>=HASH && input.LA(1)<=LINE_COMMENT) ) {
        	        input.consume();
        	        state.errorRecovery=false;state.failed=false;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        MismatchedSetException mse = new MismatchedSetException(null,input);
        	        dbg.recognitionException(mse);
        	        throw mse;
        	    }


        	    }
        	    break;

        	default :
        	    break loop333;
            }
        } while (true);
        } finally {dbg.exitSubRule(333);}

        dbg.location(643,38);
        match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_synpred20_Css32840); if (state.failed) return ;
        dbg.location(643,50);
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred20_Css32842); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_Css3

    // $ANTLR start synpred21_Css3
    public final void synpred21_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:659:18: ( ( ws )? esPred )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:659:19: ( ws )? esPred
        {
        dbg.location(659,19);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:659:19: ( ws )?
        int alt334=2;
        try { dbg.enterSubRule(334);
        try { dbg.enterDecision(334, decisionCanBacktrack[334]);

        int LA334_0 = input.LA(1);

        if ( (LA334_0==WS||(LA334_0>=NL && LA334_0<=COMMENT)) ) {
            alt334=1;
        }
        } finally {dbg.exitDecision(334);}

        switch (alt334) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:659:19: ws
                {
                dbg.location(659,19);
                pushFollow(FOLLOW_ws_in_synpred21_Css32972);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(334);}

        dbg.location(659,23);
        pushFollow(FOLLOW_esPred_in_synpred21_Css32975);
        esPred();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_Css3

    // $ANTLR start synpred22_Css3
    public final void synpred22_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:661:21: ( ( ws )? esPred )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:661:22: ( ws )? esPred
        {
        dbg.location(661,22);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:661:22: ( ws )?
        int alt335=2;
        try { dbg.enterSubRule(335);
        try { dbg.enterDecision(335, decisionCanBacktrack[335]);

        int LA335_0 = input.LA(1);

        if ( (LA335_0==WS||(LA335_0>=NL && LA335_0<=COMMENT)) ) {
            alt335=1;
        }
        } finally {dbg.exitDecision(335);}

        switch (alt335) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:661:22: ws
                {
                dbg.location(661,22);
                pushFollow(FOLLOW_ws_in_synpred22_Css32996);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(335);}

        dbg.location(661,26);
        pushFollow(FOLLOW_esPred_in_synpred22_Css32999);
        esPred();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_Css3

    // $ANTLR start synpred23_Css3
    public final void synpred23_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:675:7: ( ( IDENT | STAR )? PIPE )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:675:8: ( IDENT | STAR )? PIPE
        {
        dbg.location(675,8);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:675:8: ( IDENT | STAR )?
        int alt336=2;
        try { dbg.enterSubRule(336);
        try { dbg.enterDecision(336, decisionCanBacktrack[336]);

        int LA336_0 = input.LA(1);

        if ( (LA336_0==IDENT||LA336_0==STAR) ) {
            alt336=1;
        }
        } finally {dbg.exitDecision(336);}

        switch (alt336) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:
                {
                dbg.location(675,8);
                if ( input.LA(1)==IDENT||input.LA(1)==STAR ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    dbg.recognitionException(mse);
                    throw mse;
                }


                }
                break;

        }
        } finally {dbg.exitSubRule(336);}

        dbg.location(675,24);
        match(input,PIPE,FOLLOW_PIPE_in_synpred23_Css33115); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_Css3

    // $ANTLR start synpred24_Css3
    public final void synpred24_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:14: ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:15: ( ws | ( ( ws )? operator ( ws )? ) | ) term
        {
        dbg.location(838,15);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:15: ( ws | ( ( ws )? operator ( ws )? ) | )
        int alt339=3;
        try { dbg.enterSubRule(339);
        try { dbg.enterDecision(339, decisionCanBacktrack[339]);

        try {
            isCyclicDecision = true;
            alt339 = dfa339.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(339);}

        switch (alt339) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:17: ws
                {
                dbg.location(838,17);
                pushFollow(FOLLOW_ws_in_synpred24_Css34414);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:22: ( ( ws )? operator ( ws )? )
                {
                dbg.location(838,22);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:22: ( ( ws )? operator ( ws )? )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:23: ( ws )? operator ( ws )?
                {
                dbg.location(838,23);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:23: ( ws )?
                int alt337=2;
                try { dbg.enterSubRule(337);
                try { dbg.enterDecision(337, decisionCanBacktrack[337]);

                int LA337_0 = input.LA(1);

                if ( (LA337_0==WS||(LA337_0>=NL && LA337_0<=COMMENT)) ) {
                    alt337=1;
                }
                } finally {dbg.exitDecision(337);}

                switch (alt337) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:23: ws
                        {
                        dbg.location(838,23);
                        pushFollow(FOLLOW_ws_in_synpred24_Css34419);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(337);}

                dbg.location(838,27);
                pushFollow(FOLLOW_operator_in_synpred24_Css34422);
                operator();

                state._fsp--;
                if (state.failed) return ;
                dbg.location(838,36);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:36: ( ws )?
                int alt338=2;
                try { dbg.enterSubRule(338);
                try { dbg.enterDecision(338, decisionCanBacktrack[338]);

                int LA338_0 = input.LA(1);

                if ( (LA338_0==WS||(LA338_0>=NL && LA338_0<=COMMENT)) ) {
                    alt338=1;
                }
                } finally {dbg.exitDecision(338);}

                switch (alt338) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:36: ws
                        {
                        dbg.location(838,36);
                        pushFollow(FOLLOW_ws_in_synpred24_Css34424);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(338);}


                }


                }
                break;
            case 3 :
                dbg.enterAlt(3);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:838:56: 
                {
                }
                break;

        }
        } finally {dbg.exitSubRule(339);}

        dbg.location(838,58);
        pushFollow(FOLLOW_term_in_synpred24_Css34433);
        term();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred24_Css3

    // $ANTLR start synpred25_Css3
    public final void synpred25_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:845:9: ( functionName ( ws )? LPAREN )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:845:10: functionName ( ws )? LPAREN
        {
        dbg.location(845,10);
        pushFollow(FOLLOW_functionName_in_synpred25_Css34511);
        functionName();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(845,23);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:845:23: ( ws )?
        int alt340=2;
        try { dbg.enterSubRule(340);
        try { dbg.enterDecision(340, decisionCanBacktrack[340]);

        int LA340_0 = input.LA(1);

        if ( (LA340_0==WS||(LA340_0>=NL && LA340_0<=COMMENT)) ) {
            alt340=1;
        }
        } finally {dbg.exitDecision(340);}

        switch (alt340) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:845:23: ws
                {
                dbg.location(845,23);
                pushFollow(FOLLOW_ws_in_synpred25_Css34513);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(340);}

        dbg.location(845,27);
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred25_Css34516); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred25_Css3

    // $ANTLR start synpred26_Css3
    public final void synpred26_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:896:9: ( fnAttributeName ( ws )? ( OPEQ | COLON ) )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:896:10: fnAttributeName ( ws )? ( OPEQ | COLON )
        {
        dbg.location(896,10);
        pushFollow(FOLLOW_fnAttributeName_in_synpred26_Css34965);
        fnAttributeName();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(896,26);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:896:26: ( ws )?
        int alt341=2;
        try { dbg.enterSubRule(341);
        try { dbg.enterDecision(341, decisionCanBacktrack[341]);

        int LA341_0 = input.LA(1);

        if ( (LA341_0==WS||(LA341_0>=NL && LA341_0<=COMMENT)) ) {
            alt341=1;
        }
        } finally {dbg.exitDecision(341);}

        switch (alt341) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:896:26: ws
                {
                dbg.location(896,26);
                pushFollow(FOLLOW_ws_in_synpred26_Css34967);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(341);}

        dbg.location(896,30);
        if ( input.LA(1)==COLON||input.LA(1)==OPEQ ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            dbg.recognitionException(mse);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred26_Css3

    // $ANTLR start synpred27_Css3
    public final void synpred27_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:20: ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term
        {
        dbg.location(909,21);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )
        int alt344=3;
        try { dbg.enterSubRule(344);
        try { dbg.enterDecision(344, decisionCanBacktrack[344]);

        try {
            isCyclicDecision = true;
            alt344 = dfa344.predict(input);
        }
        catch (NoViableAltException nvae) {
            dbg.recognitionException(nvae);
            throw nvae;
        }
        } finally {dbg.exitDecision(344);}

        switch (alt344) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:23: ws
                {
                dbg.location(909,23);
                pushFollow(FOLLOW_ws_in_synpred27_Css35103);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                dbg.enterAlt(2);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:28: ( ( ws )? SOLIDUS ( ws )? )
                {
                dbg.location(909,28);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:28: ( ( ws )? SOLIDUS ( ws )? )
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:29: ( ws )? SOLIDUS ( ws )?
                {
                dbg.location(909,29);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:29: ( ws )?
                int alt342=2;
                try { dbg.enterSubRule(342);
                try { dbg.enterDecision(342, decisionCanBacktrack[342]);

                int LA342_0 = input.LA(1);

                if ( (LA342_0==WS||(LA342_0>=NL && LA342_0<=COMMENT)) ) {
                    alt342=1;
                }
                } finally {dbg.exitDecision(342);}

                switch (alt342) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:29: ws
                        {
                        dbg.location(909,29);
                        pushFollow(FOLLOW_ws_in_synpred27_Css35108);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(342);}

                dbg.location(909,33);
                match(input,SOLIDUS,FOLLOW_SOLIDUS_in_synpred27_Css35111); if (state.failed) return ;
                dbg.location(909,41);
                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:41: ( ws )?
                int alt343=2;
                try { dbg.enterSubRule(343);
                try { dbg.enterDecision(343, decisionCanBacktrack[343]);

                int LA343_0 = input.LA(1);

                if ( (LA343_0==WS||(LA343_0>=NL && LA343_0<=COMMENT)) ) {
                    alt343=1;
                }
                } finally {dbg.exitDecision(343);}

                switch (alt343) {
                    case 1 :
                        dbg.enterAlt(1);

                        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:41: ws
                        {
                        dbg.location(909,41);
                        pushFollow(FOLLOW_ws_in_synpred27_Css35113);
                        ws();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }
                } finally {dbg.exitSubRule(343);}


                }


                }
                break;
            case 3 :
                dbg.enterAlt(3);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:909:61: 
                {
                }
                break;

        }
        } finally {dbg.exitSubRule(344);}

        dbg.location(909,63);
        pushFollow(FOLLOW_term_in_synpred27_Css35122);
        term();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_Css3

    // $ANTLR start synpred28_Css3
    public final void synpred28_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:6: ( ( ws )? COMMA ( ws )? cp_expression )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:7: ( ws )? COMMA ( ws )? cp_expression
        {
        dbg.location(943,7);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:7: ( ws )?
        int alt345=2;
        try { dbg.enterSubRule(345);
        try { dbg.enterDecision(345, decisionCanBacktrack[345]);

        int LA345_0 = input.LA(1);

        if ( (LA345_0==WS||(LA345_0>=NL && LA345_0<=COMMENT)) ) {
            alt345=1;
        }
        } finally {dbg.exitDecision(345);}

        switch (alt345) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:7: ws
                {
                dbg.location(943,7);
                pushFollow(FOLLOW_ws_in_synpred28_Css35399);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(345);}

        dbg.location(943,11);
        match(input,COMMA,FOLLOW_COMMA_in_synpred28_Css35402); if (state.failed) return ;
        dbg.location(943,17);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:17: ( ws )?
        int alt346=2;
        try { dbg.enterSubRule(346);
        try { dbg.enterDecision(346, decisionCanBacktrack[346]);

        int LA346_0 = input.LA(1);

        if ( (LA346_0==WS||(LA346_0>=NL && LA346_0<=COMMENT)) ) {
            alt346=1;
        }
        } finally {dbg.exitDecision(346);}

        switch (alt346) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:943:17: ws
                {
                dbg.location(943,17);
                pushFollow(FOLLOW_ws_in_synpred28_Css35404);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(346);}

        dbg.location(943,21);
        pushFollow(FOLLOW_cp_expression_in_synpred28_Css35407);
        cp_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred28_Css3

    // $ANTLR start synpred29_Css3
    public final void synpred29_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:960:9: ( ( ws )? cp_expression_operator )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:960:10: ( ws )? cp_expression_operator
        {
        dbg.location(960,10);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:960:10: ( ws )?
        int alt347=2;
        try { dbg.enterSubRule(347);
        try { dbg.enterDecision(347, decisionCanBacktrack[347]);

        int LA347_0 = input.LA(1);

        if ( (LA347_0==WS||(LA347_0>=NL && LA347_0<=COMMENT)) ) {
            alt347=1;
        }
        } finally {dbg.exitDecision(347);}

        switch (alt347) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:960:10: ws
                {
                dbg.location(960,10);
                pushFollow(FOLLOW_ws_in_synpred29_Css35474);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(347);}

        dbg.location(960,14);
        pushFollow(FOLLOW_cp_expression_operator_in_synpred29_Css35477);
        cp_expression_operator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_Css3

    // $ANTLR start synpred30_Css3
    public final void synpred30_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:11: ( ( ws )? cp_expression_atom )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:12: ( ws )? cp_expression_atom
        {
        dbg.location(961,12);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:12: ( ws )?
        int alt348=2;
        try { dbg.enterSubRule(348);
        try { dbg.enterDecision(348, decisionCanBacktrack[348]);

        int LA348_0 = input.LA(1);

        if ( (LA348_0==WS||(LA348_0>=NL && LA348_0<=COMMENT)) ) {
            alt348=1;
        }
        } finally {dbg.exitDecision(348);}

        switch (alt348) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:961:12: ws
                {
                dbg.location(961,12);
                pushFollow(FOLLOW_ws_in_synpred30_Css35504);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(348);}

        dbg.location(961,16);
        pushFollow(FOLLOW_cp_expression_atom_in_synpred30_Css35507);
        cp_expression_atom();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_Css3

    // $ANTLR start synpred31_Css3
    public final void synpred31_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:974:13: ( cp_math_expression )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:974:14: cp_math_expression
        {
        dbg.location(974,14);
        pushFollow(FOLLOW_cp_math_expression_in_synpred31_Css35635);
        cp_math_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_Css3

    // $ANTLR start synpred32_Css3
    public final void synpred32_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1001:13: ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1001:14: ( ws )? ( PLUS | MINUS | STAR | SOLIDUS )
        {
        dbg.location(1001,14);
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1001:14: ( ws )?
        int alt349=2;
        try { dbg.enterSubRule(349);
        try { dbg.enterDecision(349, decisionCanBacktrack[349]);

        int LA349_0 = input.LA(1);

        if ( (LA349_0==WS||(LA349_0>=NL && LA349_0<=COMMENT)) ) {
            alt349=1;
        }
        } finally {dbg.exitDecision(349);}

        switch (alt349) {
            case 1 :
                dbg.enterAlt(1);

                // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1001:14: ws
                {
                dbg.location(1001,14);
                pushFollow(FOLLOW_ws_in_synpred32_Css35766);
                ws();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(349);}

        dbg.location(1001,18);
        if ( (input.LA(1)>=SOLIDUS && input.LA(1)<=PLUS)||input.LA(1)==STAR ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            dbg.recognitionException(mse);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred32_Css3

    // $ANTLR start synpred33_Css3
    public final void synpred33_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:13: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1132:14: sass_interpolation_expression_var
        {
        dbg.location(1132,14);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred33_Css36801);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred33_Css3

    // $ANTLR start synpred34_Css3
    public final void synpred34_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1139:17: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1139:18: sass_interpolation_expression_var
        {
        dbg.location(1139,18);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred34_Css36940);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred34_Css3

    // $ANTLR start synpred35_Css3
    public final void synpred35_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:13: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1150:14: sass_interpolation_expression_var
        {
        dbg.location(1150,14);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred35_Css37088);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_Css3

    // $ANTLR start synpred36_Css3
    public final void synpred36_Css3_fragment() throws RecognitionException {   
        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1157:17: ( sass_interpolation_expression_var )
        dbg.enterAlt(1);

        // /Volumes/Mercurial/web-main/css.lib/src/org/netbeans/modules/css/lib/Css3.g:1157:18: sass_interpolation_expression_var
        {
        dbg.location(1157,18);
        pushFollow(FOLLOW_sass_interpolation_expression_var_in_synpred36_Css37206);
        sass_interpolation_expression_var();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_Css3

    // Delegated rules

    public final boolean synpred26_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred26_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred5_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred36_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred10_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred11_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred20_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred16_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred18_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred35_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred29_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred14_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred25_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred8_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred15_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred24_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred21_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred9_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred34_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred33_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred12_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred4_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred17_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred7_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred27_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred30_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred23_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred6_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred3_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred2_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred28_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred13_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred1_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred32_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred31_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred19_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_Css3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred22_Css3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA4 dfa4 = new DFA4(this);
    protected DFA17 dfa17 = new DFA17(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA24 dfa24 = new DFA24(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA33 dfa33 = new DFA33(this);
    protected DFA37 dfa37 = new DFA37(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA59 dfa59 = new DFA59(this);
    protected DFA63 dfa63 = new DFA63(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA160 dfa160 = new DFA160(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA166 dfa166 = new DFA166(this);
    protected DFA165 dfa165 = new DFA165(this);
    protected DFA169 dfa169 = new DFA169(this);
    protected DFA177 dfa177 = new DFA177(this);
    protected DFA181 dfa181 = new DFA181(this);
    protected DFA188 dfa188 = new DFA188(this);
    protected DFA187 dfa187 = new DFA187(this);
    protected DFA186 dfa186 = new DFA186(this);
    protected DFA195 dfa195 = new DFA195(this);
    protected DFA200 dfa200 = new DFA200(this);
    protected DFA204 dfa204 = new DFA204(this);
    protected DFA209 dfa209 = new DFA209(this);
    protected DFA213 dfa213 = new DFA213(this);
    protected DFA218 dfa218 = new DFA218(this);
    protected DFA223 dfa223 = new DFA223(this);
    protected DFA227 dfa227 = new DFA227(this);
    protected DFA233 dfa233 = new DFA233(this);
    protected DFA237 dfa237 = new DFA237(this);
    protected DFA239 dfa239 = new DFA239(this);
    protected DFA248 dfa248 = new DFA248(this);
    protected DFA251 dfa251 = new DFA251(this);
    protected DFA277 dfa277 = new DFA277(this);
    protected DFA281 dfa281 = new DFA281(this);
    protected DFA288 dfa288 = new DFA288(this);
    protected DFA292 dfa292 = new DFA292(this);
    protected DFA299 dfa299 = new DFA299(this);
    protected DFA298 dfa298 = new DFA298(this);
    protected DFA319 dfa319 = new DFA319(this);
    protected DFA339 dfa339 = new DFA339(this);
    protected DFA344 dfa344 = new DFA344(this);
    static final String DFA4_eotS =
        "\43\uffff";
    static final String DFA4_eofS =
        "\1\2\42\uffff";
    static final String DFA4_minS =
        "\1\4\1\0\41\uffff";
    static final String DFA4_maxS =
        "\1\152\1\0\41\uffff";
    static final String DFA4_acceptS =
        "\2\uffff\1\2\37\uffff\1\1";
    static final String DFA4_specialS =
        "\1\uffff\1\0\41\uffff}>";
    static final String[] DFA4_transitionS = {
            "\3\2\3\uffff\1\1\2\2\5\uffff\1\2\2\uffff\2\2\1\uffff\1\2\3\uffff"+
            "\1\2\1\uffff\3\2\21\uffff\1\2\1\uffff\1\2\1\uffff\10\2\1\uffff"+
            "\1\2\7\uffff\1\2\24\uffff\2\2\5\uffff\3\2\1\uffff\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "325:9: ( imports )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))),""))) ) {s = 34;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA17_eotS =
        "\43\uffff";
    static final String DFA17_eofS =
        "\1\1\42\uffff";
    static final String DFA17_minS =
        "\1\4\30\uffff\1\0\11\uffff";
    static final String DFA17_maxS =
        "\1\152\30\uffff\1\0\11\uffff";
    static final String DFA17_acceptS =
        "\1\uffff\1\2\40\uffff\1\1";
    static final String DFA17_specialS =
        "\31\uffff\1\0\11\uffff}>";
    static final String[] DFA17_transitionS = {
            "\3\1\3\uffff\1\31\2\1\5\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3"+
            "\uffff\1\1\1\uffff\3\1\21\uffff\1\1\1\uffff\1\1\1\uffff\10\1"+
            "\1\uffff\1\1\7\uffff\1\1\24\uffff\2\1\5\uffff\3\1\1\uffff\4"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA17_eot = DFA.unpackEncodedString(DFA17_eotS);
    static final short[] DFA17_eof = DFA.unpackEncodedString(DFA17_eofS);
    static final char[] DFA17_min = DFA.unpackEncodedStringToUnsignedChars(DFA17_minS);
    static final char[] DFA17_max = DFA.unpackEncodedStringToUnsignedChars(DFA17_maxS);
    static final short[] DFA17_accept = DFA.unpackEncodedString(DFA17_acceptS);
    static final short[] DFA17_special = DFA.unpackEncodedString(DFA17_specialS);
    static final short[][] DFA17_transition;

    static {
        int numStates = DFA17_transitionS.length;
        DFA17_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA17_transition[i] = DFA.unpackEncodedString(DFA17_transitionS[i]);
        }
    }

    class DFA17 extends DFA {

        public DFA17(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = DFA17_eot;
            this.eof = DFA17_eof;
            this.min = DFA17_min;
            this.max = DFA17_max;
            this.accept = DFA17_accept;
            this.special = DFA17_special;
            this.transition = DFA17_transition;
        }
        public String getDescription() {
            return "()+ loopback of 358:2: ( importItem ( ws )? SEMI ( ws )? )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA17_25 = input.LA(1);

                         
                        int index17_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))),""))) ) {s = 34;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 1;}

                         
                        input.seek(index17_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 17, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA27_eotS =
        "\7\uffff";
    static final String DFA27_eofS =
        "\7\uffff";
    static final String DFA27_minS =
        "\1\12\2\7\2\0\2\uffff";
    static final String DFA27_maxS =
        "\1\12\2\124\2\0\2\uffff";
    static final String DFA27_acceptS =
        "\5\uffff\1\1\1\2";
    static final String DFA27_specialS =
        "\3\uffff\1\1\1\0\2\uffff}>";
    static final String[] DFA27_transitionS = {
            "\1\1",
            "\2\3\16\uffff\1\2\73\uffff\2\2",
            "\2\4\16\uffff\1\2\73\uffff\2\2",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA27_eot = DFA.unpackEncodedString(DFA27_eotS);
    static final short[] DFA27_eof = DFA.unpackEncodedString(DFA27_eofS);
    static final char[] DFA27_min = DFA.unpackEncodedStringToUnsignedChars(DFA27_minS);
    static final char[] DFA27_max = DFA.unpackEncodedStringToUnsignedChars(DFA27_maxS);
    static final short[] DFA27_accept = DFA.unpackEncodedString(DFA27_acceptS);
    static final short[] DFA27_special = DFA.unpackEncodedString(DFA27_specialS);
    static final short[][] DFA27_transition;

    static {
        int numStates = DFA27_transitionS.length;
        DFA27_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA27_transition[i] = DFA.unpackEncodedString(DFA27_transitionS[i]);
        }
    }

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = DFA27_eot;
            this.eof = DFA27_eof;
            this.min = DFA27_min;
            this.max = DFA27_max;
            this.accept = DFA27_accept;
            this.special = DFA27_special;
            this.transition = DFA27_transition;
        }
        public String getDescription() {
            return "361:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? | {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA27_4 = input.LA(1);

                         
                        int index27_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isScssSource(),"isScssSource()"),""))) ) {s = 5;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 6;}

                         
                        input.seek(index27_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA27_3 = input.LA(1);

                         
                        int index27_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isScssSource(),"isScssSource()"),""))) ) {s = 5;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 6;}

                         
                        input.seek(index27_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 27, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA20_eotS =
        "\51\uffff";
    static final String DFA20_eofS =
        "\1\7\50\uffff";
    static final String DFA20_minS =
        "\1\5\1\0\1\uffff\3\0\43\uffff";
    static final String DFA20_maxS =
        "\1\154\1\0\1\uffff\3\0\43\uffff";
    static final String DFA20_acceptS =
        "\2\uffff\1\1\3\uffff\1\1\1\2\41\uffff";
    static final String DFA20_specialS =
        "\1\0\1\1\1\uffff\1\2\1\3\1\4\43\uffff}>";
    static final String[] DFA20_transitionS = {
            "\1\7\1\3\3\uffff\3\7\1\uffff\1\7\1\uffff\2\2\1\4\1\6\1\uffff"+
            "\2\7\1\1\1\7\3\uffff\1\7\1\uffff\3\7\21\uffff\1\7\1\uffff\1"+
            "\7\1\uffff\1\5\7\7\1\uffff\1\7\7\uffff\1\7\13\uffff\2\1\7\uffff"+
            "\2\7\3\uffff\1\7\1\uffff\3\7\1\uffff\6\7",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "363:43: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA20_0 = input.LA(1);

                         
                        int index20_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA20_0==WS||(LA20_0>=NL && LA20_0<=COMMENT)) ) {s = 1;}

                        else if ( ((LA20_0>=ONLY && LA20_0<=NOT)) && (synpred1_Css3())) {s = 2;}

                        else if ( (LA20_0==IDENT) ) {s = 3;}

                        else if ( (LA20_0==GEN) ) {s = 4;}

                        else if ( (LA20_0==HASH_SYMBOL) ) {s = 5;}

                        else if ( (LA20_0==LPAREN) && (synpred1_Css3())) {s = 6;}

                        else if ( (LA20_0==EOF||LA20_0==SEMI||(LA20_0>=IMPORT_SYM && LA20_0<=MEDIA_SYM)||LA20_0==RBRACE||(LA20_0>=COLON && LA20_0<=AT_IDENT)||LA20_0==MOZ_DOCUMENT_SYM||LA20_0==WEBKIT_KEYFRAMES_SYM||(LA20_0>=PAGE_SYM && LA20_0<=FONT_FACE_SYM)||LA20_0==MINUS||LA20_0==GREATER||(LA20_0>=HASH && LA20_0<=PIPE)||LA20_0==LESS_AND||LA20_0==SASS_VAR||(LA20_0>=SASS_MIXIN && LA20_0<=SASS_INCLUDE)||LA20_0==SASS_EXTEND||(LA20_0>=SASS_DEBUG && LA20_0<=SASS_IF)||(LA20_0>=SASS_FOR && LA20_0<=SASS_CONTENT)) ) {s = 7;}

                         
                        input.seek(index20_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA20_1 = input.LA(1);

                         
                        int index20_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA20_3 = input.LA(1);

                         
                        int index20_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA20_4 = input.LA(1);

                         
                        int index20_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA20_5 = input.LA(1);

                         
                        int index20_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred1_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA24_eotS =
        "\6\uffff";
    static final String DFA24_eofS =
        "\2\2\4\uffff";
    static final String DFA24_minS =
        "\2\5\1\uffff\2\6\1\uffff";
    static final String DFA24_maxS =
        "\2\154\1\uffff\2\124\1\uffff";
    static final String DFA24_acceptS =
        "\2\uffff\1\2\2\uffff\1\1";
    static final String DFA24_specialS =
        "\6\uffff}>";
    static final String[] DFA24_transitionS = {
            "\2\2\3\uffff\1\2\1\3\1\2\1\uffff\1\2\1\uffff\4\2\1\uffff\2\2"+
            "\1\1\1\2\3\uffff\1\2\1\uffff\3\2\21\uffff\1\2\1\uffff\1\2\1"+
            "\uffff\10\2\1\uffff\1\2\7\uffff\1\2\13\uffff\2\1\7\uffff\2\2"+
            "\3\uffff\1\2\1\uffff\3\2\1\uffff\6\2",
            "\2\2\3\uffff\1\2\1\3\1\2\1\uffff\1\2\1\uffff\4\2\1\uffff\2"+
            "\2\1\1\1\2\3\uffff\1\2\1\uffff\3\2\21\uffff\1\2\1\uffff\1\2"+
            "\1\uffff\10\2\1\uffff\1\2\7\uffff\1\2\13\uffff\2\1\7\uffff\2"+
            "\2\3\uffff\1\2\1\uffff\3\2\1\uffff\6\2",
            "",
            "\1\2\2\5\2\uffff\1\2\1\uffff\1\2\7\uffff\1\2\1\uffff\1\4\32"+
            "\uffff\1\2\1\uffff\1\2\1\uffff\3\2\3\uffff\1\2\2\uffff\1\2\23"+
            "\uffff\2\4",
            "\1\2\2\5\2\uffff\1\2\1\uffff\1\2\7\uffff\1\2\1\uffff\1\4\32"+
            "\uffff\1\2\1\uffff\1\2\1\uffff\3\2\3\uffff\1\2\2\uffff\1\2\23"+
            "\uffff\2\4",
            ""
    };

    static final short[] DFA24_eot = DFA.unpackEncodedString(DFA24_eotS);
    static final short[] DFA24_eof = DFA.unpackEncodedString(DFA24_eofS);
    static final char[] DFA24_min = DFA.unpackEncodedStringToUnsignedChars(DFA24_minS);
    static final char[] DFA24_max = DFA.unpackEncodedStringToUnsignedChars(DFA24_maxS);
    static final short[] DFA24_accept = DFA.unpackEncodedString(DFA24_acceptS);
    static final short[] DFA24_special = DFA.unpackEncodedString(DFA24_specialS);
    static final short[][] DFA24_transition;

    static {
        int numStates = DFA24_transitionS.length;
        DFA24_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA24_transition[i] = DFA.unpackEncodedString(DFA24_transitionS[i]);
        }
    }

    class DFA24 extends DFA {

        public DFA24(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 24;
            this.eot = DFA24_eot;
            this.eof = DFA24_eof;
            this.min = DFA24_min;
            this.max = DFA24_max;
            this.accept = DFA24_accept;
            this.special = DFA24_special;
            this.transition = DFA24_transition;
        }
        public String getDescription() {
            return "()* loopback of 366:61: ( ( ws )? COMMA ( ws )? resourceIdentifier )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA26_eotS =
        "\51\uffff";
    static final String DFA26_eofS =
        "\1\7\50\uffff";
    static final String DFA26_minS =
        "\1\5\1\0\1\uffff\3\0\43\uffff";
    static final String DFA26_maxS =
        "\1\154\1\0\1\uffff\3\0\43\uffff";
    static final String DFA26_acceptS =
        "\2\uffff\1\1\3\uffff\1\1\1\2\41\uffff";
    static final String DFA26_specialS =
        "\1\0\1\1\1\uffff\1\2\1\3\1\4\43\uffff}>";
    static final String[] DFA26_transitionS = {
            "\1\7\1\3\3\uffff\3\7\1\uffff\1\7\1\uffff\2\2\1\4\1\6\1\uffff"+
            "\2\7\1\1\1\7\3\uffff\1\7\1\uffff\3\7\21\uffff\1\7\1\uffff\1"+
            "\7\1\uffff\1\5\7\7\1\uffff\1\7\7\uffff\1\7\13\uffff\2\1\7\uffff"+
            "\2\7\3\uffff\1\7\1\uffff\3\7\1\uffff\6\7",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "366:97: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_0 = input.LA(1);

                         
                        int index26_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_0==WS||(LA26_0>=NL && LA26_0<=COMMENT)) ) {s = 1;}

                        else if ( ((LA26_0>=ONLY && LA26_0<=NOT)) && (synpred2_Css3())) {s = 2;}

                        else if ( (LA26_0==IDENT) ) {s = 3;}

                        else if ( (LA26_0==GEN) ) {s = 4;}

                        else if ( (LA26_0==HASH_SYMBOL) ) {s = 5;}

                        else if ( (LA26_0==LPAREN) && (synpred2_Css3())) {s = 6;}

                        else if ( (LA26_0==EOF||LA26_0==SEMI||(LA26_0>=IMPORT_SYM && LA26_0<=MEDIA_SYM)||LA26_0==RBRACE||(LA26_0>=COLON && LA26_0<=AT_IDENT)||LA26_0==MOZ_DOCUMENT_SYM||LA26_0==WEBKIT_KEYFRAMES_SYM||(LA26_0>=PAGE_SYM && LA26_0<=FONT_FACE_SYM)||LA26_0==MINUS||LA26_0==GREATER||(LA26_0>=HASH && LA26_0<=PIPE)||LA26_0==LESS_AND||LA26_0==SASS_VAR||(LA26_0>=SASS_MIXIN && LA26_0<=SASS_INCLUDE)||LA26_0==SASS_EXTEND||(LA26_0>=SASS_DEBUG && LA26_0<=SASS_IF)||(LA26_0>=SASS_FOR && LA26_0<=SASS_CONTENT)) ) {s = 7;}

                         
                        input.seek(index26_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA26_1 = input.LA(1);

                         
                        int index26_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA26_3 = input.LA(1);

                         
                        int index26_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA26_4 = input.LA(1);

                         
                        int index26_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Css3()) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA26_5 = input.LA(1);

                         
                        int index26_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA33_eotS =
        "\5\uffff";
    static final String DFA33_eofS =
        "\5\uffff";
    static final String DFA33_minS =
        "\2\5\1\0\2\uffff";
    static final String DFA33_maxS =
        "\2\154\1\0\2\uffff";
    static final String DFA33_acceptS =
        "\3\uffff\1\2\1\1";
    static final String DFA33_specialS =
        "\2\uffff\1\0\2\uffff}>";
    static final String[] DFA33_transitionS = {
            "\1\2\1\3\4\uffff\2\3\1\uffff\1\3\3\uffff\1\3\2\uffff\2\3\1\1"+
            "\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\21\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\10\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff"+
            "\2\3\3\uffff\1\3\1\uffff\3\3\1\uffff\3\3\2\uffff\1\3",
            "\1\2\1\3\4\uffff\2\3\1\uffff\1\3\3\uffff\1\3\2\uffff\2\3\1"+
            "\1\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\21\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\10\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff"+
            "\2\3\3\uffff\1\3\1\uffff\3\3\1\uffff\3\3\2\uffff\1\3",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
    static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
    static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
    static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
    static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
    static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
    static final short[][] DFA33_transition;

    static {
        int numStates = DFA33_transitionS.length;
        DFA33_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
        }
    }

    class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = DFA33_eot;
            this.eof = DFA33_eof;
            this.min = DFA33_min;
            this.max = DFA33_max;
            this.accept = DFA33_accept;
            this.special = DFA33_special;
            this.transition = DFA33_transition;
        }
        public String getDescription() {
            return "381:26: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA33_2 = input.LA(1);

                         
                        int index33_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_Css3()) ) {s = 4;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index33_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 33, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA37_eotS =
        "\40\uffff";
    static final String DFA37_eofS =
        "\40\uffff";
    static final String DFA37_minS =
        "\1\6\1\0\2\uffff\6\0\14\uffff\1\0\7\uffff\1\0\1\uffff";
    static final String DFA37_maxS =
        "\1\154\1\0\2\uffff\6\0\14\uffff\1\0\7\uffff\1\0\1\uffff";
    static final String DFA37_acceptS =
        "\2\uffff\1\1\1\2\6\uffff\1\3\1\4\1\5\1\6\3\uffff\1\7\1\10\7\uffff"+
        "\1\11\1\12\1\13\2\uffff\1\14";
    static final String DFA37_specialS =
        "\1\0\1\1\2\uffff\1\2\1\3\1\4\1\5\1\6\1\7\14\uffff\1\10\7\uffff\1"+
        "\11\1\uffff}>";
    static final String[] DFA37_transitionS = {
            "\1\6\4\uffff\1\22\1\36\5\uffff\1\10\2\uffff\1\22\1\11\1\uffff"+
            "\1\34\3\uffff\1\34\1\uffff\1\32\1\uffff\1\33\21\uffff\1\26\1"+
            "\uffff\1\22\1\uffff\1\5\1\7\1\1\3\22\1\4\1\22\1\uffff\1\22\7"+
            "\uffff\1\12\24\uffff\1\2\1\3\3\uffff\1\13\1\uffff\2\14\1\15"+
            "\1\uffff\3\15\2\uffff\1\21",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA37_eot = DFA.unpackEncodedString(DFA37_eotS);
    static final short[] DFA37_eof = DFA.unpackEncodedString(DFA37_eofS);
    static final char[] DFA37_min = DFA.unpackEncodedStringToUnsignedChars(DFA37_minS);
    static final char[] DFA37_max = DFA.unpackEncodedStringToUnsignedChars(DFA37_maxS);
    static final short[] DFA37_accept = DFA.unpackEncodedString(DFA37_acceptS);
    static final short[] DFA37_special = DFA.unpackEncodedString(DFA37_specialS);
    static final short[][] DFA37_transition;

    static {
        int numStates = DFA37_transitionS.length;
        DFA37_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA37_transition[i] = DFA.unpackEncodedString(DFA37_transitionS[i]);
        }
    }

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = DFA37_eot;
            this.eof = DFA37_eof;
            this.min = DFA37_min;
            this.max = DFA37_max;
            this.accept = DFA37_accept;
            this.special = DFA37_special;
            this.transition = DFA37_transition;
        }
        public String getDescription() {
            return "387:1: mediaBodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ LBRACE )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call | ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI | sass_declaration_interpolation_expression COLON )=> propertyDeclaration | {...}? sass_extend | {...}? sass_debug | {...}? sass_control | {...}? sass_content | rule | page | fontFace | vendorAtRule | media );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA37_0 = input.LA(1);

                         
                        int index37_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA37_0==DOT) ) {s = 1;}

                        else if ( (LA37_0==SASS_MIXIN) && (synpred4_Css3())) {s = 2;}

                        else if ( (LA37_0==SASS_INCLUDE) && (synpred5_Css3())) {s = 3;}

                        else if ( (LA37_0==STAR) ) {s = 4;}

                        else if ( (LA37_0==HASH_SYMBOL) ) {s = 5;}

                        else if ( (LA37_0==IDENT) ) {s = 6;}

                        else if ( (LA37_0==HASH) ) {s = 7;}

                        else if ( (LA37_0==GEN) ) {s = 8;}

                        else if ( (LA37_0==AT_IDENT) ) {s = 9;}

                        else if ( (LA37_0==SASS_VAR) && (synpred6_Css3())) {s = 10;}

                        else if ( (LA37_0==SASS_EXTEND) ) {s = 11;}

                        else if ( ((LA37_0>=SASS_DEBUG && LA37_0<=SASS_WARN)) ) {s = 12;}

                        else if ( (LA37_0==SASS_IF||(LA37_0>=SASS_FOR && LA37_0<=SASS_WHILE)) ) {s = 13;}

                        else if ( (LA37_0==SASS_CONTENT) ) {s = 17;}

                        else if ( (LA37_0==COMMA||LA37_0==COLON||LA37_0==GREATER||(LA37_0>=LBRACKET && LA37_0<=SASS_EXTEND_ONLY_SELECTOR)||LA37_0==PIPE||LA37_0==LESS_AND) ) {s = 18;}

                        else if ( (LA37_0==MINUS) ) {s = 22;}

                        else if ( (LA37_0==PAGE_SYM) ) {s = 26;}

                        else if ( (LA37_0==FONT_FACE_SYM) ) {s = 27;}

                        else if ( (LA37_0==MOZ_DOCUMENT_SYM||LA37_0==WEBKIT_KEYFRAMES_SYM) ) {s = 28;}

                        else if ( (LA37_0==MEDIA_SYM) ) {s = 30;}

                         
                        input.seek(index37_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA37_1 = input.LA(1);

                         
                        int index37_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred4_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 2;}

                        else if ( ((synpred5_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 3;}

                        else if ( (((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred6_Css3())) ) {s = 10;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index37_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA37_4 = input.LA(1);

                         
                        int index37_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred6_Css3())) ) {s = 10;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index37_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA37_5 = input.LA(1);

                         
                        int index37_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred6_Css3())) ) {s = 10;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index37_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA37_6 = input.LA(1);

                         
                        int index37_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred6_Css3())) ) {s = 10;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index37_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA37_7 = input.LA(1);

                         
                        int index37_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred6_Css3())) ) {s = 10;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index37_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA37_8 = input.LA(1);

                         
                        int index37_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred6_Css3())) ) {s = 10;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index37_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA37_9 = input.LA(1);

                         
                        int index37_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 10;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index37_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA37_22 = input.LA(1);

                         
                        int index37_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred6_Css3())) ) {s = 10;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index37_22);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA37_30 = input.LA(1);

                         
                        int index37_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred6_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 10;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index37_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 37, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA40_eotS =
        "\52\uffff";
    static final String DFA40_eofS =
        "\1\2\51\uffff";
    static final String DFA40_minS =
        "\1\5\1\0\41\uffff\1\0\6\uffff";
    static final String DFA40_maxS =
        "\1\154\1\0\41\uffff\1\0\6\uffff";
    static final String DFA40_acceptS =
        "\2\uffff\1\2\46\uffff\1\1";
    static final String DFA40_specialS =
        "\1\uffff\1\0\41\uffff\1\1\6\uffff}>";
    static final String[] DFA40_transitionS = {
            "\2\2\3\uffff\1\2\1\43\3\2\3\uffff\1\2\2\uffff\2\2\1\1\1\2\3"+
            "\uffff\1\2\1\uffff\3\2\21\uffff\1\2\1\uffff\1\2\1\uffff\10\2"+
            "\1\uffff\1\2\7\uffff\1\2\13\uffff\2\1\7\uffff\2\2\3\uffff\1"+
            "\2\1\uffff\3\2\1\uffff\6\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "()* loopback of 405:15: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA40_1 = input.LA(1);

                         
                        int index40_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_Css3()) ) {s = 41;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index40_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA40_35 = input.LA(1);

                         
                        int index40_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_Css3()) ) {s = 41;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index40_35);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA45_eotS =
        "\4\uffff";
    static final String DFA45_eofS =
        "\2\2\2\uffff";
    static final String DFA45_minS =
        "\2\5\2\uffff";
    static final String DFA45_maxS =
        "\2\154\2\uffff";
    static final String DFA45_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA45_specialS =
        "\4\uffff}>";
    static final String[] DFA45_transitionS = {
            "\2\2\3\uffff\5\2\1\3\2\uffff\1\2\2\uffff\2\2\1\1\1\2\3\uffff"+
            "\1\2\1\uffff\3\2\21\uffff\1\2\1\uffff\1\2\1\uffff\10\2\1\uffff"+
            "\1\2\7\uffff\1\2\13\uffff\2\1\7\uffff\2\2\3\uffff\1\2\1\uffff"+
            "\3\2\1\uffff\6\2",
            "\2\2\3\uffff\5\2\1\3\2\uffff\1\2\2\uffff\2\2\1\1\1\2\3\uffff"+
            "\1\2\1\uffff\3\2\21\uffff\1\2\1\uffff\1\2\1\uffff\10\2\1\uffff"+
            "\1\2\7\uffff\1\2\13\uffff\2\1\7\uffff\2\2\3\uffff\1\2\1\uffff"+
            "\3\2\1\uffff\6\2",
            "",
            ""
    };

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "()* loopback of 409:42: ( ( ws )? AND ( ws )? mediaExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA48_eotS =
        "\4\uffff";
    static final String DFA48_eofS =
        "\2\2\2\uffff";
    static final String DFA48_minS =
        "\2\5\2\uffff";
    static final String DFA48_maxS =
        "\2\154\2\uffff";
    static final String DFA48_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA48_specialS =
        "\4\uffff}>";
    static final String[] DFA48_transitionS = {
            "\2\2\3\uffff\5\2\1\3\2\uffff\1\2\2\uffff\2\2\1\1\1\2\3\uffff"+
            "\1\2\1\uffff\3\2\21\uffff\1\2\1\uffff\1\2\1\uffff\10\2\1\uffff"+
            "\1\2\7\uffff\1\2\13\uffff\2\1\7\uffff\2\2\3\uffff\1\2\1\uffff"+
            "\3\2\1\uffff\6\2",
            "\2\2\3\uffff\5\2\1\3\2\uffff\1\2\2\uffff\2\2\1\1\1\2\3\uffff"+
            "\1\2\1\uffff\3\2\21\uffff\1\2\1\uffff\1\2\1\uffff\10\2\1\uffff"+
            "\1\2\7\uffff\1\2\13\uffff\2\1\7\uffff\2\2\3\uffff\1\2\1\uffff"+
            "\3\2\1\uffff\6\2",
            "",
            ""
    };

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "()* loopback of 410:20: ( ( ws )? AND ( ws )? mediaExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA52_eotS =
        "\4\uffff";
    static final String DFA52_eofS =
        "\4\uffff";
    static final String DFA52_minS =
        "\2\24\2\uffff";
    static final String DFA52_maxS =
        "\2\124\2\uffff";
    static final String DFA52_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA52_specialS =
        "\4\uffff}>";
    static final String[] DFA52_transitionS = {
            "\1\3\1\2\1\uffff\1\1\73\uffff\2\1",
            "\1\3\1\2\1\uffff\1\1\73\uffff\2\1",
            "",
            ""
    };

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "423:29: ( mediaFeatureValue )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA59_eotS =
        "\5\uffff";
    static final String DFA59_eofS =
        "\2\3\3\uffff";
    static final String DFA59_minS =
        "\2\5\1\0\2\uffff";
    static final String DFA59_maxS =
        "\2\152\1\0\2\uffff";
    static final String DFA59_acceptS =
        "\3\uffff\1\2\1\1";
    static final String DFA59_specialS =
        "\2\uffff\1\0\2\uffff}>";
    static final String[] DFA59_transitionS = {
            "\1\2\1\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\2\uffff\2\3\1\1"+
            "\1\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\10\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff\2\3\5\uffff"+
            "\3\3\1\uffff\4\3",
            "\1\2\1\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\2\uffff\2\3\1"+
            "\1\1\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\10\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff\2\3\5\uffff"+
            "\3\3\1\uffff\4\3",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA59_eot = DFA.unpackEncodedString(DFA59_eotS);
    static final short[] DFA59_eof = DFA.unpackEncodedString(DFA59_eofS);
    static final char[] DFA59_min = DFA.unpackEncodedStringToUnsignedChars(DFA59_minS);
    static final char[] DFA59_max = DFA.unpackEncodedStringToUnsignedChars(DFA59_maxS);
    static final short[] DFA59_accept = DFA.unpackEncodedString(DFA59_acceptS);
    static final short[] DFA59_special = DFA.unpackEncodedString(DFA59_specialS);
    static final short[][] DFA59_transition;

    static {
        int numStates = DFA59_transitionS.length;
        DFA59_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA59_transition[i] = DFA.unpackEncodedString(DFA59_transitionS[i]);
        }
    }

    class DFA59 extends DFA {

        public DFA59(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 59;
            this.eot = DFA59_eot;
            this.eof = DFA59_eof;
            this.min = DFA59_min;
            this.max = DFA59_max;
            this.accept = DFA59_accept;
            this.special = DFA59_special;
            this.transition = DFA59_transition;
        }
        public String getDescription() {
            return "438:21: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA59_2 = input.LA(1);

                         
                        int index59_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_Css3()) ) {s = 4;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index59_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 59, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA63_eotS =
        "\37\uffff";
    static final String DFA63_eofS =
        "\37\uffff";
    static final String DFA63_minS =
        "\1\6\1\0\16\uffff\1\0\5\uffff\1\0\10\uffff";
    static final String DFA63_maxS =
        "\1\152\1\0\16\uffff\1\0\5\uffff\1\0\10\uffff";
    static final String DFA63_acceptS =
        "\2\uffff\1\1\1\2\1\3\14\uffff\1\4\5\uffff\1\5\1\6\1\7\1\10\3\uffff"+
        "\1\11";
    static final String DFA63_specialS =
        "\1\0\1\1\16\uffff\1\2\5\uffff\1\3\10\uffff}>";
    static final String[] DFA63_transitionS = {
            "\1\4\3\uffff\1\30\1\4\1\20\5\uffff\1\4\2\uffff\1\4\1\26\1\uffff"+
            "\1\21\3\uffff\1\21\1\uffff\3\21\21\uffff\1\4\1\uffff\1\4\1\uffff"+
            "\2\4\1\1\5\4\1\uffff\1\4\7\uffff\1\27\24\uffff\1\2\1\3\5\uffff"+
            "\2\31\1\32\1\uffff\3\32\1\36",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA63_eot = DFA.unpackEncodedString(DFA63_eotS);
    static final short[] DFA63_eof = DFA.unpackEncodedString(DFA63_eofS);
    static final char[] DFA63_min = DFA.unpackEncodedStringToUnsignedChars(DFA63_minS);
    static final char[] DFA63_max = DFA.unpackEncodedStringToUnsignedChars(DFA63_maxS);
    static final short[] DFA63_accept = DFA.unpackEncodedString(DFA63_acceptS);
    static final short[] DFA63_special = DFA.unpackEncodedString(DFA63_specialS);
    static final short[][] DFA63_transition;

    static {
        int numStates = DFA63_transitionS.length;
        DFA63_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA63_transition[i] = DFA.unpackEncodedString(DFA63_transitionS[i]);
        }
    }

    class DFA63 extends DFA {

        public DFA63(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 63;
            this.eot = DFA63_eot;
            this.eof = DFA63_eof;
            this.min = DFA63_min;
            this.max = DFA63_max;
            this.accept = DFA63_accept;
            this.special = DFA63_special;
            this.transition = DFA63_transition;
        }
        public String getDescription() {
            return "444:1: bodyItem : ( ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ LBRACE )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call | rule | at_rule | {...}? cp_variable_declaration | {...}? importItem | {...}? sass_debug | {...}? sass_control | {...}? sass_function_declaration );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA63_0 = input.LA(1);

                         
                        int index63_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA63_0==DOT) ) {s = 1;}

                        else if ( (LA63_0==SASS_MIXIN) && (synpred9_Css3())) {s = 2;}

                        else if ( (LA63_0==SASS_INCLUDE) && (synpred10_Css3())) {s = 3;}

                        else if ( (LA63_0==IDENT||LA63_0==COMMA||LA63_0==GEN||LA63_0==COLON||LA63_0==MINUS||LA63_0==GREATER||(LA63_0>=HASH_SYMBOL && LA63_0<=HASH)||(LA63_0>=LBRACKET && LA63_0<=PIPE)||LA63_0==LESS_AND) ) {s = 4;}

                        else if ( (LA63_0==MEDIA_SYM) ) {s = 16;}

                        else if ( (LA63_0==MOZ_DOCUMENT_SYM||LA63_0==WEBKIT_KEYFRAMES_SYM||(LA63_0>=PAGE_SYM && LA63_0<=FONT_FACE_SYM)) ) {s = 17;}

                        else if ( (LA63_0==AT_IDENT) ) {s = 22;}

                        else if ( (LA63_0==SASS_VAR) ) {s = 23;}

                        else if ( (LA63_0==IMPORT_SYM) ) {s = 24;}

                        else if ( ((LA63_0>=SASS_DEBUG && LA63_0<=SASS_WARN)) ) {s = 25;}

                        else if ( (LA63_0==SASS_IF||(LA63_0>=SASS_FOR && LA63_0<=SASS_WHILE)) ) {s = 26;}

                        else if ( (LA63_0==SASS_FUNCTION) ) {s = 30;}

                         
                        input.seek(index63_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA63_1 = input.LA(1);

                         
                        int index63_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred9_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 2;}

                        else if ( ((synpred10_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index63_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA63_16 = input.LA(1);

                         
                        int index63_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate((((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))),""))) ) {s = 17;}

                        else if ( ((((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 23;}

                         
                        input.seek(index63_16);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA63_22 = input.LA(1);

                         
                        int index63_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate((((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))),""))) ) {s = 17;}

                        else if ( ((((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 23;}

                         
                        input.seek(index63_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 63, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA86_eotS =
        "\4\uffff";
    static final String DFA86_eofS =
        "\4\uffff";
    static final String DFA86_minS =
        "\2\13\2\uffff";
    static final String DFA86_maxS =
        "\2\124\2\uffff";
    static final String DFA86_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA86_specialS =
        "\4\uffff}>";
    static final String[] DFA86_transitionS = {
            "\1\3\1\uffff\1\2\11\uffff\1\1\73\uffff\2\1",
            "\1\3\1\uffff\1\2\11\uffff\1\1\73\uffff\2\1",
            "",
            ""
    };

    static final short[] DFA86_eot = DFA.unpackEncodedString(DFA86_eotS);
    static final short[] DFA86_eof = DFA.unpackEncodedString(DFA86_eofS);
    static final char[] DFA86_min = DFA.unpackEncodedStringToUnsignedChars(DFA86_minS);
    static final char[] DFA86_max = DFA.unpackEncodedStringToUnsignedChars(DFA86_maxS);
    static final short[] DFA86_accept = DFA.unpackEncodedString(DFA86_acceptS);
    static final short[] DFA86_special = DFA.unpackEncodedString(DFA86_specialS);
    static final short[][] DFA86_transition;

    static {
        int numStates = DFA86_transitionS.length;
        DFA86_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA86_transition[i] = DFA.unpackEncodedString(DFA86_transitionS[i]);
        }
    }

    class DFA86 extends DFA {

        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = DFA86_eot;
            this.eof = DFA86_eof;
            this.min = DFA86_min;
            this.max = DFA86_max;
            this.accept = DFA86_accept;
            this.special = DFA86_special;
            this.transition = DFA86_transition;
        }
        public String getDescription() {
            return "()* loopback of 516:25: ( ( ws )? COMMA ( ws )? ( IDENT | PERCENTAGE ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA117_eotS =
        "\5\uffff";
    static final String DFA117_eofS =
        "\5\uffff";
    static final String DFA117_minS =
        "\2\5\1\0\2\uffff";
    static final String DFA117_maxS =
        "\2\154\1\0\2\uffff";
    static final String DFA117_acceptS =
        "\3\uffff\1\2\1\1";
    static final String DFA117_specialS =
        "\2\uffff\1\0\2\uffff}>";
    static final String[] DFA117_transitionS = {
            "\1\2\1\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\2\uffff\2\3\1\1"+
            "\1\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\10\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff\2\3\3\uffff"+
            "\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\2\3",
            "\1\2\1\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\2\uffff\2\3\1"+
            "\1\1\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\10\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff\2\3\3\uffff"+
            "\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\2\3",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "611:24: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA117_2 = input.LA(1);

                         
                        int index117_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_Css3()) ) {s = 4;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index117_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA121_eotS =
        "\46\uffff";
    static final String DFA121_eofS =
        "\46\uffff";
    static final String DFA121_minS =
        "\1\6\10\0\6\uffff\1\0\3\uffff\1\0\22\uffff";
    static final String DFA121_maxS =
        "\1\154\10\0\6\uffff\1\0\3\uffff\1\0\22\uffff";
    static final String DFA121_acceptS =
        "\11\uffff\1\5\1\6\4\7\1\uffff\3\7\1\uffff\1\10\4\uffff\1\11\3\uffff"+
        "\1\12\1\13\1\14\1\15\1\16\1\1\1\2\1\3\1\4";
    static final String DFA121_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\6\uffff\1\11\3\uffff\1\12"+
        "\22\uffff}>";
    static final String[] DFA121_transitionS = {
            "\1\4\3\uffff\1\41\1\21\1\1\5\uffff\1\6\2\uffff\1\15\1\23\1\uffff"+
            "\1\24\3\uffff\1\24\1\uffff\3\24\21\uffff\1\17\1\uffff\1\21\1"+
            "\uffff\1\3\1\10\1\5\1\20\1\22\1\16\1\7\1\14\1\uffff\1\13\7\uffff"+
            "\1\2\24\uffff\1\11\1\12\3\uffff\1\35\1\uffff\2\36\1\31\1\uffff"+
            "\3\31\1\uffff\1\40\1\37",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA121_eot = DFA.unpackEncodedString(DFA121_eotS);
    static final short[] DFA121_eof = DFA.unpackEncodedString(DFA121_eofS);
    static final char[] DFA121_min = DFA.unpackEncodedStringToUnsignedChars(DFA121_minS);
    static final char[] DFA121_max = DFA.unpackEncodedStringToUnsignedChars(DFA121_maxS);
    static final short[] DFA121_accept = DFA.unpackEncodedString(DFA121_acceptS);
    static final short[] DFA121_special = DFA.unpackEncodedString(DFA121_specialS);
    static final short[][] DFA121_transition;

    static {
        int numStates = DFA121_transitionS.length;
        DFA121_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA121_transition[i] = DFA.unpackEncodedString(DFA121_transitionS[i]);
        }
    }

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = DFA121_eot;
            this.eof = DFA121_eof;
            this.min = DFA121_min;
            this.max = DFA121_max;
            this.accept = DFA121_accept;
            this.special = DFA121_special;
            this.transition = DFA121_transition;
        }
        public String getDescription() {
            return "617:1: declaration : ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_nested_properties )=> sass_nested_properties | ( propertyDeclaration )=> propertyDeclaration | ( property COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( SASS_MIXIN | ( DOT IDENT ( ws )? LPAREN (~ RPAREN )* RPAREN (~ LBRACE )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call | ( rule )=> rule | {...}? at_rule | {...}? sass_control | {...}? sass_extend | {...}? sass_debug | {...}? sass_content | {...}? sass_function_return | {...}? importItem );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA121_0 = input.LA(1);

                         
                        int index121_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA121_0==MEDIA_SYM) ) {s = 1;}

                        else if ( (LA121_0==SASS_VAR) ) {s = 2;}

                        else if ( (LA121_0==HASH_SYMBOL) ) {s = 3;}

                        else if ( (LA121_0==IDENT) ) {s = 4;}

                        else if ( (LA121_0==DOT) ) {s = 5;}

                        else if ( (LA121_0==GEN) ) {s = 6;}

                        else if ( (LA121_0==STAR) ) {s = 7;}

                        else if ( (LA121_0==HASH) ) {s = 8;}

                        else if ( (LA121_0==SASS_MIXIN) && (synpred17_Css3())) {s = 9;}

                        else if ( (LA121_0==SASS_INCLUDE) && (synpred18_Css3())) {s = 10;}

                        else if ( (LA121_0==LESS_AND) && (synpred19_Css3())) {s = 11;}

                        else if ( (LA121_0==PIPE) && (synpred19_Css3())) {s = 12;}

                        else if ( (LA121_0==COLON) && (synpred19_Css3())) {s = 13;}

                        else if ( (LA121_0==SASS_EXTEND_ONLY_SELECTOR) && (synpred19_Css3())) {s = 14;}

                        else if ( (LA121_0==MINUS) ) {s = 15;}

                        else if ( (LA121_0==LBRACKET) && (synpred19_Css3())) {s = 16;}

                        else if ( (LA121_0==COMMA||LA121_0==GREATER) && (synpred19_Css3())) {s = 17;}

                        else if ( (LA121_0==DCOLON) && (synpred19_Css3())) {s = 18;}

                        else if ( (LA121_0==AT_IDENT) ) {s = 19;}

                        else if ( (LA121_0==MOZ_DOCUMENT_SYM||LA121_0==WEBKIT_KEYFRAMES_SYM||(LA121_0>=PAGE_SYM && LA121_0<=FONT_FACE_SYM)) ) {s = 20;}

                        else if ( (LA121_0==SASS_IF||(LA121_0>=SASS_FOR && LA121_0<=SASS_WHILE)) ) {s = 25;}

                        else if ( (LA121_0==SASS_EXTEND) ) {s = 29;}

                        else if ( ((LA121_0>=SASS_DEBUG && LA121_0<=SASS_WARN)) ) {s = 30;}

                        else if ( (LA121_0==SASS_CONTENT) ) {s = 31;}

                        else if ( (LA121_0==SASS_RETURN) ) {s = 32;}

                        else if ( (LA121_0==IMPORT_SYM) ) {s = 33;}

                         
                        input.seek(index121_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA121_1 = input.LA(1);

                         
                        int index121_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred13_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred13_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 34;}

                        else if ( (((synpred14_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 35;}

                        else if ( ((((synpred15_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred15_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 36;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 20;}

                         
                        input.seek(index121_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA121_2 = input.LA(1);

                         
                        int index121_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred13_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((synpred13_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 34;}

                        else if ( (((synpred14_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 35;}

                        else if ( (((((synpred15_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((synpred15_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 36;}

                        else if ( (((((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 37;}

                         
                        input.seek(index121_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA121_3 = input.LA(1);

                         
                        int index121_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_Css3()) ) {s = 35;}

                        else if ( ((synpred15_Css3()||(synpred15_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 36;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred16_Css3())) ) {s = 37;}

                        else if ( (synpred19_Css3()) ) {s = 18;}

                         
                        input.seek(index121_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA121_4 = input.LA(1);

                         
                        int index121_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_Css3()) ) {s = 35;}

                        else if ( ((synpred15_Css3()||(synpred15_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 36;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred16_Css3())) ) {s = 37;}

                        else if ( (synpred19_Css3()) ) {s = 18;}

                         
                        input.seek(index121_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA121_5 = input.LA(1);

                         
                        int index121_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_Css3()) ) {s = 35;}

                        else if ( ((synpred15_Css3()||(synpred15_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 36;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred16_Css3())) ) {s = 37;}

                        else if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 9;}

                        else if ( ((synpred18_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 10;}

                        else if ( (synpred19_Css3()) ) {s = 18;}

                         
                        input.seek(index121_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA121_6 = input.LA(1);

                         
                        int index121_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_Css3()) ) {s = 35;}

                        else if ( ((synpred15_Css3()||(synpred15_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 36;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred16_Css3())) ) {s = 37;}

                        else if ( (synpred19_Css3()) ) {s = 18;}

                         
                        input.seek(index121_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA121_7 = input.LA(1);

                         
                        int index121_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred15_Css3()||(synpred15_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 36;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred16_Css3())) ) {s = 37;}

                        else if ( (synpred19_Css3()) ) {s = 18;}

                         
                        input.seek(index121_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA121_8 = input.LA(1);

                         
                        int index121_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_Css3()) ) {s = 35;}

                        else if ( ((synpred15_Css3()||(synpred15_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 36;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred16_Css3())) ) {s = 37;}

                        else if ( (synpred19_Css3()) ) {s = 18;}

                         
                        input.seek(index121_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA121_15 = input.LA(1);

                         
                        int index121_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_Css3()) ) {s = 35;}

                        else if ( ((synpred15_Css3()||(synpred15_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")))) ) {s = 36;}

                        else if ( (((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))||synpred16_Css3())) ) {s = 37;}

                        else if ( (synpred19_Css3()) ) {s = 18;}

                         
                        input.seek(index121_15);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA121_19 = input.LA(1);

                         
                        int index121_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred13_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||((synpred13_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 34;}

                        else if ( (((synpred14_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 35;}

                        else if ( ((((synpred15_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred15_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 36;}

                        else if ( ((((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))||(((synpred16_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()")))) ) {s = 37;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 20;}

                         
                        input.seek(index121_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 121, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA125_eotS =
        "\21\uffff";
    static final String DFA125_eofS =
        "\21\uffff";
    static final String DFA125_minS =
        "\2\6\3\0\1\uffff\1\0\2\6\5\uffff\1\0\1\uffff\1\0";
    static final String DFA125_maxS =
        "\1\77\1\124\3\0\1\uffff\1\0\2\124\5\uffff\1\0\1\uffff\1\0";
    static final String DFA125_acceptS =
        "\5\uffff\1\2\3\uffff\5\1\1\uffff\1\1\1\uffff";
    static final String DFA125_specialS =
        "\1\4\1\5\1\7\1\6\1\11\1\uffff\1\1\1\2\1\0\5\uffff\1\10\1\uffff\1"+
        "\3}>";
    static final String[] DFA125_transitionS = {
            "\1\2\4\uffff\1\11\6\uffff\1\5\2\uffff\1\10\34\uffff\1\11\1\uffff"+
            "\1\11\1\uffff\1\1\1\6\1\7\3\5\1\3\1\5\1\uffff\1\4",
            "\1\15\4\uffff\1\15\1\uffff\1\12\7\uffff\1\15\1\uffff\1\13\32"+
            "\uffff\1\15\1\uffff\1\15\1\uffff\1\14\2\15\3\uffff\1\15\1\uffff"+
            "\1\5\1\15\23\uffff\2\13",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\16\4\uffff\1\15\1\uffff\1\17\4\uffff\1\5\2\uffff\1\15\1"+
            "\uffff\1\13\32\uffff\1\15\1\uffff\1\15\1\uffff\1\14\2\15\3\uffff"+
            "\1\15\2\uffff\1\15\23\uffff\2\13",
            "\1\20\4\uffff\1\15\1\uffff\1\17\3\uffff\2\5\2\uffff\1\15\1"+
            "\uffff\1\13\32\uffff\1\15\1\uffff\1\15\1\uffff\1\14\2\15\3\uffff"+
            "\1\15\2\uffff\1\15\23\uffff\2\13",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff"
    };

    static final short[] DFA125_eot = DFA.unpackEncodedString(DFA125_eotS);
    static final short[] DFA125_eof = DFA.unpackEncodedString(DFA125_eofS);
    static final char[] DFA125_min = DFA.unpackEncodedStringToUnsignedChars(DFA125_minS);
    static final char[] DFA125_max = DFA.unpackEncodedStringToUnsignedChars(DFA125_maxS);
    static final short[] DFA125_accept = DFA.unpackEncodedString(DFA125_acceptS);
    static final short[] DFA125_special = DFA.unpackEncodedString(DFA125_specialS);
    static final short[][] DFA125_transition;

    static {
        int numStates = DFA125_transitionS.length;
        DFA125_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA125_transition[i] = DFA.unpackEncodedString(DFA125_transitionS[i]);
        }
    }

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = DFA125_eot;
            this.eof = DFA125_eof;
            this.min = DFA125_min;
            this.max = DFA125_max;
            this.accept = DFA125_accept;
            this.special = DFA125_special;
            this.transition = DFA125_transition;
        }
        public String getDescription() {
            return "640:1: selectorsGroup : ( ( (~ ( HASH_SYMBOL | LBRACE ) )* HASH_SYMBOL LBRACE )=> sass_selector_interpolation_expression | selector ( ( ws )? COMMA ( ws )? selector )* );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA125_8 = input.LA(1);

                         
                        int index125_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA125_8==WS||(LA125_8>=NL && LA125_8<=COMMENT)) && (synpred20_Css3())) {s = 11;}

                        else if ( (LA125_8==HASH_SYMBOL) && (synpred20_Css3())) {s = 12;}

                        else if ( (LA125_8==IDENT) ) {s = 16;}

                        else if ( (LA125_8==LBRACE) && (synpred20_Css3())) {s = 15;}

                        else if ( (LA125_8==COMMA||LA125_8==COLON||LA125_8==MINUS||LA125_8==GREATER||(LA125_8>=HASH && LA125_8<=DOT)||LA125_8==STAR||LA125_8==LESS_AND) && (synpred20_Css3())) {s = 13;}

                        else if ( ((LA125_8>=NOT && LA125_8<=GEN)) ) {s = 5;}

                         
                        input.seek(index125_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA125_6 = input.LA(1);

                         
                        int index125_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 13;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index125_6);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA125_7 = input.LA(1);

                         
                        int index125_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA125_7==IDENT) ) {s = 14;}

                        else if ( (LA125_7==WS||(LA125_7>=NL && LA125_7<=COMMENT)) && (synpred20_Css3())) {s = 11;}

                        else if ( (LA125_7==HASH_SYMBOL) && (synpred20_Css3())) {s = 12;}

                        else if ( (LA125_7==GEN) ) {s = 5;}

                        else if ( (LA125_7==COMMA||LA125_7==COLON||LA125_7==MINUS||LA125_7==GREATER||(LA125_7>=HASH && LA125_7<=DOT)||LA125_7==STAR||LA125_7==LESS_AND) && (synpred20_Css3())) {s = 13;}

                        else if ( (LA125_7==LBRACE) && (synpred20_Css3())) {s = 15;}

                         
                        input.seek(index125_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA125_16 = input.LA(1);

                         
                        int index125_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 15;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index125_16);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA125_0 = input.LA(1);

                         
                        int index125_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA125_0==HASH_SYMBOL) ) {s = 1;}

                        else if ( (LA125_0==IDENT) ) {s = 2;}

                        else if ( (LA125_0==STAR) ) {s = 3;}

                        else if ( (LA125_0==LESS_AND) ) {s = 4;}

                        else if ( (LA125_0==GEN||(LA125_0>=LBRACKET && LA125_0<=SASS_EXTEND_ONLY_SELECTOR)||LA125_0==PIPE) ) {s = 5;}

                        else if ( (LA125_0==HASH) ) {s = 6;}

                        else if ( (LA125_0==DOT) ) {s = 7;}

                        else if ( (LA125_0==COLON) ) {s = 8;}

                        else if ( (LA125_0==COMMA||LA125_0==MINUS||LA125_0==GREATER) && (synpred20_Css3())) {s = 9;}

                         
                        input.seek(index125_0);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA125_1 = input.LA(1);

                         
                        int index125_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA125_1==LBRACE) && (synpred20_Css3())) {s = 10;}

                        else if ( (LA125_1==NAME) ) {s = 5;}

                        else if ( (LA125_1==WS||(LA125_1>=NL && LA125_1<=COMMENT)) && (synpred20_Css3())) {s = 11;}

                        else if ( (LA125_1==HASH_SYMBOL) && (synpred20_Css3())) {s = 12;}

                        else if ( (LA125_1==IDENT||LA125_1==COMMA||LA125_1==COLON||LA125_1==MINUS||LA125_1==GREATER||(LA125_1>=HASH && LA125_1<=DOT)||LA125_1==STAR||LA125_1==LESS_AND) && (synpred20_Css3())) {s = 13;}

                         
                        input.seek(index125_1);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA125_3 = input.LA(1);

                         
                        int index125_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 13;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index125_3);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA125_2 = input.LA(1);

                         
                        int index125_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 13;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index125_2);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA125_14 = input.LA(1);

                         
                        int index125_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 15;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index125_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA125_4 = input.LA(1);

                         
                        int index125_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_Css3()) ) {s = 13;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index125_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 125, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA124_eotS =
        "\4\uffff";
    static final String DFA124_eofS =
        "\4\uffff";
    static final String DFA124_minS =
        "\2\13\2\uffff";
    static final String DFA124_maxS =
        "\2\124\2\uffff";
    static final String DFA124_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA124_specialS =
        "\4\uffff}>";
    static final String[] DFA124_transitionS = {
            "\1\3\1\uffff\1\2\11\uffff\1\1\73\uffff\2\1",
            "\1\3\1\uffff\1\2\11\uffff\1\1\73\uffff\2\1",
            "",
            ""
    };

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "()* loopback of 645:18: ( ( ws )? COMMA ( ws )? selector )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA129_eotS =
        "\4\uffff";
    static final String DFA129_eofS =
        "\4\uffff";
    static final String DFA129_minS =
        "\1\13\1\6\2\uffff";
    static final String DFA129_maxS =
        "\2\124\2\uffff";
    static final String DFA129_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA129_specialS =
        "\4\uffff}>";
    static final String[] DFA129_transitionS = {
            "\1\2\1\uffff\1\2\11\uffff\1\1\33\uffff\3\3\35\uffff\2\1",
            "\1\3\4\uffff\1\2\1\uffff\1\2\4\uffff\1\3\2\uffff\1\3\1\uffff"+
            "\1\1\33\uffff\13\3\1\uffff\1\3\23\uffff\2\1",
            "",
            ""
    };

    static final short[] DFA129_eot = DFA.unpackEncodedString(DFA129_eotS);
    static final short[] DFA129_eof = DFA.unpackEncodedString(DFA129_eofS);
    static final char[] DFA129_min = DFA.unpackEncodedStringToUnsignedChars(DFA129_minS);
    static final char[] DFA129_max = DFA.unpackEncodedStringToUnsignedChars(DFA129_maxS);
    static final short[] DFA129_accept = DFA.unpackEncodedString(DFA129_acceptS);
    static final short[] DFA129_special = DFA.unpackEncodedString(DFA129_specialS);
    static final short[][] DFA129_transition;

    static {
        int numStates = DFA129_transitionS.length;
        DFA129_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA129_transition[i] = DFA.unpackEncodedString(DFA129_transitionS[i]);
        }
    }

    class DFA129 extends DFA {

        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = DFA129_eot;
            this.eof = DFA129_eof;
            this.min = DFA129_min;
            this.max = DFA129_max;
            this.accept = DFA129_accept;
            this.special = DFA129_special;
            this.transition = DFA129_transition;
        }
        public String getDescription() {
            return "()* loopback of 649:30: ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA128_eotS =
        "\4\uffff";
    static final String DFA128_eofS =
        "\4\uffff";
    static final String DFA128_minS =
        "\1\27\1\6\2\uffff";
    static final String DFA128_maxS =
        "\2\124\2\uffff";
    static final String DFA128_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA128_specialS =
        "\4\uffff}>";
    static final String[] DFA128_transitionS = {
            "\1\1\33\uffff\3\2\35\uffff\2\1",
            "\1\3\13\uffff\1\3\2\uffff\1\3\1\uffff\1\1\33\uffff\3\2\10\3"+
            "\1\uffff\1\3\23\uffff\2\1",
            "",
            ""
    };

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "649:32: ( ( ( ws )? combinator ( ws )? ) | ws )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA131_eotS =
        "\53\uffff";
    static final String DFA131_eofS =
        "\53\uffff";
    static final String DFA131_minS =
        "\1\5\1\0\7\uffff\1\0\3\uffff\1\0\1\uffff\1\0\15\uffff\2\0\1\uffff"+
        "\2\0\11\uffff";
    static final String DFA131_maxS =
        "\1\154\1\0\7\uffff\1\0\3\uffff\1\0\1\uffff\1\0\15\uffff\2\0\1\uffff"+
        "\2\0\11\uffff";
    static final String DFA131_acceptS =
        "\2\uffff\1\2\47\uffff\1\1";
    static final String DFA131_specialS =
        "\1\uffff\1\0\7\uffff\1\1\3\uffff\1\2\1\uffff\1\3\15\uffff\1\4\1"+
        "\5\1\uffff\1\6\1\7\11\uffff}>";
    static final String[] DFA131_transitionS = {
            "\2\2\3\uffff\5\2\3\uffff\1\2\1\uffff\1\2\1\35\1\2\1\1\1\2\3"+
            "\uffff\1\2\1\uffff\3\2\21\uffff\4\2\1\15\1\17\1\11\1\40\1\41"+
            "\1\36\2\2\1\uffff\1\2\7\uffff\1\2\13\uffff\2\1\7\uffff\2\2\3"+
            "\uffff\5\2\1\uffff\3\2\1\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "()* loopback of 659:17: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA131_1 = input.LA(1);

                         
                        int index131_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index131_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA131_9 = input.LA(1);

                         
                        int index131_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index131_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA131_13 = input.LA(1);

                         
                        int index131_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index131_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA131_15 = input.LA(1);

                         
                        int index131_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index131_15);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA131_29 = input.LA(1);

                         
                        int index131_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index131_29);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA131_30 = input.LA(1);

                         
                        int index131_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred21_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 42;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 2;}

                         
                        input.seek(index131_30);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA131_32 = input.LA(1);

                         
                        int index131_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index131_32);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA131_33 = input.LA(1);

                         
                        int index131_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index131_33);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 131, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA133_eotS =
        "\53\uffff";
    static final String DFA133_eofS =
        "\53\uffff";
    static final String DFA133_minS =
        "\1\5\1\0\7\uffff\1\0\3\uffff\1\0\1\uffff\1\0\15\uffff\2\0\1\uffff"+
        "\2\0\11\uffff";
    static final String DFA133_maxS =
        "\1\154\1\0\7\uffff\1\0\3\uffff\1\0\1\uffff\1\0\15\uffff\2\0\1\uffff"+
        "\2\0\11\uffff";
    static final String DFA133_acceptS =
        "\2\uffff\1\2\47\uffff\1\1";
    static final String DFA133_specialS =
        "\1\uffff\1\0\7\uffff\1\1\3\uffff\1\2\1\uffff\1\3\15\uffff\1\4\1"+
        "\5\1\uffff\1\6\1\7\11\uffff}>";
    static final String[] DFA133_transitionS = {
            "\2\2\3\uffff\5\2\3\uffff\1\2\1\uffff\1\2\1\35\1\2\1\1\1\2\3"+
            "\uffff\1\2\1\uffff\3\2\21\uffff\4\2\1\15\1\17\1\11\1\40\1\41"+
            "\1\36\2\2\1\uffff\1\2\7\uffff\1\2\13\uffff\2\1\7\uffff\2\2\3"+
            "\uffff\5\2\1\uffff\3\2\1\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "()* loopback of 661:20: ( ( ( ws )? esPred )=> ( ws )? elementSubsequent )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA133_1 = input.LA(1);

                         
                        int index133_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA133_9 = input.LA(1);

                         
                        int index133_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA133_13 = input.LA(1);

                         
                        int index133_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA133_15 = input.LA(1);

                         
                        int index133_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_15);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA133_29 = input.LA(1);

                         
                        int index133_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_29);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA133_30 = input.LA(1);

                         
                        int index133_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred22_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 42;}

                        else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 2;}

                         
                        input.seek(index133_30);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA133_32 = input.LA(1);

                         
                        int index133_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_32);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA133_33 = input.LA(1);

                         
                        int index133_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_Css3()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_33);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 133, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA149_eotS =
        "\4\uffff";
    static final String DFA149_eofS =
        "\4\uffff";
    static final String DFA149_minS =
        "\2\5\2\uffff";
    static final String DFA149_maxS =
        "\2\154\2\uffff";
    static final String DFA149_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA149_specialS =
        "\4\uffff}>";
    static final String[] DFA149_transitionS = {
            "\2\3\3\uffff\5\3\3\uffff\1\3\1\2\3\3\1\1\1\3\3\uffff\1\3\1\uffff"+
            "\3\3\21\uffff\14\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff"+
            "\2\3\3\uffff\5\3\1\uffff\3\3\1\uffff\2\3",
            "\2\3\3\uffff\5\3\3\uffff\1\3\1\2\1\uffff\2\3\1\1\1\3\3\uffff"+
            "\1\3\1\uffff\3\3\21\uffff\14\3\1\uffff\1\3\7\uffff\1\3\13\uffff"+
            "\2\1\7\uffff\2\3\3\uffff\5\3\1\uffff\3\3\1\uffff\2\3",
            "",
            ""
    };

    static final short[] DFA149_eot = DFA.unpackEncodedString(DFA149_eotS);
    static final short[] DFA149_eof = DFA.unpackEncodedString(DFA149_eofS);
    static final char[] DFA149_min = DFA.unpackEncodedStringToUnsignedChars(DFA149_minS);
    static final char[] DFA149_max = DFA.unpackEncodedStringToUnsignedChars(DFA149_maxS);
    static final short[] DFA149_accept = DFA.unpackEncodedString(DFA149_acceptS);
    static final short[] DFA149_special = DFA.unpackEncodedString(DFA149_specialS);
    static final short[][] DFA149_transition;

    static {
        int numStates = DFA149_transitionS.length;
        DFA149_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA149_transition[i] = DFA.unpackEncodedString(DFA149_transitionS[i]);
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = DFA149_eot;
            this.eof = DFA149_eof;
            this.min = DFA149_min;
            this.max = DFA149_max;
            this.accept = DFA149_accept;
            this.special = DFA149_special;
            this.transition = DFA149_transition;
        }
        public String getDescription() {
            return "760:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA160_eotS =
        "\12\uffff";
    static final String DFA160_eofS =
        "\12\uffff";
    static final String DFA160_minS =
        "\1\6\7\0\2\uffff";
    static final String DFA160_maxS =
        "\1\107\7\0\2\uffff";
    static final String DFA160_acceptS =
        "\10\uffff\1\1\1\2";
    static final String DFA160_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\2\uffff}>";
    static final String[] DFA160_transitionS = {
            "\1\3\5\uffff\1\6\5\uffff\1\5\3\uffff\1\6\33\uffff\1\4\3\uffff"+
            "\1\2\2\4\3\uffff\1\1\12\uffff\1\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA160_eot = DFA.unpackEncodedString(DFA160_eotS);
    static final short[] DFA160_eof = DFA.unpackEncodedString(DFA160_eofS);
    static final char[] DFA160_min = DFA.unpackEncodedStringToUnsignedChars(DFA160_minS);
    static final char[] DFA160_max = DFA.unpackEncodedStringToUnsignedChars(DFA160_maxS);
    static final short[] DFA160_accept = DFA.unpackEncodedString(DFA160_acceptS);
    static final short[] DFA160_special = DFA.unpackEncodedString(DFA160_specialS);
    static final short[][] DFA160_transition;

    static {
        int numStates = DFA160_transitionS.length;
        DFA160_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA160_transition[i] = DFA.unpackEncodedString(DFA160_transitionS[i]);
        }
    }

    class DFA160 extends DFA {

        public DFA160(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 160;
            this.eot = DFA160_eot;
            this.eof = DFA160_eof;
            this.min = DFA160_min;
            this.max = DFA160_max;
            this.accept = DFA160_accept;
            this.special = DFA160_special;
            this.transition = DFA160_transition;
        }
        public String getDescription() {
            return "769:1: propertyDeclaration : ( ( STAR )? property COLON ( ws )? propertyValue ( ( ws )? prio )? | {...}? ( STAR )? property COLON ( ws )? cp_propertyValue );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA160_1 = input.LA(1);

                         
                        int index160_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index160_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA160_2 = input.LA(1);

                         
                        int index160_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index160_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA160_3 = input.LA(1);

                         
                        int index160_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index160_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA160_4 = input.LA(1);

                         
                        int index160_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index160_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA160_5 = input.LA(1);

                         
                        int index160_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 8;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 9;}

                         
                        input.seek(index160_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA160_6 = input.LA(1);

                         
                        int index160_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 8;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 9;}

                         
                        input.seek(index160_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA160_7 = input.LA(1);

                         
                        int index160_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 8;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 9;}

                         
                        input.seek(index160_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 160, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA157_eotS =
        "\4\uffff";
    static final String DFA157_eofS =
        "\1\3\3\uffff";
    static final String DFA157_minS =
        "\2\5\2\uffff";
    static final String DFA157_maxS =
        "\2\154\2\uffff";
    static final String DFA157_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA157_specialS =
        "\4\uffff}>";
    static final String[] DFA157_transitionS = {
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\2\uffff\2\3\1\1\1\3"+
            "\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1\3\1\uffff\10"+
            "\3\1\uffff\1\3\7\uffff\1\3\1\2\12\uffff\2\1\7\uffff\2\3\3\uffff"+
            "\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\2\3",
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\2\uffff\2\3\1\1\1"+
            "\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\10\3\1\uffff\1\3\7\uffff\1\3\1\2\12\uffff\2\1\7\uffff\2\3\3"+
            "\uffff\1\3\1\uffff\3\3\1\uffff\3\3\1\uffff\2\3",
            "",
            ""
    };

    static final short[] DFA157_eot = DFA.unpackEncodedString(DFA157_eotS);
    static final short[] DFA157_eof = DFA.unpackEncodedString(DFA157_eofS);
    static final char[] DFA157_min = DFA.unpackEncodedStringToUnsignedChars(DFA157_minS);
    static final char[] DFA157_max = DFA.unpackEncodedStringToUnsignedChars(DFA157_maxS);
    static final short[] DFA157_accept = DFA.unpackEncodedString(DFA157_acceptS);
    static final short[] DFA157_special = DFA.unpackEncodedString(DFA157_specialS);
    static final short[][] DFA157_transition;

    static {
        int numStates = DFA157_transitionS.length;
        DFA157_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA157_transition[i] = DFA.unpackEncodedString(DFA157_transitionS[i]);
        }
    }

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = DFA157_eot;
            this.eof = DFA157_eof;
            this.min = DFA157_min;
            this.max = DFA157_max;
            this.accept = DFA157_accept;
            this.special = DFA157_special;
            this.transition = DFA157_transition;
        }
        public String getDescription() {
            return "771:44: ( ( ws )? prio )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA161_eotS =
        "\31\uffff";
    static final String DFA161_eofS =
        "\31\uffff";
    static final String DFA161_minS =
        "\1\6\1\uffff\24\0\3\uffff";
    static final String DFA161_maxS =
        "\1\122\1\uffff\24\0\3\uffff";
    static final String DFA161_acceptS =
        "\1\uffff\1\1\26\uffff\1\2";
    static final String DFA161_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\3\uffff}>";
    static final String[] DFA161_transitionS = {
            "\1\3\1\17\1\21\3\uffff\1\23\4\uffff\1\1\1\20\1\1\2\uffff\1\23"+
            "\6\uffff\1\5\24\uffff\2\2\2\uffff\1\25\1\22\17\uffff\1\24\1"+
            "\1\1\4\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_eotS);
    static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_eofS);
    static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_minS);
    static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_maxS);
    static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_acceptS);
    static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_specialS);
    static final short[][] DFA161_transition;

    static {
        int numStates = DFA161_transitionS.length;
        DFA161_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA161_transition[i] = DFA.unpackEncodedString(DFA161_transitionS[i]);
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;
        }
        public String getDescription() {
            return "782:1: cp_propertyValue : ({...}? cp_expression_list | propertyValue );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA161_2 = input.LA(1);

                         
                        int index161_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index161_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA161_3 = input.LA(1);

                         
                        int index161_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index161_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA161_4 = input.LA(1);

                         
                        int index161_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index161_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA161_5 = input.LA(1);

                         
                        int index161_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index161_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA161_6 = input.LA(1);

                         
                        int index161_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index161_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA161_7 = input.LA(1);

                         
                        int index161_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index161_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA161_8 = input.LA(1);

                         
                        int index161_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index161_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA161_9 = input.LA(1);

                         
                        int index161_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index161_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA161_10 = input.LA(1);

                         
                        int index161_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index161_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA161_11 = input.LA(1);

                         
                        int index161_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index161_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA161_12 = input.LA(1);

                         
                        int index161_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index161_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA161_13 = input.LA(1);

                         
                        int index161_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index161_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA161_14 = input.LA(1);

                         
                        int index161_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index161_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA161_15 = input.LA(1);

                         
                        int index161_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index161_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA161_16 = input.LA(1);

                         
                        int index161_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index161_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA161_17 = input.LA(1);

                         
                        int index161_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index161_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA161_18 = input.LA(1);

                         
                        int index161_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index161_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA161_19 = input.LA(1);

                         
                        int index161_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 1;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 24;}

                         
                        input.seek(index161_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA161_20 = input.LA(1);

                         
                        int index161_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 1;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 24;}

                         
                        input.seek(index161_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA161_21 = input.LA(1);

                         
                        int index161_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 1;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 24;}

                         
                        input.seek(index161_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 161, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA166_eotS =
        "\71\uffff";
    static final String DFA166_eofS =
        "\1\2\70\uffff";
    static final String DFA166_minS =
        "\1\5\1\0\10\uffff\6\0\13\uffff\1\0\1\uffff\1\0\5\uffff\1\0\25\uffff";
    static final String DFA166_maxS =
        "\1\154\1\0\10\uffff\6\0\13\uffff\1\0\1\uffff\1\0\5\uffff\1\0\25"+
        "\uffff";
    static final String DFA166_acceptS =
        "\2\uffff\1\2\47\uffff\17\1";
    static final String DFA166_specialS =
        "\1\0\1\1\10\uffff\1\2\1\3\1\4\1\5\1\6\1\7\13\uffff\1\10\1\uffff"+
        "\1\11\5\uffff\1\12\25\uffff}>";
    static final String[] DFA166_transitionS = {
            "\1\2\1\13\1\67\1\70\1\uffff\1\2\1\35\1\43\2\2\3\uffff\1\15\1"+
            "\uffff\2\2\1\16\1\1\1\2\3\uffff\1\2\1\55\3\2\20\uffff\1\52\1"+
            "\33\1\53\1\2\1\uffff\1\12\1\14\6\2\1\uffff\1\2\7\uffff\1\17"+
            "\1\2\1\54\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\2\1\7"+
            "\uffff\2\2\3\uffff\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA166_eot = DFA.unpackEncodedString(DFA166_eotS);
    static final short[] DFA166_eof = DFA.unpackEncodedString(DFA166_eofS);
    static final char[] DFA166_min = DFA.unpackEncodedStringToUnsignedChars(DFA166_minS);
    static final char[] DFA166_max = DFA.unpackEncodedStringToUnsignedChars(DFA166_maxS);
    static final short[] DFA166_accept = DFA.unpackEncodedString(DFA166_acceptS);
    static final short[] DFA166_special = DFA.unpackEncodedString(DFA166_specialS);
    static final short[][] DFA166_transition;

    static {
        int numStates = DFA166_transitionS.length;
        DFA166_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA166_transition[i] = DFA.unpackEncodedString(DFA166_transitionS[i]);
        }
    }

    class DFA166 extends DFA {

        public DFA166(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 166;
            this.eot = DFA166_eot;
            this.eof = DFA166_eof;
            this.min = DFA166_min;
            this.max = DFA166_max;
            this.accept = DFA166_accept;
            this.special = DFA166_special;
            this.transition = DFA166_transition;
        }
        public String getDescription() {
            return "()* loopback of 838:12: ( ( ( ws | ( ( ws )? operator ( ws )? ) | ) term )=> ( ws | ( ( ws )? operator ( ws )? ) | ) term )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA166_0 = input.LA(1);

                         
                        int index166_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA166_0==WS||(LA166_0>=NL && LA166_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA166_0==EOF||LA166_0==SEMI||LA166_0==IMPORT_SYM||(LA166_0>=LBRACE && LA166_0<=RBRACE)||(LA166_0>=RPAREN && LA166_0<=COLON)||LA166_0==MOZ_DOCUMENT_SYM||LA166_0==WEBKIT_KEYFRAMES_SYM||(LA166_0>=PAGE_SYM && LA166_0<=FONT_FACE_SYM)||LA166_0==GREATER||(LA166_0>=DOT && LA166_0<=PIPE)||LA166_0==LESS_AND||LA166_0==IMPORTANT_SYM||(LA166_0>=SASS_MIXIN && LA166_0<=SASS_INCLUDE)||LA166_0==SASS_EXTEND||(LA166_0>=SASS_DEBUG && LA166_0<=SASS_IF)||(LA166_0>=SASS_FOR && LA166_0<=SASS_WHILE)||(LA166_0>=SASS_RETURN && LA166_0<=SASS_CONTENT)) ) {s = 2;}

                        else if ( (LA166_0==HASH_SYMBOL) ) {s = 10;}

                        else if ( (LA166_0==IDENT) ) {s = 11;}

                        else if ( (LA166_0==HASH) ) {s = 12;}

                        else if ( (LA166_0==GEN) ) {s = 13;}

                        else if ( (LA166_0==AT_IDENT) ) {s = 14;}

                        else if ( (LA166_0==SASS_VAR) ) {s = 15;}

                        else if ( (LA166_0==MINUS) ) {s = 27;}

                        else if ( (LA166_0==COMMA) ) {s = 29;}

                        else if ( (LA166_0==MEDIA_SYM) ) {s = 35;}

                        else if ( (LA166_0==SOLIDUS) && (synpred24_Css3())) {s = 42;}

                        else if ( (LA166_0==PLUS) && (synpred24_Css3())) {s = 43;}

                        else if ( (LA166_0==NUMBER) && (synpred24_Css3())) {s = 44;}

                        else if ( (LA166_0==PERCENTAGE) && (synpred24_Css3())) {s = 45;}

                        else if ( (LA166_0==LENGTH) && (synpred24_Css3())) {s = 46;}

                        else if ( (LA166_0==EMS) && (synpred24_Css3())) {s = 47;}

                        else if ( (LA166_0==REM) && (synpred24_Css3())) {s = 48;}

                        else if ( (LA166_0==EXS) && (synpred24_Css3())) {s = 49;}

                        else if ( (LA166_0==ANGLE) && (synpred24_Css3())) {s = 50;}

                        else if ( (LA166_0==TIME) && (synpred24_Css3())) {s = 51;}

                        else if ( (LA166_0==FREQ) && (synpred24_Css3())) {s = 52;}

                        else if ( (LA166_0==RESOLUTION) && (synpred24_Css3())) {s = 53;}

                        else if ( (LA166_0==DIMENSION) && (synpred24_Css3())) {s = 54;}

                        else if ( (LA166_0==STRING) && (synpred24_Css3())) {s = 55;}

                        else if ( (LA166_0==URI) && (synpred24_Css3())) {s = 56;}

                         
                        input.seek(index166_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA166_1 = input.LA(1);

                         
                        int index166_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 56;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index166_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA166_10 = input.LA(1);

                         
                        int index166_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 56;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index166_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA166_11 = input.LA(1);

                         
                        int index166_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 56;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index166_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA166_12 = input.LA(1);

                         
                        int index166_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 56;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index166_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA166_13 = input.LA(1);

                         
                        int index166_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 56;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index166_13);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA166_14 = input.LA(1);

                         
                        int index166_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 56;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index166_14);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA166_15 = input.LA(1);

                         
                        int index166_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 56;}

                        else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}

                         
                        input.seek(index166_15);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA166_27 = input.LA(1);

                         
                        int index166_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 56;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index166_27);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA166_29 = input.LA(1);

                         
                        int index166_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_Css3()) ) {s = 56;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index166_29);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA166_35 = input.LA(1);

                         
                        int index166_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred24_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 56;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index166_35);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 166, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA165_eotS =
        "\5\uffff";
    static final String DFA165_eofS =
        "\5\uffff";
    static final String DFA165_minS =
        "\2\6\3\uffff";
    static final String DFA165_maxS =
        "\2\124\3\uffff";
    static final String DFA165_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA165_specialS =
        "\5\uffff}>";
    static final String[] DFA165_transitionS = {
            "\3\3\2\uffff\1\2\1\3\5\uffff\1\3\3\uffff\1\3\1\1\5\uffff\1\3"+
            "\23\uffff\1\2\2\3\2\uffff\2\3\17\uffff\1\3\1\uffff\12\3\2\1",
            "\3\4\2\uffff\1\2\1\4\5\uffff\1\4\3\uffff\1\4\1\1\5\uffff\1"+
            "\4\23\uffff\1\2\2\4\2\uffff\2\4\17\uffff\1\4\1\uffff\12\4\2"+
            "\1",
            "",
            "",
            ""
    };

    static final short[] DFA165_eot = DFA.unpackEncodedString(DFA165_eotS);
    static final short[] DFA165_eof = DFA.unpackEncodedString(DFA165_eofS);
    static final char[] DFA165_min = DFA.unpackEncodedStringToUnsignedChars(DFA165_minS);
    static final char[] DFA165_max = DFA.unpackEncodedStringToUnsignedChars(DFA165_maxS);
    static final short[] DFA165_accept = DFA.unpackEncodedString(DFA165_acceptS);
    static final short[] DFA165_special = DFA.unpackEncodedString(DFA165_specialS);
    static final short[][] DFA165_transition;

    static {
        int numStates = DFA165_transitionS.length;
        DFA165_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA165_transition[i] = DFA.unpackEncodedString(DFA165_transitionS[i]);
        }
    }

    class DFA165 extends DFA {

        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = DFA165_eot;
            this.eof = DFA165_eof;
            this.min = DFA165_min;
            this.max = DFA165_max;
            this.accept = DFA165_accept;
            this.special = DFA165_special;
            this.transition = DFA165_transition;
        }
        public String getDescription() {
            return "838:66: ( ws | ( ( ws )? operator ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA169_eotS =
        "\26\uffff";
    static final String DFA169_eofS =
        "\26\uffff";
    static final String DFA169_minS =
        "\1\6\1\0\24\uffff";
    static final String DFA169_maxS =
        "\1\122\1\0\24\uffff";
    static final String DFA169_acceptS =
        "\2\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
        "\1\17\1\20\1\21\1\22\1\uffff\1\23\1\1\1\2";
    static final String DFA169_specialS =
        "\1\uffff\1\0\24\uffff}>";
    static final String[] DFA169_transitionS = {
            "\1\1\1\15\1\17\3\uffff\1\21\5\uffff\1\16\3\uffff\1\21\6\uffff"+
            "\1\3\30\uffff\1\23\1\20\17\uffff\1\21\1\uffff\1\2\1\4\1\5\1"+
            "\6\1\7\1\10\1\11\1\12\1\13\1\14",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA169_eot = DFA.unpackEncodedString(DFA169_eotS);
    static final short[] DFA169_eof = DFA.unpackEncodedString(DFA169_eofS);
    static final char[] DFA169_min = DFA.unpackEncodedStringToUnsignedChars(DFA169_minS);
    static final char[] DFA169_max = DFA.unpackEncodedStringToUnsignedChars(DFA169_maxS);
    static final short[] DFA169_accept = DFA.unpackEncodedString(DFA169_acceptS);
    static final short[] DFA169_special = DFA.unpackEncodedString(DFA169_specialS);
    static final short[][] DFA169_transition;

    static {
        int numStates = DFA169_transitionS.length;
        DFA169_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA169_transition[i] = DFA.unpackEncodedString(DFA169_transitionS[i]);
        }
    }

    class DFA169 extends DFA {

        public DFA169(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 169;
            this.eot = DFA169_eot;
            this.eof = DFA169_eof;
            this.min = DFA169_min;
            this.max = DFA169_max;
            this.accept = DFA169_accept;
            this.special = DFA169_special;
            this.transition = DFA169_transition;
        }
        public String getDescription() {
            return "844:5: ( ( functionName ( ws )? LPAREN )=> function | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | GEN | URI | hexColor | {...}? cp_variable | {...}? sass_interpolation_expression_var )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA169_1 = input.LA(1);

                         
                        int index169_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_Css3()) ) {s = 20;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index169_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 169, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA177_eotS =
        "\4\uffff";
    static final String DFA177_eofS =
        "\4\uffff";
    static final String DFA177_minS =
        "\2\13\2\uffff";
    static final String DFA177_maxS =
        "\2\124\2\uffff";
    static final String DFA177_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA177_specialS =
        "\4\uffff}>";
    static final String[] DFA177_transitionS = {
            "\1\3\10\uffff\1\2\2\uffff\1\1\73\uffff\2\1",
            "\1\3\10\uffff\1\2\2\uffff\1\1\73\uffff\2\1",
            "",
            ""
    };

    static final short[] DFA177_eot = DFA.unpackEncodedString(DFA177_eotS);
    static final short[] DFA177_eof = DFA.unpackEncodedString(DFA177_eofS);
    static final char[] DFA177_min = DFA.unpackEncodedStringToUnsignedChars(DFA177_minS);
    static final char[] DFA177_max = DFA.unpackEncodedStringToUnsignedChars(DFA177_maxS);
    static final short[] DFA177_accept = DFA.unpackEncodedString(DFA177_acceptS);
    static final short[] DFA177_special = DFA.unpackEncodedString(DFA177_specialS);
    static final short[][] DFA177_transition;

    static {
        int numStates = DFA177_transitionS.length;
        DFA177_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA177_transition[i] = DFA.unpackEncodedString(DFA177_transitionS[i]);
        }
    }

    class DFA177 extends DFA {

        public DFA177(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 177;
            this.eot = DFA177_eot;
            this.eof = DFA177_eof;
            this.min = DFA177_min;
            this.max = DFA177_max;
            this.accept = DFA177_accept;
            this.special = DFA177_special;
            this.transition = DFA177_transition;
        }
        public String getDescription() {
            return "()* loopback of 891:17: ( ( ws )? COMMA ( ws )? fnAttribute )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA181_eotS =
        "\32\uffff";
    static final String DFA181_eofS =
        "\32\uffff";
    static final String DFA181_minS =
        "\1\6\3\0\1\uffff\21\0\4\uffff";
    static final String DFA181_maxS =
        "\1\122\3\0\1\uffff\21\0\4\uffff";
    static final String DFA181_acceptS =
        "\4\uffff\1\2\23\uffff\1\1\1\3";
    static final String DFA181_specialS =
        "\1\uffff\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\4\uffff}>";
    static final String[] DFA181_transitionS = {
            "\1\1\1\21\1\23\3\uffff\1\2\4\uffff\1\4\1\22\1\4\2\uffff\1\2"+
            "\6\uffff\1\7\24\uffff\2\5\2\uffff\1\25\1\24\17\uffff\1\3\1\4"+
            "\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA181_eot = DFA.unpackEncodedString(DFA181_eotS);
    static final short[] DFA181_eof = DFA.unpackEncodedString(DFA181_eofS);
    static final char[] DFA181_min = DFA.unpackEncodedStringToUnsignedChars(DFA181_minS);
    static final char[] DFA181_max = DFA.unpackEncodedStringToUnsignedChars(DFA181_maxS);
    static final short[] DFA181_accept = DFA.unpackEncodedString(DFA181_acceptS);
    static final short[] DFA181_special = DFA.unpackEncodedString(DFA181_specialS);
    static final short[][] DFA181_transition;

    static {
        int numStates = DFA181_transitionS.length;
        DFA181_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA181_transition[i] = DFA.unpackEncodedString(DFA181_transitionS[i]);
        }
    }

    class DFA181 extends DFA {

        public DFA181(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 181;
            this.eot = DFA181_eot;
            this.eof = DFA181_eof;
            this.min = DFA181_min;
            this.max = DFA181_max;
            this.accept = DFA181_accept;
            this.special = DFA181_special;
            this.transition = DFA181_transition;
        }
        public String getDescription() {
            return "894:1: fnAttribute : ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | {...}? cp_expression | expression );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA181_1 = input.LA(1);

                         
                        int index181_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_Css3()) ) {s = 24;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index181_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA181_2 = input.LA(1);

                         
                        int index181_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 24;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 4;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 25;}

                         
                        input.seek(index181_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA181_3 = input.LA(1);

                         
                        int index181_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred26_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 24;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 4;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 25;}

                         
                        input.seek(index181_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA181_5 = input.LA(1);

                         
                        int index181_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index181_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA181_6 = input.LA(1);

                         
                        int index181_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index181_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA181_7 = input.LA(1);

                         
                        int index181_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index181_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA181_8 = input.LA(1);

                         
                        int index181_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index181_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA181_9 = input.LA(1);

                         
                        int index181_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index181_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA181_10 = input.LA(1);

                         
                        int index181_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index181_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA181_11 = input.LA(1);

                         
                        int index181_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index181_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA181_12 = input.LA(1);

                         
                        int index181_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index181_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA181_13 = input.LA(1);

                         
                        int index181_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index181_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA181_14 = input.LA(1);

                         
                        int index181_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index181_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA181_15 = input.LA(1);

                         
                        int index181_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index181_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA181_16 = input.LA(1);

                         
                        int index181_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index181_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA181_17 = input.LA(1);

                         
                        int index181_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index181_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA181_18 = input.LA(1);

                         
                        int index181_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index181_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA181_19 = input.LA(1);

                         
                        int index181_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index181_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA181_20 = input.LA(1);

                         
                        int index181_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index181_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA181_21 = input.LA(1);

                         
                        int index181_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 4;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 25;}

                         
                        input.seek(index181_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 181, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA188_eotS =
        "\30\uffff";
    static final String DFA188_eofS =
        "\30\uffff";
    static final String DFA188_minS =
        "\1\6\24\0\3\uffff";
    static final String DFA188_maxS =
        "\1\122\24\0\3\uffff";
    static final String DFA188_acceptS =
        "\25\uffff\1\2\1\uffff\1\1";
    static final String DFA188_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\3\uffff}>";
    static final String[] DFA188_transitionS = {
            "\1\2\1\16\1\20\3\uffff\1\22\5\uffff\1\17\1\25\2\uffff\1\22\6"+
            "\uffff\1\4\24\uffff\2\1\2\uffff\1\24\1\21\17\uffff\1\23\1\25"+
            "\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA188_eot = DFA.unpackEncodedString(DFA188_eotS);
    static final short[] DFA188_eof = DFA.unpackEncodedString(DFA188_eofS);
    static final char[] DFA188_min = DFA.unpackEncodedStringToUnsignedChars(DFA188_minS);
    static final char[] DFA188_max = DFA.unpackEncodedStringToUnsignedChars(DFA188_maxS);
    static final short[] DFA188_accept = DFA.unpackEncodedString(DFA188_acceptS);
    static final short[] DFA188_special = DFA.unpackEncodedString(DFA188_specialS);
    static final short[][] DFA188_transition;

    static {
        int numStates = DFA188_transitionS.length;
        DFA188_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA188_transition[i] = DFA.unpackEncodedString(DFA188_transitionS[i]);
        }
    }

    class DFA188 extends DFA {

        public DFA188(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 188;
            this.eot = DFA188_eot;
            this.eof = DFA188_eof;
            this.min = DFA188_min;
            this.max = DFA188_max;
            this.accept = DFA188_accept;
            this.special = DFA188_special;
            this.transition = DFA188_transition;
        }
        public String getDescription() {
            return "907:1: fnAttributeValue : ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )* | {...}? cp_math_expression );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA188_1 = input.LA(1);

                         
                        int index188_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index188_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA188_2 = input.LA(1);

                         
                        int index188_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index188_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA188_3 = input.LA(1);

                         
                        int index188_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index188_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA188_4 = input.LA(1);

                         
                        int index188_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index188_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA188_5 = input.LA(1);

                         
                        int index188_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index188_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA188_6 = input.LA(1);

                         
                        int index188_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index188_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA188_7 = input.LA(1);

                         
                        int index188_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index188_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA188_8 = input.LA(1);

                         
                        int index188_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index188_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA188_9 = input.LA(1);

                         
                        int index188_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index188_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA188_10 = input.LA(1);

                         
                        int index188_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index188_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA188_11 = input.LA(1);

                         
                        int index188_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index188_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA188_12 = input.LA(1);

                         
                        int index188_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index188_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA188_13 = input.LA(1);

                         
                        int index188_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index188_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA188_14 = input.LA(1);

                         
                        int index188_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index188_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA188_15 = input.LA(1);

                         
                        int index188_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index188_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA188_16 = input.LA(1);

                         
                        int index188_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index188_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA188_17 = input.LA(1);

                         
                        int index188_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index188_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA188_18 = input.LA(1);

                         
                        int index188_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 23;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 21;}

                         
                        input.seek(index188_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA188_19 = input.LA(1);

                         
                        int index188_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 23;}

                        else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 21;}

                         
                        input.seek(index188_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA188_20 = input.LA(1);

                         
                        int index188_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 23;}

                        else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 21;}

                         
                        input.seek(index188_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 188, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA187_eotS =
        "\33\uffff";
    static final String DFA187_eofS =
        "\33\uffff";
    static final String DFA187_minS =
        "\2\6\31\uffff";
    static final String DFA187_maxS =
        "\2\124\31\uffff";
    static final String DFA187_acceptS =
        "\2\uffff\1\2\30\1";
    static final String DFA187_specialS =
        "\1\1\1\0\31\uffff}>";
    static final String[] DFA187_transitionS = {
            "\1\5\1\21\1\23\2\uffff\1\2\1\25\5\uffff\1\22\1\uffff\1\2\1\uffff"+
            "\1\25\1\1\5\uffff\1\7\23\uffff\1\3\2\4\2\uffff\1\27\1\24\17"+
            "\uffff\1\26\1\uffff\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
            "\17\1\20\2\1",
            "\1\5\1\21\1\23\2\uffff\1\2\1\30\5\uffff\1\22\1\uffff\1\2\1"+
            "\uffff\1\30\1\1\5\uffff\1\7\23\uffff\1\3\2\4\2\uffff\1\32\1"+
            "\24\17\uffff\1\31\1\uffff\1\6\1\10\1\11\1\12\1\13\1\14\1\15"+
            "\1\16\1\17\1\20\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA187_eot = DFA.unpackEncodedString(DFA187_eotS);
    static final short[] DFA187_eof = DFA.unpackEncodedString(DFA187_eofS);
    static final char[] DFA187_min = DFA.unpackEncodedStringToUnsignedChars(DFA187_minS);
    static final char[] DFA187_max = DFA.unpackEncodedStringToUnsignedChars(DFA187_maxS);
    static final short[] DFA187_accept = DFA.unpackEncodedString(DFA187_acceptS);
    static final short[] DFA187_special = DFA.unpackEncodedString(DFA187_specialS);
    static final short[][] DFA187_transition;

    static {
        int numStates = DFA187_transitionS.length;
        DFA187_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA187_transition[i] = DFA.unpackEncodedString(DFA187_transitionS[i]);
        }
    }

    class DFA187 extends DFA {

        public DFA187(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 187;
            this.eot = DFA187_eot;
            this.eof = DFA187_eof;
            this.min = DFA187_min;
            this.max = DFA187_max;
            this.accept = DFA187_accept;
            this.special = DFA187_special;
            this.transition = DFA187_transition;
        }
        public String getDescription() {
            return "()* loopback of 909:18: ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) | ) term )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA187_1 = input.LA(1);

                         
                        int index187_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA187_1==COMMA||LA187_1==RPAREN) ) {s = 2;}

                        else if ( (LA187_1==WS||(LA187_1>=NL && LA187_1<=COMMENT)) ) {s = 1;}

                        else if ( ((LA187_1>=MINUS && LA187_1<=PLUS)) && (synpred27_Css3())) {s = 4;}

                        else if ( (LA187_1==IDENT) && (synpred27_Css3())) {s = 5;}

                        else if ( (LA187_1==NUMBER) && (synpred27_Css3())) {s = 6;}

                        else if ( (LA187_1==PERCENTAGE) && (synpred27_Css3())) {s = 7;}

                        else if ( (LA187_1==LENGTH) && (synpred27_Css3())) {s = 8;}

                        else if ( (LA187_1==EMS) && (synpred27_Css3())) {s = 9;}

                        else if ( (LA187_1==REM) && (synpred27_Css3())) {s = 10;}

                        else if ( (LA187_1==EXS) && (synpred27_Css3())) {s = 11;}

                        else if ( (LA187_1==ANGLE) && (synpred27_Css3())) {s = 12;}

                        else if ( (LA187_1==TIME) && (synpred27_Css3())) {s = 13;}

                        else if ( (LA187_1==FREQ) && (synpred27_Css3())) {s = 14;}

                        else if ( (LA187_1==RESOLUTION) && (synpred27_Css3())) {s = 15;}

                        else if ( (LA187_1==DIMENSION) && (synpred27_Css3())) {s = 16;}

                        else if ( (LA187_1==STRING) && (synpred27_Css3())) {s = 17;}

                        else if ( (LA187_1==GEN) && (synpred27_Css3())) {s = 18;}

                        else if ( (LA187_1==URI) && (synpred27_Css3())) {s = 19;}

                        else if ( (LA187_1==HASH) && (synpred27_Css3())) {s = 20;}

                        else if ( (LA187_1==MEDIA_SYM||LA187_1==AT_IDENT) && (synpred27_Css3())) {s = 24;}

                        else if ( (LA187_1==SASS_VAR) && (synpred27_Css3())) {s = 25;}

                        else if ( (LA187_1==HASH_SYMBOL) && (synpred27_Css3())) {s = 26;}

                        else if ( (LA187_1==SOLIDUS) && (synpred27_Css3())) {s = 3;}

                         
                        input.seek(index187_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA187_0 = input.LA(1);

                         
                        int index187_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA187_0==WS||(LA187_0>=NL && LA187_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA187_0==COMMA||LA187_0==RPAREN) ) {s = 2;}

                        else if ( (LA187_0==SOLIDUS) && (synpred27_Css3())) {s = 3;}

                        else if ( ((LA187_0>=MINUS && LA187_0<=PLUS)) && (synpred27_Css3())) {s = 4;}

                        else if ( (LA187_0==IDENT) && (synpred27_Css3())) {s = 5;}

                        else if ( (LA187_0==NUMBER) && (synpred27_Css3())) {s = 6;}

                        else if ( (LA187_0==PERCENTAGE) && (synpred27_Css3())) {s = 7;}

                        else if ( (LA187_0==LENGTH) && (synpred27_Css3())) {s = 8;}

                        else if ( (LA187_0==EMS) && (synpred27_Css3())) {s = 9;}

                        else if ( (LA187_0==REM) && (synpred27_Css3())) {s = 10;}

                        else if ( (LA187_0==EXS) && (synpred27_Css3())) {s = 11;}

                        else if ( (LA187_0==ANGLE) && (synpred27_Css3())) {s = 12;}

                        else if ( (LA187_0==TIME) && (synpred27_Css3())) {s = 13;}

                        else if ( (LA187_0==FREQ) && (synpred27_Css3())) {s = 14;}

                        else if ( (LA187_0==RESOLUTION) && (synpred27_Css3())) {s = 15;}

                        else if ( (LA187_0==DIMENSION) && (synpred27_Css3())) {s = 16;}

                        else if ( (LA187_0==STRING) && (synpred27_Css3())) {s = 17;}

                        else if ( (LA187_0==GEN) && (synpred27_Css3())) {s = 18;}

                        else if ( (LA187_0==URI) && (synpred27_Css3())) {s = 19;}

                        else if ( (LA187_0==HASH) && (synpred27_Css3())) {s = 20;}

                        else if ( (LA187_0==MEDIA_SYM||LA187_0==AT_IDENT) && (synpred27_Css3())) {s = 21;}

                        else if ( (LA187_0==SASS_VAR) && (synpred27_Css3())) {s = 22;}

                        else if ( (LA187_0==HASH_SYMBOL) && (synpred27_Css3())) {s = 23;}

                         
                        input.seek(index187_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 187, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA186_eotS =
        "\5\uffff";
    static final String DFA186_eofS =
        "\5\uffff";
    static final String DFA186_minS =
        "\2\6\3\uffff";
    static final String DFA186_maxS =
        "\2\124\3\uffff";
    static final String DFA186_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA186_specialS =
        "\5\uffff}>";
    static final String[] DFA186_transitionS = {
            "\3\3\3\uffff\1\3\5\uffff\1\3\3\uffff\1\3\1\1\5\uffff\1\3\23"+
            "\uffff\1\2\2\3\2\uffff\2\3\17\uffff\1\3\1\uffff\12\3\2\1",
            "\3\4\3\uffff\1\4\5\uffff\1\4\3\uffff\1\4\1\1\5\uffff\1\4\23"+
            "\uffff\1\2\2\4\2\uffff\2\4\17\uffff\1\4\1\uffff\12\4\2\1",
            "",
            "",
            ""
    };

    static final short[] DFA186_eot = DFA.unpackEncodedString(DFA186_eotS);
    static final short[] DFA186_eof = DFA.unpackEncodedString(DFA186_eofS);
    static final char[] DFA186_min = DFA.unpackEncodedStringToUnsignedChars(DFA186_minS);
    static final char[] DFA186_max = DFA.unpackEncodedStringToUnsignedChars(DFA186_maxS);
    static final short[] DFA186_accept = DFA.unpackEncodedString(DFA186_acceptS);
    static final short[] DFA186_special = DFA.unpackEncodedString(DFA186_specialS);
    static final short[][] DFA186_transition;

    static {
        int numStates = DFA186_transitionS.length;
        DFA186_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA186_transition[i] = DFA.unpackEncodedString(DFA186_transitionS[i]);
        }
    }

    class DFA186 extends DFA {

        public DFA186(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 186;
            this.eot = DFA186_eot;
            this.eof = DFA186_eof;
            this.min = DFA186_min;
            this.max = DFA186_max;
            this.accept = DFA186_accept;
            this.special = DFA186_special;
            this.transition = DFA186_transition;
        }
        public String getDescription() {
            return "909:71: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA195_eotS =
        "\4\uffff";
    static final String DFA195_eofS =
        "\2\3\2\uffff";
    static final String DFA195_minS =
        "\2\5\2\uffff";
    static final String DFA195_maxS =
        "\2\154\2\uffff";
    static final String DFA195_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA195_specialS =
        "\4\uffff}>";
    static final String[] DFA195_transitionS = {
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\2\uffff\2\3\1\1\1\3"+
            "\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1\3\1\uffff\10"+
            "\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\1\2\6\uffff\2\3\3\uffff"+
            "\1\3\1\uffff\3\3\1\uffff\6\3",
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\2\uffff\2\3\1\1\1"+
            "\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\10\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\1\2\6\uffff\2\3\3"+
            "\uffff\1\3\1\uffff\3\3\1\uffff\6\3",
            "",
            ""
    };

    static final short[] DFA195_eot = DFA.unpackEncodedString(DFA195_eotS);
    static final short[] DFA195_eof = DFA.unpackEncodedString(DFA195_eofS);
    static final char[] DFA195_min = DFA.unpackEncodedStringToUnsignedChars(DFA195_minS);
    static final char[] DFA195_max = DFA.unpackEncodedStringToUnsignedChars(DFA195_maxS);
    static final short[] DFA195_accept = DFA.unpackEncodedString(DFA195_acceptS);
    static final short[] DFA195_special = DFA.unpackEncodedString(DFA195_specialS);
    static final short[][] DFA195_transition;

    static {
        int numStates = DFA195_transitionS.length;
        DFA195_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA195_transition[i] = DFA.unpackEncodedString(DFA195_transitionS[i]);
        }
    }

    class DFA195 extends DFA {

        public DFA195(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 195;
            this.eot = DFA195_eot;
            this.eof = DFA195_eof;
            this.min = DFA195_min;
            this.max = DFA195_max;
            this.accept = DFA195_accept;
            this.special = DFA195_special;
            this.transition = DFA195_transition;
        }
        public String getDescription() {
            return "928:72: ( ( ws )? SASS_DEFAULT )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA200_eotS =
        "\54\uffff";
    static final String DFA200_eofS =
        "\1\2\53\uffff";
    static final String DFA200_minS =
        "\1\5\1\0\31\uffff\1\0\20\uffff";
    static final String DFA200_maxS =
        "\1\154\1\0\31\uffff\1\0\20\uffff";
    static final String DFA200_acceptS =
        "\2\uffff\1\2\50\uffff\1\1";
    static final String DFA200_specialS =
        "\1\uffff\1\0\31\uffff\1\1\20\uffff}>";
    static final String[] DFA200_transitionS = {
            "\2\2\3\uffff\1\2\1\33\3\2\3\uffff\1\2\1\uffff\3\2\1\1\1\2\3"+
            "\uffff\1\2\1\uffff\3\2\21\uffff\1\2\1\uffff\1\2\1\uffff\10\2"+
            "\1\uffff\1\2\7\uffff\1\2\13\uffff\2\1\1\2\6\uffff\2\2\3\uffff"+
            "\1\2\1\uffff\3\2\1\uffff\6\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA200_eot = DFA.unpackEncodedString(DFA200_eotS);
    static final short[] DFA200_eof = DFA.unpackEncodedString(DFA200_eofS);
    static final char[] DFA200_min = DFA.unpackEncodedStringToUnsignedChars(DFA200_minS);
    static final char[] DFA200_max = DFA.unpackEncodedStringToUnsignedChars(DFA200_maxS);
    static final short[] DFA200_accept = DFA.unpackEncodedString(DFA200_acceptS);
    static final short[] DFA200_special = DFA.unpackEncodedString(DFA200_specialS);
    static final short[][] DFA200_transition;

    static {
        int numStates = DFA200_transitionS.length;
        DFA200_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA200_transition[i] = DFA.unpackEncodedString(DFA200_transitionS[i]);
        }
    }

    class DFA200 extends DFA {

        public DFA200(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 200;
            this.eot = DFA200_eot;
            this.eof = DFA200_eof;
            this.min = DFA200_min;
            this.max = DFA200_max;
            this.accept = DFA200_accept;
            this.special = DFA200_special;
            this.transition = DFA200_transition;
        }
        public String getDescription() {
            return "()* loopback of 943:5: ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA200_1 = input.LA(1);

                         
                        int index200_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_Css3()) ) {s = 43;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index200_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA200_27 = input.LA(1);

                         
                        int index200_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_Css3()) ) {s = 43;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index200_27);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 200, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA204_eotS =
        "\77\uffff";
    static final String DFA204_eofS =
        "\1\2\76\uffff";
    static final String DFA204_minS =
        "\1\5\1\0\10\uffff\6\0\13\uffff\1\0\1\uffff\1\0\5\uffff\1\0\33\uffff";
    static final String DFA204_maxS =
        "\1\154\1\0\10\uffff\6\0\13\uffff\1\0\1\uffff\1\0\5\uffff\1\0\33"+
        "\uffff";
    static final String DFA204_acceptS =
        "\2\uffff\1\3\52\uffff\1\1\21\2";
    static final String DFA204_specialS =
        "\1\0\1\1\10\uffff\1\2\1\3\1\4\1\5\1\6\1\7\13\uffff\1\10\1\uffff"+
        "\1\11\5\uffff\1\12\33\uffff}>";
    static final String[] DFA204_transitionS = {
            "\1\2\1\13\1\73\1\74\1\uffff\2\2\1\43\2\2\1\55\1\uffff\1\56\1"+
            "\15\1\76\2\2\1\16\1\1\1\2\3\uffff\1\2\1\61\3\2\21\uffff\1\33"+
            "\1\57\1\35\1\uffff\1\12\1\14\6\2\1\uffff\1\2\7\uffff\1\17\1"+
            "\75\1\60\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\2\1\1"+
            "\2\6\55\4\2\1\uffff\1\2\1\uffff\3\2\1\uffff\6\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA204_eot = DFA.unpackEncodedString(DFA204_eotS);
    static final short[] DFA204_eof = DFA.unpackEncodedString(DFA204_eofS);
    static final char[] DFA204_min = DFA.unpackEncodedStringToUnsignedChars(DFA204_minS);
    static final char[] DFA204_max = DFA.unpackEncodedStringToUnsignedChars(DFA204_maxS);
    static final short[] DFA204_accept = DFA.unpackEncodedString(DFA204_acceptS);
    static final short[] DFA204_special = DFA.unpackEncodedString(DFA204_specialS);
    static final short[][] DFA204_transition;

    static {
        int numStates = DFA204_transitionS.length;
        DFA204_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA204_transition[i] = DFA.unpackEncodedString(DFA204_transitionS[i]);
        }
    }

    class DFA204 extends DFA {

        public DFA204(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 204;
            this.eot = DFA204_eot;
            this.eof = DFA204_eof;
            this.min = DFA204_min;
            this.max = DFA204_max;
            this.accept = DFA204_accept;
            this.special = DFA204_special;
            this.transition = DFA204_transition;
        }
        public String getDescription() {
            return "()* loopback of 959:5: ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA204_0 = input.LA(1);

                         
                        int index204_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA204_0==WS||(LA204_0>=NL && LA204_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA204_0==EOF||LA204_0==SEMI||(LA204_0>=IMPORT_SYM && LA204_0<=COMMA)||(LA204_0>=LBRACE && LA204_0<=RBRACE)||(LA204_0>=RPAREN && LA204_0<=COLON)||LA204_0==MOZ_DOCUMENT_SYM||LA204_0==WEBKIT_KEYFRAMES_SYM||(LA204_0>=PAGE_SYM && LA204_0<=FONT_FACE_SYM)||(LA204_0>=DOT && LA204_0<=PIPE)||LA204_0==LESS_AND||LA204_0==SASS_DEFAULT||(LA204_0>=SASS_MIXIN && LA204_0<=LESS_REST)||LA204_0==SASS_EXTEND||(LA204_0>=SASS_DEBUG && LA204_0<=SASS_IF)||(LA204_0>=SASS_FOR && LA204_0<=SASS_CONTENT)) ) {s = 2;}

                        else if ( (LA204_0==HASH_SYMBOL) ) {s = 10;}

                        else if ( (LA204_0==IDENT) ) {s = 11;}

                        else if ( (LA204_0==HASH) ) {s = 12;}

                        else if ( (LA204_0==GEN) ) {s = 13;}

                        else if ( (LA204_0==AT_IDENT) ) {s = 14;}

                        else if ( (LA204_0==SASS_VAR) ) {s = 15;}

                        else if ( (LA204_0==MINUS) ) {s = 27;}

                        else if ( (LA204_0==GREATER) ) {s = 29;}

                        else if ( (LA204_0==MEDIA_SYM) ) {s = 35;}

                        else if ( (LA204_0==AND||(LA204_0>=OR && LA204_0<=GREATER_OR_EQ)) && (synpred29_Css3())) {s = 45;}

                        else if ( (LA204_0==NOT) && (synpred30_Css3())) {s = 46;}

                        else if ( (LA204_0==PLUS) && (synpred30_Css3())) {s = 47;}

                        else if ( (LA204_0==NUMBER) && (synpred30_Css3())) {s = 48;}

                        else if ( (LA204_0==PERCENTAGE) && (synpred30_Css3())) {s = 49;}

                        else if ( (LA204_0==LENGTH) && (synpred30_Css3())) {s = 50;}

                        else if ( (LA204_0==EMS) && (synpred30_Css3())) {s = 51;}

                        else if ( (LA204_0==REM) && (synpred30_Css3())) {s = 52;}

                        else if ( (LA204_0==EXS) && (synpred30_Css3())) {s = 53;}

                        else if ( (LA204_0==ANGLE) && (synpred30_Css3())) {s = 54;}

                        else if ( (LA204_0==TIME) && (synpred30_Css3())) {s = 55;}

                        else if ( (LA204_0==FREQ) && (synpred30_Css3())) {s = 56;}

                        else if ( (LA204_0==RESOLUTION) && (synpred30_Css3())) {s = 57;}

                        else if ( (LA204_0==DIMENSION) && (synpred30_Css3())) {s = 58;}

                        else if ( (LA204_0==STRING) && (synpred30_Css3())) {s = 59;}

                        else if ( (LA204_0==URI) && (synpred30_Css3())) {s = 60;}

                        else if ( (LA204_0==IMPORTANT_SYM) && (synpred30_Css3())) {s = 61;}

                        else if ( (LA204_0==LPAREN) && (synpred30_Css3())) {s = 62;}

                         
                        input.seek(index204_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA204_1 = input.LA(1);

                         
                        int index204_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 45;}

                        else if ( (synpred30_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index204_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA204_10 = input.LA(1);

                         
                        int index204_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index204_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA204_11 = input.LA(1);

                         
                        int index204_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index204_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA204_12 = input.LA(1);

                         
                        int index204_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index204_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA204_13 = input.LA(1);

                         
                        int index204_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index204_13);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA204_14 = input.LA(1);

                         
                        int index204_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index204_14);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA204_15 = input.LA(1);

                         
                        int index204_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 62;}

                        else if ( ((((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()")||((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}

                         
                        input.seek(index204_15);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA204_27 = input.LA(1);

                         
                        int index204_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_Css3()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index204_27);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA204_29 = input.LA(1);

                         
                        int index204_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_Css3()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index204_29);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA204_35 = input.LA(1);

                         
                        int index204_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred30_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index204_35);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 204, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA209_eotS =
        "\30\uffff";
    static final String DFA209_eofS =
        "\30\uffff";
    static final String DFA209_minS =
        "\1\6\25\uffff\1\0\1\uffff";
    static final String DFA209_maxS =
        "\1\122\25\uffff\1\0\1\uffff";
    static final String DFA209_acceptS =
        "\1\uffff\25\1\1\uffff\1\2";
    static final String DFA209_specialS =
        "\1\0\25\uffff\1\1\1\uffff}>";
    static final String[] DFA209_transitionS = {
            "\1\2\1\16\1\20\3\uffff\1\22\5\uffff\1\17\1\26\2\uffff\1\22\6"+
            "\uffff\1\4\24\uffff\2\1\2\uffff\1\24\1\21\17\uffff\1\23\1\25"+
            "\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA209_eot = DFA.unpackEncodedString(DFA209_eotS);
    static final short[] DFA209_eof = DFA.unpackEncodedString(DFA209_eofS);
    static final char[] DFA209_min = DFA.unpackEncodedStringToUnsignedChars(DFA209_minS);
    static final char[] DFA209_max = DFA.unpackEncodedStringToUnsignedChars(DFA209_maxS);
    static final short[] DFA209_accept = DFA.unpackEncodedString(DFA209_acceptS);
    static final short[] DFA209_special = DFA.unpackEncodedString(DFA209_specialS);
    static final short[][] DFA209_transition;

    static {
        int numStates = DFA209_transitionS.length;
        DFA209_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA209_transition[i] = DFA.unpackEncodedString(DFA209_transitionS[i]);
        }
    }

    class DFA209 extends DFA {

        public DFA209(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 209;
            this.eot = DFA209_eot;
            this.eof = DFA209_eof;
            this.min = DFA209_min;
            this.max = DFA209_max;
            this.accept = DFA209_accept;
            this.special = DFA209_special;
            this.transition = DFA209_transition;
        }
        public String getDescription() {
            return "973:9: ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? cp_expression_list ( ws )? RPAREN )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA209_0 = input.LA(1);

                         
                        int index209_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA209_0>=MINUS && LA209_0<=PLUS)) && (synpred31_Css3())) {s = 1;}

                        else if ( (LA209_0==IDENT) && (synpred31_Css3())) {s = 2;}

                        else if ( (LA209_0==NUMBER) && (synpred31_Css3())) {s = 3;}

                        else if ( (LA209_0==PERCENTAGE) && (synpred31_Css3())) {s = 4;}

                        else if ( (LA209_0==LENGTH) && (synpred31_Css3())) {s = 5;}

                        else if ( (LA209_0==EMS) && (synpred31_Css3())) {s = 6;}

                        else if ( (LA209_0==REM) && (synpred31_Css3())) {s = 7;}

                        else if ( (LA209_0==EXS) && (synpred31_Css3())) {s = 8;}

                        else if ( (LA209_0==ANGLE) && (synpred31_Css3())) {s = 9;}

                        else if ( (LA209_0==TIME) && (synpred31_Css3())) {s = 10;}

                        else if ( (LA209_0==FREQ) && (synpred31_Css3())) {s = 11;}

                        else if ( (LA209_0==RESOLUTION) && (synpred31_Css3())) {s = 12;}

                        else if ( (LA209_0==DIMENSION) && (synpred31_Css3())) {s = 13;}

                        else if ( (LA209_0==STRING) && (synpred31_Css3())) {s = 14;}

                        else if ( (LA209_0==GEN) && (synpred31_Css3())) {s = 15;}

                        else if ( (LA209_0==URI) && (synpred31_Css3())) {s = 16;}

                        else if ( (LA209_0==HASH) && (synpred31_Css3())) {s = 17;}

                        else if ( (LA209_0==MEDIA_SYM||LA209_0==AT_IDENT) && (synpred31_Css3())) {s = 18;}

                        else if ( (LA209_0==SASS_VAR) && (synpred31_Css3())) {s = 19;}

                        else if ( (LA209_0==HASH_SYMBOL) && (synpred31_Css3())) {s = 20;}

                        else if ( (LA209_0==IMPORTANT_SYM) && (synpred31_Css3())) {s = 21;}

                        else if ( (LA209_0==LPAREN) ) {s = 22;}

                         
                        input.seek(index209_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA209_22 = input.LA(1);

                         
                        int index209_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_Css3()) ) {s = 21;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index209_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 209, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA213_eotS =
        "\100\uffff";
    static final String DFA213_eofS =
        "\1\2\77\uffff";
    static final String DFA213_minS =
        "\1\5\1\0\4\uffff\1\0\32\uffff\2\0\35\uffff";
    static final String DFA213_maxS =
        "\1\154\1\0\4\uffff\1\0\32\uffff\2\0\35\uffff";
    static final String DFA213_acceptS =
        "\2\uffff\1\2\74\uffff\1\1";
    static final String DFA213_specialS =
        "\1\0\1\1\4\uffff\1\2\32\uffff\1\3\1\4\35\uffff}>";
    static final String[] DFA213_transitionS = {
            "\4\2\1\uffff\6\2\1\uffff\6\2\1\1\1\2\3\uffff\5\2\20\uffff\1"+
            "\77\1\6\1\42\1\2\1\uffff\6\2\1\41\1\2\1\uffff\1\2\7\uffff\14"+
            "\2\2\1\13\2\1\uffff\1\2\1\uffff\3\2\1\uffff\6\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA213_eot = DFA.unpackEncodedString(DFA213_eotS);
    static final short[] DFA213_eof = DFA.unpackEncodedString(DFA213_eofS);
    static final char[] DFA213_min = DFA.unpackEncodedStringToUnsignedChars(DFA213_minS);
    static final char[] DFA213_max = DFA.unpackEncodedStringToUnsignedChars(DFA213_maxS);
    static final short[] DFA213_accept = DFA.unpackEncodedString(DFA213_acceptS);
    static final short[] DFA213_special = DFA.unpackEncodedString(DFA213_specialS);
    static final short[][] DFA213_transition;

    static {
        int numStates = DFA213_transitionS.length;
        DFA213_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA213_transition[i] = DFA.unpackEncodedString(DFA213_transitionS[i]);
        }
    }

    class DFA213 extends DFA {

        public DFA213(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 213;
            this.eot = DFA213_eot;
            this.eof = DFA213_eof;
            this.min = DFA213_min;
            this.max = DFA213_max;
            this.accept = DFA213_accept;
            this.special = DFA213_special;
            this.transition = DFA213_transition;
        }
        public String getDescription() {
            return "()* loopback of 1000:10: ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA213_0 = input.LA(1);

                         
                        int index213_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_0==WS||(LA213_0>=NL && LA213_0<=COMMENT)) ) {s = 1;}

                        else if ( (LA213_0==EOF||(LA213_0>=SEMI && LA213_0<=URI)||(LA213_0>=IMPORT_SYM && LA213_0<=AND)||(LA213_0>=NOT && LA213_0<=AT_IDENT)||LA213_0==MOZ_DOCUMENT_SYM||(LA213_0>=WEBKIT_KEYFRAMES_SYM && LA213_0<=FONT_FACE_SYM)||LA213_0==GREATER||(LA213_0>=HASH_SYMBOL && LA213_0<=SASS_EXTEND_ONLY_SELECTOR)||LA213_0==PIPE||LA213_0==LESS_AND||(LA213_0>=SASS_VAR && LA213_0<=DIMENSION)||(LA213_0>=SASS_DEFAULT && LA213_0<=LESS_REST)||LA213_0==SASS_EXTEND||(LA213_0>=SASS_DEBUG && LA213_0<=SASS_IF)||(LA213_0>=SASS_FOR && LA213_0<=SASS_CONTENT)) ) {s = 2;}

                        else if ( (LA213_0==MINUS) ) {s = 6;}

                        else if ( (LA213_0==STAR) ) {s = 33;}

                        else if ( (LA213_0==PLUS) ) {s = 34;}

                        else if ( (LA213_0==SOLIDUS) && (synpred32_Css3())) {s = 63;}

                         
                        input.seek(index213_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA213_1 = input.LA(1);

                         
                        int index213_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_Css3()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index213_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA213_6 = input.LA(1);

                         
                        int index213_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_Css3()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index213_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA213_33 = input.LA(1);

                         
                        int index213_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_Css3()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index213_33);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA213_34 = input.LA(1);

                         
                        int index213_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_Css3()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index213_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 213, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA218_eotS =
        "\6\uffff";
    static final String DFA218_eofS =
        "\6\uffff";
    static final String DFA218_minS =
        "\2\6\3\uffff\1\6";
    static final String DFA218_maxS =
        "\1\122\1\124\3\uffff\1\124";
    static final String DFA218_acceptS =
        "\2\uffff\1\1\1\2\1\3\1\uffff";
    static final String DFA218_specialS =
        "\6\uffff}>";
    static final String[] DFA218_transitionS = {
            "\3\2\3\uffff\1\2\5\uffff\1\2\1\4\2\uffff\1\2\6\uffff\1\2\24"+
            "\uffff\2\1\2\uffff\2\2\17\uffff\1\2\1\3\12\2",
            "\3\2\3\uffff\1\2\5\uffff\1\2\1\4\2\uffff\1\2\1\5\5\uffff\1"+
            "\2\30\uffff\2\2\17\uffff\1\2\1\uffff\12\2\2\5",
            "",
            "",
            "",
            "\3\2\3\uffff\1\2\5\uffff\1\2\1\4\2\uffff\1\2\1\5\5\uffff\1"+
            "\2\30\uffff\2\2\17\uffff\1\2\1\uffff\12\2\2\5"
    };

    static final short[] DFA218_eot = DFA.unpackEncodedString(DFA218_eotS);
    static final short[] DFA218_eof = DFA.unpackEncodedString(DFA218_eofS);
    static final char[] DFA218_min = DFA.unpackEncodedStringToUnsignedChars(DFA218_minS);
    static final char[] DFA218_max = DFA.unpackEncodedStringToUnsignedChars(DFA218_maxS);
    static final short[] DFA218_accept = DFA.unpackEncodedString(DFA218_acceptS);
    static final short[] DFA218_special = DFA.unpackEncodedString(DFA218_specialS);
    static final short[][] DFA218_transition;

    static {
        int numStates = DFA218_transitionS.length;
        DFA218_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA218_transition[i] = DFA.unpackEncodedString(DFA218_transitionS[i]);
        }
    }

    class DFA218 extends DFA {

        public DFA218(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 218;
            this.eot = DFA218_eot;
            this.eof = DFA218_eof;
            this.min = DFA218_min;
            this.max = DFA218_max;
            this.accept = DFA218_accept;
            this.special = DFA218_special;
            this.transition = DFA218_transition;
        }
        public String getDescription() {
            return "1005:1: cp_math_expression_atom : ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA223_eotS =
        "\4\uffff";
    static final String DFA223_eofS =
        "\4\uffff";
    static final String DFA223_minS =
        "\2\15\2\uffff";
    static final String DFA223_maxS =
        "\2\140\2\uffff";
    static final String DFA223_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA223_specialS =
        "\4\uffff}>";
    static final String[] DFA223_transitionS = {
            "\1\3\11\uffff\1\1\73\uffff\2\1\13\uffff\1\2",
            "\1\3\11\uffff\1\1\73\uffff\2\1\13\uffff\1\2",
            "",
            ""
    };

    static final short[] DFA223_eot = DFA.unpackEncodedString(DFA223_eotS);
    static final short[] DFA223_eof = DFA.unpackEncodedString(DFA223_eofS);
    static final char[] DFA223_min = DFA.unpackEncodedStringToUnsignedChars(DFA223_minS);
    static final char[] DFA223_max = DFA.unpackEncodedStringToUnsignedChars(DFA223_maxS);
    static final short[] DFA223_accept = DFA.unpackEncodedString(DFA223_acceptS);
    static final short[] DFA223_special = DFA.unpackEncodedString(DFA223_specialS);
    static final short[][] DFA223_transition;

    static {
        int numStates = DFA223_transitionS.length;
        DFA223_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA223_transition[i] = DFA.unpackEncodedString(DFA223_transitionS[i]);
        }
    }

    class DFA223 extends DFA {

        public DFA223(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 223;
            this.eot = DFA223_eot;
            this.eof = DFA223_eof;
            this.min = DFA223_min;
            this.max = DFA223_max;
            this.accept = DFA223_accept;
            this.special = DFA223_special;
            this.transition = DFA223_transition;
        }
        public String getDescription() {
            return "1021:81: ( ( ws )? less_mixin_guarded )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA227_eotS =
        "\4\uffff";
    static final String DFA227_eofS =
        "\4\uffff";
    static final String DFA227_minS =
        "\2\15\2\uffff";
    static final String DFA227_maxS =
        "\2\124\2\uffff";
    static final String DFA227_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA227_specialS =
        "\4\uffff}>";
    static final String[] DFA227_transitionS = {
            "\1\3\5\uffff\1\2\3\uffff\1\1\73\uffff\2\1",
            "\1\3\5\uffff\1\2\3\uffff\1\1\73\uffff\2\1",
            "",
            ""
    };

    static final short[] DFA227_eot = DFA.unpackEncodedString(DFA227_eotS);
    static final short[] DFA227_eof = DFA.unpackEncodedString(DFA227_eofS);
    static final char[] DFA227_min = DFA.unpackEncodedStringToUnsignedChars(DFA227_minS);
    static final char[] DFA227_max = DFA.unpackEncodedStringToUnsignedChars(DFA227_maxS);
    static final short[] DFA227_accept = DFA.unpackEncodedString(DFA227_acceptS);
    static final short[] DFA227_special = DFA.unpackEncodedString(DFA227_specialS);
    static final short[][] DFA227_transition;

    static {
        int numStates = DFA227_transitionS.length;
        DFA227_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA227_transition[i] = DFA.unpackEncodedString(DFA227_transitionS[i]);
        }
    }

    class DFA227 extends DFA {

        public DFA227(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 227;
            this.eot = DFA227_eot;
            this.eof = DFA227_eof;
            this.min = DFA227_min;
            this.max = DFA227_max;
            this.accept = DFA227_accept;
            this.special = DFA227_special;
            this.transition = DFA227_transition;
        }
        public String getDescription() {
            return "1023:55: ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA233_eotS =
        "\4\uffff";
    static final String DFA233_eofS =
        "\2\3\2\uffff";
    static final String DFA233_minS =
        "\2\5\2\uffff";
    static final String DFA233_maxS =
        "\2\154\2\uffff";
    static final String DFA233_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA233_specialS =
        "\4\uffff}>";
    static final String[] DFA233_transitionS = {
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\1\2\1\uffff\2\3\1\1"+
            "\1\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\10\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff\2\3\3\uffff"+
            "\1\3\1\uffff\3\3\1\uffff\6\3",
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\1\2\1\uffff\2\3\1"+
            "\1\1\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\10\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff\2\3\3\uffff"+
            "\1\3\1\uffff\3\3\1\uffff\6\3",
            "",
            ""
    };

    static final short[] DFA233_eot = DFA.unpackEncodedString(DFA233_eotS);
    static final short[] DFA233_eof = DFA.unpackEncodedString(DFA233_eofS);
    static final char[] DFA233_min = DFA.unpackEncodedStringToUnsignedChars(DFA233_minS);
    static final char[] DFA233_max = DFA.unpackEncodedStringToUnsignedChars(DFA233_maxS);
    static final short[] DFA233_accept = DFA.unpackEncodedString(DFA233_acceptS);
    static final short[] DFA233_special = DFA.unpackEncodedString(DFA233_specialS);
    static final short[][] DFA233_transition;

    static {
        int numStates = DFA233_transitionS.length;
        DFA233_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA233_transition[i] = DFA.unpackEncodedString(DFA233_transitionS[i]);
        }
    }

    class DFA233 extends DFA {

        public DFA233(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 233;
            this.eot = DFA233_eot;
            this.eof = DFA233_eof;
            this.min = DFA233_min;
            this.max = DFA233_max;
            this.accept = DFA233_accept;
            this.special = DFA233_special;
            this.transition = DFA233_transition;
        }
        public String getDescription() {
            return "1033:45: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA237_eotS =
        "\4\uffff";
    static final String DFA237_eofS =
        "\2\3\2\uffff";
    static final String DFA237_minS =
        "\2\5\2\uffff";
    static final String DFA237_maxS =
        "\2\154\2\uffff";
    static final String DFA237_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA237_specialS =
        "\4\uffff}>";
    static final String[] DFA237_transitionS = {
            "\2\3\3\uffff\5\3\3\uffff\1\3\1\2\1\uffff\2\3\1\1\1\3\3\uffff"+
            "\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1\3\1\uffff\10\3\1\uffff"+
            "\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff\2\3\3\uffff\1\3\1\uffff"+
            "\3\3\1\uffff\6\3",
            "\2\3\3\uffff\5\3\3\uffff\1\3\1\2\1\uffff\2\3\1\1\1\3\3\uffff"+
            "\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1\3\1\uffff\10\3\1\uffff"+
            "\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff\2\3\3\uffff\1\3\1\uffff"+
            "\3\3\1\uffff\6\3",
            "",
            ""
    };

    static final short[] DFA237_eot = DFA.unpackEncodedString(DFA237_eotS);
    static final short[] DFA237_eof = DFA.unpackEncodedString(DFA237_eofS);
    static final char[] DFA237_min = DFA.unpackEncodedStringToUnsignedChars(DFA237_minS);
    static final char[] DFA237_max = DFA.unpackEncodedStringToUnsignedChars(DFA237_maxS);
    static final short[] DFA237_accept = DFA.unpackEncodedString(DFA237_acceptS);
    static final short[] DFA237_special = DFA.unpackEncodedString(DFA237_specialS);
    static final short[][] DFA237_transition;

    static {
        int numStates = DFA237_transitionS.length;
        DFA237_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA237_transition[i] = DFA.unpackEncodedString(DFA237_transitionS[i]);
        }
    }

    class DFA237 extends DFA {

        public DFA237(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 237;
            this.eot = DFA237_eot;
            this.eof = DFA237_eof;
            this.min = DFA237_min;
            this.max = DFA237_max;
            this.accept = DFA237_accept;
            this.special = DFA237_special;
            this.transition = DFA237_transition;
        }
        public String getDescription() {
            return "1035:57: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA239_eotS =
        "\4\uffff";
    static final String DFA239_eofS =
        "\2\3\2\uffff";
    static final String DFA239_minS =
        "\2\5\2\uffff";
    static final String DFA239_maxS =
        "\2\154\2\uffff";
    static final String DFA239_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA239_specialS =
        "\4\uffff}>";
    static final String[] DFA239_transitionS = {
            "\2\3\3\uffff\3\3\1\2\1\3\3\uffff\1\3\2\uffff\2\3\1\1\1\3\3\uffff"+
            "\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1\3\1\uffff\10\3\1\uffff"+
            "\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff\2\3\3\uffff\1\3\1\uffff"+
            "\3\3\1\uffff\6\3",
            "\2\3\3\uffff\3\3\1\2\1\3\3\uffff\1\3\2\uffff\2\3\1\1\1\3\3"+
            "\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1\3\1\uffff\10\3"+
            "\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff\2\3\3\uffff\1"+
            "\3\1\uffff\3\3\1\uffff\6\3",
            "",
            ""
    };

    static final short[] DFA239_eot = DFA.unpackEncodedString(DFA239_eotS);
    static final short[] DFA239_eof = DFA.unpackEncodedString(DFA239_eofS);
    static final char[] DFA239_min = DFA.unpackEncodedStringToUnsignedChars(DFA239_minS);
    static final char[] DFA239_max = DFA.unpackEncodedStringToUnsignedChars(DFA239_maxS);
    static final short[] DFA239_accept = DFA.unpackEncodedString(DFA239_acceptS);
    static final short[] DFA239_special = DFA.unpackEncodedString(DFA239_specialS);
    static final short[][] DFA239_transition;

    static {
        int numStates = DFA239_transitionS.length;
        DFA239_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA239_transition[i] = DFA.unpackEncodedString(DFA239_transitionS[i]);
        }
    }

    class DFA239 extends DFA {

        public DFA239(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 239;
            this.eot = DFA239_eot;
            this.eof = DFA239_eof;
            this.min = DFA239_min;
            this.max = DFA239_max;
            this.accept = DFA239_accept;
            this.special = DFA239_special;
            this.transition = DFA239_transition;
        }
        public String getDescription() {
            return "1035:102: ( ( ws )? cp_mixin_block )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA248_eotS =
        "\7\uffff";
    static final String DFA248_eofS =
        "\7\uffff";
    static final String DFA248_minS =
        "\1\6\2\5\1\uffff\1\5\1\uffff\1\5";
    static final String DFA248_maxS =
        "\1\122\2\136\1\uffff\1\136\1\uffff\1\136";
    static final String DFA248_acceptS =
        "\3\uffff\1\2\1\uffff\1\1\1\uffff";
    static final String DFA248_specialS =
        "\7\uffff}>";
    static final String[] DFA248_transitionS = {
            "\3\3\3\uffff\1\1\4\uffff\3\3\2\uffff\1\1\6\uffff\1\3\24\uffff"+
            "\2\3\2\uffff\2\3\17\uffff\1\2\13\3",
            "\4\3\2\uffff\2\3\2\uffff\1\3\1\uffff\4\3\1\5\1\3\1\4\5\uffff"+
            "\1\3\23\uffff\4\3\1\uffff\2\3\4\uffff\1\3\12\uffff\14\3\2\4"+
            "\1\uffff\6\3\2\uffff\1\3",
            "\4\3\2\uffff\2\3\2\uffff\1\3\1\uffff\4\3\1\5\1\3\1\6\5\uffff"+
            "\1\3\23\uffff\4\3\1\uffff\2\3\4\uffff\1\3\12\uffff\14\3\2\6"+
            "\1\uffff\6\3\2\uffff\1\3",
            "",
            "\4\3\2\uffff\2\3\2\uffff\1\3\1\uffff\4\3\1\5\1\3\1\4\5\uffff"+
            "\1\3\23\uffff\4\3\1\uffff\2\3\4\uffff\1\3\12\uffff\14\3\2\4"+
            "\1\uffff\6\3\2\uffff\1\3",
            "",
            "\4\3\2\uffff\2\3\2\uffff\1\3\1\uffff\4\3\1\5\1\3\1\6\5\uffff"+
            "\1\3\23\uffff\4\3\1\uffff\2\3\4\uffff\1\3\12\uffff\14\3\2\6"+
            "\1\uffff\6\3\2\uffff\1\3"
    };

    static final short[] DFA248_eot = DFA.unpackEncodedString(DFA248_eotS);
    static final short[] DFA248_eof = DFA.unpackEncodedString(DFA248_eofS);
    static final char[] DFA248_min = DFA.unpackEncodedStringToUnsignedChars(DFA248_minS);
    static final char[] DFA248_max = DFA.unpackEncodedStringToUnsignedChars(DFA248_maxS);
    static final short[] DFA248_accept = DFA.unpackEncodedString(DFA248_acceptS);
    static final short[] DFA248_special = DFA.unpackEncodedString(DFA248_specialS);
    static final short[][] DFA248_transition;

    static {
        int numStates = DFA248_transitionS.length;
        DFA248_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA248_transition[i] = DFA.unpackEncodedString(DFA248_transitionS[i]);
        }
    }

    class DFA248 extends DFA {

        public DFA248(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 248;
            this.eot = DFA248_eot;
            this.eof = DFA248_eof;
            this.min = DFA248_min;
            this.max = DFA248_max;
            this.accept = DFA248_accept;
            this.special = DFA248_special;
            this.transition = DFA248_transition;
        }
        public String getDescription() {
            return "1060:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA251_eotS =
        "\5\uffff";
    static final String DFA251_eofS =
        "\5\uffff";
    static final String DFA251_minS =
        "\1\5\1\14\1\uffff\1\14\1\uffff";
    static final String DFA251_maxS =
        "\2\137\1\uffff\1\137\1\uffff";
    static final String DFA251_acceptS =
        "\2\uffff\1\2\1\uffff\1\1";
    static final String DFA251_specialS =
        "\5\uffff}>";
    static final String[] DFA251_transitionS = {
            "\1\1\5\uffff\1\1\10\uffff\1\2\111\uffff\2\2",
            "\1\4\11\uffff\1\4\1\3\57\uffff\1\4\13\uffff\2\3\11\uffff\2"+
            "\2",
            "",
            "\1\4\11\uffff\1\4\1\3\57\uffff\1\4\13\uffff\2\3\11\uffff\2"+
            "\2",
            ""
    };

    static final short[] DFA251_eot = DFA.unpackEncodedString(DFA251_eotS);
    static final short[] DFA251_eof = DFA.unpackEncodedString(DFA251_eofS);
    static final char[] DFA251_min = DFA.unpackEncodedStringToUnsignedChars(DFA251_minS);
    static final char[] DFA251_max = DFA.unpackEncodedStringToUnsignedChars(DFA251_maxS);
    static final short[] DFA251_accept = DFA.unpackEncodedString(DFA251_acceptS);
    static final short[] DFA251_special = DFA.unpackEncodedString(DFA251_specialS);
    static final short[][] DFA251_transition;

    static {
        int numStates = DFA251_transitionS.length;
        DFA251_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA251_transition[i] = DFA.unpackEncodedString(DFA251_transitionS[i]);
        }
    }

    class DFA251 extends DFA {

        public DFA251(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 251;
            this.eot = DFA251_eot;
            this.eof = DFA251_eof;
            this.min = DFA251_min;
            this.max = DFA251_max;
            this.accept = DFA251_accept;
            this.special = DFA251_special;
            this.transition = DFA251_transition;
        }
        public String getDescription() {
            return "()* loopback of 1075:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA277_eotS =
        "\4\uffff";
    static final String DFA277_eofS =
        "\4\uffff";
    static final String DFA277_minS =
        "\2\6\2\uffff";
    static final String DFA277_maxS =
        "\2\124\2\uffff";
    static final String DFA277_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA277_specialS =
        "\4\uffff}>";
    static final String[] DFA277_transitionS = {
            "\1\3\4\uffff\1\3\1\uffff\1\2\7\uffff\1\3\1\uffff\1\1\32\uffff"+
            "\1\3\1\uffff\1\3\1\uffff\3\3\3\uffff\1\3\2\uffff\1\3\23\uffff"+
            "\2\1",
            "\1\3\4\uffff\1\3\1\uffff\1\2\7\uffff\1\3\1\uffff\1\1\32\uffff"+
            "\1\3\1\uffff\1\3\1\uffff\3\3\3\uffff\1\3\2\uffff\1\3\23\uffff"+
            "\2\1",
            "",
            ""
    };

    static final short[] DFA277_eot = DFA.unpackEncodedString(DFA277_eotS);
    static final short[] DFA277_eof = DFA.unpackEncodedString(DFA277_eofS);
    static final char[] DFA277_min = DFA.unpackEncodedStringToUnsignedChars(DFA277_minS);
    static final char[] DFA277_max = DFA.unpackEncodedStringToUnsignedChars(DFA277_maxS);
    static final short[] DFA277_accept = DFA.unpackEncodedString(DFA277_acceptS);
    static final short[] DFA277_special = DFA.unpackEncodedString(DFA277_specialS);
    static final short[][] DFA277_transition;

    static {
        int numStates = DFA277_transitionS.length;
        DFA277_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA277_transition[i] = DFA.unpackEncodedString(DFA277_transitionS[i]);
        }
    }

    class DFA277 extends DFA {

        public DFA277(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 277;
            this.eot = DFA277_eot;
            this.eof = DFA277_eof;
            this.min = DFA277_min;
            this.max = DFA277_max;
            this.accept = DFA277_accept;
            this.special = DFA277_special;
            this.transition = DFA277_transition;
        }
        public String getDescription() {
            return "()* loopback of 1136:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH | COLON | LESS_AND | COMMA | STAR | GREATER ) ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA281_eotS =
        "\4\uffff";
    static final String DFA281_eofS =
        "\4\uffff";
    static final String DFA281_minS =
        "\2\6\2\uffff";
    static final String DFA281_maxS =
        "\2\124\2\uffff";
    static final String DFA281_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA281_specialS =
        "\4\uffff}>";
    static final String[] DFA281_transitionS = {
            "\1\3\16\uffff\1\2\1\uffff\1\1\32\uffff\1\3\3\uffff\3\3\32\uffff"+
            "\2\1",
            "\1\3\16\uffff\1\2\1\uffff\1\1\32\uffff\1\3\3\uffff\3\3\32\uffff"+
            "\2\1",
            "",
            ""
    };

    static final short[] DFA281_eot = DFA.unpackEncodedString(DFA281_eotS);
    static final short[] DFA281_eof = DFA.unpackEncodedString(DFA281_eofS);
    static final char[] DFA281_min = DFA.unpackEncodedStringToUnsignedChars(DFA281_minS);
    static final char[] DFA281_max = DFA.unpackEncodedStringToUnsignedChars(DFA281_maxS);
    static final short[] DFA281_accept = DFA.unpackEncodedString(DFA281_acceptS);
    static final short[] DFA281_special = DFA.unpackEncodedString(DFA281_specialS);
    static final short[][] DFA281_transition;

    static {
        int numStates = DFA281_transitionS.length;
        DFA281_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA281_transition[i] = DFA.unpackEncodedString(DFA281_transitionS[i]);
        }
    }

    class DFA281 extends DFA {

        public DFA281(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 281;
            this.eot = DFA281_eot;
            this.eof = DFA281_eof;
            this.min = DFA281_min;
            this.max = DFA281_max;
            this.accept = DFA281_accept;
            this.special = DFA281_special;
            this.transition = DFA281_transition;
        }
        public String getDescription() {
            return "()* loopback of 1154:9: ( ( ws )? ( ( sass_interpolation_expression_var )=> sass_interpolation_expression_var | ( IDENT | MINUS | DOT | HASH_SYMBOL | HASH ) ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA288_eotS =
        "\4\uffff";
    static final String DFA288_eofS =
        "\4\uffff";
    static final String DFA288_minS =
        "\2\5\2\uffff";
    static final String DFA288_maxS =
        "\2\154\2\uffff";
    static final String DFA288_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA288_specialS =
        "\4\uffff}>";
    static final String[] DFA288_transitionS = {
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\2\uffff\2\3\1\1\1\3"+
            "\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1\3\1\uffff\10"+
            "\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff\2\3\3\uffff"+
            "\1\3\1\2\3\3\1\uffff\3\3\1\uffff\2\3",
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\2\uffff\2\3\1\1\1"+
            "\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\10\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff\2\3\3\uffff"+
            "\1\3\1\2\3\3\1\uffff\3\3\1\uffff\2\3",
            "",
            ""
    };

    static final short[] DFA288_eot = DFA.unpackEncodedString(DFA288_eotS);
    static final short[] DFA288_eof = DFA.unpackEncodedString(DFA288_eofS);
    static final char[] DFA288_min = DFA.unpackEncodedStringToUnsignedChars(DFA288_minS);
    static final char[] DFA288_max = DFA.unpackEncodedStringToUnsignedChars(DFA288_maxS);
    static final short[] DFA288_accept = DFA.unpackEncodedString(DFA288_acceptS);
    static final short[] DFA288_special = DFA.unpackEncodedString(DFA288_specialS);
    static final short[][] DFA288_transition;

    static {
        int numStates = DFA288_transitionS.length;
        DFA288_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA288_transition[i] = DFA.unpackEncodedString(DFA288_transitionS[i]);
        }
    }

    class DFA288 extends DFA {

        public DFA288(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 288;
            this.eot = DFA288_eot;
            this.eof = DFA288_eof;
            this.min = DFA288_min;
            this.max = DFA288_max;
            this.accept = DFA288_accept;
            this.special = DFA288_special;
            this.transition = DFA288_transition;
        }
        public String getDescription() {
            return "1195:43: ( ( ws )? SASS_OPTIONAL )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA292_eotS =
        "\4\uffff";
    static final String DFA292_eofS =
        "\2\3\2\uffff";
    static final String DFA292_minS =
        "\2\5\2\uffff";
    static final String DFA292_maxS =
        "\2\154\2\uffff";
    static final String DFA292_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA292_specialS =
        "\4\uffff}>";
    static final String[] DFA292_transitionS = {
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\2\uffff\2\3\1\1\1\3"+
            "\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1\3\1\uffff\10"+
            "\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff\2\3\3\uffff"+
            "\1\3\1\uffff\3\3\1\2\6\3",
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\2\uffff\2\3\1\1\1"+
            "\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\10\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff\2\3\3\uffff"+
            "\1\3\1\uffff\3\3\1\2\6\3",
            "",
            ""
    };

    static final short[] DFA292_eot = DFA.unpackEncodedString(DFA292_eotS);
    static final short[] DFA292_eof = DFA.unpackEncodedString(DFA292_eofS);
    static final char[] DFA292_min = DFA.unpackEncodedStringToUnsignedChars(DFA292_minS);
    static final char[] DFA292_max = DFA.unpackEncodedStringToUnsignedChars(DFA292_maxS);
    static final short[] DFA292_accept = DFA.unpackEncodedString(DFA292_acceptS);
    static final short[] DFA292_special = DFA.unpackEncodedString(DFA292_specialS);
    static final short[][] DFA292_transition;

    static {
        int numStates = DFA292_transitionS.length;
        DFA292_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA292_transition[i] = DFA.unpackEncodedString(DFA292_transitionS[i]);
        }
    }

    class DFA292 extends DFA {

        public DFA292(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 292;
            this.eot = DFA292_eot;
            this.eof = DFA292_eof;
            this.min = DFA292_min;
            this.max = DFA292_max;
            this.accept = DFA292_accept;
            this.special = DFA292_special;
            this.transition = DFA292_transition;
        }
        public String getDescription() {
            return "1215:63: ( ( ws )? sass_else )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA299_eotS =
        "\5\uffff";
    static final String DFA299_eofS =
        "\5\uffff";
    static final String DFA299_minS =
        "\1\146\2\6\2\uffff";
    static final String DFA299_maxS =
        "\1\146\2\124\2\uffff";
    static final String DFA299_acceptS =
        "\3\uffff\1\1\1\2";
    static final String DFA299_specialS =
        "\5\uffff}>";
    static final String[] DFA299_transitionS = {
            "\1\1",
            "\1\4\6\uffff\1\3\11\uffff\1\2\73\uffff\2\2",
            "\1\4\6\uffff\1\3\11\uffff\1\2\73\uffff\2\2",
            "",
            ""
    };

    static final short[] DFA299_eot = DFA.unpackEncodedString(DFA299_eotS);
    static final short[] DFA299_eof = DFA.unpackEncodedString(DFA299_eofS);
    static final char[] DFA299_min = DFA.unpackEncodedStringToUnsignedChars(DFA299_minS);
    static final char[] DFA299_max = DFA.unpackEncodedStringToUnsignedChars(DFA299_maxS);
    static final short[] DFA299_accept = DFA.unpackEncodedString(DFA299_acceptS);
    static final short[] DFA299_special = DFA.unpackEncodedString(DFA299_specialS);
    static final short[][] DFA299_transition;

    static {
        int numStates = DFA299_transitionS.length;
        DFA299_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA299_transition[i] = DFA.unpackEncodedString(DFA299_transitionS[i]);
        }
    }

    class DFA299 extends DFA {

        public DFA299(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 299;
            this.eot = DFA299_eot;
            this.eof = DFA299_eof;
            this.min = DFA299_min;
            this.max = DFA299_max;
            this.accept = DFA299_accept;
            this.special = DFA299_special;
            this.transition = DFA299_transition;
        }
        public String getDescription() {
            return "1218:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | SASS_ELSE ( ws )? {...}? IDENT ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA298_eotS =
        "\4\uffff";
    static final String DFA298_eofS =
        "\2\3\2\uffff";
    static final String DFA298_minS =
        "\2\5\2\uffff";
    static final String DFA298_maxS =
        "\2\154\2\uffff";
    static final String DFA298_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA298_specialS =
        "\4\uffff}>";
    static final String[] DFA298_transitionS = {
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\2\uffff\2\3\1\1\1\3"+
            "\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1\3\1\uffff\10"+
            "\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff\2\3\3\uffff"+
            "\1\3\1\uffff\3\3\1\2\6\3",
            "\2\3\3\uffff\3\3\1\uffff\1\3\3\uffff\1\3\2\uffff\2\3\1\1\1"+
            "\3\3\uffff\1\3\1\uffff\3\3\21\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\10\3\1\uffff\1\3\7\uffff\1\3\13\uffff\2\1\7\uffff\2\3\3\uffff"+
            "\1\3\1\uffff\3\3\1\2\6\3",
            "",
            ""
    };

    static final short[] DFA298_eot = DFA.unpackEncodedString(DFA298_eotS);
    static final short[] DFA298_eof = DFA.unpackEncodedString(DFA298_eofS);
    static final char[] DFA298_min = DFA.unpackEncodedStringToUnsignedChars(DFA298_minS);
    static final char[] DFA298_max = DFA.unpackEncodedStringToUnsignedChars(DFA298_maxS);
    static final short[] DFA298_accept = DFA.unpackEncodedString(DFA298_acceptS);
    static final short[] DFA298_special = DFA.unpackEncodedString(DFA298_specialS);
    static final short[][] DFA298_transition;

    static {
        int numStates = DFA298_transitionS.length;
        DFA298_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA298_transition[i] = DFA.unpackEncodedString(DFA298_transitionS[i]);
        }
    }

    class DFA298 extends DFA {

        public DFA298(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 298;
            this.eot = DFA298_eot;
            this.eof = DFA298_eof;
            this.min = DFA298_min;
            this.max = DFA298_max;
            this.accept = DFA298_accept;
            this.special = DFA298_special;
            this.transition = DFA298_transition;
        }
        public String getDescription() {
            return "1222:110: ( ( ws )? sass_else )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA319_eotS =
        "\11\uffff";
    static final String DFA319_eofS =
        "\5\uffff\1\4\3\uffff";
    static final String DFA319_minS =
        "\3\4\2\uffff\4\4";
    static final String DFA319_maxS =
        "\3\u0091\2\uffff\4\u0091";
    static final String DFA319_acceptS =
        "\3\uffff\1\1\1\2\4\uffff";
    static final String DFA319_specialS =
        "\11\uffff}>";
    static final String[] DFA319_transitionS = {
            "\1\3\1\uffff\1\2\6\3\2\uffff\6\3\1\uffff\34\3\1\2\3\3\1\1\2"+
            "\2\131\3",
            "\1\3\1\uffff\1\10\6\3\1\4\1\uffff\6\3\1\5\1\3\1\6\32\3\1\10"+
            "\3\3\1\7\2\10\32\3\2\6\75\3",
            "\1\3\1\uffff\1\10\6\3\2\uffff\6\3\1\5\1\3\1\6\32\3\1\10\3\3"+
            "\1\7\2\10\32\3\2\6\75\3",
            "",
            "",
            "\1\3\1\uffff\7\3\2\uffff\u0083\3",
            "\1\3\1\uffff\1\10\6\3\2\uffff\10\3\1\6\32\3\1\10\3\3\1\7\2"+
            "\10\32\3\2\6\75\3",
            "\1\3\1\uffff\1\10\6\3\1\4\1\uffff\6\3\1\5\1\3\1\6\32\3\1\10"+
            "\3\3\1\7\2\10\32\3\2\6\75\3",
            "\1\3\1\uffff\1\10\6\3\2\uffff\6\3\1\5\1\3\1\6\32\3\1\10\3\3"+
            "\1\7\2\10\32\3\2\6\75\3"
    };

    static final short[] DFA319_eot = DFA.unpackEncodedString(DFA319_eotS);
    static final short[] DFA319_eof = DFA.unpackEncodedString(DFA319_eofS);
    static final char[] DFA319_min = DFA.unpackEncodedStringToUnsignedChars(DFA319_minS);
    static final char[] DFA319_max = DFA.unpackEncodedStringToUnsignedChars(DFA319_maxS);
    static final short[] DFA319_accept = DFA.unpackEncodedString(DFA319_acceptS);
    static final short[] DFA319_special = DFA.unpackEncodedString(DFA319_specialS);
    static final short[][] DFA319_transition;

    static {
        int numStates = DFA319_transitionS.length;
        DFA319_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA319_transition[i] = DFA.unpackEncodedString(DFA319_transitionS[i]);
        }
    }

    class DFA319 extends DFA {

        public DFA319(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 319;
            this.eot = DFA319_eot;
            this.eof = DFA319_eof;
            this.min = DFA319_min;
            this.max = DFA319_max;
            this.accept = DFA319_accept;
            this.special = DFA319_special;
            this.transition = DFA319_transition;
        }
        public String getDescription() {
            return "391:6: synpred6_Css3 : ( (~ ( LBRACE | SEMI | RBRACE | COLON ) )+ COLON (~ ( SEMI | LBRACE | RBRACE ) )+ SEMI | sass_declaration_interpolation_expression COLON );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA339_eotS =
        "\5\uffff";
    static final String DFA339_eofS =
        "\5\uffff";
    static final String DFA339_minS =
        "\2\6\3\uffff";
    static final String DFA339_maxS =
        "\2\124\3\uffff";
    static final String DFA339_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA339_specialS =
        "\5\uffff}>";
    static final String[] DFA339_transitionS = {
            "\3\3\2\uffff\1\2\1\3\5\uffff\1\3\3\uffff\1\3\1\1\5\uffff\1\3"+
            "\23\uffff\1\2\2\3\2\uffff\2\3\17\uffff\1\3\1\uffff\12\3\2\1",
            "\3\4\2\uffff\1\2\1\4\5\uffff\1\4\3\uffff\1\4\1\1\5\uffff\1"+
            "\4\23\uffff\1\2\2\4\2\uffff\2\4\17\uffff\1\4\1\uffff\12\4\2"+
            "\1",
            "",
            "",
            ""
    };

    static final short[] DFA339_eot = DFA.unpackEncodedString(DFA339_eotS);
    static final short[] DFA339_eof = DFA.unpackEncodedString(DFA339_eofS);
    static final char[] DFA339_min = DFA.unpackEncodedStringToUnsignedChars(DFA339_minS);
    static final char[] DFA339_max = DFA.unpackEncodedStringToUnsignedChars(DFA339_maxS);
    static final short[] DFA339_accept = DFA.unpackEncodedString(DFA339_acceptS);
    static final short[] DFA339_special = DFA.unpackEncodedString(DFA339_specialS);
    static final short[][] DFA339_transition;

    static {
        int numStates = DFA339_transitionS.length;
        DFA339_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA339_transition[i] = DFA.unpackEncodedString(DFA339_transitionS[i]);
        }
    }

    class DFA339 extends DFA {

        public DFA339(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 339;
            this.eot = DFA339_eot;
            this.eof = DFA339_eof;
            this.min = DFA339_min;
            this.max = DFA339_max;
            this.accept = DFA339_accept;
            this.special = DFA339_special;
            this.transition = DFA339_transition;
        }
        public String getDescription() {
            return "838:15: ( ws | ( ( ws )? operator ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA344_eotS =
        "\5\uffff";
    static final String DFA344_eofS =
        "\5\uffff";
    static final String DFA344_minS =
        "\2\6\3\uffff";
    static final String DFA344_maxS =
        "\2\124\3\uffff";
    static final String DFA344_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA344_specialS =
        "\5\uffff}>";
    static final String[] DFA344_transitionS = {
            "\3\3\3\uffff\1\3\5\uffff\1\3\3\uffff\1\3\1\1\5\uffff\1\3\23"+
            "\uffff\1\2\2\3\2\uffff\2\3\17\uffff\1\3\1\uffff\12\3\2\1",
            "\3\4\3\uffff\1\4\5\uffff\1\4\3\uffff\1\4\1\1\5\uffff\1\4\23"+
            "\uffff\1\2\2\4\2\uffff\2\4\17\uffff\1\4\1\uffff\12\4\2\1",
            "",
            "",
            ""
    };

    static final short[] DFA344_eot = DFA.unpackEncodedString(DFA344_eotS);
    static final short[] DFA344_eof = DFA.unpackEncodedString(DFA344_eofS);
    static final char[] DFA344_min = DFA.unpackEncodedStringToUnsignedChars(DFA344_minS);
    static final char[] DFA344_max = DFA.unpackEncodedStringToUnsignedChars(DFA344_maxS);
    static final short[] DFA344_accept = DFA.unpackEncodedString(DFA344_acceptS);
    static final short[] DFA344_special = DFA.unpackEncodedString(DFA344_specialS);
    static final short[][] DFA344_transition;

    static {
        int numStates = DFA344_transitionS.length;
        DFA344_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA344_transition[i] = DFA.unpackEncodedString(DFA344_transitionS[i]);
        }
    }

    class DFA344 extends DFA {

        public DFA344(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 344;
            this.eot = DFA344_eot;
            this.eof = DFA344_eof;
            this.min = DFA344_min;
            this.max = DFA344_max;
            this.accept = DFA344_accept;
            this.special = DFA344_special;
            this.transition = DFA344_transition;
        }
        public String getDescription() {
            return "909:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) | )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
 

    public static final BitSet FOLLOW_ws_in_styleSheet125 = new BitSet(new long[]{0xBFD40001D1641E70L,0x000007B830000080L});
    public static final BitSet FOLLOW_charSet_in_styleSheet135 = new BitSet(new long[]{0xBFD40001D1E41C70L,0x000007B830180080L});
    public static final BitSet FOLLOW_ws_in_styleSheet137 = new BitSet(new long[]{0xBFD40001D1641C70L,0x000007B830000080L});
    public static final BitSet FOLLOW_imports_in_styleSheet151 = new BitSet(new long[]{0xBFD40001D1641C70L,0x000007B830000080L});
    public static final BitSet FOLLOW_namespaces_in_styleSheet162 = new BitSet(new long[]{0xBFD40001D1641C60L,0x000007B830000080L});
    public static final BitSet FOLLOW_body_in_styleSheet174 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_styleSheet182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespace_in_namespaces199 = new BitSet(new long[]{0x0000000000800012L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_namespaces201 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_NAMESPACE_SYM_in_namespace217 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_namespace219 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_namespacePrefixName_in_namespace223 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_namespace225 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_namespace230 = new BitSet(new long[]{0x0000000000800020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_namespace232 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_namespace235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_namespacePrefixName248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_resourceIdentifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARSET_SYM_in_charSet286 = new BitSet(new long[]{0x0000000000800080L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_charSet288 = new BitSet(new long[]{0x0000000000800080L,0x0000000000180000L});
    public static final BitSet FOLLOW_charSetValue_in_charSet291 = new BitSet(new long[]{0x0000000000800020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_charSet293 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_charSet296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_charSetValue310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_imports324 = new BitSet(new long[]{0x0000000000800020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_imports326 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_imports329 = new BitSet(new long[]{0x0000000000800402L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_imports331 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_IMPORT_SYM_in_importItem361 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_importItem363 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem366 = new BitSet(new long[]{0x00400000008F0042L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_importItem376 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_mediaQueryList_in_importItem379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_SYM_in_importItem412 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_importItem414 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem417 = new BitSet(new long[]{0x00400000008F0842L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_importItem420 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_importItem423 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_importItem425 = new BitSet(new long[]{0x00000000008001C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_resourceIdentifier_in_importItem428 = new BitSet(new long[]{0x00400000008F0842L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_importItem440 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_mediaQueryList_in_importItem443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIA_SYM_in_media461 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_media463 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_mediaQueryList_in_media482 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_media490 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_media497 = new BitSet(new long[]{0xBFD40001D1E45860L,0x000013BA30180080L});
    public static final BitSet FOLLOW_ws_in_media499 = new BitSet(new long[]{0xBFD40001D1645860L,0x000013BA30000080L});
    public static final BitSet FOLLOW_syncToFollow_in_media502 = new BitSet(new long[]{0xBFD40001D1645860L,0x000013BA30000080L});
    public static final BitSet FOLLOW_mediaBody_in_media512 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_media519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mediaBodyItem_in_mediaBody557 = new BitSet(new long[]{0xBFD40001D1E41862L,0x000013BA30180080L});
    public static final BitSet FOLLOW_ws_in_mediaBody567 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_mediaBody570 = new BitSet(new long[]{0xBFD40001D1E41862L,0x000013BA30180080L});
    public static final BitSet FOLLOW_ws_in_mediaBody574 = new BitSet(new long[]{0xBFD40001D1641862L,0x000013BA30000080L});
    public static final BitSet FOLLOW_SEMI_in_mediaBody601 = new BitSet(new long[]{0xBFD40001D1E41862L,0x000013BA30180080L});
    public static final BitSet FOLLOW_ws_in_mediaBody603 = new BitSet(new long[]{0xBFD40001D1641862L,0x000013BA30000080L});
    public static final BitSet FOLLOW_cp_mixin_declaration_in_mediaBodyItem667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_mediaBodyItem680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_mediaBodyItem723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_extend_in_mediaBodyItem733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_debug_in_mediaBodyItem743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_control_in_mediaBodyItem753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_content_in_mediaBodyItem763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_mediaBodyItem771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_page_in_mediaBodyItem779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fontFace_in_mediaBodyItem787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vendorAtRule_in_mediaBodyItem795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_media_in_mediaBodyItem808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList822 = new BitSet(new long[]{0x0000000000800802L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaQueryList834 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_mediaQueryList837 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaQueryList839 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList842 = new BitSet(new long[]{0x0000000000800802L,0x0000000000180000L});
    public static final BitSet FOLLOW_mediaQueryOperator_in_mediaQuery858 = new BitSet(new long[]{0x0040000000870040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery860 = new BitSet(new long[]{0x0040000000070040L});
    public static final BitSet FOLLOW_mediaType_in_mediaQuery867 = new BitSet(new long[]{0x0000000000808002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery871 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_AND_in_mediaQuery874 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery876 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_mediaExpression_in_mediaQuery879 = new BitSet(new long[]{0x0000000000808002L,0x0000000000180000L});
    public static final BitSet FOLLOW_mediaExpression_in_mediaQuery887 = new BitSet(new long[]{0x0000000000808002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery891 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_AND_in_mediaQuery894 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaQuery896 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_mediaExpression_in_mediaQuery899 = new BitSet(new long[]{0x0000000000808002L,0x0000000000180000L});
    public static final BitSet FOLLOW_set_in_mediaQueryOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_mediaType935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_mediaType939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaType945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_mediaExpression965 = new BitSet(new long[]{0x0040000000C41040L,0x0000000000180080L});
    public static final BitSet FOLLOW_ws_in_mediaExpression967 = new BitSet(new long[]{0x0040000000C41040L,0x0000000000180080L});
    public static final BitSet FOLLOW_mediaFeature_in_mediaExpression970 = new BitSet(new long[]{0x0000000000B00000L,0x0000000000180000L});
    public static final BitSet FOLLOW_mediaFeatureValue_in_mediaExpression972 = new BitSet(new long[]{0x0000000000900000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_mediaExpression975 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_mediaExpression978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_mediaFeatureValue1003 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_mediaFeatureValue1006 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_mediaFeatureValue1008 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_expression_in_mediaFeatureValue1011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_mediaFeature1026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_mediaFeature1030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_mediaFeature1038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaFeature1042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bodyItem_in_body1079 = new BitSet(new long[]{0xBFD40001D1E41C62L,0x000007B830180080L});
    public static final BitSet FOLLOW_ws_in_body1089 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_body1092 = new BitSet(new long[]{0xBFD40001D1E41C62L,0x000007B830180080L});
    public static final BitSet FOLLOW_ws_in_body1096 = new BitSet(new long[]{0xBFD40001D1641C62L,0x000007B830000080L});
    public static final BitSet FOLLOW_SEMI_in_body1123 = new BitSet(new long[]{0xBFD40001D1E41C62L,0x000007B830180080L});
    public static final BitSet FOLLOW_ws_in_body1125 = new BitSet(new long[]{0xBFD40001D1641C62L,0x000007B830000080L});
    public static final BitSet FOLLOW_cp_mixin_declaration_in_bodyItem1195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_bodyItem1211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_bodyItem1220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_at_rule_in_bodyItem1232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_declaration_in_bodyItem1246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_bodyItem1269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_debug_in_bodyItem1283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_control_in_bodyItem1297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_function_declaration_in_bodyItem1311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_media_in_at_rule1341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_page_in_at_rule1349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_counterStyle_in_at_rule1357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fontFace_in_at_rule1365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vendorAtRule_in_at_rule1373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moz_document_in_vendorAtRule1390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_webkitKeyframes_in_vendorAtRule1394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_generic_at_rule_in_vendorAtRule1398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_atRuleId0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_IDENT_in_generic_at_rule1434 = new BitSet(new long[]{0x00000000008020C0L});
    public static final BitSet FOLLOW_WS_in_generic_at_rule1436 = new BitSet(new long[]{0x00000000008020C0L});
    public static final BitSet FOLLOW_atRuleId_in_generic_at_rule1441 = new BitSet(new long[]{0x0000000000802000L});
    public static final BitSet FOLLOW_WS_in_generic_at_rule1443 = new BitSet(new long[]{0x0000000000802000L});
    public static final BitSet FOLLOW_LBRACE_in_generic_at_rule1458 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_syncTo_RBRACE_in_generic_at_rule1470 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_generic_at_rule1480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document1496 = new BitSet(new long[]{0x000000000E800100L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_moz_document1498 = new BitSet(new long[]{0x000000000E800100L,0x0000000000180000L});
    public static final BitSet FOLLOW_moz_document_function_in_moz_document1503 = new BitSet(new long[]{0x0000000000802800L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_moz_document1505 = new BitSet(new long[]{0x0000000000002800L});
    public static final BitSet FOLLOW_COMMA_in_moz_document1511 = new BitSet(new long[]{0x000000000E800100L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_moz_document1513 = new BitSet(new long[]{0x000000000E800100L,0x0000000000180000L});
    public static final BitSet FOLLOW_moz_document_function_in_moz_document1516 = new BitSet(new long[]{0x0000000000802800L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_moz_document1518 = new BitSet(new long[]{0x0000000000002800L});
    public static final BitSet FOLLOW_LBRACE_in_moz_document1525 = new BitSet(new long[]{0xBFD40001D1E45C60L,0x000007B830180080L});
    public static final BitSet FOLLOW_ws_in_moz_document1527 = new BitSet(new long[]{0xBFD40001D1645C60L,0x000007B830000080L});
    public static final BitSet FOLLOW_body_in_moz_document1532 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_moz_document1537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_moz_document_function0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes1578 = new BitSet(new long[]{0x00000000008000C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1580 = new BitSet(new long[]{0x00000000000000C0L});
    public static final BitSet FOLLOW_atRuleId_in_webkitKeyframes1583 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1585 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_webkitKeyframes1590 = new BitSet(new long[]{0x0000000020804040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1592 = new BitSet(new long[]{0x0000000020004040L});
    public static final BitSet FOLLOW_webkitKeyframesBlock_in_webkitKeyframes1599 = new BitSet(new long[]{0x0000000020804040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframes1601 = new BitSet(new long[]{0x0000000020004040L});
    public static final BitSet FOLLOW_RBRACE_in_webkitKeyframes1608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock1621 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock1623 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_webkitKeyframesBlock1627 = new BitSet(new long[]{0xBFD40001D1E45C60L,0x00001BBA30180080L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock1630 = new BitSet(new long[]{0xBFD40001D1645C60L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_syncToFollow_in_webkitKeyframesBlock1633 = new BitSet(new long[]{0xBFD40001D1645C60L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_declarations_in_webkitKeyframesBlock1637 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_webkitKeyframesBlock1641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_webkitKeyframeSelectors1656 = new BitSet(new long[]{0x0000000000800802L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors1668 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_webkitKeyframeSelectors1671 = new BitSet(new long[]{0x0000000020800040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors1673 = new BitSet(new long[]{0x0000000020000040L});
    public static final BitSet FOLLOW_set_in_webkitKeyframeSelectors1676 = new BitSet(new long[]{0x0000000000800802L,0x0000000000180000L});
    public static final BitSet FOLLOW_PAGE_SYM_in_page1705 = new BitSet(new long[]{0x0000000000A02040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_page1707 = new BitSet(new long[]{0x0000000000202040L});
    public static final BitSet FOLLOW_IDENT_in_page1712 = new BitSet(new long[]{0x0000000000A02000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_page1714 = new BitSet(new long[]{0x0000000000202000L});
    public static final BitSet FOLLOW_pseudoPage_in_page1721 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_page1723 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_page1736 = new BitSet(new long[]{0x11C5FFFE00C45060L,0x0000000000180080L});
    public static final BitSet FOLLOW_ws_in_page1738 = new BitSet(new long[]{0x11C5FFFE00445060L,0x0000000000000080L});
    public static final BitSet FOLLOW_propertyDeclaration_in_page1781 = new BitSet(new long[]{0x0000000000804020L,0x0000000000180000L});
    public static final BitSet FOLLOW_margin_in_page1783 = new BitSet(new long[]{0x0000000000804020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_page1786 = new BitSet(new long[]{0x0000000000004020L});
    public static final BitSet FOLLOW_SEMI_in_page1792 = new BitSet(new long[]{0x11C5FFFE00C45060L,0x0000000000180080L});
    public static final BitSet FOLLOW_ws_in_page1794 = new BitSet(new long[]{0x11C5FFFE00445060L,0x0000000000000080L});
    public static final BitSet FOLLOW_propertyDeclaration_in_page1799 = new BitSet(new long[]{0x0000000000804020L,0x0000000000180000L});
    public static final BitSet FOLLOW_margin_in_page1801 = new BitSet(new long[]{0x0000000000804020L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_page1804 = new BitSet(new long[]{0x0000000000004020L});
    public static final BitSet FOLLOW_RBRACE_in_page1819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNTER_STYLE_SYM_in_counterStyle1840 = new BitSet(new long[]{0x0000000000800040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_counterStyle1842 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_counterStyle1845 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_counterStyle1847 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_counterStyle1858 = new BitSet(new long[]{0xBFD40001D1E45C60L,0x00001BBA30180080L});
    public static final BitSet FOLLOW_ws_in_counterStyle1860 = new BitSet(new long[]{0xBFD40001D1645C60L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_syncToDeclarationsRule_in_counterStyle1863 = new BitSet(new long[]{0xBFD40001D1645C60L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_declarations_in_counterStyle1867 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_counterStyle1878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FONT_FACE_SYM_in_fontFace1899 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_fontFace1901 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_fontFace1912 = new BitSet(new long[]{0xBFD40001D1E45C60L,0x00001BBA30180080L});
    public static final BitSet FOLLOW_ws_in_fontFace1914 = new BitSet(new long[]{0xBFD40001D1645C60L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_syncToDeclarationsRule_in_fontFace1917 = new BitSet(new long[]{0xBFD40001D1645C60L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_declarations_in_fontFace1921 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_fontFace1932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_margin_sym_in_margin1947 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_margin1949 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_margin1952 = new BitSet(new long[]{0xBFD40001D1E45C60L,0x00001BBA30180080L});
    public static final BitSet FOLLOW_ws_in_margin1954 = new BitSet(new long[]{0xBFD40001D1645C60L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_syncToDeclarationsRule_in_margin1957 = new BitSet(new long[]{0xBFD40001D1645C60L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_declarations_in_margin1959 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_margin1962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_margin_sym0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_pseudoPage2191 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_pseudoPage2193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_unaryOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_declaration_interpolation_expression_in_property2325 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_IDENT_in_property2337 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_GEN_in_property2350 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_cp_variable_in_property2365 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_property2373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectorsGroup_in_rule2408 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_rule2410 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_rule2417 = new BitSet(new long[]{0xBFD40001D1E45C60L,0x00001BBA30180080L});
    public static final BitSet FOLLOW_ws_in_rule2419 = new BitSet(new long[]{0xBFD40001D1645C60L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_syncToFollow_in_rule2422 = new BitSet(new long[]{0xBFD40001D1645C60L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_declarations_in_rule2433 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_rule2440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_declarations2488 = new BitSet(new long[]{0xBFD40001D1E41C62L,0x00001BBA30180080L});
    public static final BitSet FOLLOW_ws_in_declarations2498 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_declarations2501 = new BitSet(new long[]{0xBFD40001D1E41C62L,0x00001BBA30180080L});
    public static final BitSet FOLLOW_ws_in_declarations2505 = new BitSet(new long[]{0xBFD40001D1641C62L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_SEMI_in_declarations2532 = new BitSet(new long[]{0xBFD40001D1E41C62L,0x00001BBA30180080L});
    public static final BitSet FOLLOW_ws_in_declarations2534 = new BitSet(new long[]{0xBFD40001D1641C62L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_cp_variable_declaration_in_declaration2569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_nested_properties_in_declaration2582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_declaration2595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_declaration2632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_declaration_in_declaration2674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_declaration2687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_declaration2700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_at_rule_in_declaration2711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_control_in_declaration2722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_extend_in_declaration2733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_debug_in_declaration2744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_content_in_declaration2755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_function_return_in_declaration2766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importItem_in_declaration2777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_selector_interpolation_expression_in_selectorsGroup2846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_in_selectorsGroup2859 = new BitSet(new long[]{0x0000000000800802L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_selectorsGroup2862 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_selectorsGroup2865 = new BitSet(new long[]{0xBFD4000000A40840L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_selectorsGroup2867 = new BitSet(new long[]{0xBFD4000000240840L});
    public static final BitSet FOLLOW_selector_in_selectorsGroup2870 = new BitSet(new long[]{0x0000000000800802L,0x0000000000180000L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_selector2897 = new BitSet(new long[]{0x0038000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_selector2903 = new BitSet(new long[]{0x0038000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_combinator_in_selector2906 = new BitSet(new long[]{0xBFD4000000A40840L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_selector2908 = new BitSet(new long[]{0xBFD4000000240840L});
    public static final BitSet FOLLOW_ws_in_selector2912 = new BitSet(new long[]{0xBFD4000000240840L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_selector2915 = new BitSet(new long[]{0x0038000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_set_in_combinator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeSelector_in_simpleSelectorSequence2968 = new BitSet(new long[]{0xBFD4000000A40842L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_simpleSelectorSequence2978 = new BitSet(new long[]{0xBFD4000000240840L});
    public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence2981 = new BitSet(new long[]{0xBFD4000000A40842L,0x0000000000180000L});
    public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence2992 = new BitSet(new long[]{0xBFD4000000A40842L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_simpleSelectorSequence3002 = new BitSet(new long[]{0xBFD4000000240840L});
    public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence3005 = new BitSet(new long[]{0xBFD4000000A40842L,0x0000000000180000L});
    public static final BitSet FOLLOW_set_in_esPred0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespacePrefix_in_typeSelector3118 = new BitSet(new long[]{0xB000000000040040L});
    public static final BitSet FOLLOW_elementName_in_typeSelector3122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespacePrefixName_in_namespacePrefix3137 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_STAR_in_namespacePrefix3141 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_PIPE_in_namespacePrefix3145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_extend_only_selector_in_elementSubsequent3184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cssId_in_elementSubsequent3193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cssClass_in_elementSubsequent3202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_slAttribute_in_elementSubsequent3214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pseudo_in_elementSubsequent3226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_in_cssId3254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_cssId3260 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_NAME_in_cssId3262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_cssClass3290 = new BitSet(new long[]{0x0000000000040040L});
    public static final BitSet FOLLOW_set_in_cssClass3292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_elementName0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_slAttribute3364 = new BitSet(new long[]{0x3000000000800040L,0x0000000000180000L});
    public static final BitSet FOLLOW_namespacePrefix_in_slAttribute3371 = new BitSet(new long[]{0x3000000000800040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_slAttribute3374 = new BitSet(new long[]{0x3000000000800040L,0x0000000000180000L});
    public static final BitSet FOLLOW_slAttributeName_in_slAttribute3385 = new BitSet(new long[]{0x0000000000800000L,0x000000000018007FL});
    public static final BitSet FOLLOW_ws_in_slAttribute3387 = new BitSet(new long[]{0x0000000000000000L,0x000000000000007FL});
    public static final BitSet FOLLOW_set_in_slAttribute3429 = new BitSet(new long[]{0x00000000008000C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_slAttribute3609 = new BitSet(new long[]{0x00000000008000C0L,0x0000000000180000L});
    public static final BitSet FOLLOW_slAttributeValue_in_slAttribute3628 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180040L});
    public static final BitSet FOLLOW_ws_in_slAttribute3646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RBRACKET_in_slAttribute3675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_slAttributeName3691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_slAttributeValue3705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_pseudo3765 = new BitSet(new long[]{0x0000000000060040L});
    public static final BitSet FOLLOW_set_in_pseudo3829 = new BitSet(new long[]{0x0000000000880002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_pseudo3886 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_pseudo3889 = new BitSet(new long[]{0x10CC000020D411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_pseudo3891 = new BitSet(new long[]{0x10CC000020D411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_expression_in_pseudo3897 = new BitSet(new long[]{0x0000000000900000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_pseudo3899 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_STAR_in_pseudo3905 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_pseudo3910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_pseudo3989 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_pseudo3991 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_pseudo3994 = new BitSet(new long[]{0xBFD4000000B40840L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_pseudo3996 = new BitSet(new long[]{0xBFD4000000340840L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_pseudo3999 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_pseudo4002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_propertyDeclaration4041 = new BitSet(new long[]{0x11C4000000441040L,0x0000000000000080L});
    public static final BitSet FOLLOW_property_in_propertyDeclaration4044 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_propertyDeclaration4046 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4048 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_propertyValue_in_propertyDeclaration4051 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180100L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4054 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180100L});
    public static final BitSet FOLLOW_prio_in_propertyDeclaration4057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_propertyDeclaration4069 = new BitSet(new long[]{0x11C4000000441040L,0x0000000000000080L});
    public static final BitSet FOLLOW_property_in_propertyDeclaration4072 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_propertyDeclaration4074 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_propertyDeclaration4076 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_propertyValue_in_propertyDeclaration4079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_propertyValue4114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyValue_in_cp_propertyValue4122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertyValue4144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_expressionPredicate4180 = new BitSet(new long[]{0xEFFDFFFFFFBFDFF0L,0xFFFFFFFFFFFFFF7FL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_set_in_expressionPredicate4213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_syncTo_SEMI4331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_prio4386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_in_expression4407 = new BitSet(new long[]{0x00CE000020C419C2L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_expression4439 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_expression4444 = new BitSet(new long[]{0x0002000000800800L,0x0000000000180000L});
    public static final BitSet FOLLOW_operator_in_expression4447 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_expression4449 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_term_in_expression4458 = new BitSet(new long[]{0x00CE000020C419C2L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_unaryOperator_in_term4488 = new BitSet(new long[]{0x00C0000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_term4490 = new BitSet(new long[]{0x00C00000204411C0L,0x000000000007FE80L});
    public static final BitSet FOLLOW_function_in_term4519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_term4532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_term4544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENTAGE_in_term4556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LENGTH_in_term4568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMS_in_term4580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REM_in_term4592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXS_in_term4604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANGLE_in_term4616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIME_in_term4628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FREQ_in_term4640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RESOLUTION_in_term4652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIMENSION_in_term4664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_term4681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GEN_in_term4693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_URI_in_term4705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hexColor_in_term4717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_term4731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_term4745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionName_in_function4766 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_function4768 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_function4773 = new BitSet(new long[]{0x00CC000020DE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_function4775 = new BitSet(new long[]{0x00CC000020DE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_fnAttributes_in_function4802 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_function4833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_functionName4890 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_functionName4892 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_functionName4896 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_DOT_in_functionName4899 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_functionName4901 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_fnAttribute_in_fnAttributes4925 = new BitSet(new long[]{0x0000000000800802L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_fnAttributes4928 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_fnAttributes4931 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_fnAttributes4933 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_fnAttribute_in_fnAttributes4936 = new BitSet(new long[]{0x0000000000800802L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_fnAttributes4940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fnAttributeName_in_fnAttribute4978 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000180001L});
    public static final BitSet FOLLOW_ws_in_fnAttribute4980 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000001L});
    public static final BitSet FOLLOW_set_in_fnAttribute4983 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_fnAttribute4989 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_fnAttributeValue_in_fnAttribute4992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_in_fnAttribute5006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_fnAttribute5018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_fnAttributeName5046 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_DOT_in_fnAttributeName5049 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_fnAttributeName5051 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_fnAttributeName5071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_in_fnAttributeValue5096 = new BitSet(new long[]{0x00CE000020C411C2L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_fnAttributeValue5128 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_fnAttributeValue5133 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_SOLIDUS_in_fnAttributeValue5136 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_fnAttributeValue5138 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_term_in_fnAttributeValue5147 = new BitSet(new long[]{0x00CE000020C411C2L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_cp_math_expression_in_fnAttributeValue5168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_in_hexColor5186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ws5207 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration5255 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5257 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_cp_variable_declaration5260 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5262 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration5265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration5288 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5290 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_cp_variable_declaration5293 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5295 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration5298 = new BitSet(new long[]{0x0000000000800002L,0x0000000000380000L});
    public static final BitSet FOLLOW_ws_in_cp_variable_declaration5301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SASS_DEFAULT_in_cp_variable_declaration5304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_cp_variable5335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_VAR_in_cp_variable5367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_in_cp_expression_list5391 = new BitSet(new long[]{0x0000000000800802L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_expression_list5410 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_cp_expression_list5413 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression_list5415 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_cp_expression_list5418 = new BitSet(new long[]{0x0000000000800802L,0x0000000000180000L});
    public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression5455 = new BitSet(new long[]{0x00DC000020CE91C2L,0x000000000FDFFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression5481 = new BitSet(new long[]{0x0010000000808000L,0x000000000FD80000L});
    public static final BitSet FOLLOW_cp_expression_operator_in_cp_expression5484 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression5486 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression5490 = new BitSet(new long[]{0x00DC000020CE91C2L,0x000000000FDFFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression5510 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression5513 = new BitSet(new long[]{0x00DC000020CE91C2L,0x000000000FDFFF80L});
    public static final BitSet FOLLOW_set_in_cp_expression_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_cp_expression_atom5604 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression_atom5606 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_expression_atom5638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_cp_expression_atom5654 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_expression_atom5656 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_list_in_cp_expression_atom5659 = new BitSet(new long[]{0x0000000000900000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_expression_atom5661 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_expression_atom5664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expressions5696 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expressions5703 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expressions5705 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_cp_math_expression_atom_in_cp_math_expression5739 = new BitSet(new long[]{0x100E000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression5782 = new BitSet(new long[]{0x100E000000000000L});
    public static final BitSet FOLLOW_set_in_cp_math_expression5785 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression5795 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_atom_in_cp_math_expression5798 = new BitSet(new long[]{0x100E000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_term_in_cp_math_expression_atom5836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORTANT_SYM_in_cp_math_expression_atom5844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryOperator_in_cp_math_expression_atom5855 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression_atom5857 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_math_expression_atom5863 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression_atom5865 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expression_atom5868 = new BitSet(new long[]{0x0000000000900000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_math_expression_atom5870 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_math_expression_atom5873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_cp_mixin_declaration5913 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration5915 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration5917 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration5920 = new BitSet(new long[]{0x0000000000D01000L,0x00000000C0180080L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration5922 = new BitSet(new long[]{0x0000000000501000L,0x00000000C0000080L});
    public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration5925 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration5928 = new BitSet(new long[]{0x0000000000802000L,0x0000000100180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration5931 = new BitSet(new long[]{0x0000000000800000L,0x0000000100180000L});
    public static final BitSet FOLLOW_less_mixin_guarded_in_cp_mixin_declaration5934 = new BitSet(new long[]{0x0000000000802000L,0x0000000100180000L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_cp_mixin_declaration5958 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration5960 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration5962 = new BitSet(new long[]{0x0000000000882000L,0x0000000100180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration5965 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration5968 = new BitSet(new long[]{0x0000000000D01000L,0x00000000C0180080L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration5970 = new BitSet(new long[]{0x0000000000501000L,0x00000000C0000080L});
    public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration5973 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration5976 = new BitSet(new long[]{0x0000000000802000L,0x0000000100180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_declaration5990 = new BitSet(new long[]{0x0000000000802000L,0x0000000100180000L});
    public static final BitSet FOLLOW_cp_mixin_block_in_cp_mixin_declaration5993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_cp_mixin_call6033 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call6035 = new BitSet(new long[]{0x0000000000880002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6038 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_call6041 = new BitSet(new long[]{0x00CC000020DE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6043 = new BitSet(new long[]{0x00CC000020DE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_mixin_call_args_in_cp_mixin_call6046 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_call6049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_INCLUDE_in_cp_mixin_call6073 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6075 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call6077 = new BitSet(new long[]{0x0000000000882002L,0x0000000100180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6080 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_cp_mixin_call6083 = new BitSet(new long[]{0x00CC000020DE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6085 = new BitSet(new long[]{0x00CC000020DE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_mixin_call_args_in_cp_mixin_call6088 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_cp_mixin_call6091 = new BitSet(new long[]{0x0000000000802002L,0x0000000100180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call6096 = new BitSet(new long[]{0x0000000000802000L,0x0000000100180000L});
    public static final BitSet FOLLOW_cp_mixin_block_in_cp_mixin_call6099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_cp_mixin_block6132 = new BitSet(new long[]{0xBFD40001D1E45C60L,0x00001BBA30180080L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_block6134 = new BitSet(new long[]{0xBFD40001D1645C60L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_syncToFollow_in_cp_mixin_block6137 = new BitSet(new long[]{0xBFD40001D1645C60L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_declarations_in_cp_mixin_block6147 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_cp_mixin_block6154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_cp_mixin_name6183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6219 = new BitSet(new long[]{0x0000000000000822L,0x0000000040000000L});
    public static final BitSet FOLLOW_set_in_cp_mixin_call_args6223 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_args6231 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args6234 = new BitSet(new long[]{0x0000000000000822L,0x0000000040000000L});
    public static final BitSet FOLLOW_CP_DOTS_in_cp_mixin_call_args6239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_cp_mixin_call_arg6278 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6280 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_cp_mixin_call_arg6283 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6285 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg6288 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg6300 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg6308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_arg_in_cp_args_list6360 = new BitSet(new long[]{0x0000000000000822L,0x00000000C0000000L});
    public static final BitSet FOLLOW_set_in_cp_args_list6364 = new BitSet(new long[]{0x0000000000C01000L,0x0000000000180080L});
    public static final BitSet FOLLOW_ws_in_cp_args_list6374 = new BitSet(new long[]{0x0000000000401000L,0x0000000000000080L});
    public static final BitSet FOLLOW_cp_arg_in_cp_args_list6377 = new BitSet(new long[]{0x0000000000000822L,0x00000000C0000000L});
    public static final BitSet FOLLOW_set_in_cp_args_list6385 = new BitSet(new long[]{0x0000000000800000L,0x00000000C0180000L});
    public static final BitSet FOLLOW_ws_in_cp_args_list6393 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_set_in_cp_args_list6399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_cp_args_list6421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_in_cp_arg6453 = new BitSet(new long[]{0x0000000000A00002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_arg6455 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_COLON_in_cp_arg6460 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_cp_arg6462 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_cp_arg6465 = new BitSet(new long[]{0x0000000000800002L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_cp_arg6467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_WHEN_in_less_mixin_guarded6493 = new BitSet(new long[]{0x00000000008A0000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_less_mixin_guarded6495 = new BitSet(new long[]{0x00000000008A0000L,0x0000000000180000L});
    public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded6498 = new BitSet(new long[]{0x0000000000008802L});
    public static final BitSet FOLLOW_set_in_less_mixin_guarded6502 = new BitSet(new long[]{0x00000000008A0000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_less_mixin_guarded6510 = new BitSet(new long[]{0x00000000008A0000L,0x0000000000180000L});
    public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded6513 = new BitSet(new long[]{0x0000000000008802L});
    public static final BitSet FOLLOW_NOT_in_less_condition6543 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_less_condition6545 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_less_condition6554 = new BitSet(new long[]{0x0000000000C01040L,0x0000000000180080L});
    public static final BitSet FOLLOW_ws_in_less_condition6556 = new BitSet(new long[]{0x0000000000401040L,0x0000000000000080L});
    public static final BitSet FOLLOW_less_function_in_condition_in_less_condition6582 = new BitSet(new long[]{0x0000000000900000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_less_condition6584 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_cp_variable_in_less_condition6615 = new BitSet(new long[]{0x0010000000900000L,0x000000000E180001L});
    public static final BitSet FOLLOW_ws_in_less_condition6618 = new BitSet(new long[]{0x0010000000800000L,0x000000000E180001L});
    public static final BitSet FOLLOW_less_condition_operator_in_less_condition6621 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_less_condition6623 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_less_condition6626 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_less_condition6655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_less_fn_name_in_less_function_in_condition6681 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_less_function_in_condition6683 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_less_function_in_condition6686 = new BitSet(new long[]{0x0000000000C01000L,0x0000000000180080L});
    public static final BitSet FOLLOW_ws_in_less_function_in_condition6688 = new BitSet(new long[]{0x0000000000401000L,0x0000000000000080L});
    public static final BitSet FOLLOW_cp_variable_in_less_function_in_condition6691 = new BitSet(new long[]{0x0000000000900000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_less_function_in_condition6693 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_less_function_in_condition6696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_less_fn_name6718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_less_condition_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression6804 = new BitSet(new long[]{0x91D4000000A00842L,0x0000000000180000L});
    public static final BitSet FOLLOW_set_in_sass_selector_interpolation_expression6832 = new BitSet(new long[]{0x91D4000000A00842L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_selector_interpolation_expression6906 = new BitSet(new long[]{0x91D4000000200840L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_expression6943 = new BitSet(new long[]{0x91D4000000A00842L,0x0000000000180000L});
    public static final BitSet FOLLOW_set_in_sass_selector_interpolation_expression6979 = new BitSet(new long[]{0x91D4000000A00842L,0x0000000000180000L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7091 = new BitSet(new long[]{0x01C4000000800042L,0x0000000000180000L});
    public static final BitSet FOLLOW_set_in_sass_declaration_interpolation_expression7119 = new BitSet(new long[]{0x01C4000000800042L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_declaration_interpolation_expression7172 = new BitSet(new long[]{0x01C4000000000040L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_declaration_interpolation_expression7209 = new BitSet(new long[]{0x01C4000000800042L,0x0000000000180000L});
    public static final BitSet FOLLOW_set_in_sass_declaration_interpolation_expression7245 = new BitSet(new long[]{0x01C4000000800042L,0x0000000000180000L});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var7318 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_sass_interpolation_expression_var7320 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_sass_interpolation_expression_var7322 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_interpolation_expression_var7324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_sass_nested_properties7368 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_sass_nested_properties7370 = new BitSet(new long[]{0x00CC000020C431C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties7372 = new BitSet(new long[]{0x00CC000020C431C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_propertyValue_in_sass_nested_properties7376 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties7378 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_sass_nested_properties7383 = new BitSet(new long[]{0xBFD40001D1E45C60L,0x00001BBA30180080L});
    public static final BitSet FOLLOW_ws_in_sass_nested_properties7385 = new BitSet(new long[]{0xBFD40001D1645C60L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_syncToFollow_in_sass_nested_properties7388 = new BitSet(new long[]{0xBFD40001D1645C60L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_declarations_in_sass_nested_properties7390 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_nested_properties7393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_EXTEND_in_sass_extend7414 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_extend7416 = new BitSet(new long[]{0xBFD4000000240840L});
    public static final BitSet FOLLOW_simpleSelectorSequence_in_sass_extend7418 = new BitSet(new long[]{0x0000000000800002L,0x0000000400180000L});
    public static final BitSet FOLLOW_ws_in_sass_extend7421 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SASS_OPTIONAL_in_sass_extend7424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector7451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_sass_debug7472 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_debug7482 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_sass_debug7484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_if_in_sass_control7509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_for_in_sass_control7513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_each_in_sass_control7517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_while_in_sass_control7521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_IF_in_sass_if7542 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_if7544 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_sass_control_expression_in_sass_if7546 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_if7548 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_if7551 = new BitSet(new long[]{0x0000000000800002L,0x0000004000180000L});
    public static final BitSet FOLLOW_ws_in_sass_if7554 = new BitSet(new long[]{0x0000000000800000L,0x0000004000180000L});
    public static final BitSet FOLLOW_sass_else_in_sass_if7557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_ELSE_in_sass_else7584 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_else7586 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_else7589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_ELSE_in_sass_else7602 = new BitSet(new long[]{0x0000000000800040L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_else7604 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_else7609 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_sass_else7613 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_sass_control_expression_in_sass_else7616 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_else7618 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_else7621 = new BitSet(new long[]{0x0000000000800002L,0x0000004000180000L});
    public static final BitSet FOLLOW_ws_in_sass_else7624 = new BitSet(new long[]{0x0000000000800000L,0x0000004000180000L});
    public static final BitSet FOLLOW_sass_else_in_sass_else7627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_expression_in_sass_control_expression7650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_FOR_in_sass_for7675 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_for7677 = new BitSet(new long[]{0x0000000000401000L,0x0000000000000080L});
    public static final BitSet FOLLOW_cp_variable_in_sass_for7679 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_for7681 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_for7685 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_for7689 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_sass_for7691 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_for7693 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_for7697 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_for7701 = new BitSet(new long[]{0x00CC000020CC11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_math_expression_in_sass_for7703 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_for7705 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_for7708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_EACH_in_sass_each7729 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_each7731 = new BitSet(new long[]{0x0000000000401000L,0x0000000000000080L});
    public static final BitSet FOLLOW_cp_variable_in_sass_each7733 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_each7735 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_sass_each7739 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_each7743 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_list_in_sass_each7745 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_each7747 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_each7750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_WHILE_in_sass_while7775 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_while7777 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_sass_control_expression_in_sass_while7779 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_while7781 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_sass_control_block_in_sass_while7784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_sass_control_block7805 = new BitSet(new long[]{0xBFD40001D1E45C60L,0x00001BBA30180080L});
    public static final BitSet FOLLOW_ws_in_sass_control_block7807 = new BitSet(new long[]{0xBFD40001D1645C60L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_declarations_in_sass_control_block7810 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_control_block7813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_FUNCTION_in_sass_function_declaration7859 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration7861 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_sass_function_name_in_sass_function_declaration7863 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration7865 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_sass_function_declaration7868 = new BitSet(new long[]{0x0000000000501000L,0x00000000C0000080L});
    public static final BitSet FOLLOW_cp_args_list_in_sass_function_declaration7870 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_sass_function_declaration7873 = new BitSet(new long[]{0x0000000000802000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration7875 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_sass_function_declaration7878 = new BitSet(new long[]{0xBFD40001D1E45C60L,0x00001BBA30180080L});
    public static final BitSet FOLLOW_ws_in_sass_function_declaration7880 = new BitSet(new long[]{0xBFD40001D1645C60L,0x00001BBA30000080L});
    public static final BitSet FOLLOW_declarations_in_sass_function_declaration7883 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_RBRACE_in_sass_function_declaration7886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_sass_function_name7911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_RETURN_in_sass_function_return7932 = new BitSet(new long[]{0x0000000000800000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_sass_function_return7934 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_sass_function_return7936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_CONTENT_in_sass_content7961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred1_Css3370 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_mediaQueryList_in_synpred1_Css3373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred2_Css3434 = new BitSet(new long[]{0x00400000008F0040L,0x0000000000180000L});
    public static final BitSet FOLLOW_mediaQueryList_in_synpred2_Css3437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred3_Css3561 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred3_Css3564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_synpred4_Css3635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred4_Css3640 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_synpred4_Css3642 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_synpred4_Css3644 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred4_Css3647 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_set_in_synpred4_Css3650 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_RPAREN_in_synpred4_Css3655 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_set_in_synpred4_Css3658 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_LBRACE_in_synpred4_Css3663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred5_Css3677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred6_Css3689 = new BitSet(new long[]{0xFFFFFFFFFFFF9FD0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_COLON_in_synpred6_Css3701 = new BitSet(new long[]{0xFFFFFFFFFFFF9FD0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_set_in_synpred6_Css3703 = new BitSet(new long[]{0xFFFFFFFFFFFF9FF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_SEMI_in_synpred6_Css3713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_declaration_interpolation_expression_in_synpred6_Css3717 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_synpred6_Css3719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred7_Css3827 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred7_Css3830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred8_Css31083 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred8_Css31086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_synpred9_Css31163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred9_Css31168 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_synpred9_Css31170 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_synpred9_Css31172 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred9_Css31175 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_set_in_synpred9_Css31178 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_RPAREN_in_synpred9_Css31183 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_set_in_synpred9_Css31186 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_LBRACE_in_synpred9_Css31191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred10_Css31208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred11_Css32312 = new BitSet(new long[]{0xFFFFFFFFFFDFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_synpred11_Css32320 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred11_Css32322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred12_Css32492 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_SEMI_in_synpred12_Css32495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_variable_declaration_in_synpred13_Css32566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_nested_properties_in_synpred14_Css32579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_synpred15_Css32592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_synpred16_Css32610 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_synpred16_Css32612 = new BitSet(new long[]{0xFFFFFFFFFFFFDFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_set_in_synpred16_Css32614 = new BitSet(new long[]{0xFFFFFFFFFFFFDFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_set_in_synpred16_Css32624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SASS_MIXIN_in_synpred17_Css32642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred17_Css32647 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_synpred17_Css32649 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_synpred17_Css32651 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred17_Css32654 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_set_in_synpred17_Css32657 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_RPAREN_in_synpred17_Css32662 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_set_in_synpred17_Css32665 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_LBRACE_in_synpred17_Css32670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_mixin_call_in_synpred18_Css32684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_synpred19_Css32697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred20_Css32828 = new BitSet(new long[]{0xFFFFFFFFFFFFDFF0L,0xFFFFFFFFFFFFFFFFL,0x000000000003FFFFL});
    public static final BitSet FOLLOW_HASH_SYMBOL_in_synpred20_Css32840 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred20_Css32842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred21_Css32972 = new BitSet(new long[]{0x0FC0000000200000L});
    public static final BitSet FOLLOW_esPred_in_synpred21_Css32975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred22_Css32996 = new BitSet(new long[]{0x0FC0000000200000L});
    public static final BitSet FOLLOW_esPred_in_synpred22_Css32999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred23_Css33106 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_PIPE_in_synpred23_Css33115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred24_Css34414 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_synpred24_Css34419 = new BitSet(new long[]{0x0002000000800800L,0x0000000000180000L});
    public static final BitSet FOLLOW_operator_in_synpred24_Css34422 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_synpred24_Css34424 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_term_in_synpred24_Css34433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionName_in_synpred25_Css34511 = new BitSet(new long[]{0x0000000000880000L,0x0000000000180000L});
    public static final BitSet FOLLOW_ws_in_synpred25_Css34513 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred25_Css34516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fnAttributeName_in_synpred26_Css34965 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000180001L});
    public static final BitSet FOLLOW_ws_in_synpred26_Css34967 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000001L});
    public static final BitSet FOLLOW_set_in_synpred26_Css34970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred27_Css35103 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_synpred27_Css35108 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_SOLIDUS_in_synpred27_Css35111 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_ws_in_synpred27_Css35113 = new BitSet(new long[]{0x00CC000020C411C0L,0x00000000001FFE80L});
    public static final BitSet FOLLOW_term_in_synpred27_Css35122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred28_Css35399 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred28_Css35402 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_ws_in_synpred28_Css35404 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_in_synpred28_Css35407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred29_Css35474 = new BitSet(new long[]{0x0010000000808000L,0x000000000FD80000L});
    public static final BitSet FOLLOW_cp_expression_operator_in_synpred29_Css35477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred30_Css35504 = new BitSet(new long[]{0x00CC000020CE11C0L,0x00000000001FFF80L});
    public static final BitSet FOLLOW_cp_expression_atom_in_synpred30_Css35507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cp_math_expression_in_synpred31_Css35635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred32_Css35766 = new BitSet(new long[]{0x100E000000000000L});
    public static final BitSet FOLLOW_set_in_synpred32_Css35769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred33_Css36801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred34_Css36940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred35_Css37088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sass_interpolation_expression_var_in_synpred36_Css37206 = new BitSet(new long[]{0x0000000000000002L});

}